// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Workloads.Models;

namespace Azure.ResourceManager.Workloads
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _phpWorkloadResourcePhpWorkloadsClientDiagnostics;
        private PhpWorkloadsRestOperations _phpWorkloadResourcePhpWorkloadsRestClient;
        private ClientDiagnostics _defaultClientDiagnostics;
        private WorkloadsRestOperations _defaultRestClient;
        private ClientDiagnostics _sapVirtualInstanceSapVirtualInstancesClientDiagnostics;
        private SAPVirtualInstancesRestOperations _sapVirtualInstanceSapVirtualInstancesRestClient;
        private ClientDiagnostics _sapMonitormonitorsClientDiagnostics;
        private MonitorsRestOperations _sapMonitormonitorsRestClient;
        private ClientDiagnostics _skusClientDiagnostics;
        private SkusRestOperations _skusRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics PhpWorkloadResourcePhpWorkloadsClientDiagnostics => _phpWorkloadResourcePhpWorkloadsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Workloads", PhpWorkloadResource.ResourceType.Namespace, Diagnostics);
        private PhpWorkloadsRestOperations PhpWorkloadResourcePhpWorkloadsRestClient => _phpWorkloadResourcePhpWorkloadsRestClient ??= new PhpWorkloadsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(PhpWorkloadResource.ResourceType));
        private ClientDiagnostics DefaultClientDiagnostics => _defaultClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Workloads", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private WorkloadsRestOperations DefaultRestClient => _defaultRestClient ??= new WorkloadsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics SapVirtualInstanceSAPVirtualInstancesClientDiagnostics => _sapVirtualInstanceSapVirtualInstancesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Workloads", SapVirtualInstanceResource.ResourceType.Namespace, Diagnostics);
        private SAPVirtualInstancesRestOperations SapVirtualInstanceSAPVirtualInstancesRestClient => _sapVirtualInstanceSapVirtualInstancesRestClient ??= new SAPVirtualInstancesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SapVirtualInstanceResource.ResourceType));
        private ClientDiagnostics SapMonitormonitorsClientDiagnostics => _sapMonitormonitorsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Workloads", SapMonitorResource.ResourceType.Namespace, Diagnostics);
        private MonitorsRestOperations SapMonitormonitorsRestClient => _sapMonitormonitorsRestClient ??= new MonitorsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(SapMonitorResource.ResourceType));
        private ClientDiagnostics SkusClientDiagnostics => _skusClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Workloads", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SkusRestOperations SkusRestClient => _skusRestClient ??= new SkusRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists PHP workload resources for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/phpWorkloads
        /// Operation Id: PhpWorkloads_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PhpWorkloadResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PhpWorkloadResource> GetPhpWorkloadResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PhpWorkloadResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PhpWorkloadResourcePhpWorkloadsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPhpWorkloadResources");
                scope.Start();
                try
                {
                    var response = await PhpWorkloadResourcePhpWorkloadsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PhpWorkloadResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PhpWorkloadResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PhpWorkloadResourcePhpWorkloadsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPhpWorkloadResources");
                scope.Start();
                try
                {
                    var response = await PhpWorkloadResourcePhpWorkloadsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PhpWorkloadResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists PHP workload resources for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/phpWorkloads
        /// Operation Id: PhpWorkloads_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PhpWorkloadResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PhpWorkloadResource> GetPhpWorkloadResources(CancellationToken cancellationToken = default)
        {
            Page<PhpWorkloadResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PhpWorkloadResourcePhpWorkloadsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPhpWorkloadResources");
                scope.Start();
                try
                {
                    var response = PhpWorkloadResourcePhpWorkloadsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PhpWorkloadResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PhpWorkloadResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PhpWorkloadResourcePhpWorkloadsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPhpWorkloadResources");
                scope.Start();
                try
                {
                    var response = PhpWorkloadResourcePhpWorkloadsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PhpWorkloadResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get SAP sizing recommendations.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSizingRecommendations
        /// Operation Id: SAPSizingRecommendations
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Sizing Recommendation Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SapSizingRecommendationResult>> SapSizingRecommendationsAsync(AzureLocation location, SapSizingRecommendationContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SapSizingRecommendations");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.SapSizingRecommendationsAsync(Id.SubscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get SAP sizing recommendations.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSizingRecommendations
        /// Operation Id: SAPSizingRecommendations
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Sizing Recommendation Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SapSizingRecommendationResult> SapSizingRecommendations(AzureLocation location, SapSizingRecommendationContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SapSizingRecommendations");
            scope.Start();
            try
            {
                var response = DefaultRestClient.SapSizingRecommendations(Id.SubscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get SAP supported SKUs.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSapSupportedSku
        /// Operation Id: SAPSupportedSku
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Supported SKU Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SapSupportedResourceSkusResult>> SapSupportedSkuAsync(AzureLocation location, SapSupportedSkusContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SapSupportedSku");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.SapSupportedSkuAsync(Id.SubscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get SAP supported SKUs.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSapSupportedSku
        /// Operation Id: SAPSupportedSku
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Supported SKU Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SapSupportedResourceSkusResult> SapSupportedSku(AzureLocation location, SapSupportedSkusContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SapSupportedSku");
            scope.Start();
            try
            {
                var response = DefaultRestClient.SapSupportedSku(Id.SubscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get SAP Disk Configurations.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getDiskConfigurations
        /// Operation Id: SAPDiskConfigurations
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Disk Configurations Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SapDiskConfigurationsResult>> SapDiskConfigurationsAsync(AzureLocation location, SapDiskConfigurationsContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SapDiskConfigurations");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.SapDiskConfigurationsAsync(Id.SubscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get SAP Disk Configurations.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getDiskConfigurations
        /// Operation Id: SAPDiskConfigurations
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Disk Configurations Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SapDiskConfigurationsResult> SapDiskConfigurations(AzureLocation location, SapDiskConfigurationsContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SapDiskConfigurations");
            scope.Start();
            try
            {
                var response = DefaultRestClient.SapDiskConfigurations(Id.SubscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get SAP Availability Zone Details.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getAvailabilityZoneDetails
        /// Operation Id: SAPAvailabilityZoneDetails
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Availability Zone Details Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SapAvailabilityZoneDetailsResult>> SapAvailabilityZoneDetailsAsync(AzureLocation location, SapAvailabilityZoneDetailsContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SapAvailabilityZoneDetails");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.SapAvailabilityZoneDetailsAsync(Id.SubscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get SAP Availability Zone Details.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getAvailabilityZoneDetails
        /// Operation Id: SAPAvailabilityZoneDetails
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Availability Zone Details Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SapAvailabilityZoneDetailsResult> SapAvailabilityZoneDetails(AzureLocation location, SapAvailabilityZoneDetailsContent content = null, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.SapAvailabilityZoneDetails");
            scope.Start();
            try
            {
                var response = DefaultRestClient.SapAvailabilityZoneDetails(Id.SubscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets all Virtual Instances for SAP in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/sapVirtualInstances
        /// Operation Id: SAPVirtualInstances_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SapVirtualInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SapVirtualInstanceResource> GetSapVirtualInstancesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SapVirtualInstanceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SapVirtualInstanceSAPVirtualInstancesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSapVirtualInstances");
                scope.Start();
                try
                {
                    var response = await SapVirtualInstanceSAPVirtualInstancesRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SapVirtualInstanceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SapVirtualInstanceResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SapVirtualInstanceSAPVirtualInstancesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSapVirtualInstances");
                scope.Start();
                try
                {
                    var response = await SapVirtualInstanceSAPVirtualInstancesRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SapVirtualInstanceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets all Virtual Instances for SAP in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/sapVirtualInstances
        /// Operation Id: SAPVirtualInstances_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SapVirtualInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SapVirtualInstanceResource> GetSapVirtualInstances(CancellationToken cancellationToken = default)
        {
            Page<SapVirtualInstanceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SapVirtualInstanceSAPVirtualInstancesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSapVirtualInstances");
                scope.Start();
                try
                {
                    var response = SapVirtualInstanceSAPVirtualInstancesRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SapVirtualInstanceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SapVirtualInstanceResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SapVirtualInstanceSAPVirtualInstancesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSapVirtualInstances");
                scope.Start();
                try
                {
                    var response = SapVirtualInstanceSAPVirtualInstancesRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SapVirtualInstanceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/monitors
        /// Operation Id: monitors_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SapMonitorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SapMonitorResource> GetSapMonitorsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SapMonitorResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SapMonitormonitorsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSapMonitors");
                scope.Start();
                try
                {
                    var response = await SapMonitormonitorsRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SapMonitorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SapMonitorResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SapMonitormonitorsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSapMonitors");
                scope.Start();
                try
                {
                    var response = await SapMonitormonitorsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SapMonitorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/monitors
        /// Operation Id: monitors_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SapMonitorResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SapMonitorResource> GetSapMonitors(CancellationToken cancellationToken = default)
        {
            Page<SapMonitorResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SapMonitormonitorsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSapMonitors");
                scope.Start();
                try
                {
                    var response = SapMonitormonitorsRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SapMonitorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SapMonitorResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SapMonitormonitorsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSapMonitors");
                scope.Start();
                try
                {
                    var response = SapMonitormonitorsRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SapMonitorResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the available SKUs under this PR
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/skus
        /// Operation Id: Skus_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SkuDefinition" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SkuDefinition> GetSkusAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SkuDefinition>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkus");
                scope.Start();
                try
                {
                    var response = await SkusRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SkuDefinition>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkus");
                scope.Start();
                try
                {
                    var response = await SkusRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all the available SKUs under this PR
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/skus
        /// Operation Id: Skus_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SkuDefinition" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SkuDefinition> GetSkus(CancellationToken cancellationToken = default)
        {
            Page<SkuDefinition> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = SkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkus");
                scope.Start();
                try
                {
                    var response = SkusRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SkuDefinition> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = SkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkus");
                scope.Start();
                try
                {
                    var response = SkusRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
