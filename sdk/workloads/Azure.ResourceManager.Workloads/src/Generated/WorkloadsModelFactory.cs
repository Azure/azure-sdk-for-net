// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Workloads;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class WorkloadsModelFactory
    {
        /// <summary> Initializes a new instance of PhpWorkloadResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> Indicates which kind of php workload this resource represent e.g WordPress. </param>
        /// <param name="sku"> Php workloads SKU. </param>
        /// <param name="identity"> Identity for the resource. Currently not supported. </param>
        /// <param name="appLocation"> The infra resources for PHP workload will be created in this location. </param>
        /// <param name="managedResourceGroupName"> Managed resource group configuration of the workload. </param>
        /// <param name="adminUserProfile"> Admin user profile used for VM and VMSS. </param>
        /// <param name="webNodesProfile"> VMSS web nodes profile. </param>
        /// <param name="controllerProfile"> Controller VM profile. </param>
        /// <param name="networkProfile"> Network profile. </param>
        /// <param name="databaseProfile"> Database profile. </param>
        /// <param name="siteDomainName"> Site profile. </param>
        /// <param name="fileshareProfile"> File share profile. </param>
        /// <param name="phpVersion"> PHP profile. </param>
        /// <param name="searchProfile"> Search profile. </param>
        /// <param name="cacheProfile"> Cache profile. </param>
        /// <param name="backupProfile"> Backup profile. </param>
        /// <param name="provisioningState"> Php workload resource provisioning state. </param>
        /// <returns> A new <see cref="Workloads.PhpWorkloadResourceData"/> instance for mocking. </returns>
        public static PhpWorkloadResourceData PhpWorkloadResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, WorkloadKind kind = default, WorkloadsSku sku = null, PhpWorkloadResourceIdentity identity = null, AzureLocation? appLocation = null, string managedResourceGroupName = null, UserProfile adminUserProfile = null, VmssNodesProfile webNodesProfile = null, NodeProfile controllerProfile = null, NetworkProfile networkProfile = null, DatabaseProfile databaseProfile = null, string siteDomainName = null, FileshareProfile fileshareProfile = null, PhpVersion phpVersion = default, SearchProfile searchProfile = null, CacheProfile cacheProfile = null, BackupProfile backupProfile = null, PhpWorkloadProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PhpWorkloadResourceData(id, name, resourceType, systemData, tags, location, kind, sku, identity, appLocation, new ManagedRGConfiguration(managedResourceGroupName), adminUserProfile, webNodesProfile, controllerProfile, networkProfile, databaseProfile, new SiteProfile(siteDomainName), fileshareProfile, new PhpProfile(phpVersion), searchProfile, cacheProfile, backupProfile, provisioningState);
        }

        /// <summary> Initializes a new instance of VmssNodesProfile. </summary>
        /// <param name="name"> VM or VMSS name. </param>
        /// <param name="nodeSku"> VM SKU for node(s). </param>
        /// <param name="osImage"> OS image used for creating the nodes. </param>
        /// <param name="osDisk"> OS disk details. </param>
        /// <param name="dataDisks"> Data disks details. This property is not in use right now. </param>
        /// <param name="nodeResourceIds"> VM/VMSS resource ARM Ids. </param>
        /// <param name="autoScaleMinCount"> Minimum number of nodes for autoscale. </param>
        /// <param name="autoScaleMaxCount"> Maximum number of nodes for autoscale. </param>
        /// <returns> A new <see cref="Models.VmssNodesProfile"/> instance for mocking. </returns>
        public static VmssNodesProfile VmssNodesProfile(string name = null, string nodeSku = null, OSImageProfile osImage = null, DiskInfo osDisk = null, IEnumerable<DiskInfo> dataDisks = null, IEnumerable<ResourceIdentifier> nodeResourceIds = null, int? autoScaleMinCount = null, int? autoScaleMaxCount = null)
        {
            dataDisks ??= new List<DiskInfo>();
            nodeResourceIds ??= new List<ResourceIdentifier>();

            return new VmssNodesProfile(name, nodeSku, osImage, osDisk, dataDisks?.ToList(), nodeResourceIds?.ToList(), autoScaleMinCount, autoScaleMaxCount);
        }

        /// <summary> Initializes a new instance of NodeProfile. </summary>
        /// <param name="name"> VM or VMSS name. </param>
        /// <param name="nodeSku"> VM SKU for node(s). </param>
        /// <param name="osImage"> OS image used for creating the nodes. </param>
        /// <param name="osDisk"> OS disk details. </param>
        /// <param name="dataDisks"> Data disks details. This property is not in use right now. </param>
        /// <param name="nodeResourceIds"> VM/VMSS resource ARM Ids. </param>
        /// <returns> A new <see cref="Models.NodeProfile"/> instance for mocking. </returns>
        public static NodeProfile NodeProfile(string name = null, string nodeSku = null, OSImageProfile osImage = null, DiskInfo osDisk = null, IEnumerable<DiskInfo> dataDisks = null, IEnumerable<ResourceIdentifier> nodeResourceIds = null)
        {
            dataDisks ??= new List<DiskInfo>();
            nodeResourceIds ??= new List<ResourceIdentifier>();

            return new NodeProfile(name, nodeSku, osImage, osDisk, dataDisks?.ToList(), nodeResourceIds?.ToList());
        }

        /// <summary> Initializes a new instance of OSImageProfile. </summary>
        /// <param name="publisher"> OS image publisher. </param>
        /// <param name="offer"> OS image offer. </param>
        /// <param name="sku"> OS image sku. </param>
        /// <param name="version"> OS image version. </param>
        /// <returns> A new <see cref="Models.OSImageProfile"/> instance for mocking. </returns>
        public static OSImageProfile OSImageProfile(OSImagePublisher? publisher = null, OSImageOffer? offer = null, OSImageSku? sku = null, OSImageVersion? version = null)
        {
            return new OSImageProfile(publisher, offer, sku, version);
        }

        /// <summary> Initializes a new instance of DiskInfo. </summary>
        /// <param name="storageType"> Storage type. </param>
        /// <param name="sizeInGB"> Disk size in GB. </param>
        /// <returns> A new <see cref="Models.DiskInfo"/> instance for mocking. </returns>
        public static DiskInfo DiskInfo(DiskStorageType storageType = default, long? sizeInGB = null)
        {
            return new DiskInfo(storageType, sizeInGB);
        }

        /// <summary> Initializes a new instance of NetworkProfile. </summary>
        /// <param name="loadBalancerType"> Load balancer type. </param>
        /// <param name="loadBalancerSku"> Load balancer SKU. </param>
        /// <param name="loadBalancerTier"> Load balancer tier. </param>
        /// <param name="capacity"> Capacity, applicable only for Application Gateway. </param>
        /// <param name="azureFrontDoorEnabled"> Whether to enable Azure front door. </param>
        /// <param name="vNetResourceId"> Virtual network resource Id. </param>
        /// <param name="loadBalancerResourceId"> Azure Loadbalancer or ApplicationGateway resource Id. </param>
        /// <param name="azureFrontDoorResourceId"> Azure front door resource id. </param>
        /// <param name="frontEndPublicIPResourceId"> Loadbalancer front-end IP address resource Id. </param>
        /// <param name="outboundPublicIPResourceIds"> List of outbound public IP resource IDs. </param>
        /// <returns> A new <see cref="Models.NetworkProfile"/> instance for mocking. </returns>
        public static NetworkProfile NetworkProfile(LoadBalancerType loadBalancerType = default, string loadBalancerSku = null, string loadBalancerTier = null, int? capacity = null, AzureFrontDoorEnabled? azureFrontDoorEnabled = null, ResourceIdentifier vNetResourceId = null, ResourceIdentifier loadBalancerResourceId = null, ResourceIdentifier azureFrontDoorResourceId = null, ResourceIdentifier frontEndPublicIPResourceId = null, IEnumerable<string> outboundPublicIPResourceIds = null)
        {
            outboundPublicIPResourceIds ??= new List<string>();

            return new NetworkProfile(loadBalancerType, loadBalancerSku, loadBalancerTier, capacity, azureFrontDoorEnabled, vNetResourceId, loadBalancerResourceId, azureFrontDoorResourceId, frontEndPublicIPResourceId, outboundPublicIPResourceIds?.ToList());
        }

        /// <summary> Initializes a new instance of DatabaseProfile. </summary>
        /// <param name="databaseType"> Database type. </param>
        /// <param name="serverName"> Database server name. </param>
        /// <param name="version"> Database version. </param>
        /// <param name="sku"> The name of the server SKU, e.g. Standard_D32s_v4. </param>
        /// <param name="tier"> Tier of the server SKU. </param>
        /// <param name="haEnabled"> Whether to enable HA for the server. </param>
        /// <param name="storageSku"> SKU name for database storage. </param>
        /// <param name="storageInGB"> Database storage size in GB. </param>
        /// <param name="storageIops"> Storage IOPS for the server. </param>
        /// <param name="backupRetentionDays"> Backup retention days for the server. </param>
        /// <param name="sslEnforcementEnabled"> Whether to enable SSL enforcement on the database. </param>
        /// <param name="serverResourceId"> Azure Database Server resource Id. </param>
        /// <returns> A new <see cref="Models.DatabaseProfile"/> instance for mocking. </returns>
        public static DatabaseProfile DatabaseProfile(DatabaseType databaseType = default, string serverName = null, string version = null, string sku = null, DatabaseTier tier = default, HAEnabled? haEnabled = null, string storageSku = null, long? storageInGB = null, long? storageIops = null, int? backupRetentionDays = null, EnableSslEnforcement? sslEnforcementEnabled = null, ResourceIdentifier serverResourceId = null)
        {
            return new DatabaseProfile(databaseType, serverName, version, sku, tier, haEnabled, storageSku, storageInGB, storageIops, backupRetentionDays, sslEnforcementEnabled, serverResourceId);
        }

        /// <summary> Initializes a new instance of FileshareProfile. </summary>
        /// <param name="shareType"> Share type. </param>
        /// <param name="storageType"> File share backing storage type. </param>
        /// <param name="shareSizeInGB"> File share size in GB. </param>
        /// <param name="storageResourceId"> File share storage resource id. </param>
        /// <param name="shareName"> File share name. </param>
        /// <returns> A new <see cref="Models.FileshareProfile"/> instance for mocking. </returns>
        public static FileshareProfile FileshareProfile(FileShareType shareType = default, FileShareStorageType storageType = default, long? shareSizeInGB = null, ResourceIdentifier storageResourceId = null, string shareName = null)
        {
            return new FileshareProfile(shareType, storageType, shareSizeInGB, storageResourceId, shareName);
        }

        /// <summary> Initializes a new instance of SearchProfile. </summary>
        /// <param name="name"> VM or VMSS name. </param>
        /// <param name="nodeSku"> VM SKU for node(s). </param>
        /// <param name="osImage"> OS image used for creating the nodes. </param>
        /// <param name="osDisk"> OS disk details. </param>
        /// <param name="dataDisks"> Data disks details. This property is not in use right now. </param>
        /// <param name="nodeResourceIds"> VM/VMSS resource ARM Ids. </param>
        /// <param name="searchType"> Search type. </param>
        /// <returns> A new <see cref="Models.SearchProfile"/> instance for mocking. </returns>
        public static SearchProfile SearchProfile(string name = null, string nodeSku = null, OSImageProfile osImage = null, DiskInfo osDisk = null, IEnumerable<DiskInfo> dataDisks = null, IEnumerable<ResourceIdentifier> nodeResourceIds = null, SearchType searchType = default)
        {
            dataDisks ??= new List<DiskInfo>();
            nodeResourceIds ??= new List<ResourceIdentifier>();

            return new SearchProfile(name, nodeSku, osImage, osDisk, dataDisks?.ToList(), nodeResourceIds?.ToList(), searchType);
        }

        /// <summary> Initializes a new instance of CacheProfile. </summary>
        /// <param name="name"> Cache name. </param>
        /// <param name="skuName"> Cache SKU name. </param>
        /// <param name="family"> Cache family. </param>
        /// <param name="capacity"> Cache capacity. </param>
        /// <param name="cacheResourceId"> Cache resource Id. </param>
        /// <returns> A new <see cref="Models.CacheProfile"/> instance for mocking. </returns>
        public static CacheProfile CacheProfile(string name = null, string skuName = null, RedisCacheFamily family = default, long capacity = default, ResourceIdentifier cacheResourceId = null)
        {
            return new CacheProfile(name, skuName, family, capacity, cacheResourceId);
        }

        /// <summary> Initializes a new instance of BackupProfile. </summary>
        /// <param name="backupEnabled"> Whether to enable Azure backup for the workload. </param>
        /// <param name="vaultResourceId"> Backup vault resource Id. </param>
        /// <returns> A new <see cref="Models.BackupProfile"/> instance for mocking. </returns>
        public static BackupProfile BackupProfile(EnableBackup backupEnabled = default, ResourceIdentifier vaultResourceId = null)
        {
            return new BackupProfile(backupEnabled, vaultResourceId);
        }

        /// <summary> Initializes a new instance of WorkloadsSku. </summary>
        /// <param name="name"> The name of the SKU. Ex - P3. It is typically a letter+number code. </param>
        /// <param name="tier"> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </param>
        /// <param name="size"> The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. </param>
        /// <param name="family"> If the service has different generations of hardware, for the same SKU, then that can be captured here. </param>
        /// <param name="capacity"> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </param>
        /// <returns> A new <see cref="Models.WorkloadsSku"/> instance for mocking. </returns>
        public static WorkloadsSku WorkloadsSku(string name = null, WorkloadsSkuTier? tier = null, string size = null, string family = null, int? capacity = null)
        {
            return new WorkloadsSku(name, tier, size, family, capacity);
        }

        /// <summary> Initializes a new instance of PhpWorkloadResourceIdentity. </summary>
        /// <param name="managedServiceIdentityType"> Type of manage identity. </param>
        /// <param name="userAssignedIdentities"> User assigned identities dictionary. </param>
        /// <returns> A new <see cref="Models.PhpWorkloadResourceIdentity"/> instance for mocking. </returns>
        public static PhpWorkloadResourceIdentity PhpWorkloadResourceIdentity(ManagedServiceIdentityType managedServiceIdentityType = default, IDictionary<string, UserAssignedIdentity> userAssignedIdentities = null)
        {
            userAssignedIdentities ??= new Dictionary<string, UserAssignedIdentity>();

            return new PhpWorkloadResourceIdentity(managedServiceIdentityType, userAssignedIdentities);
        }

        /// <summary> Initializes a new instance of UserAssignedServiceIdentity. </summary>
        /// <param name="managedServiceIdentityType"> Type of manage identity. </param>
        /// <param name="userAssignedIdentities"> User assigned identities dictionary. </param>
        /// <returns> A new <see cref="Models.UserAssignedServiceIdentity"/> instance for mocking. </returns>
        public static UserAssignedServiceIdentity UserAssignedServiceIdentity(ManagedServiceIdentityType managedServiceIdentityType = default, IDictionary<string, UserAssignedIdentity> userAssignedIdentities = null)
        {
            userAssignedIdentities ??= new Dictionary<string, UserAssignedIdentity>();

            return new UserAssignedServiceIdentity(managedServiceIdentityType, userAssignedIdentities);
        }

        /// <summary> Initializes a new instance of PatchResourceRequestBodyIdentity. </summary>
        /// <param name="managedServiceIdentityType"> Type of manage identity. </param>
        /// <param name="userAssignedIdentities"> User assigned identities dictionary. </param>
        /// <returns> A new <see cref="Models.PatchResourceRequestBodyIdentity"/> instance for mocking. </returns>
        public static PatchResourceRequestBodyIdentity PatchResourceRequestBodyIdentity(ManagedServiceIdentityType managedServiceIdentityType = default, IDictionary<string, UserAssignedIdentity> userAssignedIdentities = null)
        {
            userAssignedIdentities ??= new Dictionary<string, UserAssignedIdentity>();

            return new PatchResourceRequestBodyIdentity(managedServiceIdentityType, userAssignedIdentities);
        }

        /// <summary> Initializes a new instance of WordPressInstanceResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="version"> Application version. </param>
        /// <param name="databaseName"> Database name used by the application. </param>
        /// <param name="databaseUser"> User name used by the application to connect to database. </param>
        /// <param name="siteUri"> Site Url to access the WordPress application. </param>
        /// <param name="provisioningState"> WordPress instance provisioning state. </param>
        /// <returns> A new <see cref="Workloads.WordPressInstanceResourceData"/> instance for mocking. </returns>
        public static WordPressInstanceResourceData WordPressInstanceResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, WordPressVersion? version = null, string databaseName = null, string databaseUser = null, Uri siteUri = null, ApplicationProvisioningState? provisioningState = null)
        {
            return new WordPressInstanceResourceData(id, name, resourceType, systemData, version, databaseName, databaseUser, siteUri, provisioningState);
        }

        /// <summary> Initializes a new instance of SapSizingRecommendationResult. </summary>
        /// <param name="deploymentType"> The deployment Type. </param>
        /// <returns> A new <see cref="Models.SapSizingRecommendationResult"/> instance for mocking. </returns>
        public static SapSizingRecommendationResult SapSizingRecommendationResult(string deploymentType = null)
        {
            return new UnknownSapSizingRecommendationResult(deploymentType);
        }

        /// <summary> Initializes a new instance of SapSupportedResourceSkusResult. </summary>
        /// <param name="supportedSkus"> Gets the list of SAP supported SKUs. </param>
        /// <returns> A new <see cref="Models.SapSupportedResourceSkusResult"/> instance for mocking. </returns>
        public static SapSupportedResourceSkusResult SapSupportedResourceSkusResult(IEnumerable<SapSupportedSku> supportedSkus = null)
        {
            supportedSkus ??= new List<SapSupportedSku>();

            return new SapSupportedResourceSkusResult(supportedSkus?.ToList());
        }

        /// <summary> Initializes a new instance of SapSupportedSku. </summary>
        /// <param name="vmSku"> The VM Sku. </param>
        /// <param name="isAppServerCertified"> True if the Sku is certified for App server in the SAP system. </param>
        /// <param name="isDatabaseCertified"> True if the Sku is certified for Database server in the SAP system. </param>
        /// <returns> A new <see cref="Models.SapSupportedSku"/> instance for mocking. </returns>
        public static SapSupportedSku SapSupportedSku(string vmSku = null, bool? isAppServerCertified = null, bool? isDatabaseCertified = null)
        {
            return new SapSupportedSku(vmSku, isAppServerCertified, isDatabaseCertified);
        }

        /// <summary> Initializes a new instance of SapDiskConfigurationsResult. </summary>
        /// <param name="diskConfigurations"> Gets the list of Disk Configurations. </param>
        /// <returns> A new <see cref="Models.SapDiskConfigurationsResult"/> instance for mocking. </returns>
        public static SapDiskConfigurationsResult SapDiskConfigurationsResult(IEnumerable<SapDiskConfiguration> diskConfigurations = null)
        {
            diskConfigurations ??= new List<SapDiskConfiguration>();

            return new SapDiskConfigurationsResult(diskConfigurations?.ToList());
        }

        /// <summary> Initializes a new instance of SapDiskConfiguration. </summary>
        /// <param name="volume"> The volume name. </param>
        /// <param name="diskType"> The disk type. </param>
        /// <param name="diskCount"> The disk count. </param>
        /// <param name="diskSizeGB"> The disk size in GB. </param>
        /// <param name="diskIopsReadWrite"> The disk Iops. </param>
        /// <param name="diskMBpsReadWrite"> The disk provisioned throughput in MBps. </param>
        /// <param name="diskStorageType"> The disk storage type. </param>
        /// <returns> A new <see cref="Models.SapDiskConfiguration"/> instance for mocking. </returns>
        public static SapDiskConfiguration SapDiskConfiguration(string volume = null, string diskType = null, long? diskCount = null, long? diskSizeGB = null, long? diskIopsReadWrite = null, long? diskMBpsReadWrite = null, string diskStorageType = null)
        {
            return new SapDiskConfiguration(volume, diskType, diskCount, diskSizeGB, diskIopsReadWrite, diskMBpsReadWrite, diskStorageType);
        }

        /// <summary> Initializes a new instance of SapAvailabilityZoneDetailsResult. </summary>
        /// <param name="availabilityZonePairs"> Gets the list of availability zone pairs. </param>
        /// <returns> A new <see cref="Models.SapAvailabilityZoneDetailsResult"/> instance for mocking. </returns>
        public static SapAvailabilityZoneDetailsResult SapAvailabilityZoneDetailsResult(IEnumerable<SapAvailabilityZonePair> availabilityZonePairs = null)
        {
            availabilityZonePairs ??= new List<SapAvailabilityZonePair>();

            return new SapAvailabilityZoneDetailsResult(availabilityZonePairs?.ToList());
        }

        /// <summary> Initializes a new instance of SapAvailabilityZonePair. </summary>
        /// <param name="zoneA"> The zone A. </param>
        /// <param name="zoneB"> The zone B. </param>
        /// <returns> A new <see cref="Models.SapAvailabilityZonePair"/> instance for mocking. </returns>
        public static SapAvailabilityZonePair SapAvailabilityZonePair(long? zoneA = null, long? zoneB = null)
        {
            return new SapAvailabilityZonePair(zoneA, zoneB);
        }

        /// <summary> Initializes a new instance of SapVirtualInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Managed service identity (user assigned identities). </param>
        /// <param name="environment"> Defines the environment type - Production/Non Production. </param>
        /// <param name="sapProduct"> Defines the SAP Product type. </param>
        /// <param name="configuration">
        /// Defines if an existing SAP system is being registered or a new SAP system is being created
        /// Please note <see cref="SapConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DeploymentConfiguration"/>, <see cref="DeploymentWithOSConfiguration"/> and <see cref="DiscoveryConfiguration"/>.
        /// </param>
        /// <param name="managedResourceGroupName"> Managed resource group configuration. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the SAP Instance health. </param>
        /// <param name="state"> Defines the Virtual Instance for SAP state. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Defines the Virtual Instance for SAP errors. </param>
        /// <returns> A new <see cref="Workloads.SapVirtualInstanceData"/> instance for mocking. </returns>
        public static SapVirtualInstanceData SapVirtualInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, UserAssignedServiceIdentity identity = null, SapEnvironmentType environment = default, SapProductType sapProduct = default, SapConfiguration configuration = null, string managedResourceGroupName = null, SapVirtualInstanceStatus? status = null, SapHealthState? health = null, SapVirtualInstanceState? state = null, SapVirtualInstanceProvisioningState? provisioningState = null, SapVirtualInstanceErrorDetail errorsProperties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SapVirtualInstanceData(id, name, resourceType, systemData, tags, location, identity, environment, sapProduct, configuration, new ManagedRGConfiguration(managedResourceGroupName), status, health, state, provisioningState, new SapVirtualInstanceError(errorsProperties));
        }

        /// <summary> Initializes a new instance of SapConfiguration. </summary>
        /// <param name="configurationType"> The configuration Type. </param>
        /// <returns> A new <see cref="Models.SapConfiguration"/> instance for mocking. </returns>
        public static SapConfiguration SapConfiguration(string configurationType = null)
        {
            return new UnknownSapConfiguration(configurationType);
        }

        /// <summary> Initializes a new instance of SapVirtualInstanceErrorDetail. </summary>
        /// <param name="code"> Service specific error code which serves as the substatus for the HTTP error code. </param>
        /// <param name="message"> Description of the error. </param>
        /// <param name="details"> Internal error details. </param>
        /// <returns> A new <see cref="Models.SapVirtualInstanceErrorDetail"/> instance for mocking. </returns>
        public static SapVirtualInstanceErrorDetail SapVirtualInstanceErrorDetail(string code = null, string message = null, IEnumerable<SapVirtualInstanceErrorDetail> details = null)
        {
            details ??= new List<SapVirtualInstanceErrorDetail>();

            return new SapVirtualInstanceErrorDetail(code, message, details?.ToList());
        }

        /// <summary> Initializes a new instance of SapCentralServerInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="instanceNo"> The central server instance id. </param>
        /// <param name="subnetId"> The central server subnet. </param>
        /// <param name="messageServerProperties"> Defines the SAP message server properties. </param>
        /// <param name="enqueueServerProperties"> Defines the SAP enqueue server properties. </param>
        /// <param name="gatewayServerProperties"> Defines the SAP Gateway Server properties. </param>
        /// <param name="enqueueReplicationServerProperties"> Defines the SAP ERS Server properties. </param>
        /// <param name="kernelVersion"> The central server kernel version. </param>
        /// <param name="kernelPatch"> The central server kernel patch. </param>
        /// <param name="vmDetails"> The list of virtual machines. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the SAP Instance health. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Defines the Central Instance errors. </param>
        /// <returns> A new <see cref="Workloads.SapCentralServerInstanceData"/> instance for mocking. </returns>
        public static SapCentralServerInstanceData SapCentralServerInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string instanceNo = null, ResourceIdentifier subnetId = null, MessageServerProperties messageServerProperties = null, EnqueueServerProperties enqueueServerProperties = null, GatewayServerProperties gatewayServerProperties = null, EnqueueReplicationServerProperties enqueueReplicationServerProperties = null, string kernelVersion = null, string kernelPatch = null, IEnumerable<CentralServerVmDetails> vmDetails = null, SapVirtualInstanceStatus? status = null, SapHealthState? health = null, SapVirtualInstanceProvisioningState? provisioningState = null, SapVirtualInstanceErrorDetail errorsProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            vmDetails ??= new List<CentralServerVmDetails>();

            return new SapCentralServerInstanceData(id, name, resourceType, systemData, tags, location, instanceNo, subnetId, messageServerProperties, enqueueServerProperties, gatewayServerProperties, enqueueReplicationServerProperties, kernelVersion, kernelPatch, vmDetails?.ToList(), status, health, provisioningState, new SapVirtualInstanceError(errorsProperties));
        }

        /// <summary> Initializes a new instance of MessageServerProperties. </summary>
        /// <param name="msPort"> The message server port. </param>
        /// <param name="internalMsPort"> The message server internal MS port. </param>
        /// <param name="httpPort"> The message server http port. </param>
        /// <param name="httpsPort"> The message server https port. </param>
        /// <param name="hostname"> The message server SAP host name. </param>
        /// <param name="ipAddress"> The message server IP Address. </param>
        /// <param name="health"> Defines the SAP Instance health. </param>
        /// <returns> A new <see cref="Models.MessageServerProperties"/> instance for mocking. </returns>
        public static MessageServerProperties MessageServerProperties(long? msPort = null, long? internalMsPort = null, long? httpPort = null, long? httpsPort = null, string hostname = null, string ipAddress = null, SapHealthState? health = null)
        {
            return new MessageServerProperties(msPort, internalMsPort, httpPort, httpsPort, hostname, ipAddress, health);
        }

        /// <summary> Initializes a new instance of EnqueueServerProperties. </summary>
        /// <param name="hostname"> The enqueue server SAP host name. </param>
        /// <param name="ipAddress"> The enqueue server SAP IP Address. </param>
        /// <param name="port"> The enqueue server Port. </param>
        /// <param name="health"> Defines the SAP Instance health. </param>
        /// <returns> A new <see cref="Models.EnqueueServerProperties"/> instance for mocking. </returns>
        public static EnqueueServerProperties EnqueueServerProperties(string hostname = null, string ipAddress = null, long? port = null, SapHealthState? health = null)
        {
            return new EnqueueServerProperties(hostname, ipAddress, port, health);
        }

        /// <summary> Initializes a new instance of GatewayServerProperties. </summary>
        /// <param name="port"> The gateway Port. </param>
        /// <param name="health"> Defines the SAP Instance health. </param>
        /// <returns> A new <see cref="Models.GatewayServerProperties"/> instance for mocking. </returns>
        public static GatewayServerProperties GatewayServerProperties(long? port = null, SapHealthState? health = null)
        {
            return new GatewayServerProperties(port, health);
        }

        /// <summary> Initializes a new instance of EnqueueReplicationServerProperties. </summary>
        /// <param name="ersVersion"> Defines the type of Enqueue Replication Server. </param>
        /// <param name="instanceNo"> The ERS server instance id. </param>
        /// <param name="hostname"> The ERS server SAP host name. </param>
        /// <param name="kernelVersion"> The ERS server SAP kernel version. </param>
        /// <param name="kernelPatch"> The ERS server SAP kernel patch. </param>
        /// <param name="ipAddress"> The ERS server SAP IP Address. </param>
        /// <param name="health"> Defines the SAP Instance health. </param>
        /// <returns> A new <see cref="Models.EnqueueReplicationServerProperties"/> instance for mocking. </returns>
        public static EnqueueReplicationServerProperties EnqueueReplicationServerProperties(EnqueueReplicationServerType? ersVersion = null, string instanceNo = null, string hostname = null, string kernelVersion = null, string kernelPatch = null, string ipAddress = null, SapHealthState? health = null)
        {
            return new EnqueueReplicationServerProperties(ersVersion, instanceNo, hostname, kernelVersion, kernelPatch, ipAddress, health);
        }

        /// <summary> Initializes a new instance of CentralServerVmDetails. </summary>
        /// <param name="virtualMachineType"> Defines the type of central server VM. </param>
        /// <param name="virtualMachineId"></param>
        /// <returns> A new <see cref="Models.CentralServerVmDetails"/> instance for mocking. </returns>
        public static CentralServerVmDetails CentralServerVmDetails(CentralServerVirtualMachineType? virtualMachineType = null, ResourceIdentifier virtualMachineId = null)
        {
            return new CentralServerVmDetails(virtualMachineType, virtualMachineId);
        }

        /// <summary> Initializes a new instance of SapDatabaseInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="subnetId"> The database subnet. </param>
        /// <param name="databaseSid"> The database SID. </param>
        /// <param name="databaseType"> The SAP database type. </param>
        /// <param name="ipAddress"> The database IP Address. </param>
        /// <param name="vmDetails"> The list of virtual machines. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Defines the Database Instance errors. </param>
        /// <returns> A new <see cref="Workloads.SapDatabaseInstanceData"/> instance for mocking. </returns>
        public static SapDatabaseInstanceData SapDatabaseInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ResourceIdentifier subnetId = null, string databaseSid = null, string databaseType = null, string ipAddress = null, IEnumerable<DatabaseVmDetails> vmDetails = null, SapVirtualInstanceStatus? status = null, SapVirtualInstanceProvisioningState? provisioningState = null, SapVirtualInstanceErrorDetail errorsProperties = null)
        {
            tags ??= new Dictionary<string, string>();
            vmDetails ??= new List<DatabaseVmDetails>();

            return new SapDatabaseInstanceData(id, name, resourceType, systemData, tags, location, subnetId, databaseSid, databaseType, ipAddress, vmDetails?.ToList(), status, provisioningState, new SapVirtualInstanceError(errorsProperties));
        }

        /// <summary> Initializes a new instance of DatabaseVmDetails. </summary>
        /// <param name="virtualMachineId"></param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <returns> A new <see cref="Models.DatabaseVmDetails"/> instance for mocking. </returns>
        public static DatabaseVmDetails DatabaseVmDetails(ResourceIdentifier virtualMachineId = null, SapVirtualInstanceStatus? status = null)
        {
            return new DatabaseVmDetails(virtualMachineId, status);
        }

        /// <summary> Initializes a new instance of SapApplicationServerInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="instanceNo"> The application server instance id. </param>
        /// <param name="subnetId"> The application server subnet. </param>
        /// <param name="hostname"> The application server SAP host name. </param>
        /// <param name="kernelVersion"> The application server SAP kernel version. </param>
        /// <param name="kernelPatch"> The application server SAP kernel patch. </param>
        /// <param name="ipAddress"> The application server SAP IP Address. </param>
        /// <param name="gatewayPort"> The application server gateway Port. </param>
        /// <param name="icmHttpPort"> The application server ICM HTTP Port. </param>
        /// <param name="icmHttpsPort"> The application server ICM HTTPS Port. </param>
        /// <param name="virtualMachineId"> The virtual machine. </param>
        /// <param name="status"> Defines the SAP Instance status. </param>
        /// <param name="health"> Defines the SAP Instance health. </param>
        /// <param name="provisioningState"> Defines the provisioning states. </param>
        /// <param name="errorsProperties"> Defines the Application Instance errors. </param>
        /// <returns> A new <see cref="Workloads.SapApplicationServerInstanceData"/> instance for mocking. </returns>
        public static SapApplicationServerInstanceData SapApplicationServerInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string instanceNo = null, ResourceIdentifier subnetId = null, string hostname = null, string kernelVersion = null, string kernelPatch = null, string ipAddress = null, long? gatewayPort = null, long? icmHttpPort = null, long? icmHttpsPort = null, ResourceIdentifier virtualMachineId = null, SapVirtualInstanceStatus? status = null, SapHealthState? health = null, SapVirtualInstanceProvisioningState? provisioningState = null, SapVirtualInstanceErrorDetail errorsProperties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SapApplicationServerInstanceData(id, name, resourceType, systemData, tags, location, instanceNo, subnetId, hostname, kernelVersion, kernelPatch, ipAddress, gatewayPort, icmHttpPort, icmHttpsPort, virtualMachineId, status, health, provisioningState, new SapVirtualInstanceError(errorsProperties));
        }

        /// <summary> Initializes a new instance of SapMonitorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> State of provisioning of the SAP monitor. </param>
        /// <param name="errors"> Defines the SAP monitor errors. </param>
        /// <param name="appLocation"> The SAP monitor resources will be deployed in the SAP monitoring region. The subnet region should be same as the SAP monitoring region. </param>
        /// <param name="routingPreference"> Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET. </param>
        /// <param name="managedResourceGroupName"> Managed resource group configuration. </param>
        /// <param name="logAnalyticsWorkspaceArmId"> The ARM ID of the Log Analytics Workspace that is used for SAP monitoring. </param>
        /// <param name="monitorSubnetId"> The subnet which the SAP monitor will be deployed in. </param>
        /// <param name="msiArmId"> The ARM ID of the MSI used for SAP monitoring. </param>
        /// <returns> A new <see cref="Workloads.SapMonitorData"/> instance for mocking. </returns>
        public static SapMonitorData SapMonitorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, WorkloadMonitorProvisioningState? provisioningState = null, ResponseError errors = null, AzureLocation? appLocation = null, RoutingPreference? routingPreference = null, string managedResourceGroupName = null, ResourceIdentifier logAnalyticsWorkspaceArmId = null, ResourceIdentifier monitorSubnetId = null, ResourceIdentifier msiArmId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SapMonitorData(id, name, resourceType, systemData, tags, location, provisioningState, errors, appLocation, routingPreference, new ManagedRGConfiguration(managedResourceGroupName), logAnalyticsWorkspaceArmId, monitorSubnetId, msiArmId);
        }

        /// <summary> Initializes a new instance of SapProviderInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> State of provisioning of the provider instance. </param>
        /// <param name="errors"> Defines the provider instance errors. </param>
        /// <param name="providerSettings">
        /// Defines the provider instance errors.
        /// Please note <see cref="ProviderSpecificProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DB2ProviderInstanceProperties"/>, <see cref="MsSqlServerProviderInstanceProperties"/>, <see cref="PrometheusHAClusterProviderInstanceProperties"/>, <see cref="PrometheusOSProviderInstanceProperties"/>, <see cref="HanaDBProviderInstanceProperties"/> and <see cref="SapNetWeaverProviderInstanceProperties"/>.
        /// </param>
        /// <returns> A new <see cref="Workloads.SapProviderInstanceData"/> instance for mocking. </returns>
        public static SapProviderInstanceData SapProviderInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, WorkloadMonitorProvisioningState? provisioningState = null, ResponseError errors = null, ProviderSpecificProperties providerSettings = null)
        {
            return new SapProviderInstanceData(id, name, resourceType, systemData, provisioningState, errors, providerSettings);
        }

        /// <summary> Initializes a new instance of ProviderSpecificProperties. </summary>
        /// <param name="providerType"> The provider type. For example, the value can be SapHana. </param>
        /// <returns> A new <see cref="Models.ProviderSpecificProperties"/> instance for mocking. </returns>
        public static ProviderSpecificProperties ProviderSpecificProperties(string providerType = null)
        {
            return new UnknownProviderSpecificProperties(providerType);
        }

        /// <summary> Initializes a new instance of SkuDefinition. </summary>
        /// <param name="name"> The name of the SKU. </param>
        /// <param name="resourceType"> Resource type the SKU applicable for. </param>
        /// <param name="tier"> This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. </param>
        /// <param name="size"> The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. </param>
        /// <param name="family"> If the service has different generations of hardware, for the same SKU, then that can be captured here. </param>
        /// <param name="kind"> If the service has different kinds of hardware, for the same SKU, then that can be captured here. </param>
        /// <param name="locations"> List of locations where this SKU is available. </param>
        /// <param name="locationInfo"> List of locations where this SKU is available. </param>
        /// <param name="capacity"> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </param>
        /// <param name="costs"> The SKU costs. </param>
        /// <param name="capabilities"> The SKU capabilities. </param>
        /// <param name="restrictions"> The SKU restrictions. </param>
        /// <returns> A new <see cref="Models.SkuDefinition"/> instance for mocking. </returns>
        public static SkuDefinition SkuDefinition(string name = null, string resourceType = null, string tier = null, string size = null, string family = null, string kind = null, IEnumerable<AzureLocation> locations = null, IEnumerable<SkuLocationAndZones> locationInfo = null, BinaryData capacity = null, IEnumerable<SkuCost> costs = null, IEnumerable<SkuCapability> capabilities = null, IEnumerable<SkuRestriction> restrictions = null)
        {
            locations ??= new List<AzureLocation>();
            locationInfo ??= new List<SkuLocationAndZones>();
            costs ??= new List<SkuCost>();
            capabilities ??= new List<SkuCapability>();
            restrictions ??= new List<SkuRestriction>();

            return new SkuDefinition(name, resourceType, tier, size, family, kind, locations?.ToList(), locationInfo?.ToList(), capacity, costs?.ToList(), capabilities?.ToList(), restrictions?.ToList());
        }

        /// <summary> Initializes a new instance of SkuLocationAndZones. </summary>
        /// <param name="location"> The location of the SKU. </param>
        /// <param name="zones"> The availability zones of SKU location. </param>
        /// <param name="zoneDetails"> The availability zone details of the SKU location. </param>
        /// <param name="extendedLocations"> The extended locations of SKU. </param>
        /// <param name="locationType"> Type of the extended location. </param>
        /// <returns> A new <see cref="Models.SkuLocationAndZones"/> instance for mocking. </returns>
        public static SkuLocationAndZones SkuLocationAndZones(AzureLocation? location = null, IEnumerable<string> zones = null, IEnumerable<SkuZoneDetail> zoneDetails = null, IEnumerable<string> extendedLocations = null, LocationType? locationType = null)
        {
            zones ??= new List<string>();
            zoneDetails ??= new List<SkuZoneDetail>();
            extendedLocations ??= new List<string>();

            return new SkuLocationAndZones(location, zones?.ToList(), zoneDetails?.ToList(), extendedLocations?.ToList(), locationType);
        }

        /// <summary> Initializes a new instance of SkuZoneDetail. </summary>
        /// <param name="zones"> The physical zones. </param>
        /// <param name="capabilities"> The capabilities. </param>
        /// <returns> A new <see cref="Models.SkuZoneDetail"/> instance for mocking. </returns>
        public static SkuZoneDetail SkuZoneDetail(IEnumerable<string> zones = null, IEnumerable<SkuCapability> capabilities = null)
        {
            zones ??= new List<string>();
            capabilities ??= new List<SkuCapability>();

            return new SkuZoneDetail(zones?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of SkuCapability. </summary>
        /// <param name="name"> The capability name. </param>
        /// <param name="value"> The capability value. </param>
        /// <returns> A new <see cref="Models.SkuCapability"/> instance for mocking. </returns>
        public static SkuCapability SkuCapability(string name = null, string value = null)
        {
            return new SkuCapability(name, value);
        }

        /// <summary> Initializes a new instance of SkuCost. </summary>
        /// <param name="meterId"> Billing meter id. </param>
        /// <param name="quantity"> The quantity. </param>
        /// <param name="extendedUnit"> The extended unit. </param>
        /// <returns> A new <see cref="Models.SkuCost"/> instance for mocking. </returns>
        public static SkuCost SkuCost(string meterId = null, int? quantity = null, string extendedUnit = null)
        {
            return new SkuCost(meterId, quantity, extendedUnit);
        }

        /// <summary> Initializes a new instance of SkuRestriction. </summary>
        /// <param name="restrictionType"> The SKU restriction type. </param>
        /// <param name="values"> Restriction values. </param>
        /// <param name="restrictionInfo"> The restriction information. </param>
        /// <param name="reasonCode"> The SKU restriction reason code. </param>
        /// <returns> A new <see cref="Models.SkuRestriction"/> instance for mocking. </returns>
        public static SkuRestriction SkuRestriction(SkuRestrictionType? restrictionType = null, IEnumerable<string> values = null, RestrictionInfo restrictionInfo = null, SkuRestrictionReasonCode? reasonCode = null)
        {
            values ??= new List<string>();

            return new SkuRestriction(restrictionType, values?.ToList(), restrictionInfo, reasonCode);
        }

        /// <summary> Initializes a new instance of RestrictionInfo. </summary>
        /// <param name="locations"> The restriction locations. </param>
        /// <param name="zones"> The restriction zones. </param>
        /// <returns> A new <see cref="Models.RestrictionInfo"/> instance for mocking. </returns>
        public static RestrictionInfo RestrictionInfo(IEnumerable<AzureLocation> locations = null, IEnumerable<string> zones = null)
        {
            locations ??= new List<AzureLocation>();
            zones ??= new List<string>();

            return new RestrictionInfo(locations?.ToList(), zones?.ToList());
        }

        /// <summary> Initializes a new instance of ImageReference. </summary>
        /// <param name="publisher"> The image publisher. </param>
        /// <param name="offer"> Specifies the offer of the platform image or marketplace image used to create the virtual machine. </param>
        /// <param name="sku"> The image SKU. </param>
        /// <param name="version"> Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or &apos;latest&apos;. Major, Minor, and Build are decimal numbers. Specify &apos;latest&apos; to use the latest version of an image available at deploy time. Even if you use &apos;latest&apos;, the VM image will not automatically update after deploy time even if a new version becomes available. </param>
        /// <param name="exactVersion"> Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from &apos;version&apos;, only if the value specified in &apos;version&apos; field is &apos;latest&apos;. </param>
        /// <param name="sharedGalleryImageId"> Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call. </param>
        /// <returns> A new <see cref="Models.ImageReference"/> instance for mocking. </returns>
        public static ImageReference ImageReference(string publisher = null, string offer = null, string sku = null, string version = null, string exactVersion = null, string sharedGalleryImageId = null)
        {
            return new ImageReference(publisher, offer, sku, version, exactVersion, sharedGalleryImageId);
        }

        /// <summary> Initializes a new instance of WindowsConfiguration. </summary>
        /// <returns> A new <see cref="Models.WindowsConfiguration"/> instance for mocking. </returns>
        public static WindowsConfiguration WindowsConfiguration()
        {
            return new WindowsConfiguration("Windows");
        }

        /// <summary> Initializes a new instance of OSConfiguration. </summary>
        /// <param name="osType"> The OS Type. </param>
        /// <returns> A new <see cref="Models.OSConfiguration"/> instance for mocking. </returns>
        public static OSConfiguration OSConfiguration(string osType = null)
        {
            return new UnknownOSConfiguration(osType);
        }

        /// <summary> Initializes a new instance of SshPublicKey. </summary>
        /// <param name="keyData"> SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. &lt;br&gt;&lt;br&gt; For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed). </param>
        /// <returns> A new <see cref="Models.SshPublicKey"/> instance for mocking. </returns>
        public static SshPublicKey SshPublicKey(string keyData = null)
        {
            return new SshPublicKey(keyData);
        }

        /// <summary> Initializes a new instance of LinuxConfiguration. </summary>
        /// <param name="disablePasswordAuthentication"> Specifies whether password authentication should be disabled. </param>
        /// <param name="sshPublicKeys"> Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use &apos;sshKeyPair&apos; instead). </param>
        /// <param name="sshKeyPair"> The SSH Key-pair used to authenticate with the VM&apos;s. </param>
        /// <returns> A new <see cref="Models.LinuxConfiguration"/> instance for mocking. </returns>
        public static LinuxConfiguration LinuxConfiguration(bool? disablePasswordAuthentication = null, IEnumerable<SshPublicKey> sshPublicKeys = null, SshKeyPair sshKeyPair = null)
        {
            sshPublicKeys ??= new List<SshPublicKey>();

            return new LinuxConfiguration("Linux", disablePasswordAuthentication, new SshConfiguration(sshPublicKeys?.ToList()), sshKeyPair);
        }

        /// <summary> Initializes a new instance of SshKeyPair. </summary>
        /// <param name="publicKey"> SSH public key. </param>
        /// <param name="privateKey"> SSH private key. </param>
        /// <returns> A new <see cref="Models.SshKeyPair"/> instance for mocking. </returns>
        public static SshKeyPair SshKeyPair(string publicKey = null, string privateKey = null)
        {
            return new SshKeyPair(publicKey, privateKey);
        }

        /// <summary> Initializes a new instance of OSProfile. </summary>
        /// <param name="adminUsername"> Specifies the name of the administrator account. &lt;br&gt;&lt;br&gt; This property cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; **Windows-only restriction:** Cannot end in &quot;.&quot; &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;administrator&quot;, &quot;admin&quot;, &quot;user&quot;, &quot;user1&quot;, &quot;test&quot;, &quot;user2&quot;, &quot;test1&quot;, &quot;user3&quot;, &quot;admin1&quot;, &quot;1&quot;, &quot;123&quot;, &quot;a&quot;, &quot;actuser&quot;, &quot;adm&quot;, &quot;admin2&quot;, &quot;aspnet&quot;, &quot;backup&quot;, &quot;console&quot;, &quot;david&quot;, &quot;guest&quot;, &quot;john&quot;, &quot;owner&quot;, &quot;root&quot;, &quot;server&quot;, &quot;sql&quot;, &quot;support&quot;, &quot;support_388945a0&quot;, &quot;sys&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;user4&quot;, &quot;user5&quot;. &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 1  character &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 20 characters. </param>
        /// <param name="adminPassword"> Specifies the password of the administrator account. &lt;br&gt;&lt;br&gt; **Minimum-length (Windows):** 8 characters &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 6 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 123 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 72 characters &lt;br&gt;&lt;br&gt; **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled &lt;br&gt; Has lower characters &lt;br&gt;Has upper characters &lt;br&gt; Has a digit &lt;br&gt; Has a special character (Regex match [\W_]) &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;abc@123&quot;, &quot;P@$$w0rd&quot;, &quot;P@ssw0rd&quot;, &quot;P@ssword123&quot;, &quot;Pa$$word&quot;, &quot;pass@word1&quot;, &quot;Password!&quot;, &quot;Password1&quot;, &quot;Password22&quot;, &quot;iloveyou!&quot; &lt;br&gt;&lt;br&gt; For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) &lt;br&gt;&lt;br&gt; For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection). </param>
        /// <param name="osConfiguration">
        /// Specifies Windows operating system settings on the virtual machine.
        /// Please note <see cref="OSConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LinuxConfiguration"/> and <see cref="WindowsConfiguration"/>.
        /// </param>
        /// <returns> A new <see cref="Models.OSProfile"/> instance for mocking. </returns>
        public static OSProfile OSProfile(string adminUsername = null, string adminPassword = null, OSConfiguration osConfiguration = null)
        {
            return new OSProfile(adminUsername, adminPassword, osConfiguration);
        }

        /// <summary> Initializes a new instance of SingleServerRecommendationResult. </summary>
        /// <param name="vmSku"> The recommended VM SKU for single server. </param>
        /// <returns> A new <see cref="Models.SingleServerRecommendationResult"/> instance for mocking. </returns>
        public static SingleServerRecommendationResult SingleServerRecommendationResult(string vmSku = null)
        {
            return new SingleServerRecommendationResult("SingleServer", vmSku);
        }

        /// <summary> Initializes a new instance of ThreeTierRecommendationResult. </summary>
        /// <param name="dbVmSku"> The database VM SKU. </param>
        /// <param name="databaseInstanceCount"> The database server instance count. </param>
        /// <param name="centralServerVmSku"> The central server VM SKU. </param>
        /// <param name="centralServerInstanceCount"> The central server instance count. </param>
        /// <param name="applicationServerVmSku"> The application server VM SKU. </param>
        /// <param name="applicationServerInstanceCount"> The application server instance count. </param>
        /// <returns> A new <see cref="Models.ThreeTierRecommendationResult"/> instance for mocking. </returns>
        public static ThreeTierRecommendationResult ThreeTierRecommendationResult(string dbVmSku = null, long? databaseInstanceCount = null, string centralServerVmSku = null, long? centralServerInstanceCount = null, string applicationServerVmSku = null, long? applicationServerInstanceCount = null)
        {
            return new ThreeTierRecommendationResult("ThreeTier", dbVmSku, databaseInstanceCount, centralServerVmSku, centralServerInstanceCount, applicationServerVmSku, applicationServerInstanceCount);
        }

        /// <summary> Initializes a new instance of SingleServerConfiguration. </summary>
        /// <param name="appResourceGroup"> The application resource group where SAP system resources will be deployed. </param>
        /// <param name="isSecondaryIPEnabled"> Network configuration for the server. </param>
        /// <param name="databaseType"> The database type. </param>
        /// <param name="subnetId"> The subnet id. </param>
        /// <param name="virtualMachineConfiguration"> Gets or sets the virtual machine configuration. </param>
        /// <returns> A new <see cref="Models.SingleServerConfiguration"/> instance for mocking. </returns>
        public static SingleServerConfiguration SingleServerConfiguration(string appResourceGroup = null, bool? isSecondaryIPEnabled = null, SapDatabaseType? databaseType = null, ResourceIdentifier subnetId = null, VirtualMachineConfiguration virtualMachineConfiguration = null)
        {
            return new SingleServerConfiguration("SingleServer", appResourceGroup, new NetworkConfiguration(isSecondaryIPEnabled), databaseType, subnetId, virtualMachineConfiguration);
        }

        /// <summary> Initializes a new instance of InfrastructureConfiguration. </summary>
        /// <param name="deploymentType"> The deployment Type. </param>
        /// <param name="appResourceGroup"> The application resource group where SAP system resources will be deployed. </param>
        /// <returns> A new <see cref="Models.InfrastructureConfiguration"/> instance for mocking. </returns>
        public static InfrastructureConfiguration InfrastructureConfiguration(string deploymentType = null, string appResourceGroup = null)
        {
            return new UnknownInfrastructureConfiguration(deploymentType, appResourceGroup);
        }

        /// <summary> Initializes a new instance of DatabaseConfiguration. </summary>
        /// <param name="databaseType"> The database type. </param>
        /// <param name="subnetId"> The subnet id. </param>
        /// <param name="virtualMachineConfiguration"> Gets or sets the virtual machine configuration. </param>
        /// <param name="instanceCount"> The number of database VMs. </param>
        /// <returns> A new <see cref="Models.DatabaseConfiguration"/> instance for mocking. </returns>
        public static DatabaseConfiguration DatabaseConfiguration(SapDatabaseType? databaseType = null, ResourceIdentifier subnetId = null, VirtualMachineConfiguration virtualMachineConfiguration = null, long instanceCount = default)
        {
            return new DatabaseConfiguration(databaseType, subnetId, virtualMachineConfiguration, instanceCount);
        }

        /// <summary> Initializes a new instance of ThreeTierConfiguration. </summary>
        /// <param name="appResourceGroup"> The application resource group where SAP system resources will be deployed. </param>
        /// <param name="isSecondaryIPEnabled"> Network configuration common to all servers. </param>
        /// <param name="centralServer"> The central server configuration. </param>
        /// <param name="applicationServer"> The application server configuration. </param>
        /// <param name="databaseServer"> The database configuration. </param>
        /// <param name="highAvailabilityType"> The high availability configuration. </param>
        /// <returns> A new <see cref="Models.ThreeTierConfiguration"/> instance for mocking. </returns>
        public static ThreeTierConfiguration ThreeTierConfiguration(string appResourceGroup = null, bool? isSecondaryIPEnabled = null, CentralServerConfiguration centralServer = null, ApplicationServerConfiguration applicationServer = null, DatabaseConfiguration databaseServer = null, SapHighAvailabilityType highAvailabilityType = default)
        {
            return new ThreeTierConfiguration("ThreeTier", appResourceGroup, new NetworkConfiguration(isSecondaryIPEnabled), centralServer, applicationServer, databaseServer, new HighAvailabilityConfiguration(highAvailabilityType));
        }

        /// <summary> Initializes a new instance of SoftwareConfiguration. </summary>
        /// <param name="softwareInstallationType"> The SAP software installation Type. </param>
        /// <returns> A new <see cref="Models.SoftwareConfiguration"/> instance for mocking. </returns>
        public static SoftwareConfiguration SoftwareConfiguration(string softwareInstallationType = null)
        {
            return new UnknownSoftwareConfiguration(softwareInstallationType);
        }

        /// <summary> Initializes a new instance of ServiceInitiatedSoftwareConfiguration. </summary>
        /// <param name="bomUri"> The URL to the SAP Build of Materials(BOM) file. </param>
        /// <param name="softwareVersion"> The software version to install. </param>
        /// <param name="sapBitsStorageAccountId"> The SAP bits storage account id. </param>
        /// <param name="sapFqdn"> The FQDN to set for the SAP system during install. </param>
        /// <param name="sshPrivateKey"> The SSH private key. </param>
        /// <param name="highAvailabilitySoftwareConfiguration"> Gets or sets the HA software configuration. </param>
        /// <returns> A new <see cref="Models.ServiceInitiatedSoftwareConfiguration"/> instance for mocking. </returns>
        public static ServiceInitiatedSoftwareConfiguration ServiceInitiatedSoftwareConfiguration(Uri bomUri = null, string softwareVersion = null, string sapBitsStorageAccountId = null, string sapFqdn = null, string sshPrivateKey = null, HighAvailabilitySoftwareConfiguration highAvailabilitySoftwareConfiguration = null)
        {
            return new ServiceInitiatedSoftwareConfiguration("ServiceInitiated", bomUri, softwareVersion, sapBitsStorageAccountId, sapFqdn, sshPrivateKey, highAvailabilitySoftwareConfiguration);
        }

        /// <summary> Initializes a new instance of SapInstallWithoutOSConfigSoftwareConfiguration. </summary>
        /// <param name="bomUri"> The URL to the SAP Build of Materials(BOM) file. </param>
        /// <param name="sapBitsStorageAccountId"> The SAP bits storage account id. </param>
        /// <param name="softwareVersion"> The software version to install. </param>
        /// <param name="highAvailabilitySoftwareConfiguration"> Gets or sets the HA software configuration. </param>
        /// <returns> A new <see cref="Models.SapInstallWithoutOSConfigSoftwareConfiguration"/> instance for mocking. </returns>
        public static SapInstallWithoutOSConfigSoftwareConfiguration SapInstallWithoutOSConfigSoftwareConfiguration(Uri bomUri = null, string sapBitsStorageAccountId = null, string softwareVersion = null, HighAvailabilitySoftwareConfiguration highAvailabilitySoftwareConfiguration = null)
        {
            return new SapInstallWithoutOSConfigSoftwareConfiguration("SAPInstallWithoutOSConfig", bomUri, sapBitsStorageAccountId, softwareVersion, highAvailabilitySoftwareConfiguration);
        }

        /// <summary> Initializes a new instance of DiscoveryConfiguration. </summary>
        /// <param name="centralServerVmId"> The virtual machine ID of the Central Server. </param>
        /// <param name="appLocation"> The geo-location where the SAP system exists. </param>
        /// <returns> A new <see cref="Models.DiscoveryConfiguration"/> instance for mocking. </returns>
        public static DiscoveryConfiguration DiscoveryConfiguration(string centralServerVmId = null, AzureLocation? appLocation = null)
        {
            return new DiscoveryConfiguration("Discovery", centralServerVmId, appLocation);
        }

        /// <summary> Initializes a new instance of DeploymentConfiguration. </summary>
        /// <param name="appLocation"> The geo-location where the SAP system is to be created. </param>
        /// <param name="infrastructureConfiguration">
        /// The infrastructure configuration.
        /// Please note <see cref="InfrastructureConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SingleServerConfiguration"/> and <see cref="ThreeTierConfiguration"/>.
        /// </param>
        /// <param name="softwareConfiguration">
        /// The software configuration.
        /// Please note <see cref="SoftwareConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SapInstallWithoutOSConfigSoftwareConfiguration"/> and <see cref="ServiceInitiatedSoftwareConfiguration"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DeploymentConfiguration"/> instance for mocking. </returns>
        public static DeploymentConfiguration DeploymentConfiguration(AzureLocation? appLocation = null, InfrastructureConfiguration infrastructureConfiguration = null, SoftwareConfiguration softwareConfiguration = null)
        {
            return new DeploymentConfiguration("Deployment", appLocation, infrastructureConfiguration, softwareConfiguration);
        }

        /// <summary> Initializes a new instance of DeploymentWithOSConfiguration. </summary>
        /// <param name="appLocation"> The geo-location where the SAP system is to be created. </param>
        /// <param name="infrastructureConfiguration">
        /// The infrastructure configuration.
        /// Please note <see cref="InfrastructureConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SingleServerConfiguration"/> and <see cref="ThreeTierConfiguration"/>.
        /// </param>
        /// <param name="softwareConfiguration">
        /// The software configuration.
        /// Please note <see cref="SoftwareConfiguration"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SapInstallWithoutOSConfigSoftwareConfiguration"/> and <see cref="ServiceInitiatedSoftwareConfiguration"/>.
        /// </param>
        /// <param name="osSapConfiguration"> The OS and SAP configuration. </param>
        /// <returns> A new <see cref="Models.DeploymentWithOSConfiguration"/> instance for mocking. </returns>
        public static DeploymentWithOSConfiguration DeploymentWithOSConfiguration(AzureLocation? appLocation = null, InfrastructureConfiguration infrastructureConfiguration = null, SoftwareConfiguration softwareConfiguration = null, OSSapConfiguration osSapConfiguration = null)
        {
            return new DeploymentWithOSConfiguration("DeploymentWithOSConfig", appLocation, infrastructureConfiguration, softwareConfiguration, osSapConfiguration);
        }

        /// <summary> Initializes a new instance of OSSapConfiguration. </summary>
        /// <param name="deployerVmPackages"> The url and storage account ID where deployer VM packages are uploaded. </param>
        /// <param name="sapFqdn"> The FQDN to set for the SAP system. </param>
        /// <returns> A new <see cref="Models.OSSapConfiguration"/> instance for mocking. </returns>
        public static OSSapConfiguration OSSapConfiguration(DeployerVmPackages deployerVmPackages = null, string sapFqdn = null)
        {
            return new OSSapConfiguration(deployerVmPackages, sapFqdn);
        }

        /// <summary> Initializes a new instance of DeployerVmPackages. </summary>
        /// <param name="uri"> The URL to the deployer VM packages file. </param>
        /// <param name="storageAccountId"> The deployer VM packages storage account id. </param>
        /// <returns> A new <see cref="Models.DeployerVmPackages"/> instance for mocking. </returns>
        public static DeployerVmPackages DeployerVmPackages(Uri uri = null, string storageAccountId = null)
        {
            return new DeployerVmPackages(uri, storageAccountId);
        }

        /// <summary> Initializes a new instance of HanaDBProviderInstanceProperties. </summary>
        /// <param name="hostname"> Gets or sets the target virtual machine size. </param>
        /// <param name="dbName"> Gets or sets the hana database name. </param>
        /// <param name="sqlPort"> Gets or sets the database sql port. </param>
        /// <param name="instanceNumber"> Gets or sets the database instance number. </param>
        /// <param name="dbUsername"> Gets or sets the database user name. </param>
        /// <param name="dbPassword"> Gets or sets the database password. </param>
        /// <param name="dbPasswordUri"> Gets or sets the key vault URI to secret with the database password. </param>
        /// <param name="dbSslCertificateUri"> Gets or sets the blob URI to SSL certificate for the DB. </param>
        /// <param name="sslHostNameInCertificate"> Gets or sets the hostname(s) in the SSL certificate. </param>
        /// <returns> A new <see cref="Models.HanaDBProviderInstanceProperties"/> instance for mocking. </returns>
        public static HanaDBProviderInstanceProperties HanaDBProviderInstanceProperties(string hostname = null, string dbName = null, string sqlPort = null, string instanceNumber = null, string dbUsername = null, string dbPassword = null, Uri dbPasswordUri = null, Uri dbSslCertificateUri = null, string sslHostNameInCertificate = null)
        {
            return new HanaDBProviderInstanceProperties("SapHana", hostname, dbName, sqlPort, instanceNumber, dbUsername, dbPassword, dbPasswordUri, dbSslCertificateUri, sslHostNameInCertificate);
        }

        /// <summary> Initializes a new instance of SapNetWeaverProviderInstanceProperties. </summary>
        /// <param name="sapSid"> Gets or sets the SAP System Identifier. </param>
        /// <param name="sapHostname"> Gets or sets the target virtual machine IP Address/FQDN. </param>
        /// <param name="sapInstanceNr"> Gets or sets the instance number of SAP NetWeaver. </param>
        /// <param name="sapHostFileEntries"> Gets or sets the list of HostFile Entries. </param>
        /// <param name="sapUsername"> Gets or sets the SAP user name. </param>
        /// <param name="sapPassword"> Sets the SAP password. </param>
        /// <param name="sapPasswordUri"> Gets or sets the key vault URI to secret with the SAP password. </param>
        /// <param name="sapClientId"> Gets or sets the SAP Client ID. </param>
        /// <param name="sapPortNumber"> Gets or sets the SAP HTTP port number. </param>
        /// <param name="sapSslCertificateUri"> Gets or sets the blob URI to SSL certificate for the SAP system. </param>
        /// <returns> A new <see cref="Models.SapNetWeaverProviderInstanceProperties"/> instance for mocking. </returns>
        public static SapNetWeaverProviderInstanceProperties SapNetWeaverProviderInstanceProperties(string sapSid = null, string sapHostname = null, string sapInstanceNr = null, IEnumerable<string> sapHostFileEntries = null, string sapUsername = null, string sapPassword = null, Uri sapPasswordUri = null, string sapClientId = null, string sapPortNumber = null, Uri sapSslCertificateUri = null)
        {
            sapHostFileEntries ??= new List<string>();

            return new SapNetWeaverProviderInstanceProperties("SapNetWeaver", sapSid, sapHostname, sapInstanceNr, sapHostFileEntries?.ToList(), sapUsername, sapPassword, sapPasswordUri, sapClientId, sapPortNumber, sapSslCertificateUri);
        }

        /// <summary> Initializes a new instance of PrometheusOSProviderInstanceProperties. </summary>
        /// <param name="prometheusUri"> URL of the Node Exporter endpoint. </param>
        /// <returns> A new <see cref="Models.PrometheusOSProviderInstanceProperties"/> instance for mocking. </returns>
        public static PrometheusOSProviderInstanceProperties PrometheusOSProviderInstanceProperties(Uri prometheusUri = null)
        {
            return new PrometheusOSProviderInstanceProperties("PrometheusOS", prometheusUri);
        }

        /// <summary> Initializes a new instance of DB2ProviderInstanceProperties. </summary>
        /// <param name="hostname"> Gets or sets the target virtual machine name. </param>
        /// <param name="dbName"> Gets or sets the db2 database name. </param>
        /// <param name="dbPort"> Gets or sets the db2 database sql port. </param>
        /// <param name="dbUsername"> Gets or sets the db2 database user name. </param>
        /// <param name="dbPassword"> Gets or sets the db2 database password. </param>
        /// <param name="dbPasswordUri"> Gets or sets the key vault URI to secret with the database password. </param>
        /// <param name="sapSid"> Gets or sets the SAP System Identifier. </param>
        /// <returns> A new <see cref="Models.DB2ProviderInstanceProperties"/> instance for mocking. </returns>
        public static DB2ProviderInstanceProperties DB2ProviderInstanceProperties(string hostname = null, string dbName = null, string dbPort = null, string dbUsername = null, string dbPassword = null, Uri dbPasswordUri = null, string sapSid = null)
        {
            return new DB2ProviderInstanceProperties("Db2", hostname, dbName, dbPort, dbUsername, dbPassword, dbPasswordUri, sapSid);
        }

        /// <summary> Initializes a new instance of PrometheusHAClusterProviderInstanceProperties. </summary>
        /// <param name="prometheusUri"> URL of the Node Exporter endpoint. </param>
        /// <param name="hostname"> Gets or sets the target machine name. </param>
        /// <param name="sid"> Gets or sets the cluster sid. </param>
        /// <param name="clusterName"> Gets or sets the clusterName. </param>
        /// <returns> A new <see cref="Models.PrometheusHAClusterProviderInstanceProperties"/> instance for mocking. </returns>
        public static PrometheusHAClusterProviderInstanceProperties PrometheusHAClusterProviderInstanceProperties(Uri prometheusUri = null, string hostname = null, string sid = null, string clusterName = null)
        {
            return new PrometheusHAClusterProviderInstanceProperties("PrometheusHaCluster", prometheusUri, hostname, sid, clusterName);
        }

        /// <summary> Initializes a new instance of MsSqlServerProviderInstanceProperties. </summary>
        /// <param name="hostname"> Gets or sets the SQL server host name. </param>
        /// <param name="dbPort"> Gets or sets the database sql port. </param>
        /// <param name="dbUsername"> Gets or sets the database user name. </param>
        /// <param name="dbPassword"> Gets or sets the database password. </param>
        /// <param name="dbPasswordUri"> Gets or sets the key vault URI to secret with the database password. </param>
        /// <param name="sapSid"> Gets or sets the SAP System Identifier. </param>
        /// <returns> A new <see cref="Models.MsSqlServerProviderInstanceProperties"/> instance for mocking. </returns>
        public static MsSqlServerProviderInstanceProperties MsSqlServerProviderInstanceProperties(string hostname = null, string dbPort = null, string dbUsername = null, string dbPassword = null, Uri dbPasswordUri = null, string sapSid = null)
        {
            return new MsSqlServerProviderInstanceProperties("MsSqlServer", hostname, dbPort, dbUsername, dbPassword, dbPasswordUri, sapSid);
        }
    }
}
