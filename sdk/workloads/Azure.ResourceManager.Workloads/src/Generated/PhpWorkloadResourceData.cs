// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Workloads.Models;

namespace Azure.ResourceManager.Workloads
{
    /// <summary> A class representing the PhpWorkloadResource data model. </summary>
    public partial class PhpWorkloadResourceData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of PhpWorkloadResourceData. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> Indicates which kind of php workload this resource represent e.g WordPress. </param>
        public PhpWorkloadResourceData(AzureLocation location, WorkloadKind kind) : base(location)
        {
            Kind = kind;
        }

        /// <summary> Initializes a new instance of PhpWorkloadResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> Indicates which kind of php workload this resource represent e.g WordPress. </param>
        /// <param name="sku"> Php workloads SKU. </param>
        /// <param name="identity"> Identity for the resource. Currently not supported. </param>
        /// <param name="appLocation"> The infra resources for PHP workload will be created in this location. </param>
        /// <param name="managedResourceGroupConfiguration"> Managed resource group configuration of the workload. </param>
        /// <param name="adminUserProfile"> Admin user profile used for VM and VMSS. </param>
        /// <param name="webNodesProfile"> VMSS web nodes profile. </param>
        /// <param name="controllerProfile"> Controller VM profile. </param>
        /// <param name="networkProfile"> Network profile. </param>
        /// <param name="databaseProfile"> Database profile. </param>
        /// <param name="siteProfile"> Site profile. </param>
        /// <param name="fileshareProfile"> File share profile. </param>
        /// <param name="phpProfile"> PHP profile. </param>
        /// <param name="searchProfile"> Search profile. </param>
        /// <param name="cacheProfile"> Cache profile. </param>
        /// <param name="backupProfile"> Backup profile. </param>
        /// <param name="provisioningState"> Php workload resource provisioning state. </param>
        internal PhpWorkloadResourceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, WorkloadKind kind, WorkloadsSku sku, PhpWorkloadResourceIdentity identity, AzureLocation? appLocation, ManagedRGConfiguration managedResourceGroupConfiguration, UserProfile adminUserProfile, VmssNodesProfile webNodesProfile, NodeProfile controllerProfile, NetworkProfile networkProfile, DatabaseProfile databaseProfile, SiteProfile siteProfile, FileshareProfile fileshareProfile, PhpProfile phpProfile, SearchProfile searchProfile, CacheProfile cacheProfile, BackupProfile backupProfile, PhpWorkloadProvisioningState? provisioningState) : base(id, name, resourceType, systemData, tags, location)
        {
            Kind = kind;
            Sku = sku;
            Identity = identity;
            AppLocation = appLocation;
            ManagedResourceGroupConfiguration = managedResourceGroupConfiguration;
            AdminUserProfile = adminUserProfile;
            WebNodesProfile = webNodesProfile;
            ControllerProfile = controllerProfile;
            NetworkProfile = networkProfile;
            DatabaseProfile = databaseProfile;
            SiteProfile = siteProfile;
            FileshareProfile = fileshareProfile;
            PhpProfile = phpProfile;
            SearchProfile = searchProfile;
            CacheProfile = cacheProfile;
            BackupProfile = backupProfile;
            ProvisioningState = provisioningState;
        }

        /// <summary> Indicates which kind of php workload this resource represent e.g WordPress. </summary>
        public WorkloadKind Kind { get; set; }
        /// <summary> Php workloads SKU. </summary>
        public WorkloadsSku Sku { get; set; }
        /// <summary> Identity for the resource. Currently not supported. </summary>
        public PhpWorkloadResourceIdentity Identity { get; set; }
        /// <summary> The infra resources for PHP workload will be created in this location. </summary>
        public AzureLocation? AppLocation { get; set; }
        /// <summary> Managed resource group configuration of the workload. </summary>
        internal ManagedRGConfiguration ManagedResourceGroupConfiguration { get; set; }
        /// <summary> Managed resource group name. </summary>
        public string ManagedResourceGroupName
        {
            get => ManagedResourceGroupConfiguration is null ? default : ManagedResourceGroupConfiguration.Name;
            set
            {
                if (ManagedResourceGroupConfiguration is null)
                    ManagedResourceGroupConfiguration = new ManagedRGConfiguration();
                ManagedResourceGroupConfiguration.Name = value;
            }
        }

        /// <summary> Admin user profile used for VM and VMSS. </summary>
        public UserProfile AdminUserProfile { get; set; }
        /// <summary> VMSS web nodes profile. </summary>
        public VmssNodesProfile WebNodesProfile { get; set; }
        /// <summary> Controller VM profile. </summary>
        public NodeProfile ControllerProfile { get; set; }
        /// <summary> Network profile. </summary>
        public NetworkProfile NetworkProfile { get; set; }
        /// <summary> Database profile. </summary>
        public DatabaseProfile DatabaseProfile { get; set; }
        /// <summary> Site profile. </summary>
        internal SiteProfile SiteProfile { get; set; }
        /// <summary> Domain name for the application site URL. </summary>
        public string SiteDomainName
        {
            get => SiteProfile is null ? default : SiteProfile.DomainName;
            set
            {
                if (SiteProfile is null)
                    SiteProfile = new SiteProfile();
                SiteProfile.DomainName = value;
            }
        }

        /// <summary> File share profile. </summary>
        public FileshareProfile FileshareProfile { get; set; }
        /// <summary> PHP profile. </summary>
        internal PhpProfile PhpProfile { get; set; }
        /// <summary> PHP version. </summary>
        public PhpVersion? PhpVersion
        {
            get => PhpProfile is null ? default(PhpVersion?) : PhpProfile.Version;
            set
            {
                PhpProfile = value.HasValue ? new PhpProfile(value.Value) : null;
            }
        }

        /// <summary> Search profile. </summary>
        public SearchProfile SearchProfile { get; set; }
        /// <summary> Cache profile. </summary>
        public CacheProfile CacheProfile { get; set; }
        /// <summary> Backup profile. </summary>
        public BackupProfile BackupProfile { get; set; }
        /// <summary> Php workload resource provisioning state. </summary>
        public PhpWorkloadProvisioningState? ProvisioningState { get; }
    }
}
