// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class HanaDBDbProviderInstanceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Hostname))
            {
                writer.WritePropertyName("hostname");
                writer.WriteStringValue(Hostname);
            }
            if (Optional.IsDefined(DBDbName))
            {
                writer.WritePropertyName("dbName");
                writer.WriteStringValue(DBDbName);
            }
            if (Optional.IsDefined(SqlPort))
            {
                writer.WritePropertyName("sqlPort");
                writer.WriteStringValue(SqlPort);
            }
            if (Optional.IsDefined(InstanceNumber))
            {
                writer.WritePropertyName("instanceNumber");
                writer.WriteStringValue(InstanceNumber);
            }
            if (Optional.IsDefined(DBDbUsername))
            {
                writer.WritePropertyName("dbUsername");
                writer.WriteStringValue(DBDbUsername);
            }
            if (Optional.IsDefined(DBDbPassword))
            {
                writer.WritePropertyName("dbPassword");
                writer.WriteStringValue(DBDbPassword);
            }
            if (Optional.IsDefined(DBDbPasswordUri))
            {
                writer.WritePropertyName("dbPasswordUri");
                writer.WriteStringValue(DBDbPasswordUri.AbsoluteUri);
            }
            if (Optional.IsDefined(DBDbSslCertificateUri))
            {
                writer.WritePropertyName("dbSslCertificateUri");
                writer.WriteStringValue(DBDbSslCertificateUri.AbsoluteUri);
            }
            if (Optional.IsDefined(SslHostNameInCertificate))
            {
                writer.WritePropertyName("sslHostNameInCertificate");
                writer.WriteStringValue(SslHostNameInCertificate);
            }
            writer.WritePropertyName("providerType");
            writer.WriteStringValue(ProviderType);
            writer.WriteEndObject();
        }

        internal static HanaDBDbProviderInstanceProperties DeserializeHanaDBDbProviderInstanceProperties(JsonElement element)
        {
            Optional<string> hostname = default;
            Optional<string> dbName = default;
            Optional<string> sqlPort = default;
            Optional<string> instanceNumber = default;
            Optional<string> dbUsername = default;
            Optional<string> dbPassword = default;
            Optional<Uri> dbPasswordUri = default;
            Optional<Uri> dbSslCertificateUri = default;
            Optional<string> sslHostNameInCertificate = default;
            string providerType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hostname"))
                {
                    hostname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dbName"))
                {
                    dbName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlPort"))
                {
                    sqlPort = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceNumber"))
                {
                    instanceNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dbUsername"))
                {
                    dbUsername = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dbPassword"))
                {
                    dbPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dbPasswordUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dbPasswordUri = null;
                        continue;
                    }
                    dbPasswordUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dbSslCertificateUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dbSslCertificateUri = null;
                        continue;
                    }
                    dbSslCertificateUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sslHostNameInCertificate"))
                {
                    sslHostNameInCertificate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerType"))
                {
                    providerType = property.Value.GetString();
                    continue;
                }
            }
            return new HanaDBDbProviderInstanceProperties(providerType, hostname.Value, dbName.Value, sqlPort.Value, instanceNumber.Value, dbUsername.Value, dbPassword.Value, dbPasswordUri.Value, dbSslCertificateUri.Value, sslHostNameInCertificate.Value);
        }
    }
}
