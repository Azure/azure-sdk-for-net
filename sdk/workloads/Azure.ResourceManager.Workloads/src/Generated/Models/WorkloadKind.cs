// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Indicates which kind of php workload this resource represent e.g WordPress. </summary>
    public readonly partial struct WorkloadKind : IEquatable<WorkloadKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkloadKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkloadKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WordPressValue = "WordPress";

        /// <summary> WordPress. </summary>
        public static WorkloadKind WordPress { get; } = new WorkloadKind(WordPressValue);
        /// <summary> Determines if two <see cref="WorkloadKind"/> values are the same. </summary>
        public static bool operator ==(WorkloadKind left, WorkloadKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkloadKind"/> values are not the same. </summary>
        public static bool operator !=(WorkloadKind left, WorkloadKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkloadKind"/>. </summary>
        public static implicit operator WorkloadKind(string value) => new WorkloadKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkloadKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkloadKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
