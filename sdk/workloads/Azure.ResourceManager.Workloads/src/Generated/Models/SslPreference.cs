// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Gets or sets certificate preference if secure communication is enabled. </summary>
    public readonly partial struct SslPreference : IEquatable<SslPreference>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SslPreference"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SslPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DisabledValue = "Disabled";
        private const string RootCertificateValue = "RootCertificate";
        private const string ServerCertificateValue = "ServerCertificate";

        /// <summary> Disabled. </summary>
        public static SslPreference Disabled { get; } = new SslPreference(DisabledValue);
        /// <summary> RootCertificate. </summary>
        public static SslPreference RootCertificate { get; } = new SslPreference(RootCertificateValue);
        /// <summary> ServerCertificate. </summary>
        public static SslPreference ServerCertificate { get; } = new SslPreference(ServerCertificateValue);
        /// <summary> Determines if two <see cref="SslPreference"/> values are the same. </summary>
        public static bool operator ==(SslPreference left, SslPreference right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SslPreference"/> values are not the same. </summary>
        public static bool operator !=(SslPreference left, SslPreference right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SslPreference"/>. </summary>
        public static implicit operator SslPreference(string value) => new SslPreference(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SslPreference other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SslPreference other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
