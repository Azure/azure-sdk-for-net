// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Application version. </summary>
    public readonly partial struct WordpressVersions : IEquatable<WordpressVersions>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WordpressVersions"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WordpressVersions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Five43Value = "5.4.3";
        private const string Five42Value = "5.4.2";
        private const string Five41Value = "5.4.1";
        private const string Five4Value = "5.4";

        /// <summary> 5.4.3. </summary>
        public static WordpressVersions Five43 { get; } = new WordpressVersions(Five43Value);
        /// <summary> 5.4.2. </summary>
        public static WordpressVersions Five42 { get; } = new WordpressVersions(Five42Value);
        /// <summary> 5.4.1. </summary>
        public static WordpressVersions Five41 { get; } = new WordpressVersions(Five41Value);
        /// <summary> 5.4. </summary>
        public static WordpressVersions Five4 { get; } = new WordpressVersions(Five4Value);
        /// <summary> Determines if two <see cref="WordpressVersions"/> values are the same. </summary>
        public static bool operator ==(WordpressVersions left, WordpressVersions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WordpressVersions"/> values are not the same. </summary>
        public static bool operator !=(WordpressVersions left, WordpressVersions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WordpressVersions"/>. </summary>
        public static implicit operator WordpressVersions(string value) => new WordpressVersions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WordpressVersions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WordpressVersions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
