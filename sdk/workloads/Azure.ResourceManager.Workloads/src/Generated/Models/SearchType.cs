// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Search type. </summary>
    public readonly partial struct SearchType : IEquatable<SearchType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SearchType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SearchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ElasticValue = "Elastic";

        /// <summary> Elastic. </summary>
        public static SearchType Elastic { get; } = new SearchType(ElasticValue);
        /// <summary> Determines if two <see cref="SearchType"/> values are the same. </summary>
        public static bool operator ==(SearchType left, SearchType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SearchType"/> values are not the same. </summary>
        public static bool operator !=(SearchType left, SearchType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SearchType"/>. </summary>
        public static implicit operator SearchType(string value) => new SearchType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SearchType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SearchType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
