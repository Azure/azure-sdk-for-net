// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Defines the type of Enqueue Replication Server. </summary>
    public readonly partial struct EnqueueReplicationServerType : IEquatable<EnqueueReplicationServerType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EnqueueReplicationServerType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EnqueueReplicationServerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnqueueReplicator1Value = "EnqueueReplicator1";
        private const string EnqueueReplicator2Value = "EnqueueReplicator2";

        /// <summary> EnqueueReplicator1. </summary>
        public static EnqueueReplicationServerType EnqueueReplicator1 { get; } = new EnqueueReplicationServerType(EnqueueReplicator1Value);
        /// <summary> EnqueueReplicator2. </summary>
        public static EnqueueReplicationServerType EnqueueReplicator2 { get; } = new EnqueueReplicationServerType(EnqueueReplicator2Value);
        /// <summary> Determines if two <see cref="EnqueueReplicationServerType"/> values are the same. </summary>
        public static bool operator ==(EnqueueReplicationServerType left, EnqueueReplicationServerType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EnqueueReplicationServerType"/> values are not the same. </summary>
        public static bool operator !=(EnqueueReplicationServerType left, EnqueueReplicationServerType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EnqueueReplicationServerType"/>. </summary>
        public static implicit operator EnqueueReplicationServerType(string value) => new EnqueueReplicationServerType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EnqueueReplicationServerType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EnqueueReplicationServerType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
