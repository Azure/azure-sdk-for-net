// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Gets or sets the database configuration. </summary>
    public partial class DatabaseConfiguration
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DatabaseConfiguration"/>. </summary>
        /// <param name="subnetId"> The subnet id. </param>
        /// <param name="virtualMachineConfiguration"> Gets or sets the virtual machine configuration. </param>
        /// <param name="instanceCount"> The number of database VMs. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subnetId"/> or <paramref name="virtualMachineConfiguration"/> is null. </exception>
        public DatabaseConfiguration(ResourceIdentifier subnetId, SapVirtualMachineConfiguration virtualMachineConfiguration, long instanceCount)
        {
            Argument.AssertNotNull(subnetId, nameof(subnetId));
            Argument.AssertNotNull(virtualMachineConfiguration, nameof(virtualMachineConfiguration));

            SubnetId = subnetId;
            VirtualMachineConfiguration = virtualMachineConfiguration;
            InstanceCount = instanceCount;
        }

        /// <summary> Initializes a new instance of <see cref="DatabaseConfiguration"/>. </summary>
        /// <param name="databaseType"> The database type. </param>
        /// <param name="subnetId"> The subnet id. </param>
        /// <param name="virtualMachineConfiguration"> Gets or sets the virtual machine configuration. </param>
        /// <param name="instanceCount"> The number of database VMs. </param>
        /// <param name="diskConfiguration"> Gets or sets the disk configuration. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DatabaseConfiguration(SapDatabaseType? databaseType, ResourceIdentifier subnetId, SapVirtualMachineConfiguration virtualMachineConfiguration, long instanceCount, DiskConfiguration diskConfiguration, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DatabaseType = databaseType;
            SubnetId = subnetId;
            VirtualMachineConfiguration = virtualMachineConfiguration;
            InstanceCount = instanceCount;
            DiskConfiguration = diskConfiguration;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DatabaseConfiguration"/> for deserialization. </summary>
        internal DatabaseConfiguration()
        {
        }

        /// <summary> The database type. </summary>
        public SapDatabaseType? DatabaseType { get; set; }
        /// <summary> The subnet id. </summary>
        public ResourceIdentifier SubnetId { get; set; }
        /// <summary> Gets or sets the virtual machine configuration. </summary>
        public SapVirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
        /// <summary> The number of database VMs. </summary>
        public long InstanceCount { get; set; }
        /// <summary> Gets or sets the disk configuration. </summary>
        internal DiskConfiguration DiskConfiguration { get; set; }
        /// <summary> The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup']. </summary>
        public IDictionary<string, DiskVolumeConfiguration> DiskVolumeConfigurations
        {
            get
            {
                if (DiskConfiguration is null)
                    DiskConfiguration = new DiskConfiguration();
                return DiskConfiguration.DiskVolumeConfigurations;
            }
        }
    }
}
