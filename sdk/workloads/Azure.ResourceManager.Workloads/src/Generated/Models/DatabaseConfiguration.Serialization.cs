// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class DatabaseConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DatabaseType))
            {
                writer.WritePropertyName("databaseType");
                writer.WriteStringValue(DatabaseType.Value.ToString());
            }
            writer.WritePropertyName("subnetId");
            writer.WriteStringValue(SubnetId);
            writer.WritePropertyName("virtualMachineConfiguration");
            writer.WriteObjectValue(VirtualMachineConfiguration);
            writer.WritePropertyName("instanceCount");
            writer.WriteNumberValue(InstanceCount);
            writer.WriteEndObject();
        }

        internal static DatabaseConfiguration DeserializeDatabaseConfiguration(JsonElement element)
        {
            Optional<SapDatabaseType> databaseType = default;
            ResourceIdentifier subnetId = default;
            VirtualMachineConfiguration virtualMachineConfiguration = default;
            long instanceCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("databaseType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    databaseType = new SapDatabaseType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("subnetId"))
                {
                    subnetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("virtualMachineConfiguration"))
                {
                    virtualMachineConfiguration = VirtualMachineConfiguration.DeserializeVirtualMachineConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("instanceCount"))
                {
                    instanceCount = property.Value.GetInt64();
                    continue;
                }
            }
            return new DatabaseConfiguration(Optional.ToNullable(databaseType), subnetId, virtualMachineConfiguration, instanceCount);
        }
    }
}
