// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class SapLandscapeMonitorMetricThresholds : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Green))
            {
                writer.WritePropertyName("green"u8);
                writer.WriteNumberValue(Green.Value);
            }
            if (Optional.IsDefined(Yellow))
            {
                writer.WritePropertyName("yellow"u8);
                writer.WriteNumberValue(Yellow.Value);
            }
            if (Optional.IsDefined(Red))
            {
                writer.WritePropertyName("red"u8);
                writer.WriteNumberValue(Red.Value);
            }
            writer.WriteEndObject();
        }

        internal static SapLandscapeMonitorMetricThresholds DeserializeSapLandscapeMonitorMetricThresholds(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<float> green = default;
            Optional<float> yellow = default;
            Optional<float> red = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("green"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    green = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("yellow"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    yellow = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("red"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    red = property.Value.GetSingle();
                    continue;
                }
            }
            return new SapLandscapeMonitorMetricThresholds(name.Value, Optional.ToNullable(green), Optional.ToNullable(yellow), Optional.ToNullable(red));
        }
    }
}
