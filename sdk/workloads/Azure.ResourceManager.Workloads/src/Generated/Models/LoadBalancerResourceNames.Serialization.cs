// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class LoadBalancerResourceNames : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(LoadBalancerName))
            {
                writer.WritePropertyName("loadBalancerName"u8);
                writer.WriteStringValue(LoadBalancerName);
            }
            if (Optional.IsCollectionDefined(FrontendIPConfigurationNames))
            {
                writer.WritePropertyName("frontendIpConfigurationNames"u8);
                writer.WriteStartArray();
                foreach (var item in FrontendIPConfigurationNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(BackendPoolNames))
            {
                writer.WritePropertyName("backendPoolNames"u8);
                writer.WriteStartArray();
                foreach (var item in BackendPoolNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(HealthProbeNames))
            {
                writer.WritePropertyName("healthProbeNames"u8);
                writer.WriteStartArray();
                foreach (var item in HealthProbeNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static LoadBalancerResourceNames DeserializeLoadBalancerResourceNames(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> loadBalancerName = default;
            Optional<IList<string>> frontendIPConfigurationNames = default;
            Optional<IList<string>> backendPoolNames = default;
            Optional<IList<string>> healthProbeNames = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("loadBalancerName"u8))
                {
                    loadBalancerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("frontendIpConfigurationNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    frontendIPConfigurationNames = array;
                    continue;
                }
                if (property.NameEquals("backendPoolNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    backendPoolNames = array;
                    continue;
                }
                if (property.NameEquals("healthProbeNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    healthProbeNames = array;
                    continue;
                }
            }
            return new LoadBalancerResourceNames(loadBalancerName.Value, Optional.ToList(frontendIPConfigurationNames), Optional.ToList(backendPoolNames), Optional.ToList(healthProbeNames));
        }
    }
}
