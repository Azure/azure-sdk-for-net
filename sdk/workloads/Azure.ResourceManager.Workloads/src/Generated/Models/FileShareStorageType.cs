// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> File share backing storage type. </summary>
    public readonly partial struct FileShareStorageType : IEquatable<FileShareStorageType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FileShareStorageType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FileShareStorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardLrsValue = "Standard_LRS";
        private const string StandardGrsValue = "Standard_GRS";
        private const string StandardZrsValue = "Standard_ZRS";
        private const string PremiumLrsValue = "Premium_LRS";

        /// <summary> Standard_LRS. </summary>
        public static FileShareStorageType StandardLrs { get; } = new FileShareStorageType(StandardLrsValue);
        /// <summary> Standard_GRS. </summary>
        public static FileShareStorageType StandardGrs { get; } = new FileShareStorageType(StandardGrsValue);
        /// <summary> Standard_ZRS. </summary>
        public static FileShareStorageType StandardZrs { get; } = new FileShareStorageType(StandardZrsValue);
        /// <summary> Premium_LRS. </summary>
        public static FileShareStorageType PremiumLrs { get; } = new FileShareStorageType(PremiumLrsValue);
        /// <summary> Determines if two <see cref="FileShareStorageType"/> values are the same. </summary>
        public static bool operator ==(FileShareStorageType left, FileShareStorageType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FileShareStorageType"/> values are not the same. </summary>
        public static bool operator !=(FileShareStorageType left, FileShareStorageType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FileShareStorageType"/>. </summary>
        public static implicit operator FileShareStorageType(string value) => new FileShareStorageType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FileShareStorageType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FileShareStorageType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
