// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class FileshareProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("shareType"u8);
            writer.WriteStringValue(ShareType.ToString());
            writer.WritePropertyName("storageType"u8);
            writer.WriteStringValue(StorageType.ToString());
            if (Optional.IsDefined(ShareSizeInGB))
            {
                writer.WritePropertyName("shareSizeInGB"u8);
                writer.WriteNumberValue(ShareSizeInGB.Value);
            }
            writer.WriteEndObject();
        }

        internal static FileshareProfile DeserializeFileshareProfile(JsonElement element)
        {
            FileShareType shareType = default;
            FileShareStorageType storageType = default;
            Optional<long> shareSizeInGB = default;
            Optional<ResourceIdentifier> storageResourceId = default;
            Optional<string> shareName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("shareType"u8))
                {
                    shareType = new FileShareType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageType"u8))
                {
                    storageType = new FileShareStorageType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("shareSizeInGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    shareSizeInGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("storageResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    storageResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("shareName"u8))
                {
                    shareName = property.Value.GetString();
                    continue;
                }
            }
            return new FileshareProfile(shareType, storageType, Optional.ToNullable(shareSizeInGB), storageResourceId.Value, shareName.Value);
        }
    }
}
