// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class ThreeTierRecommendationResult : IUtf8JsonSerializable, IModelJsonSerializable<ThreeTierRecommendationResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ThreeTierRecommendationResult>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ThreeTierRecommendationResult>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<ThreeTierRecommendationResult>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(DBVmSku))
            {
                writer.WritePropertyName("dbVmSku"u8);
                writer.WriteStringValue(DBVmSku);
            }
            if (Optional.IsDefined(DatabaseInstanceCount))
            {
                writer.WritePropertyName("databaseInstanceCount"u8);
                writer.WriteNumberValue(DatabaseInstanceCount.Value);
            }
            if (Optional.IsDefined(CentralServerVmSku))
            {
                writer.WritePropertyName("centralServerVmSku"u8);
                writer.WriteStringValue(CentralServerVmSku);
            }
            if (Optional.IsDefined(CentralServerInstanceCount))
            {
                writer.WritePropertyName("centralServerInstanceCount"u8);
                writer.WriteNumberValue(CentralServerInstanceCount.Value);
            }
            if (Optional.IsDefined(ApplicationServerVmSku))
            {
                writer.WritePropertyName("applicationServerVmSku"u8);
                writer.WriteStringValue(ApplicationServerVmSku);
            }
            if (Optional.IsDefined(ApplicationServerInstanceCount))
            {
                writer.WritePropertyName("applicationServerInstanceCount"u8);
                writer.WriteNumberValue(ApplicationServerInstanceCount.Value);
            }
            writer.WritePropertyName("deploymentType"u8);
            writer.WriteStringValue(DeploymentType.ToString());
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ThreeTierRecommendationResult DeserializeThreeTierRecommendationResult(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> dbVmSku = default;
            Optional<long> databaseInstanceCount = default;
            Optional<string> centralServerVmSku = default;
            Optional<long> centralServerInstanceCount = default;
            Optional<string> applicationServerVmSku = default;
            Optional<long> applicationServerInstanceCount = default;
            SapDeploymentType deploymentType = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dbVmSku"u8))
                {
                    dbVmSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("databaseInstanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseInstanceCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("centralServerVmSku"u8))
                {
                    centralServerVmSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("centralServerInstanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    centralServerInstanceCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("applicationServerVmSku"u8))
                {
                    applicationServerVmSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationServerInstanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    applicationServerInstanceCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("deploymentType"u8))
                {
                    deploymentType = new SapDeploymentType(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ThreeTierRecommendationResult(deploymentType, dbVmSku.Value, Optional.ToNullable(databaseInstanceCount), centralServerVmSku.Value, Optional.ToNullable(centralServerInstanceCount), applicationServerVmSku.Value, Optional.ToNullable(applicationServerInstanceCount), rawData);
        }

        ThreeTierRecommendationResult IModelJsonSerializable<ThreeTierRecommendationResult>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<ThreeTierRecommendationResult>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeThreeTierRecommendationResult(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ThreeTierRecommendationResult>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<ThreeTierRecommendationResult>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ThreeTierRecommendationResult IModelSerializable<ThreeTierRecommendationResult>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<ThreeTierRecommendationResult>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeThreeTierRecommendationResult(doc.RootElement, options);
        }

        public static implicit operator RequestContent(ThreeTierRecommendationResult model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator ThreeTierRecommendationResult(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeThreeTierRecommendationResult(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
