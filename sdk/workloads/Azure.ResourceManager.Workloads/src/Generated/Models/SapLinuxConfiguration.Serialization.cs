// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class SapLinuxConfiguration : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(DisablePasswordAuthentication))
            {
                writer.WritePropertyName("disablePasswordAuthentication"u8);
                writer.WriteBooleanValue(DisablePasswordAuthentication.Value);
            }
            if (Core.Optional.IsDefined(Ssh))
            {
                writer.WritePropertyName("ssh"u8);
                writer.WriteObjectValue(Ssh);
            }
            if (Core.Optional.IsDefined(SshKeyPair))
            {
                writer.WritePropertyName("sshKeyPair"u8);
                writer.WriteObjectValue(SshKeyPair);
            }
            writer.WritePropertyName("osType"u8);
            writer.WriteStringValue(OSType.ToString());
            writer.WriteEndObject();
        }

        internal static SapLinuxConfiguration DeserializeSapLinuxConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<bool> disablePasswordAuthentication = default;
            Core.Optional<SapSshConfiguration> ssh = default;
            Core.Optional<SapSshKeyPair> sshKeyPair = default;
            SapOSType osType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("disablePasswordAuthentication"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disablePasswordAuthentication = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("ssh"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ssh = SapSshConfiguration.DeserializeSapSshConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("sshKeyPair"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sshKeyPair = SapSshKeyPair.DeserializeSapSshKeyPair(property.Value);
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    osType = new SapOSType(property.Value.GetString());
                    continue;
                }
            }
            return new SapLinuxConfiguration(osType, Core.Optional.ToNullable(disablePasswordAuthentication), ssh.Value, sshKeyPair.Value);
        }
    }
}
