// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET. </summary>
    public readonly partial struct RoutingPreference : IEquatable<RoutingPreference>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RoutingPreference"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RoutingPreference(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string RouteAllValue = "RouteAll";

        /// <summary> Default. </summary>
        public static RoutingPreference Default { get; } = new RoutingPreference(DefaultValue);
        /// <summary> RouteAll. </summary>
        public static RoutingPreference RouteAll { get; } = new RoutingPreference(RouteAllValue);
        /// <summary> Determines if two <see cref="RoutingPreference"/> values are the same. </summary>
        public static bool operator ==(RoutingPreference left, RoutingPreference right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RoutingPreference"/> values are not the same. </summary>
        public static bool operator !=(RoutingPreference left, RoutingPreference right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RoutingPreference"/>. </summary>
        public static implicit operator RoutingPreference(string value) => new RoutingPreference(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RoutingPreference other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RoutingPreference other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
