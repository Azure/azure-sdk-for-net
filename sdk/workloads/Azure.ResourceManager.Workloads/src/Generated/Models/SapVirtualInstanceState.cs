// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Defines the Virtual Instance for SAP state. </summary>
    public readonly partial struct SapVirtualInstanceState : IEquatable<SapVirtualInstanceState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SapVirtualInstanceState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SapVirtualInstanceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InfrastructureDeploymentPendingValue = "InfrastructureDeploymentPending";
        private const string InfrastructureDeploymentInProgressValue = "InfrastructureDeploymentInProgress";
        private const string InfrastructureDeploymentFailedValue = "InfrastructureDeploymentFailed";
        private const string SoftwareInstallationPendingValue = "SoftwareInstallationPending";
        private const string SoftwareInstallationInProgressValue = "SoftwareInstallationInProgress";
        private const string SoftwareInstallationFailedValue = "SoftwareInstallationFailed";
        private const string SoftwareDetectionInProgressValue = "SoftwareDetectionInProgress";
        private const string SoftwareDetectionFailedValue = "SoftwareDetectionFailed";
        private const string DiscoveryPendingValue = "DiscoveryPending";
        private const string DiscoveryInProgressValue = "DiscoveryInProgress";
        private const string DiscoveryFailedValue = "DiscoveryFailed";
        private const string RegistrationCompleteValue = "RegistrationComplete";

        /// <summary> InfrastructureDeploymentPending. </summary>
        public static SapVirtualInstanceState InfrastructureDeploymentPending { get; } = new SapVirtualInstanceState(InfrastructureDeploymentPendingValue);
        /// <summary> InfrastructureDeploymentInProgress. </summary>
        public static SapVirtualInstanceState InfrastructureDeploymentInProgress { get; } = new SapVirtualInstanceState(InfrastructureDeploymentInProgressValue);
        /// <summary> InfrastructureDeploymentFailed. </summary>
        public static SapVirtualInstanceState InfrastructureDeploymentFailed { get; } = new SapVirtualInstanceState(InfrastructureDeploymentFailedValue);
        /// <summary> SoftwareInstallationPending. </summary>
        public static SapVirtualInstanceState SoftwareInstallationPending { get; } = new SapVirtualInstanceState(SoftwareInstallationPendingValue);
        /// <summary> SoftwareInstallationInProgress. </summary>
        public static SapVirtualInstanceState SoftwareInstallationInProgress { get; } = new SapVirtualInstanceState(SoftwareInstallationInProgressValue);
        /// <summary> SoftwareInstallationFailed. </summary>
        public static SapVirtualInstanceState SoftwareInstallationFailed { get; } = new SapVirtualInstanceState(SoftwareInstallationFailedValue);
        /// <summary> SoftwareDetectionInProgress. </summary>
        public static SapVirtualInstanceState SoftwareDetectionInProgress { get; } = new SapVirtualInstanceState(SoftwareDetectionInProgressValue);
        /// <summary> SoftwareDetectionFailed. </summary>
        public static SapVirtualInstanceState SoftwareDetectionFailed { get; } = new SapVirtualInstanceState(SoftwareDetectionFailedValue);
        /// <summary> DiscoveryPending. </summary>
        public static SapVirtualInstanceState DiscoveryPending { get; } = new SapVirtualInstanceState(DiscoveryPendingValue);
        /// <summary> DiscoveryInProgress. </summary>
        public static SapVirtualInstanceState DiscoveryInProgress { get; } = new SapVirtualInstanceState(DiscoveryInProgressValue);
        /// <summary> DiscoveryFailed. </summary>
        public static SapVirtualInstanceState DiscoveryFailed { get; } = new SapVirtualInstanceState(DiscoveryFailedValue);
        /// <summary> RegistrationComplete. </summary>
        public static SapVirtualInstanceState RegistrationComplete { get; } = new SapVirtualInstanceState(RegistrationCompleteValue);
        /// <summary> Determines if two <see cref="SapVirtualInstanceState"/> values are the same. </summary>
        public static bool operator ==(SapVirtualInstanceState left, SapVirtualInstanceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SapVirtualInstanceState"/> values are not the same. </summary>
        public static bool operator !=(SapVirtualInstanceState left, SapVirtualInstanceState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SapVirtualInstanceState"/>. </summary>
        public static implicit operator SapVirtualInstanceState(string value) => new SapVirtualInstanceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SapVirtualInstanceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SapVirtualInstanceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
