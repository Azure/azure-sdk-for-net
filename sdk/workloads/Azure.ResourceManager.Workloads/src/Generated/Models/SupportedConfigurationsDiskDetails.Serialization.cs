// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class SupportedConfigurationsDiskDetails : IUtf8JsonSerializable, IModelJsonSerializable<SupportedConfigurationsDiskDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<SupportedConfigurationsDiskDetails>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<SupportedConfigurationsDiskDetails>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Optional.IsDefined(SizeInGB))
            {
                writer.WritePropertyName("sizeGB"u8);
                writer.WriteNumberValue(SizeInGB.Value);
            }
            if (Optional.IsDefined(MinimumSupportedDiskCount))
            {
                writer.WritePropertyName("minimumSupportedDiskCount"u8);
                writer.WriteNumberValue(MinimumSupportedDiskCount.Value);
            }
            if (Optional.IsDefined(MaximumSupportedDiskCount))
            {
                writer.WritePropertyName("maximumSupportedDiskCount"u8);
                writer.WriteNumberValue(MaximumSupportedDiskCount.Value);
            }
            if (Optional.IsDefined(IopsReadWrite))
            {
                writer.WritePropertyName("iopsReadWrite"u8);
                writer.WriteNumberValue(IopsReadWrite.Value);
            }
            if (Optional.IsDefined(MbpsReadWrite))
            {
                writer.WritePropertyName("mbpsReadWrite"u8);
                writer.WriteNumberValue(MbpsReadWrite.Value);
            }
            if (Optional.IsDefined(DiskTier))
            {
                writer.WritePropertyName("diskTier"u8);
                writer.WriteStringValue(DiskTier);
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static SupportedConfigurationsDiskDetails DeserializeSupportedConfigurationsDiskDetails(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<SapDiskSku> sku = default;
            Optional<long> sizeGB = default;
            Optional<long> minimumSupportedDiskCount = default;
            Optional<long> maximumSupportedDiskCount = default;
            Optional<long> iopsReadWrite = default;
            Optional<long> mbpsReadWrite = default;
            Optional<string> diskTier = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = SapDiskSku.DeserializeSapDiskSku(property.Value);
                    continue;
                }
                if (property.NameEquals("sizeGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sizeGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("minimumSupportedDiskCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minimumSupportedDiskCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("maximumSupportedDiskCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maximumSupportedDiskCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("iopsReadWrite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    iopsReadWrite = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("mbpsReadWrite"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    mbpsReadWrite = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("diskTier"u8))
                {
                    diskTier = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new SupportedConfigurationsDiskDetails(sku.Value, Optional.ToNullable(sizeGB), Optional.ToNullable(minimumSupportedDiskCount), Optional.ToNullable(maximumSupportedDiskCount), Optional.ToNullable(iopsReadWrite), Optional.ToNullable(mbpsReadWrite), diskTier.Value, rawData);
        }

        SupportedConfigurationsDiskDetails IModelJsonSerializable<SupportedConfigurationsDiskDetails>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeSupportedConfigurationsDiskDetails(doc.RootElement, options);
        }

        BinaryData IModelSerializable<SupportedConfigurationsDiskDetails>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        SupportedConfigurationsDiskDetails IModelSerializable<SupportedConfigurationsDiskDetails>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeSupportedConfigurationsDiskDetails(doc.RootElement, options);
        }

        public static implicit operator RequestContent(SupportedConfigurationsDiskDetails model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator SupportedConfigurationsDiskDetails(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeSupportedConfigurationsDiskDetails(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
