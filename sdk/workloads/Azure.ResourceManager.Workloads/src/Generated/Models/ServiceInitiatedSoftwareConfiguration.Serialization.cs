// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class ServiceInitiatedSoftwareConfiguration : IUtf8JsonSerializable, IModelJsonSerializable<ServiceInitiatedSoftwareConfiguration>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ServiceInitiatedSoftwareConfiguration>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ServiceInitiatedSoftwareConfiguration>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<ServiceInitiatedSoftwareConfiguration>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("bomUrl"u8);
            writer.WriteStringValue(BomUri.AbsoluteUri);
            writer.WritePropertyName("softwareVersion"u8);
            writer.WriteStringValue(SoftwareVersion);
            writer.WritePropertyName("sapBitsStorageAccountId"u8);
            writer.WriteStringValue(SapBitsStorageAccountId);
            writer.WritePropertyName("sapFqdn"u8);
            writer.WriteStringValue(SapFqdn);
            writer.WritePropertyName("sshPrivateKey"u8);
            writer.WriteStringValue(SshPrivateKey);
            if (Optional.IsDefined(HighAvailabilitySoftwareConfiguration))
            {
                writer.WritePropertyName("highAvailabilitySoftwareConfiguration"u8);
                writer.WriteObjectValue(HighAvailabilitySoftwareConfiguration);
            }
            writer.WritePropertyName("softwareInstallationType"u8);
            writer.WriteStringValue(SoftwareInstallationType.ToString());
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ServiceInitiatedSoftwareConfiguration DeserializeServiceInitiatedSoftwareConfiguration(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Uri bomUrl = default;
            string softwareVersion = default;
            string sapBitsStorageAccountId = default;
            string sapFqdn = default;
            string sshPrivateKey = default;
            Optional<HighAvailabilitySoftwareConfiguration> highAvailabilitySoftwareConfiguration = default;
            SapSoftwareInstallationType softwareInstallationType = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("bomUrl"u8))
                {
                    bomUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("softwareVersion"u8))
                {
                    softwareVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sapBitsStorageAccountId"u8))
                {
                    sapBitsStorageAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sapFqdn"u8))
                {
                    sapFqdn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sshPrivateKey"u8))
                {
                    sshPrivateKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("highAvailabilitySoftwareConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    highAvailabilitySoftwareConfiguration = HighAvailabilitySoftwareConfiguration.DeserializeHighAvailabilitySoftwareConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("softwareInstallationType"u8))
                {
                    softwareInstallationType = new SapSoftwareInstallationType(property.Value.GetString());
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new ServiceInitiatedSoftwareConfiguration(softwareInstallationType, bomUrl, softwareVersion, sapBitsStorageAccountId, sapFqdn, sshPrivateKey, highAvailabilitySoftwareConfiguration.Value, rawData);
        }

        ServiceInitiatedSoftwareConfiguration IModelJsonSerializable<ServiceInitiatedSoftwareConfiguration>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<ServiceInitiatedSoftwareConfiguration>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeServiceInitiatedSoftwareConfiguration(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ServiceInitiatedSoftwareConfiguration>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<ServiceInitiatedSoftwareConfiguration>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ServiceInitiatedSoftwareConfiguration IModelSerializable<ServiceInitiatedSoftwareConfiguration>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<ServiceInitiatedSoftwareConfiguration>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeServiceInitiatedSoftwareConfiguration(doc.RootElement, options);
        }

        public static implicit operator RequestContent(ServiceInitiatedSoftwareConfiguration model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        public static explicit operator ServiceInitiatedSoftwareConfiguration(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeServiceInitiatedSoftwareConfiguration(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
