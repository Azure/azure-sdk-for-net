// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Defines the disk sku name. </summary>
    public readonly partial struct DiskSkuName : IEquatable<DiskSkuName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DiskSkuName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiskSkuName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardLrsValue = "Standard_LRS";
        private const string PremiumLrsValue = "Premium_LRS";
        private const string StandardSsdLrsValue = "StandardSSD_LRS";
        private const string UltraSsdLrsValue = "UltraSSD_LRS";
        private const string PremiumZrsValue = "Premium_ZRS";
        private const string StandardSsdZrsValue = "StandardSSD_ZRS";
        private const string PremiumV2LrsValue = "PremiumV2_LRS";

        /// <summary> Standard_LRS. </summary>
        public static DiskSkuName StandardLrs { get; } = new DiskSkuName(StandardLrsValue);
        /// <summary> Premium_LRS. </summary>
        public static DiskSkuName PremiumLrs { get; } = new DiskSkuName(PremiumLrsValue);
        /// <summary> StandardSSD_LRS. </summary>
        public static DiskSkuName StandardSsdLrs { get; } = new DiskSkuName(StandardSsdLrsValue);
        /// <summary> UltraSSD_LRS. </summary>
        public static DiskSkuName UltraSsdLrs { get; } = new DiskSkuName(UltraSsdLrsValue);
        /// <summary> Premium_ZRS. </summary>
        public static DiskSkuName PremiumZrs { get; } = new DiskSkuName(PremiumZrsValue);
        /// <summary> StandardSSD_ZRS. </summary>
        public static DiskSkuName StandardSsdZrs { get; } = new DiskSkuName(StandardSsdZrsValue);
        /// <summary> PremiumV2_LRS. </summary>
        public static DiskSkuName PremiumV2Lrs { get; } = new DiskSkuName(PremiumV2LrsValue);
        /// <summary> Determines if two <see cref="DiskSkuName"/> values are the same. </summary>
        public static bool operator ==(DiskSkuName left, DiskSkuName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiskSkuName"/> values are not the same. </summary>
        public static bool operator !=(DiskSkuName left, DiskSkuName right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DiskSkuName"/>. </summary>
        public static implicit operator DiskSkuName(string value) => new DiskSkuName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiskSkuName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiskSkuName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
