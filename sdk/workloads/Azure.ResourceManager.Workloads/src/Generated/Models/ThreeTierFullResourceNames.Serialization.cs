// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class ThreeTierFullResourceNames : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(CentralServer))
            {
                writer.WritePropertyName("centralServer"u8);
                writer.WriteObjectValue(CentralServer);
            }
            if (Core.Optional.IsDefined(ApplicationServer))
            {
                writer.WritePropertyName("applicationServer"u8);
                writer.WriteObjectValue(ApplicationServer);
            }
            if (Core.Optional.IsDefined(DatabaseServer))
            {
                writer.WritePropertyName("databaseServer"u8);
                writer.WriteObjectValue(DatabaseServer);
            }
            if (Core.Optional.IsDefined(SharedStorage))
            {
                writer.WritePropertyName("sharedStorage"u8);
                writer.WriteObjectValue(SharedStorage);
            }
            writer.WritePropertyName("namingPatternType"u8);
            writer.WriteStringValue(NamingPatternType.ToString());
            writer.WriteEndObject();
        }

        internal static ThreeTierFullResourceNames DeserializeThreeTierFullResourceNames(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<CentralServerFullResourceNames> centralServer = default;
            Core.Optional<ApplicationServerFullResourceNames> applicationServer = default;
            Core.Optional<DatabaseServerFullResourceNames> databaseServer = default;
            Core.Optional<SharedStorageResourceNames> sharedStorage = default;
            SapNamingPatternType namingPatternType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("centralServer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    centralServer = CentralServerFullResourceNames.DeserializeCentralServerFullResourceNames(property.Value);
                    continue;
                }
                if (property.NameEquals("applicationServer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    applicationServer = ApplicationServerFullResourceNames.DeserializeApplicationServerFullResourceNames(property.Value);
                    continue;
                }
                if (property.NameEquals("databaseServer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    databaseServer = DatabaseServerFullResourceNames.DeserializeDatabaseServerFullResourceNames(property.Value);
                    continue;
                }
                if (property.NameEquals("sharedStorage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sharedStorage = SharedStorageResourceNames.DeserializeSharedStorageResourceNames(property.Value);
                    continue;
                }
                if (property.NameEquals("namingPatternType"u8))
                {
                    namingPatternType = new SapNamingPatternType(property.Value.GetString());
                    continue;
                }
            }
            return new ThreeTierFullResourceNames(namingPatternType, centralServer.Value, applicationServer.Value, databaseServer.Value, sharedStorage.Value);
        }
    }
}
