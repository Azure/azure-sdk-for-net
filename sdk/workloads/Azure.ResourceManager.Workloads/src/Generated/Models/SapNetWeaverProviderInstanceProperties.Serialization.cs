// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Workloads.Models
{
    public partial class SapNetWeaverProviderInstanceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SapSid))
            {
                writer.WritePropertyName("sapSid"u8);
                writer.WriteStringValue(SapSid);
            }
            if (Optional.IsDefined(SapHostname))
            {
                writer.WritePropertyName("sapHostname"u8);
                writer.WriteStringValue(SapHostname);
            }
            if (Optional.IsDefined(SapInstanceNr))
            {
                writer.WritePropertyName("sapInstanceNr"u8);
                writer.WriteStringValue(SapInstanceNr);
            }
            if (Optional.IsCollectionDefined(SapHostFileEntries))
            {
                writer.WritePropertyName("sapHostFileEntries"u8);
                writer.WriteStartArray();
                foreach (var item in SapHostFileEntries)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SapUsername))
            {
                writer.WritePropertyName("sapUsername"u8);
                writer.WriteStringValue(SapUsername);
            }
            if (Optional.IsDefined(SapPassword))
            {
                writer.WritePropertyName("sapPassword"u8);
                writer.WriteStringValue(SapPassword);
            }
            if (Optional.IsDefined(SapPasswordUri))
            {
                writer.WritePropertyName("sapPasswordUri"u8);
                writer.WriteStringValue(SapPasswordUri.AbsoluteUri);
            }
            if (Optional.IsDefined(SapClientId))
            {
                writer.WritePropertyName("sapClientId"u8);
                writer.WriteStringValue(SapClientId);
            }
            if (Optional.IsDefined(SapPortNumber))
            {
                writer.WritePropertyName("sapPortNumber"u8);
                writer.WriteStringValue(SapPortNumber);
            }
            if (Optional.IsDefined(SslCertificateUri))
            {
                writer.WritePropertyName("sslCertificateUri"u8);
                writer.WriteStringValue(SslCertificateUri.AbsoluteUri);
            }
            if (Optional.IsDefined(SslPreference))
            {
                writer.WritePropertyName("sslPreference"u8);
                writer.WriteStringValue(SslPreference.Value.ToString());
            }
            writer.WritePropertyName("providerType"u8);
            writer.WriteStringValue(ProviderType);
            writer.WriteEndObject();
        }

        internal static SapNetWeaverProviderInstanceProperties DeserializeSapNetWeaverProviderInstanceProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> sapSid = default;
            Optional<string> sapHostname = default;
            Optional<string> sapInstanceNr = default;
            Optional<IList<string>> sapHostFileEntries = default;
            Optional<string> sapUsername = default;
            Optional<string> sapPassword = default;
            Optional<Uri> sapPasswordUri = default;
            Optional<string> sapClientId = default;
            Optional<string> sapPortNumber = default;
            Optional<Uri> sslCertificateUri = default;
            Optional<SapSslPreference> sslPreference = default;
            string providerType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sapSid"u8))
                {
                    sapSid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sapHostname"u8))
                {
                    sapHostname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sapInstanceNr"u8))
                {
                    sapInstanceNr = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sapHostFileEntries"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sapHostFileEntries = array;
                    continue;
                }
                if (property.NameEquals("sapUsername"u8))
                {
                    sapUsername = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sapPassword"u8))
                {
                    sapPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sapPasswordUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sapPasswordUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sapClientId"u8))
                {
                    sapClientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sapPortNumber"u8))
                {
                    sapPortNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sslCertificateUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCertificateUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sslPreference"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslPreference = new SapSslPreference(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("providerType"u8))
                {
                    providerType = property.Value.GetString();
                    continue;
                }
            }
            return new SapNetWeaverProviderInstanceProperties(providerType, sapSid.Value, sapHostname.Value, sapInstanceNr.Value, Optional.ToList(sapHostFileEntries), sapUsername.Value, sapPassword.Value, sapPasswordUri.Value, sapClientId.Value, sapPortNumber.Value, sslCertificateUri.Value, Optional.ToNullable(sslPreference));
        }
    }
}
