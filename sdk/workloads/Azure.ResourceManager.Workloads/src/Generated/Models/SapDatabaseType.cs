// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Workloads.Models
{
    /// <summary> Defines the supported SAP Database types. </summary>
    public readonly partial struct SapDatabaseType : IEquatable<SapDatabaseType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SapDatabaseType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SapDatabaseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HanaValue = "HANA";
        private const string DB2Value = "DB2";

        /// <summary> HANA. </summary>
        public static SapDatabaseType Hana { get; } = new SapDatabaseType(HanaValue);
        /// <summary> DB2. </summary>
        public static SapDatabaseType DB2 { get; } = new SapDatabaseType(DB2Value);
        /// <summary> Determines if two <see cref="SapDatabaseType"/> values are the same. </summary>
        public static bool operator ==(SapDatabaseType left, SapDatabaseType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SapDatabaseType"/> values are not the same. </summary>
        public static bool operator !=(SapDatabaseType left, SapDatabaseType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SapDatabaseType"/>. </summary>
        public static implicit operator SapDatabaseType(string value) => new SapDatabaseType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SapDatabaseType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SapDatabaseType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
