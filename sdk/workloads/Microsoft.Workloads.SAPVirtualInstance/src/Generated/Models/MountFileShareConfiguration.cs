// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.SAPVirtualInstance.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Gets or sets the file share configuration where the transport directory
    /// fileshare already exists, and user wishes to mount the fileshare as a
    /// part of the create infra flow.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Mount")]
    public partial class MountFileShareConfiguration : FileShareConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the MountFileShareConfiguration
        /// class.
        /// </summary>
        public MountFileShareConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MountFileShareConfiguration
        /// class.
        /// </summary>
        /// <param name="id">The fileshare resource ID</param>
        /// <param name="privateEndpointId">The private endpoint resource
        /// ID</param>
        public MountFileShareConfiguration(string id, string privateEndpointId)
        {
            Id = id;
            PrivateEndpointId = privateEndpointId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the fileshare resource ID
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the private endpoint resource ID
        /// </summary>
        [JsonProperty(PropertyName = "privateEndpointId")]
        public string PrivateEndpointId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (PrivateEndpointId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrivateEndpointId");
            }
        }
    }
}
