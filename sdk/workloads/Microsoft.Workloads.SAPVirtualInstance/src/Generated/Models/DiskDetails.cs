// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.SAPVirtualInstance.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The supported disk size details for a disk type.
    /// </summary>
    public partial class DiskDetails
    {
        /// <summary>
        /// Initializes a new instance of the DiskDetails class.
        /// </summary>
        public DiskDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskDetails class.
        /// </summary>
        /// <param name="sizeGB">The disk size in GB.</param>
        /// <param name="minimumSupportedDiskCount">The minimum supported disk
        /// count.</param>
        /// <param name="maximumSupportedDiskCount">The maximum supported disk
        /// count.</param>
        /// <param name="iopsReadWrite">The disk Iops.</param>
        /// <param name="mbpsReadWrite">The disk provisioned throughput in
        /// MBps.</param>
        /// <param name="diskTier">The disk tier, e.g. P10, E10.</param>
        public DiskDetails(DiskSku sku = default(DiskSku), long? sizeGB = default(long?), long? minimumSupportedDiskCount = default(long?), long? maximumSupportedDiskCount = default(long?), long? iopsReadWrite = default(long?), long? mbpsReadWrite = default(long?), string diskTier = default(string))
        {
            Sku = sku;
            SizeGB = sizeGB;
            MinimumSupportedDiskCount = minimumSupportedDiskCount;
            MaximumSupportedDiskCount = maximumSupportedDiskCount;
            IopsReadWrite = iopsReadWrite;
            MbpsReadWrite = mbpsReadWrite;
            DiskTier = diskTier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public DiskSku Sku { get; set; }

        /// <summary>
        /// Gets or sets the disk size in GB.
        /// </summary>
        [JsonProperty(PropertyName = "sizeGB")]
        public long? SizeGB { get; set; }

        /// <summary>
        /// Gets or sets the minimum supported disk count.
        /// </summary>
        [JsonProperty(PropertyName = "minimumSupportedDiskCount")]
        public long? MinimumSupportedDiskCount { get; set; }

        /// <summary>
        /// Gets or sets the maximum supported disk count.
        /// </summary>
        [JsonProperty(PropertyName = "maximumSupportedDiskCount")]
        public long? MaximumSupportedDiskCount { get; set; }

        /// <summary>
        /// Gets or sets the disk Iops.
        /// </summary>
        [JsonProperty(PropertyName = "iopsReadWrite")]
        public long? IopsReadWrite { get; set; }

        /// <summary>
        /// Gets or sets the disk provisioned throughput in MBps.
        /// </summary>
        [JsonProperty(PropertyName = "mbpsReadWrite")]
        public long? MbpsReadWrite { get; set; }

        /// <summary>
        /// Gets or sets the disk tier, e.g. P10, E10.
        /// </summary>
        [JsonProperty(PropertyName = "diskTier")]
        public string DiskTier { get; set; }

    }
}
