// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.SAPVirtualInstance.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Define the Virtual Instance for SAP solutions resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SAPVirtualInstanceModel : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the SAPVirtualInstanceModel class.
        /// </summary>
        public SAPVirtualInstanceModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SAPVirtualInstanceModel class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="environment">Possible values include: 'NonProd',
        /// 'Prod'</param>
        /// <param name="sapProduct">Possible values include: 'ECC', 'S4HANA',
        /// 'Other'</param>
        /// <param name="configuration">Defines if the SAP system is being
        /// created using Azure Center for SAP solutions (ACSS) or if an
        /// existing SAP system is being registered with ACSS</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="managedResourcesNetworkAccessType">Specifies the
        /// network access configuration for the resources that will be
        /// deployed in the Managed Resource Group. The options to choose from
        /// are Public and Private. If 'Private' is chosen, the Storage Account
        /// service tag should be enabled on the subnets in which the SAP VMs
        /// exist. This is required for establishing connectivity between VM
        /// extensions and the managed resource group storage account. This
        /// setting is currently applicable only to Storage Account. Learn more
        /// here https://go.microsoft.com/fwlink/?linkid=2247228. Possible
        /// values include: 'Public', 'Private'</param>
        /// <param name="managedResourceGroupConfiguration">Managed resource
        /// group configuration</param>
        /// <param name="status">Possible values include: 'Starting',
        /// 'Running', 'Stopping', 'Offline', 'PartiallyRunning',
        /// 'Unavailable', 'SoftShutdown'</param>
        /// <param name="health">Possible values include: 'Unknown', 'Healthy',
        /// 'Unhealthy', 'Degraded'</param>
        /// <param name="state">Possible values include:
        /// 'InfrastructureDeploymentPending',
        /// 'InfrastructureDeploymentInProgress',
        /// 'InfrastructureDeploymentFailed', 'SoftwareInstallationPending',
        /// 'SoftwareInstallationInProgress', 'SoftwareInstallationFailed',
        /// 'SoftwareDetectionInProgress', 'SoftwareDetectionFailed',
        /// 'DiscoveryPending', 'DiscoveryInProgress', 'DiscoveryFailed',
        /// 'RegistrationComplete', 'ACSSInstallationBlocked'</param>
        /// <param name="provisioningState">Possible values include:
        /// 'Succeeded', 'Updating', 'Creating', 'Failed', 'Deleting',
        /// 'Canceled'</param>
        /// <param name="errors">Indicates any errors on the Virtual Instance
        /// for SAP solutions resource.</param>
        public SAPVirtualInstanceModel(string location, string environment, string sapProduct, SAPConfiguration configuration, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), UserAssignedServiceIdentity identity = default(UserAssignedServiceIdentity), string managedResourcesNetworkAccessType = default(string), ManagedRGConfiguration managedResourceGroupConfiguration = default(ManagedRGConfiguration), string status = default(string), string health = default(string), string state = default(string), string provisioningState = default(string), SAPVirtualInstanceError errors = default(SAPVirtualInstanceError))
            : base(location, id, name, type, systemData, tags)
        {
            Identity = identity;
            Environment = environment;
            SapProduct = sapProduct;
            ManagedResourcesNetworkAccessType = managedResourcesNetworkAccessType;
            Configuration = configuration;
            ManagedResourceGroupConfiguration = managedResourceGroupConfiguration;
            Status = status;
            Health = health;
            State = state;
            ProvisioningState = provisioningState;
            Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public UserAssignedServiceIdentity Identity { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NonProd', 'Prod'
        /// </summary>
        [JsonProperty(PropertyName = "properties.environment")]
        public string Environment { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'ECC', 'S4HANA', 'Other'
        /// </summary>
        [JsonProperty(PropertyName = "properties.sapProduct")]
        public string SapProduct { get; set; }

        /// <summary>
        /// Gets or sets specifies the network access configuration for the
        /// resources that will be deployed in the Managed Resource Group. The
        /// options to choose from are Public and Private. If 'Private' is
        /// chosen, the Storage Account service tag should be enabled on the
        /// subnets in which the SAP VMs exist. This is required for
        /// establishing connectivity between VM extensions and the managed
        /// resource group storage account. This setting is currently
        /// applicable only to Storage Account. Learn more here
        /// https://go.microsoft.com/fwlink/?linkid=2247228. Possible values
        /// include: 'Public', 'Private'
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedResourcesNetworkAccessType")]
        public string ManagedResourcesNetworkAccessType { get; set; }

        /// <summary>
        /// Gets or sets defines if the SAP system is being created using Azure
        /// Center for SAP solutions (ACSS) or if an existing SAP system is
        /// being registered with ACSS
        /// </summary>
        [JsonProperty(PropertyName = "properties.configuration")]
        public SAPConfiguration Configuration { get; set; }

        /// <summary>
        /// Gets or sets managed resource group configuration
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedResourceGroupConfiguration")]
        public ManagedRGConfiguration ManagedResourceGroupConfiguration { get; set; }

        /// <summary>
        /// Gets possible values include: 'Starting', 'Running', 'Stopping',
        /// 'Offline', 'PartiallyRunning', 'Unavailable', 'SoftShutdown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Unknown', 'Healthy', 'Unhealthy',
        /// 'Degraded'
        /// </summary>
        [JsonProperty(PropertyName = "properties.health")]
        public string Health { get; private set; }

        /// <summary>
        /// Gets possible values include: 'InfrastructureDeploymentPending',
        /// 'InfrastructureDeploymentInProgress',
        /// 'InfrastructureDeploymentFailed', 'SoftwareInstallationPending',
        /// 'SoftwareInstallationInProgress', 'SoftwareInstallationFailed',
        /// 'SoftwareDetectionInProgress', 'SoftwareDetectionFailed',
        /// 'DiscoveryPending', 'DiscoveryInProgress', 'DiscoveryFailed',
        /// 'RegistrationComplete', 'ACSSInstallationBlocked'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Gets possible values include: 'Succeeded', 'Updating', 'Creating',
        /// 'Failed', 'Deleting', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets indicates any errors on the Virtual Instance for SAP solutions
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.errors")]
        public SAPVirtualInstanceError Errors { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Environment == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Environment");
            }
            if (SapProduct == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SapProduct");
            }
            if (Configuration == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Configuration");
            }
            if (Identity != null)
            {
                Identity.Validate();
            }
        }
    }
}
