// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.SAPVirtualInstance.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The SAP Software configuration Input when the software is to be
    /// installed by service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ServiceInitiated")]
    public partial class ServiceInitiatedSoftwareConfiguration : SoftwareConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ServiceInitiatedSoftwareConfiguration class.
        /// </summary>
        public ServiceInitiatedSoftwareConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ServiceInitiatedSoftwareConfiguration class.
        /// </summary>
        /// <param name="bomUrl">The URL to the SAP Build of Materials(BOM)
        /// file.</param>
        /// <param name="softwareVersion">The software version to
        /// install.</param>
        /// <param name="sapBitsStorageAccountId">The SAP bits storage account
        /// id.</param>
        /// <param name="sapFqdn">The FQDN to set for the SAP system during
        /// install.</param>
        /// <param name="sshPrivateKey">The SSH private key.</param>
        public ServiceInitiatedSoftwareConfiguration(string bomUrl, string softwareVersion, string sapBitsStorageAccountId, string sapFqdn, string sshPrivateKey, HighAvailabilitySoftwareConfiguration highAvailabilitySoftwareConfiguration = default(HighAvailabilitySoftwareConfiguration))
        {
            BomUrl = bomUrl;
            SoftwareVersion = softwareVersion;
            SapBitsStorageAccountId = sapBitsStorageAccountId;
            SapFqdn = sapFqdn;
            SshPrivateKey = sshPrivateKey;
            HighAvailabilitySoftwareConfiguration = highAvailabilitySoftwareConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the URL to the SAP Build of Materials(BOM) file.
        /// </summary>
        [JsonProperty(PropertyName = "bomUrl")]
        public string BomUrl { get; set; }

        /// <summary>
        /// Gets or sets the software version to install.
        /// </summary>
        [JsonProperty(PropertyName = "softwareVersion")]
        public string SoftwareVersion { get; set; }

        /// <summary>
        /// Gets or sets the SAP bits storage account id.
        /// </summary>
        [JsonProperty(PropertyName = "sapBitsStorageAccountId")]
        public string SapBitsStorageAccountId { get; set; }

        /// <summary>
        /// Gets or sets the FQDN to set for the SAP system during install.
        /// </summary>
        [JsonProperty(PropertyName = "sapFqdn")]
        public string SapFqdn { get; set; }

        /// <summary>
        /// Gets or sets the SSH private key.
        /// </summary>
        [JsonProperty(PropertyName = "sshPrivateKey")]
        public string SshPrivateKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "highAvailabilitySoftwareConfiguration")]
        public HighAvailabilitySoftwareConfiguration HighAvailabilitySoftwareConfiguration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BomUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BomUrl");
            }
            if (SoftwareVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SoftwareVersion");
            }
            if (SapBitsStorageAccountId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SapBitsStorageAccountId");
            }
            if (SapFqdn == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SapFqdn");
            }
            if (SshPrivateKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SshPrivateKey");
            }
            if (HighAvailabilitySoftwareConfiguration != null)
            {
                HighAvailabilitySoftwareConfiguration.Validate();
            }
        }
    }
}
