// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.SAPVirtualInstance.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The resource names object for virtual machine and related resources.
    /// </summary>
    public partial class VirtualMachineResourceNames
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineResourceNames
        /// class.
        /// </summary>
        public VirtualMachineResourceNames()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineResourceNames
        /// class.
        /// </summary>
        /// <param name="vmName">The full name for virtual machine. The length
        /// of this field can be upto 64 characters. If name is not provided,
        /// service uses a default name based on the deployment type. For
        /// SingleServer, default name is {SID}vm. In case of HA-AvZone
        /// systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an
        /// incrementor at the end in case of more than 1 vm per layer. For
        /// distributed and HA-AvSet systems, default name will be
        /// {SID}{app/ascs/db}vm with an incrementor at the end in case of more
        /// than 1 vm per layer.</param>
        /// <param name="hostName">The full name for virtual-machine's host
        /// (computer name). Currently, ACSS only supports host names which are
        /// less than or equal to 13 characters long. If this value is not
        /// provided, vmName will be used as host name.</param>
        /// <param name="networkInterfaces">The list of network interface name
        /// objects for the selected virtual machine. Currently, only one
        /// network interface is supported per virtual machine.</param>
        /// <param name="osDiskName">The full name for OS disk attached to the
        /// VM. If this value is not provided, it will be named by ARM as per
        /// its default naming standards (prefixed with vm name). There is only
        /// one OS disk attached per Virtual Machine.</param>
        /// <param name="dataDiskNames">The full resource names for virtual
        /// machine data disks. This is a dictionary containing list of names
        /// of data disks per volume. Currently supported volumes for database
        /// layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os',
        /// 'backup']. For application and cs layers, only 'default' volume is
        /// supported</param>
        public VirtualMachineResourceNames(string vmName = default(string), string hostName = default(string), IList<NetworkInterfaceResourceNames> networkInterfaces = default(IList<NetworkInterfaceResourceNames>), string osDiskName = default(string), IDictionary<string, IList<string>> dataDiskNames = default(IDictionary<string, IList<string>>))
        {
            VmName = vmName;
            HostName = hostName;
            NetworkInterfaces = networkInterfaces;
            OsDiskName = osDiskName;
            DataDiskNames = dataDiskNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the full name for virtual machine. The length of this
        /// field can be upto 64 characters. If name is not provided, service
        /// uses a default name based on the deployment type. For SingleServer,
        /// default name is {SID}vm. In case of HA-AvZone systems, default name
        /// will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end
        /// in case of more than 1 vm per layer. For distributed and HA-AvSet
        /// systems, default name will be {SID}{app/ascs/db}vm with an
        /// incrementor at the end in case of more than 1 vm per layer.
        /// </summary>
        [JsonProperty(PropertyName = "vmName")]
        public string VmName { get; set; }

        /// <summary>
        /// Gets or sets the full name for virtual-machine's host (computer
        /// name). Currently, ACSS only supports host names which are less than
        /// or equal to 13 characters long. If this value is not provided,
        /// vmName will be used as host name.
        /// </summary>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or sets the list of network interface name objects for the
        /// selected virtual machine. Currently, only one network interface is
        /// supported per virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "networkInterfaces")]
        public IList<NetworkInterfaceResourceNames> NetworkInterfaces { get; set; }

        /// <summary>
        /// Gets or sets the full name for OS disk attached to the VM. If this
        /// value is not provided, it will be named by ARM as per its default
        /// naming standards (prefixed with vm name). There is only one OS disk
        /// attached per Virtual Machine.
        /// </summary>
        [JsonProperty(PropertyName = "osDiskName")]
        public string OsDiskName { get; set; }

        /// <summary>
        /// Gets or sets the full resource names for virtual machine data
        /// disks. This is a dictionary containing list of names of data disks
        /// per volume. Currently supported volumes for database layer are
        /// ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup'].
        /// For application and cs layers, only 'default' volume is supported
        /// </summary>
        [JsonProperty(PropertyName = "dataDiskNames")]
        public IDictionary<string, IList<string>> DataDiskNames { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NetworkInterfaces != null)
            {
                if (NetworkInterfaces.Count > 1)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "NetworkInterfaces", 1);
                }
            }
        }
    }
}
