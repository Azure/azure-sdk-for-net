// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.SAPVirtualInstance.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The resource names object for load balancer and related resources.
    /// </summary>
    public partial class LoadBalancerResourceNames
    {
        /// <summary>
        /// Initializes a new instance of the LoadBalancerResourceNames class.
        /// </summary>
        public LoadBalancerResourceNames()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LoadBalancerResourceNames class.
        /// </summary>
        /// <param name="loadBalancerName">The full resource name for load
        /// balancer. If this value is not provided, load balancer will be name
        /// as {ASCS/DB}-loadBalancer.</param>
        /// <param name="frontendIpConfigurationNames">The list of frontend IP
        /// configuration names. If provided as input, size of this list should
        /// be 2 for cs layer and should be 1 for database layer.</param>
        /// <param name="backendPoolNames">The list of backend pool names.
        /// Currently, ACSS deploys only one backend pool and hence, size of
        /// this list should be 1</param>
        /// <param name="healthProbeNames">The list of health probe names. If
        /// provided as input, size of this list should be 2 for cs layer and
        /// should be 1 for database layer.</param>
        public LoadBalancerResourceNames(string loadBalancerName = default(string), IList<string> frontendIpConfigurationNames = default(IList<string>), IList<string> backendPoolNames = default(IList<string>), IList<string> healthProbeNames = default(IList<string>))
        {
            LoadBalancerName = loadBalancerName;
            FrontendIpConfigurationNames = frontendIpConfigurationNames;
            BackendPoolNames = backendPoolNames;
            HealthProbeNames = healthProbeNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the full resource name for load balancer. If this
        /// value is not provided, load balancer will be name as
        /// {ASCS/DB}-loadBalancer.
        /// </summary>
        [JsonProperty(PropertyName = "loadBalancerName")]
        public string LoadBalancerName { get; set; }

        /// <summary>
        /// Gets or sets the list of frontend IP configuration names. If
        /// provided as input, size of this list should be 2 for cs layer and
        /// should be 1 for database layer.
        /// </summary>
        [JsonProperty(PropertyName = "frontendIpConfigurationNames")]
        public IList<string> FrontendIpConfigurationNames { get; set; }

        /// <summary>
        /// Gets or sets the list of backend pool names. Currently, ACSS
        /// deploys only one backend pool and hence, size of this list should
        /// be 1
        /// </summary>
        [JsonProperty(PropertyName = "backendPoolNames")]
        public IList<string> BackendPoolNames { get; set; }

        /// <summary>
        /// Gets or sets the list of health probe names. If provided as input,
        /// size of this list should be 2 for cs layer and should be 1 for
        /// database layer.
        /// </summary>
        [JsonProperty(PropertyName = "healthProbeNames")]
        public IList<string> HealthProbeNames { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FrontendIpConfigurationNames != null)
            {
                if (FrontendIpConfigurationNames.Count > 2)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "FrontendIpConfigurationNames", 2);
                }
            }
            if (BackendPoolNames != null)
            {
                if (BackendPoolNames.Count > 1)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "BackendPoolNames", 1);
                }
            }
            if (HealthProbeNames != null)
            {
                if (HealthProbeNames.Count > 2)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "HealthProbeNames", 2);
                }
            }
        }
    }
}
