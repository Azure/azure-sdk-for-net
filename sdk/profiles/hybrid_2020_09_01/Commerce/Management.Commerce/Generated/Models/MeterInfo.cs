// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Profiles.hybrid_2020_09_01.Commerce.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Detailed information about the meter.
    /// </summary>
    public partial class MeterInfo
    {
        /// <summary>
        /// Initializes a new instance of the MeterInfo class.
        /// </summary>
        public MeterInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MeterInfo class.
        /// </summary>
        /// <param name="meterId">The unique identifier of the
        /// resource.</param>
        /// <param name="meterName">The name of the meter, within the given
        /// meter category</param>
        /// <param name="meterCategory">The category of the meter, e.g., 'Cloud
        /// services', 'Networking', etc..</param>
        /// <param name="meterSubCategory">The subcategory of the meter, e.g.,
        /// 'A6 Cloud services', 'ExpressRoute (IXP)', etc..</param>
        /// <param name="unit">The unit in which the meter consumption is
        /// charged, e.g., 'Hours', 'GB', etc.</param>
        /// <param name="meterTags">Provides additional meter data. 'Third
        /// Party' indicates a meter with no discount. Blanks indicate First
        /// Party.</param>
        /// <param name="meterRegion">The region in which the Azure service is
        /// available.</param>
        /// <param name="meterRates">The list of key/value pairs for the meter
        /// rates, in the format 'key':'value' where key = the meter quantity,
        /// and value = the corresponding price</param>
        /// <param name="effectiveDate">Indicates the date from which the meter
        /// rate is effective.</param>
        /// <param name="includedQuantity">The resource quantity that is
        /// included in the offer at no cost. Consumption beyond this quantity
        /// will be charged.</param>
        public MeterInfo(System.Guid? meterId = default(System.Guid?), string meterName = default(string), string meterCategory = default(string), string meterSubCategory = default(string), string unit = default(string), IList<string> meterTags = default(IList<string>), string meterRegion = default(string), IDictionary<string, double?> meterRates = default(IDictionary<string, double?>), System.DateTime? effectiveDate = default(System.DateTime?), double? includedQuantity = default(double?))
        {
            MeterId = meterId;
            MeterName = meterName;
            MeterCategory = meterCategory;
            MeterSubCategory = meterSubCategory;
            Unit = unit;
            MeterTags = meterTags;
            MeterRegion = meterRegion;
            MeterRates = meterRates;
            EffectiveDate = effectiveDate;
            IncludedQuantity = includedQuantity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique identifier of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "MeterId")]
        public System.Guid? MeterId { get; set; }

        /// <summary>
        /// Gets or sets the name of the meter, within the given meter category
        /// </summary>
        [JsonProperty(PropertyName = "MeterName")]
        public string MeterName { get; set; }

        /// <summary>
        /// Gets or sets the category of the meter, e.g., 'Cloud services',
        /// 'Networking', etc..
        /// </summary>
        [JsonProperty(PropertyName = "MeterCategory")]
        public string MeterCategory { get; set; }

        /// <summary>
        /// Gets or sets the subcategory of the meter, e.g., 'A6 Cloud
        /// services', 'ExpressRoute (IXP)', etc..
        /// </summary>
        [JsonProperty(PropertyName = "MeterSubCategory")]
        public string MeterSubCategory { get; set; }

        /// <summary>
        /// Gets or sets the unit in which the meter consumption is charged,
        /// e.g., 'Hours', 'GB', etc.
        /// </summary>
        [JsonProperty(PropertyName = "Unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or sets provides additional meter data. 'Third Party'
        /// indicates a meter with no discount. Blanks indicate First Party.
        /// </summary>
        [JsonProperty(PropertyName = "MeterTags")]
        public IList<string> MeterTags { get; set; }

        /// <summary>
        /// Gets or sets the region in which the Azure service is available.
        /// </summary>
        [JsonProperty(PropertyName = "MeterRegion")]
        public string MeterRegion { get; set; }

        /// <summary>
        /// Gets or sets the list of key/value pairs for the meter rates, in
        /// the format 'key':'value' where key = the meter quantity, and value
        /// = the corresponding price
        /// </summary>
        [JsonProperty(PropertyName = "MeterRates")]
        public IDictionary<string, double?> MeterRates { get; set; }

        /// <summary>
        /// Gets or sets indicates the date from which the meter rate is
        /// effective.
        /// </summary>
        [JsonProperty(PropertyName = "EffectiveDate")]
        public System.DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets the resource quantity that is included in the offer at
        /// no cost. Consumption beyond this quantity will be charged.
        /// </summary>
        [JsonProperty(PropertyName = "IncludedQuantity")]
        public double? IncludedQuantity { get; set; }

    }
}
