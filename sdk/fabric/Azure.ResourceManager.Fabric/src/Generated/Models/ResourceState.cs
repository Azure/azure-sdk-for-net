// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Fabric.Models
{
    /// <summary> The state of the Fabric capacity resource. </summary>
    public readonly partial struct ResourceState : IEquatable<ResourceState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string ProvisioningValue = "Provisioning";
        private const string FailedValue = "Failed";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string SuspendingValue = "Suspending";
        private const string SuspendedValue = "Suspended";
        private const string PausingValue = "Pausing";
        private const string PausedValue = "Paused";
        private const string ResumingValue = "Resuming";
        private const string ScalingValue = "Scaling";
        private const string PreparingValue = "Preparing";

        /// <summary> Resource is active. </summary>
        public static ResourceState Active { get; } = new ResourceState(ActiveValue);
        /// <summary> Resource is provisioning. </summary>
        public static ResourceState Provisioning { get; } = new ResourceState(ProvisioningValue);
        /// <summary> Resource is failed. </summary>
        public static ResourceState Failed { get; } = new ResourceState(FailedValue);
        /// <summary> Resource is updating. </summary>
        public static ResourceState Updating { get; } = new ResourceState(UpdatingValue);
        /// <summary> Resource is deleting. </summary>
        public static ResourceState Deleting { get; } = new ResourceState(DeletingValue);
        /// <summary> Resource is suspending. </summary>
        public static ResourceState Suspending { get; } = new ResourceState(SuspendingValue);
        /// <summary> Resource is suspended. </summary>
        public static ResourceState Suspended { get; } = new ResourceState(SuspendedValue);
        /// <summary> Resource is pausing. </summary>
        public static ResourceState Pausing { get; } = new ResourceState(PausingValue);
        /// <summary> Resource is paused. </summary>
        public static ResourceState Paused { get; } = new ResourceState(PausedValue);
        /// <summary> Resource is resuming. </summary>
        public static ResourceState Resuming { get; } = new ResourceState(ResumingValue);
        /// <summary> Resource is scaling. </summary>
        public static ResourceState Scaling { get; } = new ResourceState(ScalingValue);
        /// <summary> Resource is preparing. </summary>
        public static ResourceState Preparing { get; } = new ResourceState(PreparingValue);
        /// <summary> Determines if two <see cref="ResourceState"/> values are the same. </summary>
        public static bool operator ==(ResourceState left, ResourceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceState"/> values are not the same. </summary>
        public static bool operator !=(ResourceState left, ResourceState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResourceState"/>. </summary>
        public static implicit operator ResourceState(string value) => new ResourceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
