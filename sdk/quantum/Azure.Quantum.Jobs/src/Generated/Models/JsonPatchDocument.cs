// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Quantum.Jobs.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A JSONPatch document as defined by RFC 6902
    /// </summary>
    public partial class JsonPatchDocument
    {
        /// <summary>
        /// Initializes a new instance of the JsonPatchDocument class.
        /// </summary>
        public JsonPatchDocument()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JsonPatchDocument class.
        /// </summary>
        /// <param name="op">The operation to be performed. Possible values
        /// include: 'add', 'remove', 'replace', 'move', 'copy', 'test'</param>
        /// <param name="path">A JSON-Pointer.</param>
        /// <param name="value">A value to be used in the operation on the
        /// path.</param>
        /// <param name="fromProperty">Optional field used in copy and move
        /// operations.</param>
        public JsonPatchDocument(string op, string path, object value = default(object), string fromProperty = default(string))
        {
            Op = op;
            Path = path;
            Value = value;
            FromProperty = fromProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the operation to be performed. Possible values
        /// include: 'add', 'remove', 'replace', 'move', 'copy', 'test'
        /// </summary>
        [JsonProperty(PropertyName = "op")]
        public string Op { get; set; }

        /// <summary>
        /// Gets or sets a JSON-Pointer.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets a value to be used in the operation on the path.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Gets or sets optional field used in copy and move operations.
        /// </summary>
        [JsonProperty(PropertyName = "from")]
        public string FromProperty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Op == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Op");
            }
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
        }
    }
}
