// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Quantum.Jobs.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Quota information.
    /// </summary>
    public partial class Quota
    {
        /// <summary>
        /// Initializes a new instance of the Quota class.
        /// </summary>
        public Quota()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Quota class.
        /// </summary>
        /// <param name="dimension">The name of the dimension associated with
        /// the quota.</param>
        /// <param name="scope">The scope at which the quota is applied.
        /// Possible values include: 'Workspace', 'Subscription'</param>
        /// <param name="providerId">The unique identifier for the
        /// provider.</param>
        /// <param name="utilization">The amount of the usage that has been
        /// applied for the current period.</param>
        /// <param name="holds">The amount of the usage that has been reserved
        /// but not applied for the current period.</param>
        /// <param name="limit">The maximum amount of usage allowed for the
        /// current period.</param>
        /// <param name="period">The time period in which the quota's
        /// underlying meter is accumulated. Based on calendar year. 'None' is
        /// used for concurrent quotas. Possible values include: 'None',
        /// 'Monthly'</param>
        public Quota(string dimension = default(string), string scope = default(string), string providerId = default(string), double? utilization = default(double?), double? holds = default(double?), double? limit = default(double?), string period = default(string))
        {
            Dimension = dimension;
            Scope = scope;
            ProviderId = providerId;
            Utilization = utilization;
            Holds = holds;
            Limit = limit;
            Period = period;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the dimension associated with the quota.
        /// </summary>
        [JsonProperty(PropertyName = "dimension")]
        public string Dimension { get; set; }

        /// <summary>
        /// Gets or sets the scope at which the quota is applied. Possible
        /// values include: 'Workspace', 'Subscription'
        /// </summary>
        [JsonProperty(PropertyName = "scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier for the provider.
        /// </summary>
        [JsonProperty(PropertyName = "providerId")]
        public string ProviderId { get; set; }

        /// <summary>
        /// Gets or sets the amount of the usage that has been applied for the
        /// current period.
        /// </summary>
        [JsonProperty(PropertyName = "utilization")]
        public double? Utilization { get; set; }

        /// <summary>
        /// Gets or sets the amount of the usage that has been reserved but not
        /// applied for the current period.
        /// </summary>
        [JsonProperty(PropertyName = "holds")]
        public double? Holds { get; set; }

        /// <summary>
        /// Gets or sets the maximum amount of usage allowed for the current
        /// period.
        /// </summary>
        [JsonProperty(PropertyName = "limit")]
        public double? Limit { get; set; }

        /// <summary>
        /// Gets or sets the time period in which the quota's underlying meter
        /// is accumulated. Based on calendar year. 'None' is used for
        /// concurrent quotas. Possible values include: 'None', 'Monthly'
        /// </summary>
        [JsonProperty(PropertyName = "period")]
        public string Period { get; set; }

    }
}
