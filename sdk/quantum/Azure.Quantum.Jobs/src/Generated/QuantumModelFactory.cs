// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Quantum.Jobs.Models;

namespace Azure.Quantum.Jobs
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class QuantumModelFactory
    {
        /// <summary> Initializes new instance of JobDetails class. </summary>
        /// <param name="id"> The job id. </param>
        /// <param name="name"> The job name. Is not required for the name to be unique and it&apos;s only used for display purposes. </param>
        /// <param name="containerUri"> The blob container SAS uri, the container is used to host job data. </param>
        /// <param name="inputDataUri"> The input blob SAS uri, if specified, it will override the default input blob in the container. </param>
        /// <param name="inputDataFormat"> The format of the input data. </param>
        /// <param name="inputParams"> The input parameters for the job. JSON object used by the target solver. It is expected that the size of this object is small and only used to specify parameters for the execution target, not the input data. </param>
        /// <param name="providerId"> The unique identifier for the provider. </param>
        /// <param name="target"> The target identifier to run the job. </param>
        /// <param name="metadata"> The job metadata. Metadata provides client the ability to store client-specific information. </param>
        /// <param name="outputDataUri"> The output blob SAS uri. When a job finishes successfully, results will be uploaded to this blob. </param>
        /// <param name="outputDataFormat"> The format of the output data. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="creationTime"> The creation time of the job. </param>
        /// <param name="beginExecutionTime"> The time when the job began execution. </param>
        /// <param name="endExecutionTime"> The time when the job finished execution. </param>
        /// <param name="cancellationTime"> The time when a job was successfully cancelled. </param>
        /// <param name="errorData"> The error data for the job. This is expected only when Status &apos;Failed&apos;. </param>
        /// <returns> A new <see cref="Models.JobDetails"/> instance for mocking. </returns>
        public static JobDetails JobDetails(string id = default, string name = default, string containerUri = default, string inputDataUri = default, string inputDataFormat = default, object inputParams = default, string providerId = default, string target = default, IDictionary<string, string> metadata = default, string outputDataUri = default, string outputDataFormat = default, JobStatus? status = default, DateTimeOffset? creationTime = default, DateTimeOffset? beginExecutionTime = default, DateTimeOffset? endExecutionTime = default, DateTimeOffset? cancellationTime = default, ErrorData errorData = default)
        {
            metadata ??= new Dictionary<string, string>();
            return new JobDetails(id, name, containerUri, inputDataUri, inputDataFormat, inputParams, providerId, target, metadata, outputDataUri, outputDataFormat, status, creationTime, beginExecutionTime, endExecutionTime, cancellationTime, errorData);
        }

        /// <summary> Initializes new instance of ErrorData class. </summary>
        /// <param name="code"> An identifier for the error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the error, intended to be suitable for displaying in a user interface. </param>
        /// <returns> A new <see cref="Models.ErrorData"/> instance for mocking. </returns>
        public static ErrorData ErrorData(string code = default, string message = default)
        {
            return new ErrorData(code, message);
        }

        /// <summary> Initializes new instance of ProviderStatus class. </summary>
        /// <param name="id"> Provider id. </param>
        /// <param name="currentAvailability"> Provider availability. </param>
        /// <param name="targets"> Job target. </param>
        /// <returns> A new <see cref="Models.ProviderStatus"/> instance for mocking. </returns>
        public static ProviderStatus ProviderStatus(string id = default, ProviderAvailability? currentAvailability = default, IReadOnlyList<TargetStatus> targets = default)
        {
            targets ??= new List<TargetStatus>();
            return new ProviderStatus(id, currentAvailability, targets);
        }

        /// <summary> Initializes new instance of TargetStatus class. </summary>
        /// <param name="id"> Target id. </param>
        /// <param name="currentAvailability"> Target availability. </param>
        /// <param name="averageQueueTime"> Average queue time in seconds. </param>
        /// <param name="statusPage"> A page with detailed status of the provider. </param>
        /// <returns> A new <see cref="Models.TargetStatus"/> instance for mocking. </returns>
        public static TargetStatus TargetStatus(string id = default, TargetAvailability? currentAvailability = default, long? averageQueueTime = default, string statusPage = default)
        {
            return new TargetStatus(id, currentAvailability, averageQueueTime, statusPage);
        }

        /// <summary> Initializes new instance of SasUriResponse class. </summary>
        /// <param name="sasUri"> A URL with a SAS token to upload a blob for execution in the given workspace. </param>
        /// <returns> A new <see cref="Models.SasUriResponse"/> instance for mocking. </returns>
        public static SasUriResponse SasUriResponse(string sasUri = default)
        {
            return new SasUriResponse(sasUri);
        }

        /// <summary> Initializes new instance of QuantumJobQuota class. </summary>
        /// <param name="dimension"> The name of the dimension associated with the quota. </param>
        /// <param name="scope"> The scope at which the quota is applied. </param>
        /// <param name="providerId"> The unique identifier for the provider. </param>
        /// <param name="utilization"> The amount of the usage that has been applied for the current period. </param>
        /// <param name="holds"> The amount of the usage that has been reserved but not applied for the current period. </param>
        /// <param name="limit"> The maximum amount of usage allowed for the current period. </param>
        /// <param name="period"> The time period in which the quota&apos;s underlying meter is accumulated. Based on calendar year. &apos;None&apos; is used for concurrent quotas. </param>
        /// <returns> A new <see cref="Models.QuantumJobQuota"/> instance for mocking. </returns>
        public static QuantumJobQuota QuantumJobQuota(string dimension = default, DimensionScope? scope = default, string providerId = default, float? utilization = default, float? holds = default, float? limit = default, MeterPeriod? period = default)
        {
            return new QuantumJobQuota(dimension, scope, providerId, utilization, holds, limit, period);
        }
    }
}
