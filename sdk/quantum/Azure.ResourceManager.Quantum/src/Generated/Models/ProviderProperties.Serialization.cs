// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Quantum.Models
{
    public partial class ProviderProperties : IUtf8JsonSerializable, IJsonModel<ProviderProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ProviderProperties>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<ProviderProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ProviderProperties>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ProviderProperties>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Description))
                {
                    writer.WritePropertyName("description"u8);
                    writer.WriteStringValue(Description);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ProviderType))
                {
                    writer.WritePropertyName("providerType"u8);
                    writer.WriteStringValue(ProviderType);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Company))
                {
                    writer.WritePropertyName("company"u8);
                    writer.WriteStringValue(Company);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DefaultEndpoint))
                {
                    writer.WritePropertyName("defaultEndpoint"u8);
                    writer.WriteStringValue(DefaultEndpoint);
                }
            }
            if (Optional.IsDefined(Aad))
            {
                writer.WritePropertyName("aad"u8);
                writer.WriteObjectValue(Aad);
            }
            if (Optional.IsDefined(ManagedApplication))
            {
                writer.WritePropertyName("managedApplication"u8);
                writer.WriteObjectValue(ManagedApplication);
            }
            if (Optional.IsCollectionDefined(Targets))
            {
                writer.WritePropertyName("targets"u8);
                writer.WriteStartArray();
                foreach (var item in Targets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Skus))
            {
                writer.WritePropertyName("skus"u8);
                writer.WriteStartArray();
                foreach (var item in Skus)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(QuotaDimensions))
            {
                writer.WritePropertyName("quotaDimensions"u8);
                writer.WriteStartArray();
                foreach (var item in QuotaDimensions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PricingDimensions))
            {
                writer.WritePropertyName("pricingDimensions"u8);
                writer.WriteStartArray();
                foreach (var item in PricingDimensions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ProviderProperties IJsonModel<ProviderProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ProviderProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeProviderProperties(document.RootElement, options);
        }

        internal static ProviderProperties DeserializeProviderProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> description = default;
            Optional<string> providerType = default;
            Optional<string> company = default;
            Optional<string> defaultEndpoint = default;
            Optional<ProviderPropertiesAad> aad = default;
            Optional<ProviderPropertiesManagedApplication> managedApplication = default;
            Optional<IReadOnlyList<TargetDescription>> targets = default;
            Optional<IReadOnlyList<SkuDescription>> skus = default;
            Optional<IReadOnlyList<QuotaDimension>> quotaDimensions = default;
            Optional<IReadOnlyList<PricingDimension>> pricingDimensions = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerType"u8))
                {
                    providerType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("company"u8))
                {
                    company = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultEndpoint"u8))
                {
                    defaultEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aad"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    aad = ProviderPropertiesAad.DeserializeProviderPropertiesAad(property.Value);
                    continue;
                }
                if (property.NameEquals("managedApplication"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedApplication = ProviderPropertiesManagedApplication.DeserializeProviderPropertiesManagedApplication(property.Value);
                    continue;
                }
                if (property.NameEquals("targets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<TargetDescription> array = new List<TargetDescription>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TargetDescription.DeserializeTargetDescription(item));
                    }
                    targets = array;
                    continue;
                }
                if (property.NameEquals("skus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SkuDescription> array = new List<SkuDescription>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkuDescription.DeserializeSkuDescription(item));
                    }
                    skus = array;
                    continue;
                }
                if (property.NameEquals("quotaDimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<QuotaDimension> array = new List<QuotaDimension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(QuotaDimension.DeserializeQuotaDimension(item));
                    }
                    quotaDimensions = array;
                    continue;
                }
                if (property.NameEquals("pricingDimensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PricingDimension> array = new List<PricingDimension>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PricingDimension.DeserializePricingDimension(item));
                    }
                    pricingDimensions = array;
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ProviderProperties(description.Value, providerType.Value, company.Value, defaultEndpoint.Value, aad.Value, managedApplication.Value, Optional.ToList(targets), Optional.ToList(skus), Optional.ToList(quotaDimensions), Optional.ToList(pricingDimensions), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ProviderProperties>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ProviderProperties)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ProviderProperties IPersistableModel<ProviderProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ProviderProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeProviderProperties(document.RootElement, options);
        }

        string IPersistableModel<ProviderProperties>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
