// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Quantum.Models
{
    public partial class Provider : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ProviderId))
            {
                writer.WritePropertyName("providerId"u8);
                writer.WriteStringValue(ProviderId);
            }
            if (Core.Optional.IsDefined(ProviderSku))
            {
                writer.WritePropertyName("providerSku"u8);
                writer.WriteStringValue(ProviderSku);
            }
            if (Core.Optional.IsDefined(InstanceUri))
            {
                writer.WritePropertyName("instanceUri"u8);
                writer.WriteStringValue(InstanceUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(ApplicationName))
            {
                writer.WritePropertyName("applicationName"u8);
                writer.WriteStringValue(ApplicationName);
            }
            if (Core.Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Core.Optional.IsDefined(ResourceUsageId))
            {
                writer.WritePropertyName("resourceUsageId"u8);
                writer.WriteStringValue(ResourceUsageId);
            }
            writer.WriteEndObject();
        }

        internal static Provider DeserializeProvider(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> providerId = default;
            Core.Optional<string> providerSku = default;
            Core.Optional<Uri> instanceUri = default;
            Core.Optional<string> applicationName = default;
            Core.Optional<Status> provisioningState = default;
            Core.Optional<string> resourceUsageId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("providerId"u8))
                {
                    providerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerSku"u8))
                {
                    providerSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instanceUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("applicationName"u8))
                {
                    applicationName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new Status(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceUsageId"u8))
                {
                    resourceUsageId = property.Value.GetString();
                    continue;
                }
            }
            return new Provider(providerId.Value, providerSku.Value, instanceUri.Value, applicationName.Value, Core.Optional.ToNullable(provisioningState), resourceUsageId.Value);
        }
    }
}
