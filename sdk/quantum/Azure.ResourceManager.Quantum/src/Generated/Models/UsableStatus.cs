// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Quantum.Models
{
    /// <summary> Whether the current workspace is ready to accept Jobs. </summary>
    public readonly partial struct UsableStatus : IEquatable<UsableStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UsableStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UsableStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string YesValue = "Yes";
        private const string NoValue = "No";
        private const string PartialValue = "Partial";

        /// <summary> Yes. </summary>
        public static UsableStatus Yes { get; } = new UsableStatus(YesValue);
        /// <summary> No. </summary>
        public static UsableStatus No { get; } = new UsableStatus(NoValue);
        /// <summary> Partial. </summary>
        public static UsableStatus Partial { get; } = new UsableStatus(PartialValue);
        /// <summary> Determines if two <see cref="UsableStatus"/> values are the same. </summary>
        public static bool operator ==(UsableStatus left, UsableStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UsableStatus"/> values are not the same. </summary>
        public static bool operator !=(UsableStatus left, UsableStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UsableStatus"/>. </summary>
        public static implicit operator UsableStatus(string value) => new UsableStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UsableStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UsableStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
