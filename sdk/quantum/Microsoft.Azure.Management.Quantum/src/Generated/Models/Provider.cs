// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Quantum.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information about a Provider. A Provider is an entity that offers
    /// Targets to run Azure Quantum Jobs.
    /// </summary>
    public partial class Provider
    {
        /// <summary>
        /// Initializes a new instance of the Provider class.
        /// </summary>
        public Provider()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Provider class.
        /// </summary>
        /// <param name="providerId">Unique id of this provider.</param>
        /// <param name="providerSku">The sku associated with pricing
        /// information for this provider.</param>
        /// <param name="instanceUri">A Uri identifying the specific instance
        /// of this provider.</param>
        /// <param name="applicationName">The provider's marketplace
        /// application display name.</param>
        /// <param name="provisioningState">Provisioning status field. Possible
        /// values include: 'Succeeded', 'Launching', 'Updating', 'Deleting',
        /// 'Deleted', 'Failed'</param>
        /// <param name="resourceUsageId">Id to track resource usage for the
        /// provider.</param>
        public Provider(string providerId = default(string), string providerSku = default(string), string instanceUri = default(string), string applicationName = default(string), string provisioningState = default(string), string resourceUsageId = default(string))
        {
            ProviderId = providerId;
            ProviderSku = providerSku;
            InstanceUri = instanceUri;
            ApplicationName = applicationName;
            ProvisioningState = provisioningState;
            ResourceUsageId = resourceUsageId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique id of this provider.
        /// </summary>
        [JsonProperty(PropertyName = "providerId")]
        public string ProviderId { get; set; }

        /// <summary>
        /// Gets or sets the sku associated with pricing information for this
        /// provider.
        /// </summary>
        [JsonProperty(PropertyName = "providerSku")]
        public string ProviderSku { get; set; }

        /// <summary>
        /// Gets or sets a Uri identifying the specific instance of this
        /// provider.
        /// </summary>
        [JsonProperty(PropertyName = "instanceUri")]
        public string InstanceUri { get; set; }

        /// <summary>
        /// Gets or sets the provider's marketplace application display name.
        /// </summary>
        [JsonProperty(PropertyName = "applicationName")]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or sets provisioning status field. Possible values include:
        /// 'Succeeded', 'Launching', 'Updating', 'Deleting', 'Deleted',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets id to track resource usage for the provider.
        /// </summary>
        [JsonProperty(PropertyName = "resourceUsageId")]
        public string ResourceUsageId { get; set; }

    }
}
