// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DedicatedCloudNodesOperations.
    /// </summary>
    public static partial class DedicatedCloudNodesOperationsExtensions
    {
            /// <summary>
            /// Implements list of dedicated cloud nodes within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicate cloud nodes within subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            public static IPage<DedicatedCloudNode> ListBySubscription(this IDedicatedCloudNodesOperations operations, string filter = default(string), int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListBySubscriptionAsync(filter, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list of dedicated cloud nodes within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicate cloud nodes within subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DedicatedCloudNode>> ListBySubscriptionAsync(this IDedicatedCloudNodesOperations operations, string filter = default(string), int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(filter, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements list of dedicated cloud nodes within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicate cloud nodes within resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            public static IPage<DedicatedCloudNode> ListByResourceGroup(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, filter, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list of dedicated cloud nodes within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicate cloud nodes within resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DedicatedCloudNode>> ListByResourceGroupAsync(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements dedicated cloud node GET method
            /// </summary>
            /// <remarks>
            /// Returns dedicated cloud node
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            public static DedicatedCloudNode Get(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName)
            {
                return operations.GetAsync(resourceGroupName, dedicatedCloudNodeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicated cloud node GET method
            /// </summary>
            /// <remarks>
            /// Returns dedicated cloud node
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudNode> GetAsync(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, dedicatedCloudNodeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements dedicated cloud node PUT method
            /// </summary>
            /// <remarks>
            /// Returns dedicated cloud node by its name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            /// <param name='dedicatedCloudNodeRequest'>
            /// Create Dedicated Cloud Node request
            /// </param>
            public static DedicatedCloudNode CreateOrUpdate(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName, DedicatedCloudNode dedicatedCloudNodeRequest)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicated cloud node PUT method
            /// </summary>
            /// <remarks>
            /// Returns dedicated cloud node by its name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            /// <param name='dedicatedCloudNodeRequest'>
            /// Create Dedicated Cloud Node request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudNode> CreateOrUpdateAsync(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName, DedicatedCloudNode dedicatedCloudNodeRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements dedicated cloud node DELETE method
            /// </summary>
            /// <remarks>
            /// Delete dedicated cloud node
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            public static DedicatedCloudNodesDeleteHeaders Delete(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName)
            {
                return operations.DeleteAsync(resourceGroupName, dedicatedCloudNodeName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicated cloud node DELETE method
            /// </summary>
            /// <remarks>
            /// Delete dedicated cloud node
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudNodesDeleteHeaders> DeleteAsync(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, dedicatedCloudNodeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements dedicated cloud node PATCH method
            /// </summary>
            /// <remarks>
            /// Patches dedicated node properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            /// <param name='tags'>
            /// The tags key:value pairs
            /// </param>
            public static DedicatedCloudNode Update(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, dedicatedCloudNodeName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicated cloud node PATCH method
            /// </summary>
            /// <remarks>
            /// Patches dedicated node properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            /// <param name='tags'>
            /// The tags key:value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudNode> UpdateAsync(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, dedicatedCloudNodeName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements dedicated cloud node PUT method
            /// </summary>
            /// <remarks>
            /// Returns dedicated cloud node by its name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            /// <param name='dedicatedCloudNodeRequest'>
            /// Create Dedicated Cloud Node request
            /// </param>
            public static DedicatedCloudNode BeginCreateOrUpdate(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName, DedicatedCloudNode dedicatedCloudNodeRequest)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicated cloud node PUT method
            /// </summary>
            /// <remarks>
            /// Returns dedicated cloud node by its name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudNodeName'>
            /// dedicated cloud node name
            /// </param>
            /// <param name='dedicatedCloudNodeRequest'>
            /// Create Dedicated Cloud Node request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudNode> BeginCreateOrUpdateAsync(this IDedicatedCloudNodesOperations operations, string resourceGroupName, string dedicatedCloudNodeName, DedicatedCloudNode dedicatedCloudNodeRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dedicatedCloudNodeName, dedicatedCloudNodeRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements list of dedicated cloud nodes within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicate cloud nodes within subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DedicatedCloudNode> ListBySubscriptionNext(this IDedicatedCloudNodesOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list of dedicated cloud nodes within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicate cloud nodes within subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DedicatedCloudNode>> ListBySubscriptionNextAsync(this IDedicatedCloudNodesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements list of dedicated cloud nodes within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicate cloud nodes within resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DedicatedCloudNode> ListByResourceGroupNext(this IDedicatedCloudNodesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list of dedicated cloud nodes within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicate cloud nodes within resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DedicatedCloudNode>> ListByResourceGroupNextAsync(this IDedicatedCloudNodesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
