// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualNetworksOperations.
    /// </summary>
    public static partial class VirtualNetworksOperationsExtensions
    {
            /// <summary>
            /// Implements list available virtual networks within a subscription method
            /// </summary>
            /// <remarks>
            /// Return list of virtual networks in location for private cloud
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regionId'>
            /// The region Id (westus, eastus)
            /// </param>
            /// <param name='pcName'>
            /// The private cloud name
            /// </param>
            /// <param name='resourcePoolName'>
            /// Resource pool used to derive vSphere cluster which contains virtual
            /// networks
            /// </param>
            public static IPage<VirtualNetwork> List(this IVirtualNetworksOperations operations, string regionId, string pcName, string resourcePoolName)
            {
                return operations.ListAsync(regionId, pcName, resourcePoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list available virtual networks within a subscription method
            /// </summary>
            /// <remarks>
            /// Return list of virtual networks in location for private cloud
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regionId'>
            /// The region Id (westus, eastus)
            /// </param>
            /// <param name='pcName'>
            /// The private cloud name
            /// </param>
            /// <param name='resourcePoolName'>
            /// Resource pool used to derive vSphere cluster which contains virtual
            /// networks
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualNetwork>> ListAsync(this IVirtualNetworksOperations operations, string regionId, string pcName, string resourcePoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(regionId, pcName, resourcePoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements virtual network GET method
            /// </summary>
            /// <remarks>
            /// Return virtual network by its name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regionId'>
            /// The region Id (westus, eastus)
            /// </param>
            /// <param name='pcName'>
            /// The private cloud name
            /// </param>
            /// <param name='virtualNetworkName'>
            /// virtual network id (vsphereId)
            /// </param>
            public static VirtualNetwork Get(this IVirtualNetworksOperations operations, string regionId, string pcName, string virtualNetworkName)
            {
                return operations.GetAsync(regionId, pcName, virtualNetworkName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual network GET method
            /// </summary>
            /// <remarks>
            /// Return virtual network by its name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regionId'>
            /// The region Id (westus, eastus)
            /// </param>
            /// <param name='pcName'>
            /// The private cloud name
            /// </param>
            /// <param name='virtualNetworkName'>
            /// virtual network id (vsphereId)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualNetwork> GetAsync(this IVirtualNetworksOperations operations, string regionId, string pcName, string virtualNetworkName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(regionId, pcName, virtualNetworkName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements list available virtual networks within a subscription method
            /// </summary>
            /// <remarks>
            /// Return list of virtual networks in location for private cloud
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualNetwork> ListNext(this IVirtualNetworksOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list available virtual networks within a subscription method
            /// </summary>
            /// <remarks>
            /// Return list of virtual networks in location for private cloud
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualNetwork>> ListNextAsync(this IVirtualNetworksOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
