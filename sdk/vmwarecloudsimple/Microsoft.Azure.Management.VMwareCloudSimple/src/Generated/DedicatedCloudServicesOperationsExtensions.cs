// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DedicatedCloudServicesOperations.
    /// </summary>
    public static partial class DedicatedCloudServicesOperationsExtensions
    {
            /// <summary>
            /// Implements list of dedicatedCloudService objects within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicated cloud services within a subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            public static IPage<DedicatedCloudService> ListBySubscription(this IDedicatedCloudServicesOperations operations, string filter = default(string), int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListBySubscriptionAsync(filter, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list of dedicatedCloudService objects within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicated cloud services within a subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DedicatedCloudService>> ListBySubscriptionAsync(this IDedicatedCloudServicesOperations operations, string filter = default(string), int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(filter, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements list of dedicatedCloudService objects within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicated cloud services within a resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            public static IPage<DedicatedCloudService> ListByResourceGroup(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, filter, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list of dedicatedCloudService objects within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicated cloud services within a resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DedicatedCloudService>> ListByResourceGroupAsync(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements dedicatedCloudService GET method
            /// </summary>
            /// <remarks>
            /// Returns Dedicate Cloud Service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud Service name
            /// </param>
            public static DedicatedCloudService Get(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName)
            {
                return operations.GetAsync(resourceGroupName, dedicatedCloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicatedCloudService GET method
            /// </summary>
            /// <remarks>
            /// Returns Dedicate Cloud Service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud Service name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudService> GetAsync(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, dedicatedCloudServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements dedicated cloud service PUT method
            /// </summary>
            /// <remarks>
            /// Create dedicate cloud service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud Service name
            /// </param>
            /// <param name='dedicatedCloudServiceRequest'>
            /// Create Dedicated Cloud Service request
            /// </param>
            public static DedicatedCloudService CreateOrUpdate(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName, DedicatedCloudService dedicatedCloudServiceRequest)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, dedicatedCloudServiceName, dedicatedCloudServiceRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicated cloud service PUT method
            /// </summary>
            /// <remarks>
            /// Create dedicate cloud service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud Service name
            /// </param>
            /// <param name='dedicatedCloudServiceRequest'>
            /// Create Dedicated Cloud Service request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudService> CreateOrUpdateAsync(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName, DedicatedCloudService dedicatedCloudServiceRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, dedicatedCloudServiceName, dedicatedCloudServiceRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements dedicatedCloudService DELETE method
            /// </summary>
            /// <remarks>
            /// Delete dedicate cloud service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud service name
            /// </param>
            public static DedicatedCloudServicesDeleteHeaders Delete(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName)
            {
                return operations.DeleteAsync(resourceGroupName, dedicatedCloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicatedCloudService DELETE method
            /// </summary>
            /// <remarks>
            /// Delete dedicate cloud service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud service name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudServicesDeleteHeaders> DeleteAsync(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, dedicatedCloudServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements dedicatedCloudService PATCH method
            /// </summary>
            /// <remarks>
            /// Patch dedicated cloud service's properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud service name
            /// </param>
            /// <param name='tags'>
            /// The tags key:value pairs
            /// </param>
            public static DedicatedCloudService Update(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, dedicatedCloudServiceName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicatedCloudService PATCH method
            /// </summary>
            /// <remarks>
            /// Patch dedicated cloud service's properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud service name
            /// </param>
            /// <param name='tags'>
            /// The tags key:value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudService> UpdateAsync(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, dedicatedCloudServiceName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements dedicatedCloudService DELETE method
            /// </summary>
            /// <remarks>
            /// Delete dedicate cloud service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud service name
            /// </param>
            public static DedicatedCloudServicesDeleteHeaders BeginDelete(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, dedicatedCloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements dedicatedCloudService DELETE method
            /// </summary>
            /// <remarks>
            /// Delete dedicate cloud service
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='dedicatedCloudServiceName'>
            /// dedicated cloud service name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DedicatedCloudServicesDeleteHeaders> BeginDeleteAsync(this IDedicatedCloudServicesOperations operations, string resourceGroupName, string dedicatedCloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, dedicatedCloudServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements list of dedicatedCloudService objects within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicated cloud services within a subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DedicatedCloudService> ListBySubscriptionNext(this IDedicatedCloudServicesOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list of dedicatedCloudService objects within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicated cloud services within a subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DedicatedCloudService>> ListBySubscriptionNextAsync(this IDedicatedCloudServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements list of dedicatedCloudService objects within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicated cloud services within a resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DedicatedCloudService> ListByResourceGroupNext(this IDedicatedCloudServicesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list of dedicatedCloudService objects within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of dedicated cloud services within a resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DedicatedCloudService>> ListByResourceGroupNextAsync(this IDedicatedCloudServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
