// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Virtual disk model
    /// </summary>
    public partial class VirtualDisk
    {
        /// <summary>
        /// Initializes a new instance of the VirtualDisk class.
        /// </summary>
        public VirtualDisk()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualDisk class.
        /// </summary>
        /// <param name="controllerId">Disk's Controller id</param>
        /// <param name="independenceMode">Disk's independence mode type.
        /// Possible values include: 'persistent', 'independent_persistent',
        /// 'independent_nonpersistent'</param>
        /// <param name="totalSize">Disk's total size</param>
        /// <param name="virtualDiskId">Disk's id</param>
        /// <param name="virtualDiskName">Disk's display name</param>
        public VirtualDisk(string controllerId, DiskIndependenceMode independenceMode, int totalSize, string virtualDiskId = default(string), string virtualDiskName = default(string))
        {
            ControllerId = controllerId;
            IndependenceMode = independenceMode;
            TotalSize = totalSize;
            VirtualDiskId = virtualDiskId;
            VirtualDiskName = virtualDiskName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets disk's Controller id
        /// </summary>
        [JsonProperty(PropertyName = "controllerId")]
        public string ControllerId { get; set; }

        /// <summary>
        /// Gets or sets disk's independence mode type. Possible values
        /// include: 'persistent', 'independent_persistent',
        /// 'independent_nonpersistent'
        /// </summary>
        [JsonProperty(PropertyName = "independenceMode")]
        public DiskIndependenceMode IndependenceMode { get; set; }

        /// <summary>
        /// Gets or sets disk's total size
        /// </summary>
        [JsonProperty(PropertyName = "totalSize")]
        public int TotalSize { get; set; }

        /// <summary>
        /// Gets or sets disk's id
        /// </summary>
        [JsonProperty(PropertyName = "virtualDiskId")]
        public string VirtualDiskId { get; set; }

        /// <summary>
        /// Gets disk's display name
        /// </summary>
        [JsonProperty(PropertyName = "virtualDiskName")]
        public string VirtualDiskName { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ControllerId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ControllerId");
            }
        }
    }
}
