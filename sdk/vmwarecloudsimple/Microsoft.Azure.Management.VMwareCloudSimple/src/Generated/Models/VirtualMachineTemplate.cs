// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Virtual machine template model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VirtualMachineTemplate
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineTemplate class.
        /// </summary>
        public VirtualMachineTemplate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineTemplate class.
        /// </summary>
        /// <param name="privateCloudId">The Private Cloud Id</param>
        /// <param name="id">virtual machine template id
        /// (privateCloudId:vsphereId)</param>
        /// <param name="location">Azure region</param>
        /// <param name="name">{virtualMachineTemplateName}</param>
        /// <param name="amountOfRam">The amount of memory</param>
        /// <param name="controllers">The list of Virtual Disk
        /// Controllers</param>
        /// <param name="description">The description of Virtual Machine
        /// Template</param>
        /// <param name="disks">The list of Virtual Disks</param>
        /// <param name="exposeToGuestVM">Expose Guest OS or not</param>
        /// <param name="guestOS">The Guest OS</param>
        /// <param name="guestOSType">The Guest OS types</param>
        /// <param name="nics">The list of Virtual NICs</param>
        /// <param name="numberOfCores">The number of CPU cores</param>
        /// <param name="path">path to folder</param>
        /// <param name="vSphereNetworks">The list of VSphere networks</param>
        /// <param name="vSphereTags">The tags from VSphere</param>
        /// <param name="vmwaretools">The VMware tools version</param>
        /// <param
        /// name="type">{resourceProviderNamespace}/{resourceType}</param>
        public VirtualMachineTemplate(string privateCloudId, string id = default(string), string location = default(string), string name = default(string), int? amountOfRam = default(int?), IList<VirtualDiskController> controllers = default(IList<VirtualDiskController>), string description = default(string), IList<VirtualDisk> disks = default(IList<VirtualDisk>), bool? exposeToGuestVM = default(bool?), string guestOS = default(string), string guestOSType = default(string), IList<VirtualNic> nics = default(IList<VirtualNic>), int? numberOfCores = default(int?), string path = default(string), IList<string> vSphereNetworks = default(IList<string>), IList<string> vSphereTags = default(IList<string>), string vmwaretools = default(string), string type = default(string))
        {
            Id = id;
            Location = location;
            Name = name;
            AmountOfRam = amountOfRam;
            Controllers = controllers;
            Description = description;
            Disks = disks;
            ExposeToGuestVM = exposeToGuestVM;
            GuestOS = guestOS;
            GuestOSType = guestOSType;
            Nics = nics;
            NumberOfCores = numberOfCores;
            Path = path;
            PrivateCloudId = privateCloudId;
            VSphereNetworks = vSphereNetworks;
            VSphereTags = vSphereTags;
            Vmwaretools = vmwaretools;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets virtual machine template id (privateCloudId:vsphereId)
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets azure region
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets {virtualMachineTemplateName}
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the amount of memory
        /// </summary>
        [JsonProperty(PropertyName = "properties.amountOfRam")]
        public int? AmountOfRam { get; set; }

        /// <summary>
        /// Gets or sets the list of Virtual Disk Controllers
        /// </summary>
        [JsonProperty(PropertyName = "properties.controllers")]
        public IList<VirtualDiskController> Controllers { get; set; }

        /// <summary>
        /// Gets or sets the description of Virtual Machine Template
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the list of Virtual Disks
        /// </summary>
        [JsonProperty(PropertyName = "properties.disks")]
        public IList<VirtualDisk> Disks { get; set; }

        /// <summary>
        /// Gets or sets expose Guest OS or not
        /// </summary>
        [JsonProperty(PropertyName = "properties.exposeToGuestVM")]
        public bool? ExposeToGuestVM { get; set; }

        /// <summary>
        /// Gets the Guest OS
        /// </summary>
        [JsonProperty(PropertyName = "properties.guestOS")]
        public string GuestOS { get; private set; }

        /// <summary>
        /// Gets the Guest OS types
        /// </summary>
        [JsonProperty(PropertyName = "properties.guestOSType")]
        public string GuestOSType { get; private set; }

        /// <summary>
        /// Gets or sets the list of Virtual NICs
        /// </summary>
        [JsonProperty(PropertyName = "properties.nics")]
        public IList<VirtualNic> Nics { get; set; }

        /// <summary>
        /// Gets or sets the number of CPU cores
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberOfCores")]
        public int? NumberOfCores { get; set; }

        /// <summary>
        /// Gets or sets path to folder
        /// </summary>
        [JsonProperty(PropertyName = "properties.path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the Private Cloud Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateCloudId")]
        public string PrivateCloudId { get; set; }

        /// <summary>
        /// Gets or sets the list of VSphere networks
        /// </summary>
        [JsonProperty(PropertyName = "properties.vSphereNetworks")]
        public IList<string> VSphereNetworks { get; set; }

        /// <summary>
        /// Gets or sets the tags from VSphere
        /// </summary>
        [JsonProperty(PropertyName = "properties.vSphereTags")]
        public IList<string> VSphereTags { get; set; }

        /// <summary>
        /// Gets the VMware tools version
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmwaretools")]
        public string Vmwaretools { get; private set; }

        /// <summary>
        /// Gets {resourceProviderNamespace}/{resourceType}
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PrivateCloudId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrivateCloudId");
            }
            if (Disks != null)
            {
                foreach (var element in Disks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Nics != null)
            {
                foreach (var element1 in Nics)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
