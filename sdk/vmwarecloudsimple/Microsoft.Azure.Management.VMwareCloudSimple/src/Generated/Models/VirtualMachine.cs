// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Virtual machine model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VirtualMachine : IResource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachine class.
        /// </summary>
        public VirtualMachine()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachine class.
        /// </summary>
        /// <param name="location">Azure region</param>
        /// <param name="amountOfRam">The amount of memory</param>
        /// <param name="numberOfCores">The number of CPU cores</param>
        /// <param name="privateCloudId">Private Cloud Id</param>
        /// <param
        /// name="id">/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}</param>
        /// <param name="name">{virtualMachineName}</param>
        /// <param name="controllers">The list of Virtual Disks'
        /// Controllers</param>
        /// <param name="customization">Virtual machine properties</param>
        /// <param name="disks">The list of Virtual Disks</param>
        /// <param name="dnsname">The DNS name of Virtual Machine in
        /// VCenter</param>
        /// <param name="exposeToGuestVM">Expose Guest OS or not</param>
        /// <param name="folder">The path to virtual machine folder in
        /// VCenter</param>
        /// <param name="guestOS">The name of Guest OS</param>
        /// <param name="guestOSType">The Guest OS type. Possible values
        /// include: 'linux', 'windows', 'other'</param>
        /// <param name="nics">The list of Virtual NICs</param>
        /// <param name="password">Password for login. Deprecated - use
        /// customization property</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource</param>
        /// <param name="publicIP">The public ip of Virtual Machine</param>
        /// <param name="resourcePool">Virtual Machines Resource Pool</param>
        /// <param name="status">The status of Virtual machine. Possible values
        /// include: 'running', 'suspended', 'poweredoff', 'updating',
        /// 'deallocating', 'deleting'</param>
        /// <param name="templateId">Virtual Machine Template Id</param>
        /// <param name="username">Username for login. Deprecated - use
        /// customization property</param>
        /// <param name="vSphereNetworks">The list of Virtual VSphere
        /// Networks</param>
        /// <param name="vmId">The internal id of Virtual Machine in
        /// VCenter</param>
        /// <param name="vmwaretools">VMware tools version</param>
        /// <param name="tags">The list of tags</param>
        /// <param
        /// name="type">{resourceProviderNamespace}/{resourceType}</param>
        public VirtualMachine(string location, int amountOfRam, int numberOfCores, string privateCloudId, string id = default(string), string name = default(string), IList<VirtualDiskController> controllers = default(IList<VirtualDiskController>), GuestOSCustomization customization = default(GuestOSCustomization), IList<VirtualDisk> disks = default(IList<VirtualDisk>), string dnsname = default(string), bool? exposeToGuestVM = default(bool?), string folder = default(string), string guestOS = default(string), GuestOSType? guestOSType = default(GuestOSType?), IList<VirtualNic> nics = default(IList<VirtualNic>), string password = default(string), string provisioningState = default(string), string publicIP = default(string), ResourcePool resourcePool = default(ResourcePool), VirtualMachineStatus? status = default(VirtualMachineStatus?), string templateId = default(string), string username = default(string), IList<string> vSphereNetworks = default(IList<string>), string vmId = default(string), string vmwaretools = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string type = default(string))
        {
            Id = id;
            Location = location;
            Name = name;
            AmountOfRam = amountOfRam;
            Controllers = controllers;
            Customization = customization;
            Disks = disks;
            Dnsname = dnsname;
            ExposeToGuestVM = exposeToGuestVM;
            Folder = folder;
            GuestOS = guestOS;
            GuestOSType = guestOSType;
            Nics = nics;
            NumberOfCores = numberOfCores;
            Password = password;
            PrivateCloudId = privateCloudId;
            ProvisioningState = provisioningState;
            PublicIP = publicIP;
            ResourcePool = resourcePool;
            Status = status;
            TemplateId = templateId;
            Username = username;
            VSphereNetworks = vSphereNetworks;
            VmId = vmId;
            Vmwaretools = vmwaretools;
            Tags = tags;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/virtualMachines/{virtualMachineName}
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets azure region
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets {virtualMachineName}
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the amount of memory
        /// </summary>
        [JsonProperty(PropertyName = "properties.amountOfRam")]
        public int AmountOfRam { get; set; }

        /// <summary>
        /// Gets the list of Virtual Disks' Controllers
        /// </summary>
        [JsonProperty(PropertyName = "properties.controllers")]
        public IList<VirtualDiskController> Controllers { get; private set; }

        /// <summary>
        /// Gets or sets virtual machine properties
        /// </summary>
        [JsonProperty(PropertyName = "properties.customization")]
        public GuestOSCustomization Customization { get; set; }

        /// <summary>
        /// Gets or sets the list of Virtual Disks
        /// </summary>
        [JsonProperty(PropertyName = "properties.disks")]
        public IList<VirtualDisk> Disks { get; set; }

        /// <summary>
        /// Gets the DNS name of Virtual Machine in VCenter
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsname")]
        public string Dnsname { get; private set; }

        /// <summary>
        /// Gets or sets expose Guest OS or not
        /// </summary>
        [JsonProperty(PropertyName = "properties.exposeToGuestVM")]
        public bool? ExposeToGuestVM { get; set; }

        /// <summary>
        /// Gets the path to virtual machine folder in VCenter
        /// </summary>
        [JsonProperty(PropertyName = "properties.folder")]
        public string Folder { get; private set; }

        /// <summary>
        /// Gets the name of Guest OS
        /// </summary>
        [JsonProperty(PropertyName = "properties.guestOS")]
        public string GuestOS { get; private set; }

        /// <summary>
        /// Gets the Guest OS type. Possible values include: 'linux',
        /// 'windows', 'other'
        /// </summary>
        [JsonProperty(PropertyName = "properties.guestOSType")]
        public GuestOSType? GuestOSType { get; private set; }

        /// <summary>
        /// Gets or sets the list of Virtual NICs
        /// </summary>
        [JsonProperty(PropertyName = "properties.nics")]
        public IList<VirtualNic> Nics { get; set; }

        /// <summary>
        /// Gets or sets the number of CPU cores
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberOfCores")]
        public int NumberOfCores { get; set; }

        /// <summary>
        /// Gets or sets password for login. Deprecated - use customization
        /// property
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets private Cloud Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateCloudId")]
        public string PrivateCloudId { get; set; }

        /// <summary>
        /// Gets the provisioning status of the resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the public ip of Virtual Machine
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicIP")]
        public string PublicIP { get; private set; }

        /// <summary>
        /// Gets or sets virtual Machines Resource Pool
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourcePool")]
        public ResourcePool ResourcePool { get; set; }

        /// <summary>
        /// Gets the status of Virtual machine. Possible values include:
        /// 'running', 'suspended', 'poweredoff', 'updating', 'deallocating',
        /// 'deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public VirtualMachineStatus? Status { get; private set; }

        /// <summary>
        /// Gets or sets virtual Machine Template Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.templateId")]
        public string TemplateId { get; set; }

        /// <summary>
        /// Gets or sets username for login. Deprecated - use customization
        /// property
        /// </summary>
        [JsonProperty(PropertyName = "properties.username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the list of Virtual VSphere Networks
        /// </summary>
        [JsonProperty(PropertyName = "properties.vSphereNetworks")]
        public IList<string> VSphereNetworks { get; set; }

        /// <summary>
        /// Gets the internal id of Virtual Machine in VCenter
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmId")]
        public string VmId { get; private set; }

        /// <summary>
        /// Gets vMware tools version
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmwaretools")]
        public string Vmwaretools { get; private set; }

        /// <summary>
        /// Gets or sets the list of tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets {resourceProviderNamespace}/{resourceType}
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (PrivateCloudId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrivateCloudId");
            }
            if (Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Name, "^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Name", "^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$");
                }
            }
            if (Disks != null)
            {
                foreach (var element in Disks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Nics != null)
            {
                foreach (var element1 in Nics)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (ResourcePool != null)
            {
                ResourcePool.Validate();
            }
        }
    }
}
