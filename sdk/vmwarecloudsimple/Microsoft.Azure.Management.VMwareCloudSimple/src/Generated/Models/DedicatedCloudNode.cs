// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Dedicated cloud node model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DedicatedCloudNode : IResource
    {
        /// <summary>
        /// Initializes a new instance of the DedicatedCloudNode class.
        /// </summary>
        public DedicatedCloudNode()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DedicatedCloudNode class.
        /// </summary>
        /// <param name="location">Azure region</param>
        /// <param name="availabilityZoneId">Availability Zone id, e.g.
        /// "az1"</param>
        /// <param name="nodesCount">count of nodes to create</param>
        /// <param name="placementGroupId">Placement Group id, e.g.
        /// "n1"</param>
        /// <param name="purchaseId">purchase id</param>
        /// <param name="id1">SKU's id</param>
        /// <param name="name1">SKU's name</param>
        /// <param
        /// name="id">/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/dedicatedCloudNodes/{dedicatedCloudNodeName}</param>
        /// <param name="name">{dedicatedCloudNodeName}</param>
        /// <param name="availabilityZoneName">Availability Zone name, e.g.
        /// "Availability Zone 1"</param>
        /// <param name="cloudRackName">VMWare Cloud Rack Name</param>
        /// <param name="created">date time the resource was created</param>
        /// <param name="placementGroupName">Placement Name, e.g. "Placement
        /// Group 1"</param>
        /// <param name="privateCloudId">Private Cloud Id</param>
        /// <param name="privateCloudName">Resource Pool Name</param>
        /// <param name="provisioningState">The provisioning status of the
        /// resource</param>
        /// <param name="status">Node status, indicates is private cloud set up
        /// on this node or not. Possible values include: 'unused',
        /// 'used'</param>
        /// <param name="vmwareClusterName">VMWare Cluster Name</param>
        /// <param name="sku">Dedicated Cloud Nodes SKU</param>
        /// <param name="tags">Dedicated Cloud Nodes tags</param>
        /// <param
        /// name="type">{resourceProviderNamespace}/{resourceType}</param>
        public DedicatedCloudNode(string location, string availabilityZoneId, int nodesCount, string placementGroupId, System.Guid purchaseId, string id1, string name1, string id = default(string), string name = default(string), string availabilityZoneName = default(string), string cloudRackName = default(string), object created = default(object), string placementGroupName = default(string), string privateCloudId = default(string), string privateCloudName = default(string), string provisioningState = default(string), NodeStatus? status = default(NodeStatus?), string vmwareClusterName = default(string), Sku sku = default(Sku), IDictionary<string, string> tags = default(IDictionary<string, string>), string type = default(string))
        {
            Id = id;
            Location = location;
            Name = name;
            AvailabilityZoneId = availabilityZoneId;
            AvailabilityZoneName = availabilityZoneName;
            CloudRackName = cloudRackName;
            Created = created;
            NodesCount = nodesCount;
            PlacementGroupId = placementGroupId;
            PlacementGroupName = placementGroupName;
            PrivateCloudId = privateCloudId;
            PrivateCloudName = privateCloudName;
            ProvisioningState = provisioningState;
            PurchaseId = purchaseId;
            Id1 = id1;
            Name1 = name1;
            Status = status;
            VmwareClusterName = vmwareClusterName;
            Sku = sku;
            Tags = tags;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/dedicatedCloudNodes/{dedicatedCloudNodeName}
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets azure region
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets {dedicatedCloudNodeName}
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets availability Zone id, e.g. "az1"
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityZoneId")]
        public string AvailabilityZoneId { get; set; }

        /// <summary>
        /// Gets availability Zone name, e.g. "Availability Zone 1"
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityZoneName")]
        public string AvailabilityZoneName { get; private set; }

        /// <summary>
        /// Gets vMWare Cloud Rack Name
        /// </summary>
        [JsonProperty(PropertyName = "properties.cloudRackName")]
        public string CloudRackName { get; private set; }

        /// <summary>
        /// Gets date time the resource was created
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public object Created { get; private set; }

        /// <summary>
        /// Gets or sets count of nodes to create
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodesCount")]
        public int NodesCount { get; set; }

        /// <summary>
        /// Gets or sets placement Group id, e.g. "n1"
        /// </summary>
        [JsonProperty(PropertyName = "properties.placementGroupId")]
        public string PlacementGroupId { get; set; }

        /// <summary>
        /// Gets placement Name, e.g. "Placement Group 1"
        /// </summary>
        [JsonProperty(PropertyName = "properties.placementGroupName")]
        public string PlacementGroupName { get; private set; }

        /// <summary>
        /// Gets private Cloud Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateCloudId")]
        public string PrivateCloudId { get; private set; }

        /// <summary>
        /// Gets resource Pool Name
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateCloudName")]
        public string PrivateCloudName { get; private set; }

        /// <summary>
        /// Gets the provisioning status of the resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets purchase id
        /// </summary>
        [JsonProperty(PropertyName = "properties.purchaseId")]
        public System.Guid PurchaseId { get; set; }

        /// <summary>
        /// Gets or sets sKU's id
        /// </summary>
        [JsonProperty(PropertyName = "properties.skuDescription.id")]
        public string Id1 { get; set; }

        /// <summary>
        /// Gets or sets sKU's name
        /// </summary>
        [JsonProperty(PropertyName = "properties.skuDescription.name")]
        public string Name1 { get; set; }

        /// <summary>
        /// Gets node status, indicates is private cloud set up on this node or
        /// not. Possible values include: 'unused', 'used'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public NodeStatus? Status { get; private set; }

        /// <summary>
        /// Gets vMWare Cluster Name
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmwareClusterName")]
        public string VmwareClusterName { get; private set; }

        /// <summary>
        /// Gets or sets dedicated Cloud Nodes SKU
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets dedicated Cloud Nodes tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets {resourceProviderNamespace}/{resourceType}
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (AvailabilityZoneId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AvailabilityZoneId");
            }
            if (PlacementGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PlacementGroupId");
            }
            if (Id1 == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id1");
            }
            if (Name1 == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name1");
            }
            if (Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Name, "^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Name", "^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$");
                }
            }
            if (Sku != null)
            {
                Sku.Validate();
            }
        }
    }
}
