// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NICType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NICType
    {
        [EnumMember(Value = "E1000")]
        E1000,
        [EnumMember(Value = "E1000E")]
        E1000E,
        [EnumMember(Value = "PCNET32")]
        PCNET32,
        [EnumMember(Value = "VMXNET")]
        VMXNET,
        [EnumMember(Value = "VMXNET2")]
        VMXNET2,
        [EnumMember(Value = "VMXNET3")]
        VMXNET3
    }
    internal static class NICTypeEnumExtension
    {
        internal static string ToSerializedValue(this NICType? value)
        {
            return value == null ? null : ((NICType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NICType value)
        {
            switch( value )
            {
                case NICType.E1000:
                    return "E1000";
                case NICType.E1000E:
                    return "E1000E";
                case NICType.PCNET32:
                    return "PCNET32";
                case NICType.VMXNET:
                    return "VMXNET";
                case NICType.VMXNET2:
                    return "VMXNET2";
                case NICType.VMXNET3:
                    return "VMXNET3";
            }
            return null;
        }

        internal static NICType? ParseNICType(this string value)
        {
            switch( value )
            {
                case "E1000":
                    return NICType.E1000;
                case "E1000E":
                    return NICType.E1000E;
                case "PCNET32":
                    return NICType.PCNET32;
                case "VMXNET":
                    return NICType.VMXNET;
                case "VMXNET2":
                    return NICType.VMXNET2;
                case "VMXNET3":
                    return NICType.VMXNET3;
            }
            return null;
        }
    }
}
