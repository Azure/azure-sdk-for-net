// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Dedicated cloud service model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DedicatedCloudService : IResource
    {
        /// <summary>
        /// Initializes a new instance of the DedicatedCloudService class.
        /// </summary>
        public DedicatedCloudService()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DedicatedCloudService class.
        /// </summary>
        /// <param name="location">Azure region</param>
        /// <param name="gatewaySubnet">gateway Subnet for the account. It will
        /// collect the subnet address and always treat it as /28</param>
        /// <param
        /// name="id">/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/dedicatedCloudServices/{dedicatedCloudServiceName}</param>
        /// <param name="name">{dedicatedCloudServiceName}</param>
        /// <param name="isAccountOnboarded">indicates whether account
        /// onboarded or not in a given region. Possible values include:
        /// 'notOnBoarded', 'onBoarded', 'onBoardingFailed',
        /// 'onBoarding'</param>
        /// <param name="nodes">total nodes purchased</param>
        /// <param name="serviceURL">link to a service management web
        /// portal</param>
        /// <param name="tags">The list of tags</param>
        /// <param
        /// name="type">{resourceProviderNamespace}/{resourceType}</param>
        public DedicatedCloudService(string location, string gatewaySubnet, string id = default(string), string name = default(string), OnboardingStatus? isAccountOnboarded = default(OnboardingStatus?), int? nodes = default(int?), string serviceURL = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string type = default(string))
        {
            Id = id;
            Location = location;
            Name = name;
            GatewaySubnet = gatewaySubnet;
            IsAccountOnboarded = isAccountOnboarded;
            Nodes = nodes;
            ServiceURL = serviceURL;
            Tags = tags;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/dedicatedCloudServices/{dedicatedCloudServiceName}
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets azure region
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets {dedicatedCloudServiceName}
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets gateway Subnet for the account. It will collect the
        /// subnet address and always treat it as /28
        /// </summary>
        [JsonProperty(PropertyName = "properties.gatewaySubnet")]
        public string GatewaySubnet { get; set; }

        /// <summary>
        /// Gets indicates whether account onboarded or not in a given region.
        /// Possible values include: 'notOnBoarded', 'onBoarded',
        /// 'onBoardingFailed', 'onBoarding'
        /// </summary>
        [JsonProperty(PropertyName = "properties.isAccountOnboarded")]
        public OnboardingStatus? IsAccountOnboarded { get; private set; }

        /// <summary>
        /// Gets total nodes purchased
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodes")]
        public int? Nodes { get; private set; }

        /// <summary>
        /// Gets link to a service management web portal
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceURL")]
        public string ServiceURL { get; private set; }

        /// <summary>
        /// Gets or sets the list of tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets {resourceProviderNamespace}/{resourceType}
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (GatewaySubnet == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GatewaySubnet");
            }
            if (Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Name, "^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Name", "^[a-zA-Z0-9]([-_.a-zA-Z0-9]*[a-zA-Z0-9])?$");
                }
            }
        }
    }
}
