// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Private cloud model
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PrivateCloud
    {
        /// <summary>
        /// Initializes a new instance of the PrivateCloud class.
        /// </summary>
        public PrivateCloud()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrivateCloud class.
        /// </summary>
        /// <param name="id">Azure Id, e.g.
        /// "/subscriptions/4da99247-a172-4ed6-8ae9-ebed2d12f839/providers/Microsoft.VMwareCloudSimple/privateClouds/cloud123"</param>
        /// <param name="location">Location where private cloud created, e.g
        /// "westus"</param>
        /// <param name="name">Private cloud name</param>
        /// <param name="availabilityZoneId">Availability Zone id, e.g.
        /// "az1"</param>
        /// <param name="availabilityZoneName">Availability Zone name, e.g.
        /// "Availability Zone 1"</param>
        /// <param name="clustersNumber">Number of clusters</param>
        /// <param name="createdBy">User's emails who created cloud</param>
        /// <param name="createdOn">When private cloud was created</param>
        /// <param name="dnsServers">Array of DNS servers</param>
        /// <param name="expires">Expiration date of PC</param>
        /// <param name="nsxType">Nsx Type, e.g. "Advanced"</param>
        /// <param name="placementGroupId">Placement Group id, e.g.
        /// "n1"</param>
        /// <param name="placementGroupName">Placement Group name</param>
        /// <param name="privateCloudId">Id of a private cloud</param>
        /// <param name="resourcePools">The list of Resource Pools</param>
        /// <param name="state">Private Cloud state, e.g. "operational"</param>
        /// <param name="totalCpuCores">Number of cores</param>
        /// <param name="totalNodes">Number of nodes</param>
        /// <param name="totalRam">Memory size</param>
        /// <param name="totalStorage">Disk space in TB</param>
        /// <param name="privateCloudPropertiesType">Virtualization type e.g.
        /// "vSphere"</param>
        /// <param name="vSphereVersion">e.g. "6.5u2"</param>
        /// <param name="vcenterFqdn">FQDN for vcenter access</param>
        /// <param name="vcenterRefid">Vcenter ip address</param>
        /// <param name="virtualMachineTemplates">The list of Virtual Machine
        /// Templates</param>
        /// <param name="virtualNetworks">The list of Virtual Networks</param>
        /// <param name="vrOpsEnabled">Is Vrops enabled/disabled</param>
        /// <param name="type">Azure Resource type. Possible values include:
        /// 'Microsoft.VMwareCloudSimple/privateClouds'</param>
        public PrivateCloud(string id = default(string), string location = default(string), string name = default(string), string availabilityZoneId = default(string), string availabilityZoneName = default(string), int? clustersNumber = default(int?), string createdBy = default(string), System.DateTime? createdOn = default(System.DateTime?), IList<string> dnsServers = default(IList<string>), string expires = default(string), string nsxType = default(string), string placementGroupId = default(string), string placementGroupName = default(string), System.Guid? privateCloudId = default(System.Guid?), IList<ResourcePool> resourcePools = default(IList<ResourcePool>), string state = default(string), int? totalCpuCores = default(int?), int? totalNodes = default(int?), int? totalRam = default(int?), double? totalStorage = default(double?), string privateCloudPropertiesType = default(string), string vSphereVersion = default(string), string vcenterFqdn = default(string), string vcenterRefid = default(string), IList<VirtualMachineTemplate> virtualMachineTemplates = default(IList<VirtualMachineTemplate>), IList<VirtualNetwork> virtualNetworks = default(IList<VirtualNetwork>), bool? vrOpsEnabled = default(bool?), PrivateCloudResourceType? type = default(PrivateCloudResourceType?))
        {
            Id = id;
            Location = location;
            Name = name;
            AvailabilityZoneId = availabilityZoneId;
            AvailabilityZoneName = availabilityZoneName;
            ClustersNumber = clustersNumber;
            CreatedBy = createdBy;
            CreatedOn = createdOn;
            DnsServers = dnsServers;
            Expires = expires;
            NsxType = nsxType;
            PlacementGroupId = placementGroupId;
            PlacementGroupName = placementGroupName;
            PrivateCloudId = privateCloudId;
            ResourcePools = resourcePools;
            State = state;
            TotalCpuCores = totalCpuCores;
            TotalNodes = totalNodes;
            TotalRam = totalRam;
            TotalStorage = totalStorage;
            PrivateCloudPropertiesType = privateCloudPropertiesType;
            VSphereVersion = vSphereVersion;
            VcenterFqdn = vcenterFqdn;
            VcenterRefid = vcenterRefid;
            VirtualMachineTemplates = virtualMachineTemplates;
            VirtualNetworks = virtualNetworks;
            VrOpsEnabled = vrOpsEnabled;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets azure Id, e.g.
        /// "/subscriptions/4da99247-a172-4ed6-8ae9-ebed2d12f839/providers/Microsoft.VMwareCloudSimple/privateClouds/cloud123"
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets location where private cloud created, e.g "westus"
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets private cloud name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets availability Zone id, e.g. "az1"
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityZoneId")]
        public string AvailabilityZoneId { get; set; }

        /// <summary>
        /// Gets or sets availability Zone name, e.g. "Availability Zone 1"
        /// </summary>
        [JsonProperty(PropertyName = "properties.availabilityZoneName")]
        public string AvailabilityZoneName { get; set; }

        /// <summary>
        /// Gets or sets number of clusters
        /// </summary>
        [JsonProperty(PropertyName = "properties.clustersNumber")]
        public int? ClustersNumber { get; set; }

        /// <summary>
        /// Gets or sets user's emails who created cloud
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets when private cloud was created
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdOn")]
        public System.DateTime? CreatedOn { get; set; }

        /// <summary>
        /// Gets or sets array of DNS servers
        /// </summary>
        [JsonProperty(PropertyName = "properties.dnsServers")]
        public IList<string> DnsServers { get; set; }

        /// <summary>
        /// Gets or sets expiration date of PC
        /// </summary>
        [JsonProperty(PropertyName = "properties.expires")]
        public string Expires { get; set; }

        /// <summary>
        /// Gets or sets nsx Type, e.g. "Advanced"
        /// </summary>
        [JsonProperty(PropertyName = "properties.nsxType")]
        public string NsxType { get; set; }

        /// <summary>
        /// Gets or sets placement Group id, e.g. "n1"
        /// </summary>
        [JsonProperty(PropertyName = "properties.placementGroupId")]
        public string PlacementGroupId { get; set; }

        /// <summary>
        /// Gets or sets placement Group name
        /// </summary>
        [JsonProperty(PropertyName = "properties.placementGroupName")]
        public string PlacementGroupName { get; set; }

        /// <summary>
        /// Gets or sets id of a private cloud
        /// </summary>
        [JsonProperty(PropertyName = "properties.privateCloudId")]
        public System.Guid? PrivateCloudId { get; set; }

        /// <summary>
        /// Gets or sets the list of Resource Pools
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourcePools")]
        public IList<ResourcePool> ResourcePools { get; set; }

        /// <summary>
        /// Gets or sets private Cloud state, e.g. "operational"
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets number of cores
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalCpuCores")]
        public int? TotalCpuCores { get; set; }

        /// <summary>
        /// Gets or sets number of nodes
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalNodes")]
        public int? TotalNodes { get; set; }

        /// <summary>
        /// Gets or sets memory size
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalRam")]
        public int? TotalRam { get; set; }

        /// <summary>
        /// Gets or sets disk space in TB
        /// </summary>
        [JsonProperty(PropertyName = "properties.totalStorage")]
        public double? TotalStorage { get; set; }

        /// <summary>
        /// Gets or sets virtualization type e.g. "vSphere"
        /// </summary>
        [JsonProperty(PropertyName = "properties.type")]
        public string PrivateCloudPropertiesType { get; set; }

        /// <summary>
        /// Gets or sets e.g. "6.5u2"
        /// </summary>
        [JsonProperty(PropertyName = "properties.vSphereVersion")]
        public string VSphereVersion { get; set; }

        /// <summary>
        /// Gets or sets FQDN for vcenter access
        /// </summary>
        [JsonProperty(PropertyName = "properties.vcenterFqdn")]
        public string VcenterFqdn { get; set; }

        /// <summary>
        /// Gets or sets vcenter ip address
        /// </summary>
        [JsonProperty(PropertyName = "properties.vcenterRefid")]
        public string VcenterRefid { get; set; }

        /// <summary>
        /// Gets or sets the list of Virtual Machine Templates
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualMachineTemplates")]
        public IList<VirtualMachineTemplate> VirtualMachineTemplates { get; set; }

        /// <summary>
        /// Gets or sets the list of Virtual Networks
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualNetworks")]
        public IList<VirtualNetwork> VirtualNetworks { get; set; }

        /// <summary>
        /// Gets or sets is Vrops enabled/disabled
        /// </summary>
        [JsonProperty(PropertyName = "properties.vrOpsEnabled")]
        public bool? VrOpsEnabled { get; set; }

        /// <summary>
        /// Gets or sets azure Resource type. Possible values include:
        /// 'Microsoft.VMwareCloudSimple/privateClouds'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public PrivateCloudResourceType? Type { get; set; }

    }
}
