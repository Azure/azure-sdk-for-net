// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Virtual NIC model
    /// </summary>
    public partial class VirtualNic
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNic class.
        /// </summary>
        public VirtualNic()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualNic class.
        /// </summary>
        /// <param name="network">Virtual Network</param>
        /// <param name="nicType">NIC type. Possible values include: 'E1000',
        /// 'E1000E', 'PCNET32', 'VMXNET', 'VMXNET2', 'VMXNET3'</param>
        /// <param name="customization">guest OS customization for nic</param>
        /// <param name="ipAddresses">NIC ip address</param>
        /// <param name="macAddress">NIC MAC address</param>
        /// <param name="powerOnBoot">Is NIC powered on/off on boot</param>
        /// <param name="virtualNicId">NIC id</param>
        /// <param name="virtualNicName">NIC name</param>
        public VirtualNic(VirtualNetwork network, NICType nicType, GuestOSNICCustomization customization = default(GuestOSNICCustomization), IList<string> ipAddresses = default(IList<string>), string macAddress = default(string), bool? powerOnBoot = default(bool?), string virtualNicId = default(string), string virtualNicName = default(string))
        {
            Customization = customization;
            IpAddresses = ipAddresses;
            MacAddress = macAddress;
            Network = network;
            NicType = nicType;
            PowerOnBoot = powerOnBoot;
            VirtualNicId = virtualNicId;
            VirtualNicName = virtualNicName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets guest OS customization for nic
        /// </summary>
        [JsonProperty(PropertyName = "customization")]
        public GuestOSNICCustomization Customization { get; set; }

        /// <summary>
        /// Gets or sets NIC ip address
        /// </summary>
        [JsonProperty(PropertyName = "ipAddresses")]
        public IList<string> IpAddresses { get; set; }

        /// <summary>
        /// Gets or sets NIC MAC address
        /// </summary>
        [JsonProperty(PropertyName = "macAddress")]
        public string MacAddress { get; set; }

        /// <summary>
        /// Gets or sets virtual Network
        /// </summary>
        [JsonProperty(PropertyName = "network")]
        public VirtualNetwork Network { get; set; }

        /// <summary>
        /// Gets or sets NIC type. Possible values include: 'E1000', 'E1000E',
        /// 'PCNET32', 'VMXNET', 'VMXNET2', 'VMXNET3'
        /// </summary>
        [JsonProperty(PropertyName = "nicType")]
        public NICType NicType { get; set; }

        /// <summary>
        /// Gets or sets is NIC powered on/off on boot
        /// </summary>
        [JsonProperty(PropertyName = "powerOnBoot")]
        public bool? PowerOnBoot { get; set; }

        /// <summary>
        /// Gets or sets NIC id
        /// </summary>
        [JsonProperty(PropertyName = "virtualNicId")]
        public string VirtualNicId { get; set; }

        /// <summary>
        /// Gets NIC name
        /// </summary>
        [JsonProperty(PropertyName = "virtualNicName")]
        public string VirtualNicName { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Network == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Network");
            }
            if (Network != null)
            {
                Network.Validate();
            }
        }
    }
}
