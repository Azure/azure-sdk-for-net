// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.VMwareCloudSimple
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualMachinesOperations.
    /// </summary>
    public static partial class VirtualMachinesOperationsExtensions
    {
            /// <summary>
            /// Implements list virtual machine within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list virtual machine within subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            public static IPage<VirtualMachine> ListBySubscription(this IVirtualMachinesOperations operations, string filter = default(string), int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListBySubscriptionAsync(filter, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list virtual machine within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list virtual machine within subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListBySubscriptionAsync(this IVirtualMachinesOperations operations, string filter = default(string), int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(filter, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements list virtual machine within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of virtual machine within resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            public static IPage<VirtualMachine> ListByResourceGroup(this IVirtualMachinesOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), string skipToken = default(string))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, filter, top, skipToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list virtual machine within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of virtual machine within resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list operation
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return
            /// </param>
            /// <param name='skipToken'>
            /// to be used by nextLink implementation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListByResourceGroupAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string filter = default(string), int? top = default(int?), string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, top, skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements virtual machine GET method
            /// </summary>
            /// <remarks>
            /// Get virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            public static VirtualMachine Get(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                return operations.GetAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine GET method
            /// </summary>
            /// <remarks>
            /// Get virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> GetAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements virtual machine PUT method
            /// </summary>
            /// <remarks>
            /// Create Or Update Virtual Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='virtualMachineRequest'>
            /// Create or Update Virtual Machine request
            /// </param>
            public static VirtualMachine CreateOrUpdate(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachine virtualMachineRequest)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, virtualMachineName, virtualMachineRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine PUT method
            /// </summary>
            /// <remarks>
            /// Create Or Update Virtual Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='virtualMachineRequest'>
            /// Create or Update Virtual Machine request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> CreateOrUpdateAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachine virtualMachineRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, virtualMachineRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements virtual machine DELETE method
            /// </summary>
            /// <remarks>
            /// Delete virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            public static VirtualMachinesDeleteHeaders Delete(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                return operations.DeleteAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine DELETE method
            /// </summary>
            /// <remarks>
            /// Delete virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachinesDeleteHeaders> DeleteAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements virtual machine PATCH method
            /// </summary>
            /// <remarks>
            /// Patch virtual machine properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='tags'>
            /// The tags key:value pairs
            /// </param>
            public static VirtualMachine Update(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, virtualMachineName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine PATCH method
            /// </summary>
            /// <remarks>
            /// Patch virtual machine properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='tags'>
            /// The tags key:value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> UpdateAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements a start method for a virtual machine
            /// </summary>
            /// <remarks>
            /// Power on virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            public static VirtualMachinesStartHeaders Start(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                return operations.StartAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements a start method for a virtual machine
            /// </summary>
            /// <remarks>
            /// Power on virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachinesStartHeaders> StartAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements shutdown, poweroff, and suspend method for a virtual machine
            /// </summary>
            /// <remarks>
            /// Power off virtual machine, options: shutdown, poweroff, and suspend
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='mode'>
            /// query stop mode parameter (reboot, shutdown, etc...). Possible values
            /// include: 'reboot', 'suspend', 'shutdown', 'poweroff'
            /// </param>
            /// <param name='mode1'>
            /// mode indicates a type of stop operation - reboot, suspend, shutdown or
            /// power-off. Possible values include: 'reboot', 'suspend', 'shutdown',
            /// 'poweroff'
            /// </param>
            public static VirtualMachinesStopHeaders Stop(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, StopMode? mode = default(StopMode?), StopMode? mode1 = default(StopMode?))
            {
                return operations.StopAsync(resourceGroupName, virtualMachineName, mode, mode1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements shutdown, poweroff, and suspend method for a virtual machine
            /// </summary>
            /// <remarks>
            /// Power off virtual machine, options: shutdown, poweroff, and suspend
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='mode'>
            /// query stop mode parameter (reboot, shutdown, etc...). Possible values
            /// include: 'reboot', 'suspend', 'shutdown', 'poweroff'
            /// </param>
            /// <param name='mode1'>
            /// mode indicates a type of stop operation - reboot, suspend, shutdown or
            /// power-off. Possible values include: 'reboot', 'suspend', 'shutdown',
            /// 'poweroff'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachinesStopHeaders> StopAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, StopMode? mode = default(StopMode?), StopMode? mode1 = default(StopMode?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWithHttpMessagesAsync(resourceGroupName, virtualMachineName, mode, mode1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements virtual machine PUT method
            /// </summary>
            /// <remarks>
            /// Create Or Update Virtual Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='virtualMachineRequest'>
            /// Create or Update Virtual Machine request
            /// </param>
            public static VirtualMachine BeginCreateOrUpdate(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachine virtualMachineRequest)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, virtualMachineName, virtualMachineRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine PUT method
            /// </summary>
            /// <remarks>
            /// Create Or Update Virtual Machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='virtualMachineRequest'>
            /// Create or Update Virtual Machine request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> BeginCreateOrUpdateAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, VirtualMachine virtualMachineRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, virtualMachineRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements virtual machine DELETE method
            /// </summary>
            /// <remarks>
            /// Delete virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            public static VirtualMachinesDeleteHeaders BeginDelete(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine DELETE method
            /// </summary>
            /// <remarks>
            /// Delete virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachinesDeleteHeaders> BeginDeleteAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements virtual machine PATCH method
            /// </summary>
            /// <remarks>
            /// Patch virtual machine properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='tags'>
            /// The tags key:value pairs
            /// </param>
            public static VirtualMachine BeginUpdate(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.BeginUpdateAsync(resourceGroupName, virtualMachineName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements virtual machine PATCH method
            /// </summary>
            /// <remarks>
            /// Patch virtual machine properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='tags'>
            /// The tags key:value pairs
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachine> BeginUpdateAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, virtualMachineName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements a start method for a virtual machine
            /// </summary>
            /// <remarks>
            /// Power on virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            public static VirtualMachinesStartHeaders BeginStart(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName)
            {
                return operations.BeginStartAsync(resourceGroupName, virtualMachineName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements a start method for a virtual machine
            /// </summary>
            /// <remarks>
            /// Power on virtual machine
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachinesStartHeaders> BeginStartAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, virtualMachineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements shutdown, poweroff, and suspend method for a virtual machine
            /// </summary>
            /// <remarks>
            /// Power off virtual machine, options: shutdown, poweroff, and suspend
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='mode'>
            /// query stop mode parameter (reboot, shutdown, etc...). Possible values
            /// include: 'reboot', 'suspend', 'shutdown', 'poweroff'
            /// </param>
            /// <param name='mode1'>
            /// mode indicates a type of stop operation - reboot, suspend, shutdown or
            /// power-off. Possible values include: 'reboot', 'suspend', 'shutdown',
            /// 'poweroff'
            /// </param>
            public static VirtualMachinesStopHeaders BeginStop(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, StopMode? mode = default(StopMode?), StopMode? mode1 = default(StopMode?))
            {
                return operations.BeginStopAsync(resourceGroupName, virtualMachineName, mode, mode1).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements shutdown, poweroff, and suspend method for a virtual machine
            /// </summary>
            /// <remarks>
            /// Power off virtual machine, options: shutdown, poweroff, and suspend
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='virtualMachineName'>
            /// virtual machine name
            /// </param>
            /// <param name='mode'>
            /// query stop mode parameter (reboot, shutdown, etc...). Possible values
            /// include: 'reboot', 'suspend', 'shutdown', 'poweroff'
            /// </param>
            /// <param name='mode1'>
            /// mode indicates a type of stop operation - reboot, suspend, shutdown or
            /// power-off. Possible values include: 'reboot', 'suspend', 'shutdown',
            /// 'poweroff'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualMachinesStopHeaders> BeginStopAsync(this IVirtualMachinesOperations operations, string resourceGroupName, string virtualMachineName, StopMode? mode = default(StopMode?), StopMode? mode1 = default(StopMode?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, virtualMachineName, mode, mode1, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Implements list virtual machine within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list virtual machine within subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualMachine> ListBySubscriptionNext(this IVirtualMachinesOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list virtual machine within subscription method
            /// </summary>
            /// <remarks>
            /// Returns list virtual machine within subscription
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListBySubscriptionNextAsync(this IVirtualMachinesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Implements list virtual machine within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of virtual machine within resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualMachine> ListByResourceGroupNext(this IVirtualMachinesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Implements list virtual machine within RG method
            /// </summary>
            /// <remarks>
            /// Returns list of virtual machine within resource group
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualMachine>> ListByResourceGroupNextAsync(this IVirtualMachinesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
