// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlServersOperations.
    /// </summary>
    public static partial class SqlServersOperationsExtensions
    {
            /// <summary>
            /// Gets a SQL Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='sqlServerName'>
            /// Name of the SQL Server.
            /// </param>
            /// <param name='expand'>
            /// The child resources to include in the response.
            /// </param>
            public static SqlServer Get(this ISqlServersOperations operations, string resourceGroupName, string sqlServerRegistrationName, string sqlServerName, string expand = default(string))
            {
                return operations.GetAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a SQL Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='sqlServerName'>
            /// Name of the SQL Server.
            /// </param>
            /// <param name='expand'>
            /// The child resources to include in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServer> GetAsync(this ISqlServersOperations operations, string resourceGroupName, string sqlServerRegistrationName, string sqlServerName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a SQL Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='sqlServerName'>
            /// Name of the SQL Server.
            /// </param>
            /// <param name='parameters'>
            /// The SQL Server to be created or updated.
            /// </param>
            public static SqlServer CreateOrUpdate(this ISqlServersOperations operations, string resourceGroupName, string sqlServerRegistrationName, string sqlServerName, SqlServer parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a SQL Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='sqlServerName'>
            /// Name of the SQL Server.
            /// </param>
            /// <param name='parameters'>
            /// The SQL Server to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServer> CreateOrUpdateAsync(this ISqlServersOperations operations, string resourceGroupName, string sqlServerRegistrationName, string sqlServerName, SqlServer parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SQL Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='sqlServerName'>
            /// Name of the SQL Server.
            /// </param>
            public static void Delete(this ISqlServersOperations operations, string resourceGroupName, string sqlServerRegistrationName, string sqlServerName)
            {
                operations.DeleteAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SQL Server.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='sqlServerName'>
            /// Name of the SQL Server.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISqlServersOperations operations, string resourceGroupName, string sqlServerRegistrationName, string sqlServerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sqlServerRegistrationName, sqlServerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all SQL Servers in a SQL Server Registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='expand'>
            /// The child resources to include in the response.
            /// </param>
            public static IPage<SqlServer> ListByResourceGroup(this ISqlServersOperations operations, string resourceGroupName, string sqlServerRegistrationName, string expand = default(string))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, sqlServerRegistrationName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all SQL Servers in a SQL Server Registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='expand'>
            /// The child resources to include in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServer>> ListByResourceGroupAsync(this ISqlServersOperations operations, string resourceGroupName, string sqlServerRegistrationName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, sqlServerRegistrationName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all SQL Servers in a SQL Server Registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServer> ListByResourceGroupNext(this ISqlServersOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all SQL Servers in a SQL Server Registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServer>> ListByResourceGroupNextAsync(this ISqlServersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
