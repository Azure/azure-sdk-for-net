// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for HybridDataManagersOperations.
    /// </summary>
    public static partial class HybridDataManagersOperationsExtensions
    {
            /// <summary>
            /// List hybridDataManager resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<HybridDataManager> List(this IHybridDataManagersOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List hybridDataManager resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HybridDataManager>> ListAsync(this IHybridDataManagersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List hybridDataManager resources in the resource group
            /// </summary>
            /// <remarks>
            /// Get a hybridDataManager list by Resource group name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            public static IPage<HybridDataManager> ListByResourceGroup(this IHybridDataManagersOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List hybridDataManager resources in the resource group
            /// </summary>
            /// <remarks>
            /// Get a hybridDataManager list by Resource group name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HybridDataManager>> ListByResourceGroupAsync(this IHybridDataManagersOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or replaces a hybridDataManager resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='hybridDataManagerName'>
            /// Name of HybridDataManagerName
            /// </param>
            public static HybridDataManager Create(this IHybridDataManagersOperations operations, string resourceGroupName, string hybridDataManagerName)
            {
                return operations.CreateAsync(resourceGroupName, hybridDataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or replaces a hybridDataManager resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='hybridDataManagerName'>
            /// Name of HybridDataManagerName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridDataManager> CreateAsync(this IHybridDataManagersOperations operations, string resourceGroupName, string hybridDataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, hybridDataManagerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hybridDataManager resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='hybridDataManagerName'>
            /// Name of HybridDataManager
            /// </param>
            public static void Delete(this IHybridDataManagersOperations operations, string resourceGroupName, string hybridDataManagerName)
            {
                operations.DeleteAsync(resourceGroupName, hybridDataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a hybridDataManager resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='hybridDataManagerName'>
            /// Name of HybridDataManager
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IHybridDataManagersOperations operations, string resourceGroupName, string hybridDataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, hybridDataManagerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves a hybridDataManager resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='hybridDataManagerName'>
            /// Name of HybridDataManager
            /// </param>
            public static HybridDataManager Get(this IHybridDataManagersOperations operations, string resourceGroupName, string hybridDataManagerName)
            {
                return operations.GetAsync(resourceGroupName, hybridDataManagerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a hybridDataManager resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='hybridDataManagerName'>
            /// Name of HybridDataManager
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridDataManager> GetAsync(this IHybridDataManagersOperations operations, string resourceGroupName, string hybridDataManagerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, hybridDataManagerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a hybridDataManager resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='hybridDataManagerName'>
            /// Name of HybridDataManager
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static HybridDataManager Update(this IHybridDataManagersOperations operations, string resourceGroupName, string hybridDataManagerName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, hybridDataManagerName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a hybridDataManager resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group
            /// </param>
            /// <param name='hybridDataManagerName'>
            /// Name of HybridDataManager
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridDataManager> UpdateAsync(this IHybridDataManagersOperations operations, string resourceGroupName, string hybridDataManagerName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, hybridDataManagerName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List hybridDataManager resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HybridDataManager> ListNext(this IHybridDataManagersOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List hybridDataManager resources in the subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HybridDataManager>> ListNextAsync(this IHybridDataManagersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List hybridDataManager resources in the resource group
            /// </summary>
            /// <remarks>
            /// Get a hybridDataManager list by Resource group name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HybridDataManager> ListByResourceGroupNext(this IHybridDataManagersOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List hybridDataManager resources in the resource group
            /// </summary>
            /// <remarks>
            /// Get a hybridDataManager list by Resource group name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HybridDataManager>> ListByResourceGroupNextAsync(this IHybridDataManagersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
