// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureData.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Data controller resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DataControllerResource : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the DataControllerResource class.
        /// </summary>
        public DataControllerResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataControllerResource class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="requestType">Possible values include: 'Unknown',
        /// 'Handshake', 'UsageUpload'</param>
        public DataControllerResource(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), DataController dataController = default(DataController), string requestType = default(string), UsageUploadRequest uploadRequest = default(UsageUploadRequest), UsageUploadResponse uploadResponse = default(UsageUploadResponse), object handshakeRequest = default(object), HandshakeResponse handshakeResponse = default(HandshakeResponse))
            : base(location, id, name, type, tags)
        {
            DataController = dataController;
            RequestType = requestType;
            UploadRequest = uploadRequest;
            UploadResponse = uploadResponse;
            HandshakeRequest = handshakeRequest;
            HandshakeResponse = handshakeResponse;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.dataController")]
        public DataController DataController { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Unknown', 'Handshake',
        /// 'UsageUpload'
        /// </summary>
        [JsonProperty(PropertyName = "properties.requestType")]
        public string RequestType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.uploadRequest")]
        public UsageUploadRequest UploadRequest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.uploadResponse")]
        public UsageUploadResponse UploadResponse { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.handshakeRequest")]
        public object HandshakeRequest { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.handshakeResponse")]
        public HandshakeResponse HandshakeResponse { get; set; }

    }
}
