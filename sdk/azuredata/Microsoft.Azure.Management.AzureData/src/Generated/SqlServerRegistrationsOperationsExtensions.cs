// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureData
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlServerRegistrationsOperations.
    /// </summary>
    public static partial class SqlServerRegistrationsOperationsExtensions
    {
            /// <summary>
            /// Gets a SQL Server registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            public static SqlServerRegistration Get(this ISqlServerRegistrationsOperations operations, string resourceGroupName, string sqlServerRegistrationName)
            {
                return operations.GetAsync(resourceGroupName, sqlServerRegistrationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a SQL Server registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerRegistration> GetAsync(this ISqlServerRegistrationsOperations operations, string resourceGroupName, string sqlServerRegistrationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sqlServerRegistrationName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a SQL Server registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='parameters'>
            /// The SQL Server registration to be created or updated.
            /// </param>
            public static SqlServerRegistration CreateOrUpdate(this ISqlServerRegistrationsOperations operations, string resourceGroupName, string sqlServerRegistrationName, SqlServerRegistration parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, sqlServerRegistrationName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a SQL Server registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='parameters'>
            /// The SQL Server registration to be created or updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerRegistration> CreateOrUpdateAsync(this ISqlServerRegistrationsOperations operations, string resourceGroupName, string sqlServerRegistrationName, SqlServerRegistration parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, sqlServerRegistrationName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SQL Server registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            public static void Delete(this ISqlServerRegistrationsOperations operations, string resourceGroupName, string sqlServerRegistrationName)
            {
                operations.DeleteAsync(resourceGroupName, sqlServerRegistrationName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SQL Server registration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISqlServerRegistrationsOperations operations, string resourceGroupName, string sqlServerRegistrationName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sqlServerRegistrationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates SQL Server Registration tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static SqlServerRegistration Update(this ISqlServerRegistrationsOperations operations, string resourceGroupName, string sqlServerRegistrationName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, sqlServerRegistrationName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates SQL Server Registration tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='sqlServerRegistrationName'>
            /// Name of the SQL Server registration.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlServerRegistration> UpdateAsync(this ISqlServerRegistrationsOperations operations, string resourceGroupName, string sqlServerRegistrationName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, sqlServerRegistrationName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all SQL Server registrations in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            public static IPage<SqlServerRegistration> ListByResourceGroup(this ISqlServerRegistrationsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all SQL Server registrations in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group that contains the resource. You can obtain this
            /// value from the Azure Resource Manager API or the portal.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerRegistration>> ListByResourceGroupAsync(this ISqlServerRegistrationsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all SQL Server registrations in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SqlServerRegistration> List(this ISqlServerRegistrationsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all SQL Server registrations in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerRegistration>> ListAsync(this ISqlServerRegistrationsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all SQL Server registrations in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServerRegistration> ListByResourceGroupNext(this ISqlServerRegistrationsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all SQL Server registrations in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerRegistration>> ListByResourceGroupNextAsync(this ISqlServerRegistrationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all SQL Server registrations in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlServerRegistration> ListNext(this ISqlServerRegistrationsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all SQL Server registrations in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlServerRegistration>> ListNextAsync(this ISqlServerRegistrationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
