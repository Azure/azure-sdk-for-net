// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class OAuth2PermissionGrant
    {
        /// <summary>
        /// Initializes a new instance of the OAuth2PermissionGrant class.
        /// </summary>
        public OAuth2PermissionGrant()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OAuth2PermissionGrant class.
        /// </summary>
        /// <param
        /// name="odatatype">Microsoft.DirectoryServices.OAuth2PermissionGrant</param>
        /// <param name="clientId">The id of the resource's service principal
        /// granted consent to impersonate the user when accessing the resource
        /// (represented by the resourceId property).</param>
        /// <param name="objectId">The id of the permission grant</param>
        /// <param name="consentType">Indicates if consent was provided by the
        /// administrator (on behalf of the organization) or by an individual.
        /// Possible values include: 'AllPrincipals', 'Principal'</param>
        /// <param name="principalId">When consent type is Principal, this
        /// property specifies the id of the user that granted consent and
        /// applies only for that user.</param>
        /// <param name="resourceId">Object Id of the resource you want to
        /// grant</param>
        /// <param name="scope">Specifies the value of the scope claim that the
        /// resource application should expect in the OAuth 2.0 access token.
        /// For example, User.Read</param>
        /// <param name="startTime">Start time for TTL</param>
        /// <param name="expiryTime">Expiry time for TTL</param>
        public OAuth2PermissionGrant(string odatatype = default(string), string clientId = default(string), string objectId = default(string), string consentType = default(string), string principalId = default(string), string resourceId = default(string), string scope = default(string), string startTime = default(string), string expiryTime = default(string))
        {
            Odatatype = odatatype;
            ClientId = clientId;
            ObjectId = objectId;
            ConsentType = consentType;
            PrincipalId = principalId;
            ResourceId = resourceId;
            Scope = scope;
            StartTime = startTime;
            ExpiryTime = expiryTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets microsoft.DirectoryServices.OAuth2PermissionGrant
        /// </summary>
        [JsonProperty(PropertyName = "odata.type")]
        public string Odatatype { get; set; }

        /// <summary>
        /// Gets or sets the id of the resource's service principal granted
        /// consent to impersonate the user when accessing the resource
        /// (represented by the resourceId property).
        /// </summary>
        [JsonProperty(PropertyName = "clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or sets the id of the permission grant
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets indicates if consent was provided by the administrator
        /// (on behalf of the organization) or by an individual. Possible
        /// values include: 'AllPrincipals', 'Principal'
        /// </summary>
        [JsonProperty(PropertyName = "consentType")]
        public string ConsentType { get; set; }

        /// <summary>
        /// Gets or sets when consent type is Principal, this property
        /// specifies the id of the user that granted consent and applies only
        /// for that user.
        /// </summary>
        [JsonProperty(PropertyName = "principalId")]
        public string PrincipalId { get; set; }

        /// <summary>
        /// Gets or sets object Id of the resource you want to grant
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets specifies the value of the scope claim that the
        /// resource application should expect in the OAuth 2.0 access token.
        /// For example, User.Read
        /// </summary>
        [JsonProperty(PropertyName = "scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets start time for TTL
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or sets expiry time for TTL
        /// </summary>
        [JsonProperty(PropertyName = "expiryTime")]
        public string ExpiryTime { get; set; }

    }
}
