// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Graph.RBAC.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents an OAuth 2.0 delegated permission scope. The specified OAuth
    /// 2.0 delegated permission scopes may be requested by client applications
    /// (through the requiredResourceAccess collection on the Application
    /// object) when calling a resource application. The oauth2Permissions
    /// property of the ServicePrincipal entity and of the Application entity
    /// is a collection of OAuth2Permission.
    /// </summary>
    public partial class OAuth2Permission
    {
        /// <summary>
        /// Initializes a new instance of the OAuth2Permission class.
        /// </summary>
        public OAuth2Permission()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OAuth2Permission class.
        /// </summary>
        /// <param name="adminConsentDescription">Permission help text that
        /// appears in the admin consent and app assignment
        /// experiences.</param>
        /// <param name="adminConsentDisplayName">Display name for the
        /// permission that appears in the admin consent and app assignment
        /// experiences.</param>
        /// <param name="id">Unique scope permission identifier inside the
        /// oauth2Permissions collection.</param>
        /// <param name="isEnabled">When creating or updating a permission,
        /// this property must be set to true (which is the default). To delete
        /// a permission, this property must first be set to false. At that
        /// point, in a subsequent call, the permission may be removed.
        /// </param>
        /// <param name="type">Specifies whether this scope permission can be
        /// consented to by an end user, or whether it is a tenant-wide
        /// permission that must be consented to by a Company Administrator.
        /// Possible values are "User" or "Admin".</param>
        /// <param name="userConsentDescription">Permission help text that
        /// appears in the end user consent experience.</param>
        /// <param name="userConsentDisplayName">Display name for the
        /// permission that appears in the end user consent experience.</param>
        /// <param name="value">The value of the scope claim that the resource
        /// application should expect in the OAuth 2.0 access token.</param>
        public OAuth2Permission(string adminConsentDescription = default(string), string adminConsentDisplayName = default(string), string id = default(string), bool? isEnabled = default(bool?), string type = default(string), string userConsentDescription = default(string), string userConsentDisplayName = default(string), string value = default(string))
        {
            AdminConsentDescription = adminConsentDescription;
            AdminConsentDisplayName = adminConsentDisplayName;
            Id = id;
            IsEnabled = isEnabled;
            Type = type;
            UserConsentDescription = userConsentDescription;
            UserConsentDisplayName = userConsentDisplayName;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets permission help text that appears in the admin consent
        /// and app assignment experiences.
        /// </summary>
        [JsonProperty(PropertyName = "adminConsentDescription")]
        public string AdminConsentDescription { get; set; }

        /// <summary>
        /// Gets or sets display name for the permission that appears in the
        /// admin consent and app assignment experiences.
        /// </summary>
        [JsonProperty(PropertyName = "adminConsentDisplayName")]
        public string AdminConsentDisplayName { get; set; }

        /// <summary>
        /// Gets or sets unique scope permission identifier inside the
        /// oauth2Permissions collection.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets when creating or updating a permission, this property
        /// must be set to true (which is the default). To delete a permission,
        /// this property must first be set to false. At that point, in a
        /// subsequent call, the permission may be removed.
        /// </summary>
        [JsonProperty(PropertyName = "isEnabled")]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Gets or sets specifies whether this scope permission can be
        /// consented to by an end user, or whether it is a tenant-wide
        /// permission that must be consented to by a Company Administrator.
        /// Possible values are "User" or "Admin".
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets permission help text that appears in the end user
        /// consent experience.
        /// </summary>
        [JsonProperty(PropertyName = "userConsentDescription")]
        public string UserConsentDescription { get; set; }

        /// <summary>
        /// Gets or sets display name for the permission that appears in the
        /// end user consent experience.
        /// </summary>
        [JsonProperty(PropertyName = "userConsentDisplayName")]
        public string UserConsentDisplayName { get; set; }

        /// <summary>
        /// Gets or sets the value of the scope claim that the resource
        /// application should expect in the OAuth 2.0 access token.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

    }
}
