// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Security.KeyVault.Secrets
{
    // Data plane generated client.
    /// <summary> The Secret service client. </summary>
    public partial class SecretClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _vaultBaseUrl;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Sets a secret in a specified key vault. </summary>
        /// <param name="secretName"> The name of the secret. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='SetSecretAsync(String,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> SetSecretAsync(string secretName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.SetSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetSecretRequest(secretName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Sets a secret in a specified key vault. </summary>
        /// <param name="secretName"> The name of the secret. The value you provide may be copied globally for the purpose of running the service. The value provided should not include personally identifiable or sensitive information. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='SetSecret(String,RequestContent,RequestContext)']/*" />
        public virtual Response SetSecret(string secretName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.SetSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSetSecretRequest(secretName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a secret from a specified key vault. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='DeleteSecretAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> DeleteSecretAsync(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.DeleteSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteSecretRequest(secretName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a secret from a specified key vault. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='DeleteSecret(String,RequestContext)']/*" />
        public virtual Response DeleteSecret(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.DeleteSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteSecretRequest(secretName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the attributes associated with a specified secret in a given key vault. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="secretVersion"> The version of the secret. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/>, <paramref name="secretVersion"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> or <paramref name="secretVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='UpdateSecretAsync(String,String,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> UpdateSecretAsync(string secretName, string secretVersion, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));
            Argument.AssertNotNullOrEmpty(secretVersion, nameof(secretVersion));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.UpdateSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateSecretRequest(secretName, secretVersion, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the attributes associated with a specified secret in a given key vault. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="secretVersion"> The version of the secret. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/>, <paramref name="secretVersion"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> or <paramref name="secretVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='UpdateSecret(String,String,RequestContent,RequestContext)']/*" />
        public virtual Response UpdateSecret(string secretName, string secretVersion, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));
            Argument.AssertNotNullOrEmpty(secretVersion, nameof(secretVersion));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.UpdateSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateSecretRequest(secretName, secretVersion, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specified secret from a given key vault. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="secretVersion"> The version of the secret. This URI fragment is optional. If not specified, the latest version of the secret is returned. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> or <paramref name="secretVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> or <paramref name="secretVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetSecretAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> GetSecretAsync(string secretName, string secretVersion, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));
            Argument.AssertNotNullOrEmpty(secretVersion, nameof(secretVersion));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.GetSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSecretRequest(secretName, secretVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specified secret from a given key vault. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="secretVersion"> The version of the secret. This URI fragment is optional. If not specified, the latest version of the secret is returned. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> or <paramref name="secretVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> or <paramref name="secretVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetSecret(String,String,RequestContext)']/*" />
        public virtual Response GetSecret(string secretName, string secretVersion, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));
            Argument.AssertNotNullOrEmpty(secretVersion, nameof(secretVersion));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.GetSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSecretRequest(secretName, secretVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified deleted secret. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetDeletedSecretAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> GetDeletedSecretAsync(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.GetDeletedSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeletedSecretRequest(secretName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the specified deleted secret. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetDeletedSecret(String,RequestContext)']/*" />
        public virtual Response GetDeletedSecret(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.GetDeletedSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeletedSecretRequest(secretName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Permanently deletes the specified secret. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='PurgeDeletedSecretAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> PurgeDeletedSecretAsync(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.PurgeDeletedSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePurgeDeletedSecretRequest(secretName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Permanently deletes the specified secret. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='PurgeDeletedSecret(String,RequestContext)']/*" />
        public virtual Response PurgeDeletedSecret(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.PurgeDeletedSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePurgeDeletedSecretRequest(secretName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Recovers the deleted secret to the latest version. </summary>
        /// <param name="secretName"> The name of the deleted secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='RecoverDeletedSecretAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> RecoverDeletedSecretAsync(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.RecoverDeletedSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRecoverDeletedSecretRequest(secretName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Recovers the deleted secret to the latest version. </summary>
        /// <param name="secretName"> The name of the deleted secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='RecoverDeletedSecret(String,RequestContext)']/*" />
        public virtual Response RecoverDeletedSecret(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.RecoverDeletedSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRecoverDeletedSecretRequest(secretName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Backs up the specified secret. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='BackupSecretAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> BackupSecretAsync(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.BackupSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBackupSecretRequest(secretName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Backs up the specified secret. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='BackupSecret(String,RequestContext)']/*" />
        public virtual Response BackupSecret(string secretName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.BackupSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateBackupSecretRequest(secretName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Restores a backed up secret to a vault. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='RestoreSecretAsync(RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> RestoreSecretAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.RestoreSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRestoreSecretRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Restores a backed up secret to a vault. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='RestoreSecret(RequestContent,RequestContext)']/*" />
        public virtual Response RestoreSecret(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("SecretClient.RestoreSecret");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRestoreSecretRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List secrets in a specified key vault. </summary>
        /// <param name="maxresults"> Maximum number of results to return in a page. If not specified, the service will return up to 25 results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetSecretsAsync(Int32,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetSecretsAsync(int? maxresults = null, RequestContext context = null)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetSecretsRequest(maxresults, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetSecretsNextPageRequest(nextLink, maxresults, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SecretClient.GetSecrets", "value", "nextLink", context);
        }

        /// <summary> List secrets in a specified key vault. </summary>
        /// <param name="maxresults"> Maximum number of results to return in a page. If not specified, the service will return up to 25 results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetSecrets(Int32,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetSecrets(int? maxresults = null, RequestContext context = null)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetSecretsRequest(maxresults, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetSecretsNextPageRequest(nextLink, maxresults, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SecretClient.GetSecrets", "value", "nextLink", context);
        }

        /// <summary> List all versions of the specified secret. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="maxresults"> Maximum number of results to return in a page. If not specified, the service will return up to 25 results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetSecretVersionsAsync(String,Int32,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetSecretVersionsAsync(string secretName, int? maxresults = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetSecretVersionsRequest(secretName, maxresults, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetSecretVersionsNextPageRequest(nextLink, secretName, maxresults, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SecretClient.GetSecretVersions", "value", "nextLink", context);
        }

        /// <summary> List all versions of the specified secret. </summary>
        /// <param name="secretName"> The name of the secret. </param>
        /// <param name="maxresults"> Maximum number of results to return in a page. If not specified, the service will return up to 25 results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="secretName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="secretName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetSecretVersions(String,Int32,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetSecretVersions(string secretName, int? maxresults = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(secretName, nameof(secretName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetSecretVersionsRequest(secretName, maxresults, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetSecretVersionsNextPageRequest(nextLink, secretName, maxresults, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SecretClient.GetSecretVersions", "value", "nextLink", context);
        }

        /// <summary> Lists deleted secrets for the specified vault. </summary>
        /// <param name="maxresults"> Maximum number of results to return in a page. If not specified the service will return up to 25 results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetDeletedSecretsAsync(Int32,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetDeletedSecretsAsync(int? maxresults = null, RequestContext context = null)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetDeletedSecretsRequest(maxresults, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetDeletedSecretsNextPageRequest(nextLink, maxresults, context);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SecretClient.GetDeletedSecrets", "value", "nextLink", context);
        }

        /// <summary> Lists deleted secrets for the specified vault. </summary>
        /// <param name="maxresults"> Maximum number of results to return in a page. If not specified the service will return up to 25 results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/SecretClient.xml" path="doc/members/member[@name='GetDeletedSecrets(Int32,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetDeletedSecrets(int? maxresults = null, RequestContext context = null)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetDeletedSecretsRequest(maxresults, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetDeletedSecretsNextPageRequest(nextLink, maxresults, context);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "SecretClient.GetDeletedSecrets", "value", "nextLink", context);
        }

        internal HttpMessage CreateSetSecretRequest(string secretName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/secrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteSecretRequest(string secretName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/secrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateSecretRequest(string secretName, string secretVersion, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/secrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(secretVersion, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSecretRequest(string secretName, string secretVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/secrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(secretVersion, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSecretsRequest(int? maxresults, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/secrets", false);
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", maxresults.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSecretVersionsRequest(string secretName, int? maxresults, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/secrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendPath("/versions", false);
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", maxresults.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeletedSecretsRequest(int? maxresults, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/deletedsecrets", false);
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", maxresults.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeletedSecretRequest(string secretName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/deletedsecrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePurgeDeletedSecretRequest(string secretName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/deletedsecrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRecoverDeletedSecretRequest(string secretName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/deletedsecrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendPath("/recover", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateBackupSecretRequest(string secretName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/secrets/", false);
            uri.AppendPath(secretName, true);
            uri.AppendPath("/backup", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRestoreSecretRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendPath("/secrets/restore", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSecretsNextPageRequest(string nextLink, int? maxresults, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetSecretVersionsNextPageRequest(string nextLink, string secretName, int? maxresults, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeletedSecretsNextPageRequest(string nextLink, int? maxresults, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_vaultBaseUrl);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
