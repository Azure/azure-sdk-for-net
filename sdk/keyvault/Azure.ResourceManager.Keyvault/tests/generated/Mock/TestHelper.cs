// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.ResourceManager;
using Azure.ResourceManager.KeyVault;
using Azure.ResourceManager.KeyVault.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.KeyVault.Tests
{
    /// <summary> Test Extension for Azure.ResourceManager.KeyVault. </summary>
    public static partial class TestHelper
    {
        public static async Task<KeyVault.Models.VaultCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(VaultCollection collection, string vaultName)
        {
            // Example: Create a new vault or update an existing vault
            KeyVault.Models.VaultCreateOrUpdateParameters parameters = new KeyVault.Models.VaultCreateOrUpdateParameters("westus", new KeyVault.Models.VaultProperties(Guid.Parse("00000000-0000-0000-0000-000000000000"), new KeyVault.Models.Sku(new KeyVault.Models.SkuFamily("A"), KeyVault.Models.SkuName.Standard))
            {
                EnabledForDeployment = true,
                EnabledForDiskEncryption = true,
                EnabledForTemplateDeployment = true,
            });

            return await collection.CreateOrUpdateAsync(vaultName, parameters);
        }

        public static async Task<Response<KeyVault.Vault>> GetExampleInstanceAsync(VaultCollection collection, string vaultName)
        {
            // Example: Retrieve a vault

            return await collection.GetAsync(vaultName);
        }

        public static AsyncPageable<KeyVault.Vault> GetAllExampleInstanceAsync(VaultCollection collection)
        {
            // Example: List vaults in the specified resource group
            int? top = 1;

            return collection.GetAllAsync(top);
        }

        public static async Task<Response<KeyVault.DeletedVault>> GetExampleInstanceAsync(DeletedVaultCollection collection, string location, string vaultName)
        {
            // Example: Retrieve a deleted vault

            return await collection.GetAsync(location, vaultName);
        }

        public static async Task<KeyVault.Models.PrivateEndpointConnectionPutOperation> CreateOrUpdateExampleInstanceAsync(PrivateEndpointConnectionCollection collection, string privateEndpointConnectionName)
        {
            // Example: KeyVaultPutPrivateEndpointConnection
            KeyVault.PrivateEndpointConnectionData properties = new KeyVault.PrivateEndpointConnectionData()
            {
                Etag = "",
                PrivateLinkServiceConnectionState = new KeyVault.Models.PrivateLinkServiceConnectionState()
                {
                    Status = new KeyVault.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "My name is Joe and I'm approving this.",
                },
            };

            return await collection.CreateOrUpdateAsync(privateEndpointConnectionName, properties);
        }

        public static async Task<Response<KeyVault.PrivateEndpointConnection>> GetExampleInstanceAsync(PrivateEndpointConnectionCollection collection, string privateEndpointConnectionName)
        {
            // Example: KeyVaultGetPrivateEndpointConnection

            return await collection.GetAsync(privateEndpointConnectionName);
        }

        public static AsyncPageable<KeyVault.PrivateEndpointConnection> GetAllExampleInstanceAsync(PrivateEndpointConnectionCollection collection)
        {
            // Example: KeyVaultListPrivateEndpointConnection

            return collection.GetAllAsync();
        }

        public static async Task<KeyVault.Models.ManagedHsmCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(ManagedHsmCollection collection, string name)
        {
            // Example: Create a new managed HSM Pool or update an existing managed HSM Pool
            KeyVault.ManagedHsmData parameters = new KeyVault.ManagedHsmData("westus")
            {
                Properties = new KeyVault.Models.ManagedHsmProperties()
                {
                    TenantId = Guid.Parse("00000000-0000-0000-0000-000000000000"),
                    EnableSoftDelete = true,
                    SoftDeleteRetentionInDays = 90,
                    EnablePurgeProtection = true,
                },
                Sku = new KeyVault.Models.ManagedHsmSku(new KeyVault.Models.ManagedHsmSkuFamily("B"), KeyVault.Models.ManagedHsmSkuName.StandardB1),
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { { "Dept", "hsm" }, { "Environment", "dogfood" }, });
            return await collection.CreateOrUpdateAsync(name, parameters);
        }

        public static async Task<Response<KeyVault.ManagedHsm>> GetExampleInstanceAsync(ManagedHsmCollection collection, string name)
        {
            // Example: Retrieve a managed HSM Pool

            return await collection.GetAsync(name);
        }

        public static AsyncPageable<KeyVault.ManagedHsm> GetAllExampleInstanceAsync(ManagedHsmCollection collection)
        {
            // Example: List managed HSM Pools in a resource group
            int? top = null;

            return collection.GetAllAsync(top);
        }

        public static async Task<Response<KeyVault.DeletedManagedHsm>> GetExampleInstanceAsync(DeletedManagedHsmCollection collection, string location, string name)
        {
            // Example: Retrieve a deleted managed HSM

            return await collection.GetAsync(location, name);
        }

        public static async Task<KeyVault.Models.MhsmPrivateEndpointConnectionPutOperation> CreateOrUpdateExampleInstanceAsync(MhsmPrivateEndpointConnectionCollection collection, string privateEndpointConnectionName)
        {
            // Example: ManagedHsmPutPrivateEndpointConnection
            KeyVault.MhsmPrivateEndpointConnectionData properties = new KeyVault.MhsmPrivateEndpointConnectionData("westus")
            {
                PrivateLinkServiceConnectionState = new KeyVault.Models.MhsmPrivateLinkServiceConnectionState()
                {
                    Status = new KeyVault.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "My name is Joe and I'm approving this.",
                },
            };

            return await collection.CreateOrUpdateAsync(privateEndpointConnectionName, properties);
        }

        public static async Task<Response<KeyVault.MhsmPrivateEndpointConnection>> GetExampleInstanceAsync(MhsmPrivateEndpointConnectionCollection collection, string privateEndpointConnectionName)
        {
            // Example: ManagedHsmGetPrivateEndpointConnection

            return await collection.GetAsync(privateEndpointConnectionName);
        }

        public static AsyncPageable<KeyVault.MhsmPrivateEndpointConnection> GetAllExampleInstanceAsync(MhsmPrivateEndpointConnectionCollection collection)
        {
            // Example: List managed HSM Pools in a subscription

            return collection.GetAllAsync();
        }

        public static async Task<ResourceGroup> CreateResourceGroupAsync(string resourceGroupName, ArmClient client)
        {
            var defaultSubscription = await client.GetDefaultSubscriptionAsync();
            var rgop = await defaultSubscription.GetResourceGroups().CreateOrUpdateAsync
            (
            resourceGroupName,
            new ResourceGroupData(defaultSubscription.ToString()) { Tags = { { "test", "env" } } }
            );
            return rgop.Value;
        }

        public static IDictionary<string, string> ReplaceWith(this IDictionary<string, string> dest, IDictionary<string, string> src)
        {
            dest.Clear();
            foreach (var kv in src)
            {
                dest.Add(kv);
            }
            return dest;
        }
    }
}
