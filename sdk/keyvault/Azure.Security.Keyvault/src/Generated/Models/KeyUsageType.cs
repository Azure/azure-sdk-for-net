// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Security.KeyVault.Models
{
    /// <summary> The KeyUsageType. </summary>
    public readonly partial struct KeyUsageType : IEquatable<KeyUsageType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="KeyUsageType"/> values are the same. </summary>
        public KeyUsageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DigitalSignatureValue = "digitalSignature";
        private const string NonRepudiationValue = "nonRepudiation";
        private const string KeyEnciphermentValue = "keyEncipherment";
        private const string DataEnciphermentValue = "dataEncipherment";
        private const string KeyAgreementValue = "keyAgreement";
        private const string KeyCertSignValue = "keyCertSign";
        private const string CRLSignValue = "cRLSign";
        private const string EncipherOnlyValue = "encipherOnly";
        private const string DecipherOnlyValue = "decipherOnly";

        /// <summary> digitalSignature. </summary>
        public static KeyUsageType DigitalSignature { get; } = new KeyUsageType(DigitalSignatureValue);
        /// <summary> nonRepudiation. </summary>
        public static KeyUsageType NonRepudiation { get; } = new KeyUsageType(NonRepudiationValue);
        /// <summary> keyEncipherment. </summary>
        public static KeyUsageType KeyEncipherment { get; } = new KeyUsageType(KeyEnciphermentValue);
        /// <summary> dataEncipherment. </summary>
        public static KeyUsageType DataEncipherment { get; } = new KeyUsageType(DataEnciphermentValue);
        /// <summary> keyAgreement. </summary>
        public static KeyUsageType KeyAgreement { get; } = new KeyUsageType(KeyAgreementValue);
        /// <summary> keyCertSign. </summary>
        public static KeyUsageType KeyCertSign { get; } = new KeyUsageType(KeyCertSignValue);
        /// <summary> cRLSign. </summary>
        public static KeyUsageType CRLSign { get; } = new KeyUsageType(CRLSignValue);
        /// <summary> encipherOnly. </summary>
        public static KeyUsageType EncipherOnly { get; } = new KeyUsageType(EncipherOnlyValue);
        /// <summary> decipherOnly. </summary>
        public static KeyUsageType DecipherOnly { get; } = new KeyUsageType(DecipherOnlyValue);
        /// <summary> Determines if two <see cref="KeyUsageType"/> values are the same. </summary>
        public static bool operator ==(KeyUsageType left, KeyUsageType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="KeyUsageType"/> values are not the same. </summary>
        public static bool operator !=(KeyUsageType left, KeyUsageType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="KeyUsageType"/>. </summary>
        public static implicit operator KeyUsageType(string value) => new KeyUsageType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is KeyUsageType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(KeyUsageType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
