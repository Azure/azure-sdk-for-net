// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Security.KeyVault.Models
{
    public partial class SubjectAlternativeNames : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Emails != null)
            {
                writer.WritePropertyName("emails");
                writer.WriteStartArray();
                foreach (var item in Emails)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (DnsNames != null)
            {
                writer.WritePropertyName("dns_names");
                writer.WriteStartArray();
                foreach (var item in DnsNames)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Upns != null)
            {
                writer.WritePropertyName("upns");
                writer.WriteStartArray();
                foreach (var item in Upns)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static SubjectAlternativeNames DeserializeSubjectAlternativeNames(JsonElement element)
        {
            IList<string> emails = default;
            IList<string> dnsNames = default;
            IList<string> upns = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("emails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    emails = array;
                    continue;
                }
                if (property.NameEquals("dns_names"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    dnsNames = array;
                    continue;
                }
                if (property.NameEquals("upns"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    upns = array;
                    continue;
                }
            }
            return new SubjectAlternativeNames(emails, dnsNames, upns);
        }
    }
}
