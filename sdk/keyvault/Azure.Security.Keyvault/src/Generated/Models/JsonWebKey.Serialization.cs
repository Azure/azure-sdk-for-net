// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Security.KeyVault.Models
{
    public partial class JsonWebKey : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Kid != null)
            {
                writer.WritePropertyName("kid");
                writer.WriteStringValue(Kid);
            }
            if (Kty != null)
            {
                writer.WritePropertyName("kty");
                writer.WriteStringValue(Kty.Value.ToString());
            }
            if (KeyOps != null)
            {
                writer.WritePropertyName("key_ops");
                writer.WriteStartArray();
                foreach (var item in KeyOps)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (N != null)
            {
                writer.WritePropertyName("n");
                writer.WriteBase64StringValue(N, "U");
            }
            if (E != null)
            {
                writer.WritePropertyName("e");
                writer.WriteBase64StringValue(E, "U");
            }
            if (D != null)
            {
                writer.WritePropertyName("d");
                writer.WriteBase64StringValue(D, "U");
            }
            if (DP != null)
            {
                writer.WritePropertyName("dp");
                writer.WriteBase64StringValue(DP, "U");
            }
            if (DQ != null)
            {
                writer.WritePropertyName("dq");
                writer.WriteBase64StringValue(DQ, "U");
            }
            if (QI != null)
            {
                writer.WritePropertyName("qi");
                writer.WriteBase64StringValue(QI, "U");
            }
            if (P != null)
            {
                writer.WritePropertyName("p");
                writer.WriteBase64StringValue(P, "U");
            }
            if (Q != null)
            {
                writer.WritePropertyName("q");
                writer.WriteBase64StringValue(Q, "U");
            }
            if (K != null)
            {
                writer.WritePropertyName("k");
                writer.WriteBase64StringValue(K, "U");
            }
            if (T != null)
            {
                writer.WritePropertyName("key_hsm");
                writer.WriteBase64StringValue(T, "U");
            }
            if (Crv != null)
            {
                writer.WritePropertyName("crv");
                writer.WriteStringValue(Crv.Value.ToString());
            }
            if (X != null)
            {
                writer.WritePropertyName("x");
                writer.WriteBase64StringValue(X, "U");
            }
            if (Y != null)
            {
                writer.WritePropertyName("y");
                writer.WriteBase64StringValue(Y, "U");
            }
            writer.WriteEndObject();
        }

        internal static JsonWebKey DeserializeJsonWebKey(JsonElement element)
        {
            string kid = default;
            JsonWebKeyType? kty = default;
            IList<string> keyOps = default;
            byte[] n = default;
            byte[] e = default;
            byte[] d = default;
            byte[] dp = default;
            byte[] dq = default;
            byte[] qi = default;
            byte[] p = default;
            byte[] q = default;
            byte[] k = default;
            byte[] keyHsm = default;
            JsonWebKeyCurveName? crv = default;
            byte[] x = default;
            byte[] y = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kty"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kty = new JsonWebKeyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("key_ops"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    keyOps = array;
                    continue;
                }
                if (property.NameEquals("n"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    n = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("e"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    e = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("d"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    d = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("dp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dp = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("dq"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dq = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("qi"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    qi = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("p"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    p = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("q"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    q = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("k"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    k = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("key_hsm"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyHsm = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("crv"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    crv = new JsonWebKeyCurveName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("x"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    x = property.Value.GetBytesFromBase64("U");
                    continue;
                }
                if (property.NameEquals("y"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    y = property.Value.GetBytesFromBase64("U");
                    continue;
                }
            }
            return new JsonWebKey(kid, kty, keyOps, n, e, d, dp, dq, qi, p, q, k, keyHsm, crv, x, y);
        }
    }
}
