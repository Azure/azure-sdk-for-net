// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Security.KeyVault.Models
{
    /// <summary> As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18. </summary>
    public partial class JsonWebKey
    {
        /// <summary> Initializes a new instance of JsonWebKey. </summary>
        public JsonWebKey()
        {
        }

        /// <summary> Initializes a new instance of JsonWebKey. </summary>
        /// <param name="kid"> Key identifier. </param>
        /// <param name="kty"> JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. </param>
        /// <param name="keyOps"> . </param>
        /// <param name="n"> RSA modulus. </param>
        /// <param name="e"> RSA public exponent. </param>
        /// <param name="d"> RSA private exponent, or the D component of an EC private key. </param>
        /// <param name="dP"> RSA private key parameter. </param>
        /// <param name="dQ"> RSA private key parameter. </param>
        /// <param name="qI"> RSA private key parameter. </param>
        /// <param name="p"> RSA secret prime. </param>
        /// <param name="q"> RSA secret prime, with p &lt; q. </param>
        /// <param name="k"> Symmetric key. </param>
        /// <param name="t"> HSM Token, used with &apos;Bring Your Own Key&apos;. </param>
        /// <param name="crv"> Elliptic curve name. For valid values, see JsonWebKeyCurveName. </param>
        /// <param name="x"> X component of an EC public key. </param>
        /// <param name="y"> Y component of an EC public key. </param>
        internal JsonWebKey(string kid, JsonWebKeyType? kty, IList<string> keyOps, byte[] n, byte[] e, byte[] d, byte[] dP, byte[] dQ, byte[] qI, byte[] p, byte[] q, byte[] k, byte[] t, JsonWebKeyCurveName? crv, byte[] x, byte[] y)
        {
            Kid = kid;
            Kty = kty;
            KeyOps = keyOps;
            N = n;
            E = e;
            D = d;
            DP = dP;
            DQ = dQ;
            QI = qI;
            P = p;
            Q = q;
            K = k;
            T = t;
            Crv = crv;
            X = x;
            Y = y;
        }

        /// <summary> Key identifier. </summary>
        public string Kid { get; set; }
        /// <summary> JsonWebKey Key Type (kty), as defined in https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40. </summary>
        public JsonWebKeyType? Kty { get; set; }
        public IList<string> KeyOps { get; set; }
        /// <summary> RSA modulus. </summary>
        public byte[] N { get; set; }
        /// <summary> RSA public exponent. </summary>
        public byte[] E { get; set; }
        /// <summary> RSA private exponent, or the D component of an EC private key. </summary>
        public byte[] D { get; set; }
        /// <summary> RSA private key parameter. </summary>
        public byte[] DP { get; set; }
        /// <summary> RSA private key parameter. </summary>
        public byte[] DQ { get; set; }
        /// <summary> RSA private key parameter. </summary>
        public byte[] QI { get; set; }
        /// <summary> RSA secret prime. </summary>
        public byte[] P { get; set; }
        /// <summary> RSA secret prime, with p &lt; q. </summary>
        public byte[] Q { get; set; }
        /// <summary> Symmetric key. </summary>
        public byte[] K { get; set; }
        /// <summary> HSM Token, used with &apos;Bring Your Own Key&apos;. </summary>
        public byte[] T { get; set; }
        /// <summary> Elliptic curve name. For valid values, see JsonWebKeyCurveName. </summary>
        public JsonWebKeyCurveName? Crv { get; set; }
        /// <summary> X component of an EC public key. </summary>
        public byte[] X { get; set; }
        /// <summary> Y component of an EC public key. </summary>
        public byte[] Y { get; set; }
    }
}
