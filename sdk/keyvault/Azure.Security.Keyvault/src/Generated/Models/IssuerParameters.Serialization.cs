// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Security.KeyVault.Models
{
    public partial class IssuerParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Name != null)
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (CertificateType != null)
            {
                writer.WritePropertyName("cty");
                writer.WriteStringValue(CertificateType);
            }
            if (CertificateTransparency != null)
            {
                writer.WritePropertyName("cert_transparency");
                writer.WriteBooleanValue(CertificateTransparency.Value);
            }
            writer.WriteEndObject();
        }

        internal static IssuerParameters DeserializeIssuerParameters(JsonElement element)
        {
            string name = default;
            string cty = default;
            bool? certTransparency = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cty"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cty = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cert_transparency"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certTransparency = property.Value.GetBoolean();
                    continue;
                }
            }
            return new IssuerParameters(name, cty, certTransparency);
        }
    }
}
