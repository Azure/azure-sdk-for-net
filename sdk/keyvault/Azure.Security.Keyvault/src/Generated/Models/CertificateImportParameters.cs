// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Security.KeyVault.Models
{
    /// <summary> The certificate import parameters. </summary>
    public partial class CertificateImportParameters
    {
        /// <summary> Initializes a new instance of CertificateImportParameters. </summary>
        /// <param name="base64EncodedCertificate"> Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key. </param>
        public CertificateImportParameters(string base64EncodedCertificate)
        {
            if (base64EncodedCertificate == null)
            {
                throw new ArgumentNullException(nameof(base64EncodedCertificate));
            }

            Base64EncodedCertificate = base64EncodedCertificate;
        }

        /// <summary> Initializes a new instance of CertificateImportParameters. </summary>
        /// <param name="base64EncodedCertificate"> Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key. </param>
        /// <param name="password"> If the private key in base64EncodedCertificate is encrypted, the password used for encryption. </param>
        /// <param name="certificatePolicy"> The management policy for the certificate. </param>
        /// <param name="certificateAttributes"> The attributes of the certificate (optional). </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        internal CertificateImportParameters(string base64EncodedCertificate, string password, CertificatePolicy certificatePolicy, CertificateAttributes certificateAttributes, IDictionary<string, string> tags)
        {
            Base64EncodedCertificate = base64EncodedCertificate;
            Password = password;
            CertificatePolicy = certificatePolicy;
            CertificateAttributes = certificateAttributes;
            Tags = tags;
        }

        /// <summary> Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key. </summary>
        public string Base64EncodedCertificate { get; }
        /// <summary> If the private key in base64EncodedCertificate is encrypted, the password used for encryption. </summary>
        public string Password { get; set; }
        /// <summary> The management policy for the certificate. </summary>
        public CertificatePolicy CertificatePolicy { get; set; }
        /// <summary> The attributes of the certificate (optional). </summary>
        public CertificateAttributes CertificateAttributes { get; set; }
        /// <summary> Application specific metadata in the form of key-value pairs. </summary>
        public IDictionary<string, string> Tags { get; set; }
    }
}
