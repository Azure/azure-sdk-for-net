// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Security.KeyVault.Models
{
    public partial class CertificatePolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Id != null)
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (KeyProperties != null)
            {
                writer.WritePropertyName("key_props");
                writer.WriteObjectValue(KeyProperties);
            }
            if (SecretProperties != null)
            {
                writer.WritePropertyName("secret_props");
                writer.WriteObjectValue(SecretProperties);
            }
            if (X509CertificateProperties != null)
            {
                writer.WritePropertyName("x509_props");
                writer.WriteObjectValue(X509CertificateProperties);
            }
            if (LifetimeActions != null)
            {
                writer.WritePropertyName("lifetime_actions");
                writer.WriteStartArray();
                foreach (var item in LifetimeActions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (IssuerParameters != null)
            {
                writer.WritePropertyName("issuer");
                writer.WriteObjectValue(IssuerParameters);
            }
            if (Attributes != null)
            {
                writer.WritePropertyName("attributes");
                writer.WriteObjectValue(Attributes);
            }
            writer.WriteEndObject();
        }

        internal static CertificatePolicy DeserializeCertificatePolicy(JsonElement element)
        {
            string id = default;
            KeyProperties keyProps = default;
            SecretProperties secretProps = default;
            X509CertificateProperties x509Props = default;
            IList<LifetimeAction> lifetimeActions = default;
            IssuerParameters issuer = default;
            CertificateAttributes attributes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("key_props"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyProps = KeyProperties.DeserializeKeyProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("secret_props"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    secretProps = SecretProperties.DeserializeSecretProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("x509_props"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    x509Props = X509CertificateProperties.DeserializeX509CertificateProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("lifetime_actions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<LifetimeAction> array = new List<LifetimeAction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(LifetimeAction.DeserializeLifetimeAction(item));
                        }
                    }
                    lifetimeActions = array;
                    continue;
                }
                if (property.NameEquals("issuer"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    issuer = IssuerParameters.DeserializeIssuerParameters(property.Value);
                    continue;
                }
                if (property.NameEquals("attributes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attributes = CertificateAttributes.DeserializeCertificateAttributes(property.Value);
                    continue;
                }
            }
            return new CertificatePolicy(id, keyProps, secretProps, x509Props, lifetimeActions, issuer, attributes);
        }
    }
}
