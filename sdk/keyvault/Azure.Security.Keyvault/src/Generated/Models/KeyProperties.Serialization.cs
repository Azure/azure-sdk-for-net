// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Security.KeyVault.Models
{
    public partial class KeyProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Exportable != null)
            {
                writer.WritePropertyName("exportable");
                writer.WriteBooleanValue(Exportable.Value);
            }
            if (KeyType != null)
            {
                writer.WritePropertyName("kty");
                writer.WriteStringValue(KeyType.Value.ToString());
            }
            if (KeySize != null)
            {
                writer.WritePropertyName("key_size");
                writer.WriteNumberValue(KeySize.Value);
            }
            if (ReuseKey != null)
            {
                writer.WritePropertyName("reuse_key");
                writer.WriteBooleanValue(ReuseKey.Value);
            }
            if (Curve != null)
            {
                writer.WritePropertyName("crv");
                writer.WriteStringValue(Curve.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static KeyProperties DeserializeKeyProperties(JsonElement element)
        {
            bool? exportable = default;
            JsonWebKeyType? kty = default;
            int? keySize = default;
            bool? reuseKey = default;
            JsonWebKeyCurveName? crv = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("exportable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exportable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kty"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kty = new JsonWebKeyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("key_size"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keySize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("reuse_key"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reuseKey = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("crv"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    crv = new JsonWebKeyCurveName(property.Value.GetString());
                    continue;
                }
            }
            return new KeyProperties(exportable, kty, keySize, reuseKey, crv);
        }
    }
}
