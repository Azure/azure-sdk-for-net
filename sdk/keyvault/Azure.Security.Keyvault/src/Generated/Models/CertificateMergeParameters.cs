// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Security.KeyVault.Models
{
    /// <summary> The certificate merge parameters. </summary>
    public partial class CertificateMergeParameters
    {
        /// <summary> Initializes a new instance of CertificateMergeParameters. </summary>
        /// <param name="x509Certificates"> The certificate or the certificate chain to merge. </param>
        public CertificateMergeParameters(IEnumerable<byte[]> x509Certificates)
        {
            if (x509Certificates == null)
            {
                throw new ArgumentNullException(nameof(x509Certificates));
            }

            X509Certificates = x509Certificates.ToList();
        }

        /// <summary> Initializes a new instance of CertificateMergeParameters. </summary>
        /// <param name="x509Certificates"> The certificate or the certificate chain to merge. </param>
        /// <param name="certificateAttributes"> The attributes of the certificate (optional). </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        internal CertificateMergeParameters(IList<byte[]> x509Certificates, CertificateAttributes certificateAttributes, IDictionary<string, string> tags)
        {
            X509Certificates = x509Certificates ?? new List<byte[]>();
            CertificateAttributes = certificateAttributes;
            Tags = tags;
        }

        /// <summary> The certificate or the certificate chain to merge. </summary>
        public IList<byte[]> X509Certificates { get; }
        /// <summary> The attributes of the certificate (optional). </summary>
        public CertificateAttributes CertificateAttributes { get; set; }
        /// <summary> Application specific metadata in the form of key-value pairs. </summary>
        public IDictionary<string, string> Tags { get; set; }
    }
}
