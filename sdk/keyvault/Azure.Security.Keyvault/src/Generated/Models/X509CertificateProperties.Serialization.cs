// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Security.KeyVault.Models
{
    public partial class X509CertificateProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Subject != null)
            {
                writer.WritePropertyName("subject");
                writer.WriteStringValue(Subject);
            }
            if (Ekus != null)
            {
                writer.WritePropertyName("ekus");
                writer.WriteStartArray();
                foreach (var item in Ekus)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (SubjectAlternativeNames != null)
            {
                writer.WritePropertyName("sans");
                writer.WriteObjectValue(SubjectAlternativeNames);
            }
            if (KeyUsage != null)
            {
                writer.WritePropertyName("key_usage");
                writer.WriteStartArray();
                foreach (var item in KeyUsage)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (ValidityInMonths != null)
            {
                writer.WritePropertyName("validity_months");
                writer.WriteNumberValue(ValidityInMonths.Value);
            }
            writer.WriteEndObject();
        }

        internal static X509CertificateProperties DeserializeX509CertificateProperties(JsonElement element)
        {
            string subject = default;
            IList<string> ekus = default;
            SubjectAlternativeNames sans = default;
            IList<KeyUsageType> keyUsage = default;
            int? validityMonths = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("subject"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subject = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ekus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(item.GetString());
                        }
                    }
                    ekus = array;
                    continue;
                }
                if (property.NameEquals("sans"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sans = SubjectAlternativeNames.DeserializeSubjectAlternativeNames(property.Value);
                    continue;
                }
                if (property.NameEquals("key_usage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<KeyUsageType> array = new List<KeyUsageType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new KeyUsageType(item.GetString()));
                    }
                    keyUsage = array;
                    continue;
                }
                if (property.NameEquals("validity_months"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validityMonths = property.Value.GetInt32();
                    continue;
                }
            }
            return new X509CertificateProperties(subject, ekus, sans, keyUsage, validityMonths);
        }
    }
}
