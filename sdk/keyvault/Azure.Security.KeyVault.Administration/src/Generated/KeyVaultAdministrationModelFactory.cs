// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace Azure.Security.KeyVault.Administration
{
    /// <summary> Model factory for models. </summary>
    public static partial class KeyVaultAdministrationModelFactory
    {
        /// <summary> Initializes a new instance of KeyVaultRoleAssignmentProperties. </summary>
        /// <param name="scope"> The role scope. </param>
        /// <param name="roleDefinitionId"> The role definition ID. </param>
        /// <param name="principalId"> The principal ID. </param>
        /// <returns> A new <see cref="Administration.KeyVaultRoleAssignmentProperties"/> instance for mocking. </returns>
        public static KeyVaultRoleAssignmentProperties KeyVaultRoleAssignmentProperties(KeyVaultRoleScope? scope = null, string roleDefinitionId = null, string principalId = null)
        {
            return new KeyVaultRoleAssignmentProperties(scope, roleDefinitionId, principalId);
        }

        /// <summary> Initializes a new instance of KeyVaultSetting. </summary>
        /// <param name="name"> The account setting to be updated. </param>
        /// <param name="content"> The value of the pool setting. </param>
        /// <param name="settingType"> The type specifier of the value. </param>
        /// <returns> A new <see cref="Administration.KeyVaultSetting"/> instance for mocking. </returns>
        public static KeyVaultSetting KeyVaultSetting(string name = null, string content = null, KeyVaultSettingType? settingType = null)
        {
            return new KeyVaultSetting(name, content, settingType);
        }

        /// <summary> Initializes a new instance of GetSettingsResult. </summary>
        /// <param name="settings"> A response message containing a list of account settings with their associated value. </param>
        /// <returns> A new <see cref="Administration.GetSettingsResult"/> instance for mocking. </returns>
        public static GetSettingsResult GetSettingsResult(IEnumerable<KeyVaultSetting> settings = null)
        {
            settings ??= new List<KeyVaultSetting>();

            return new GetSettingsResult(settings?.ToList());
        }
    }
}
