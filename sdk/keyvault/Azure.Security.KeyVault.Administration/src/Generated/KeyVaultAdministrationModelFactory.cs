// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure.Security.KeyVault.Administration.Models;

namespace Azure.Security.KeyVault.Administration
{
    /// <summary> Model factory for models. </summary>
    public static partial class KeyVaultAdministrationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.KeyVaultRoleAssignment"/>. </summary>
        /// <param name="id"> The role assignment ID. </param>
        /// <param name="name"> The role assignment name. </param>
        /// <param name="type"> The role assignment type. </param>
        /// <param name="properties"> Role assignment properties. </param>
        /// <returns> A new <see cref="Models.KeyVaultRoleAssignment"/> instance for mocking. </returns>
        public static Models.KeyVaultRoleAssignment KeyVaultRoleAssignment(string id = null, string name = null, string type = null, Models.KeyVaultRoleAssignmentProperties properties = null)
        {
            return new Models.KeyVaultRoleAssignment(id, name, type, properties, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KeyVaultRoleAssignmentProperties"/>. </summary>
        /// <param name="scope"> The role scope. </param>
        /// <param name="roleDefinitionId"> The role definition ID. </param>
        /// <param name="principalId"> The principal ID. </param>
        /// <returns> A new <see cref="Models.KeyVaultRoleAssignmentProperties"/> instance for mocking. </returns>
        public static Models.KeyVaultRoleAssignmentProperties KeyVaultRoleAssignmentProperties(Models.KeyVaultRoleScope? scope = null, string roleDefinitionId = null, string principalId = null)
        {
            return new Models.KeyVaultRoleAssignmentProperties(scope, roleDefinitionId, principalId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Administration.KeyVaultRoleDefinition"/>. </summary>
        /// <param name="id"> The role definition ID. </param>
        /// <param name="name"> The role definition name. </param>
        /// <param name="type"> The role definition type. </param>
        /// <param name="roleName"> The role name. </param>
        /// <param name="description"> The role definition description. </param>
        /// <param name="roleType"> The role type. </param>
        /// <param name="permissions"> Role definition permissions. </param>
        /// <param name="assignableScopes"> Role definition assignable scopes. </param>
        /// <returns> A new <see cref="Administration.KeyVaultRoleDefinition"/> instance for mocking. </returns>
        public static KeyVaultRoleDefinition KeyVaultRoleDefinition(string id = null, string name = null, Models.KeyVaultRoleDefinitionType? type = null, string roleName = null, string description = null, Models.KeyVaultRoleType? roleType = null, IEnumerable<Models.KeyVaultPermission> permissions = null, IEnumerable<Models.KeyVaultRoleScope> assignableScopes = null)
        {
            permissions ??= new List<Models.KeyVaultPermission>();
            assignableScopes ??= new List<Models.KeyVaultRoleScope>();

            return new KeyVaultRoleDefinition(
                id,
                name,
                type,
                roleName,
                description,
                roleType,
                permissions?.ToList(),
                assignableScopes?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.KeyVaultSetting"/>. </summary>
        /// <param name="name"> The account setting to be updated. </param>
        /// <param name="content"> The value of the pool setting. </param>
        /// <param name="settingType"> The type specifier of the value. </param>
        /// <returns> A new <see cref="Models.KeyVaultSetting"/> instance for mocking. </returns>
        public static Models.KeyVaultSetting KeyVaultSetting(string name = null, string content = null, Models.KeyVaultSettingType? settingType = null)
        {
            return new Models.KeyVaultSetting(name, content, settingType, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GetSettingsResult"/>. </summary>
        /// <param name="settings"> A response message containing a list of account settings with their associated value. </param>
        /// <returns> A new <see cref="Models.GetSettingsResult"/> instance for mocking. </returns>
        public static Models.GetSettingsResult GetSettingsResult(IEnumerable<Models.KeyVaultSetting> settings = null)
        {
            settings ??= new List<Models.KeyVaultSetting>();

            return new Models.GetSettingsResult(settings?.ToList(), serializedAdditionalRawData: null);
        }
    }
}
