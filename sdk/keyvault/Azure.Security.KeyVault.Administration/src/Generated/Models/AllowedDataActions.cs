// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Security.KeyVault.Administration.Models
{
    /// <summary> Allowed Data actions. </summary>
    public readonly partial struct AllowedDataActions : IEquatable<AllowedDataActions>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AllowedDataActions"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AllowedDataActions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/read/action";
        private const string WriteHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/write/action";
        private const string ReadDeletedHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action";
        private const string RecoverDeletedHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action";
        private const string BackupHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/backup/action";
        private const string RestoreHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/restore/action";
        private const string DeleteRoleAssignmentValue = "Microsoft.KeyVault/managedHsm/roleAssignments/delete/action";
        private const string GetRoleRoleAssignmentValue = "Microsoft.KeyVault/managedHsm/roleAssignments/read/action";
        private const string WriteRoleAssignmentValue = "Microsoft.KeyVault/managedHsm/roleAssignments/write/action";
        private const string ReadRoleDefinitionValue = "Microsoft.KeyVault/managedHsm/roleDefinitions/read/action";
        private const string EncryptHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/encrypt/action";
        private const string DecryptHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/decrypt/action";
        private const string WrapHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/wrap/action";
        private const string UnwrapHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/unwrap/action";
        private const string SignHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/sign/action";
        private const string VerifyHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/verify/action";
        private const string CreateHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/create";
        private const string DeleteHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/delete";
        private const string ExportHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/export/action";
        private const string ImportHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/import/action";
        private const string PurgeDeletedHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete";
        private const string DownloadHsmSecurityDomainValue = "Microsoft.KeyVault/managedHsm/securitydomain/download/action";
        private const string UploadHsmSecurityDomainValue = "Microsoft.KeyVault/managedHsm/securitydomain/upload/action";
        private const string ReadHsmSecurityDomainStatusValue = "Microsoft.KeyVault/managedHsm/securitydomain/upload/read";
        private const string ReadHsmSecurityDomainTransferKeyValue = "Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read";
        private const string StartHsmBackupValue = "Microsoft.KeyVault/managedHsm/backup/start/action";
        private const string StartHsmRestoreValue = "Microsoft.KeyVault/managedHsm/restore/start/action";
        private const string ReadHsmBackupStatusValue = "Microsoft.KeyVault/managedHsm/backup/status/action";
        private const string ReadHsmResetoreStatusValue = "Microsoft.KeyVault/managedHsm/restore/status/action";

        /// <summary> Read HSM key. </summary>
        public static AllowedDataActions ReadHsmKey { get; } = new AllowedDataActions(ReadHsmKeyValue);
        /// <summary> Create or update HSM key. </summary>
        public static AllowedDataActions WriteHsmKey { get; } = new AllowedDataActions(WriteHsmKeyValue);
        /// <summary> Read deleted HSM key. </summary>
        public static AllowedDataActions ReadDeletedHsmKey { get; } = new AllowedDataActions(ReadDeletedHsmKeyValue);
        /// <summary> Recover deleted HSM key. </summary>
        public static AllowedDataActions RecoverDeletedHsmKey { get; } = new AllowedDataActions(RecoverDeletedHsmKeyValue);
        /// <summary> Backup HSM keys. </summary>
        public static AllowedDataActions BackupHsmKeys { get; } = new AllowedDataActions(BackupHsmKeysValue);
        /// <summary> Restore HSM keys. </summary>
        public static AllowedDataActions RestoreHsmKey { get; } = new AllowedDataActions(RestoreHsmKeyValue);
        /// <summary> Delete role assignment. </summary>
        public static AllowedDataActions DeleteRoleAssignment { get; } = new AllowedDataActions(DeleteRoleAssignmentValue);
        /// <summary> Get role assignment. </summary>
        public static AllowedDataActions GetRoleRoleAssignment { get; } = new AllowedDataActions(GetRoleRoleAssignmentValue);
        /// <summary> Create or update role assignment. </summary>
        public static AllowedDataActions WriteRoleAssignment { get; } = new AllowedDataActions(WriteRoleAssignmentValue);
        /// <summary> Get role definition. </summary>
        public static AllowedDataActions ReadRoleDefinition { get; } = new AllowedDataActions(ReadRoleDefinitionValue);
        /// <summary> Encrypt HSM keys. </summary>
        public static AllowedDataActions EncryptHsmKeys { get; } = new AllowedDataActions(EncryptHsmKeysValue);
        /// <summary> Decrypt HSM keys. </summary>
        public static AllowedDataActions DecryptHsmKeys { get; } = new AllowedDataActions(DecryptHsmKeysValue);
        /// <summary> Wrap HSM keys. </summary>
        public static AllowedDataActions WrapHsmKeys { get; } = new AllowedDataActions(WrapHsmKeysValue);
        /// <summary> Unwrap HSM keys. </summary>
        public static AllowedDataActions UnwrapHsmKeys { get; } = new AllowedDataActions(UnwrapHsmKeysValue);
        /// <summary> Sign HSM keys. </summary>
        public static AllowedDataActions SignHsmKeys { get; } = new AllowedDataActions(SignHsmKeysValue);
        /// <summary> Verify HSM keys. </summary>
        public static AllowedDataActions VerifyHsmKeys { get; } = new AllowedDataActions(VerifyHsmKeysValue);
        /// <summary> Create HSM key. </summary>
        public static AllowedDataActions CreateHsmKey { get; } = new AllowedDataActions(CreateHsmKeyValue);
        /// <summary> Delete HSM key. </summary>
        public static AllowedDataActions DeleteHsmKey { get; } = new AllowedDataActions(DeleteHsmKeyValue);
        /// <summary> Export HSM key. </summary>
        public static AllowedDataActions ExportHsmKey { get; } = new AllowedDataActions(ExportHsmKeyValue);
        /// <summary> Import HSM key. </summary>
        public static AllowedDataActions ImportHsmKey { get; } = new AllowedDataActions(ImportHsmKeyValue);
        /// <summary> Purge deleted HSM key. </summary>
        public static AllowedDataActions PurgeDeletedHsmKey { get; } = new AllowedDataActions(PurgeDeletedHsmKeyValue);
        /// <summary> Download HSM security domain. </summary>
        public static AllowedDataActions DownloadHsmSecurityDomain { get; } = new AllowedDataActions(DownloadHsmSecurityDomainValue);
        /// <summary> Upload HSM security domain. </summary>
        public static AllowedDataActions UploadHsmSecurityDomain { get; } = new AllowedDataActions(UploadHsmSecurityDomainValue);
        /// <summary> Check the status of the HSM security domain exchange file. </summary>
        public static AllowedDataActions ReadHsmSecurityDomainStatus { get; } = new AllowedDataActions(ReadHsmSecurityDomainStatusValue);
        /// <summary> Download HSM security domain transfer key. </summary>
        public static AllowedDataActions ReadHsmSecurityDomainTransferKey { get; } = new AllowedDataActions(ReadHsmSecurityDomainTransferKeyValue);
        /// <summary> Start HSM backup. </summary>
        public static AllowedDataActions StartHsmBackup { get; } = new AllowedDataActions(StartHsmBackupValue);
        /// <summary> Start HSM restore. </summary>
        public static AllowedDataActions StartHsmRestore { get; } = new AllowedDataActions(StartHsmRestoreValue);
        /// <summary> Read HSM backup status. </summary>
        public static AllowedDataActions ReadHsmBackupStatus { get; } = new AllowedDataActions(ReadHsmBackupStatusValue);
        /// <summary> Read HSM restore status. </summary>
        public static AllowedDataActions ReadHsmResetoreStatus { get; } = new AllowedDataActions(ReadHsmResetoreStatusValue);
        /// <summary> Determines if two <see cref="AllowedDataActions"/> values are the same. </summary>
        public static bool operator ==(AllowedDataActions left, AllowedDataActions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AllowedDataActions"/> values are not the same. </summary>
        public static bool operator !=(AllowedDataActions left, AllowedDataActions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AllowedDataActions"/>. </summary>
        public static implicit operator AllowedDataActions(string value) => new AllowedDataActions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AllowedDataActions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AllowedDataActions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
