// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Security.KeyVault.Administration.Models
{
    /// <summary> Denied Data actions. </summary>
    public readonly partial struct DeniedDataActions : IEquatable<DeniedDataActions>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DeniedDataActions"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeniedDataActions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/read/action";
        private const string WriteHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/write/action";
        private const string ReadDeleteHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action";
        private const string RecoverDeletedHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action";
        private const string BackupHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/backup/action";
        private const string RestoreHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/restore/action";
        private const string DeleteRoleAssignmentValue = "Microsoft.KeyVault/managedHsm/roleAssignments/delete/action";
        private const string GetRoleRoleAssignmentValue = "Microsoft.KeyVault/managedHsm/roleAssignments/read/action";
        private const string WriteRoleAssignmentValue = "Microsoft.KeyVault/managedHsm/roleAssignments/write/action";
        private const string ReadRoleDefinitionValue = "Microsoft.KeyVault/managedHsm/roleDefinitions/read/action";
        private const string EncryptHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/encrypt/action";
        private const string DecryptHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/decrypt/action";
        private const string WrapHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/wrap/action";
        private const string UnwrapHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/unwrap/action";
        private const string SignHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/sign/action";
        private const string VerifyHsmKeysValue = "Microsoft.KeyVault/managedHsm/keys/verify/action";
        private const string CreateHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/create";
        private const string DeleteHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/delete";
        private const string ExportHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/export/action";
        private const string ImportHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/import/action";
        private const string PurgeDeletedHsmKeyValue = "Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete";
        private const string DownloadHsmSecurityDomainValue = "Microsoft.KeyVault/managedHsm/securitydomain/download/action";
        private const string UploadHsmSecurityDomainValue = "Microsoft.KeyVault/managedHsm/securitydomain/upload/action";
        private const string ReadHsmSecurityDomainStatusValue = "Microsoft.KeyVault/managedHsm/securitydomain/upload/read";
        private const string ReadHsmSecurityDomainTransferKeyValue = "Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read";
        private const string StartHsmBackupValue = "Microsoft.KeyVault/managedHsm/backup/start/action";
        private const string StartHsmRestoreValue = "Microsoft.KeyVault/managedHsm/restore/start/action";
        private const string ReadHsmBackupStatusValue = "Microsoft.KeyVault/managedHsm/backup/status/action";
        private const string ReadHsmResetoreStatusValue = "Microsoft.KeyVault/managedHsm/restore/status/action";

        /// <summary> Read HSM key. </summary>
        public static DeniedDataActions ReadHsmKey { get; } = new DeniedDataActions(ReadHsmKeyValue);
        /// <summary> Create or update HSM key. </summary>
        public static DeniedDataActions WriteHsmKey { get; } = new DeniedDataActions(WriteHsmKeyValue);
        /// <summary> Read deleted HSM key. </summary>
        public static DeniedDataActions ReadDeleteHsmKey { get; } = new DeniedDataActions(ReadDeleteHsmKeyValue);
        /// <summary> Recover deleted HSM key. </summary>
        public static DeniedDataActions RecoverDeletedHsmKey { get; } = new DeniedDataActions(RecoverDeletedHsmKeyValue);
        /// <summary> Backup HSM keys. </summary>
        public static DeniedDataActions BackupHsmKeys { get; } = new DeniedDataActions(BackupHsmKeysValue);
        /// <summary> Restore HSM keys. </summary>
        public static DeniedDataActions RestoreHsmKey { get; } = new DeniedDataActions(RestoreHsmKeyValue);
        /// <summary> Delete role assignment. </summary>
        public static DeniedDataActions DeleteRoleAssignment { get; } = new DeniedDataActions(DeleteRoleAssignmentValue);
        /// <summary> Get role assignment. </summary>
        public static DeniedDataActions GetRoleRoleAssignment { get; } = new DeniedDataActions(GetRoleRoleAssignmentValue);
        /// <summary> Create or update role assignment. </summary>
        public static DeniedDataActions WriteRoleAssignment { get; } = new DeniedDataActions(WriteRoleAssignmentValue);
        /// <summary> Get role definition. </summary>
        public static DeniedDataActions ReadRoleDefinition { get; } = new DeniedDataActions(ReadRoleDefinitionValue);
        /// <summary> Encrypt HSM keys. </summary>
        public static DeniedDataActions EncryptHsmKeys { get; } = new DeniedDataActions(EncryptHsmKeysValue);
        /// <summary> Decrypt HSM keys. </summary>
        public static DeniedDataActions DecryptHsmKeys { get; } = new DeniedDataActions(DecryptHsmKeysValue);
        /// <summary> Wrap HSM keys. </summary>
        public static DeniedDataActions WrapHsmKeys { get; } = new DeniedDataActions(WrapHsmKeysValue);
        /// <summary> Unwrap HSM keys. </summary>
        public static DeniedDataActions UnwrapHsmKeys { get; } = new DeniedDataActions(UnwrapHsmKeysValue);
        /// <summary> Sign HSM keys. </summary>
        public static DeniedDataActions SignHsmKeys { get; } = new DeniedDataActions(SignHsmKeysValue);
        /// <summary> Verify HSM keys. </summary>
        public static DeniedDataActions VerifyHsmKeys { get; } = new DeniedDataActions(VerifyHsmKeysValue);
        /// <summary> Create HSM key. </summary>
        public static DeniedDataActions CreateHsmKey { get; } = new DeniedDataActions(CreateHsmKeyValue);
        /// <summary> Delete HSM key. </summary>
        public static DeniedDataActions DeleteHsmKey { get; } = new DeniedDataActions(DeleteHsmKeyValue);
        /// <summary> Export HSM key. </summary>
        public static DeniedDataActions ExportHsmKey { get; } = new DeniedDataActions(ExportHsmKeyValue);
        /// <summary> Import HSM key. </summary>
        public static DeniedDataActions ImportHsmKey { get; } = new DeniedDataActions(ImportHsmKeyValue);
        /// <summary> Purge deleted HSM key. </summary>
        public static DeniedDataActions PurgeDeletedHsmKey { get; } = new DeniedDataActions(PurgeDeletedHsmKeyValue);
        /// <summary> Download HSM security domain. </summary>
        public static DeniedDataActions DownloadHsmSecurityDomain { get; } = new DeniedDataActions(DownloadHsmSecurityDomainValue);
        /// <summary> Upload HSM security domain. </summary>
        public static DeniedDataActions UploadHsmSecurityDomain { get; } = new DeniedDataActions(UploadHsmSecurityDomainValue);
        /// <summary> Check the status of the HSM security domain exchange file. </summary>
        public static DeniedDataActions ReadHsmSecurityDomainStatus { get; } = new DeniedDataActions(ReadHsmSecurityDomainStatusValue);
        /// <summary> Download HSM security domain transfer key. </summary>
        public static DeniedDataActions ReadHsmSecurityDomainTransferKey { get; } = new DeniedDataActions(ReadHsmSecurityDomainTransferKeyValue);
        /// <summary> Start HSM backup. </summary>
        public static DeniedDataActions StartHsmBackup { get; } = new DeniedDataActions(StartHsmBackupValue);
        /// <summary> Start HSM restore. </summary>
        public static DeniedDataActions StartHsmRestore { get; } = new DeniedDataActions(StartHsmRestoreValue);
        /// <summary> Read HSM backup status. </summary>
        public static DeniedDataActions ReadHsmBackupStatus { get; } = new DeniedDataActions(ReadHsmBackupStatusValue);
        /// <summary> Read HSM restore status. </summary>
        public static DeniedDataActions ReadHsmResetoreStatus { get; } = new DeniedDataActions(ReadHsmResetoreStatusValue);
        /// <summary> Determines if two <see cref="DeniedDataActions"/> values are the same. </summary>
        public static bool operator ==(DeniedDataActions left, DeniedDataActions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeniedDataActions"/> values are not the same. </summary>
        public static bool operator !=(DeniedDataActions left, DeniedDataActions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeniedDataActions"/>. </summary>
        public static implicit operator DeniedDataActions(string value) => new DeniedDataActions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeniedDataActions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeniedDataActions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
