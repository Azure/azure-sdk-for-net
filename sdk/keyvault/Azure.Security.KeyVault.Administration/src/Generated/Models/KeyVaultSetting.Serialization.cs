// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.Security.KeyVault.Administration
{
    public partial class KeyVaultSetting : IUtf8JsonSerializable, IJsonModel<KeyVaultSetting>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<KeyVaultSetting>)this).Write(writer, new ModelReaderWriterOptions("W"));

        KeyVaultSetting IJsonModel<KeyVaultSetting>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KeyVaultSetting>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(KeyVaultSetting)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeKeyVaultSetting(document.RootElement, options);
        }

        BinaryData IPersistableModel<KeyVaultSetting>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KeyVaultSetting>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new InvalidOperationException($"The model {nameof(KeyVaultSetting)} does not support '{options.Format}' format.");
            }
        }

        KeyVaultSetting IPersistableModel<KeyVaultSetting>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KeyVaultSetting>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeKeyVaultSetting(document.RootElement, options);
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(KeyVaultSetting)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<KeyVaultSetting>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
