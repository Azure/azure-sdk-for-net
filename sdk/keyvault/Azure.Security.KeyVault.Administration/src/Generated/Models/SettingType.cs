// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Security.KeyVault.Administration
{
    /// <summary> The type specifier of the value. </summary>
    public readonly partial struct SettingType : IEquatable<SettingType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SettingType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SettingType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BooleanValue = "boolean";

        /// <summary> boolean. </summary>
        public static SettingType Boolean { get; } = new SettingType(BooleanValue);
        /// <summary> Determines if two <see cref="SettingType"/> values are the same. </summary>
        public static bool operator ==(SettingType left, SettingType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SettingType"/> values are not the same. </summary>
        public static bool operator !=(SettingType left, SettingType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SettingType"/>. </summary>
        public static implicit operator SettingType(string value) => new SettingType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SettingType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SettingType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
