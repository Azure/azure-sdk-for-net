<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="DeleteAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

Response<KeyVaultRoleDefinition> response = await client.DeleteAsync("/", "00000000-0000-0000-0000-000000000000");
]]></code></example>
    </member>
    <member name="Delete(string,string,CancellationToken)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

Response<KeyVaultRoleDefinition> response = client.Delete("/", "00000000-0000-0000-0000-000000000000");
]]></code></example>
    </member>
    <member name="DeleteAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

Response response = await client.DeleteAsync("/", "00000000-0000-0000-0000-000000000000", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="Delete(string,string,RequestContext)">
      <example>
This sample shows how to call Delete and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

Response response = client.Delete("/", "00000000-0000-0000-0000-000000000000", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,string,RoleDefinitionCreateParameters,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties
{
    RoleName = "My custom role",
    Description = "Role description",
    RoleType = Models.KeyVaultRoleType.CustomRole,
    Permissions = {new Models.KeyVaultPermission
    {
        DataActions = {Models.KeyVaultDataAction.SignHsmKey},
    }},
});
Response<KeyVaultRoleDefinition> response = await client.CreateOrUpdateAsync("keys", "00000000-0000-0000-0000-000000000000", parameters);
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,string,RoleDefinitionCreateParameters,CancellationToken)">
      <example>
This sample shows how to call CreateOrUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties
{
    RoleName = "My custom role",
    Description = "Role description",
    RoleType = Models.KeyVaultRoleType.CustomRole,
    Permissions = {new Models.KeyVaultPermission
    {
        DataActions = {Models.KeyVaultDataAction.SignHsmKey},
    }},
});
Response<KeyVaultRoleDefinition> response = client.CreateOrUpdate("keys", "00000000-0000-0000-0000-000000000000", parameters);
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        roleName = "My custom role",
        type = "CustomRole",
        description = "Role description",
        permissions = new object[]
        {
            new
            {
                dataActions = new object[]
                {
                    "Microsoft.KeyVault/managedHsm/keys/sign/action"
                },
            }
        },
    },
});
Response response = await client.CreateOrUpdateAsync("keys", "00000000-0000-0000-0000-000000000000", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        roleName = "My custom role",
        type = "CustomRole",
        description = "Role description",
        permissions = new object[]
        {
            new
            {
                dataActions = new object[]
                {
                    "Microsoft.KeyVault/managedHsm/keys/sign/action"
                },
            }
        },
    },
});
Response response = client.CreateOrUpdate("keys", "00000000-0000-0000-0000-000000000000", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsRestClientAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleDefinitionsRestClientAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

Response<KeyVaultRoleDefinition> response = await client.GetRoleDefinitionsRestClientAsync("/", "00000000-0000-0000-0000-000000000000");
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsRestClient(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleDefinitionsRestClient.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

Response<KeyVaultRoleDefinition> response = client.GetRoleDefinitionsRestClient("/", "00000000-0000-0000-0000-000000000000");
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsRestClientAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetRoleDefinitionsRestClientAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

Response response = await client.GetRoleDefinitionsRestClientAsync("/", "00000000-0000-0000-0000-000000000000", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsRestClient(string,string,RequestContext)">
      <example>
This sample shows how to call GetRoleDefinitionsRestClient and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

Response response = client.GetRoleDefinitionsRestClient("/", "00000000-0000-0000-0000-000000000000", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsRestClientsAsync(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleDefinitionsRestClientsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

await foreach (KeyVaultRoleDefinition item in client.GetRoleDefinitionsRestClientsAsync("keys"))
{
}
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsRestClients(string,string,CancellationToken)">
      <example>
This sample shows how to call GetRoleDefinitionsRestClients.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

foreach (KeyVaultRoleDefinition item in client.GetRoleDefinitionsRestClients("keys"))
{
}
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsRestClientsAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetRoleDefinitionsRestClientsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

await foreach (BinaryData item in client.GetRoleDefinitionsRestClientsAsync("keys", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
    <member name="GetRoleDefinitionsRestClients(string,string,RequestContext)">
      <example>
This sample shows how to call GetRoleDefinitionsRestClients and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

foreach (BinaryData item in client.GetRoleDefinitionsRestClients("keys", null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
    </member>
  </members>
</doc>