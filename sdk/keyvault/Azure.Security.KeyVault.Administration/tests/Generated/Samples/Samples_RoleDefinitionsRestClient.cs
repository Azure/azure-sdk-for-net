// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.Security.KeyVault.Administration.Models;
using NUnit.Framework;

namespace Azure.Security.KeyVault.Administration.Samples
{
    public partial class Samples_RoleDefinitionsRestClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_Delete_DeleteACustomRoleDefinition()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = client.Delete("/", "00000000-0000-0000-0000-000000000000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_Delete_DeleteACustomRoleDefinition_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = await client.DeleteAsync("/", "00000000-0000-0000-0000-000000000000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_Delete_DeleteACustomRoleDefinition_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<KeyVaultRoleDefinition> response = client.Delete("/", "00000000-0000-0000-0000-000000000000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_Delete_DeleteACustomRoleDefinition_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<KeyVaultRoleDefinition> response = await client.DeleteAsync("/", "00000000-0000-0000-0000-000000000000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_CreateOrUpdate_CreateOrUpdateACustomRoleDefinition()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    roleName = "My custom role",
                    type = "CustomRole",
                    description = "Role description",
                    permissions = new object[]
            {
new
{
dataActions = new object[]
{
"Microsoft.KeyVault/managedHsm/keys/sign/action"
},
}
            },
                },
            });
            Response response = client.CreateOrUpdate("keys", "00000000-0000-0000-0000-000000000000", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_CreateOrUpdate_CreateOrUpdateACustomRoleDefinition_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                properties = new
                {
                    roleName = "My custom role",
                    type = "CustomRole",
                    description = "Role description",
                    permissions = new object[]
            {
new
{
dataActions = new object[]
{
"Microsoft.KeyVault/managedHsm/keys/sign/action"
},
}
            },
                },
            });
            Response response = await client.CreateOrUpdateAsync("keys", "00000000-0000-0000-0000-000000000000", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_CreateOrUpdate_CreateOrUpdateACustomRoleDefinition_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties
            {
                RoleName = "My custom role",
                Description = "Role description",
                RoleType = Models.KeyVaultRoleType.CustomRole,
                Permissions = {new Models.KeyVaultPermission
{
DataActions = {Models.KeyVaultDataAction.SignHsmKey},
}},
            });
            Response<KeyVaultRoleDefinition> response = client.CreateOrUpdate("keys", "00000000-0000-0000-0000-000000000000", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_CreateOrUpdate_CreateOrUpdateACustomRoleDefinition_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            RoleDefinitionCreateParameters parameters = new RoleDefinitionCreateParameters(new RoleDefinitionProperties
            {
                RoleName = "My custom role",
                Description = "Role description",
                RoleType = Models.KeyVaultRoleType.CustomRole,
                Permissions = {new Models.KeyVaultPermission
{
DataActions = {Models.KeyVaultDataAction.SignHsmKey},
}},
            });
            Response<KeyVaultRoleDefinition> response = await client.CreateOrUpdateAsync("keys", "00000000-0000-0000-0000-000000000000", parameters);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_GetTheSpecifiedRoleDefinition()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = client.GetRoleDefinitionsRestClient("/", "00000000-0000-0000-0000-000000000000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_GetTheSpecifiedRoleDefinition_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response response = await client.GetRoleDefinitionsRestClientAsync("/", "00000000-0000-0000-0000-000000000000", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_GetTheSpecifiedRoleDefinition_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<KeyVaultRoleDefinition> response = client.GetRoleDefinitionsRestClient("/", "00000000-0000-0000-0000-000000000000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClient_GetTheSpecifiedRoleDefinition_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            Response<KeyVaultRoleDefinition> response = await client.GetRoleDefinitionsRestClientAsync("/", "00000000-0000-0000-0000-000000000000");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_GetAllRoleDefinitionsThatAreApplicableAtScopeAndAbove()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            foreach (BinaryData item in client.GetRoleDefinitionsRestClients("keys", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_GetAllRoleDefinitionsThatAreApplicableAtScopeAndAbove_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            await foreach (BinaryData item in client.GetRoleDefinitionsRestClientsAsync("keys", null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_GetAllRoleDefinitionsThatAreApplicableAtScopeAndAbove_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            foreach (KeyVaultRoleDefinition item in client.GetRoleDefinitionsRestClients("keys"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RoleDefinitionsRestClient_GetRoleDefinitionsRestClients_GetAllRoleDefinitionsThatAreApplicableAtScopeAndAbove_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            RoleDefinitionsRestClient client = new RoleDefinitionsRestClient(endpoint, credential);

            await foreach (KeyVaultRoleDefinition item in client.GetRoleDefinitionsRestClientsAsync("keys"))
            {
            }
        }
    }
}
