// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.KeyVault
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KeyVaultClient.
    /// </summary>
    public static partial class KeyVaultClientExtensions
    {
            /// <summary>
            /// Creates a new key, stores it, then returns key parameters and attributes to
            /// the client.
            /// </summary>
            /// <remarks>
            /// The create key operation can be used to create any key type in Azure Key
            /// Vault. If the named key already exists, Azure Key Vault creates a new
            /// version of the key. It requires the keys/create permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name for the new key. The system will generate the version name for the
            /// new key.
            /// </param>
            /// <param name='kty'>
            /// The type of key to create. For valid values, see Microsoft.Azure.KeyVault.WebKey.JsonWebKeyType. Possible
            /// values include: 'EC', 'EC-HSM', 'RSA', 'RSA-HSM', 'oct'
            /// </param>
            /// <param name='keySize'>
            /// The key size in bits. For example: 2048, 3072, or 4096 for RSA.
            /// </param>
            /// <param name='keyOps'>
            /// </param>
            /// <param name='keyAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='curve'>
            /// Elliptic curve name. For valid values, see Microsoft.Azure.KeyVault.WebKey.JsonWebKeyCurveName. Possible
            /// values include: 'P-256', 'P-384', 'P-521', 'P-256K'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> CreateKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string kty, int? keySize = default(int?), IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), string curve = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, kty, keySize, keyOps, keyAttributes, tags, curve, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imports an externally created key, stores it, and returns key parameters
            /// and attributes to the client.
            /// </summary>
            /// <remarks>
            /// The import key operation may be used to import any key type into an Azure
            /// Key Vault. If the named key already exists, Azure Key Vault creates a new
            /// version of the key. This operation requires the keys/import permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// Name for the imported key.
            /// </param>
            /// <param name='key'>
            /// The Json web key
            /// </param>
            /// <param name='hsm'>
            /// Whether to import as a hardware key (HSM) or software key.
            /// </param>
            /// <param name='keyAttributes'>
            /// The key management attributes.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> ImportKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, Microsoft.Azure.KeyVault.WebKey.JsonWebKey key, bool? hsm = default(bool?), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, key, hsm, keyAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a key of any type from storage in Azure Key Vault.
            /// </summary>
            /// <remarks>
            /// The delete key operation cannot be used to remove individual versions of a
            /// key. This operation removes the cryptographic material associated with the
            /// key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or
            /// Encrypt/Decrypt operations. This operation requires the keys/delete
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedKeyBundle> DeleteKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The update key operation changes specified attributes of a stored key and
            /// can be applied to any key type and key version stored in Azure Key Vault.
            /// </summary>
            /// <remarks>
            /// In order to perform this operation, the key must already exist in the Key
            /// Vault. Note: The cryptographic material of a key itself cannot be changed.
            /// This operation requires the keys/update permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of key to update.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key to update.
            /// </param>
            /// <param name='keyOps'>
            /// Json web key operations. For more information on possible key operations,
            /// see Microsoft.Azure.KeyVault.WebKey.JsonWebKeyOperation.
            /// </param>
            /// <param name='keyAttributes'>
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> UpdateKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, IList<string> keyOps = default(IList<string>), KeyAttributes keyAttributes = default(KeyAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, keyOps, keyAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the public part of a stored key.
            /// </summary>
            /// <remarks>
            /// The get key operation is applicable to all key types. If the requested key
            /// is symmetric, then no key material is released in the response. This
            /// operation requires the keys/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key to get.
            /// </param>
            /// <param name='keyVersion'>
            /// Adding the version parameter retrieves a specific version of a key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> GetKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of individual key versions with the same key name.
            /// </summary>
            /// <remarks>
            /// The full key identifier, attributes, and tags are provided in the response.
            /// This operation requires the keys/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeyVersionsAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyVersionsWithHttpMessagesAsync(vaultBaseUrl, keyName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys in the specified vault.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures
            /// that contain the public part of a stored key. The LIST operation is
            /// applicable to all key types, however only the base key identifier,
            /// attributes, and tags are provided in the response. Individual versions of a
            /// key are not listed in the response. This operation requires the keys/list
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeysAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requests that a backup of the specified key be downloaded to the client.
            /// </summary>
            /// <remarks>
            /// The Key Backup operation exports a key from Azure Key Vault in a protected
            /// form. Note that this operation does NOT return key material in a form that
            /// can be used outside the Azure Key Vault system, the returned key material
            /// is either protected to a Azure Key Vault HSM or to Azure Key Vault itself.
            /// The intent of this operation is to allow a client to GENERATE a key in one
            /// Azure Key Vault instance, BACKUP the key, and then RESTORE it into another
            /// Azure Key Vault instance. The BACKUP operation may be used to export, in
            /// protected form, any key type from Azure Key Vault. Individual versions of a
            /// key cannot be backed up. BACKUP / RESTORE can be performed within
            /// geographical boundaries only; meaning that a BACKUP from one geographical
            /// area cannot be restored to another geographical area. For example, a backup
            /// from the US geographical area cannot be restored in an EU geographical
            /// area. This operation requires the key/backup permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupKeyResult> BackupKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a backed up key to a vault.
            /// </summary>
            /// <remarks>
            /// Imports a previously backed up key into Azure Key Vault, restoring the key,
            /// its key identifier, attributes and access control policies. The RESTORE
            /// operation may be used to import a previously backed up key. Individual
            /// versions of a key cannot be restored. The key is restored in its entirety
            /// with the same key name as it had when it was backed up. If the key name is
            /// not available in the target Key Vault, the RESTORE operation will be
            /// rejected. While the key name is retained during restore, the final key
            /// identifier will change if the key is restored to a different vault. Restore
            /// will restore all versions and preserve version identifiers. The RESTORE
            /// operation is subject to security constraints: The target Key Vault must be
            /// owned by the same Microsoft Azure Subscription as the source Key Vault The
            /// user must have RESTORE permission in the target Key Vault. This operation
            /// requires the keys/restore permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyBundleBackup'>
            /// The backup blob associated with a key bundle.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> RestoreKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, byte[] keyBundleBackup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreKeyWithHttpMessagesAsync(vaultBaseUrl, keyBundleBackup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Encrypts an arbitrary sequence of bytes using an encryption key that is
            /// stored in a key vault.
            /// </summary>
            /// <remarks>
            /// The ENCRYPT operation encrypts an arbitrary sequence of bytes using an
            /// encryption key that is stored in Azure Key Vault. Note that the ENCRYPT
            /// operation only supports a single block of data, the size of which is
            /// dependent on the target key and the encryption algorithm to be used. The
            /// ENCRYPT operation is only strictly necessary for symmetric keys stored in
            /// Azure Key Vault since protection with an asymmetric key can be performed
            /// using public portion of the key. This operation is supported for asymmetric
            /// keys as a convenience for callers that have a key-reference but do not have
            /// access to the public key material. This operation requires the keys/encypt
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
            /// 'RSA1_5'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> EncryptAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EncryptWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Decrypts a single block of encrypted data.
            /// </summary>
            /// <remarks>
            /// The DECRYPT operation decrypts a well-formed block of ciphertext using the
            /// target encryption key and specified algorithm. This operation is the
            /// reverse of the ENCRYPT operation; only a single block of data may be
            /// decrypted, the size of this block is dependent on the target key and the
            /// algorithm to be used. The DECRYPT operation applies to asymmetric and
            /// symmetric keys stored in Azure Key Vault since it uses the private portion
            /// of the key. This operation requires the keys/decrypt permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
            /// 'RSA1_5'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> DecryptAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DecryptWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a signature from a digest using the specified key.
            /// </summary>
            /// <remarks>
            /// The SIGN operation is applicable to asymmetric and symmetric keys stored in
            /// Azure Key Vault since this operation uses the private portion of the key.
            /// This operation requires the keys/sign permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// The signing/verification algorithm identifier. For more information on
            /// possible algorithm types, see Microsoft.Azure.KeyVault.WebKey.JsonWebKeySignatureAlgorithm. Possible values
            /// include: 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL',
            /// 'ES256', 'ES384', 'ES512', 'ES256K'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> SignAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SignWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verifies a signature using a specified key.
            /// </summary>
            /// <remarks>
            /// The VERIFY operation is applicable to symmetric keys stored in Azure Key
            /// Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure
            /// Key Vault since signature verification can be performed using the public
            /// portion of the key but this operation is supported as a convenience for
            /// callers that only have a key-reference and not the public portion of the
            /// key. This operation requires the keys/verify permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// The signing/verification algorithm. For more information on possible
            /// algorithm types, see Microsoft.Azure.KeyVault.WebKey.JsonWebKeySignatureAlgorithm. Possible values include:
            /// 'PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512', 'RSNULL', 'ES256',
            /// 'ES384', 'ES512', 'ES256K'
            /// </param>
            /// <param name='digest'>
            /// The digest used for signing.
            /// </param>
            /// <param name='signature'>
            /// The signature to be verified.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyVerifyResult> VerifyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] digest, byte[] signature, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, digest, signature, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Wraps a symmetric key using a specified key.
            /// </summary>
            /// <remarks>
            /// The WRAP operation supports encryption of a symmetric key using a key
            /// encryption key that has previously been stored in an Azure Key Vault. The
            /// WRAP operation is only strictly necessary for symmetric keys stored in
            /// Azure Key Vault since protection with an asymmetric key can be performed
            /// using the public portion of the key. This operation is supported for
            /// asymmetric keys as a convenience for callers that have a key-reference but
            /// do not have access to the public key material. This operation requires the
            /// keys/wrapKey permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
            /// 'RSA1_5'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> WrapKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WrapKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Unwraps a symmetric key using the specified key that was initially used for
            /// wrapping that key.
            /// </summary>
            /// <remarks>
            /// The UNWRAP operation supports decryption of a symmetric key using the
            /// target key encryption key. This operation is the reverse of the WRAP
            /// operation. The UNWRAP operation applies to asymmetric and symmetric keys
            /// stored in Azure Key Vault since it uses the private portion of the key.
            /// This operation requires the keys/unwrapKey permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key.
            /// </param>
            /// <param name='algorithm'>
            /// algorithm identifier. Possible values include: 'RSA-OAEP', 'RSA-OAEP-256',
            /// 'RSA1_5'
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyOperationResult> UnwrapKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, string keyVersion, string algorithm, byte[] value, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnwrapKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the deleted keys in the specified vault.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures
            /// that contain the public part of a deleted key. This operation includes
            /// deletion-specific information. The Get Deleted Keys operation is applicable
            /// for vaults enabled for soft-delete. While the operation can be invoked on
            /// any vault, it will return an error if invoked on a non soft-delete enabled
            /// vault. This operation requires the keys/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedKeyItem>> GetDeletedKeysAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedKeysWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the public part of a deleted key.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Key operation is applicable for soft-delete enabled vaults.
            /// While the operation can be invoked on any vault, it will return an error if
            /// invoked on a non soft-delete enabled vault. This operation requires the
            /// keys/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedKeyBundle> GetDeletedKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Permanently deletes the specified key.
            /// </summary>
            /// <remarks>
            /// The Purge Deleted Key operation is applicable for soft-delete enabled
            /// vaults. While the operation can be invoked on any vault, it will return an
            /// error if invoked on a non soft-delete enabled vault. This operation
            /// requires the keys/purge permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeDeletedKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeDeletedKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Recovers the deleted key to its latest version.
            /// </summary>
            /// <remarks>
            /// The Recover Deleted Key operation is applicable for deleted keys in
            /// soft-delete enabled vaults. It recovers the deleted key back to its latest
            /// version under /keys. An attempt to recover an non-deleted key will return
            /// an error. Consider this the inverse of the delete operation on soft-delete
            /// enabled vaults. This operation requires the keys/recover permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='keyName'>
            /// The name of the deleted key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyBundle> RecoverDeletedKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverDeletedKeyWithHttpMessagesAsync(vaultBaseUrl, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets a secret in a specified key vault.
            /// </summary>
            /// <remarks>
            /// The SET operation adds a secret to the Azure Key Vault. If the named secret
            /// already exists, Azure Key Vault creates a new version of that secret. This
            /// operation requires the secrets/set permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='value'>
            /// The value of the secret.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='contentType'>
            /// Type of the secret value such as a password.
            /// </param>
            /// <param name='secretAttributes'>
            /// The secret management attributes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> SetSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, string value, IDictionary<string, string> tags = default(IDictionary<string, string>), string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, value, tags, contentType, secretAttributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a secret from a specified key vault.
            /// </summary>
            /// <remarks>
            /// The DELETE operation applies to any secret stored in Azure Key Vault.
            /// DELETE cannot be applied to an individual version of a secret. This
            /// operation requires the secrets/delete permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedSecretBundle> DeleteSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the attributes associated with a specified secret in a given key
            /// vault.
            /// </summary>
            /// <remarks>
            /// The UPDATE operation changes specified attributes of an existing stored
            /// secret. Attributes that are not specified in the request are left
            /// unchanged. The value of a secret itself cannot be changed. This operation
            /// requires the secrets/set permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='secretVersion'>
            /// The version of the secret.
            /// </param>
            /// <param name='contentType'>
            /// Type of the secret value such as a password.
            /// </param>
            /// <param name='secretAttributes'>
            /// The secret management attributes.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> UpdateSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, string secretVersion, string contentType = default(string), SecretAttributes secretAttributes = default(SecretAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, secretVersion, contentType, secretAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specified secret from a given key vault.
            /// </summary>
            /// <remarks>
            /// The GET operation is applicable to any secret stored in Azure Key Vault.
            /// This operation requires the secrets/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='secretVersion'>
            /// The version of the secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> GetSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, string secretVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, secretVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List secrets in a specified key vault.
            /// </summary>
            /// <remarks>
            /// The Get Secrets operation is applicable to the entire vault. However, only
            /// the base secret identifier and its attributes are provided in the response.
            /// Individual secret versions are not listed in the response. This operation
            /// requires the secrets/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified, the
            /// service will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretsAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretsWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all versions of the specified secret.
            /// </summary>
            /// <remarks>
            /// The full secret identifier and attributes are provided in the response. No
            /// values are returned for the secrets. This operations requires the
            /// secrets/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified, the
            /// service will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretVersionsAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretVersionsWithHttpMessagesAsync(vaultBaseUrl, secretName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists deleted secrets for the specified vault.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Secrets operation returns the secrets that have been
            /// deleted for a vault enabled for soft-delete. This operation requires the
            /// secrets/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedSecretItem>> GetDeletedSecretsAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedSecretsWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified deleted secret.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Secret operation returns the specified deleted secret along
            /// with its attributes. This operation requires the secrets/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedSecretBundle> GetDeletedSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Permanently deletes the specified secret.
            /// </summary>
            /// <remarks>
            /// The purge deleted secret operation removes the secret permanently, without
            /// the possibility of recovery. This operation can only be enabled on a
            /// soft-delete enabled vault. This operation requires the secrets/purge
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeDeletedSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeDeletedSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Recovers the deleted secret to the latest version.
            /// </summary>
            /// <remarks>
            /// Recovers the deleted secret in the specified vault. This operation can only
            /// be performed on a soft-delete enabled vault. This operation requires the
            /// secrets/recover permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the deleted secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> RecoverDeletedSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverDeletedSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Backs up the specified secret.
            /// </summary>
            /// <remarks>
            /// Requests that a backup of the specified secret be downloaded to the client.
            /// All versions of the secret will be downloaded. This operation requires the
            /// secrets/backup permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupSecretResult> BackupSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupSecretWithHttpMessagesAsync(vaultBaseUrl, secretName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a backed up secret to a vault.
            /// </summary>
            /// <remarks>
            /// Restores a backed up secret, and all its versions, to a vault. This
            /// operation requires the secrets/restore permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='secretBundleBackup'>
            /// The backup blob associated with a secret bundle.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecretBundle> RestoreSecretAsync(this IKeyVaultClient operations, string vaultBaseUrl, byte[] secretBundleBackup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreSecretWithHttpMessagesAsync(vaultBaseUrl, secretBundleBackup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificates in a specified key vault
            /// </summary>
            /// <remarks>
            /// The GetCertificates operation returns the set of certificates resources in
            /// the specified key vault. This operation requires the certificates/list
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='includePending'>
            /// Specifies whether to include certificates which are not completely
            /// provisioned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificatesAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), bool? includePending = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesWithHttpMessagesAsync(vaultBaseUrl, maxresults, includePending, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a certificate from a specified key vault.
            /// </summary>
            /// <remarks>
            /// Deletes all versions of a certificate object along with its associated
            /// policy. Delete certificate cannot be used to remove individual versions of
            /// a certificate object. This operation requires the certificates/delete
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedCertificateBundle> DeleteCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the certificate contacts for the specified key vault.
            /// </summary>
            /// <remarks>
            /// Sets the certificate contacts for the specified key vault. This operation
            /// requires the certificates/managecontacts permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='contacts'>
            /// The contacts for the key vault certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> SetCertificateContactsAsync(this IKeyVaultClient operations, string vaultBaseUrl, Contacts contacts, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCertificateContactsWithHttpMessagesAsync(vaultBaseUrl, contacts, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the certificate contacts for a specified key vault.
            /// </summary>
            /// <remarks>
            /// The GetCertificateContacts operation returns the set of certificate contact
            /// resources in the specified key vault. This operation requires the
            /// certificates/managecontacts permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> GetCertificateContactsAsync(this IKeyVaultClient operations, string vaultBaseUrl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateContactsWithHttpMessagesAsync(vaultBaseUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the certificate contacts for a specified key vault.
            /// </summary>
            /// <remarks>
            /// Deletes the certificate contacts for a specified key vault certificate.
            /// This operation requires the certificates/managecontacts permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Contacts> DeleteCertificateContactsAsync(this IKeyVaultClient operations, string vaultBaseUrl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateContactsWithHttpMessagesAsync(vaultBaseUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificate issuers for a specified key vault.
            /// </summary>
            /// <remarks>
            /// The GetCertificateIssuers operation returns the set of certificate issuer
            /// resources in the specified key vault. This operation requires the
            /// certificates/manageissuers/getissuers permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateIssuerItem>> GetCertificateIssuersAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuersWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the specified certificate issuer.
            /// </summary>
            /// <remarks>
            /// The SetCertificateIssuer operation adds or updates the specified
            /// certificate issuer. This operation requires the certificates/setissuers
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='provider'>
            /// The issuer provider.
            /// </param>
            /// <param name='credentials'>
            /// The credentials to be used for the issuer.
            /// </param>
            /// <param name='organizationDetails'>
            /// Details of the organization as provided to the issuer.
            /// </param>
            /// <param name='attributes'>
            /// Attributes of the issuer object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> SetCertificateIssuerAsync(this IKeyVaultClient operations, string vaultBaseUrl, string issuerName, string provider, IssuerCredentials credentials = default(IssuerCredentials), OrganizationDetails organizationDetails = default(OrganizationDetails), IssuerAttributes attributes = default(IssuerAttributes), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCertificateIssuerWithHttpMessagesAsync(vaultBaseUrl, issuerName, provider, credentials, organizationDetails, attributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified certificate issuer.
            /// </summary>
            /// <remarks>
            /// The UpdateCertificateIssuer operation performs an update on the specified
            /// certificate issuer entity. This operation requires the
            /// certificates/setissuers permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='provider'>
            /// The issuer provider.
            /// </param>
            /// <param name='credentials'>
            /// The credentials to be used for the issuer.
            /// </param>
            /// <param name='organizationDetails'>
            /// Details of the organization as provided to the issuer.
            /// </param>
            /// <param name='attributes'>
            /// Attributes of the issuer object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> UpdateCertificateIssuerAsync(this IKeyVaultClient operations, string vaultBaseUrl, string issuerName, string provider = default(string), IssuerCredentials credentials = default(IssuerCredentials), OrganizationDetails organizationDetails = default(OrganizationDetails), IssuerAttributes attributes = default(IssuerAttributes), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateIssuerWithHttpMessagesAsync(vaultBaseUrl, issuerName, provider, credentials, organizationDetails, attributes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the specified certificate issuer.
            /// </summary>
            /// <remarks>
            /// The GetCertificateIssuer operation returns the specified certificate issuer
            /// resources in the specified key vault. This operation requires the
            /// certificates/manageissuers/getissuers permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> GetCertificateIssuerAsync(this IKeyVaultClient operations, string vaultBaseUrl, string issuerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuerWithHttpMessagesAsync(vaultBaseUrl, issuerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified certificate issuer.
            /// </summary>
            /// <remarks>
            /// The DeleteCertificateIssuer operation permanently removes the specified
            /// certificate issuer from the vault. This operation requires the
            /// certificates/manageissuers/deleteissuers permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='issuerName'>
            /// The name of the issuer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IssuerBundle> DeleteCertificateIssuerAsync(this IKeyVaultClient operations, string vaultBaseUrl, string issuerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateIssuerWithHttpMessagesAsync(vaultBaseUrl, issuerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new certificate.
            /// </summary>
            /// <remarks>
            /// If this is the first version, the certificate resource is created. This
            /// operation requires the certificates/create permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate.
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional).
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> CreateCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, certificatePolicy, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Imports a certificate into a specified key vault.
            /// </summary>
            /// <remarks>
            /// Imports an existing valid certificate, containing a private key, into Azure
            /// Key Vault. The certificate to be imported can be in either PFX or PEM
            /// format. If the certificate is in PEM format the PEM file must contain the
            /// key as well as x509 certificates. This operation requires the
            /// certificates/import permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='base64EncodedCertificate'>
            /// Base64 encoded representation of the certificate object to import. This
            /// certificate needs to contain the private key.
            /// </param>
            /// <param name='password'>
            /// If the private key in base64EncodedCertificate is encrypted, the password
            /// used for encryption.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate.
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional).
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> ImportCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, string base64EncodedCertificate, string password = default(string), CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, base64EncodedCertificate, password, certificatePolicy, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of a certificate.
            /// </summary>
            /// <remarks>
            /// The GetCertificateVersions operation returns the versions of a certificate
            /// in the specified key vault. This operation requires the certificates/list
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificateVersionsAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateVersionsWithHttpMessagesAsync(vaultBaseUrl, certificateName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the policy for a certificate.
            /// </summary>
            /// <remarks>
            /// The GetCertificatePolicy operation returns the specified certificate policy
            /// resources in the specified key vault. This operation requires the
            /// certificates/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in a given key vault.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificatePolicy> GetCertificatePolicyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatePolicyWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the policy for a certificate.
            /// </summary>
            /// <remarks>
            /// Set specified members in the certificate policy. Leave others as null. This
            /// operation requires the certificates/update permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The policy for the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificatePolicy> UpdateCertificatePolicyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CertificatePolicy certificatePolicy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificatePolicyWithHttpMessagesAsync(vaultBaseUrl, certificateName, certificatePolicy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified attributes associated with the given certificate.
            /// </summary>
            /// <remarks>
            /// The UpdateCertificate operation applies the specified update on the given
            /// certificate; the only elements updated are the certificate's attributes.
            /// This operation requires the certificates/update permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given key vault.
            /// </param>
            /// <param name='certificateVersion'>
            /// The version of the certificate.
            /// </param>
            /// <param name='certificatePolicy'>
            /// The management policy for the certificate.
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional).
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> UpdateCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, string certificateVersion, CertificatePolicy certificatePolicy = default(CertificatePolicy), CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, certificateVersion, certificatePolicy, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a certificate.
            /// </summary>
            /// <remarks>
            /// Gets information about a specific certificate. This operation requires the
            /// certificates/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate in the given vault.
            /// </param>
            /// <param name='certificateVersion'>
            /// The version of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> GetCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, string certificateVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, certificateVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a certificate operation.
            /// </summary>
            /// <remarks>
            /// Updates a certificate creation operation that is already in progress. This
            /// operation requires the certificates/update permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationRequested'>
            /// Indicates if cancellation was requested on the certificate operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> UpdateCertificateOperationAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, bool cancellationRequested, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateOperationWithHttpMessagesAsync(vaultBaseUrl, certificateName, cancellationRequested, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the creation operation of a certificate.
            /// </summary>
            /// <remarks>
            /// Gets the creation operation associated with a specified certificate. This
            /// operation requires the certificates/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> GetCertificateOperationAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateOperationWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the creation operation for a specific certificate.
            /// </summary>
            /// <remarks>
            /// Deletes the creation operation for a specified certificate that is in the
            /// process of being created. The certificate is no longer created. This
            /// operation requires the certificates/update permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOperation> DeleteCertificateOperationAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateOperationWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Merges a certificate or a certificate chain with a key pair existing on the
            /// server.
            /// </summary>
            /// <remarks>
            /// The MergeCertificate operation performs the merging of a certificate or
            /// certificate chain with a key pair currently available in the service. This
            /// operation requires the certificates/create permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='x509Certificates'>
            /// The certificate or the certificate chain to merge.
            /// </param>
            /// <param name='certificateAttributes'>
            /// The attributes of the certificate (optional).
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> MergeCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, IList<byte[]> x509Certificates, CertificateAttributes certificateAttributes = default(CertificateAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MergeCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, x509Certificates, certificateAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Backs up the specified certificate.
            /// </summary>
            /// <remarks>
            /// Requests that a backup of the specified certificate be downloaded to the
            /// client. All versions of the certificate will be downloaded. This operation
            /// requires the certificates/backup permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupCertificateResult> BackupCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a backed up certificate to a vault.
            /// </summary>
            /// <remarks>
            /// Restores a backed up certificate, and all its versions, to a vault. This
            /// operation requires the certificates/restore permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateBundleBackup'>
            /// The backup blob associated with a certificate bundle.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> RestoreCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, byte[] certificateBundleBackup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateBundleBackup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the deleted certificates in the specified vault currently available
            /// for recovery.
            /// </summary>
            /// <remarks>
            /// The GetDeletedCertificates operation retrieves the certificates in the
            /// current vault which are in a deleted state and ready for recovery or
            /// purging. This operation includes deletion-specific information. This
            /// operation requires the certificates/get/list permission. This operation can
            /// only be enabled on soft-delete enabled vaults.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='includePending'>
            /// Specifies whether to include certificates which are not completely
            /// provisioned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedCertificateItem>> GetDeletedCertificatesAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), bool? includePending = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedCertificatesWithHttpMessagesAsync(vaultBaseUrl, maxresults, includePending, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves information about the specified deleted certificate.
            /// </summary>
            /// <remarks>
            /// The GetDeletedCertificate operation retrieves the deleted certificate
            /// information plus its attributes, such as retention interval, scheduled
            /// permanent deletion and the current deletion recovery level. This operation
            /// requires the certificates/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedCertificateBundle> GetDeletedCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Permanently deletes the specified deleted certificate.
            /// </summary>
            /// <remarks>
            /// The PurgeDeletedCertificate operation performs an irreversible deletion of
            /// the specified certificate, without possibility for recovery. The operation
            /// is not available if the recovery level does not specify 'Purgeable'. This
            /// operation requires the certificate/purge permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeDeletedCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeDeletedCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Recovers the deleted certificate back to its current version under
            /// /certificates.
            /// </summary>
            /// <remarks>
            /// The RecoverDeletedCertificate operation performs the reversal of the Delete
            /// operation. The operation is applicable in vaults enabled for soft-delete,
            /// and must be issued during the retention interval (available in the deleted
            /// certificate's attributes). This operation requires the certificates/recover
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='certificateName'>
            /// The name of the deleted certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateBundle> RecoverDeletedCertificateAsync(this IKeyVaultClient operations, string vaultBaseUrl, string certificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverDeletedCertificateWithHttpMessagesAsync(vaultBaseUrl, certificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List storage accounts managed by the specified key vault. This operation
            /// requires the storage/list permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageAccountItem>> GetStorageAccountsAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageAccountsWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists deleted storage accounts for the specified vault.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Storage Accounts operation returns the storage accounts
            /// that have been deleted for a vault enabled for soft-delete. This operation
            /// requires the storage/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedStorageAccountItem>> GetDeletedStorageAccountsAsync(this IKeyVaultClient operations, string vaultBaseUrl, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedStorageAccountsWithHttpMessagesAsync(vaultBaseUrl, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified deleted storage account.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Storage Account operation returns the specified deleted
            /// storage account along with its attributes. This operation requires the
            /// storage/get permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedStorageBundle> GetDeletedStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Permanently deletes the specified storage account.
            /// </summary>
            /// <remarks>
            /// The purge deleted storage account operation removes the secret permanently,
            /// without the possibility of recovery. This operation can only be performed
            /// on a soft-delete enabled vault. This operation requires the storage/purge
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeDeletedStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeDeletedStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Recovers the deleted storage account.
            /// </summary>
            /// <remarks>
            /// Recovers the deleted storage account in the specified vault. This operation
            /// can only be performed on a soft-delete enabled vault. This operation
            /// requires the storage/recover permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageBundle> RecoverDeletedStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverDeletedStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Backs up the specified storage account.
            /// </summary>
            /// <remarks>
            /// Requests that a backup of the specified storage account be downloaded to
            /// the client. This operation requires the storage/backup permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupStorageResult> BackupStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a backed up storage account to a vault.
            /// </summary>
            /// <remarks>
            /// Restores a backed up storage account to a vault. This operation requires
            /// the storage/restore permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageBundleBackup'>
            /// The backup blob associated with a storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageBundle> RestoreStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, byte[] storageBundleBackup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageBundleBackup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a storage account. This operation requires the storage/delete
            /// permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedStorageBundle> DeleteStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a specified storage account. This operation requires
            /// the storage/get permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageBundle> GetStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a new storage account. This operation requires the
            /// storage/set permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='resourceId'>
            /// Storage account resource id.
            /// </param>
            /// <param name='activeKeyName'>
            /// Current active storage account key name.
            /// </param>
            /// <param name='autoRegenerateKey'>
            /// whether keyvault should manage the storage account for the user.
            /// </param>
            /// <param name='regenerationPeriod'>
            /// The key regeneration time duration specified in ISO-8601 format.
            /// </param>
            /// <param name='storageAccountAttributes'>
            /// The attributes of the storage account.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageBundle> SetStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string resourceId, string activeKeyName, bool autoRegenerateKey, string regenerationPeriod = default(string), StorageAccountAttributes storageAccountAttributes = default(StorageAccountAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, resourceId, activeKeyName, autoRegenerateKey, regenerationPeriod, storageAccountAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified attributes associated with the given storage account.
            /// This operation requires the storage/set/update permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='activeKeyName'>
            /// The current active storage account key name.
            /// </param>
            /// <param name='autoRegenerateKey'>
            /// whether keyvault should manage the storage account for the user.
            /// </param>
            /// <param name='regenerationPeriod'>
            /// The key regeneration time duration specified in ISO-8601 format.
            /// </param>
            /// <param name='storageAccountAttributes'>
            /// The attributes of the storage account.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageBundle> UpdateStorageAccountAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string activeKeyName = default(string), bool? autoRegenerateKey = default(bool?), string regenerationPeriod = default(string), StorageAccountAttributes storageAccountAttributes = default(StorageAccountAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateStorageAccountWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, activeKeyName, autoRegenerateKey, regenerationPeriod, storageAccountAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerates the specified key value for the given storage account. This
            /// operation requires the storage/regeneratekey permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='keyName'>
            /// The storage account key name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageBundle> RegenerateStorageAccountKeyAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateStorageAccountKeyWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List storage SAS definitions for the given storage account. This operation
            /// requires the storage/listsas permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SasDefinitionItem>> GetSasDefinitionsAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSasDefinitionsWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists deleted SAS definitions for the specified vault and storage account.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Sas Definitions operation returns the SAS definitions that
            /// have been deleted for a vault enabled for soft-delete. This operation
            /// requires the storage/listsas permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='maxresults'>
            /// Maximum number of results to return in a page. If not specified the service
            /// will return up to 25 results.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedSasDefinitionItem>> GetDeletedSasDefinitionsAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, int? maxresults = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedSasDefinitionsWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, maxresults, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified deleted sas definition.
            /// </summary>
            /// <remarks>
            /// The Get Deleted SAS Definition operation returns the specified deleted SAS
            /// definition along with its attributes. This operation requires the
            /// storage/getsas permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='sasDefinitionName'>
            /// The name of the SAS definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedSasDefinitionBundle> GetDeletedSasDefinitionAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string sasDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedSasDefinitionWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recovers the deleted SAS definition.
            /// </summary>
            /// <remarks>
            /// Recovers the deleted SAS definition for the specified storage account. This
            /// operation can only be performed on a soft-delete enabled vault. This
            /// operation requires the storage/recover permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='sasDefinitionName'>
            /// The name of the SAS definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SasDefinitionBundle> RecoverDeletedSasDefinitionAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string sasDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverDeletedSasDefinitionWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SAS definition from a specified storage account. This operation
            /// requires the storage/deletesas permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='sasDefinitionName'>
            /// The name of the SAS definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedSasDefinitionBundle> DeleteSasDefinitionAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string sasDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSasDefinitionWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a SAS definition for the specified storage account.
            /// This operation requires the storage/getsas permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='sasDefinitionName'>
            /// The name of the SAS definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SasDefinitionBundle> GetSasDefinitionAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string sasDefinitionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSasDefinitionWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a new SAS definition for the specified storage account.
            /// This operation requires the storage/setsas permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='sasDefinitionName'>
            /// The name of the SAS definition.
            /// </param>
            /// <param name='templateUri'>
            /// The SAS definition token template signed with an arbitrary key.  Tokens
            /// created according to the SAS definition will have the same properties as
            /// the template.
            /// </param>
            /// <param name='sasType'>
            /// The type of SAS token the SAS definition will create. Possible values
            /// include: 'account', 'service'
            /// </param>
            /// <param name='validityPeriod'>
            /// The validity period of SAS tokens created according to the SAS definition.
            /// </param>
            /// <param name='sasDefinitionAttributes'>
            /// The attributes of the SAS definition.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SasDefinitionBundle> SetSasDefinitionAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string sasDefinitionName, string templateUri, string sasType, string validityPeriod, SasDefinitionAttributes sasDefinitionAttributes = default(SasDefinitionAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSasDefinitionWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod, sasDefinitionAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified attributes associated with the given SAS definition.
            /// This operation requires the storage/setsas permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultBaseUrl'>
            /// The vault name, for example https://myvault.vault.azure.net.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='sasDefinitionName'>
            /// The name of the SAS definition.
            /// </param>
            /// <param name='templateUri'>
            /// The SAS definition token template signed with an arbitrary key.  Tokens
            /// created according to the SAS definition will have the same properties as
            /// the template.
            /// </param>
            /// <param name='sasType'>
            /// The type of SAS token the SAS definition will create. Possible values
            /// include: 'account', 'service'
            /// </param>
            /// <param name='validityPeriod'>
            /// The validity period of SAS tokens created according to the SAS definition.
            /// </param>
            /// <param name='sasDefinitionAttributes'>
            /// The attributes of the SAS definition.
            /// </param>
            /// <param name='tags'>
            /// Application specific metadata in the form of key-value pairs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SasDefinitionBundle> UpdateSasDefinitionAsync(this IKeyVaultClient operations, string vaultBaseUrl, string storageAccountName, string sasDefinitionName, string templateUri = default(string), string sasType = default(string), string validityPeriod = default(string), SasDefinitionAttributes sasDefinitionAttributes = default(SasDefinitionAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSasDefinitionWithHttpMessagesAsync(vaultBaseUrl, storageAccountName, sasDefinitionName, templateUri, sasType, validityPeriod, sasDefinitionAttributes, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of individual key versions with the same key name.
            /// </summary>
            /// <remarks>
            /// The full key identifier, attributes, and tags are provided in the response.
            /// This operation requires the keys/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeyVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeyVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List keys in the specified vault.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures
            /// that contain the public part of a stored key. The LIST operation is
            /// applicable to all key types, however only the base key identifier,
            /// attributes, and tags are provided in the response. Individual versions of a
            /// key are not listed in the response. This operation requires the keys/list
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<KeyItem>> GetKeysNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the deleted keys in the specified vault.
            /// </summary>
            /// <remarks>
            /// Retrieves a list of the keys in the Key Vault as JSON Web Key structures
            /// that contain the public part of a deleted key. This operation includes
            /// deletion-specific information. The Get Deleted Keys operation is applicable
            /// for vaults enabled for soft-delete. While the operation can be invoked on
            /// any vault, it will return an error if invoked on a non soft-delete enabled
            /// vault. This operation requires the keys/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedKeyItem>> GetDeletedKeysNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedKeysNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List secrets in a specified key vault.
            /// </summary>
            /// <remarks>
            /// The Get Secrets operation is applicable to the entire vault. However, only
            /// the base secret identifier and its attributes are provided in the response.
            /// Individual secret versions are not listed in the response. This operation
            /// requires the secrets/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all versions of the specified secret.
            /// </summary>
            /// <remarks>
            /// The full secret identifier and attributes are provided in the response. No
            /// values are returned for the secrets. This operations requires the
            /// secrets/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SecretItem>> GetSecretVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecretVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists deleted secrets for the specified vault.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Secrets operation returns the secrets that have been
            /// deleted for a vault enabled for soft-delete. This operation requires the
            /// secrets/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedSecretItem>> GetDeletedSecretsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedSecretsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificates in a specified key vault
            /// </summary>
            /// <remarks>
            /// The GetCertificates operation returns the set of certificates resources in
            /// the specified key vault. This operation requires the certificates/list
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificatesNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List certificate issuers for a specified key vault.
            /// </summary>
            /// <remarks>
            /// The GetCertificateIssuers operation returns the set of certificate issuer
            /// resources in the specified key vault. This operation requires the
            /// certificates/manageissuers/getissuers permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateIssuerItem>> GetCertificateIssuersNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateIssuersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the versions of a certificate.
            /// </summary>
            /// <remarks>
            /// The GetCertificateVersions operation returns the versions of a certificate
            /// in the specified key vault. This operation requires the certificates/list
            /// permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CertificateItem>> GetCertificateVersionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the deleted certificates in the specified vault currently available
            /// for recovery.
            /// </summary>
            /// <remarks>
            /// The GetDeletedCertificates operation retrieves the certificates in the
            /// current vault which are in a deleted state and ready for recovery or
            /// purging. This operation includes deletion-specific information. This
            /// operation requires the certificates/get/list permission. This operation can
            /// only be enabled on soft-delete enabled vaults.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedCertificateItem>> GetDeletedCertificatesNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List storage accounts managed by the specified key vault. This operation
            /// requires the storage/list permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageAccountItem>> GetStorageAccountsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageAccountsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists deleted storage accounts for the specified vault.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Storage Accounts operation returns the storage accounts
            /// that have been deleted for a vault enabled for soft-delete. This operation
            /// requires the storage/list permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedStorageAccountItem>> GetDeletedStorageAccountsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedStorageAccountsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List storage SAS definitions for the given storage account. This operation
            /// requires the storage/listsas permission.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SasDefinitionItem>> GetSasDefinitionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSasDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists deleted SAS definitions for the specified vault and storage account.
            /// </summary>
            /// <remarks>
            /// The Get Deleted Sas Definitions operation returns the SAS definitions that
            /// have been deleted for a vault enabled for soft-delete. This operation
            /// requires the storage/listsas permission.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedSasDefinitionItem>> GetDeletedSasDefinitionsNextAsync(this IKeyVaultClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeletedSasDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
