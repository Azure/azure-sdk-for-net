// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.KeyVault.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A deleted SAS definition bundle consisting of its previous id,
    /// attributes and its tags, as well as information on when it will be
    /// purged.
    /// </summary>
    public partial class DeletedSasDefinitionBundle : SasDefinitionBundle
    {
        /// <summary>
        /// Initializes a new instance of the DeletedSasDefinitionBundle class.
        /// </summary>
        public DeletedSasDefinitionBundle()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeletedSasDefinitionBundle class.
        /// </summary>
        /// <param name="id">The SAS definition id.</param>
        /// <param name="secretId">Storage account SAS definition secret
        /// id.</param>
        /// <param name="templateUri">The SAS definition token template signed
        /// with an arbitrary key.  Tokens created according to the SAS
        /// definition will have the same properties as the template.</param>
        /// <param name="sasType">The type of SAS token the SAS definition will
        /// create. Possible values include: 'account', 'service'</param>
        /// <param name="validityPeriod">The validity period of SAS tokens
        /// created according to the SAS definition.</param>
        /// <param name="attributes">The SAS definition attributes.</param>
        /// <param name="tags">Application specific metadata in the form of
        /// key-value pairs</param>
        /// <param name="recoveryId">The url of the recovery object, used to
        /// identify and recover the deleted SAS definition.</param>
        /// <param name="scheduledPurgeDate">The time when the SAS definition
        /// is scheduled to be purged, in UTC</param>
        /// <param name="deletedDate">The time when the SAS definition was
        /// deleted, in UTC</param>
        public DeletedSasDefinitionBundle(string id = default(string), string secretId = default(string), string templateUri = default(string), string sasType = default(string), string validityPeriod = default(string), SasDefinitionAttributes attributes = default(SasDefinitionAttributes), IDictionary<string, string> tags = default(IDictionary<string, string>), string recoveryId = default(string), System.DateTime? scheduledPurgeDate = default(System.DateTime?), System.DateTime? deletedDate = default(System.DateTime?))
            : base(id, secretId, templateUri, sasType, validityPeriod, attributes, tags)
        {
            RecoveryId = recoveryId;
            ScheduledPurgeDate = scheduledPurgeDate;
            DeletedDate = deletedDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the url of the recovery object, used to identify and
        /// recover the deleted SAS definition.
        /// </summary>
        [JsonProperty(PropertyName = "recoveryId")]
        public string RecoveryId { get; set; }

        /// <summary>
        /// Gets the time when the SAS definition is scheduled to be purged, in
        /// UTC
        /// </summary>
        [JsonConverter(typeof(UnixTimeJsonConverter))]
        [JsonProperty(PropertyName = "scheduledPurgeDate")]
        public System.DateTime? ScheduledPurgeDate { get; private set; }

        /// <summary>
        /// Gets the time when the SAS definition was deleted, in UTC
        /// </summary>
        [JsonConverter(typeof(UnixTimeJsonConverter))]
        [JsonProperty(PropertyName = "deletedDate")]
        public System.DateTime? DeletedDate { get; private set; }

    }
}
