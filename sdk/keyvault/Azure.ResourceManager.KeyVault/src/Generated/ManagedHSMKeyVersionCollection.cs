// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.KeyVault
{
    /// <summary>
    /// A class representing a collection of <see cref="ManagedHSMKeyVersionResource"/> and their operations.
    /// Each <see cref="ManagedHSMKeyVersionResource"/> in the collection will belong to the same instance of <see cref="ManagedHSMKeyResource"/>.
    /// To get a <see cref="ManagedHSMKeyVersionCollection"/> instance call the GetManagedHSMKeyVersions method from an instance of <see cref="ManagedHSMKeyResource"/>.
    /// </summary>
    public partial class ManagedHSMKeyVersionCollection : ArmCollection, IEnumerable<ManagedHSMKeyVersionResource>, IAsyncEnumerable<ManagedHSMKeyVersionResource>
    {
        private readonly ClientDiagnostics _managedHSMKeyVersionManagedHsmKeysClientDiagnostics;
        private readonly ManagedHsmKeysRestOperations _managedHSMKeyVersionManagedHsmKeysRestClient;

        /// <summary> Initializes a new instance of the <see cref="ManagedHSMKeyVersionCollection"/> class for mocking. </summary>
        protected ManagedHSMKeyVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ManagedHSMKeyVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ManagedHSMKeyVersionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _managedHSMKeyVersionManagedHsmKeysClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.KeyVault", ManagedHSMKeyVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ManagedHSMKeyVersionResource.ResourceType, out string managedHSMKeyVersionManagedHsmKeysApiVersion);
            _managedHSMKeyVersionManagedHsmKeysRestClient = new ManagedHsmKeysRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, managedHSMKeyVersionManagedHsmKeysApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ManagedHSMKeyResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ManagedHSMKeyResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets the specified version of the specified key in the specified managed HSM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions/{keyVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedHsmKeys_GetVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ManagedHSMKeyVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="keyVersion"> The version of the key to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVersion"/> is null. </exception>
        public virtual async Task<Response<ManagedHSMKeyVersionResource>> GetAsync(string keyVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyVersion, nameof(keyVersion));

            using var scope = _managedHSMKeyVersionManagedHsmKeysClientDiagnostics.CreateScope("ManagedHSMKeyVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _managedHSMKeyVersionManagedHsmKeysRestClient.GetVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyVersion, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagedHSMKeyVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the specified version of the specified key in the specified managed HSM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions/{keyVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedHsmKeys_GetVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ManagedHSMKeyVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="keyVersion"> The version of the key to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVersion"/> is null. </exception>
        public virtual Response<ManagedHSMKeyVersionResource> Get(string keyVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyVersion, nameof(keyVersion));

            using var scope = _managedHSMKeyVersionManagedHsmKeysClientDiagnostics.CreateScope("ManagedHSMKeyVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _managedHSMKeyVersionManagedHsmKeysRestClient.GetVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyVersion, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ManagedHSMKeyVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the versions of the specified key in the specified managed HSM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedHsmKeys_ListVersions</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ManagedHSMKeyVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ManagedHSMKeyVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ManagedHSMKeyVersionResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _managedHSMKeyVersionManagedHsmKeysRestClient.CreateListVersionsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _managedHSMKeyVersionManagedHsmKeysRestClient.CreateListVersionsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ManagedHSMKeyVersionResource(Client, ManagedHsmKeyData.DeserializeManagedHsmKeyData(e)), _managedHSMKeyVersionManagedHsmKeysClientDiagnostics, Pipeline, "ManagedHSMKeyVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the versions of the specified key in the specified managed HSM.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedHsmKeys_ListVersions</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ManagedHSMKeyVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ManagedHSMKeyVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ManagedHSMKeyVersionResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _managedHSMKeyVersionManagedHsmKeysRestClient.CreateListVersionsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _managedHSMKeyVersionManagedHsmKeysRestClient.CreateListVersionsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ManagedHSMKeyVersionResource(Client, ManagedHsmKeyData.DeserializeManagedHsmKeyData(e)), _managedHSMKeyVersionManagedHsmKeysClientDiagnostics, Pipeline, "ManagedHSMKeyVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions/{keyVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedHsmKeys_GetVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ManagedHSMKeyVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="keyVersion"> The version of the key to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVersion"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string keyVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyVersion, nameof(keyVersion));

            using var scope = _managedHSMKeyVersionManagedHsmKeysClientDiagnostics.CreateScope("ManagedHSMKeyVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _managedHSMKeyVersionManagedHsmKeysRestClient.GetVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyVersion, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions/{keyVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedHsmKeys_GetVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ManagedHSMKeyVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="keyVersion"> The version of the key to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVersion"/> is null. </exception>
        public virtual Response<bool> Exists(string keyVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyVersion, nameof(keyVersion));

            using var scope = _managedHSMKeyVersionManagedHsmKeysClientDiagnostics.CreateScope("ManagedHSMKeyVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _managedHSMKeyVersionManagedHsmKeysRestClient.GetVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyVersion, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions/{keyVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedHsmKeys_GetVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ManagedHSMKeyVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="keyVersion"> The version of the key to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVersion"/> is null. </exception>
        public virtual async Task<NullableResponse<ManagedHSMKeyVersionResource>> GetIfExistsAsync(string keyVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyVersion, nameof(keyVersion));

            using var scope = _managedHSMKeyVersionManagedHsmKeysClientDiagnostics.CreateScope("ManagedHSMKeyVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _managedHSMKeyVersionManagedHsmKeysRestClient.GetVersionAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyVersion, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ManagedHSMKeyVersionResource>(response.GetRawResponse());
                return Response.FromValue(new ManagedHSMKeyVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/managedHSMs/{name}/keys/{keyName}/versions/{keyVersion}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ManagedHsmKeys_GetVersion</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2023-07-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ManagedHSMKeyVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="keyVersion"> The version of the key to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyVersion"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyVersion"/> is null. </exception>
        public virtual NullableResponse<ManagedHSMKeyVersionResource> GetIfExists(string keyVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyVersion, nameof(keyVersion));

            using var scope = _managedHSMKeyVersionManagedHsmKeysClientDiagnostics.CreateScope("ManagedHSMKeyVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _managedHSMKeyVersionManagedHsmKeysRestClient.GetVersion(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, keyVersion, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ManagedHSMKeyVersionResource>(response.GetRawResponse());
                return Response.FromValue(new ManagedHSMKeyVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ManagedHSMKeyVersionResource> IEnumerable<ManagedHSMKeyVersionResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ManagedHSMKeyVersionResource> IAsyncEnumerable<ManagedHSMKeyVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
