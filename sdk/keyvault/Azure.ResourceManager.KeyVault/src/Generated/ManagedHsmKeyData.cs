// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.KeyVault.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.KeyVault
{
    /// <summary>
    /// A class representing the ManagedHsmKey data model.
    /// The key resource.
    /// </summary>
    public partial class ManagedHsmKeyData : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="ManagedHsmKeyData"/>. </summary>
        public ManagedHsmKeyData()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
            KeyOps = new ChangeTrackingList<JsonWebKeyOperation>();
        }

        /// <summary> Initializes a new instance of <see cref="ManagedHsmKeyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="attributes"> The attributes of the key. </param>
        /// <param name="kty"> The type of the key. For valid values, see JsonWebKeyType. </param>
        /// <param name="keyOps"></param>
        /// <param name="keySize"> The key size in bits. For example: 2048, 3072, or 4096 for RSA. Default for RSA and RSA-HSM keys is 2048. Exception made for bring your own key (BYOK), key exchange keys default to 4096. </param>
        /// <param name="curveName"> The elliptic curve name. For valid values, see JsonWebKeyCurveName. Default for EC and EC-HSM keys is P-256. </param>
        /// <param name="keyUri"> The URI to retrieve the current version of the key. </param>
        /// <param name="keyUriWithVersion"> The URI to retrieve the specific version of the key. </param>
        /// <param name="rotationPolicy"> Key rotation policy in response. It will be used for both output and input. Omitted if empty. </param>
        /// <param name="releasePolicy"> Key release policy in response. It will be used for both output and input. Omitted if empty. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal ManagedHsmKeyData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, ManagedHsmKeyAttributes attributes, JsonWebKeyType? kty, IList<JsonWebKeyOperation> keyOps, int? keySize, JsonWebKeyCurveName? curveName, Uri keyUri, string keyUriWithVersion, ManagedHsmRotationPolicy rotationPolicy, ManagedHsmKeyReleasePolicy releasePolicy, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            Tags = tags;
            Attributes = attributes;
            Kty = kty;
            KeyOps = keyOps;
            KeySize = keySize;
            CurveName = curveName;
            KeyUri = keyUri;
            KeyUriWithVersion = keyUriWithVersion;
            RotationPolicy = rotationPolicy;
            ReleasePolicy = releasePolicy;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resource tags. </summary>
        [WirePath("tags")]
        public IDictionary<string, string> Tags { get; }
        /// <summary> The attributes of the key. </summary>
        [WirePath("properties.attributes")]
        public ManagedHsmKeyAttributes Attributes { get; set; }
        /// <summary> The type of the key. For valid values, see JsonWebKeyType. </summary>
        [WirePath("properties.kty")]
        public JsonWebKeyType? Kty { get; set; }
        /// <summary> Gets the key ops. </summary>
        [WirePath("properties.keyOps")]
        public IList<JsonWebKeyOperation> KeyOps { get; }
        /// <summary> The key size in bits. For example: 2048, 3072, or 4096 for RSA. Default for RSA and RSA-HSM keys is 2048. Exception made for bring your own key (BYOK), key exchange keys default to 4096. </summary>
        [WirePath("properties.keySize")]
        public int? KeySize { get; set; }
        /// <summary> The elliptic curve name. For valid values, see JsonWebKeyCurveName. Default for EC and EC-HSM keys is P-256. </summary>
        [WirePath("properties.curveName")]
        public JsonWebKeyCurveName? CurveName { get; set; }
        /// <summary> The URI to retrieve the current version of the key. </summary>
        [WirePath("properties.keyUri")]
        public Uri KeyUri { get; }
        /// <summary> The URI to retrieve the specific version of the key. </summary>
        [WirePath("properties.keyUriWithVersion")]
        public string KeyUriWithVersion { get; }
        /// <summary> Key rotation policy in response. It will be used for both output and input. Omitted if empty. </summary>
        [WirePath("properties.rotationPolicy")]
        public ManagedHsmRotationPolicy RotationPolicy { get; set; }
        /// <summary> Key release policy in response. It will be used for both output and input. Omitted if empty. </summary>
        [WirePath("properties.release_policy")]
        public ManagedHsmKeyReleasePolicy ReleasePolicy { get; set; }
    }
}
