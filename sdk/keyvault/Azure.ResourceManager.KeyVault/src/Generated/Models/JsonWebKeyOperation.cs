// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.KeyVault.Models
{
    /// <summary> The permitted JSON web key operations of the key. For more information, see JsonWebKeyOperation. </summary>
    public readonly partial struct JsonWebKeyOperation : IEquatable<JsonWebKeyOperation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JsonWebKeyOperation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JsonWebKeyOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EncryptValue = "encrypt";
        private const string DecryptValue = "decrypt";
        private const string SignValue = "sign";
        private const string VerifyValue = "verify";
        private const string WrapKeyValue = "wrapKey";
        private const string UnwrapKeyValue = "unwrapKey";
        private const string ImportValue = "import";

        /// <summary> encrypt. </summary>
        public static JsonWebKeyOperation Encrypt { get; } = new JsonWebKeyOperation(EncryptValue);
        /// <summary> decrypt. </summary>
        public static JsonWebKeyOperation Decrypt { get; } = new JsonWebKeyOperation(DecryptValue);
        /// <summary> sign. </summary>
        public static JsonWebKeyOperation Sign { get; } = new JsonWebKeyOperation(SignValue);
        /// <summary> verify. </summary>
        public static JsonWebKeyOperation Verify { get; } = new JsonWebKeyOperation(VerifyValue);
        /// <summary> wrapKey. </summary>
        public static JsonWebKeyOperation WrapKey { get; } = new JsonWebKeyOperation(WrapKeyValue);
        /// <summary> unwrapKey. </summary>
        public static JsonWebKeyOperation UnwrapKey { get; } = new JsonWebKeyOperation(UnwrapKeyValue);
        /// <summary> import. </summary>
        public static JsonWebKeyOperation Import { get; } = new JsonWebKeyOperation(ImportValue);
        /// <summary> Determines if two <see cref="JsonWebKeyOperation"/> values are the same. </summary>
        public static bool operator ==(JsonWebKeyOperation left, JsonWebKeyOperation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JsonWebKeyOperation"/> values are not the same. </summary>
        public static bool operator !=(JsonWebKeyOperation left, JsonWebKeyOperation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JsonWebKeyOperation"/>. </summary>
        public static implicit operator JsonWebKeyOperation(string value) => new JsonWebKeyOperation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JsonWebKeyOperation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JsonWebKeyOperation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
