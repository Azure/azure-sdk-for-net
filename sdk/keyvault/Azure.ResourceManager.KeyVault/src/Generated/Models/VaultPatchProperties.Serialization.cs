// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.KeyVault.Models
{
    public partial class VaultPatchProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (TenantId != null)
            {
                writer.WritePropertyName("tenantId");
                writer.WriteStringValue(TenantId.Value);
            }
            if (Sku != null)
            {
                writer.WritePropertyName("sku");
                writer.WriteObjectValue(Sku);
            }
            if (AccessPolicies != null)
            {
                writer.WritePropertyName("accessPolicies");
                writer.WriteStartArray();
                foreach (var item in AccessPolicies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (EnabledForDeployment != null)
            {
                writer.WritePropertyName("enabledForDeployment");
                writer.WriteBooleanValue(EnabledForDeployment.Value);
            }
            if (EnabledForDiskEncryption != null)
            {
                writer.WritePropertyName("enabledForDiskEncryption");
                writer.WriteBooleanValue(EnabledForDiskEncryption.Value);
            }
            if (EnabledForTemplateDeployment != null)
            {
                writer.WritePropertyName("enabledForTemplateDeployment");
                writer.WriteBooleanValue(EnabledForTemplateDeployment.Value);
            }
            if (EnableSoftDelete != null)
            {
                writer.WritePropertyName("enableSoftDelete");
                writer.WriteBooleanValue(EnableSoftDelete.Value);
            }
            if (CreateMode != null)
            {
                writer.WritePropertyName("createMode");
                writer.WriteStringValue(CreateMode.Value.ToSerialString());
            }
            if (EnablePurgeProtection != null)
            {
                writer.WritePropertyName("enablePurgeProtection");
                writer.WriteBooleanValue(EnablePurgeProtection.Value);
            }
            if (NetworkAcls != null)
            {
                writer.WritePropertyName("networkAcls");
                writer.WriteObjectValue(NetworkAcls);
            }
            writer.WriteEndObject();
        }
    }
}
