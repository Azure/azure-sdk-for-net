// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.KeyVault.Models
{
    /// <summary> Activation Status. </summary>
    public readonly partial struct ActivationStatus : IEquatable<ActivationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ActivationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ActivationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string NotActivatedValue = "NotActivated";
        private const string UnknownValue = "Unknown";
        private const string FailedValue = "Failed";

        /// <summary> The managed HSM Pool is active. </summary>
        public static ActivationStatus Active { get; } = new ActivationStatus(ActiveValue);
        /// <summary> The managed HSM Pool is not yet activated. </summary>
        public static ActivationStatus NotActivated { get; } = new ActivationStatus(NotActivatedValue);
        /// <summary> An unknown error occurred while activating managed hsm. </summary>
        public static ActivationStatus Unknown { get; } = new ActivationStatus(UnknownValue);
        /// <summary> Failed to activate managed hsm. </summary>
        public static ActivationStatus Failed { get; } = new ActivationStatus(FailedValue);
        /// <summary> Determines if two <see cref="ActivationStatus"/> values are the same. </summary>
        public static bool operator ==(ActivationStatus left, ActivationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ActivationStatus"/> values are not the same. </summary>
        public static bool operator !=(ActivationStatus left, ActivationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ActivationStatus"/>. </summary>
        public static implicit operator ActivationStatus(string value) => new ActivationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ActivationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ActivationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
