// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.KeyVault.Models
{
    public partial class VaultProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("tenantId");
            writer.WriteStringValue(TenantId);
            writer.WritePropertyName("sku");
            writer.WriteObjectValue(Sku);
            if (AccessPolicies != null)
            {
                writer.WritePropertyName("accessPolicies");
                writer.WriteStartArray();
                foreach (var item in AccessPolicies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (VaultUri != null)
            {
                writer.WritePropertyName("vaultUri");
                writer.WriteStringValue(VaultUri);
            }
            if (EnabledForDeployment != null)
            {
                writer.WritePropertyName("enabledForDeployment");
                writer.WriteBooleanValue(EnabledForDeployment.Value);
            }
            if (EnabledForDiskEncryption != null)
            {
                writer.WritePropertyName("enabledForDiskEncryption");
                writer.WriteBooleanValue(EnabledForDiskEncryption.Value);
            }
            if (EnabledForTemplateDeployment != null)
            {
                writer.WritePropertyName("enabledForTemplateDeployment");
                writer.WriteBooleanValue(EnabledForTemplateDeployment.Value);
            }
            if (EnableSoftDelete != null)
            {
                writer.WritePropertyName("enableSoftDelete");
                writer.WriteBooleanValue(EnableSoftDelete.Value);
            }
            if (CreateMode != null)
            {
                writer.WritePropertyName("createMode");
                writer.WriteStringValue(CreateMode.Value.ToSerialString());
            }
            if (EnablePurgeProtection != null)
            {
                writer.WritePropertyName("enablePurgeProtection");
                writer.WriteBooleanValue(EnablePurgeProtection.Value);
            }
            if (NetworkAcls != null)
            {
                writer.WritePropertyName("networkAcls");
                writer.WriteObjectValue(NetworkAcls);
            }
            if (PrivateEndpointConnections != null)
            {
                writer.WritePropertyName("privateEndpointConnections");
                writer.WriteStartArray();
                foreach (var item in PrivateEndpointConnections)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static VaultProperties DeserializeVaultProperties(JsonElement element)
        {
            Guid tenantId = default;
            Sku sku = default;
            IList<AccessPolicyEntry> accessPolicies = default;
            string vaultUri = default;
            bool? enabledForDeployment = default;
            bool? enabledForDiskEncryption = default;
            bool? enabledForTemplateDeployment = default;
            bool? enableSoftDelete = default;
            CreateMode? createMode = default;
            bool? enablePurgeProtection = default;
            NetworkRuleSet networkAcls = default;
            IList<PrivateEndpointConnectionItem> privateEndpointConnections = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tenantId"))
                {
                    tenantId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("sku"))
                {
                    sku = Sku.DeserializeSku(property.Value);
                    continue;
                }
                if (property.NameEquals("accessPolicies"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AccessPolicyEntry> array = new List<AccessPolicyEntry>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(AccessPolicyEntry.DeserializeAccessPolicyEntry(item));
                        }
                    }
                    accessPolicies = array;
                    continue;
                }
                if (property.NameEquals("vaultUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vaultUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enabledForDeployment"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabledForDeployment = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enabledForDiskEncryption"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabledForDiskEncryption = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enabledForTemplateDeployment"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabledForTemplateDeployment = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("enableSoftDelete"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableSoftDelete = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("createMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createMode = property.Value.GetString().ToCreateMode();
                    continue;
                }
                if (property.NameEquals("enablePurgeProtection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enablePurgeProtection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("networkAcls"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkAcls = NetworkRuleSet.DeserializeNetworkRuleSet(property.Value);
                    continue;
                }
                if (property.NameEquals("privateEndpointConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PrivateEndpointConnectionItem> array = new List<PrivateEndpointConnectionItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(PrivateEndpointConnectionItem.DeserializePrivateEndpointConnectionItem(item));
                        }
                    }
                    privateEndpointConnections = array;
                    continue;
                }
            }
            return new VaultProperties(tenantId, sku, accessPolicies, vaultUri, enabledForDeployment, enabledForDiskEncryption, enabledForTemplateDeployment, enableSoftDelete, createMode, enablePurgeProtection, networkAcls, privateEndpointConnections);
        }
    }
}
