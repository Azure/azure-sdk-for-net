// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.KeyVault.Models
{
    public partial class KeyProperties : IUtf8JsonSerializable, IJsonModel<KeyProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<KeyProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<KeyProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KeyProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(KeyProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(Attributes))
            {
                writer.WritePropertyName("attributes"u8);
                writer.WriteObjectValue(Attributes, options);
            }
            if (Optional.IsDefined(KeyType))
            {
                writer.WritePropertyName("kty"u8);
                writer.WriteStringValue(KeyType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(KeyOps))
            {
                writer.WritePropertyName("keyOps"u8);
                writer.WriteStartArray();
                foreach (var item in KeyOps)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(KeySize))
            {
                writer.WritePropertyName("keySize"u8);
                writer.WriteNumberValue(KeySize.Value);
            }
            if (Optional.IsDefined(CurveName))
            {
                writer.WritePropertyName("curveName"u8);
                writer.WriteStringValue(CurveName.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(KeyUri))
            {
                writer.WritePropertyName("keyUri"u8);
                writer.WriteStringValue(KeyUri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(KeyUriWithVersion))
            {
                writer.WritePropertyName("keyUriWithVersion"u8);
                writer.WriteStringValue(KeyUriWithVersion);
            }
            if (Optional.IsDefined(RotationPolicy))
            {
                writer.WritePropertyName("rotationPolicy"u8);
                writer.WriteObjectValue(RotationPolicy, options);
            }
            if (Optional.IsDefined(ReleasePolicy))
            {
                writer.WritePropertyName("release_policy"u8);
                writer.WriteObjectValue(ReleasePolicy, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        KeyProperties IJsonModel<KeyProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KeyProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(KeyProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeKeyProperties(document.RootElement, options);
        }

        internal static KeyProperties DeserializeKeyProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            KeyAttributes attributes = default;
            JsonWebKeyType? kty = default;
            IList<JsonWebKeyOperation> keyOps = default;
            int? keySize = default;
            JsonWebKeyCurveName? curveName = default;
            Uri keyUri = default;
            string keyUriWithVersion = default;
            RotationPolicy rotationPolicy = default;
            KeyReleasePolicy releasePolicy = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("attributes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attributes = KeyAttributes.DeserializeKeyAttributes(property.Value, options);
                    continue;
                }
                if (property.NameEquals("kty"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kty = new JsonWebKeyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("keyOps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<JsonWebKeyOperation> array = new List<JsonWebKeyOperation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new JsonWebKeyOperation(item.GetString()));
                    }
                    keyOps = array;
                    continue;
                }
                if (property.NameEquals("keySize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keySize = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("curveName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    curveName = new JsonWebKeyCurveName(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("keyUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("keyUriWithVersion"u8))
                {
                    keyUriWithVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rotationPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    rotationPolicy = RotationPolicy.DeserializeRotationPolicy(property.Value, options);
                    continue;
                }
                if (property.NameEquals("release_policy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    releasePolicy = KeyReleasePolicy.DeserializeKeyReleasePolicy(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new KeyProperties(
                attributes,
                kty,
                keyOps ?? new ChangeTrackingList<JsonWebKeyOperation>(),
                keySize,
                curveName,
                keyUri,
                keyUriWithVersion,
                rotationPolicy,
                releasePolicy,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<KeyProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KeyProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerKeyVaultContext.Default);
                default:
                    throw new FormatException($"The model {nameof(KeyProperties)} does not support writing '{options.Format}' format.");
            }
        }

        KeyProperties IPersistableModel<KeyProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<KeyProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeKeyProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(KeyProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<KeyProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
