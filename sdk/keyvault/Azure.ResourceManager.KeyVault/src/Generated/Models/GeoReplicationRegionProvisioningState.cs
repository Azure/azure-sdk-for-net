// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.KeyVault.Models
{
    /// <summary> The current provisioning state. </summary>
    public readonly partial struct GeoReplicationRegionProvisioningState : IEquatable<GeoReplicationRegionProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GeoReplicationRegionProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GeoReplicationRegionProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PreprovisioningValue = "Preprovisioning";
        private const string ProvisioningValue = "Provisioning";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string DeletingValue = "Deleting";
        private const string CleanupValue = "Cleanup";

        /// <summary> Preprovisioning. </summary>
        public static GeoReplicationRegionProvisioningState Preprovisioning { get; } = new GeoReplicationRegionProvisioningState(PreprovisioningValue);
        /// <summary> Provisioning. </summary>
        public static GeoReplicationRegionProvisioningState Provisioning { get; } = new GeoReplicationRegionProvisioningState(ProvisioningValue);
        /// <summary> Succeeded. </summary>
        public static GeoReplicationRegionProvisioningState Succeeded { get; } = new GeoReplicationRegionProvisioningState(SucceededValue);
        /// <summary> Failed. </summary>
        public static GeoReplicationRegionProvisioningState Failed { get; } = new GeoReplicationRegionProvisioningState(FailedValue);
        /// <summary> Deleting. </summary>
        public static GeoReplicationRegionProvisioningState Deleting { get; } = new GeoReplicationRegionProvisioningState(DeletingValue);
        /// <summary> Cleanup. </summary>
        public static GeoReplicationRegionProvisioningState Cleanup { get; } = new GeoReplicationRegionProvisioningState(CleanupValue);
        /// <summary> Determines if two <see cref="GeoReplicationRegionProvisioningState"/> values are the same. </summary>
        public static bool operator ==(GeoReplicationRegionProvisioningState left, GeoReplicationRegionProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GeoReplicationRegionProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(GeoReplicationRegionProvisioningState left, GeoReplicationRegionProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="GeoReplicationRegionProvisioningState"/>. </summary>
        public static implicit operator GeoReplicationRegionProvisioningState(string value) => new GeoReplicationRegionProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GeoReplicationRegionProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GeoReplicationRegionProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
