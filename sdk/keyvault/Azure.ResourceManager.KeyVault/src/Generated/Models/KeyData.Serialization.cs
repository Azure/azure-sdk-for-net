// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.KeyVault.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.KeyVault
{
    public partial class KeyData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Attributes))
            {
                writer.WritePropertyName("attributes");
                writer.WriteObjectValue(Attributes);
            }
            if (Optional.IsDefined(Kty))
            {
                writer.WritePropertyName("kty");
                writer.WriteStringValue(Kty.Value.ToString());
            }
            if (Optional.IsCollectionDefined(KeyOps))
            {
                writer.WritePropertyName("keyOps");
                writer.WriteStartArray();
                foreach (var item in KeyOps)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(KeySize))
            {
                writer.WritePropertyName("keySize");
                writer.WriteNumberValue(KeySize.Value);
            }
            if (Optional.IsDefined(CurveName))
            {
                writer.WritePropertyName("curveName");
                writer.WriteStringValue(CurveName.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static KeyData DeserializeKeyData(JsonElement element)
        {
            Optional<string> location = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            Optional<KeyAttributes> attributes = default;
            Optional<JsonWebKeyType> kty = default;
            Optional<IList<JsonWebKeyOperation>> keyOps = default;
            Optional<int> keySize = default;
            Optional<JsonWebKeyCurveName> curveName = default;
            Optional<Uri> keyUri = default;
            Optional<string> keyUriWithVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("attributes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            attributes = KeyAttributes.DeserializeKeyAttributes(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("kty"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            kty = new JsonWebKeyType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("keyOps"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<JsonWebKeyOperation> array = new List<JsonWebKeyOperation>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new JsonWebKeyOperation(item.GetString()));
                            }
                            keyOps = array;
                            continue;
                        }
                        if (property0.NameEquals("keySize"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            keySize = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("curveName"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            curveName = new JsonWebKeyCurveName(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("keyUri"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            keyUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("keyUriWithVersion"))
                        {
                            keyUriWithVersion = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new KeyData(id, name, type, systemData, location.Value, Optional.ToDictionary(tags), attributes.Value, Optional.ToNullable(kty), Optional.ToList(keyOps), Optional.ToNullable(keySize), Optional.ToNullable(curveName), keyUri.Value, keyUriWithVersion.Value);
        }
    }
}
