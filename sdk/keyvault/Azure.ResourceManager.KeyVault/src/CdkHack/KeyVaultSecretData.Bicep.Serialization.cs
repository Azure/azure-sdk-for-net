// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.KeyVault.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.KeyVault
{
    public partial class KeyVaultSecretData : IModelJsonSerializable<KeyVaultSecretData>
    {
        void IModelJsonSerializable<KeyVaultSecretData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options) => ((IUtf8JsonSerializable)this).Write(writer);

        KeyVaultSecretData IModelJsonSerializable<KeyVaultSecretData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            using var document = JsonDocument.ParseValue(ref reader);
            return DeserializeKeyVaultSecretData(document.RootElement);
        }

        BinaryData IModelSerializable<KeyVaultSecretData>.Serialize(ModelSerializerOptions options) => (options.Format.ToString()) switch
        {
            "J" or "W" => ModelSerializer.SerializeCore(this, options),
            "bicep" => SerializeBicep(options),
            _ => throw new FormatException($"Unsupported format {options.Format}")
        };

        KeyVaultSecretData IModelSerializable<KeyVaultSecretData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            using var document = JsonDocument.Parse(data);
            return DeserializeKeyVaultSecretData(document.RootElement);
        }

        private BinaryData SerializeBicep(ModelSerializerOptions options)
        {
            var sb = new StringBuilder();
            sb.AppendLine($"  name: '{Name}'");
            sb.AppendLine($"  properties: {{");
            sb.AppendChildObject(Properties, options, spaces: 4);
            sb.AppendLine($"  }}");
            return BinaryData.FromString(sb.ToString());
        }
    }
}
