// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;

namespace Azure.ResourceManager.KeyVault.Samples
{
    public partial class Sample_VaultKeyVersionCollection
    {
        // Get a key version
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAKeyVersion()
        {
            // Generated from example definition: specification/keyvault/resource-manager/Microsoft.KeyVault/stable/2023-07-01/examples/getKeyVersion.json
            // this example is just showing the usage of "Keys_GetVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VaultKeyResource created on azure
            // for more information of creating VaultKeyResource, please refer to the document of VaultKeyResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "sample-group";
            string vaultName = "sample-vault-name";
            string keyName = "sample-key-name";
            ResourceIdentifier vaultKeyResourceId = VaultKeyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName, keyName);
            VaultKeyResource vaultKey = client.GetVaultKeyResource(vaultKeyResourceId);

            // get the collection of this VaultKeyVersionResource
            VaultKeyVersionCollection collection = vaultKey.GetVaultKeyVersions();

            // invoke the operation
            string keyVersion = "fd618d9519b74f9aae94ade66b876acc";
            VaultKeyVersionResource result = await collection.GetAsync(keyVersion);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            KeyVaultKeyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get a key version
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetAKeyVersion()
        {
            // Generated from example definition: specification/keyvault/resource-manager/Microsoft.KeyVault/stable/2023-07-01/examples/getKeyVersion.json
            // this example is just showing the usage of "Keys_GetVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VaultKeyResource created on azure
            // for more information of creating VaultKeyResource, please refer to the document of VaultKeyResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "sample-group";
            string vaultName = "sample-vault-name";
            string keyName = "sample-key-name";
            ResourceIdentifier vaultKeyResourceId = VaultKeyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName, keyName);
            VaultKeyResource vaultKey = client.GetVaultKeyResource(vaultKeyResourceId);

            // get the collection of this VaultKeyVersionResource
            VaultKeyVersionCollection collection = vaultKey.GetVaultKeyVersions();

            // invoke the operation
            string keyVersion = "fd618d9519b74f9aae94ade66b876acc";
            bool result = await collection.ExistsAsync(keyVersion);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get a key version
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_GetAKeyVersion()
        {
            // Generated from example definition: specification/keyvault/resource-manager/Microsoft.KeyVault/stable/2023-07-01/examples/getKeyVersion.json
            // this example is just showing the usage of "Keys_GetVersion" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VaultKeyResource created on azure
            // for more information of creating VaultKeyResource, please refer to the document of VaultKeyResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "sample-group";
            string vaultName = "sample-vault-name";
            string keyName = "sample-key-name";
            ResourceIdentifier vaultKeyResourceId = VaultKeyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName, keyName);
            VaultKeyResource vaultKey = client.GetVaultKeyResource(vaultKeyResourceId);

            // get the collection of this VaultKeyVersionResource
            VaultKeyVersionCollection collection = vaultKey.GetVaultKeyVersions();

            // invoke the operation
            string keyVersion = "fd618d9519b74f9aae94ade66b876acc";
            NullableResponse<VaultKeyVersionResource> response = await collection.GetIfExistsAsync(keyVersion);
            VaultKeyVersionResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                KeyVaultKeyData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // List key versions in the vault
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListKeyVersionsInTheVault()
        {
            // Generated from example definition: specification/keyvault/resource-manager/Microsoft.KeyVault/stable/2023-07-01/examples/listKeyVersions.json
            // this example is just showing the usage of "Keys_ListVersions" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VaultKeyResource created on azure
            // for more information of creating VaultKeyResource, please refer to the document of VaultKeyResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "sample-group";
            string vaultName = "sample-vault-name";
            string keyName = "sample-key-name";
            ResourceIdentifier vaultKeyResourceId = VaultKeyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName, keyName);
            VaultKeyResource vaultKey = client.GetVaultKeyResource(vaultKeyResourceId);

            // get the collection of this VaultKeyVersionResource
            VaultKeyVersionCollection collection = vaultKey.GetVaultKeyVersions();

            // invoke the operation and iterate over the result
            await foreach (VaultKeyVersionResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                KeyVaultKeyData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
