// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Security.KeyVault.Storage.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class StorageModelFactory
    {
        /// <summary> Initializes a new instance of StorageAccountItem. </summary>
        /// <param name="id"> Storage identifier. </param>
        /// <param name="resourceId"> Storage account resource Id. </param>
        /// <param name="attributes"> The storage account management attributes. </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        /// <returns> A new <see cref="Models.StorageAccountItem"/> instance for mocking. </returns>
        public static StorageAccountItem StorageAccountItem(string id = null, string resourceId = null, StorageAccountAttributes attributes = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StorageAccountItem(id, resourceId, attributes, tags);
        }

        /// <summary> Initializes a new instance of StorageAccountAttributes. </summary>
        /// <param name="enabled"> the enabled state of the object. </param>
        /// <param name="created"> Creation time in UTC. </param>
        /// <param name="updated"> Last updated time in UTC. </param>
        /// <param name="recoverableDays"> softDelete data retention days. Value should be &gt;=7 and &lt;=90 when softDelete enabled, otherwise 0. </param>
        /// <param name="recoveryLevel"> Reflects the deletion recovery level currently in effect for storage accounts in the current vault. If it contains &apos;Purgeable&apos; the storage account can be permanently deleted by a privileged user; otherwise, only the system can purge the storage account, at the end of the retention interval. </param>
        /// <returns> A new <see cref="Models.StorageAccountAttributes"/> instance for mocking. </returns>
        public static StorageAccountAttributes StorageAccountAttributes(bool? enabled = null, DateTimeOffset? created = null, DateTimeOffset? updated = null, int? recoverableDays = null, DeletionRecoveryLevel? recoveryLevel = null)
        {
            return new StorageAccountAttributes(enabled, created, updated, recoverableDays, recoveryLevel);
        }

        /// <summary> Initializes a new instance of DeletedStorageAccountItem. </summary>
        /// <param name="id"> Storage identifier. </param>
        /// <param name="resourceId"> Storage account resource Id. </param>
        /// <param name="attributes"> The storage account management attributes. </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        /// <param name="recoveryId"> The url of the recovery object, used to identify and recover the deleted storage account. </param>
        /// <param name="scheduledPurgeDate"> The time when the storage account is scheduled to be purged, in UTC. </param>
        /// <param name="deletedDate"> The time when the storage account was deleted, in UTC. </param>
        /// <returns> A new <see cref="Models.DeletedStorageAccountItem"/> instance for mocking. </returns>
        public static DeletedStorageAccountItem DeletedStorageAccountItem(string id = null, string resourceId = null, StorageAccountAttributes attributes = null, IReadOnlyDictionary<string, string> tags = null, string recoveryId = null, DateTimeOffset? scheduledPurgeDate = null, DateTimeOffset? deletedDate = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DeletedStorageAccountItem(id, resourceId, attributes, tags, recoveryId, scheduledPurgeDate, deletedDate);
        }

        /// <summary> Initializes a new instance of DeletedStorageBundle. </summary>
        /// <param name="id"> The storage account id. </param>
        /// <param name="resourceId"> The storage account resource id. </param>
        /// <param name="activeKeyName"> The current active storage account key name. </param>
        /// <param name="autoRegenerateKey"> whether keyvault should manage the storage account for the user. </param>
        /// <param name="regenerationPeriod"> The key regeneration time duration specified in ISO-8601 format. </param>
        /// <param name="attributes"> The storage account attributes. </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        /// <param name="recoveryId"> The url of the recovery object, used to identify and recover the deleted storage account. </param>
        /// <param name="scheduledPurgeDate"> The time when the storage account is scheduled to be purged, in UTC. </param>
        /// <param name="deletedDate"> The time when the storage account was deleted, in UTC. </param>
        /// <returns> A new <see cref="Models.DeletedStorageBundle"/> instance for mocking. </returns>
        public static DeletedStorageBundle DeletedStorageBundle(string id = null, string resourceId = null, string activeKeyName = null, bool? autoRegenerateKey = null, string regenerationPeriod = null, StorageAccountAttributes attributes = null, IReadOnlyDictionary<string, string> tags = null, string recoveryId = null, DateTimeOffset? scheduledPurgeDate = null, DateTimeOffset? deletedDate = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DeletedStorageBundle(id, resourceId, activeKeyName, autoRegenerateKey, regenerationPeriod, attributes, tags, recoveryId, scheduledPurgeDate, deletedDate);
        }

        /// <summary> Initializes a new instance of StorageBundle. </summary>
        /// <param name="id"> The storage account id. </param>
        /// <param name="resourceId"> The storage account resource id. </param>
        /// <param name="activeKeyName"> The current active storage account key name. </param>
        /// <param name="autoRegenerateKey"> whether keyvault should manage the storage account for the user. </param>
        /// <param name="regenerationPeriod"> The key regeneration time duration specified in ISO-8601 format. </param>
        /// <param name="attributes"> The storage account attributes. </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        /// <returns> A new <see cref="Models.StorageBundle"/> instance for mocking. </returns>
        public static StorageBundle StorageBundle(string id = null, string resourceId = null, string activeKeyName = null, bool? autoRegenerateKey = null, string regenerationPeriod = null, StorageAccountAttributes attributes = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StorageBundle(id, resourceId, activeKeyName, autoRegenerateKey, regenerationPeriod, attributes, tags);
        }

        /// <summary> Initializes a new instance of BackupStorageResult. </summary>
        /// <param name="value"> The backup blob containing the backed up storage account. </param>
        /// <returns> A new <see cref="Models.BackupStorageResult"/> instance for mocking. </returns>
        public static BackupStorageResult BackupStorageResult(byte[] value = null)
        {
            return new BackupStorageResult(value);
        }

        /// <summary> Initializes a new instance of SasDefinitionItem. </summary>
        /// <param name="id"> The storage SAS identifier. </param>
        /// <param name="secretId"> The storage account SAS definition secret id. </param>
        /// <param name="attributes"> The SAS definition management attributes. </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        /// <returns> A new <see cref="Models.SasDefinitionItem"/> instance for mocking. </returns>
        public static SasDefinitionItem SasDefinitionItem(string id = null, string secretId = null, SasDefinitionAttributes attributes = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SasDefinitionItem(id, secretId, attributes, tags);
        }

        /// <summary> Initializes a new instance of SasDefinitionAttributes. </summary>
        /// <param name="enabled"> the enabled state of the object. </param>
        /// <param name="created"> Creation time in UTC. </param>
        /// <param name="updated"> Last updated time in UTC. </param>
        /// <param name="recoverableDays"> softDelete data retention days. Value should be &gt;=7 and &lt;=90 when softDelete enabled, otherwise 0. </param>
        /// <param name="recoveryLevel"> Reflects the deletion recovery level currently in effect for SAS definitions in the current vault. If it contains &apos;Purgeable&apos; the SAS definition can be permanently deleted by a privileged user; otherwise, only the system can purge the SAS definition, at the end of the retention interval. </param>
        /// <returns> A new <see cref="Models.SasDefinitionAttributes"/> instance for mocking. </returns>
        public static SasDefinitionAttributes SasDefinitionAttributes(bool? enabled = null, DateTimeOffset? created = null, DateTimeOffset? updated = null, int? recoverableDays = null, DeletionRecoveryLevel? recoveryLevel = null)
        {
            return new SasDefinitionAttributes(enabled, created, updated, recoverableDays, recoveryLevel);
        }

        /// <summary> Initializes a new instance of DeletedSasDefinitionItem. </summary>
        /// <param name="id"> The storage SAS identifier. </param>
        /// <param name="secretId"> The storage account SAS definition secret id. </param>
        /// <param name="attributes"> The SAS definition management attributes. </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        /// <param name="recoveryId"> The url of the recovery object, used to identify and recover the deleted SAS definition. </param>
        /// <param name="scheduledPurgeDate"> The time when the SAS definition is scheduled to be purged, in UTC. </param>
        /// <param name="deletedDate"> The time when the SAS definition was deleted, in UTC. </param>
        /// <returns> A new <see cref="Models.DeletedSasDefinitionItem"/> instance for mocking. </returns>
        public static DeletedSasDefinitionItem DeletedSasDefinitionItem(string id = null, string secretId = null, SasDefinitionAttributes attributes = null, IReadOnlyDictionary<string, string> tags = null, string recoveryId = null, DateTimeOffset? scheduledPurgeDate = null, DateTimeOffset? deletedDate = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DeletedSasDefinitionItem(id, secretId, attributes, tags, recoveryId, scheduledPurgeDate, deletedDate);
        }

        /// <summary> Initializes a new instance of DeletedSasDefinitionBundle. </summary>
        /// <param name="id"> The SAS definition id. </param>
        /// <param name="secretId"> Storage account SAS definition secret id. </param>
        /// <param name="templateUri"> The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template. </param>
        /// <param name="sasType"> The type of SAS token the SAS definition will create. </param>
        /// <param name="validityPeriod"> The validity period of SAS tokens created according to the SAS definition. </param>
        /// <param name="attributes"> The SAS definition attributes. </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        /// <param name="recoveryId"> The url of the recovery object, used to identify and recover the deleted SAS definition. </param>
        /// <param name="scheduledPurgeDate"> The time when the SAS definition is scheduled to be purged, in UTC. </param>
        /// <param name="deletedDate"> The time when the SAS definition was deleted, in UTC. </param>
        /// <returns> A new <see cref="Models.DeletedSasDefinitionBundle"/> instance for mocking. </returns>
        public static DeletedSasDefinitionBundle DeletedSasDefinitionBundle(string id = null, string secretId = null, string templateUri = null, SasTokenType? sasType = null, string validityPeriod = null, SasDefinitionAttributes attributes = null, IReadOnlyDictionary<string, string> tags = null, string recoveryId = null, DateTimeOffset? scheduledPurgeDate = null, DateTimeOffset? deletedDate = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DeletedSasDefinitionBundle(id, secretId, templateUri, sasType, validityPeriod, attributes, tags, recoveryId, scheduledPurgeDate, deletedDate);
        }

        /// <summary> Initializes a new instance of SasDefinitionBundle. </summary>
        /// <param name="id"> The SAS definition id. </param>
        /// <param name="secretId"> Storage account SAS definition secret id. </param>
        /// <param name="templateUri"> The SAS definition token template signed with an arbitrary key.  Tokens created according to the SAS definition will have the same properties as the template. </param>
        /// <param name="sasType"> The type of SAS token the SAS definition will create. </param>
        /// <param name="validityPeriod"> The validity period of SAS tokens created according to the SAS definition. </param>
        /// <param name="attributes"> The SAS definition attributes. </param>
        /// <param name="tags"> Application specific metadata in the form of key-value pairs. </param>
        /// <returns> A new <see cref="Models.SasDefinitionBundle"/> instance for mocking. </returns>
        public static SasDefinitionBundle SasDefinitionBundle(string id = null, string secretId = null, string templateUri = null, SasTokenType? sasType = null, string validityPeriod = null, SasDefinitionAttributes attributes = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SasDefinitionBundle(id, secretId, templateUri, sasType, validityPeriod, attributes, tags);
        }
    }
}
