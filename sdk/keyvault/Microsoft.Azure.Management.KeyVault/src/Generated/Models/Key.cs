// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The key resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Key : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Key class.
        /// </summary>
        public Key()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Key class.
        /// </summary>
        /// <param name="id">Fully qualified identifier of the key vault
        /// resource.</param>
        /// <param name="name">Name of the key vault resource.</param>
        /// <param name="type">Resource type of the key vault resource.</param>
        /// <param name="location">Azure location of the key vault
        /// resource.</param>
        /// <param name="tags">Tags assigned to the key vault resource.</param>
        /// <param name="attributes">The attributes of the key.</param>
        /// <param name="kty">The type of the key. For valid values, see
        /// JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA',
        /// 'RSA-HSM'</param>
        /// <param name="keySize">The key size in bits. For example: 2048,
        /// 3072, or 4096 for RSA.</param>
        /// <param name="curveName">The elliptic curve name. For valid values,
        /// see JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384',
        /// 'P-521', 'P-256K'</param>
        /// <param name="keyUri">The URI to retrieve the current version of the
        /// key.</param>
        /// <param name="keyUriWithVersion">The URI to retrieve the specific
        /// version of the key.</param>
        /// <param name="rotationPolicy">Key rotation policy in response. It
        /// will be used for both output and input. Omitted if empty</param>
        /// <param name="releasePolicy">Key release policy in response. It will
        /// be used for both output and input. Omitted if empty</param>
        public Key(string id = default(string), string name = default(string), string type = default(string), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), KeyAttributes attributes = default(KeyAttributes), string kty = default(string), IList<string> keyOps = default(IList<string>), int? keySize = default(int?), string curveName = default(string), string keyUri = default(string), string keyUriWithVersion = default(string), RotationPolicy rotationPolicy = default(RotationPolicy), KeyReleasePolicy releasePolicy = default(KeyReleasePolicy))
            : base(id, name, type, location, tags)
        {
            Attributes = attributes;
            Kty = kty;
            KeyOps = keyOps;
            KeySize = keySize;
            CurveName = curveName;
            KeyUri = keyUri;
            KeyUriWithVersion = keyUriWithVersion;
            RotationPolicy = rotationPolicy;
            ReleasePolicy = releasePolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the attributes of the key.
        /// </summary>
        [JsonProperty(PropertyName = "properties.attributes")]
        public KeyAttributes Attributes { get; set; }

        /// <summary>
        /// Gets or sets the type of the key. For valid values, see
        /// JsonWebKeyType. Possible values include: 'EC', 'EC-HSM', 'RSA',
        /// 'RSA-HSM'
        /// </summary>
        [JsonProperty(PropertyName = "properties.kty")]
        public string Kty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyOps")]
        public IList<string> KeyOps { get; set; }

        /// <summary>
        /// Gets or sets the key size in bits. For example: 2048, 3072, or 4096
        /// for RSA.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keySize")]
        public int? KeySize { get; set; }

        /// <summary>
        /// Gets or sets the elliptic curve name. For valid values, see
        /// JsonWebKeyCurveName. Possible values include: 'P-256', 'P-384',
        /// 'P-521', 'P-256K'
        /// </summary>
        [JsonProperty(PropertyName = "properties.curveName")]
        public string CurveName { get; set; }

        /// <summary>
        /// Gets the URI to retrieve the current version of the key.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyUri")]
        public string KeyUri { get; private set; }

        /// <summary>
        /// Gets the URI to retrieve the specific version of the key.
        /// </summary>
        [JsonProperty(PropertyName = "properties.keyUriWithVersion")]
        public string KeyUriWithVersion { get; private set; }

        /// <summary>
        /// Gets or sets key rotation policy in response. It will be used for
        /// both output and input. Omitted if empty
        /// </summary>
        [JsonProperty(PropertyName = "properties.rotationPolicy")]
        public RotationPolicy RotationPolicy { get; set; }

        /// <summary>
        /// Gets or sets key release policy in response. It will be used for
        /// both output and input. Omitted if empty
        /// </summary>
        [JsonProperty(PropertyName = "properties.release_policy")]
        public KeyReleasePolicy ReleasePolicy { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Kty != null)
            {
                if (Kty.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Kty", 1);
                }
            }
        }
    }
}
