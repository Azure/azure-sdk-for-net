// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KeyVault
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KeysOperations.
    /// </summary>
    public static partial class KeysOperationsExtensions
    {
            /// <summary>
            /// Creates the first version of a new key if it does not exist. If it already
            /// exists, then the existing key is returned without any write operations
            /// being performed. This API does not create subsequent versions, and does not
            /// update existing keys.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the key vault which contains the key to be created.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key to be created.
            /// </param>
            /// <param name='parameters'>
            /// The parameters used to create the specified key.
            /// </param>
            public static Key CreateIfNotExist(this IKeysOperations operations, string resourceGroupName, string vaultName, string keyName, KeyCreateParameters parameters)
            {
                return operations.CreateIfNotExistAsync(resourceGroupName, vaultName, keyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the first version of a new key if it does not exist. If it already
            /// exists, then the existing key is returned without any write operations
            /// being performed. This API does not create subsequent versions, and does not
            /// update existing keys.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the key vault which contains the key to be created.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key to be created.
            /// </param>
            /// <param name='parameters'>
            /// The parameters used to create the specified key.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Key> CreateIfNotExistAsync(this IKeysOperations operations, string resourceGroupName, string vaultName, string keyName, KeyCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateIfNotExistWithHttpMessagesAsync(resourceGroupName, vaultName, keyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the current version of the specified key from the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault which contains the key to be retrieved.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key to be retrieved.
            /// </param>
            public static Key Get(this IKeysOperations operations, string resourceGroupName, string vaultName, string keyName)
            {
                return operations.GetAsync(resourceGroupName, vaultName, keyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current version of the specified key from the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault which contains the key to be retrieved.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key to be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Key> GetAsync(this IKeysOperations operations, string resourceGroupName, string vaultName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vaultName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the keys in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault which contains the keys to be retrieved.
            /// </param>
            public static IPage<Key> List(this IKeysOperations operations, string resourceGroupName, string vaultName)
            {
                return operations.ListAsync(resourceGroupName, vaultName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the keys in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault which contains the keys to be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Key>> ListAsync(this IKeysOperations operations, string resourceGroupName, string vaultName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, vaultName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified version of the specified key in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault which contains the key version to be retrieved.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key version to be retrieved.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key to be retrieved.
            /// </param>
            public static Key GetVersion(this IKeysOperations operations, string resourceGroupName, string vaultName, string keyName, string keyVersion)
            {
                return operations.GetVersionAsync(resourceGroupName, vaultName, keyName, keyVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified version of the specified key in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault which contains the key version to be retrieved.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key version to be retrieved.
            /// </param>
            /// <param name='keyVersion'>
            /// The version of the key to be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Key> GetVersionAsync(this IKeysOperations operations, string resourceGroupName, string vaultName, string keyName, string keyVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVersionWithHttpMessagesAsync(resourceGroupName, vaultName, keyName, keyVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the versions of the specified key in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault which contains the key versions to be retrieved.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key versions to be retrieved.
            /// </param>
            public static IPage<Key> ListVersions(this IKeysOperations operations, string resourceGroupName, string vaultName, string keyName)
            {
                return operations.ListVersionsAsync(resourceGroupName, vaultName, keyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the versions of the specified key in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group which contains the specified key vault.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault which contains the key versions to be retrieved.
            /// </param>
            /// <param name='keyName'>
            /// The name of the key versions to be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Key>> ListVersionsAsync(this IKeysOperations operations, string resourceGroupName, string vaultName, string keyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVersionsWithHttpMessagesAsync(resourceGroupName, vaultName, keyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the keys in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Key> ListNext(this IKeysOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the keys in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Key>> ListNextAsync(this IKeysOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the versions of the specified key in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Key> ListVersionsNext(this IKeysOperations operations, string nextPageLink)
            {
                return operations.ListVersionsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the versions of the specified key in the specified key vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Key>> ListVersionsNextAsync(this IKeysOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVersionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
