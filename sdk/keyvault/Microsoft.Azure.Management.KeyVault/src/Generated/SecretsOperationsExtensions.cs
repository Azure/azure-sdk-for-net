// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KeyVault
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SecretsOperations.
    /// </summary>
    public static partial class SecretsOperationsExtensions
    {
            /// <summary>
            /// Create or update a secret in a key vault in the specified subscription.
            /// NOTE: This API is intended for internal use in ARM deployments. Users
            /// should use the data-plane REST service for interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the vault belongs.
            /// </param>
            /// <param name='vaultName'>
            /// Name of the vault
            /// </param>
            /// <param name='secretName'>
            /// Name of the secret
            /// </param>
            /// <param name='parameters'>
            /// Parameters to create or update the secret
            /// </param>
            public static Secret CreateOrUpdate(this ISecretsOperations operations, string resourceGroupName, string vaultName, string secretName, SecretCreateOrUpdateParameters parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, vaultName, secretName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a secret in a key vault in the specified subscription.
            /// NOTE: This API is intended for internal use in ARM deployments. Users
            /// should use the data-plane REST service for interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the vault belongs.
            /// </param>
            /// <param name='vaultName'>
            /// Name of the vault
            /// </param>
            /// <param name='secretName'>
            /// Name of the secret
            /// </param>
            /// <param name='parameters'>
            /// Parameters to create or update the secret
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Secret> CreateOrUpdateAsync(this ISecretsOperations operations, string resourceGroupName, string vaultName, string secretName, SecretCreateOrUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, vaultName, secretName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a secret in the specified subscription.  NOTE: This API is intended
            /// for internal use in ARM deployments.  Users should use the data-plane REST
            /// service for interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the vault belongs.
            /// </param>
            /// <param name='vaultName'>
            /// Name of the vault
            /// </param>
            /// <param name='secretName'>
            /// Name of the secret
            /// </param>
            /// <param name='parameters'>
            /// Parameters to patch the secret
            /// </param>
            public static Secret Update(this ISecretsOperations operations, string resourceGroupName, string vaultName, string secretName, SecretPatchParameters parameters)
            {
                return operations.UpdateAsync(resourceGroupName, vaultName, secretName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a secret in the specified subscription.  NOTE: This API is intended
            /// for internal use in ARM deployments.  Users should use the data-plane REST
            /// service for interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the vault belongs.
            /// </param>
            /// <param name='vaultName'>
            /// Name of the vault
            /// </param>
            /// <param name='secretName'>
            /// Name of the secret
            /// </param>
            /// <param name='parameters'>
            /// Parameters to patch the secret
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Secret> UpdateAsync(this ISecretsOperations operations, string resourceGroupName, string vaultName, string secretName, SecretPatchParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, vaultName, secretName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified secret.  NOTE: This API is intended for internal use in
            /// ARM deployments. Users should use the data-plane REST service for
            /// interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the vault belongs.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            public static Secret Get(this ISecretsOperations operations, string resourceGroupName, string vaultName, string secretName)
            {
                return operations.GetAsync(resourceGroupName, vaultName, secretName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified secret.  NOTE: This API is intended for internal use in
            /// ARM deployments. Users should use the data-plane REST service for
            /// interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the vault belongs.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault.
            /// </param>
            /// <param name='secretName'>
            /// The name of the secret.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Secret> GetAsync(this ISecretsOperations operations, string resourceGroupName, string vaultName, string secretName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vaultName, secretName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The List operation gets information about the secrets in a vault.  NOTE:
            /// This API is intended for internal use in ARM deployments. Users should use
            /// the data-plane REST service for interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the vault belongs.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault.
            /// </param>
            /// <param name='top'>
            /// Maximum number of results to return.
            /// </param>
            public static IPage<Secret> List(this ISecretsOperations operations, string resourceGroupName, string vaultName, int? top = default(int?))
            {
                return operations.ListAsync(resourceGroupName, vaultName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The List operation gets information about the secrets in a vault.  NOTE:
            /// This API is intended for internal use in ARM deployments. Users should use
            /// the data-plane REST service for interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Resource Group to which the vault belongs.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the vault.
            /// </param>
            /// <param name='top'>
            /// Maximum number of results to return.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Secret>> ListAsync(this ISecretsOperations operations, string resourceGroupName, string vaultName, int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, vaultName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The List operation gets information about the secrets in a vault.  NOTE:
            /// This API is intended for internal use in ARM deployments. Users should use
            /// the data-plane REST service for interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Secret> ListNext(this ISecretsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The List operation gets information about the secrets in a vault.  NOTE:
            /// This API is intended for internal use in ARM deployments. Users should use
            /// the data-plane REST service for interaction with vault secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Secret>> ListNextAsync(this ISecretsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
