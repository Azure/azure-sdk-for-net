// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Iot.DeviceUpdate.Models;

namespace Azure.Iot.DeviceUpdate
{
    internal partial class DeploymentsRestClient
    {
        private string accountEndpoint;
        private string instanceId;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of DeploymentsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="accountEndpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountEndpoint"/> or <paramref name="instanceId"/> is null. </exception>
        public DeploymentsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string accountEndpoint, string instanceId)
        {
            if (accountEndpoint == null)
            {
                throw new ArgumentNullException(nameof(accountEndpoint));
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException(nameof(instanceId));
            }

            this.accountEndpoint = accountEndpoint;
            this.instanceId = instanceId;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetAllDeploymentsRequest(string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of deployments. </summary>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<PageableListOfDeployments>> GetAllDeploymentsAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllDeploymentsRequest(filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PageableListOfDeployments value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PageableListOfDeployments.DeserializePageableListOfDeployments(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of deployments. </summary>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<PageableListOfDeployments> GetAllDeployments(string filter = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAllDeploymentsRequest(filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PageableListOfDeployments value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PageableListOfDeployments.DeserializePageableListOfDeployments(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDeploymentRequest(string deploymentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public async Task<Response<Deployment>> GetDeploymentAsync(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateGetDeploymentRequest(deploymentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Deployment value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Deployment.DeserializeDeployment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public Response<Deployment> GetDeployment(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateGetDeploymentRequest(deploymentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Deployment value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Deployment.DeserializeDeployment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateDeploymentRequest(string deploymentId, Deployment deployment)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(deployment);
            request.Content = content;
            return message;
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="deployment"> The deployment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> or <paramref name="deployment"/> is null. </exception>
        public async Task<Response<Deployment>> CreateOrUpdateDeploymentAsync(string deploymentId, Deployment deployment, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }
            if (deployment == null)
            {
                throw new ArgumentNullException(nameof(deployment));
            }

            using var message = CreateCreateOrUpdateDeploymentRequest(deploymentId, deployment);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Deployment value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Deployment.DeserializeDeployment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="deployment"> The deployment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> or <paramref name="deployment"/> is null. </exception>
        public Response<Deployment> CreateOrUpdateDeployment(string deploymentId, Deployment deployment, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }
            if (deployment == null)
            {
                throw new ArgumentNullException(nameof(deployment));
            }

            using var message = CreateCreateOrUpdateDeploymentRequest(deploymentId, deployment);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Deployment value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Deployment.DeserializeDeployment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDeploymentRequest(string deploymentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public async Task<Response> DeleteDeploymentAsync(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateDeleteDeploymentRequest(deploymentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public Response DeleteDeployment(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateDeleteDeploymentRequest(deploymentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDeploymentStatusRequest(string deploymentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendPath("/status", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public async Task<Response<DeploymentStatus>> GetDeploymentStatusAsync(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateGetDeploymentStatusRequest(deploymentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeploymentStatus value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DeploymentStatus.DeserializeDeploymentStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public Response<DeploymentStatus> GetDeploymentStatus(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateGetDeploymentStatusRequest(deploymentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DeploymentStatus value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DeploymentStatus.DeserializeDeploymentStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDeploymentDevicesRequest(string deploymentId, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendPath("/devicestates", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public async Task<Response<PageableListOfDeploymentDeviceStates>> GetDeploymentDevicesAsync(string deploymentId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateGetDeploymentDevicesRequest(deploymentId, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PageableListOfDeploymentDeviceStates value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PageableListOfDeploymentDeviceStates.DeserializePageableListOfDeploymentDeviceStates(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public Response<PageableListOfDeploymentDeviceStates> GetDeploymentDevices(string deploymentId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateGetDeploymentDevicesRequest(deploymentId, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PageableListOfDeploymentDeviceStates value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PageableListOfDeploymentDeviceStates.DeserializePageableListOfDeploymentDeviceStates(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelDeploymentRequest(string deploymentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("action", "cancel", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Cancels a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public async Task<Response<Deployment>> CancelDeploymentAsync(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateCancelDeploymentRequest(deploymentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Deployment value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Deployment.DeserializeDeployment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Cancels a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public Response<Deployment> CancelDeployment(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateCancelDeploymentRequest(deploymentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Deployment value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Deployment.DeserializeDeployment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRetryDeploymentRequest(string deploymentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("action", "retry", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retries a deployment with failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public async Task<Response<Deployment>> RetryDeploymentAsync(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateRetryDeploymentRequest(deploymentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Deployment value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Deployment.DeserializeDeployment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Retries a deployment with failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public Response<Deployment> RetryDeployment(string deploymentId, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateRetryDeploymentRequest(deploymentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Deployment value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Deployment.DeserializeDeployment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAllDeploymentsNextPageRequest(string nextLink, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of deployments. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<PageableListOfDeployments>> GetAllDeploymentsNextPageAsync(string nextLink, string filter = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllDeploymentsNextPageRequest(nextLink, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PageableListOfDeployments value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PageableListOfDeployments.DeserializePageableListOfDeployments(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of deployments. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<PageableListOfDeployments> GetAllDeploymentsNextPage(string nextLink, string filter = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateGetAllDeploymentsNextPageRequest(nextLink, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PageableListOfDeployments value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PageableListOfDeployments.DeserializePageableListOfDeployments(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDeploymentDevicesNextPageRequest(string nextLink, string deploymentId, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="deploymentId"/> is null. </exception>
        public async Task<Response<PageableListOfDeploymentDeviceStates>> GetDeploymentDevicesNextPageAsync(string nextLink, string deploymentId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateGetDeploymentDevicesNextPageRequest(nextLink, deploymentId, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PageableListOfDeploymentDeviceStates value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PageableListOfDeploymentDeviceStates.DeserializePageableListOfDeploymentDeviceStates(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="deploymentId"/> is null. </exception>
        public Response<PageableListOfDeploymentDeviceStates> GetDeploymentDevicesNextPage(string nextLink, string deploymentId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            using var message = CreateGetDeploymentDevicesNextPageRequest(nextLink, deploymentId, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PageableListOfDeploymentDeviceStates value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PageableListOfDeploymentDeviceStates.DeserializePageableListOfDeploymentDeviceStates(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
