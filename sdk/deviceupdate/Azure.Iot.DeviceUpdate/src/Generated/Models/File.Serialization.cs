// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.IoT.DeviceUpdate.Models
{
    public partial class File
    {
        internal static File DeserializeFile(JsonElement element)
        {
            string fileId = default;
            string fileName = default;
            long sizeInBytes = default;
            IReadOnlyDictionary<string, string> hashes = default;
            Optional<string> mimeType = default;
            Optional<string> etag = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fileId"))
                {
                    fileId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileName"))
                {
                    fileName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sizeInBytes"))
                {
                    sizeInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("hashes"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    hashes = dictionary;
                    continue;
                }
                if (property.NameEquals("mimeType"))
                {
                    mimeType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
            }
            return new File(fileId, fileName, sizeInBytes, hashes, mimeType.Value, etag.Value);
        }
    }
}
