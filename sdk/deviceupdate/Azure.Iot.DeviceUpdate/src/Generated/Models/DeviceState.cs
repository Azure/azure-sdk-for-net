// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Iot.DeviceUpdate.Models
{
    /// <summary> The deployment device state. </summary>
    internal readonly partial struct DeviceState : IEquatable<DeviceState>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DeviceState"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeviceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string IncompatibleValue = "Incompatible";
        private const string AlreadyInDeploymentValue = "AlreadyInDeployment";
        private const string CanceledValue = "Canceled";
        private const string InProgressValue = "InProgress";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";

        /// <summary> Not started (or uninitialized). </summary>
        public static DeviceState NotStarted { get; } = new DeviceState(NotStartedValue);
        /// <summary> Deployment incompatible for this device. </summary>
        public static DeviceState Incompatible { get; } = new DeviceState(IncompatibleValue);
        /// <summary> Another Deployment is underway for this device. </summary>
        public static DeviceState AlreadyInDeployment { get; } = new DeviceState(AlreadyInDeploymentValue);
        /// <summary> Deployment has been canceled for this device. </summary>
        public static DeviceState Canceled { get; } = new DeviceState(CanceledValue);
        /// <summary> Deployment underway. </summary>
        public static DeviceState InProgress { get; } = new DeviceState(InProgressValue);
        /// <summary> Deployment failed. </summary>
        public static DeviceState Failed { get; } = new DeviceState(FailedValue);
        /// <summary> Deployment completed successfully. </summary>
        public static DeviceState Succeeded { get; } = new DeviceState(SucceededValue);
        /// <summary> Determines if two <see cref="DeviceState"/> values are the same. </summary>
        public static bool operator ==(DeviceState left, DeviceState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeviceState"/> values are not the same. </summary>
        public static bool operator !=(DeviceState left, DeviceState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeviceState"/>. </summary>
        public static implicit operator DeviceState(string value) => new DeviceState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeviceState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeviceState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
