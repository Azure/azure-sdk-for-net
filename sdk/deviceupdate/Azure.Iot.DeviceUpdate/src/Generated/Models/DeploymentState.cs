// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.IoT.DeviceUpdate.Models
{
    /// <summary> Deployment state. </summary>
    public readonly partial struct DeploymentState : IEquatable<DeploymentState>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DeploymentState"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeploymentState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "Active";
        private const string SupersededValue = "Superseded";
        private const string CanceledValue = "Canceled";

        /// <summary> The deployment can be sent to devices targeted in the deployment. </summary>
        public static DeploymentState Active { get; } = new DeploymentState(ActiveValue);
        /// <summary> A newer deployment with the same targeting exists and no devices will receive this deployment. </summary>
        public static DeploymentState Superseded { get; } = new DeploymentState(SupersededValue);
        /// <summary> The deployment has been canceled and no devices will receive it. </summary>
        public static DeploymentState Canceled { get; } = new DeploymentState(CanceledValue);
        /// <summary> Determines if two <see cref="DeploymentState"/> values are the same. </summary>
        public static bool operator ==(DeploymentState left, DeploymentState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeploymentState"/> values are not the same. </summary>
        public static bool operator !=(DeploymentState left, DeploymentState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeploymentState"/>. </summary>
        public static implicit operator DeploymentState(string value) => new DeploymentState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeploymentState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeploymentState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
