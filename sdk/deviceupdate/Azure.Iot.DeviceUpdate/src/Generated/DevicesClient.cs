// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Iot.DeviceUpdate.Models;

namespace Azure.Iot.DeviceUpdate
{
    /// <summary> The Devices service client. </summary>
    public partial class DevicesClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DevicesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of DevicesClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="accountEndpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        internal DevicesClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string accountEndpoint, string instanceId)
        {
            RestClient = new DevicesRestClient(clientDiagnostics, pipeline, accountEndpoint, instanceId);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the properties of a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeviceClass>> GetDeviceClassAsync(string deviceClassId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClass");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceClassAsync(deviceClassId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeviceClass> GetDeviceClass(string deviceClassId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClass");
            scope.Start();
            try
            {
                return RestClient.GetDeviceClass(deviceClassId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IOT Hub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Device>> GetDeviceAsync(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDevice");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceAsync(deviceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IOT Hub. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Device> GetDevice(string deviceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDevice");
            scope.Start();
            try
            {
                return RestClient.GetDevice(deviceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress receiving new updates. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UpdateCompliance>> GetUpdateComplianceAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetUpdateCompliance");
            scope.Start();
            try
            {
                return await RestClient.GetUpdateComplianceAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress receiving new updates. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UpdateCompliance> GetUpdateCompliance(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetUpdateCompliance");
            scope.Start();
            try
            {
                return RestClient.GetUpdateCompliance(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a count of how many devices have a device tag. </summary>
        /// <param name="tagName"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeviceTag>> GetDeviceTagAsync(string tagName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceTag");
            scope.Start();
            try
            {
                return await RestClient.GetDeviceTagAsync(tagName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a count of how many devices have a device tag. </summary>
        /// <param name="tagName"> Tag name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeviceTag> GetDeviceTag(string tagName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceTag");
            scope.Start();
            try
            {
                return RestClient.GetDeviceTag(tagName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a group. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Group>> GetGroupAsync(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetGroup");
            scope.Start();
            try
            {
                return await RestClient.GetGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a group. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Group> GetGroup(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetGroup");
            scope.Start();
            try
            {
                return RestClient.GetGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a device group. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="group"> The group properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Group>> CreateOrUpdateGroupAsync(string groupId, Group group, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.CreateOrUpdateGroup");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateGroupAsync(groupId, group, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a device group. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="group"> The group properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Group> CreateOrUpdateGroup(string groupId, Group group, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.CreateOrUpdateGroup");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateGroup(groupId, group, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a device group. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteGroupAsync(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.DeleteGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a device group. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteGroup(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.DeleteGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get group update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<UpdateCompliance>> GetGroupUpdateComplianceAsync(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetGroupUpdateCompliance");
            scope.Start();
            try
            {
                return await RestClient.GetGroupUpdateComplianceAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get group update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<UpdateCompliance> GetGroupUpdateCompliance(string groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetGroupUpdateCompliance");
            scope.Start();
            try
            {
                return RestClient.GetGroupUpdateCompliance(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<DeviceClass> GetAllDeviceClassesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DeviceClass>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDeviceClasses");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllDeviceClassesAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceClass>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDeviceClasses");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllDeviceClassesNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<DeviceClass> GetAllDeviceClasses(CancellationToken cancellationToken = default)
        {
            Page<DeviceClass> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDeviceClasses");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllDeviceClasses(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceClass> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDeviceClasses");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllDeviceClassesNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of device identifiers in a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        public virtual AsyncPageable<string> GetDeviceClassDeviceIdsAsync(string deviceClassId, CancellationToken cancellationToken = default)
        {
            if (deviceClassId == null)
            {
                throw new ArgumentNullException(nameof(deviceClassId));
            }

            async Task<Page<string>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClassDeviceIds");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDeviceClassDeviceIdsAsync(deviceClassId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<string>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClassDeviceIds");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDeviceClassDeviceIdsNextPageAsync(nextLink, deviceClassId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of device identifiers in a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        public virtual Pageable<string> GetDeviceClassDeviceIds(string deviceClassId, CancellationToken cancellationToken = default)
        {
            if (deviceClassId == null)
            {
                throw new ArgumentNullException(nameof(deviceClassId));
            }

            Page<string> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClassDeviceIds");
                scope.Start();
                try
                {
                    var response = RestClient.GetDeviceClassDeviceIds(deviceClassId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<string> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClassDeviceIds");
                scope.Start();
                try
                {
                    var response = RestClient.GetDeviceClassDeviceIdsNextPage(nextLink, deviceClassId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of installable updates for a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        public virtual AsyncPageable<UpdateId> GetDeviceClassInstallableUpdatesAsync(string deviceClassId, CancellationToken cancellationToken = default)
        {
            if (deviceClassId == null)
            {
                throw new ArgumentNullException(nameof(deviceClassId));
            }

            async Task<Page<UpdateId>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClassInstallableUpdates");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDeviceClassInstallableUpdatesAsync(deviceClassId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<UpdateId>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClassInstallableUpdates");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDeviceClassInstallableUpdatesNextPageAsync(nextLink, deviceClassId, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of installable updates for a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        public virtual Pageable<UpdateId> GetDeviceClassInstallableUpdates(string deviceClassId, CancellationToken cancellationToken = default)
        {
            if (deviceClassId == null)
            {
                throw new ArgumentNullException(nameof(deviceClassId));
            }

            Page<UpdateId> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClassInstallableUpdates");
                scope.Start();
                try
                {
                    var response = RestClient.GetDeviceClassInstallableUpdates(deviceClassId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<UpdateId> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetDeviceClassInstallableUpdates");
                scope.Start();
                try
                {
                    var response = RestClient.GetDeviceClassInstallableUpdatesNextPage(nextLink, deviceClassId, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of devices connected to Device Update for IoT Hub. </summary>
        /// <param name="filter"> Restricts the set of devices returned. You can only filter on device GroupId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Device> GetAllDevicesAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Device>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllDevicesAsync(filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Device>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllDevicesNextPageAsync(nextLink, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of devices connected to Device Update for IoT Hub. </summary>
        /// <param name="filter"> Restricts the set of devices returned. You can only filter on device GroupId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Device> GetAllDevices(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Device> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDevices");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllDevices(filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Device> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDevices");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllDevicesNextPage(nextLink, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of available group device tags for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<DeviceTag> GetAllDeviceTagsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DeviceTag>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDeviceTags");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllDeviceTagsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeviceTag>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDeviceTags");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllDeviceTagsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of available group device tags for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<DeviceTag> GetAllDeviceTags(CancellationToken cancellationToken = default)
        {
            Page<DeviceTag> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDeviceTags");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllDeviceTags(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeviceTag> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllDeviceTags");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllDeviceTagsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all device groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Group> GetAllGroupsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Group>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllGroups");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllGroupsAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Group>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllGroups");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllGroupsNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of all device groups. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Group> GetAllGroups(CancellationToken cancellationToken = default)
        {
            Page<Group> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllGroups");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllGroups(cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Group> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetAllGroups");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllGroupsNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the best available updates for a group and a count of how many devices need each update. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="filter"> Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        public virtual AsyncPageable<UpdatableDevices> GetGroupBestUpdatesAsync(string groupId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }

            async Task<Page<UpdatableDevices>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetGroupBestUpdates");
                scope.Start();
                try
                {
                    var response = await RestClient.GetGroupBestUpdatesAsync(groupId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<UpdatableDevices>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetGroupBestUpdates");
                scope.Start();
                try
                {
                    var response = await RestClient.GetGroupBestUpdatesNextPageAsync(nextLink, groupId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Get the best available updates for a group and a count of how many devices need each update. </summary>
        /// <param name="groupId"> Group identifier. </param>
        /// <param name="filter"> Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        public virtual Pageable<UpdatableDevices> GetGroupBestUpdates(string groupId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (groupId == null)
            {
                throw new ArgumentNullException(nameof(groupId));
            }

            Page<UpdatableDevices> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetGroupBestUpdates");
                scope.Start();
                try
                {
                    var response = RestClient.GetGroupBestUpdates(groupId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<UpdatableDevices> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DevicesClient.GetGroupBestUpdates");
                scope.Start();
                try
                {
                    var response = RestClient.GetGroupBestUpdatesNextPage(nextLink, groupId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
