// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeviceUpdate.Models
{
    public partial class RemotePrivateEndpoint : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsCollectionDefined(ManualPrivateLinkServiceConnections))
            {
                writer.WritePropertyName("manualPrivateLinkServiceConnections");
                writer.WriteStartArray();
                foreach (var item in ManualPrivateLinkServiceConnections)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PrivateLinkServiceConnections))
            {
                writer.WritePropertyName("privateLinkServiceConnections");
                writer.WriteStartArray();
                foreach (var item in PrivateLinkServiceConnections)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PrivateLinkServiceProxies))
            {
                writer.WritePropertyName("privateLinkServiceProxies");
                writer.WriteStartArray();
                foreach (var item in PrivateLinkServiceProxies)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ConnectionDetails))
            {
                writer.WritePropertyName("connectionDetails");
                writer.WriteStartArray();
                foreach (var item in ConnectionDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static RemotePrivateEndpoint DeserializeRemotePrivateEndpoint(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> vnetTrafficTag = default;
            Optional<IList<PrivateLinkServiceConnection>> manualPrivateLinkServiceConnections = default;
            Optional<IList<PrivateLinkServiceConnection>> privateLinkServiceConnections = default;
            Optional<IList<PrivateLinkServiceProxy>> privateLinkServiceProxies = default;
            Optional<IList<ConnectionDetails>> connectionDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vnetTrafficTag"))
                {
                    vnetTrafficTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("manualPrivateLinkServiceConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PrivateLinkServiceConnection> array = new List<PrivateLinkServiceConnection>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PrivateLinkServiceConnection.DeserializePrivateLinkServiceConnection(item));
                    }
                    manualPrivateLinkServiceConnections = array;
                    continue;
                }
                if (property.NameEquals("privateLinkServiceConnections"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PrivateLinkServiceConnection> array = new List<PrivateLinkServiceConnection>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PrivateLinkServiceConnection.DeserializePrivateLinkServiceConnection(item));
                    }
                    privateLinkServiceConnections = array;
                    continue;
                }
                if (property.NameEquals("privateLinkServiceProxies"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PrivateLinkServiceProxy> array = new List<PrivateLinkServiceProxy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PrivateLinkServiceProxy.DeserializePrivateLinkServiceProxy(item));
                    }
                    privateLinkServiceProxies = array;
                    continue;
                }
                if (property.NameEquals("connectionDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ConnectionDetails> array = new List<ConnectionDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.ConnectionDetails.DeserializeConnectionDetails(item));
                    }
                    connectionDetails = array;
                    continue;
                }
            }
            return new RemotePrivateEndpoint(id.Value, vnetTrafficTag.Value, Optional.ToList(manualPrivateLinkServiceConnections), Optional.ToList(privateLinkServiceConnections), Optional.ToList(privateLinkServiceProxies), Optional.ToList(connectionDetails));
        }
    }
}
