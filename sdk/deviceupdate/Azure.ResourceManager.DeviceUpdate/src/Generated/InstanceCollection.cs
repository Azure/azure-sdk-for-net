// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.DeviceUpdate.Models;

namespace Azure.ResourceManager.DeviceUpdate
{
    /// <summary> A class representing collection of Instance and their operations over its parent. </summary>
    public partial class InstanceCollection : ArmCollection, IEnumerable<Instance>, IAsyncEnumerable<Instance>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly InstancesRestOperations _instancesRestClient;

        /// <summary> Initializes a new instance of the <see cref="InstanceCollection"/> class for mocking. </summary>
        protected InstanceCollection()
        {
        }

        /// <summary> Initializes a new instance of InstanceCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal InstanceCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _instancesRestClient = new InstancesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => Account.ResourceType;

        // Collection level operations.

        /// <summary> Creates or updates instance. </summary>
        /// <param name="instanceName"> Instance name. </param>
        /// <param name="instance"> Instance details. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> or <paramref name="instance"/> is null. </exception>
        public virtual InstanceCreateOperation CreateOrUpdate(string instanceName, InstanceData instance, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (instanceName == null)
            {
                throw new ArgumentNullException(nameof(instanceName));
            }
            if (instance == null)
            {
                throw new ArgumentNullException(nameof(instance));
            }

            using var scope = _clientDiagnostics.CreateScope("InstanceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _instancesRestClient.Create(Id.ResourceGroupName, Id.Name, instanceName, instance, cancellationToken);
                var operation = new InstanceCreateOperation(Parent, _clientDiagnostics, Pipeline, _instancesRestClient.CreateCreateRequest(Id.ResourceGroupName, Id.Name, instanceName, instance).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates instance. </summary>
        /// <param name="instanceName"> Instance name. </param>
        /// <param name="instance"> Instance details. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> or <paramref name="instance"/> is null. </exception>
        public async virtual Task<InstanceCreateOperation> CreateOrUpdateAsync(string instanceName, InstanceData instance, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (instanceName == null)
            {
                throw new ArgumentNullException(nameof(instanceName));
            }
            if (instance == null)
            {
                throw new ArgumentNullException(nameof(instance));
            }

            using var scope = _clientDiagnostics.CreateScope("InstanceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _instancesRestClient.CreateAsync(Id.ResourceGroupName, Id.Name, instanceName, instance, cancellationToken).ConfigureAwait(false);
                var operation = new InstanceCreateOperation(Parent, _clientDiagnostics, Pipeline, _instancesRestClient.CreateCreateRequest(Id.ResourceGroupName, Id.Name, instanceName, instance).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns instance details for the given instance and account name. </summary>
        /// <param name="instanceName"> Instance name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual Response<Instance> Get(string instanceName, CancellationToken cancellationToken = default)
        {
            if (instanceName == null)
            {
                throw new ArgumentNullException(nameof(instanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("InstanceCollection.Get");
            scope.Start();
            try
            {
                var response = _instancesRestClient.Get(Id.ResourceGroupName, Id.Name, instanceName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Instance(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns instance details for the given instance and account name. </summary>
        /// <param name="instanceName"> Instance name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public async virtual Task<Response<Instance>> GetAsync(string instanceName, CancellationToken cancellationToken = default)
        {
            if (instanceName == null)
            {
                throw new ArgumentNullException(nameof(instanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("InstanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _instancesRestClient.GetAsync(Id.ResourceGroupName, Id.Name, instanceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Instance(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="instanceName"> Instance name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual Response<Instance> GetIfExists(string instanceName, CancellationToken cancellationToken = default)
        {
            if (instanceName == null)
            {
                throw new ArgumentNullException(nameof(instanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("InstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _instancesRestClient.Get(Id.ResourceGroupName, Id.Name, instanceName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<Instance>(null, response.GetRawResponse())
                    : Response.FromValue(new Instance(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="instanceName"> Instance name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public async virtual Task<Response<Instance>> GetIfExistsAsync(string instanceName, CancellationToken cancellationToken = default)
        {
            if (instanceName == null)
            {
                throw new ArgumentNullException(nameof(instanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("InstanceCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _instancesRestClient.GetAsync(Id.ResourceGroupName, Id.Name, instanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<Instance>(null, response.GetRawResponse())
                    : Response.FromValue(new Instance(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="instanceName"> Instance name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string instanceName, CancellationToken cancellationToken = default)
        {
            if (instanceName == null)
            {
                throw new ArgumentNullException(nameof(instanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("InstanceCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(instanceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="instanceName"> Instance name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="instanceName"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string instanceName, CancellationToken cancellationToken = default)
        {
            if (instanceName == null)
            {
                throw new ArgumentNullException(nameof(instanceName));
            }

            using var scope = _clientDiagnostics.CreateScope("InstanceCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(instanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns instances for the given account name. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Instance" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Instance> GetAll(CancellationToken cancellationToken = default)
        {
            Page<Instance> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("InstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _instancesRestClient.ListByAccount(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Instance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Instance> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("InstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _instancesRestClient.ListByAccountNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Instance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns instances for the given account name. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Instance" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Instance> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Instance>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("InstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _instancesRestClient.ListByAccountAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Instance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Instance>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("InstanceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _instancesRestClient.ListByAccountNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Instance(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<Instance> IEnumerable<Instance>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<Instance> IAsyncEnumerable<Instance>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, Instance, InstanceData> Construct() { }
    }
}
