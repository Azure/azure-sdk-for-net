// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeviceUpdate
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrivateEndpointConnectionProxiesOperations.
    /// </summary>
    public static partial class PrivateEndpointConnectionProxiesOperationsExtensions
    {
            /// <summary>
            /// (INTERNAL - DO NOT USE) List all private endpoint connection proxies in a
            /// device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            public static IEnumerable<PrivateEndpointConnectionProxy> ListByAccount(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListByAccountAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) List all private endpoint connection proxies in a
            /// device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<PrivateEndpointConnectionProxy>> ListByAccountAsync(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAccountWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Validates a private endpoint connection proxy
            /// object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='privateEndpointConnectionProxy'>
            /// The parameters for creating a private endpoint connection proxy.
            /// </param>
            public static void Validate(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, PrivateEndpointConnectionProxy privateEndpointConnectionProxy)
            {
                operations.ValidateAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, privateEndpointConnectionProxy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Validates a private endpoint connection proxy
            /// object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='privateEndpointConnectionProxy'>
            /// The parameters for creating a private endpoint connection proxy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ValidateAsync(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, PrivateEndpointConnectionProxy privateEndpointConnectionProxy, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ValidateWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, privateEndpointConnectionProxy, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Get the specified private endpoint connection proxy
            /// associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            public static PrivateEndpointConnectionProxy Get(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId)
            {
                return operations.GetAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Get the specified private endpoint connection proxy
            /// associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateEndpointConnectionProxy> GetAsync(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Creates or updates the specified private endpoint
            /// connection proxy resource associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='privateEndpointConnectionProxy'>
            /// The parameters for creating a private endpoint connection proxy.
            /// </param>
            public static PrivateEndpointConnectionProxy CreateOrUpdate(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, PrivateEndpointConnectionProxy privateEndpointConnectionProxy)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, privateEndpointConnectionProxy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Creates or updates the specified private endpoint
            /// connection proxy resource associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='privateEndpointConnectionProxy'>
            /// The parameters for creating a private endpoint connection proxy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateEndpointConnectionProxy> CreateOrUpdateAsync(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, PrivateEndpointConnectionProxy privateEndpointConnectionProxy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, privateEndpointConnectionProxy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Deletes the specified private endpoint connection
            /// proxy associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            public static void Delete(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId)
            {
                operations.DeleteAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Deletes the specified private endpoint connection
            /// proxy associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Creates or updates the specified private endpoint
            /// connection proxy resource associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='privateEndpointConnectionProxy'>
            /// The parameters for creating a private endpoint connection proxy.
            /// </param>
            public static PrivateEndpointConnectionProxy BeginCreateOrUpdate(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, PrivateEndpointConnectionProxy privateEndpointConnectionProxy)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, privateEndpointConnectionProxy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Creates or updates the specified private endpoint
            /// connection proxy resource associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='privateEndpointConnectionProxy'>
            /// The parameters for creating a private endpoint connection proxy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateEndpointConnectionProxy> BeginCreateOrUpdateAsync(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, PrivateEndpointConnectionProxy privateEndpointConnectionProxy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, privateEndpointConnectionProxy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Deletes the specified private endpoint connection
            /// proxy associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            public static void BeginDelete(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId)
            {
                operations.BeginDeleteAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// (INTERNAL - DO NOT USE) Deletes the specified private endpoint connection
            /// proxy associated with the device update account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name.
            /// </param>
            /// <param name='accountName'>
            /// Account name.
            /// </param>
            /// <param name='privateEndpointConnectionProxyId'>
            /// The ID of the private endpoint connection proxy object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IPrivateEndpointConnectionProxiesOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionProxyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionProxyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
