// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeviceUpdate.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Remote private endpoint details.
    /// </summary>
    public partial class RemotePrivateEndpoint
    {
        /// <summary>
        /// Initializes a new instance of the RemotePrivateEndpoint class.
        /// </summary>
        public RemotePrivateEndpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RemotePrivateEndpoint class.
        /// </summary>
        /// <param name="id">Remote endpoint resource ID.</param>
        /// <param name="vnetTrafficTag">Virtual network traffic tag.</param>
        /// <param name="manualPrivateLinkServiceConnections">List of private
        /// link service connections that need manual approval.</param>
        /// <param name="privateLinkServiceConnections">List of automatically
        /// approved private link service connections.</param>
        /// <param name="privateLinkServiceProxies">List of private link
        /// service proxies.</param>
        /// <param name="connectionDetails">List of connection details.</param>
        public RemotePrivateEndpoint(string id = default(string), string vnetTrafficTag = default(string), IList<PrivateLinkServiceConnection> manualPrivateLinkServiceConnections = default(IList<PrivateLinkServiceConnection>), IList<PrivateLinkServiceConnection> privateLinkServiceConnections = default(IList<PrivateLinkServiceConnection>), IList<PrivateLinkServiceProxy> privateLinkServiceProxies = default(IList<PrivateLinkServiceProxy>), IList<ConnectionDetails> connectionDetails = default(IList<ConnectionDetails>))
        {
            Id = id;
            VnetTrafficTag = vnetTrafficTag;
            ManualPrivateLinkServiceConnections = manualPrivateLinkServiceConnections;
            PrivateLinkServiceConnections = privateLinkServiceConnections;
            PrivateLinkServiceProxies = privateLinkServiceProxies;
            ConnectionDetails = connectionDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets remote endpoint resource ID.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets virtual network traffic tag.
        /// </summary>
        [JsonProperty(PropertyName = "vnetTrafficTag")]
        public string VnetTrafficTag { get; private set; }

        /// <summary>
        /// Gets or sets list of private link service connections that need
        /// manual approval.
        /// </summary>
        [JsonProperty(PropertyName = "manualPrivateLinkServiceConnections")]
        public IList<PrivateLinkServiceConnection> ManualPrivateLinkServiceConnections { get; set; }

        /// <summary>
        /// Gets or sets list of automatically approved private link service
        /// connections.
        /// </summary>
        [JsonProperty(PropertyName = "privateLinkServiceConnections")]
        public IList<PrivateLinkServiceConnection> PrivateLinkServiceConnections { get; set; }

        /// <summary>
        /// Gets or sets list of private link service proxies.
        /// </summary>
        [JsonProperty(PropertyName = "privateLinkServiceProxies")]
        public IList<PrivateLinkServiceProxy> PrivateLinkServiceProxies { get; set; }

        /// <summary>
        /// Gets or sets list of connection details.
        /// </summary>
        [JsonProperty(PropertyName = "connectionDetails")]
        public IList<ConnectionDetails> ConnectionDetails { get; set; }

    }
}
