// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> The DeviceUpdate service client. </summary>
    public partial class DeviceUpdateClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://api.adu.microsoft.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _instanceId;
        private readonly string _apiVersion;
        internal ClientDiagnostics ClientDiagnostics { get; }
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DeviceUpdateClient for mocking. </summary>
        protected DeviceUpdateClient()
        {
        }

        /// <summary> Initializes a new instance of DeviceUpdateClient. </summary>
        /// <param name="endpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="instanceId"/>, or <paramref name="credential"/> is null. </exception>
        public DeviceUpdateClient(string endpoint, string instanceId, TokenCredential credential, DeviceUpdateClientOptions options = null)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(instanceId, nameof(instanceId));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new DeviceUpdateClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _instanceId = instanceId;
            _apiVersion = options.Version;
        }

        /// <summary> Get a specific update version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/>, or <paramref name="version"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   updateId: {
        ///     provider: string,
        ///     name: string,
        ///     version: string
        ///   },
        ///   description: string,
        ///   friendlyName: string,
        ///   isDeployable: boolean,
        ///   updateType: string,
        ///   installedCriteria: string,
        ///   compatibility: [Dictionary&lt;string, string&gt;],
        ///   instructions: {
        ///     steps: [
        ///       {
        ///         type: &quot;Inline&quot; | &quot;Reference&quot;,
        ///         description: string,
        ///         handler: string,
        ///         handlerProperties: AnyObject,
        ///         files: [string],
        ///         updateId: UpdateId
        ///       }
        ///     ]
        ///   },
        ///   referencedBy: [UpdateId],
        ///   scanResult: string,
        ///   manifestVersion: string,
        ///   importedDateTime: string (ISO 8601 Format),
        ///   createdDateTime: string (ISO 8601 Format),
        ///   etag: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetUpdateAsync(string provider, string name, string version, ETag? ifNoneMatch = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.GetUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUpdateRequest(provider, name, version, ifNoneMatch, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific update version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/>, or <paramref name="version"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   updateId: {
        ///     provider: string,
        ///     name: string,
        ///     version: string
        ///   },
        ///   description: string,
        ///   friendlyName: string,
        ///   isDeployable: boolean,
        ///   updateType: string,
        ///   installedCriteria: string,
        ///   compatibility: [Dictionary&lt;string, string&gt;],
        ///   instructions: {
        ///     steps: [
        ///       {
        ///         type: &quot;Inline&quot; | &quot;Reference&quot;,
        ///         description: string,
        ///         handler: string,
        ///         handlerProperties: AnyObject,
        ///         files: [string],
        ///         updateId: UpdateId
        ///       }
        ///     ]
        ///   },
        ///   referencedBy: [UpdateId],
        ///   scanResult: string,
        ///   manifestVersion: string,
        ///   importedDateTime: string (ISO 8601 Format),
        ///   createdDateTime: string (ISO 8601 Format),
        ///   etag: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetUpdate(string provider, string name, string version, ETag? ifNoneMatch = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.GetUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUpdateRequest(provider, name, version, ifNoneMatch, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific update file from the version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="fileId"> File identifier. </param>
        /// <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/>, <paramref name="version"/>, or <paramref name="fileId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   fileId: string,
        ///   fileName: string,
        ///   sizeInBytes: number,
        ///   hashes: Dictionary&lt;string, string&gt;,
        ///   mimeType: string,
        ///   scanResult: string,
        ///   scanDetails: string,
        ///   etag: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetFileAsync(string provider, string name, string version, string fileId, ETag? ifNoneMatch = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));
            Argument.AssertNotNull(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.GetFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFileRequest(provider, name, version, fileId, ifNoneMatch, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specific update file from the version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="fileId"> File identifier. </param>
        /// <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/>, <paramref name="version"/>, or <paramref name="fileId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   fileId: string,
        ///   fileName: string,
        ///   sizeInBytes: number,
        ///   hashes: Dictionary&lt;string, string&gt;,
        ///   mimeType: string,
        ///   scanResult: string,
        ///   scanDetails: string,
        ///   etag: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetFile(string provider, string name, string version, string fileId, ETag? ifNoneMatch = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));
            Argument.AssertNotNull(fileId, nameof(fileId));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.GetFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFileRequest(provider, name, version, fileId, ifNoneMatch, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve operation status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string,
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;,
        ///   updateId: {
        ///     provider: string,
        ///     name: string,
        ///     version: string
        ///   },
        ///   resourceLocation: string,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   },
        ///   traceId: string,
        ///   lastActionDateTime: string (ISO 8601 Format),
        ///   createdDateTime: string (ISO 8601 Format),
        ///   etag: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetOperationAsync(string operationId, ETag? ifNoneMatch = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.GetOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetOperationRequest(operationId, ifNoneMatch, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve operation status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string,
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;,
        ///   updateId: {
        ///     provider: string,
        ///     name: string,
        ///     version: string
        ///   },
        ///   resourceLocation: string,
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   },
        ///   traceId: string,
        ///   lastActionDateTime: string (ISO 8601 Format),
        ///   createdDateTime: string (ISO 8601 Format),
        ///   etag: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetOperation(string operationId, ETag? ifNoneMatch = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.GetOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetOperationRequest(operationId, ifNoneMatch, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a list of all updates that have been imported to Device Update for IoT Hub. </summary>
        /// <param name="search"> Request updates matching a free-text search expression. </param>
        /// <param name="filter"> Filter updates by its properties. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       updateId: {
        ///         provider: string,
        ///         name: string,
        ///         version: string
        ///       },
        ///       description: string,
        ///       friendlyName: string,
        ///       isDeployable: boolean,
        ///       updateType: string,
        ///       installedCriteria: string,
        ///       compatibility: [Dictionary&lt;string, string&gt;],
        ///       instructions: {
        ///         steps: [
        ///           {
        ///             type: &quot;Inline&quot; | &quot;Reference&quot;,
        ///             description: string,
        ///             handler: string,
        ///             handlerProperties: AnyObject,
        ///             files: [string],
        ///             updateId: UpdateId
        ///           }
        ///         ]
        ///       },
        ///       referencedBy: [UpdateId],
        ///       scanResult: string,
        ///       manifestVersion: string,
        ///       importedDateTime: string (ISO 8601 Format),
        ///       createdDateTime: string (ISO 8601 Format),
        ///       etag: string
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetUpdatesAsync(string search = null, string filter = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "DeviceUpdateClient.GetUpdates");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetUpdatesRequest(search, filter, context)
                        : CreateGetUpdatesNextPageRequest(nextLink, search, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all updates that have been imported to Device Update for IoT Hub. </summary>
        /// <param name="search"> Request updates matching a free-text search expression. </param>
        /// <param name="filter"> Filter updates by its properties. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       updateId: {
        ///         provider: string,
        ///         name: string,
        ///         version: string
        ///       },
        ///       description: string,
        ///       friendlyName: string,
        ///       isDeployable: boolean,
        ///       updateType: string,
        ///       installedCriteria: string,
        ///       compatibility: [Dictionary&lt;string, string&gt;],
        ///       instructions: {
        ///         steps: [
        ///           {
        ///             type: &quot;Inline&quot; | &quot;Reference&quot;,
        ///             description: string,
        ///             handler: string,
        ///             handlerProperties: AnyObject,
        ///             files: [string],
        ///             updateId: UpdateId
        ///           }
        ///         ]
        ///       },
        ///       referencedBy: [UpdateId],
        ///       scanResult: string,
        ///       manifestVersion: string,
        ///       importedDateTime: string (ISO 8601 Format),
        ///       createdDateTime: string (ISO 8601 Format),
        ///       etag: string
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetUpdates(string search = null, string filter = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "DeviceUpdateClient.GetUpdates");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetUpdatesRequest(search, filter, context)
                        : CreateGetUpdatesNextPageRequest(nextLink, search, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all update providers that have been imported to Device Update for IoT Hub. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [string],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetProvidersAsync(RequestContext context = null)
#pragma warning restore AZC0002
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "DeviceUpdateClient.GetProviders");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetProvidersRequest(context)
                        : CreateGetProvidersNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all update providers that have been imported to Device Update for IoT Hub. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [string],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetProviders(RequestContext context = null)
#pragma warning restore AZC0002
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "DeviceUpdateClient.GetProviders");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetProvidersRequest(context)
                        : CreateGetProvidersNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all update names that match the specified provider. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [string],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetNamesAsync(string provider, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));

            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "DeviceUpdateClient.GetNames");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetNamesRequest(provider, context)
                        : CreateGetNamesNextPageRequest(nextLink, provider, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all update names that match the specified provider. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [string],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetNames(string provider, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));

            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "DeviceUpdateClient.GetNames");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetNamesRequest(provider, context)
                        : CreateGetNamesNextPageRequest(nextLink, provider, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all update versions that match the specified provider and name. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="filter"> Filter updates by its properties. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> or <paramref name="name"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [string],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetVersionsAsync(string provider, string name, string filter = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));

            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "DeviceUpdateClient.GetVersions");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetVersionsRequest(provider, name, filter, context)
                        : CreateGetVersionsNextPageRequest(nextLink, provider, name, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all update versions that match the specified provider and name. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="filter"> Filter updates by its properties. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/> or <paramref name="name"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [string],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetVersions(string provider, string name, string filter = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));

            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "DeviceUpdateClient.GetVersions");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetVersionsRequest(provider, name, filter, context)
                        : CreateGetVersionsNextPageRequest(nextLink, provider, name, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all update file identifiers for the specified version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/>, or <paramref name="version"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [string],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetFilesAsync(string provider, string name, string version, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));

            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "DeviceUpdateClient.GetFiles");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetFilesRequest(provider, name, version, context)
                        : CreateGetFilesNextPageRequest(nextLink, provider, name, version, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all update file identifiers for the specified version. </summary>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/>, or <paramref name="version"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [string],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetFiles(string provider, string name, string version, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));

            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "DeviceUpdateClient.GetFiles");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetFilesRequest(provider, name, version, context)
                        : CreateGetFilesNextPageRequest(nextLink, provider, name, version, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete operations are not returned by this API version. </summary>
        /// <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: &quot;status eq &apos;NotStarted&apos; or status eq &apos;Running&apos;&quot;. </param>
        /// <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       operationId: string,
        ///       status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;,
        ///       updateId: {
        ///         provider: string,
        ///         name: string,
        ///         version: string
        ///       },
        ///       resourceLocation: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [Error],
        ///         innererror: {
        ///           code: string,
        ///           message: string,
        ///           errorDetail: string,
        ///           innerError: InnerError
        ///         },
        ///         occurredDateTime: string (ISO 8601 Format)
        ///       },
        ///       traceId: string,
        ///       lastActionDateTime: string (ISO 8601 Format),
        ///       createdDateTime: string (ISO 8601 Format),
        ///       etag: string
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetOperationsAsync(string filter = null, int? top = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "DeviceUpdateClient.GetOperations");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetOperationsRequest(filter, top, context)
                        : CreateGetOperationsNextPageRequest(nextLink, filter, top, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete operations are not returned by this API version. </summary>
        /// <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: &quot;status eq &apos;NotStarted&apos; or status eq &apos;Running&apos;&quot;. </param>
        /// <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       operationId: string,
        ///       status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;,
        ///       updateId: {
        ///         provider: string,
        ///         name: string,
        ///         version: string
        ///       },
        ///       resourceLocation: string,
        ///       error: {
        ///         code: string,
        ///         message: string,
        ///         target: string,
        ///         details: [Error],
        ///         innererror: {
        ///           code: string,
        ///           message: string,
        ///           errorDetail: string,
        ///           innerError: InnerError
        ///         },
        ///         occurredDateTime: string (ISO 8601 Format)
        ///       },
        ///       traceId: string,
        ///       lastActionDateTime: string (ISO 8601 Format),
        ///       createdDateTime: string (ISO 8601 Format),
        ///       etag: string
        ///     }
        ///   ],
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetOperations(string filter = null, int? top = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "DeviceUpdateClient.GetOperations");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetOperationsRequest(filter, top, context)
                        : CreateGetOperationsNextPageRequest(nextLink, filter, top, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Import new update version. </summary>
        /// <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="action"> Import update action. Allowed values: &quot;import&quot;. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   importManifest: {
        ///     url: string (required),
        ///     sizeInBytes: number (required),
        ///     hashes: Dictionary&lt;string, string&gt; (required)
        ///   } (required),
        ///   friendlyName: string,
        ///   files: [
        ///     {
        ///       filename: string (required),
        ///       url: string (required)
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   updateId: {
        ///     provider: string,
        ///     name: string,
        ///     version: string
        ///   },
        ///   description: string,
        ///   friendlyName: string,
        ///   isDeployable: boolean,
        ///   updateType: string,
        ///   installedCriteria: string,
        ///   compatibility: [Dictionary&lt;string, string&gt;],
        ///   instructions: {
        ///     steps: [
        ///       {
        ///         type: &quot;Inline&quot; | &quot;Reference&quot;,
        ///         description: string,
        ///         handler: string,
        ///         handlerProperties: AnyObject,
        ///         files: [string],
        ///         updateId: UpdateId
        ///       }
        ///     ]
        ///   },
        ///   referencedBy: [UpdateId],
        ///   scanResult: string,
        ///   manifestVersion: string,
        ///   importedDateTime: string (ISO 8601 Format),
        ///   createdDateTime: string (ISO 8601 Format),
        ///   etag: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Operation<BinaryData>> ImportUpdateAsync(bool waitForCompletion, string action, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(action, nameof(action));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.ImportUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportUpdateRequest(action, content, context);
                return await LowLevelOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DeviceUpdateClient.ImportUpdate", OperationFinalStateVia.Location, context, waitForCompletion).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import new update version. </summary>
        /// <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="action"> Import update action. Allowed values: &quot;import&quot;. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> or <paramref name="content"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   importManifest: {
        ///     url: string (required),
        ///     sizeInBytes: number (required),
        ///     hashes: Dictionary&lt;string, string&gt; (required)
        ///   } (required),
        ///   friendlyName: string,
        ///   files: [
        ///     {
        ///       filename: string (required),
        ///       url: string (required)
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   updateId: {
        ///     provider: string,
        ///     name: string,
        ///     version: string
        ///   },
        ///   description: string,
        ///   friendlyName: string,
        ///   isDeployable: boolean,
        ///   updateType: string,
        ///   installedCriteria: string,
        ///   compatibility: [Dictionary&lt;string, string&gt;],
        ///   instructions: {
        ///     steps: [
        ///       {
        ///         type: &quot;Inline&quot; | &quot;Reference&quot;,
        ///         description: string,
        ///         handler: string,
        ///         handlerProperties: AnyObject,
        ///         files: [string],
        ///         updateId: UpdateId
        ///       }
        ///     ]
        ///   },
        ///   referencedBy: [UpdateId],
        ///   scanResult: string,
        ///   manifestVersion: string,
        ///   importedDateTime: string (ISO 8601 Format),
        ///   createdDateTime: string (ISO 8601 Format),
        ///   etag: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Operation<BinaryData> ImportUpdate(bool waitForCompletion, string action, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(action, nameof(action));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.ImportUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportUpdateRequest(action, content, context);
                return LowLevelOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DeviceUpdateClient.ImportUpdate", OperationFinalStateVia.Location, context, waitForCompletion);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a specific update version. </summary>
        /// <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/>, or <paramref name="version"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Operation<BinaryData>> DeleteUpdateAsync(bool waitForCompletion, string provider, string name, string version, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.DeleteUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteUpdateRequest(provider, name, version, context);
                return await LowLevelOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DeviceUpdateClient.DeleteUpdate", OperationFinalStateVia.Location, context, waitForCompletion).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a specific update version. </summary>
        /// <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="provider"> Update provider. </param>
        /// <param name="name"> Update name. </param>
        /// <param name="version"> Update version. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="name"/>, or <paramref name="version"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       message: string,
        ///       errorDetail: string,
        ///       innerError: InnerError
        ///     },
        ///     occurredDateTime: string (ISO 8601 Format)
        ///   }
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Operation<BinaryData> DeleteUpdate(bool waitForCompletion, string provider, string name, string version, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(version, nameof(version));

            using var scope = ClientDiagnostics.CreateScope("DeviceUpdateClient.DeleteUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteUpdateRequest(provider, name, version, context);
                return LowLevelOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DeviceUpdateClient.DeleteUpdate", OperationFinalStateVia.Location, context, waitForCompletion);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateImportUpdateRequest(string action, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates", false);
            uri.AppendQuery("action", action, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier202.Instance;
            return message;
        }

        internal HttpMessage CreateGetUpdatesRequest(string search, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (search != null)
            {
                uri.AppendQuery("$search", search, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetUpdateRequest(string provider, string name, string version, ETag? ifNoneMatch, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/providers/", false);
            uri.AppendPath(provider, true);
            uri.AppendPath("/names/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(version, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (ifNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", ifNoneMatch.Value);
            }
            message.ResponseClassifier = ResponseClassifier200304.Instance;
            return message;
        }

        internal HttpMessage CreateDeleteUpdateRequest(string provider, string name, string version, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/providers/", false);
            uri.AppendPath(provider, true);
            uri.AppendPath("/names/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(version, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier202.Instance;
            return message;
        }

        internal HttpMessage CreateGetProvidersRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/providers", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetNamesRequest(string provider, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/providers/", false);
            uri.AppendPath(provider, true);
            uri.AppendPath("/names", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetVersionsRequest(string provider, string name, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/providers/", false);
            uri.AppendPath(provider, true);
            uri.AppendPath("/names/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetFilesRequest(string provider, string name, string version, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/providers/", false);
            uri.AppendPath(provider, true);
            uri.AppendPath("/names/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/files", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetFileRequest(string provider, string name, string version, string fileId, ETag? ifNoneMatch, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/providers/", false);
            uri.AppendPath(provider, true);
            uri.AppendPath("/names/", false);
            uri.AppendPath(name, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(fileId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (ifNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", ifNoneMatch.Value);
            }
            message.ResponseClassifier = ResponseClassifier200304.Instance;
            return message;
        }

        internal HttpMessage CreateGetOperationsRequest(string filter, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/operations", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetOperationRequest(string operationId, ETag? ifNoneMatch, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/updates/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (ifNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", ifNoneMatch.Value);
            }
            message.ResponseClassifier = ResponseClassifier200304.Instance;
            return message;
        }

        internal HttpMessage CreateGetUpdatesNextPageRequest(string nextLink, string search, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetProvidersNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetNamesNextPageRequest(string nextLink, string provider, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetVersionsNextPageRequest(string nextLink, string provider, string name, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetFilesNextPageRequest(string nextLink, string provider, string name, string version, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetOperationsNextPageRequest(string nextLink, string filter, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        private sealed class ResponseClassifier202 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier202();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    202 => false,
                    _ => true
                };
            }
        }
        private sealed class ResponseClassifier200 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier200();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    200 => false,
                    _ => true
                };
            }
        }
        private sealed class ResponseClassifier200304 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier200304();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    200 => false,
                    304 => false,
                    _ => true
                };
            }
        }
    }
}
