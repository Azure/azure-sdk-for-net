// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> The DeviceManagement service client. </summary>
    public partial class DeviceManagementClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://api.adu.microsoft.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _endpoint;
        private readonly string _instanceId;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DeviceManagementClient for mocking. </summary>
        protected DeviceManagementClient()
        {
        }

        /// <summary> Initializes a new instance of DeviceManagementClient. </summary>
        /// <param name="endpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="instanceId"/> or <paramref name="credential"/> is null. </exception>
        public DeviceManagementClient(string endpoint, string instanceId, TokenCredential credential) : this(endpoint, instanceId, credential, new DeviceUpdateClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DeviceManagementClient. </summary>
        /// <param name="endpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/>, <paramref name="instanceId"/> or <paramref name="credential"/> is null. </exception>
        public DeviceManagementClient(string endpoint, string instanceId, TokenCredential credential, DeviceUpdateClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(instanceId, nameof(instanceId));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new DeviceUpdateClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _instanceId = instanceId;
            _apiVersion = options.Version;
        }

        /// <summary> Gets the properties of a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deviceClassId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeviceClass
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deviceClassId: string, # Required. <Description>The device class identifier.</Description>
        ///   compatProperties: Dictionary&lt;string, string&gt;, # Required. <Description>The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property</Description>
        ///   bestCompatibleUpdateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDeviceClassAsync(string deviceClassId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(deviceClassId, nameof(deviceClassId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceClass");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeviceClassRequest(deviceClassId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deviceClassId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeviceClass
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deviceClassId: string, # Required. <Description>The device class identifier.</Description>
        ///   compatProperties: Dictionary&lt;string, string&gt;, # Required. <Description>The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property</Description>
        ///   bestCompatibleUpdateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDeviceClass(string deviceClassId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(deviceClassId, nameof(deviceClassId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceClass");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeviceClassRequest(deviceClassId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IoT Hub. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deviceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDevice
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deviceId: string, # Required. <Description>Device identity.</Description>
        ///   moduleId: string, # Optional. <Description>Device module identity.</Description>
        ///   deviceClassId: string, # Required. <Description>Device class identity.</Description>
        ///   manufacturer: string, # Required. <Description>Device manufacturer.</Description>
        ///   model: string, # Required. <Description>Device model.</Description>
        ///   groupId: string, # Optional. <Description>Device group identity.</Description>
        ///   lastAttemptedUpdateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Optional. <Description>Update identity.</Description>
        ///   deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Incompatible&quot;, # Optional. <Description>State of the device in its last deployment.</Description>
        ///   installedUpdateId: UpdateId, # Optional. <Description>Update identity.</Description>
        ///   onLatestUpdate: boolean, # Required. <Description>Boolean flag indicating whether the latest update is installed on the device</Description>
        ///   lastDeploymentId: string, # Optional. <Description>The deployment identifier for the last deployment to the device</Description>
        ///   lastInstallResult: {
        ///     resultCode: number, # Required. <Description>Install result code.</Description>
        ///     extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///     resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///     stepResults: [
        ///       {
        ///         updateId: UpdateId, # Optional. <Description>It is update id for update steps; otherwise it is null.</Description>
        ///         description: string, # Optional. <Description>Step description. It might be null for update steps.</Description>
        ///         resultCode: number, # Required. <Description>Install result code.</Description>
        ///         extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///         resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///       }
        ///     ], # Optional. <Description>Array of step results</Description>
        ///   }, # Optional. <Description>Last install result.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDeviceAsync(string deviceId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(deviceId, nameof(deviceId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDevice");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeviceRequest(deviceId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IoT Hub. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deviceId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDevice
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deviceId: string, # Required. <Description>Device identity.</Description>
        ///   moduleId: string, # Optional. <Description>Device module identity.</Description>
        ///   deviceClassId: string, # Required. <Description>Device class identity.</Description>
        ///   manufacturer: string, # Required. <Description>Device manufacturer.</Description>
        ///   model: string, # Required. <Description>Device model.</Description>
        ///   groupId: string, # Optional. <Description>Device group identity.</Description>
        ///   lastAttemptedUpdateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Optional. <Description>Update identity.</Description>
        ///   deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Incompatible&quot;, # Optional. <Description>State of the device in its last deployment.</Description>
        ///   installedUpdateId: UpdateId, # Optional. <Description>Update identity.</Description>
        ///   onLatestUpdate: boolean, # Required. <Description>Boolean flag indicating whether the latest update is installed on the device</Description>
        ///   lastDeploymentId: string, # Optional. <Description>The deployment identifier for the last deployment to the device</Description>
        ///   lastInstallResult: {
        ///     resultCode: number, # Required. <Description>Install result code.</Description>
        ///     extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///     resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///     stepResults: [
        ///       {
        ///         updateId: UpdateId, # Optional. <Description>It is update id for update steps; otherwise it is null.</Description>
        ///         description: string, # Optional. <Description>Step description. It might be null for update steps.</Description>
        ///         resultCode: number, # Required. <Description>Install result code.</Description>
        ///         extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///         resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///       }
        ///     ], # Optional. <Description>Array of step results</Description>
        ///   }, # Optional. <Description>Last install result.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDevice(string deviceId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(deviceId, nameof(deviceId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDevice");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeviceRequest(deviceId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device module properties and latest deployment status for a device module connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IoT Hub. </param>
        /// <param name="moduleId"> Device module identifier in Azure IoT Hub. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="moduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deviceId"/> or <paramref name="moduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeviceModule
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deviceId: string, # Required. <Description>Device identity.</Description>
        ///   moduleId: string, # Optional. <Description>Device module identity.</Description>
        ///   deviceClassId: string, # Required. <Description>Device class identity.</Description>
        ///   manufacturer: string, # Required. <Description>Device manufacturer.</Description>
        ///   model: string, # Required. <Description>Device model.</Description>
        ///   groupId: string, # Optional. <Description>Device group identity.</Description>
        ///   lastAttemptedUpdateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Optional. <Description>Update identity.</Description>
        ///   deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Incompatible&quot;, # Optional. <Description>State of the device in its last deployment.</Description>
        ///   installedUpdateId: UpdateId, # Optional. <Description>Update identity.</Description>
        ///   onLatestUpdate: boolean, # Required. <Description>Boolean flag indicating whether the latest update is installed on the device</Description>
        ///   lastDeploymentId: string, # Optional. <Description>The deployment identifier for the last deployment to the device</Description>
        ///   lastInstallResult: {
        ///     resultCode: number, # Required. <Description>Install result code.</Description>
        ///     extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///     resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///     stepResults: [
        ///       {
        ///         updateId: UpdateId, # Optional. <Description>It is update id for update steps; otherwise it is null.</Description>
        ///         description: string, # Optional. <Description>Step description. It might be null for update steps.</Description>
        ///         resultCode: number, # Required. <Description>Install result code.</Description>
        ///         extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///         resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///       }
        ///     ], # Optional. <Description>Array of step results</Description>
        ///   }, # Optional. <Description>Last install result.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDeviceModuleAsync(string deviceId, string moduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(deviceId, nameof(deviceId));
            Argument.AssertNotNullOrEmpty(moduleId, nameof(moduleId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceModule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeviceModuleRequest(deviceId, moduleId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the device module properties and latest deployment status for a device module connected to Device Update for IoT Hub. </summary>
        /// <param name="deviceId"> Device identifier in Azure IoT Hub. </param>
        /// <param name="moduleId"> Device module identifier in Azure IoT Hub. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceId"/> or <paramref name="moduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deviceId"/> or <paramref name="moduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeviceModule
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deviceId: string, # Required. <Description>Device identity.</Description>
        ///   moduleId: string, # Optional. <Description>Device module identity.</Description>
        ///   deviceClassId: string, # Required. <Description>Device class identity.</Description>
        ///   manufacturer: string, # Required. <Description>Device manufacturer.</Description>
        ///   model: string, # Required. <Description>Device model.</Description>
        ///   groupId: string, # Optional. <Description>Device group identity.</Description>
        ///   lastAttemptedUpdateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Optional. <Description>Update identity.</Description>
        ///   deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Incompatible&quot;, # Optional. <Description>State of the device in its last deployment.</Description>
        ///   installedUpdateId: UpdateId, # Optional. <Description>Update identity.</Description>
        ///   onLatestUpdate: boolean, # Required. <Description>Boolean flag indicating whether the latest update is installed on the device</Description>
        ///   lastDeploymentId: string, # Optional. <Description>The deployment identifier for the last deployment to the device</Description>
        ///   lastInstallResult: {
        ///     resultCode: number, # Required. <Description>Install result code.</Description>
        ///     extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///     resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///     stepResults: [
        ///       {
        ///         updateId: UpdateId, # Optional. <Description>It is update id for update steps; otherwise it is null.</Description>
        ///         description: string, # Optional. <Description>Step description. It might be null for update steps.</Description>
        ///         resultCode: number, # Required. <Description>Install result code.</Description>
        ///         extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///         resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///       }
        ///     ], # Optional. <Description>Array of step results</Description>
        ///   }, # Optional. <Description>Last install result.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDeviceModule(string deviceId, string moduleId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(deviceId, nameof(deviceId));
            Argument.AssertNotNullOrEmpty(moduleId, nameof(moduleId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceModule");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeviceModuleRequest(deviceId, moduleId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress receiving new updates. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetUpdateCompliance
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   totalDeviceCount: number, # Required. <Description>Total number of devices.</Description>
        ///   onLatestUpdateDeviceCount: number, # Required. <Description>Number of devices on the latest update.</Description>
        ///   newUpdatesAvailableDeviceCount: number, # Required. <Description>Number of devices with a newer update available.</Description>
        ///   updatesInProgressDeviceCount: number, # Required. <Description>Number of devices with update in-progress.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetUpdateComplianceAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetUpdateCompliance");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUpdateComplianceRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress receiving new updates. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetUpdateCompliance
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   totalDeviceCount: number, # Required. <Description>Total number of devices.</Description>
        ///   onLatestUpdateDeviceCount: number, # Required. <Description>Number of devices on the latest update.</Description>
        ///   newUpdatesAvailableDeviceCount: number, # Required. <Description>Number of devices with a newer update available.</Description>
        ///   updatesInProgressDeviceCount: number, # Required. <Description>Number of devices with update in-progress.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetUpdateCompliance(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetUpdateCompliance");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetUpdateComplianceRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a count of how many devices have a device tag. </summary>
        /// <param name="tagName"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tagName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeviceTag
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   tagName: string, # Required. <Description>Tag name.</Description>
        ///   deviceCount: number, # Required. <Description>Number of devices with this tag.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDeviceTagAsync(string tagName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(tagName, nameof(tagName));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeviceTagRequest(tagName, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a count of how many devices have a device tag. </summary>
        /// <param name="tagName"> Tag name. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tagName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="tagName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeviceTag
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   tagName: string, # Required. <Description>Tag name.</Description>
        ///   deviceCount: number, # Required. <Description>Number of devices with this tag.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDeviceTag(string tagName, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(tagName, nameof(tagName));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeviceTag");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeviceTagRequest(tagName, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetGroup
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   groupId: string, # Required. <Description>Group identity.</Description>
        ///   groupType: &quot;DeviceClassIdAndIoTHubTag&quot; | &quot;InvalidDeviceClassIdAndIoTHubTag&quot; | &quot;DefaultDeviceClassId&quot;, # Required. <Description>Group type.</Description>
        ///   tags: [string], # Required. <Description>IoT Hub tags.</Description>
        ///   createdDateTime: string, # Required. <Description>Date and time when the update was created.</Description>
        ///   deviceCount: number, # Optional. <Description>The number of devices in the group.</Description>
        ///   deploymentId: string, # Optional. <Description>The deployment Id for the group.</Description>
        ///   deviceClassId: string, # Optional. <Description>The device class Id for the group.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGroupAsync(string groupId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGroupRequest(groupId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetGroup
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   groupId: string, # Required. <Description>Group identity.</Description>
        ///   groupType: &quot;DeviceClassIdAndIoTHubTag&quot; | &quot;InvalidDeviceClassIdAndIoTHubTag&quot; | &quot;DefaultDeviceClassId&quot;, # Required. <Description>Group type.</Description>
        ///   tags: [string], # Required. <Description>IoT Hub tags.</Description>
        ///   createdDateTime: string, # Required. <Description>Date and time when the update was created.</Description>
        ///   deviceCount: number, # Optional. <Description>The number of devices in the group.</Description>
        ///   deploymentId: string, # Optional. <Description>The deployment Id for the group.</Description>
        ///   deviceClassId: string, # Optional. <Description>The device class Id for the group.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGroup(string groupId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGroupRequest(groupId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a device group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/CreateOrUpdateGroup
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   groupId: string, # Required. <Description>Group identity.</Description>
        ///   groupType: &quot;DeviceClassIdAndIoTHubTag&quot; | &quot;InvalidDeviceClassIdAndIoTHubTag&quot; | &quot;DefaultDeviceClassId&quot;, # Required. <Description>Group type.</Description>
        ///   tags: [string], # Required. <Description>IoT Hub tags.</Description>
        ///   createdDateTime: string, # Required. <Description>Date and time when the update was created.</Description>
        ///   deviceCount: number, # Optional. <Description>The number of devices in the group.</Description>
        ///   deploymentId: string, # Optional. <Description>The deployment Id for the group.</Description>
        ///   deviceClassId: string, # Optional. <Description>The device class Id for the group.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   groupId: string, # Required. <Description>Group identity.</Description>
        ///   groupType: &quot;DeviceClassIdAndIoTHubTag&quot; | &quot;InvalidDeviceClassIdAndIoTHubTag&quot; | &quot;DefaultDeviceClassId&quot;, # Required. <Description>Group type.</Description>
        ///   tags: [string], # Required. <Description>IoT Hub tags.</Description>
        ///   createdDateTime: string, # Required. <Description>Date and time when the update was created.</Description>
        ///   deviceCount: number, # Optional. <Description>The number of devices in the group.</Description>
        ///   deploymentId: string, # Optional. <Description>The deployment Id for the group.</Description>
        ///   deviceClassId: string, # Optional. <Description>The device class Id for the group.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateGroupAsync(string groupId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.CreateOrUpdateGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateGroupRequest(groupId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update a device group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/CreateOrUpdateGroup
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   groupId: string, # Required. <Description>Group identity.</Description>
        ///   groupType: &quot;DeviceClassIdAndIoTHubTag&quot; | &quot;InvalidDeviceClassIdAndIoTHubTag&quot; | &quot;DefaultDeviceClassId&quot;, # Required. <Description>Group type.</Description>
        ///   tags: [string], # Required. <Description>IoT Hub tags.</Description>
        ///   createdDateTime: string, # Required. <Description>Date and time when the update was created.</Description>
        ///   deviceCount: number, # Optional. <Description>The number of devices in the group.</Description>
        ///   deploymentId: string, # Optional. <Description>The deployment Id for the group.</Description>
        ///   deviceClassId: string, # Optional. <Description>The device class Id for the group.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   groupId: string, # Required. <Description>Group identity.</Description>
        ///   groupType: &quot;DeviceClassIdAndIoTHubTag&quot; | &quot;InvalidDeviceClassIdAndIoTHubTag&quot; | &quot;DefaultDeviceClassId&quot;, # Required. <Description>Group type.</Description>
        ///   tags: [string], # Required. <Description>IoT Hub tags.</Description>
        ///   createdDateTime: string, # Required. <Description>Date and time when the update was created.</Description>
        ///   deviceCount: number, # Optional. <Description>The number of devices in the group.</Description>
        ///   deploymentId: string, # Optional. <Description>The deployment Id for the group.</Description>
        ///   deviceClassId: string, # Optional. <Description>The device class Id for the group.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateGroup(string groupId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.CreateOrUpdateGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateGroupRequest(groupId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a device group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> DeleteGroupAsync(string groupId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.DeleteGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGroupRequest(groupId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a device group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response DeleteGroup(string groupId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.DeleteGroup");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteGroupRequest(groupId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get group update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetGroupUpdateCompliance
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   totalDeviceCount: number, # Required. <Description>Total number of devices.</Description>
        ///   onLatestUpdateDeviceCount: number, # Required. <Description>Number of devices on the latest update.</Description>
        ///   newUpdatesAvailableDeviceCount: number, # Required. <Description>Number of devices with a newer update available.</Description>
        ///   updatesInProgressDeviceCount: number, # Required. <Description>Number of devices with update in-progress.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetGroupUpdateComplianceAsync(string groupId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetGroupUpdateCompliance");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGroupUpdateComplianceRequest(groupId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get group update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetGroupUpdateCompliance
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   totalDeviceCount: number, # Required. <Description>Total number of devices.</Description>
        ///   onLatestUpdateDeviceCount: number, # Required. <Description>Number of devices on the latest update.</Description>
        ///   newUpdatesAvailableDeviceCount: number, # Required. <Description>Number of devices with a newer update available.</Description>
        ///   updatesInProgressDeviceCount: number, # Required. <Description>Number of devices with update in-progress.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetGroupUpdateCompliance(string groupId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetGroupUpdateCompliance");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetGroupUpdateComplianceRequest(groupId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeployment
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDeploymentAsync(string groupId, string deploymentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeploymentRequest(groupId, deploymentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeployment
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDeployment(string groupId, string deploymentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeploymentRequest(groupId, deploymentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/CreateOrUpdateDeployment
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateDeploymentAsync(string groupId, string deploymentId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.CreateOrUpdateDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateDeploymentRequest(groupId, deploymentId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/CreateOrUpdateDeployment
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdateDeployment(string groupId, string deploymentId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.CreateOrUpdateDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateDeploymentRequest(groupId, deploymentId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response> DeleteDeploymentAsync(string groupId, string deploymentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.DeleteDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDeploymentRequest(groupId, deploymentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response DeleteDeployment(string groupId, string deploymentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.DeleteDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDeploymentRequest(groupId, deploymentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeploymentStatus
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentState: &quot;Active&quot; | &quot;Inactive&quot; | &quot;Canceled&quot;, # Required. <Description>The state of the deployment.</Description>
        ///   totalDevices: number, # Optional. <Description>The total number of devices in the deployment.</Description>
        ///   devicesInProgressCount: number, # Optional. <Description>The number of devices that are currently in deployment.</Description>
        ///   devicesCompletedFailedCount: number, # Optional. <Description>The number of devices that have completed deployment with a failure.</Description>
        ///   devicesCompletedSucceededCount: number, # Optional. <Description>The number of devices which have successfully completed deployment.</Description>
        ///   devicesCanceledCount: number, # Optional. <Description>The number of devices which have had their deployment canceled.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDeploymentStatusAsync(string groupId, string deploymentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeploymentStatusRequest(groupId, deploymentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetDeploymentStatus
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentState: &quot;Active&quot; | &quot;Inactive&quot; | &quot;Canceled&quot;, # Required. <Description>The state of the deployment.</Description>
        ///   totalDevices: number, # Optional. <Description>The total number of devices in the deployment.</Description>
        ///   devicesInProgressCount: number, # Optional. <Description>The number of devices that are currently in deployment.</Description>
        ///   devicesCompletedFailedCount: number, # Optional. <Description>The number of devices that have completed deployment with a failure.</Description>
        ///   devicesCompletedSucceededCount: number, # Optional. <Description>The number of devices which have successfully completed deployment.</Description>
        ///   devicesCanceledCount: number, # Optional. <Description>The number of devices which have had their deployment canceled.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDeploymentStatus(string groupId, string deploymentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeploymentStatusRequest(groupId, deploymentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve operation status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetOperation
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string, # Required. <Description>Operation Id.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. <Description>Operation status.</Description>
        ///   error: {
        ///     code: string, # Required. <Description>Server defined error code.</Description>
        ///     message: string, # Required. <Description>A human-readable representation of the error.</Description>
        ///     target: string, # Optional. <Description>The target of the error.</Description>
        ///     details: [Error], # Optional. <Description>An array of errors that led to the reported error.</Description>
        ///     innererror: {
        ///       code: string, # Required. <Description>A more specific error code than what was provided by the containing error.</Description>
        ///       message: string, # Optional. <Description>A human-readable representation of the error.</Description>
        ///       errorDetail: string, # Optional. <Description>The internal error or exception message.</Description>
        ///       innerError: InnerError, # Optional. <Description>An object containing more specific information than the current object about the error.</Description>
        ///     }, # Optional. <Description>An object containing more specific information than the current object about the error.</Description>
        ///     occurredDateTime: string (ISO 8601 Format), # Optional. <Description>Date and time in UTC when the error occurred.</Description>
        ///   }, # Optional. <Description>Operation error encountered, if any.</Description>
        ///   traceId: string, # Optional. <Description>Operation correlation identity that can used by Microsoft Support for troubleshooting.</Description>
        ///   lastActionDateTime: string (ISO 8601 Format), # Required. <Description>Date and time in UTC when the operation status was last updated.</Description>
        ///   createdDateTime: string (ISO 8601 Format), # Required. <Description>Date and time in UTC when the operation was created.</Description>
        ///   etag: string, # Optional. <Description>Operation ETag.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetOperationAsync(string operationId, ETag? ifNoneMatch = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetOperationRequest(operationId, ifNoneMatch, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retrieve operation status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetOperation
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string, # Required. <Description>Operation Id.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. <Description>Operation status.</Description>
        ///   error: {
        ///     code: string, # Required. <Description>Server defined error code.</Description>
        ///     message: string, # Required. <Description>A human-readable representation of the error.</Description>
        ///     target: string, # Optional. <Description>The target of the error.</Description>
        ///     details: [Error], # Optional. <Description>An array of errors that led to the reported error.</Description>
        ///     innererror: {
        ///       code: string, # Required. <Description>A more specific error code than what was provided by the containing error.</Description>
        ///       message: string, # Optional. <Description>A human-readable representation of the error.</Description>
        ///       errorDetail: string, # Optional. <Description>The internal error or exception message.</Description>
        ///       innerError: InnerError, # Optional. <Description>An object containing more specific information than the current object about the error.</Description>
        ///     }, # Optional. <Description>An object containing more specific information than the current object about the error.</Description>
        ///     occurredDateTime: string (ISO 8601 Format), # Optional. <Description>Date and time in UTC when the error occurred.</Description>
        ///   }, # Optional. <Description>Operation error encountered, if any.</Description>
        ///   traceId: string, # Optional. <Description>Operation correlation identity that can used by Microsoft Support for troubleshooting.</Description>
        ///   lastActionDateTime: string (ISO 8601 Format), # Required. <Description>Date and time in UTC when the operation status was last updated.</Description>
        ///   createdDateTime: string (ISO 8601 Format), # Required. <Description>Date and time in UTC when the operation was created.</Description>
        ///   etag: string, # Optional. <Description>Operation ETag.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetOperation(string operationId, ETag? ifNoneMatch = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetOperationRequest(operationId, ifNoneMatch, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the device diagnostics log collection operation on specified devices. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/CollectLogs
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   operationId: string, # Optional. <Description>The diagnostics operation id.</Description>
        ///   deviceList: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device Id</Description>
        ///       moduleId: string, # Optional. <Description>Module Id</Description>
        ///     }
        ///   ], # Required. <Description>Array of Device Update agent ids</Description>
        ///   description: string, # Optional. <Description>Description of the diagnostics operation.</Description>
        ///   createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///   lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string, # Optional. <Description>The diagnostics operation id.</Description>
        ///   deviceList: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device Id</Description>
        ///       moduleId: string, # Optional. <Description>Module Id</Description>
        ///     }
        ///   ], # Required. <Description>Array of Device Update agent ids</Description>
        ///   description: string, # Optional. <Description>Description of the diagnostics operation.</Description>
        ///   createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///   lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CollectLogsAsync(string operationId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.CollectLogs");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCollectLogsRequest(operationId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Start the device diagnostics log collection operation on specified devices. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/CollectLogs
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   operationId: string, # Optional. <Description>The diagnostics operation id.</Description>
        ///   deviceList: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device Id</Description>
        ///       moduleId: string, # Optional. <Description>Module Id</Description>
        ///     }
        ///   ], # Required. <Description>Array of Device Update agent ids</Description>
        ///   description: string, # Optional. <Description>Description of the diagnostics operation.</Description>
        ///   createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///   lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string, # Optional. <Description>The diagnostics operation id.</Description>
        ///   deviceList: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device Id</Description>
        ///       moduleId: string, # Optional. <Description>Module Id</Description>
        ///     }
        ///   ], # Required. <Description>Array of Device Update agent ids</Description>
        ///   description: string, # Optional. <Description>Description of the diagnostics operation.</Description>
        ///   createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///   lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CollectLogs(string operationId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.CollectLogs");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCollectLogsRequest(operationId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the device diagnostics log collection operation. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetLogCollectionOperation
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string, # Optional. <Description>The diagnostics operation id.</Description>
        ///   deviceList: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device Id</Description>
        ///       moduleId: string, # Optional. <Description>Module Id</Description>
        ///     }
        ///   ], # Required. <Description>Array of Device Update agent ids</Description>
        ///   description: string, # Optional. <Description>Description of the diagnostics operation.</Description>
        ///   createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///   lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetLogCollectionOperationAsync(string operationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetLogCollectionOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLogCollectionOperationRequest(operationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the device diagnostics log collection operation. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetLogCollectionOperation
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string, # Optional. <Description>The diagnostics operation id.</Description>
        ///   deviceList: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device Id</Description>
        ///       moduleId: string, # Optional. <Description>Module Id</Description>
        ///     }
        ///   ], # Required. <Description>Array of Device Update agent ids</Description>
        ///   description: string, # Optional. <Description>Description of the diagnostics operation.</Description>
        ///   createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///   lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetLogCollectionOperation(string operationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetLogCollectionOperation");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLogCollectionOperationRequest(operationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device diagnostics log collection operation with detailed status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetLogCollectionOperationDetailedStatus
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string, # Optional. <Description>The device diagnostics operation id.</Description>
        ///   createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///   lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        ///   deviceStatus: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device id</Description>
        ///       moduleId: string, # Optional. <Description>Module id.</Description>
        ///       status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. <Description>Log upload status</Description>
        ///       resultCode: string, # Optional. <Description>Log upload result code</Description>
        ///       extendedResultCode: string, # Optional. <Description>Log upload extended result code</Description>
        ///       logLocation: string, # Optional. <Description>Log upload location</Description>
        ///     }
        ///   ], # Optional. <Description>Status of the devices in the operation</Description>
        ///   description: string, # Optional. <Description>Device diagnostics operation description.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetLogCollectionOperationDetailedStatusAsync(string operationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetLogCollectionOperationDetailedStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLogCollectionOperationDetailedStatusRequest(operationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get device diagnostics log collection operation with detailed status. </summary>
        /// <param name="operationId"> Operation identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/GetLogCollectionOperationDetailedStatus
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   operationId: string, # Optional. <Description>The device diagnostics operation id.</Description>
        ///   createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///   lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///   status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        ///   deviceStatus: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device id</Description>
        ///       moduleId: string, # Optional. <Description>Module id.</Description>
        ///       status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. <Description>Log upload status</Description>
        ///       resultCode: string, # Optional. <Description>Log upload result code</Description>
        ///       extendedResultCode: string, # Optional. <Description>Log upload extended result code</Description>
        ///       logLocation: string, # Optional. <Description>Log upload location</Description>
        ///     }
        ///   ], # Optional. <Description>Status of the devices in the operation</Description>
        ///   description: string, # Optional. <Description>Device diagnostics operation description.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetLogCollectionOperationDetailedStatus(string operationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.GetLogCollectionOperationDetailedStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetLogCollectionOperationDetailedStatusRequest(operationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="action"> Cancel deployment action. Allowed values: &quot;cancel&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentId"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/StopDeployment
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> StopDeploymentAsync(string groupId, string deploymentId, string action, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));
            Argument.AssertNotNull(action, nameof(action));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.StopDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopDeploymentRequest(groupId, deploymentId, action, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Stops a deployment. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="action"> Cancel deployment action. Allowed values: &quot;cancel&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentId"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/StopDeployment
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response StopDeployment(string groupId, string deploymentId, string action, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));
            Argument.AssertNotNull(action, nameof(action));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.StopDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStopDeploymentRequest(groupId, deploymentId, action, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retries a deployment with failed devices. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="action"> Retry deployment action. Allowed values: &quot;retry&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentId"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/RetryDeployment
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RetryDeploymentAsync(string groupId, string deploymentId, string action, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));
            Argument.AssertNotNull(action, nameof(action));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.RetryDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRetryDeploymentRequest(groupId, deploymentId, action, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retries a deployment with failed devices. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="action"> Retry deployment action. Allowed values: &quot;retry&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/>, <paramref name="deploymentId"/> or <paramref name="action"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/RetryDeployment
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///   startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///   updateId: {
        ///     provider: string, # Required. <Description>Update provider.</Description>
        ///     name: string, # Required. <Description>Update name.</Description>
        ///     version: string, # Required. <Description>Update version.</Description>
        ///   }, # Required. <Description>Update identity.</Description>
        ///   groupId: string, # Required. <Description>The group identity</Description>
        ///   isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///   isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RetryDeployment(string groupId, string deploymentId, string action, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));
            Argument.AssertNotNull(action, nameof(action));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.RetryDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRetryDeploymentRequest(groupId, deploymentId, action, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDeviceClasses
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       deviceClassId: string, # Required. <Description>The device class identifier.</Description>
        ///       compatProperties: Dictionary&lt;string, string&gt;, # Required. <Description>The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property</Description>
        ///       bestCompatibleUpdateId: {
        ///         provider: string, # Required. <Description>Update provider.</Description>
        ///         name: string, # Required. <Description>Update name.</Description>
        ///         version: string, # Required. <Description>Update version.</Description>
        ///       }, # Required. <Description>Update identity.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetDeviceClassesAsync(RequestContext context = null)
        {
            return GetDeviceClassesImplementationAsync("DeviceManagementClient.GetDeviceClasses", context);
        }

        private AsyncPageable<BinaryData> GetDeviceClassesImplementationAsync(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDeviceClassesRequest(context)
                        : CreateGetDeviceClassesNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDeviceClasses
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       deviceClassId: string, # Required. <Description>The device class identifier.</Description>
        ///       compatProperties: Dictionary&lt;string, string&gt;, # Required. <Description>The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property</Description>
        ///       bestCompatibleUpdateId: {
        ///         provider: string, # Required. <Description>Update provider.</Description>
        ///         name: string, # Required. <Description>Update name.</Description>
        ///         version: string, # Required. <Description>Update version.</Description>
        ///       }, # Required. <Description>Update identity.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetDeviceClasses(RequestContext context = null)
        {
            return GetDeviceClassesImplementation("DeviceManagementClient.GetDeviceClasses", context);
        }

        private Pageable<BinaryData> GetDeviceClassesImplementation(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDeviceClassesRequest(context)
                        : CreateGetDeviceClassesNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of installable updates for a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deviceClassId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListInstallableUpdatesForDeviceClass
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       provider: string, # Required. <Description>Update provider.</Description>
        ///       name: string, # Required. <Description>Update name.</Description>
        ///       version: string, # Required. <Description>Update version.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetInstallableUpdatesForDeviceClassesAsync(string deviceClassId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(deviceClassId, nameof(deviceClassId));

            return GetInstallableUpdatesForDeviceClassesImplementationAsync("DeviceManagementClient.GetInstallableUpdatesForDeviceClasses", deviceClassId, context);
        }

        private AsyncPageable<BinaryData> GetInstallableUpdatesForDeviceClassesImplementationAsync(string diagnosticsScopeName, string deviceClassId, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetInstallableUpdatesForDeviceClassesRequest(deviceClassId, context)
                        : CreateGetInstallableUpdatesForDeviceClassesNextPageRequest(nextLink, deviceClassId, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of installable updates for a device class. </summary>
        /// <param name="deviceClassId"> Device class identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deviceClassId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="deviceClassId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListInstallableUpdatesForDeviceClass
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       provider: string, # Required. <Description>Update provider.</Description>
        ///       name: string, # Required. <Description>Update name.</Description>
        ///       version: string, # Required. <Description>Update version.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetInstallableUpdatesForDeviceClasses(string deviceClassId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(deviceClassId, nameof(deviceClassId));

            return GetInstallableUpdatesForDeviceClassesImplementation("DeviceManagementClient.GetInstallableUpdatesForDeviceClasses", deviceClassId, context);
        }

        private Pageable<BinaryData> GetInstallableUpdatesForDeviceClassesImplementation(string diagnosticsScopeName, string deviceClassId, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetInstallableUpdatesForDeviceClassesRequest(deviceClassId, context)
                        : CreateGetInstallableUpdatesForDeviceClassesNextPageRequest(nextLink, deviceClassId, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of devices connected to Device Update for IoT Hub. </summary>
        /// <param name="filter"> Restricts the set of devices returned. You can filter on device GroupId or DeviceClassId. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDevices
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device identity.</Description>
        ///       moduleId: string, # Optional. <Description>Device module identity.</Description>
        ///       deviceClassId: string, # Required. <Description>Device class identity.</Description>
        ///       manufacturer: string, # Required. <Description>Device manufacturer.</Description>
        ///       model: string, # Required. <Description>Device model.</Description>
        ///       groupId: string, # Optional. <Description>Device group identity.</Description>
        ///       lastAttemptedUpdateId: {
        ///         provider: string, # Required. <Description>Update provider.</Description>
        ///         name: string, # Required. <Description>Update name.</Description>
        ///         version: string, # Required. <Description>Update version.</Description>
        ///       }, # Optional. <Description>Update identity.</Description>
        ///       deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Incompatible&quot;, # Optional. <Description>State of the device in its last deployment.</Description>
        ///       installedUpdateId: UpdateId, # Optional. <Description>Update identity.</Description>
        ///       onLatestUpdate: boolean, # Required. <Description>Boolean flag indicating whether the latest update is installed on the device</Description>
        ///       lastDeploymentId: string, # Optional. <Description>The deployment identifier for the last deployment to the device</Description>
        ///       lastInstallResult: {
        ///         resultCode: number, # Required. <Description>Install result code.</Description>
        ///         extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///         resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///         stepResults: [
        ///           {
        ///             updateId: UpdateId, # Optional. <Description>It is update id for update steps; otherwise it is null.</Description>
        ///             description: string, # Optional. <Description>Step description. It might be null for update steps.</Description>
        ///             resultCode: number, # Required. <Description>Install result code.</Description>
        ///             extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///             resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///           }
        ///         ], # Optional. <Description>Array of step results</Description>
        ///       }, # Optional. <Description>Last install result.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetDevicesAsync(string filter = null, RequestContext context = null)
        {
            return GetDevicesImplementationAsync("DeviceManagementClient.GetDevices", filter, context);
        }

        private AsyncPageable<BinaryData> GetDevicesImplementationAsync(string diagnosticsScopeName, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDevicesRequest(filter, context)
                        : CreateGetDevicesNextPageRequest(nextLink, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of devices connected to Device Update for IoT Hub. </summary>
        /// <param name="filter"> Restricts the set of devices returned. You can filter on device GroupId or DeviceClassId. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDevices
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device identity.</Description>
        ///       moduleId: string, # Optional. <Description>Device module identity.</Description>
        ///       deviceClassId: string, # Required. <Description>Device class identity.</Description>
        ///       manufacturer: string, # Required. <Description>Device manufacturer.</Description>
        ///       model: string, # Required. <Description>Device model.</Description>
        ///       groupId: string, # Optional. <Description>Device group identity.</Description>
        ///       lastAttemptedUpdateId: {
        ///         provider: string, # Required. <Description>Update provider.</Description>
        ///         name: string, # Required. <Description>Update name.</Description>
        ///         version: string, # Required. <Description>Update version.</Description>
        ///       }, # Optional. <Description>Update identity.</Description>
        ///       deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Incompatible&quot;, # Optional. <Description>State of the device in its last deployment.</Description>
        ///       installedUpdateId: UpdateId, # Optional. <Description>Update identity.</Description>
        ///       onLatestUpdate: boolean, # Required. <Description>Boolean flag indicating whether the latest update is installed on the device</Description>
        ///       lastDeploymentId: string, # Optional. <Description>The deployment identifier for the last deployment to the device</Description>
        ///       lastInstallResult: {
        ///         resultCode: number, # Required. <Description>Install result code.</Description>
        ///         extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///         resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///         stepResults: [
        ///           {
        ///             updateId: UpdateId, # Optional. <Description>It is update id for update steps; otherwise it is null.</Description>
        ///             description: string, # Optional. <Description>Step description. It might be null for update steps.</Description>
        ///             resultCode: number, # Required. <Description>Install result code.</Description>
        ///             extendedResultCode: number, # Required. <Description>Install extended result code</Description>
        ///             resultDetails: string, # Optional. <Description>A string containing further details about the install result</Description>
        ///           }
        ///         ], # Optional. <Description>Array of step results</Description>
        ///       }, # Optional. <Description>Last install result.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetDevices(string filter = null, RequestContext context = null)
        {
            return GetDevicesImplementation("DeviceManagementClient.GetDevices", filter, context);
        }

        private Pageable<BinaryData> GetDevicesImplementation(string diagnosticsScopeName, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDevicesRequest(filter, context)
                        : CreateGetDevicesNextPageRequest(nextLink, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of available group device tags for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDeviceTags
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       tagName: string, # Required. <Description>Tag name.</Description>
        ///       deviceCount: number, # Required. <Description>Number of devices with this tag.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetDeviceTagsAsync(RequestContext context = null)
        {
            return GetDeviceTagsImplementationAsync("DeviceManagementClient.GetDeviceTags", context);
        }

        private AsyncPageable<BinaryData> GetDeviceTagsImplementationAsync(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDeviceTagsRequest(context)
                        : CreateGetDeviceTagsNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of available group device tags for all devices connected to Device Update for IoT Hub. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDeviceTags
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       tagName: string, # Required. <Description>Tag name.</Description>
        ///       deviceCount: number, # Required. <Description>Number of devices with this tag.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetDeviceTags(RequestContext context = null)
        {
            return GetDeviceTagsImplementation("DeviceManagementClient.GetDeviceTags", context);
        }

        private Pageable<BinaryData> GetDeviceTagsImplementation(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDeviceTagsRequest(context)
                        : CreateGetDeviceTagsNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of all device groups. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListGroups
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       groupId: string, # Required. <Description>Group identity.</Description>
        ///       groupType: &quot;DeviceClassIdAndIoTHubTag&quot; | &quot;InvalidDeviceClassIdAndIoTHubTag&quot; | &quot;DefaultDeviceClassId&quot;, # Required. <Description>Group type.</Description>
        ///       tags: [string], # Required. <Description>IoT Hub tags.</Description>
        ///       createdDateTime: string, # Required. <Description>Date and time when the update was created.</Description>
        ///       deviceCount: number, # Optional. <Description>The number of devices in the group.</Description>
        ///       deploymentId: string, # Optional. <Description>The deployment Id for the group.</Description>
        ///       deviceClassId: string, # Optional. <Description>The device class Id for the group.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetGroupsAsync(RequestContext context = null)
        {
            return GetGroupsImplementationAsync("DeviceManagementClient.GetGroups", context);
        }

        private AsyncPageable<BinaryData> GetGroupsImplementationAsync(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetGroupsRequest(context)
                        : CreateGetGroupsNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of all device groups. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListGroups
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       groupId: string, # Required. <Description>Group identity.</Description>
        ///       groupType: &quot;DeviceClassIdAndIoTHubTag&quot; | &quot;InvalidDeviceClassIdAndIoTHubTag&quot; | &quot;DefaultDeviceClassId&quot;, # Required. <Description>Group type.</Description>
        ///       tags: [string], # Required. <Description>IoT Hub tags.</Description>
        ///       createdDateTime: string, # Required. <Description>Date and time when the update was created.</Description>
        ///       deviceCount: number, # Optional. <Description>The number of devices in the group.</Description>
        ///       deploymentId: string, # Optional. <Description>The deployment Id for the group.</Description>
        ///       deviceClassId: string, # Optional. <Description>The device class Id for the group.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetGroups(RequestContext context = null)
        {
            return GetGroupsImplementation("DeviceManagementClient.GetGroups", context);
        }

        private Pageable<BinaryData> GetGroupsImplementation(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetGroupsRequest(context)
                        : CreateGetGroupsNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get the best available updates for a group and a count of how many devices need each update. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="filter"> Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListBestUpdatesForGroup
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       updateId: {
        ///         provider: string, # Required. <Description>Update provider.</Description>
        ///         name: string, # Required. <Description>Update name.</Description>
        ///         version: string, # Required. <Description>Update version.</Description>
        ///       }, # Required. <Description>Update identity.</Description>
        ///       deviceCount: number, # Required. <Description>Total number of devices for which the update is applicable.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetBestUpdatesForGroupsAsync(string groupId, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            return GetBestUpdatesForGroupsImplementationAsync("DeviceManagementClient.GetBestUpdatesForGroups", groupId, filter, context);
        }

        private AsyncPageable<BinaryData> GetBestUpdatesForGroupsImplementationAsync(string diagnosticsScopeName, string groupId, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetBestUpdatesForGroupsRequest(groupId, filter, context)
                        : CreateGetBestUpdatesForGroupsNextPageRequest(nextLink, groupId, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get the best available updates for a group and a count of how many devices need each update. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="filter"> Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListBestUpdatesForGroup
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       updateId: {
        ///         provider: string, # Required. <Description>Update provider.</Description>
        ///         name: string, # Required. <Description>Update name.</Description>
        ///         version: string, # Required. <Description>Update version.</Description>
        ///       }, # Required. <Description>Update identity.</Description>
        ///       deviceCount: number, # Required. <Description>Total number of devices for which the update is applicable.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetBestUpdatesForGroups(string groupId, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            return GetBestUpdatesForGroupsImplementation("DeviceManagementClient.GetBestUpdatesForGroups", groupId, filter, context);
        }

        private Pageable<BinaryData> GetBestUpdatesForGroupsImplementation(string diagnosticsScopeName, string groupId, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetBestUpdatesForGroupsRequest(groupId, filter, context)
                        : CreateGetBestUpdatesForGroupsNextPageRequest(nextLink, groupId, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of deployments for a group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDeploymentsForGroup
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///       startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///       updateId: {
        ///         provider: string, # Required. <Description>Update provider.</Description>
        ///         name: string, # Required. <Description>Update name.</Description>
        ///         version: string, # Required. <Description>Update version.</Description>
        ///       }, # Required. <Description>Update identity.</Description>
        ///       groupId: string, # Required. <Description>The group identity</Description>
        ///       isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///       isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetDeploymentsForGroupsAsync(string groupId, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            return GetDeploymentsForGroupsImplementationAsync("DeviceManagementClient.GetDeploymentsForGroups", groupId, filter, context);
        }

        private AsyncPageable<BinaryData> GetDeploymentsForGroupsImplementationAsync(string diagnosticsScopeName, string groupId, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDeploymentsForGroupsRequest(groupId, filter, context)
                        : CreateGetDeploymentsForGroupsNextPageRequest(nextLink, groupId, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of deployments for a group. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDeploymentsForGroup
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       deploymentId: string, # Required. <Description>The deployment identifier.</Description>
        ///       startDateTime: string (ISO 8601 Format), # Required. <Description>The deployment start datetime.</Description>
        ///       updateId: {
        ///         provider: string, # Required. <Description>Update provider.</Description>
        ///         name: string, # Required. <Description>Update name.</Description>
        ///         version: string, # Required. <Description>Update version.</Description>
        ///       }, # Required. <Description>Update identity.</Description>
        ///       groupId: string, # Required. <Description>The group identity</Description>
        ///       isCanceled: boolean, # Optional. <Description>Boolean flag indicating whether the deployment was canceled.</Description>
        ///       isRetried: boolean, # Optional. <Description>Boolean flag indicating whether the deployment has been retried.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetDeploymentsForGroups(string groupId, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));

            return GetDeploymentsForGroupsImplementation("DeviceManagementClient.GetDeploymentsForGroups", groupId, filter, context);
        }

        private Pageable<BinaryData> GetDeploymentsForGroupsImplementation(string diagnosticsScopeName, string groupId, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDeploymentsForGroupsRequest(groupId, filter, context)
                        : CreateGetDeploymentsForGroupsNextPageRequest(nextLink, groupId, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDeploymentDevices
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device identity.</Description>
        ///       moduleId: string, # Optional. <Description>Device module identity.</Description>
        ///       retryCount: number, # Required. <Description>The number of times this deployment has been retried on this device.</Description>
        ///       movedOnToNewDeployment: boolean, # Required. <Description>Boolean flag indicating whether this device is in a newer deployment and can no longer retry this deployment.</Description>
        ///       deviceState: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Incompatible&quot;, # Required. <Description>Deployment device state.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetDeploymentDevicesAsync(string groupId, string deploymentId, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));

            return GetDeploymentDevicesImplementationAsync("DeviceManagementClient.GetDeploymentDevices", groupId, deploymentId, filter, context);
        }

        private AsyncPageable<BinaryData> GetDeploymentDevicesImplementationAsync(string diagnosticsScopeName, string groupId, string deploymentId, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDeploymentDevicesRequest(groupId, deploymentId, filter, context)
                        : CreateGetDeploymentDevicesNextPageRequest(nextLink, groupId, deploymentId, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="groupId"> Group identity. </param>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> or <paramref name="deploymentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListDeploymentDevices
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       deviceId: string, # Required. <Description>Device identity.</Description>
        ///       moduleId: string, # Optional. <Description>Device module identity.</Description>
        ///       retryCount: number, # Required. <Description>The number of times this deployment has been retried on this device.</Description>
        ///       movedOnToNewDeployment: boolean, # Required. <Description>Boolean flag indicating whether this device is in a newer deployment and can no longer retry this deployment.</Description>
        ///       deviceState: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Failed&quot; | &quot;Canceled&quot; | &quot;Incompatible&quot;, # Required. <Description>Deployment device state.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetDeploymentDevices(string groupId, string deploymentId, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(groupId, nameof(groupId));
            Argument.AssertNotNullOrEmpty(deploymentId, nameof(deploymentId));

            return GetDeploymentDevicesImplementation("DeviceManagementClient.GetDeploymentDevices", groupId, deploymentId, filter, context);
        }

        private Pageable<BinaryData> GetDeploymentDevicesImplementation(string diagnosticsScopeName, string groupId, string deploymentId, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetDeploymentDevicesRequest(groupId, deploymentId, filter, context)
                        : CreateGetDeploymentDevicesNextPageRequest(nextLink, groupId, deploymentId, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted. </summary>
        /// <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: &quot;status eq &apos;NotStarted&apos; or status eq &apos;Running&apos;&quot;. </param>
        /// <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListOperations
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       operationId: string, # Required. <Description>Operation Id.</Description>
        ///       status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. <Description>Operation status.</Description>
        ///       error: {
        ///         code: string, # Required. <Description>Server defined error code.</Description>
        ///         message: string, # Required. <Description>A human-readable representation of the error.</Description>
        ///         target: string, # Optional. <Description>The target of the error.</Description>
        ///         details: [Error], # Optional. <Description>An array of errors that led to the reported error.</Description>
        ///         innererror: {
        ///           code: string, # Required. <Description>A more specific error code than what was provided by the containing error.</Description>
        ///           message: string, # Optional. <Description>A human-readable representation of the error.</Description>
        ///           errorDetail: string, # Optional. <Description>The internal error or exception message.</Description>
        ///           innerError: InnerError, # Optional. <Description>An object containing more specific information than the current object about the error.</Description>
        ///         }, # Optional. <Description>An object containing more specific information than the current object about the error.</Description>
        ///         occurredDateTime: string (ISO 8601 Format), # Optional. <Description>Date and time in UTC when the error occurred.</Description>
        ///       }, # Optional. <Description>Operation error encountered, if any.</Description>
        ///       traceId: string, # Optional. <Description>Operation correlation identity that can used by Microsoft Support for troubleshooting.</Description>
        ///       lastActionDateTime: string (ISO 8601 Format), # Required. <Description>Date and time in UTC when the operation status was last updated.</Description>
        ///       createdDateTime: string (ISO 8601 Format), # Required. <Description>Date and time in UTC when the operation was created.</Description>
        ///       etag: string, # Optional. <Description>Operation ETag.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetOperationsAsync(string filter = null, int? top = null, RequestContext context = null)
        {
            return GetOperationsImplementationAsync("DeviceManagementClient.GetOperations", filter, top, context);
        }

        private AsyncPageable<BinaryData> GetOperationsImplementationAsync(string diagnosticsScopeName, string filter, int? top, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetOperationsRequest(filter, top, context)
                        : CreateGetOperationsNextPageRequest(nextLink, filter, top, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted. </summary>
        /// <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: &quot;status eq &apos;NotStarted&apos; or status eq &apos;Running&apos;&quot;. </param>
        /// <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListOperations
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       operationId: string, # Required. <Description>Operation Id.</Description>
        ///       status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. <Description>Operation status.</Description>
        ///       error: {
        ///         code: string, # Required. <Description>Server defined error code.</Description>
        ///         message: string, # Required. <Description>A human-readable representation of the error.</Description>
        ///         target: string, # Optional. <Description>The target of the error.</Description>
        ///         details: [Error], # Optional. <Description>An array of errors that led to the reported error.</Description>
        ///         innererror: {
        ///           code: string, # Required. <Description>A more specific error code than what was provided by the containing error.</Description>
        ///           message: string, # Optional. <Description>A human-readable representation of the error.</Description>
        ///           errorDetail: string, # Optional. <Description>The internal error or exception message.</Description>
        ///           innerError: InnerError, # Optional. <Description>An object containing more specific information than the current object about the error.</Description>
        ///         }, # Optional. <Description>An object containing more specific information than the current object about the error.</Description>
        ///         occurredDateTime: string (ISO 8601 Format), # Optional. <Description>Date and time in UTC when the error occurred.</Description>
        ///       }, # Optional. <Description>Operation error encountered, if any.</Description>
        ///       traceId: string, # Optional. <Description>Operation correlation identity that can used by Microsoft Support for troubleshooting.</Description>
        ///       lastActionDateTime: string (ISO 8601 Format), # Required. <Description>Date and time in UTC when the operation status was last updated.</Description>
        ///       createdDateTime: string (ISO 8601 Format), # Required. <Description>Date and time in UTC when the operation was created.</Description>
        ///       etag: string, # Optional. <Description>Operation ETag.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetOperations(string filter = null, int? top = null, RequestContext context = null)
        {
            return GetOperationsImplementation("DeviceManagementClient.GetOperations", filter, top, context);
        }

        private Pageable<BinaryData> GetOperationsImplementation(string diagnosticsScopeName, string filter, int? top, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetOperationsRequest(filter, top, context)
                        : CreateGetOperationsNextPageRequest(nextLink, filter, top, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get all device diagnostics log collection operations. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListLogCollectionOperations
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       operationId: string, # Optional. <Description>The diagnostics operation id.</Description>
        ///       deviceList: [
        ///         {
        ///           deviceId: string, # Required. <Description>Device Id</Description>
        ///           moduleId: string, # Optional. <Description>Module Id</Description>
        ///         }
        ///       ], # Required. <Description>Array of Device Update agent ids</Description>
        ///       description: string, # Optional. <Description>Description of the diagnostics operation.</Description>
        ///       createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///       lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///       status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetLogCollectionOperationsAsync(RequestContext context = null)
        {
            return GetLogCollectionOperationsImplementationAsync("DeviceManagementClient.GetLogCollectionOperations", context);
        }

        private AsyncPageable<BinaryData> GetLogCollectionOperationsImplementationAsync(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetLogCollectionOperationsRequest(context)
                        : CreateGetLogCollectionOperationsNextPageRequest(nextLink, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Get all device diagnostics log collection operations. </summary>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// Additional information can be found in the service REST API documentation:
        /// https://docs.microsoft.com/rest/api/DeviceUpdate/DeviceManagement/ListLogCollectionOperations
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       operationId: string, # Optional. <Description>The diagnostics operation id.</Description>
        ///       deviceList: [
        ///         {
        ///           deviceId: string, # Required. <Description>Device Id</Description>
        ///           moduleId: string, # Optional. <Description>Module Id</Description>
        ///         }
        ///       ], # Required. <Description>Array of Device Update agent ids</Description>
        ///       description: string, # Optional. <Description>Description of the diagnostics operation.</Description>
        ///       createdDateTime: string, # Optional. <Description>The timestamp when the operation was created.</Description>
        ///       lastActionDateTime: string, # Optional. <Description>A timestamp for when the current state was entered.</Description>
        ///       status: &quot;Undefined&quot; | &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. <Description>Operation status.</Description>
        ///     }
        ///   ], # Required. <Description>The collection of pageable items.</Description>
        ///   nextLink: string, # Optional. <Description>The link to the next page of items.</Description>
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetLogCollectionOperations(RequestContext context = null)
        {
            return GetLogCollectionOperationsImplementation("DeviceManagementClient.GetLogCollectionOperations", context);
        }

        private Pageable<BinaryData> GetLogCollectionOperationsImplementation(string diagnosticsScopeName, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetLogCollectionOperationsRequest(context)
                        : CreateGetLogCollectionOperationsNextPageRequest(nextLink, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Import existing devices from IoT Hub. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="action"> Devices action. Allowed values: &quot;import&quot;. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<Operation> ImportDevicesAsync(WaitUntil waitUntil, string action, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(action, nameof(action));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.ImportDevices");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportDevicesRequest(action, content, context);
                return await ProtocolOperationHelpers.ProcessMessageWithoutResponseValueAsync(_pipeline, message, ClientDiagnostics, "DeviceManagementClient.ImportDevices", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Import existing devices from IoT Hub. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="action"> Devices action. Allowed values: &quot;import&quot;. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="action"/> or <paramref name="content"/> is null. </exception>
        public virtual Operation ImportDevices(WaitUntil waitUntil, string action, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(action, nameof(action));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeviceManagementClient.ImportDevices");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportDevicesRequest(action, content, context);
                return ProtocolOperationHelpers.ProcessMessageWithoutResponseValue(_pipeline, message, ClientDiagnostics, "DeviceManagementClient.ImportDevices", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetDeviceClassesRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/deviceclasses", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeviceClassRequest(string deviceClassId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/deviceclasses/", false);
            uri.AppendPath(deviceClassId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetInstallableUpdatesForDeviceClassesRequest(string deviceClassId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/deviceclasses/", false);
            uri.AppendPath(deviceClassId, true);
            uri.AppendPath("/installableupdates", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDevicesRequest(string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/devices", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateImportDevicesRequest(string action, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/devices", false);
            uri.AppendQuery("action", action, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetDeviceRequest(string deviceId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeviceModuleRequest(string deviceId, string moduleId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/devices/", false);
            uri.AppendPath(deviceId, true);
            uri.AppendPath("/modules/", false);
            uri.AppendPath(moduleId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetUpdateComplianceRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/updatecompliance", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeviceTagsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/devicetags", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeviceTagRequest(string tagName, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/devicetags/", false);
            uri.AppendPath(tagName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGroupsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGroupRequest(string groupId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateGroupRequest(string groupId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteGroupRequest(string groupId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGroupUpdateComplianceRequest(string groupId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/updateCompliance", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBestUpdatesForGroupsRequest(string groupId, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/bestUpdates", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeploymentsForGroupsRequest(string groupId, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/deployments", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeploymentRequest(string groupId, string deploymentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateDeploymentRequest(string groupId, string deploymentId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteDeploymentRequest(string groupId, string deploymentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeploymentStatusRequest(string groupId, string deploymentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendPath("/status", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeploymentDevicesRequest(string groupId, string deploymentId, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendPath("/devicestates", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetOperationRequest(string operationId, ETag? ifNoneMatch, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200304);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            if (ifNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", ifNoneMatch.Value);
            }
            return message;
        }

        internal HttpMessage CreateGetOperationsRequest(string filter, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/operations", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCollectLogsRequest(string operationId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/deviceDiagnostics/logCollections/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetLogCollectionOperationRequest(string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/deviceDiagnostics/logCollections/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLogCollectionOperationsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/deviceDiagnostics/logCollections", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLogCollectionOperationDetailedStatusRequest(string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/deviceDiagnostics/logCollections/", false);
            uri.AppendPath(operationId, true);
            uri.AppendPath("/detailedStatus", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStopDeploymentRequest(string groupId, string deploymentId, string action, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("action", action, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRetryDeploymentRequest(string groupId, string deploymentId, string action, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(_instanceId, false);
            uri.AppendPath("/management/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("action", action, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeviceClassesNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetInstallableUpdatesForDeviceClassesNextPageRequest(string nextLink, string deviceClassId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDevicesNextPageRequest(string nextLink, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeviceTagsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetGroupsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBestUpdatesForGroupsNextPageRequest(string nextLink, string groupId, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeploymentsForGroupsNextPageRequest(string nextLink, string groupId, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDeploymentDevicesNextPageRequest(string nextLink, string groupId, string deploymentId, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetOperationsNextPageRequest(string nextLink, string filter, int? top, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLogCollectionOperationsNextPageRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(_endpoint, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier200304;
        private static ResponseClassifier ResponseClassifier200304 => _responseClassifier200304 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 304 });
        private static ResponseClassifier _responseClassifier201;
        private static ResponseClassifier ResponseClassifier201 => _responseClassifier201 ??= new StatusCodeClassifier(stackalloc ushort[] { 201 });
    }
}
