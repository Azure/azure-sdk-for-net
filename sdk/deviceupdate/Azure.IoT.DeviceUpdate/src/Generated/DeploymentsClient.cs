// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.IoT.DeviceUpdate.Models;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> The Deployments service client. </summary>
    public partial class DeploymentsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DeploymentsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of DeploymentsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="accountEndpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        internal DeploymentsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string accountEndpoint, string instanceId)
        {
            RestClient = new DeploymentsRestClient(clientDiagnostics, pipeline, accountEndpoint, instanceId);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Deployment>> GetDeploymentAsync(string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeployment");
            scope.Start();
            try
            {
                return await RestClient.GetDeploymentAsync(deploymentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Deployment> GetDeployment(string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeployment");
            scope.Start();
            try
            {
                return RestClient.GetDeployment(deploymentId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="deployment"> The deployment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Deployment>> CreateOrUpdateDeploymentAsync(string deploymentId, Deployment deployment, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.CreateOrUpdateDeployment");
            scope.Start();
            try
            {
                return await RestClient.CreateOrUpdateDeploymentAsync(deploymentId, deployment, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="deployment"> The deployment properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Deployment> CreateOrUpdateDeployment(string deploymentId, Deployment deployment, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.CreateOrUpdateDeployment");
            scope.Start();
            try
            {
                return RestClient.CreateOrUpdateDeployment(deploymentId, deployment, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteDeploymentAsync(string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.DeleteDeployment");
            scope.Start();
            try
            {
                return await RestClient.DeleteDeploymentAsync(deploymentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteDeployment(string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.DeleteDeployment");
            scope.Start();
            try
            {
                return RestClient.DeleteDeployment(deploymentId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<DeploymentStatus>> GetDeploymentStatusAsync(string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                return await RestClient.GetDeploymentStatusAsync(deploymentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<DeploymentStatus> GetDeploymentStatus(string deploymentId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                return RestClient.GetDeploymentStatus(deploymentId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of deployments. </summary>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<Deployment> GetAllDeploymentsAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<Deployment>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetAllDeployments");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllDeploymentsAsync(filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Deployment>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetAllDeployments");
                scope.Start();
                try
                {
                    var response = await RestClient.GetAllDeploymentsNextPageAsync(nextLink, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of deployments. </summary>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<Deployment> GetAllDeployments(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<Deployment> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetAllDeployments");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllDeployments(filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Deployment> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetAllDeployments");
                scope.Start();
                try
                {
                    var response = RestClient.GetAllDeploymentsNextPage(nextLink, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public virtual AsyncPageable<DeploymentDeviceState> GetDeploymentDevicesAsync(string deploymentId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            async Task<Page<DeploymentDeviceState>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDeploymentDevicesAsync(deploymentId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeploymentDeviceState>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentDevices");
                scope.Start();
                try
                {
                    var response = await RestClient.GetDeploymentDevicesNextPageAsync(nextLink, deploymentId, filter, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deploymentId"/> is null. </exception>
        public virtual Pageable<DeploymentDeviceState> GetDeploymentDevices(string deploymentId, string filter = null, CancellationToken cancellationToken = default)
        {
            if (deploymentId == null)
            {
                throw new ArgumentNullException(nameof(deploymentId));
            }

            Page<DeploymentDeviceState> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentDevices");
                scope.Start();
                try
                {
                    var response = RestClient.GetDeploymentDevices(deploymentId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeploymentDeviceState> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentDevices");
                scope.Start();
                try
                {
                    var response = RestClient.GetDeploymentDevicesNextPage(nextLink, deploymentId, filter, cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
