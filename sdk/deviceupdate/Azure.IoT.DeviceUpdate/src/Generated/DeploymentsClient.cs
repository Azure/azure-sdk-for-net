// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.IoT.DeviceUpdate
{
    /// <summary> The Deployments service client. </summary>
    public partial class DeploymentsClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://management.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private string accountEndpoint;
        private string instanceId;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of DeploymentsClient for mocking. </summary>
        protected DeploymentsClient()
        {
        }

        /// <summary> Initializes a new instance of DeploymentsClient. </summary>
        /// <param name="accountEndpoint"> Account endpoint. </param>
        /// <param name="instanceId"> Account instance identifier. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DeploymentsClient(string accountEndpoint, string instanceId, TokenCredential credential, DeviceUpdateClientOptions options = null)
        {
            if (accountEndpoint == null)
            {
                throw new ArgumentNullException(nameof(accountEndpoint));
            }
            if (instanceId == null)
            {
                throw new ArgumentNullException(nameof(instanceId));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new DeviceUpdateClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.accountEndpoint = accountEndpoint;
            this.instanceId = instanceId;
            apiVersion = options.Version;
        }

        /// <summary> Gets a list of deployments. </summary>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetAllDeploymentsAsync(string filter = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetAllDeploymentsRequest(filter, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetAllDeployments");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of deployments. </summary>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetAllDeployments(string filter = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetAllDeploymentsRequest(filter, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetAllDeployments");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetAllDeployments"/> and <see cref="GetAllDeploymentsAsync"/> operations. </summary>
        /// <param name="filter"> Restricts the set of deployments returned. You can filter on update Provider, Name and Version property. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetAllDeploymentsRequest(string filter = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetDeploymentAsync(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetDeploymentRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeployment");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetDeployment(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetDeploymentRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeployment");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetDeployment"/> and <see cref="GetDeploymentAsync"/> operations. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetDeploymentRequest(string deploymentId, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>deploymentId</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the deployment identifier. </term>
        ///   </item>
        ///   <item>
        ///     <term>deploymentType</term>
        ///     <term>&quot;Complete&quot; | &quot;Download&quot; | &quot;Install&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the deployment type. </term>
        ///   </item>
        ///   <item>
        ///     <term>deviceClassId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Gets or sets the device class identifier. </term>
        ///   </item>
        ///   <item>
        ///     <term>startDateTime</term>
        ///     <term>string (ISO 8601 Format)</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the Deployment start datetime. </term>
        ///   </item>
        ///   <item>
        ///     <term>deviceGroupType</term>
        ///     <term>&quot;All&quot; | &quot;Devices&quot; | &quot;DeviceGroupDefinitions&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the device group type. </term>
        ///   </item>
        ///   <item>
        ///     <term>deviceGroupDefinition</term>
        ///     <term>string[]</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the device group definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateId</term>
        ///     <term>UpdateId</term>
        ///     <term>Yes</term>
        ///     <term> Update identity. </term>
        ///   </item>
        ///   <item>
        ///     <term>isCanceled</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Boolean flag indicating whether the deployment was canceled. </term>
        ///   </item>
        ///   <item>
        ///     <term>isRetried</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Boolean flag indicating whether the deployment has been retried. </term>
        ///   </item>
        ///   <item>
        ///     <term>isCompleted</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Boolean flag indicating whether the deployment was completed. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>UpdateId</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>provider</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Update provider. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Update name. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Update version. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateDeploymentAsync(string deploymentId, RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateOrUpdateDeploymentRequest(deploymentId, requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.CreateOrUpdateDeployment");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a deployment. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>deploymentId</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the deployment identifier. </term>
        ///   </item>
        ///   <item>
        ///     <term>deploymentType</term>
        ///     <term>&quot;Complete&quot; | &quot;Download&quot; | &quot;Install&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the deployment type. </term>
        ///   </item>
        ///   <item>
        ///     <term>deviceClassId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Gets or sets the device class identifier. </term>
        ///   </item>
        ///   <item>
        ///     <term>startDateTime</term>
        ///     <term>string (ISO 8601 Format)</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the Deployment start datetime. </term>
        ///   </item>
        ///   <item>
        ///     <term>deviceGroupType</term>
        ///     <term>&quot;All&quot; | &quot;Devices&quot; | &quot;DeviceGroupDefinitions&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the device group type. </term>
        ///   </item>
        ///   <item>
        ///     <term>deviceGroupDefinition</term>
        ///     <term>string[]</term>
        ///     <term>Yes</term>
        ///     <term> Gets or sets the device group definition. </term>
        ///   </item>
        ///   <item>
        ///     <term>updateId</term>
        ///     <term>UpdateId</term>
        ///     <term>Yes</term>
        ///     <term> Update identity. </term>
        ///   </item>
        ///   <item>
        ///     <term>isCanceled</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Boolean flag indicating whether the deployment was canceled. </term>
        ///   </item>
        ///   <item>
        ///     <term>isRetried</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Boolean flag indicating whether the deployment has been retried. </term>
        ///   </item>
        ///   <item>
        ///     <term>isCompleted</term>
        ///     <term>boolean</term>
        ///     <term></term>
        ///     <term> Boolean flag indicating whether the deployment was completed. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>UpdateId</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>provider</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Update provider. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Update name. </term>
        ///   </item>
        ///   <item>
        ///     <term>version</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Update version. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateDeployment(string deploymentId, RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateOrUpdateDeploymentRequest(deploymentId, requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.CreateOrUpdateDeployment");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateDeployment"/> and <see cref="CreateOrUpdateDeploymentAsync"/> operations. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCreateOrUpdateDeploymentRequest(string deploymentId, RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteDeploymentAsync(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteDeploymentRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.DeleteDeployment");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteDeployment(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteDeploymentRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.DeleteDeployment");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="DeleteDeployment"/> and <see cref="DeleteDeploymentAsync"/> operations. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateDeleteDeploymentRequest(string deploymentId, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetDeploymentStatusAsync(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetDeploymentStatusRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetDeploymentStatus(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetDeploymentStatusRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetDeploymentStatus"/> and <see cref="GetDeploymentStatusAsync"/> operations. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetDeploymentStatusRequest(string deploymentId, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendPath("/status", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetDeploymentDevicesAsync(string deploymentId, string filter = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetDeploymentDevicesRequest(deploymentId, filter, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentDevices");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetDeploymentDevices(string deploymentId, string filter = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetDeploymentDevicesRequest(deploymentId, filter, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentDevices");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetDeploymentDevices"/> and <see cref="GetDeploymentDevicesAsync"/> operations. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="filter"> Restricts the set of deployment device states returned. You can filter on deviceId and/or deviceState. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetDeploymentDevicesRequest(string deploymentId, string filter = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendPath("/devicestates", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Cancels a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CancelDeploymentAsync(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCancelDeploymentRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.CancelDeployment");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels a deployment. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CancelDeployment(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCancelDeploymentRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.CancelDeployment");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CancelDeployment"/> and <see cref="CancelDeploymentAsync"/> operations. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCancelDeploymentRequest(string deploymentId, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("action", "cancel", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Retries a deployment with failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RetryDeploymentAsync(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateRetryDeploymentRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.RetryDeployment");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Retries a deployment with failed devices. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RetryDeployment(string deploymentId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateRetryDeploymentRequest(deploymentId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DeploymentsClient.RetryDeployment");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="RetryDeployment"/> and <see cref="RetryDeploymentAsync"/> operations. </summary>
        /// <param name="deploymentId"> Deployment identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateRetryDeploymentRequest(string deploymentId, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(accountEndpoint, false);
            uri.AppendPath("/deviceupdate/", false);
            uri.AppendPath(instanceId, false);
            uri.AppendPath("/v2/management/deployments/", false);
            uri.AppendPath(deploymentId, true);
            uri.AppendQuery("action", "retry", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }
    }
}
