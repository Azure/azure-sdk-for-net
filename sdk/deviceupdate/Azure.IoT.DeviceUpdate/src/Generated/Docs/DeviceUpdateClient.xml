<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetUpdateAsync(String,String,String,ETag,RequestContext)">
<example>
This sample shows how to call GetUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateAsync("<provider>", "<name>", "<version>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("manifestVersion").ToString());
Console.WriteLine(result.GetProperty("importedDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetUpdateAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateAsync("<provider>", "<name>", "<version>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("isDeployable").ToString());
Console.WriteLine(result.GetProperty("updateType").ToString());
Console.WriteLine(result.GetProperty("installedCriteria").ToString());
Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("handler").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("handlerProperties").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("files")[0].ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("manifestVersion").ToString());
Console.WriteLine(result.GetProperty("importedDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Update</c>:
<code>{
  updateId: {
    provider: string, # Required. Update provider.
    name: string, # Required. Update name.
    version: string, # Required. Update version.
  }, # Required. Update identity.
  description: string, # Optional. Update description specified by creator.
  friendlyName: string, # Optional. Friendly update name specified by importer.
  isDeployable: boolean, # Optional. Whether the update can be deployed to a device on its own.
  updateType: string, # Optional. Update type. Deprecated in latest import manifest schema.
  installedCriteria: string, # Optional. String interpreted by Device Update client to determine if the update is installed on the device. Deprecated in latest import manifest schema.
  compatibility: [Dictionary&lt;string, string&gt;], # Required. List of update compatibility information.
  instructions: {
    steps: [
      {
        type: &quot;Inline&quot; | &quot;Reference&quot;, # Optional. Step type.
        description: string, # Optional. Step description.
        handler: string, # Optional. Identity of handler that will execute this step. Required if step type is inline.
        handlerProperties: AnyObject, # Optional. Parameters to be passed to handler during execution.
        files: [string], # Optional. Collection of file names to be passed to handler during execution. Required if step type is inline.
        updateId: UpdateId, # Optional. Referenced child update identity.  Required if step type is reference.
      }
    ], # Required. Collection of installation steps.
  }, # Optional. Update install instructions.
  referencedBy: [UpdateId], # Optional. List of update identities that reference this update.
  scanResult: string, # Optional. Update aggregate scan result (calculated from payload file scan results).
  manifestVersion: string, # Required. Schema version of manifest used to import the update.
  importedDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the update was imported.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the update was created.
  etag: string, # Optional. Update ETag.
}
</code>

</remarks>
    </member>
    <member name="GetUpdate(String,String,String,ETag,RequestContext)">
<example>
This sample shows how to call GetUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdate("<provider>", "<name>", "<version>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("manifestVersion").ToString());
Console.WriteLine(result.GetProperty("importedDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetUpdate with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdate("<provider>", "<name>", "<version>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("isDeployable").ToString());
Console.WriteLine(result.GetProperty("updateType").ToString());
Console.WriteLine(result.GetProperty("installedCriteria").ToString());
Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("handler").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("handlerProperties").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("files")[0].ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("manifestVersion").ToString());
Console.WriteLine(result.GetProperty("importedDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Update</c>:
<code>{
  updateId: {
    provider: string, # Required. Update provider.
    name: string, # Required. Update name.
    version: string, # Required. Update version.
  }, # Required. Update identity.
  description: string, # Optional. Update description specified by creator.
  friendlyName: string, # Optional. Friendly update name specified by importer.
  isDeployable: boolean, # Optional. Whether the update can be deployed to a device on its own.
  updateType: string, # Optional. Update type. Deprecated in latest import manifest schema.
  installedCriteria: string, # Optional. String interpreted by Device Update client to determine if the update is installed on the device. Deprecated in latest import manifest schema.
  compatibility: [Dictionary&lt;string, string&gt;], # Required. List of update compatibility information.
  instructions: {
    steps: [
      {
        type: &quot;Inline&quot; | &quot;Reference&quot;, # Optional. Step type.
        description: string, # Optional. Step description.
        handler: string, # Optional. Identity of handler that will execute this step. Required if step type is inline.
        handlerProperties: AnyObject, # Optional. Parameters to be passed to handler during execution.
        files: [string], # Optional. Collection of file names to be passed to handler during execution. Required if step type is inline.
        updateId: UpdateId, # Optional. Referenced child update identity.  Required if step type is reference.
      }
    ], # Required. Collection of installation steps.
  }, # Optional. Update install instructions.
  referencedBy: [UpdateId], # Optional. List of update identities that reference this update.
  scanResult: string, # Optional. Update aggregate scan result (calculated from payload file scan results).
  manifestVersion: string, # Required. Schema version of manifest used to import the update.
  importedDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the update was imported.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the update was created.
  etag: string, # Optional. Update ETag.
}
</code>

</remarks>
    </member>
    <member name="GetFileAsync(String,String,String,String,ETag,RequestContext)">
<example>
This sample shows how to call GetFileAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetFileAsync("<provider>", "<name>", "<version>", "<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("hashes").GetProperty("<test>").ToString());
]]></code>
This sample shows how to call GetFileAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetFileAsync("<provider>", "<name>", "<version>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("hashes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("mimeType").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("scanDetails").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("properties").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("downloadHandler").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("hashes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mimeType").ToString());
Console.WriteLine(result.GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("scanDetails").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateFile</c>:
<code>{
  fileId: string, # Required. File identity, generated by server at import time.
  relatedFiles: [
    {
      fileName: string, # Required. File name.
      sizeInBytes: number, # Required. File size in number of bytes.
      hashes: Dictionary&lt;string, string&gt;, # Required. Mapping of hashing algorithm to base64 encoded hash values.
      mimeType: string, # Optional. File MIME type.
      scanResult: string, # Optional. Anti-malware scan result.
      scanDetails: string, # Optional. Anti-malware scan details.
      properties: Dictionary&lt;string, string&gt;, # Optional. Optional file properties (not consumed by service but pass-through to device).
    }
  ], # Optional. Optional related files metadata used together DownloadHandler metadata to download payload file.
  downloadHandler: {
    id: string, # Required. Download handler identifier.
  }, # Optional. Optional download handler for utilizing related files to download payload file.
  etag: string, # Optional. File ETag.
  fileName: string, # Required. File name.
  sizeInBytes: number, # Required. File size in number of bytes.
  hashes: Dictionary&lt;string, string&gt;, # Required. Mapping of hashing algorithm to base64 encoded hash values.
  mimeType: string, # Optional. File MIME type.
  scanResult: string, # Optional. Anti-malware scan result.
  scanDetails: string, # Optional. Anti-malware scan details.
  properties: Dictionary&lt;string, string&gt;, # Optional. Optional file properties (not consumed by service but pass-through to device).
}
</code>

</remarks>
    </member>
    <member name="GetFile(String,String,String,String,ETag,RequestContext)">
<example>
This sample shows how to call GetFile with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetFile("<provider>", "<name>", "<version>", "<fileId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("hashes").GetProperty("<test>").ToString());
]]></code>
This sample shows how to call GetFile with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetFile("<provider>", "<name>", "<version>", "<fileId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("fileId").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("hashes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("mimeType").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("scanDetails").ToString());
Console.WriteLine(result.GetProperty("relatedFiles")[0].GetProperty("properties").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("downloadHandler").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("fileName").ToString());
Console.WriteLine(result.GetProperty("sizeInBytes").ToString());
Console.WriteLine(result.GetProperty("hashes").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("mimeType").ToString());
Console.WriteLine(result.GetProperty("scanResult").ToString());
Console.WriteLine(result.GetProperty("scanDetails").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateFile</c>:
<code>{
  fileId: string, # Required. File identity, generated by server at import time.
  relatedFiles: [
    {
      fileName: string, # Required. File name.
      sizeInBytes: number, # Required. File size in number of bytes.
      hashes: Dictionary&lt;string, string&gt;, # Required. Mapping of hashing algorithm to base64 encoded hash values.
      mimeType: string, # Optional. File MIME type.
      scanResult: string, # Optional. Anti-malware scan result.
      scanDetails: string, # Optional. Anti-malware scan details.
      properties: Dictionary&lt;string, string&gt;, # Optional. Optional file properties (not consumed by service but pass-through to device).
    }
  ], # Optional. Optional related files metadata used together DownloadHandler metadata to download payload file.
  downloadHandler: {
    id: string, # Required. Download handler identifier.
  }, # Optional. Optional download handler for utilizing related files to download payload file.
  etag: string, # Optional. File ETag.
  fileName: string, # Required. File name.
  sizeInBytes: number, # Required. File size in number of bytes.
  hashes: Dictionary&lt;string, string&gt;, # Required. Mapping of hashing algorithm to base64 encoded hash values.
  mimeType: string, # Optional. File MIME type.
  scanResult: string, # Optional. Anti-malware scan result.
  scanDetails: string, # Optional. Anti-malware scan details.
  properties: Dictionary&lt;string, string&gt;, # Optional. Optional file properties (not consumed by service but pass-through to device).
}
</code>

</remarks>
    </member>
    <member name="GetOperationStatusAsync(String,ETag,RequestContext)">
<example>
This sample shows how to call GetOperationStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetOperationStatusAsync("<operationId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetOperationStatusAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = await client.GetOperationStatusAsync("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("resourceLocation").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateOperation</c>:
<code>{
  operationId: string, # Required. Operation Id.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Operation status.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update being imported or deleted. For import, this property will only be populated after import manifest is processed successfully.
  resourceLocation: string, # Optional. Location of the imported update when operation is successful.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. Operation error encountered, if any.
  traceId: string, # Optional. Operation correlation identity that can used by Microsoft Support for troubleshooting.
  lastActionDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation status was last updated.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation was created.
  etag: string, # Optional. Operation ETag.
}
</code>

</remarks>
    </member>
    <member name="GetOperationStatus(String,ETag,RequestContext)">
<example>
This sample shows how to call GetOperationStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetOperationStatus("<operationId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetOperationStatus with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

Response response = client.GetOperationStatus("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("resourceLocation").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateOperation</c>:
<code>{
  operationId: string, # Required. Operation Id.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Operation status.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update being imported or deleted. For import, this property will only be populated after import manifest is processed successfully.
  resourceLocation: string, # Optional. Location of the imported update when operation is successful.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. Operation error encountered, if any.
  traceId: string, # Optional. Operation correlation identity that can used by Microsoft Support for troubleshooting.
  lastActionDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation status was last updated.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation was created.
  etag: string, # Optional. Operation ETag.
}
</code>

</remarks>
    </member>
    <member name="GetUpdatesAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetUpdatesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetUpdatesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("manifestVersion").ToString());
    Console.WriteLine(result.GetProperty("importedDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetUpdatesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetUpdatesAsync("<search>", "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("isDeployable").ToString());
    Console.WriteLine(result.GetProperty("updateType").ToString());
    Console.WriteLine(result.GetProperty("installedCriteria").ToString());
    Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("handler").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("handlerProperties").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("files")[0].ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("scanResult").ToString());
    Console.WriteLine(result.GetProperty("manifestVersion").ToString());
    Console.WriteLine(result.GetProperty("importedDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>UpdateListValue</c>:
<code>{
  updateId: {
    provider: string, # Required. Update provider.
    name: string, # Required. Update name.
    version: string, # Required. Update version.
  }, # Required. Update identity.
  description: string, # Optional. Update description specified by creator.
  friendlyName: string, # Optional. Friendly update name specified by importer.
  isDeployable: boolean, # Optional. Whether the update can be deployed to a device on its own.
  updateType: string, # Optional. Update type. Deprecated in latest import manifest schema.
  installedCriteria: string, # Optional. String interpreted by Device Update client to determine if the update is installed on the device. Deprecated in latest import manifest schema.
  compatibility: [Dictionary&lt;string, string&gt;], # Required. List of update compatibility information.
  instructions: {
    steps: [
      {
        type: &quot;Inline&quot; | &quot;Reference&quot;, # Optional. Step type.
        description: string, # Optional. Step description.
        handler: string, # Optional. Identity of handler that will execute this step. Required if step type is inline.
        handlerProperties: AnyObject, # Optional. Parameters to be passed to handler during execution.
        files: [string], # Optional. Collection of file names to be passed to handler during execution. Required if step type is inline.
        updateId: UpdateId, # Optional. Referenced child update identity.  Required if step type is reference.
      }
    ], # Required. Collection of installation steps.
  }, # Optional. Update install instructions.
  referencedBy: [UpdateId], # Optional. List of update identities that reference this update.
  scanResult: string, # Optional. Update aggregate scan result (calculated from payload file scan results).
  manifestVersion: string, # Required. Schema version of manifest used to import the update.
  importedDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the update was imported.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the update was created.
  etag: string, # Optional. Update ETag.
}
</code>

</remarks>
    </member>
    <member name="GetUpdates(String,String,RequestContext)">
<example>
This sample shows how to call GetUpdates and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetUpdates())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("manifestVersion").ToString());
    Console.WriteLine(result.GetProperty("importedDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetUpdates with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetUpdates("<search>", "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("isDeployable").ToString());
    Console.WriteLine(result.GetProperty("updateType").ToString());
    Console.WriteLine(result.GetProperty("installedCriteria").ToString());
    Console.WriteLine(result.GetProperty("compatibility")[0].GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("handler").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("handlerProperties").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("files")[0].ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("instructions").GetProperty("steps")[0].GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("referencedBy")[0].GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("scanResult").ToString());
    Console.WriteLine(result.GetProperty("manifestVersion").ToString());
    Console.WriteLine(result.GetProperty("importedDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>UpdateListValue</c>:
<code>{
  updateId: {
    provider: string, # Required. Update provider.
    name: string, # Required. Update name.
    version: string, # Required. Update version.
  }, # Required. Update identity.
  description: string, # Optional. Update description specified by creator.
  friendlyName: string, # Optional. Friendly update name specified by importer.
  isDeployable: boolean, # Optional. Whether the update can be deployed to a device on its own.
  updateType: string, # Optional. Update type. Deprecated in latest import manifest schema.
  installedCriteria: string, # Optional. String interpreted by Device Update client to determine if the update is installed on the device. Deprecated in latest import manifest schema.
  compatibility: [Dictionary&lt;string, string&gt;], # Required. List of update compatibility information.
  instructions: {
    steps: [
      {
        type: &quot;Inline&quot; | &quot;Reference&quot;, # Optional. Step type.
        description: string, # Optional. Step description.
        handler: string, # Optional. Identity of handler that will execute this step. Required if step type is inline.
        handlerProperties: AnyObject, # Optional. Parameters to be passed to handler during execution.
        files: [string], # Optional. Collection of file names to be passed to handler during execution. Required if step type is inline.
        updateId: UpdateId, # Optional. Referenced child update identity.  Required if step type is reference.
      }
    ], # Required. Collection of installation steps.
  }, # Optional. Update install instructions.
  referencedBy: [UpdateId], # Optional. List of update identities that reference this update.
  scanResult: string, # Optional. Update aggregate scan result (calculated from payload file scan results).
  manifestVersion: string, # Required. Schema version of manifest used to import the update.
  importedDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the update was imported.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the update was created.
  etag: string, # Optional. Update ETag.
}
</code>

</remarks>
    </member>
    <member name="GetProvidersAsync(RequestContext)">
<example>
This sample shows how to call GetProvidersAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetProvidersAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
</example>
    </member>
    <member name="GetProviders(RequestContext)">
<example>
This sample shows how to call GetProviders and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetProviders())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
</example>
    </member>
    <member name="GetNamesAsync(String,RequestContext)">
<example>
This sample shows how to call GetNamesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetNamesAsync("<provider>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
</example>
    </member>
    <member name="GetNames(String,RequestContext)">
<example>
This sample shows how to call GetNames with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetNames("<provider>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
</example>
    </member>
    <member name="GetVersionsAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetVersionsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetVersionsAsync("<provider>", "<name>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetVersionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetVersionsAsync("<provider>", "<name>", "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
</example>
    </member>
    <member name="GetVersions(String,String,String,RequestContext)">
<example>
This sample shows how to call GetVersions with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetVersions("<provider>", "<name>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetVersions with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetVersions("<provider>", "<name>", "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
</example>
    </member>
    <member name="GetFilesAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetFilesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetFilesAsync("<provider>", "<name>", "<version>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
</example>
    </member>
    <member name="GetFiles(String,String,String,RequestContext)">
<example>
This sample shows how to call GetFiles with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetFiles("<provider>", "<name>", "<version>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
</example>
    </member>
    <member name="GetOperationStatusesAsync(String,Int32,RequestContext)">
<example>
This sample shows how to call GetOperationStatusesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetOperationStatusesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatusesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetOperationStatusesAsync("<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("resourceLocation").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>UpdateOperationsListValue</c>:
<code>{
  operationId: string, # Required. Operation Id.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Operation status.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update being imported or deleted. For import, this property will only be populated after import manifest is processed successfully.
  resourceLocation: string, # Optional. Location of the imported update when operation is successful.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. Operation error encountered, if any.
  traceId: string, # Optional. Operation correlation identity that can used by Microsoft Support for troubleshooting.
  lastActionDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation status was last updated.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation was created.
  etag: string, # Optional. Operation ETag.
}
</code>

</remarks>
    </member>
    <member name="GetOperationStatuses(String,Int32,RequestContext)">
<example>
This sample shows how to call GetOperationStatuses and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetOperationStatuses())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatuses with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetOperationStatuses("<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("resourceLocation").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>UpdateOperationsListValue</c>:
<code>{
  operationId: string, # Required. Operation Id.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Operation status.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update being imported or deleted. For import, this property will only be populated after import manifest is processed successfully.
  resourceLocation: string, # Optional. Location of the imported update when operation is successful.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. Operation error encountered, if any.
  traceId: string, # Optional. Operation correlation identity that can used by Microsoft Support for troubleshooting.
  lastActionDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation status was last updated.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation was created.
  etag: string, # Optional. Operation ETag.
}
</code>

</remarks>
    </member>
    <member name="DeleteUpdateAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteUpdateAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

var operation = await client.DeleteUpdateAsync(WaitUntil.Started, "<provider>", "<name>", "<version>");

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
    </member>
    <member name="DeleteUpdate(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteUpdate with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

var operation = client.DeleteUpdate(WaitUntil.Started, "<provider>", "<name>", "<version>");

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
    </member>
    <member name="StartImportUpdateAsync(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call StartImportUpdateAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

var data = new[] {
    new {
        importManifest = new {
            url = "<url>",
            sizeInBytes = 1234L,
            hashes = new {
                key = "<String>",
            },
        },
        friendlyName = "<friendlyName>",
        files = new[] {
            new {
                filename = "<filename>",
                url = "<url>",
            }
        },
    }
};

var operation = await client.StartImportUpdateAsync(WaitUntil.Started, RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ImportUpdateInputItem</c>:
<code>{
  importManifest: {
    url: string, # Required. Azure Blob location from which the import manifest can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours.
    sizeInBytes: number, # Required. File size in number of bytes.
    hashes: Dictionary&lt;string, string&gt;, # Required. A JSON object containing the hash(es) of the file. At least SHA256 hash is required. This object can be thought of as a set of key-value pairs where the key is the hash algorithm, and the value is the hash of the file calculated using that algorithm.
  }, # Required. Import manifest metadata like source URL, file size/hashes, etc.
  friendlyName: string, # Optional. Friendly update name.
  files: [
    {
      filename: string, # Required. Update file name as specified inside import manifest.
      url: string, # Required. Azure Blob location from which the update file can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours.
    }
  ], # Optional. One or more update file properties like filename and source URL.
}
</code>

</remarks>
    </member>
    <member name="StartImportUpdate(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call StartImportUpdate with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);

var data = new[] {
    new {
        importManifest = new {
            url = "<url>",
            sizeInBytes = 1234L,
            hashes = new {
                key = "<String>",
            },
        },
        friendlyName = "<friendlyName>",
        files = new[] {
            new {
                filename = "<filename>",
                url = "<url>",
            }
        },
    }
};

var operation = client.StartImportUpdate(WaitUntil.Started, RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload.

Request Body:

Schema for <c>ImportUpdateInputItem</c>:
<code>{
  importManifest: {
    url: string, # Required. Azure Blob location from which the import manifest can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours.
    sizeInBytes: number, # Required. File size in number of bytes.
    hashes: Dictionary&lt;string, string&gt;, # Required. A JSON object containing the hash(es) of the file. At least SHA256 hash is required. This object can be thought of as a set of key-value pairs where the key is the hash algorithm, and the value is the hash of the file calculated using that algorithm.
  }, # Required. Import manifest metadata like source URL, file size/hashes, etc.
  friendlyName: string, # Optional. Friendly update name.
  files: [
    {
      filename: string, # Required. Update file name as specified inside import manifest.
      url: string, # Required. Azure Blob location from which the update file can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours.
    }
  ], # Optional. One or more update file properties like filename and source URL.
}
</code>

</remarks>
    </member>
  </members>
</doc>