<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDeviceClassAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceClassAsync("<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetDeviceClassAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceClassAsync("<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClass(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClass and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceClass("<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call GetDeviceClass with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceClass("<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code></example>
    </member>
    <member name="UpdateDeviceClassAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateDeviceClassAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    friendlyName = "<friendlyName>",
});
Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateDeviceClassAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    friendlyName = "<friendlyName>",
});
Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code></example>
    </member>
    <member name="UpdateDeviceClass(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateDeviceClass and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    friendlyName = "<friendlyName>",
});
Response response = client.UpdateDeviceClass("<deviceClassId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
]]></code>
This sample shows how to call UpdateDeviceClass with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    friendlyName = "<friendlyName>",
});
Response response = client.UpdateDeviceClass("<deviceClassId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeviceClassAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteDeviceClassAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeviceClassAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteDeviceClass(string,RequestContext)">
      <example>
This sample shows how to call DeleteDeviceClass.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteDeviceClass("<deviceClassId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeviceClass with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteDeviceClass("<deviceClassId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDeviceAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceAsync("<deviceId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
]]></code>
This sample shows how to call GetDeviceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceAsync("<deviceId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code></example>
    </member>
    <member name="GetDevice(string,RequestContext)">
      <example>
This sample shows how to call GetDevice and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDevice("<deviceId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
]]></code>
This sample shows how to call GetDevice with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDevice("<deviceId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceModuleAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceModuleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
]]></code>
This sample shows how to call GetDeviceModuleAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceModule(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceModule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceModule("<deviceId>", "<moduleId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
]]></code>
This sample shows how to call GetDeviceModule with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceModule("<deviceId>", "<moduleId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code></example>
    </member>
    <member name="GetUpdateComplianceAsync(RequestContext)">
      <example>
This sample shows how to call GetUpdateComplianceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetUpdateComplianceAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetUpdateComplianceAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetUpdateComplianceAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetUpdateCompliance(RequestContext)">
      <example>
This sample shows how to call GetUpdateCompliance and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetUpdateCompliance();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetUpdateCompliance with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetUpdateCompliance();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call GetGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetGroupAsync("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetGroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetGroupAsync("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
Console.WriteLine(result.GetProperty("deployments")[0].ToString());
]]></code></example>
    </member>
    <member name="GetGroup(string,RequestContext)">
      <example>
This sample shows how to call GetGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetGroup("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetGroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetGroup("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
Console.WriteLine(result.GetProperty("deployments")[0].ToString());
]]></code></example>
    </member>
    <member name="DeleteGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call DeleteGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteGroupAsync("<groupId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteGroupAsync("<groupId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteGroup(string,RequestContext)">
      <example>
This sample shows how to call DeleteGroup.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteGroup("<groupId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteGroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteGroup("<groupId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetUpdateComplianceForGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call GetUpdateComplianceForGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetUpdateComplianceForGroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetUpdateComplianceForGroup(string,RequestContext)">
      <example>
This sample shows how to call GetUpdateComplianceForGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetUpdateComplianceForGroup("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetUpdateComplianceForGroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetUpdateComplianceForGroup("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call GetDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="GetDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeployment("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call GetDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeployment("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateDeploymentAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    update = new
    {
        updateId = new
        {
            provider = "<provider>",
            name = "<name>",
            version = "<version>",
        },
    },
    groupId = "<groupId>",
});
Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call CreateOrUpdateDeploymentAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    update = new
    {
        updateId = new
        {
            provider = "<provider>",
            name = "<name>",
            version = "<version>",
        },
    },
    groupId = "<groupId>",
    deviceClassSubgroups = new object[]
    {
        "<deviceClassSubgroups>"
    },
    isCanceled = true,
    isRetried = true,
    rollbackPolicy = new
    {
        failure = new
        {
            devicesFailedPercentage = 1234,
            devicesFailedCount = 1234,
        },
    },
    isCloudInitiatedRollback = true,
});
Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateDeployment(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    update = new
    {
        updateId = new
        {
            provider = "<provider>",
            name = "<name>",
            version = "<version>",
        },
    },
    groupId = "<groupId>",
});
Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call CreateOrUpdateDeployment with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    update = new
    {
        updateId = new
        {
            provider = "<provider>",
            name = "<name>",
            version = "<version>",
        },
    },
    groupId = "<groupId>",
    deviceClassSubgroups = new object[]
    {
        "<deviceClassSubgroups>"
    },
    isCanceled = true,
    isRetried = true,
    rollbackPolicy = new
    {
        failure = new
        {
            devicesFailedPercentage = 1234,
            devicesFailedCount = 1234,
        },
    },
    isCloudInitiatedRollback = true,
});
Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeploymentAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeploymentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteDeployment(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeployment.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteDeployment("<groupId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeployment with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteDeployment("<groupId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDeploymentStatusAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
]]></code>
This sample shows how to call GetDeploymentStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentStatus(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
]]></code>
This sample shows how to call GetDeploymentStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("deploymentId").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroup(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("deploymentId").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeviceClassSubgroupAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeviceClassSubgroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeviceClassSubgroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteDeviceClassSubgroup(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeviceClassSubgroup.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeviceClassSubgroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupUpdateComplianceAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupUpdateComplianceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupUpdateComplianceAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupUpdateCompliance(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupUpdateCompliance and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupUpdateCompliance with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetBestUpdatesForDeviceClassSubgroupAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetBestUpdatesForDeviceClassSubgroup(string,string,RequestContext)">
      <example>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentForDeviceClassSubgroupAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentForDeviceClassSubgroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call GetDeploymentForDeviceClassSubgroupAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="GetDeploymentForDeviceClassSubgroup(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentForDeviceClassSubgroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call GetDeploymentForDeviceClassSubgroup with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="DeleteDeploymentForDeviceClassSubgroupAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroupAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="DeleteDeploymentForDeviceClassSubgroup(string,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroup.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroup with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="StopDeploymentAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call StopDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call StopDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="StopDeployment(string,string,string,RequestContext)">
      <example>
This sample shows how to call StopDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call StopDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="RetryDeploymentAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call RetryDeploymentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call RetryDeploymentAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="RetryDeployment(string,string,string,RequestContext)">
      <example>
This sample shows how to call RetryDeployment and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call RetryDeployment with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupDeploymentStatusAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupDeploymentStatus(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
]]></code>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
]]></code></example>
    </member>
    <member name="GetOperationStatusAsync(string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetOperationStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetOperationStatusAsync("<operationId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetOperationStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetOperationStatusAsync("<operationId>", ifNoneMatch: new ETag("<ifNoneMatch>"));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="GetOperationStatus(string,ETag?,RequestContext)">
      <example>
This sample shows how to call GetOperationStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetOperationStatus("<operationId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetOperationStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetOperationStatus("<operationId>", ifNoneMatch: new ETag("<ifNoneMatch>"));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code></example>
    </member>
    <member name="StartLogCollectionAsync(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call StartLogCollectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deviceList = new object[]
    {
        new
        {
            deviceId = "<deviceId>",
        }
    },
});
Response response = await client.StartLogCollectionAsync("<logCollectionId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call StartLogCollectionAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    operationId = "<operationId>",
    deviceList = new object[]
    {
        new
        {
            deviceId = "<deviceId>",
            moduleId = "<moduleId>",
        }
    },
    description = "<description>",
});
Response response = await client.StartLogCollectionAsync("<logCollectionId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
    </member>
    <member name="StartLogCollection(string,RequestContent,RequestContext)">
      <example>
This sample shows how to call StartLogCollection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    deviceList = new object[]
    {
        new
        {
            deviceId = "<deviceId>",
        }
    },
});
Response response = client.StartLogCollection("<logCollectionId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call StartLogCollection with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create(new
{
    operationId = "<operationId>",
    deviceList = new object[]
    {
        new
        {
            deviceId = "<deviceId>",
            moduleId = "<moduleId>",
        }
    },
    description = "<description>",
});
Response response = client.StartLogCollection("<logCollectionId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
    </member>
    <member name="GetLogCollectionAsync(string,RequestContext)">
      <example>
This sample shows how to call GetLogCollectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetLogCollectionAsync("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call GetLogCollectionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetLogCollectionAsync("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
    </member>
    <member name="GetLogCollection(string,RequestContext)">
      <example>
This sample shows how to call GetLogCollection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetLogCollection("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call GetLogCollection with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetLogCollection("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
    </member>
    <member name="GetLogCollectionDetailedStatusAsync(string,RequestContext)">
      <example>
This sample shows how to call GetLogCollectionDetailedStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetLogCollectionDetailedStatusAsync("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetLogCollectionDetailedStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = await client.GetLogCollectionDetailedStatusAsync("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
    </member>
    <member name="GetLogCollectionDetailedStatus(string,RequestContext)">
      <example>
This sample shows how to call GetLogCollectionDetailedStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetLogCollectionDetailedStatus("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetLogCollectionDetailedStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

Response response = client.GetLogCollectionDetailedStatus("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
    </member>
    <member name="GetDeviceClassesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeviceClassesAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeviceClassesAsync(filter: "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceClasses(string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClasses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeviceClasses())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
}
]]></code>
This sample shows how to call GetDeviceClasses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeviceClasses(filter: "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
}
]]></code></example>
    </member>
    <member name="GetInstallableUpdatesForDeviceClassesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetInstallableUpdatesForDeviceClassesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
}
]]></code>
This sample shows how to call GetInstallableUpdatesForDeviceClassesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
}
]]></code></example>
    </member>
    <member name="GetInstallableUpdatesForDeviceClasses(string,RequestContext)">
      <example>
This sample shows how to call GetInstallableUpdatesForDeviceClasses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
}
]]></code>
This sample shows how to call GetInstallableUpdatesForDeviceClasses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
}
]]></code></example>
    </member>
    <member name="GetDevicesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetDevicesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDevicesAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
}
]]></code>
This sample shows how to call GetDevicesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDevicesAsync(filter: "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
    Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
}
]]></code></example>
    </member>
    <member name="GetDevices(string,RequestContext)">
      <example>
This sample shows how to call GetDevices and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDevices())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
}
]]></code>
This sample shows how to call GetDevices with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDevices(filter: "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
    Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
}
]]></code></example>
    </member>
    <member name="GetGroupsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetGroupsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetGroupsAsync(orderBy: "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
    Console.WriteLine(result.GetProperty("deployments")[0].ToString());
}
]]></code></example>
    </member>
    <member name="GetGroups(string,RequestContext)">
      <example>
This sample shows how to call GetGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetGroups())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetGroups(orderBy: "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
    Console.WriteLine(result.GetProperty("deployments")[0].ToString());
}
]]></code></example>
    </member>
    <member name="GetBestUpdatesForGroupsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetBestUpdatesForGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code>
This sample shows how to call GetBestUpdatesForGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code></example>
    </member>
    <member name="GetBestUpdatesForGroups(string,RequestContext)">
      <example>
This sample shows how to call GetBestUpdatesForGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetBestUpdatesForGroups("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code>
This sample shows how to call GetBestUpdatesForGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetBestUpdatesForGroups("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForGroupsAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsForGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeploymentsForGroupsAsync("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeploymentsForGroupsAsync("<groupId>", orderBy: "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForGroups(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsForGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeploymentsForGroups("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeploymentsForGroups("<groupId>", orderBy: "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupsForGroupsAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupsForGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassSubgroupsForGroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", filter: "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceClassSubgroupsForGroups(string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceClassSubgroupsForGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroups("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassSubgroupsForGroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroups("<groupId>", filter: "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForDeviceClassSubgroupsAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsForDeviceClassSubgroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForDeviceClassSubgroupsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", orderBy: "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeploymentsForDeviceClassSubgroups(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeploymentsForDeviceClassSubgroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForDeviceClassSubgroups with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", orderBy: "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync(string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", filter: "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code></example>
    </member>
    <member name="GetDeviceStatesForDeviceClassSubgroupDeployments(string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeployments and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeployments with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", filter: "<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code></example>
    </member>
    <member name="GetOperationStatusesAsync(string,int?,RequestContext)">
      <example>
This sample shows how to call GetOperationStatusesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetOperationStatusesAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatusesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetOperationStatusesAsync(filter: "<filter>", top: 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code></example>
    </member>
    <member name="GetOperationStatuses(string,int?,RequestContext)">
      <example>
This sample shows how to call GetOperationStatuses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetOperationStatuses())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatuses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetOperationStatuses(filter: "<filter>", top: 1234))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code></example>
    </member>
    <member name="GetLogCollectionsAsync(RequestContext)">
      <example>
This sample shows how to call GetLogCollectionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetLogCollectionsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
}
]]></code>
This sample shows how to call GetLogCollectionsAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetLogCollectionsAsync())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code></example>
    </member>
    <member name="GetLogCollections(RequestContext)">
      <example>
This sample shows how to call GetLogCollections and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetLogCollections())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
}
]]></code>
This sample shows how to call GetLogCollections with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetLogCollections())
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code></example>
    </member>
    <member name="GetHealthOfDevicesAsync(string,RequestContext)">
      <example>
This sample shows how to call GetHealthOfDevicesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetHealthOfDevicesAsync("<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].ToString());
}
]]></code>
This sample shows how to call GetHealthOfDevicesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

await foreach (BinaryData item in client.GetHealthOfDevicesAsync("<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
}
]]></code></example>
    </member>
    <member name="GetHealthOfDevices(string,RequestContext)">
      <example>
This sample shows how to call GetHealthOfDevices and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetHealthOfDevices("<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].ToString());
}
]]></code>
This sample shows how to call GetHealthOfDevices with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

foreach (BinaryData item in client.GetHealthOfDevices("<filter>"))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
}
]]></code></example>
    </member>
    <member name="ImportDevicesAsync(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call ImportDevicesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create("Devices");
Operation operation = await client.ImportDevicesAsync(WaitUntil.Completed, content);
]]></code>
This sample shows how to call ImportDevicesAsync with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create("Devices");
Operation operation = await client.ImportDevicesAsync(WaitUntil.Completed, content);
]]></code></example>
    </member>
    <member name="ImportDevices(WaitUntil,RequestContent,RequestContext)">
      <example>
This sample shows how to call ImportDevices.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create("Devices");
Operation operation = client.ImportDevices(WaitUntil.Completed, content);
]]></code>
This sample shows how to call ImportDevices with all parameters and request content.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
DeviceManagementClient client = new DeviceManagementClient(endpoint, "<InstanceId>", credential);

using RequestContent content = RequestContent.Create("Devices");
Operation operation = client.ImportDevices(WaitUntil.Completed, content);
]]></code></example>
    </member>
  </members>
</doc>