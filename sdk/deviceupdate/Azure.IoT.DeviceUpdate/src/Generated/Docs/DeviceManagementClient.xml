<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDeviceClassAsync(String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassAsync("<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceClass</c>:
<code>{
  deviceClassId: string, # Required. The device class identifier. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  friendlyName: string, # Optional. The device class friendly name. This can be updated by callers after the device class has been automatically created.
  deviceClassProperties: {
    contractModel: {
      id: string, # Required. The Device Update agent contract model Id of the device class. This is also used to calculate the device class Id.
      name: string, # Required. The Device Update agent contract model name of the device class. Intended to be a more readable form of the contract model Id.
    }, # Optional. The Device Update agent contract model.
    compatProperties: Dictionary&lt;string, string&gt;, # Required. The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property
  }, # Required. The device class properties that are used to calculate the device class Id
  bestCompatibleUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. Update that is the highest version compatible with this device class.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClass(String,RequestContext)">
<example>
This sample shows how to call GetDeviceClass with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClass("<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceClass</c>:
<code>{
  deviceClassId: string, # Required. The device class identifier. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  friendlyName: string, # Optional. The device class friendly name. This can be updated by callers after the device class has been automatically created.
  deviceClassProperties: {
    contractModel: {
      id: string, # Required. The Device Update agent contract model Id of the device class. This is also used to calculate the device class Id.
      name: string, # Required. The Device Update agent contract model name of the device class. Intended to be a more readable form of the contract model Id.
    }, # Optional. The Device Update agent contract model.
    compatProperties: Dictionary&lt;string, string&gt;, # Required. The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property
  }, # Required. The device class properties that are used to calculate the device class Id
  bestCompatibleUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. Update that is the highest version compatible with this device class.
}
</code>

</remarks>
    </member>
    <member name="UpdateDeviceClassAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateDeviceClassAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    friendlyName = "<friendlyName>",
};

Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>PatchBody</c>:
<code>{
  friendlyName: string, # Required. The device class friendly name. Friendly name can be 1-100 characters, alphanumeric, dot, and dash.
}
</code>

Response Body:

Schema for <c>DeviceClass</c>:
<code>{
  deviceClassId: string, # Required. The device class identifier. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  friendlyName: string, # Optional. The device class friendly name. This can be updated by callers after the device class has been automatically created.
  deviceClassProperties: {
    contractModel: {
      id: string, # Required. The Device Update agent contract model Id of the device class. This is also used to calculate the device class Id.
      name: string, # Required. The Device Update agent contract model name of the device class. Intended to be a more readable form of the contract model Id.
    }, # Optional. The Device Update agent contract model.
    compatProperties: Dictionary&lt;string, string&gt;, # Required. The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property
  }, # Required. The device class properties that are used to calculate the device class Id
  bestCompatibleUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. Update that is the highest version compatible with this device class.
}
</code>

</remarks>
    </member>
    <member name="UpdateDeviceClass(String,RequestContent,RequestContext)">
<example>
This sample shows how to call UpdateDeviceClass with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    friendlyName = "<friendlyName>",
};

Response response = client.UpdateDeviceClass("<deviceClassId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>PatchBody</c>:
<code>{
  friendlyName: string, # Required. The device class friendly name. Friendly name can be 1-100 characters, alphanumeric, dot, and dash.
}
</code>

Response Body:

Schema for <c>DeviceClass</c>:
<code>{
  deviceClassId: string, # Required. The device class identifier. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  friendlyName: string, # Optional. The device class friendly name. This can be updated by callers after the device class has been automatically created.
  deviceClassProperties: {
    contractModel: {
      id: string, # Required. The Device Update agent contract model Id of the device class. This is also used to calculate the device class Id.
      name: string, # Required. The Device Update agent contract model name of the device class. Intended to be a more readable form of the contract model Id.
    }, # Optional. The Device Update agent contract model.
    compatProperties: Dictionary&lt;string, string&gt;, # Required. The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property
  }, # Required. The device class properties that are used to calculate the device class Id
  bestCompatibleUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. Update that is the highest version compatible with this device class.
}
</code>

</remarks>
    </member>
    <member name="DeleteDeviceClassAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteDeviceClassAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteDeviceClass(String,RequestContext)">
<example>
This sample shows how to call DeleteDeviceClass with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeviceClass("<deviceClassId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetDeviceAsync(String,RequestContext)">
<example>
This sample shows how to call GetDeviceAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceAsync("<deviceId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Device</c>:
<code>{
  deviceId: string, # Required. Device identity.
  moduleId: string, # Optional. Device module identity.
  deviceClassId: string, # Required. Device class identity.
  groupId: string, # Optional. Device group identity.
  lastAttemptedUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update that device last attempted to install.
  deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Canceled&quot; | &quot;Failed&quot;, # Optional. State of the device in its last deployment.
  installedUpdate: UpdateInfo, # Optional. Currently installed update on device.
  onLatestUpdate: boolean, # Required. Boolean flag indicating whether the latest update (the best compatible update for the device&apos;s device class and group) is installed on the device
  lastDeploymentId: string, # Optional. The deployment identifier for the last deployment to the device
  lastInstallResult: {
    resultCode: number, # Required. Install result code.
    extendedResultCode: number, # Required. Install extended result code
    resultDetails: string, # Optional. A string containing further details about the install result
    stepResults: [
      {
        update: UpdateInfo, # Optional. The update that this step installs if it is of reference type.
        description: string, # Optional. Step description.
        resultCode: number, # Required. Install result code.
        extendedResultCode: number, # Required. Install extended result code
        resultDetails: string, # Optional. A string containing further details about the install result
      }
    ], # Optional. Array of step results
  }, # Optional. Last install result.
}
</code>

</remarks>
    </member>
    <member name="GetDevice(String,RequestContext)">
<example>
This sample shows how to call GetDevice with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDevice("<deviceId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Device</c>:
<code>{
  deviceId: string, # Required. Device identity.
  moduleId: string, # Optional. Device module identity.
  deviceClassId: string, # Required. Device class identity.
  groupId: string, # Optional. Device group identity.
  lastAttemptedUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update that device last attempted to install.
  deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Canceled&quot; | &quot;Failed&quot;, # Optional. State of the device in its last deployment.
  installedUpdate: UpdateInfo, # Optional. Currently installed update on device.
  onLatestUpdate: boolean, # Required. Boolean flag indicating whether the latest update (the best compatible update for the device&apos;s device class and group) is installed on the device
  lastDeploymentId: string, # Optional. The deployment identifier for the last deployment to the device
  lastInstallResult: {
    resultCode: number, # Required. Install result code.
    extendedResultCode: number, # Required. Install extended result code
    resultDetails: string, # Optional. A string containing further details about the install result
    stepResults: [
      {
        update: UpdateInfo, # Optional. The update that this step installs if it is of reference type.
        description: string, # Optional. Step description.
        resultCode: number, # Required. Install result code.
        extendedResultCode: number, # Required. Install extended result code
        resultDetails: string, # Optional. A string containing further details about the install result
      }
    ], # Optional. Array of step results
  }, # Optional. Last install result.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceModuleAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceModuleAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Device</c>:
<code>{
  deviceId: string, # Required. Device identity.
  moduleId: string, # Optional. Device module identity.
  deviceClassId: string, # Required. Device class identity.
  groupId: string, # Optional. Device group identity.
  lastAttemptedUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update that device last attempted to install.
  deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Canceled&quot; | &quot;Failed&quot;, # Optional. State of the device in its last deployment.
  installedUpdate: UpdateInfo, # Optional. Currently installed update on device.
  onLatestUpdate: boolean, # Required. Boolean flag indicating whether the latest update (the best compatible update for the device&apos;s device class and group) is installed on the device
  lastDeploymentId: string, # Optional. The deployment identifier for the last deployment to the device
  lastInstallResult: {
    resultCode: number, # Required. Install result code.
    extendedResultCode: number, # Required. Install extended result code
    resultDetails: string, # Optional. A string containing further details about the install result
    stepResults: [
      {
        update: UpdateInfo, # Optional. The update that this step installs if it is of reference type.
        description: string, # Optional. Step description.
        resultCode: number, # Required. Install result code.
        extendedResultCode: number, # Required. Install extended result code
        resultDetails: string, # Optional. A string containing further details about the install result
      }
    ], # Optional. Array of step results
  }, # Optional. Last install result.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceModule(String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceModule with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceModule("<deviceId>", "<moduleId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Device</c>:
<code>{
  deviceId: string, # Required. Device identity.
  moduleId: string, # Optional. Device module identity.
  deviceClassId: string, # Required. Device class identity.
  groupId: string, # Optional. Device group identity.
  lastAttemptedUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update that device last attempted to install.
  deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Canceled&quot; | &quot;Failed&quot;, # Optional. State of the device in its last deployment.
  installedUpdate: UpdateInfo, # Optional. Currently installed update on device.
  onLatestUpdate: boolean, # Required. Boolean flag indicating whether the latest update (the best compatible update for the device&apos;s device class and group) is installed on the device
  lastDeploymentId: string, # Optional. The deployment identifier for the last deployment to the device
  lastInstallResult: {
    resultCode: number, # Required. Install result code.
    extendedResultCode: number, # Required. Install extended result code
    resultDetails: string, # Optional. A string containing further details about the install result
    stepResults: [
      {
        update: UpdateInfo, # Optional. The update that this step installs if it is of reference type.
        description: string, # Optional. Step description.
        resultCode: number, # Required. Install result code.
        extendedResultCode: number, # Required. Install extended result code
        resultDetails: string, # Optional. A string containing further details about the install result
      }
    ], # Optional. Array of step results
  }, # Optional. Last install result.
}
</code>

</remarks>
    </member>
    <member name="GetUpdateComplianceAsync(RequestContext)">
<example>
This sample shows how to call GetUpdateComplianceAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateComplianceAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateCompliance</c>:
<code>{
  totalDeviceCount: number, # Required. Total number of devices.
  onLatestUpdateDeviceCount: number, # Required. Number of devices on the latest update.
  newUpdatesAvailableDeviceCount: number, # Required. Number of devices with a newer update available.
  updatesInProgressDeviceCount: number, # Required. Number of devices with update in-progress.
}
</code>

</remarks>
    </member>
    <member name="GetUpdateCompliance(RequestContext)">
<example>
This sample shows how to call GetUpdateCompliance and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdateCompliance();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateCompliance</c>:
<code>{
  totalDeviceCount: number, # Required. Total number of devices.
  onLatestUpdateDeviceCount: number, # Required. Number of devices on the latest update.
  newUpdatesAvailableDeviceCount: number, # Required. Number of devices with a newer update available.
  updatesInProgressDeviceCount: number, # Required. Number of devices with update in-progress.
}
</code>

</remarks>
    </member>
    <member name="GetGroupAsync(String,RequestContext)">
<example>
This sample shows how to call GetGroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetGroupAsync("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
Console.WriteLine(result.GetProperty("deployments")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Group</c>:
<code>{
  groupId: string, # Required. Group identity. This is created from the value of the ADUGroup tag in the Iot Hub&apos;s device/module twin or $default for devices with no tag.
  groupType: &quot;IoTHubTag&quot; | &quot;DefaultNoTag&quot;, # Required. Group type.
  createdDateTime: string, # Required. Date and time when the update was created.
  deviceCount: number, # Optional. The number of devices in the group.
  subgroupsWithNewUpdatesAvailableCount: number, # Optional. The count of subgroups with new updates available.
  subgroupsWithUpdatesInProgressCount: number, # Optional. The count of subgroups with updates in progress.
  subgroupsWithOnLatestUpdateCount: number, # Optional. The count of subgroups with devices on the latest update.
  deployments: [string], # Optional. The active deployment Ids for the group
}
</code>

</remarks>
    </member>
    <member name="GetGroup(String,RequestContext)">
<example>
This sample shows how to call GetGroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetGroup("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("groupType").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
Console.WriteLine(result.GetProperty("deployments")[0].ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Group</c>:
<code>{
  groupId: string, # Required. Group identity. This is created from the value of the ADUGroup tag in the Iot Hub&apos;s device/module twin or $default for devices with no tag.
  groupType: &quot;IoTHubTag&quot; | &quot;DefaultNoTag&quot;, # Required. Group type.
  createdDateTime: string, # Required. Date and time when the update was created.
  deviceCount: number, # Optional. The number of devices in the group.
  subgroupsWithNewUpdatesAvailableCount: number, # Optional. The count of subgroups with new updates available.
  subgroupsWithUpdatesInProgressCount: number, # Optional. The count of subgroups with updates in progress.
  subgroupsWithOnLatestUpdateCount: number, # Optional. The count of subgroups with devices on the latest update.
  deployments: [string], # Optional. The active deployment Ids for the group
}
</code>

</remarks>
    </member>
    <member name="DeleteGroupAsync(String,RequestContext)">
<example>
This sample shows how to call DeleteGroupAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteGroupAsync("<groupId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteGroup(String,RequestContext)">
<example>
This sample shows how to call DeleteGroup with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteGroup("<groupId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetUpdateComplianceForGroupAsync(String,RequestContext)">
<example>
This sample shows how to call GetUpdateComplianceForGroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateCompliance</c>:
<code>{
  totalDeviceCount: number, # Required. Total number of devices.
  onLatestUpdateDeviceCount: number, # Required. Number of devices on the latest update.
  newUpdatesAvailableDeviceCount: number, # Required. Number of devices with a newer update available.
  updatesInProgressDeviceCount: number, # Required. Number of devices with update in-progress.
}
</code>

</remarks>
    </member>
    <member name="GetUpdateComplianceForGroup(String,RequestContext)">
<example>
This sample shows how to call GetUpdateComplianceForGroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetUpdateComplianceForGroup("<groupId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateCompliance</c>:
<code>{
  totalDeviceCount: number, # Required. Total number of devices.
  onLatestUpdateDeviceCount: number, # Required. Number of devices on the latest update.
  newUpdatesAvailableDeviceCount: number, # Required. Number of devices with a newer update available.
  updatesInProgressDeviceCount: number, # Required. Number of devices with update in-progress.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="GetDeployment(String,String,RequestContext)">
<example>
This sample shows how to call GetDeployment with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeployment("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateDeploymentAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateDeploymentAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    update = new {
        updateId = new {
            provider = "<provider>",
            name = "<name>",
            version = "<version>",
        },
    },
    groupId = "<groupId>",
};

Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call CreateOrUpdateDeploymentAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    update = new {
        updateId = new {
            provider = "<provider>",
            name = "<name>",
            version = "<version>",
        },
    },
    groupId = "<groupId>",
    deviceClassSubgroups = new[] {
        "<String>"
    },
    isCanceled = true,
    isRetried = true,
    rollbackPolicy = new {
        update = new {
            updateId = new {
                provider = "<provider>",
                name = "<name>",
                version = "<version>",
            },
        },
        failure = new {
            devicesFailedPercentage = 1234,
            devicesFailedCount = 1234,
        },
    },
    isCloudInitiatedRollback = true,
};

Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateDeployment(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateDeployment with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    update = new {
        updateId = new {
            provider = "<provider>",
            name = "<name>",
            version = "<version>",
        },
    },
    groupId = "<groupId>",
};

Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
]]></code>
This sample shows how to call CreateOrUpdateDeployment with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    deploymentId = "<deploymentId>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    update = new {
        updateId = new {
            provider = "<provider>",
            name = "<name>",
            version = "<version>",
        },
    },
    groupId = "<groupId>",
    deviceClassSubgroups = new[] {
        "<String>"
    },
    isCanceled = true,
    isRetried = true,
    rollbackPolicy = new {
        update = new {
            updateId = new {
                provider = "<provider>",
                name = "<name>",
                version = "<version>",
            },
        },
        failure = new {
            devicesFailedPercentage = 1234,
            devicesFailedCount = 1234,
        },
    },
    isCloudInitiatedRollback = true,
};

Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="DeleteDeploymentAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteDeploymentAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteDeployment(String,String,RequestContext)">
<example>
This sample shows how to call DeleteDeployment with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeployment("<groupId>", "<deploymentId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetDeploymentStatusAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeploymentStatus</c>:
<code>{
  groupId: string, # Required. The group identity
  deploymentState: &quot;Active&quot; | &quot;ActiveWithSubgroupFailures&quot; | &quot;Failed&quot; | &quot;Inactive&quot; | &quot;Canceled&quot;, # Required. The state of the deployment.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. The error details of the Failed state.  This is not present if the deployment state is not Failed.
  subgroupStatus: [
    {
      groupId: string, # Required. The group identity
      deviceClassId: string, # Required. The device class subgroup identity
      deploymentState: &quot;Active&quot; | &quot;Failed&quot; | &quot;Inactive&quot; | &quot;Canceled&quot;, # Required. The state of the subgroup deployment.
      error: Error, # Optional. The error details of the Failed state.  This is not present if the deployment state is not Failed.
      totalDevices: number, # Optional. The total number of devices in the deployment.
      devicesInProgressCount: number, # Optional. The number of devices that are currently in deployment.
      devicesCompletedFailedCount: number, # Optional. The number of devices that have completed deployment with a failure.
      devicesCompletedSucceededCount: number, # Optional. The number of devices which have successfully completed deployment.
      devicesCanceledCount: number, # Optional. The number of devices which have had their deployment canceled.
    }
  ], # Required. The collection of device class subgroup status objects
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentStatus(String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeploymentStatus</c>:
<code>{
  groupId: string, # Required. The group identity
  deploymentState: &quot;Active&quot; | &quot;ActiveWithSubgroupFailures&quot; | &quot;Failed&quot; | &quot;Inactive&quot; | &quot;Canceled&quot;, # Required. The state of the deployment.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. The error details of the Failed state.  This is not present if the deployment state is not Failed.
  subgroupStatus: [
    {
      groupId: string, # Required. The group identity
      deviceClassId: string, # Required. The device class subgroup identity
      deploymentState: &quot;Active&quot; | &quot;Failed&quot; | &quot;Inactive&quot; | &quot;Canceled&quot;, # Required. The state of the subgroup deployment.
      error: Error, # Optional. The error details of the Failed state.  This is not present if the deployment state is not Failed.
      totalDevices: number, # Optional. The total number of devices in the deployment.
      devicesInProgressCount: number, # Optional. The number of devices that are currently in deployment.
      devicesCompletedFailedCount: number, # Optional. The number of devices that have completed deployment with a failure.
      devicesCompletedSucceededCount: number, # Optional. The number of devices which have successfully completed deployment.
      devicesCanceledCount: number, # Optional. The number of devices which have had their deployment canceled.
    }
  ], # Required. The collection of device class subgroup status objects
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClassSubgroupAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassSubgroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("deploymentId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceClassSubgroup</c>:
<code>{
  deviceClassId: string, # Required. Device class subgroup identity. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  groupId: string, # Required. Group identity.
  createdDateTime: string, # Required. Date and time when the device class subgroup was created.
  deviceCount: number, # Optional. The number of devices in the device class subgroup.
  deploymentId: string, # Optional. The active deployment Id for the device class subgroup.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClassSubgroup(String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassSubgroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
Console.WriteLine(result.GetProperty("deploymentId").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceClassSubgroup</c>:
<code>{
  deviceClassId: string, # Required. Device class subgroup identity. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  groupId: string, # Required. Group identity.
  createdDateTime: string, # Required. Date and time when the device class subgroup was created.
  deviceCount: number, # Optional. The number of devices in the device class subgroup.
  deploymentId: string, # Optional. The active deployment Id for the device class subgroup.
}
</code>

</remarks>
    </member>
    <member name="DeleteDeviceClassSubgroupAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteDeviceClassSubgroupAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteDeviceClassSubgroup(String,String,RequestContext)">
<example>
This sample shows how to call DeleteDeviceClassSubgroup with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetDeviceClassSubgroupUpdateComplianceAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassSubgroupUpdateComplianceAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateCompliance</c>:
<code>{
  totalDeviceCount: number, # Required. Total number of devices.
  onLatestUpdateDeviceCount: number, # Required. Number of devices on the latest update.
  newUpdatesAvailableDeviceCount: number, # Required. Number of devices with a newer update available.
  updatesInProgressDeviceCount: number, # Required. Number of devices with update in-progress.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClassSubgroupUpdateCompliance(String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassSubgroupUpdateCompliance with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>UpdateCompliance</c>:
<code>{
  totalDeviceCount: number, # Required. Total number of devices.
  onLatestUpdateDeviceCount: number, # Required. Number of devices on the latest update.
  newUpdatesAvailableDeviceCount: number, # Required. Number of devices with a newer update available.
  updatesInProgressDeviceCount: number, # Required. Number of devices with update in-progress.
}
</code>

</remarks>
    </member>
    <member name="GetBestUpdatesForDeviceClassSubgroupAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceClassSubgroupUpdatableDevices</c>:
<code>{
  groupId: string, # Required. The group Id
  deviceClassId: string, # Required. The device class subgroup&apos;s device class Id
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information.
  deviceCount: number, # Required. Total number of devices for which the update is applicable.
}
</code>

</remarks>
    </member>
    <member name="GetBestUpdatesForDeviceClassSubgroup(String,String,RequestContext)">
<example>
This sample shows how to call GetBestUpdatesForDeviceClassSubgroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("deviceCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceClassSubgroupUpdatableDevices</c>:
<code>{
  groupId: string, # Required. The group Id
  deviceClassId: string, # Required. The device class subgroup&apos;s device class Id
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information.
  deviceCount: number, # Required. Total number of devices for which the update is applicable.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentForDeviceClassSubgroupAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentForDeviceClassSubgroupAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentForDeviceClassSubgroup(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentForDeviceClassSubgroup with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="DeleteDeploymentForDeviceClassSubgroupAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroupAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteDeploymentForDeviceClassSubgroup(String,String,String,RequestContext)">
<example>
This sample shows how to call DeleteDeploymentForDeviceClassSubgroup with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="StopDeploymentAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call StopDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="StopDeployment(String,String,String,RequestContext)">
<example>
This sample shows how to call StopDeployment with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="RetryDeploymentAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call RetryDeploymentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="RetryDeployment(String,String,String,RequestContext)">
<example>
This sample shows how to call RetryDeployment with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deploymentId").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
Console.WriteLine(result.GetProperty("isCanceled").ToString());
Console.WriteLine(result.GetProperty("isRetried").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Deployment</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClassSubgroupDeploymentStatusAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceClassSubgroupDeploymentStatus</c>:
<code>{
  groupId: string, # Required. The group identity
  deviceClassId: string, # Required. The device class subgroup identity
  deploymentState: &quot;Active&quot; | &quot;Failed&quot; | &quot;Inactive&quot; | &quot;Canceled&quot;, # Required. The state of the subgroup deployment.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. The error details of the Failed state.  This is not present if the deployment state is not Failed.
  totalDevices: number, # Optional. The total number of devices in the deployment.
  devicesInProgressCount: number, # Optional. The number of devices that are currently in deployment.
  devicesCompletedFailedCount: number, # Optional. The number of devices that have completed deployment with a failure.
  devicesCompletedSucceededCount: number, # Optional. The number of devices which have successfully completed deployment.
  devicesCanceledCount: number, # Optional. The number of devices which have had their deployment canceled.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClassSubgroupDeploymentStatus(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassSubgroupDeploymentStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groupId").ToString());
Console.WriteLine(result.GetProperty("deviceClassId").ToString());
Console.WriteLine(result.GetProperty("deploymentState").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("totalDevices").ToString());
Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceClassSubgroupDeploymentStatus</c>:
<code>{
  groupId: string, # Required. The group identity
  deviceClassId: string, # Required. The device class subgroup identity
  deploymentState: &quot;Active&quot; | &quot;Failed&quot; | &quot;Inactive&quot; | &quot;Canceled&quot;, # Required. The state of the subgroup deployment.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. The error details of the Failed state.  This is not present if the deployment state is not Failed.
  totalDevices: number, # Optional. The total number of devices in the deployment.
  devicesInProgressCount: number, # Optional. The number of devices that are currently in deployment.
  devicesCompletedFailedCount: number, # Optional. The number of devices that have completed deployment with a failure.
  devicesCompletedSucceededCount: number, # Optional. The number of devices which have successfully completed deployment.
  devicesCanceledCount: number, # Optional. The number of devices which have had their deployment canceled.
}
</code>

</remarks>
    </member>
    <member name="GetOperationStatusAsync(String,ETag,RequestContext)">
<example>
This sample shows how to call GetOperationStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetOperationStatusAsync("<operationId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetOperationStatusAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetOperationStatusAsync("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceOperation</c>:
<code>{
  operationId: string, # Required. Operation Id.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Operation status.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. Operation error encountered, if any.
  traceId: string, # Optional. Operation correlation identity that can used by Microsoft Support for troubleshooting.
  lastActionDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation status was last updated.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation was created.
  etag: string, # Optional. Operation ETag.
}
</code>

</remarks>
    </member>
    <member name="GetOperationStatus(String,ETag,RequestContext)">
<example>
This sample shows how to call GetOperationStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetOperationStatus("<operationId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
]]></code>
This sample shows how to call GetOperationStatus with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetOperationStatus("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
Console.WriteLine(result.GetProperty("traceId").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("etag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>DeviceOperation</c>:
<code>{
  operationId: string, # Required. Operation Id.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Operation status.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. Operation error encountered, if any.
  traceId: string, # Optional. Operation correlation identity that can used by Microsoft Support for troubleshooting.
  lastActionDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation status was last updated.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation was created.
  etag: string, # Optional. Operation ETag.
}
</code>

</remarks>
    </member>
    <member name="StartLogCollectionAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call StartLogCollectionAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    deviceList = new[] {
        new {
            deviceId = "<deviceId>",
        }
    },
};

Response response = await client.StartLogCollectionAsync("<logCollectionId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call StartLogCollectionAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    operationId = "<operationId>",
    deviceList = new[] {
        new {
            deviceId = "<deviceId>",
            moduleId = "<moduleId>",
        }
    },
    description = "<description>",
};

Response response = await client.StartLogCollectionAsync("<logCollectionId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>LogCollection</c>:
<code>{
  operationId: string, # Optional. The log collection id.
  deviceList: [
    {
      deviceId: string, # Required. Device Id
      moduleId: string, # Optional. Module Id
    }
  ], # Required. Array of Device Update agent ids
  description: string, # Optional. Description of the diagnostics operation.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
}
</code>

Response Body:

Schema for <c>LogCollection</c>:
<code>{
  operationId: string, # Optional. The log collection id.
  deviceList: [
    {
      deviceId: string, # Required. Device Id
      moduleId: string, # Optional. Module Id
    }
  ], # Required. Array of Device Update agent ids
  description: string, # Optional. Description of the diagnostics operation.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
}
</code>

</remarks>
    </member>
    <member name="StartLogCollection(String,RequestContent,RequestContext)">
<example>
This sample shows how to call StartLogCollection with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    deviceList = new[] {
        new {
            deviceId = "<deviceId>",
        }
    },
};

Response response = client.StartLogCollection("<logCollectionId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
]]></code>
This sample shows how to call StartLogCollection with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = new {
    operationId = "<operationId>",
    deviceList = new[] {
        new {
            deviceId = "<deviceId>",
            moduleId = "<moduleId>",
        }
    },
    description = "<description>",
};

Response response = client.StartLogCollection("<logCollectionId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>LogCollection</c>:
<code>{
  operationId: string, # Optional. The log collection id.
  deviceList: [
    {
      deviceId: string, # Required. Device Id
      moduleId: string, # Optional. Module Id
    }
  ], # Required. Array of Device Update agent ids
  description: string, # Optional. Description of the diagnostics operation.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
}
</code>

Response Body:

Schema for <c>LogCollection</c>:
<code>{
  operationId: string, # Optional. The log collection id.
  deviceList: [
    {
      deviceId: string, # Required. Device Id
      moduleId: string, # Optional. Module Id
    }
  ], # Required. Array of Device Update agent ids
  description: string, # Optional. Description of the diagnostics operation.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
}
</code>

</remarks>
    </member>
    <member name="GetLogCollectionAsync(String,RequestContext)">
<example>
This sample shows how to call GetLogCollectionAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetLogCollectionAsync("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>LogCollection</c>:
<code>{
  operationId: string, # Optional. The log collection id.
  deviceList: [
    {
      deviceId: string, # Required. Device Id
      moduleId: string, # Optional. Module Id
    }
  ], # Required. Array of Device Update agent ids
  description: string, # Optional. Description of the diagnostics operation.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
}
</code>

</remarks>
    </member>
    <member name="GetLogCollection(String,RequestContext)">
<example>
This sample shows how to call GetLogCollection with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetLogCollection("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>LogCollection</c>:
<code>{
  operationId: string, # Optional. The log collection id.
  deviceList: [
    {
      deviceId: string, # Required. Device Id
      moduleId: string, # Optional. Module Id
    }
  ], # Required. Array of Device Update agent ids
  description: string, # Optional. Description of the diagnostics operation.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
}
</code>

</remarks>
    </member>
    <member name="GetLogCollectionDetailedStatusAsync(String,RequestContext)">
<example>
This sample shows how to call GetLogCollectionDetailedStatusAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = await client.GetLogCollectionDetailedStatusAsync("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>LogCollectionOperationDetailedStatus</c>:
<code>{
  operationId: string, # Optional. The device diagnostics operation id.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
  deviceStatus: [
    {
      deviceId: string, # Required. Device id
      moduleId: string, # Optional. Module id.
      status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Log upload status
      resultCode: string, # Optional. Log upload result code
      extendedResultCode: string, # Optional. Log upload extended result code
      logLocation: string, # Optional. Log upload location
    }
  ], # Optional. Status of the devices in the operation
  description: string, # Optional. Device diagnostics operation description.
}
</code>

</remarks>
    </member>
    <member name="GetLogCollectionDetailedStatus(String,RequestContext)">
<example>
This sample shows how to call GetLogCollectionDetailedStatus with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

Response response = client.GetLogCollectionDetailedStatus("<logCollectionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>LogCollectionOperationDetailedStatus</c>:
<code>{
  operationId: string, # Optional. The device diagnostics operation id.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
  deviceStatus: [
    {
      deviceId: string, # Required. Device id
      moduleId: string, # Optional. Module id.
      status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Log upload status
      resultCode: string, # Optional. Log upload result code
      extendedResultCode: string, # Optional. Log upload extended result code
      logLocation: string, # Optional. Log upload location
    }
  ], # Optional. Status of the devices in the operation
  description: string, # Optional. Device diagnostics operation description.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClassesAsync(String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeviceClassesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeviceClassesAsync("<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceClassesListValue</c>:
<code>{
  deviceClassId: string, # Required. The device class identifier. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  friendlyName: string, # Optional. The device class friendly name. This can be updated by callers after the device class has been automatically created.
  deviceClassProperties: {
    contractModel: {
      id: string, # Required. The Device Update agent contract model Id of the device class. This is also used to calculate the device class Id.
      name: string, # Required. The Device Update agent contract model name of the device class. Intended to be a more readable form of the contract model Id.
    }, # Optional. The Device Update agent contract model.
    compatProperties: Dictionary&lt;string, string&gt;, # Required. The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property
  }, # Required. The device class properties that are used to calculate the device class Id
  bestCompatibleUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. Update that is the highest version compatible with this device class.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClasses(String,RequestContext)">
<example>
This sample shows how to call GetDeviceClasses and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeviceClasses())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
}
]]></code>
This sample shows how to call GetDeviceClasses with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeviceClasses("<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceClassesListValue</c>:
<code>{
  deviceClassId: string, # Required. The device class identifier. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  friendlyName: string, # Optional. The device class friendly name. This can be updated by callers after the device class has been automatically created.
  deviceClassProperties: {
    contractModel: {
      id: string, # Required. The Device Update agent contract model Id of the device class. This is also used to calculate the device class Id.
      name: string, # Required. The Device Update agent contract model name of the device class. Intended to be a more readable form of the contract model Id.
    }, # Optional. The Device Update agent contract model.
    compatProperties: Dictionary&lt;string, string&gt;, # Required. The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property
  }, # Required. The device class properties that are used to calculate the device class Id
  bestCompatibleUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. Update that is the highest version compatible with this device class.
}
</code>

</remarks>
    </member>
    <member name="GetInstallableUpdatesForDeviceClassesAsync(String,RequestContext)">
<example>
This sample shows how to call GetInstallableUpdatesForDeviceClassesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>UpdateInfoListValue</c>:
<code>{
  updateId: {
    provider: string, # Required. Update provider.
    name: string, # Required. Update name.
    version: string, # Required. Update version.
  }, # Required. Update identifier.
  description: string, # Optional. Update description.
  friendlyName: string, # Optional. Friendly update name.
}
</code>

</remarks>
    </member>
    <member name="GetInstallableUpdatesForDeviceClasses(String,RequestContext)">
<example>
This sample shows how to call GetInstallableUpdatesForDeviceClasses with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("friendlyName").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>UpdateInfoListValue</c>:
<code>{
  updateId: {
    provider: string, # Required. Update provider.
    name: string, # Required. Update name.
    version: string, # Required. Update version.
  }, # Required. Update identifier.
  description: string, # Optional. Update description.
  friendlyName: string, # Optional. Friendly update name.
}
</code>

</remarks>
    </member>
    <member name="GetDevicesAsync(String,RequestContext)">
<example>
This sample shows how to call GetDevicesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDevicesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
}
]]></code>
This sample shows how to call GetDevicesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDevicesAsync("<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
    Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevicesListValue</c>:
<code>{
  deviceId: string, # Required. Device identity.
  moduleId: string, # Optional. Device module identity.
  deviceClassId: string, # Required. Device class identity.
  groupId: string, # Optional. Device group identity.
  lastAttemptedUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update that device last attempted to install.
  deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Canceled&quot; | &quot;Failed&quot;, # Optional. State of the device in its last deployment.
  installedUpdate: UpdateInfo, # Optional. Currently installed update on device.
  onLatestUpdate: boolean, # Required. Boolean flag indicating whether the latest update (the best compatible update for the device&apos;s device class and group) is installed on the device
  lastDeploymentId: string, # Optional. The deployment identifier for the last deployment to the device
  lastInstallResult: {
    resultCode: number, # Required. Install result code.
    extendedResultCode: number, # Required. Install extended result code
    resultDetails: string, # Optional. A string containing further details about the install result
    stepResults: [
      {
        update: UpdateInfo, # Optional. The update that this step installs if it is of reference type.
        description: string, # Optional. Step description.
        resultCode: number, # Required. Install result code.
        extendedResultCode: number, # Required. Install extended result code
        resultDetails: string, # Optional. A string containing further details about the install result
      }
    ], # Optional. Array of step results
  }, # Optional. Last install result.
}
</code>

</remarks>
    </member>
    <member name="GetDevices(String,RequestContext)">
<example>
This sample shows how to call GetDevices and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDevices())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
}
]]></code>
This sample shows how to call GetDevices with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDevices("<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
    Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
    Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevicesListValue</c>:
<code>{
  deviceId: string, # Required. Device identity.
  moduleId: string, # Optional. Device module identity.
  deviceClassId: string, # Required. Device class identity.
  groupId: string, # Optional. Device group identity.
  lastAttemptedUpdate: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Optional. The update that device last attempted to install.
  deploymentStatus: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Canceled&quot; | &quot;Failed&quot;, # Optional. State of the device in its last deployment.
  installedUpdate: UpdateInfo, # Optional. Currently installed update on device.
  onLatestUpdate: boolean, # Required. Boolean flag indicating whether the latest update (the best compatible update for the device&apos;s device class and group) is installed on the device
  lastDeploymentId: string, # Optional. The deployment identifier for the last deployment to the device
  lastInstallResult: {
    resultCode: number, # Required. Install result code.
    extendedResultCode: number, # Required. Install extended result code
    resultDetails: string, # Optional. A string containing further details about the install result
    stepResults: [
      {
        update: UpdateInfo, # Optional. The update that this step installs if it is of reference type.
        description: string, # Optional. Step description.
        resultCode: number, # Required. Install result code.
        extendedResultCode: number, # Required. Install extended result code
        resultDetails: string, # Optional. A string containing further details about the install result
      }
    ], # Optional. Array of step results
  }, # Optional. Last install result.
}
</code>

</remarks>
    </member>
    <member name="GetGroupsAsync(String,RequestContext)">
<example>
This sample shows how to call GetGroupsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetGroupsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetGroupsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetGroupsAsync("<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
    Console.WriteLine(result.GetProperty("deployments")[0].ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>GroupsListValue</c>:
<code>{
  groupId: string, # Required. Group identity. This is created from the value of the ADUGroup tag in the Iot Hub&apos;s device/module twin or $default for devices with no tag.
  groupType: &quot;IoTHubTag&quot; | &quot;DefaultNoTag&quot;, # Required. Group type.
  createdDateTime: string, # Required. Date and time when the update was created.
  deviceCount: number, # Optional. The number of devices in the group.
  subgroupsWithNewUpdatesAvailableCount: number, # Optional. The count of subgroups with new updates available.
  subgroupsWithUpdatesInProgressCount: number, # Optional. The count of subgroups with updates in progress.
  subgroupsWithOnLatestUpdateCount: number, # Optional. The count of subgroups with devices on the latest update.
  deployments: [string], # Optional. The active deployment Ids for the group
}
</code>

</remarks>
    </member>
    <member name="GetGroups(String,RequestContext)">
<example>
This sample shows how to call GetGroups and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetGroups())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetGroups with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetGroups("<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("groupType").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
    Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
    Console.WriteLine(result.GetProperty("deployments")[0].ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>GroupsListValue</c>:
<code>{
  groupId: string, # Required. Group identity. This is created from the value of the ADUGroup tag in the Iot Hub&apos;s device/module twin or $default for devices with no tag.
  groupType: &quot;IoTHubTag&quot; | &quot;DefaultNoTag&quot;, # Required. Group type.
  createdDateTime: string, # Required. Date and time when the update was created.
  deviceCount: number, # Optional. The number of devices in the group.
  subgroupsWithNewUpdatesAvailableCount: number, # Optional. The count of subgroups with new updates available.
  subgroupsWithUpdatesInProgressCount: number, # Optional. The count of subgroups with updates in progress.
  subgroupsWithOnLatestUpdateCount: number, # Optional. The count of subgroups with devices on the latest update.
  deployments: [string], # Optional. The active deployment Ids for the group
}
</code>

</remarks>
    </member>
    <member name="GetBestUpdatesForGroupsAsync(String,RequestContext)">
<example>
This sample shows how to call GetBestUpdatesForGroupsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetBestUpdatesForGroupsAsync("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceClassSubgroupUpdatableDevicesListValue</c>:
<code>{
  groupId: string, # Required. The group Id
  deviceClassId: string, # Required. The device class subgroup&apos;s device class Id
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information.
  deviceCount: number, # Required. Total number of devices for which the update is applicable.
}
</code>

</remarks>
    </member>
    <member name="GetBestUpdatesForGroups(String,RequestContext)">
<example>
This sample shows how to call GetBestUpdatesForGroups with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetBestUpdatesForGroups("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceClassSubgroupUpdatableDevicesListValue</c>:
<code>{
  groupId: string, # Required. The group Id
  deviceClassId: string, # Required. The device class subgroup&apos;s device class Id
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information.
  deviceCount: number, # Required. Total number of devices for which the update is applicable.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentsForGroupsAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentsForGroupsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeploymentsForGroupsAsync("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForGroupsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeploymentsForGroupsAsync("<groupId>", "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeploymentsListValue</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentsForGroups(String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentsForGroups with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeploymentsForGroups("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForGroups with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeploymentsForGroups("<groupId>", "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeploymentsListValue</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClassSubgroupsForGroupsAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassSubgroupsForGroupsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassSubgroupsForGroupsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceClassSubgroupsListValue</c>:
<code>{
  deviceClassId: string, # Required. Device class subgroup identity. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  groupId: string, # Required. Group identity.
  createdDateTime: string, # Required. Date and time when the device class subgroup was created.
  deviceCount: number, # Optional. The number of devices in the device class subgroup.
  deploymentId: string, # Optional. The active deployment Id for the device class subgroup.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceClassSubgroupsForGroups(String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceClassSubgroupsForGroups with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeviceClassSubgroupsForGroups("<groupId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetDeviceClassSubgroupsForGroups with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeviceClassSubgroupsForGroups("<groupId>", "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceClassId").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("deviceCount").ToString());
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceClassSubgroupsListValue</c>:
<code>{
  deviceClassId: string, # Required. Device class subgroup identity. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
  groupId: string, # Required. Group identity.
  createdDateTime: string, # Required. Date and time when the device class subgroup was created.
  deviceCount: number, # Optional. The number of devices in the device class subgroup.
  deploymentId: string, # Optional. The active deployment Id for the device class subgroup.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentsForDeviceClassSubgroupsAsync(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentsForDeviceClassSubgroupsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForDeviceClassSubgroupsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeploymentsListValue</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="GetDeploymentsForDeviceClassSubgroups(String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeploymentsForDeviceClassSubgroups with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
}
]]></code>
This sample shows how to call GetDeploymentsForDeviceClassSubgroups with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", "<orderBy>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deploymentId").ToString());
    Console.WriteLine(result.GetProperty("startDateTime").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("groupId").ToString());
    Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
    Console.WriteLine(result.GetProperty("isCanceled").ToString());
    Console.WriteLine(result.GetProperty("isRetried").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
    Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
    Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeploymentsListValue</c>:
<code>{
  deploymentId: string, # Required. The caller-provided deployment identifier. This cannot be longer than 73 characters, must be all lower-case, and cannot contain &apos;&amp;&apos;, &apos;^&apos;, &apos;[&apos;, &apos;]&apos;, &apos;{&apos;, &apos;}&apos;, &apos;|&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, forward slash, backslash, or double quote. The Updates view in the Azure Portal IoT Hub resource generates a GUID for deploymentId when you create a deployment.
  startDateTime: string (ISO 8601 Format), # Required. The deployment start datetime.
  update: {
    updateId: {
      provider: string, # Required. Update provider.
      name: string, # Required. Update name.
      version: string, # Required. Update version.
    }, # Required. Update identifier.
    description: string, # Optional. Update description.
    friendlyName: string, # Optional. Friendly update name.
  }, # Required. Update information for the update in the deployment.
  groupId: string, # Required. The group identity for the devices the deployment is intended to update.
  deviceClassSubgroups: [string], # Optional. The device class subgroups the deployment is compatible with and subgroup deployments have been created for. This is not provided by the caller during CreateOrUpdateDeployment but is automatically determined by Device Update
  isCanceled: boolean, # Optional. Boolean flag indicating whether the deployment was canceled.
  isRetried: boolean, # Optional. Boolean flag indicating whether the deployment has been retried.
  rollbackPolicy: {
    update: UpdateInfo, # Required. Update to rollback to.
    failure: {
      devicesFailedPercentage: number, # Required. Percentage of devices that failed.
      devicesFailedCount: number, # Required. Number of devices that failed.
    }, # Required. Failure conditions to initiate rollback policy.
  }, # Optional. The rollback policy for the deployment.
  isCloudInitiatedRollback: boolean, # Optional. Boolean flag indicating whether the deployment is a rollback deployment.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeploymentDeviceStatesListValue</c>:
<code>{
  deviceId: string, # Required. Device identity.
  moduleId: string, # Optional. Device module identity.
  retryCount: number, # Required. The number of times this deployment has been retried on this device.
  movedOnToNewDeployment: boolean, # Required. Boolean flag indicating whether this device is in a newer deployment and can no longer retry this deployment.
  deviceState: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Canceled&quot; | &quot;Failed&quot;, # Required. Deployment device state.
}
</code>

</remarks>
    </member>
    <member name="GetDeviceStatesForDeviceClassSubgroupDeployments(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeployments with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code>
This sample shows how to call GetDeviceStatesForDeviceClassSubgroupDeployments with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", "<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("retryCount").ToString());
    Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
    Console.WriteLine(result.GetProperty("deviceState").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeploymentDeviceStatesListValue</c>:
<code>{
  deviceId: string, # Required. Device identity.
  moduleId: string, # Optional. Device module identity.
  retryCount: number, # Required. The number of times this deployment has been retried on this device.
  movedOnToNewDeployment: boolean, # Required. Boolean flag indicating whether this device is in a newer deployment and can no longer retry this deployment.
  deviceState: &quot;Succeeded&quot; | &quot;InProgress&quot; | &quot;Canceled&quot; | &quot;Failed&quot;, # Required. Deployment device state.
}
</code>

</remarks>
    </member>
    <member name="GetOperationStatusesAsync(String,Int32,RequestContext)">
<example>
This sample shows how to call GetOperationStatusesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetOperationStatusesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatusesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetOperationStatusesAsync("<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceOperationsListValue</c>:
<code>{
  operationId: string, # Required. Operation Id.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Operation status.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. Operation error encountered, if any.
  traceId: string, # Optional. Operation correlation identity that can used by Microsoft Support for troubleshooting.
  lastActionDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation status was last updated.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation was created.
  etag: string, # Optional. Operation ETag.
}
</code>

</remarks>
    </member>
    <member name="GetOperationStatuses(String,Int32,RequestContext)">
<example>
This sample shows how to call GetOperationStatuses and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetOperationStatuses())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
}
]]></code>
This sample shows how to call GetOperationStatuses with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetOperationStatuses("<filter>", 1234))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
    Console.WriteLine(result.GetProperty("traceId").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("etag").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceOperationsListValue</c>:
<code>{
  operationId: string, # Required. Operation Id.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Required. Operation status.
  error: {
    code: string, # Required. Server defined error code.
    message: string, # Required. A human-readable representation of the error.
    target: string, # Optional. The target of the error.
    details: [Error], # Optional. An array of errors that led to the reported error.
    innererror: {
      code: string, # Required. A more specific error code than what was provided by the containing error.
      message: string, # Optional. A human-readable representation of the error.
      errorDetail: string, # Optional. The internal error or exception message.
      innerError: InnerError, # Optional. An object containing more specific information than the current object about the error.
    }, # Optional. An object containing more specific information than the current object about the error.
    occurredDateTime: string (ISO 8601 Format), # Optional. Date and time in UTC when the error occurred.
  }, # Optional. Operation error encountered, if any.
  traceId: string, # Optional. Operation correlation identity that can used by Microsoft Support for troubleshooting.
  lastActionDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation status was last updated.
  createdDateTime: string (ISO 8601 Format), # Required. Date and time in UTC when the operation was created.
  etag: string, # Optional. Operation ETag.
}
</code>

</remarks>
    </member>
    <member name="GetLogCollectionsAsync(RequestContext)">
<example>
This sample shows how to call GetLogCollectionsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetLogCollectionsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>LogCollectionListValue</c>:
<code>{
  operationId: string, # Optional. The log collection id.
  deviceList: [
    {
      deviceId: string, # Required. Device Id
      moduleId: string, # Optional. Module Id
    }
  ], # Required. Array of Device Update agent ids
  description: string, # Optional. Description of the diagnostics operation.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
}
</code>

</remarks>
    </member>
    <member name="GetLogCollections(RequestContext)">
<example>
This sample shows how to call GetLogCollections and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetLogCollections())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("operationId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>LogCollectionListValue</c>:
<code>{
  operationId: string, # Optional. The log collection id.
  deviceList: [
    {
      deviceId: string, # Required. Device Id
      moduleId: string, # Optional. Module Id
    }
  ], # Required. Array of Device Update agent ids
  description: string, # Optional. Description of the diagnostics operation.
  createdDateTime: string, # Optional. The timestamp when the operation was created.
  lastActionDateTime: string, # Optional. A timestamp for when the current state was entered.
  status: &quot;NotStarted&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot;, # Optional. Operation status.
}
</code>

</remarks>
    </member>
    <member name="GetHealthOfDevicesAsync(String,RequestContext)">
<example>
This sample shows how to call GetHealthOfDevicesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

await foreach (var data in client.GetHealthOfDevicesAsync("<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceHealthListValue</c>:
<code>{
  deviceId: string, # Required. Device id
  moduleId: string, # Optional. Module id
  state: &quot;healthy&quot; | &quot;unhealthy&quot;, # Required. Aggregate device health state
  digitalTwinModelId: string, # Optional. Digital twin model Id
  healthChecks: [
    {
      name: string, # Optional. Health check name
      result: &quot;success&quot; | &quot;userError&quot;, # Optional. Health check result
    }
  ], # Required. Array of health checks and their results
}
</code>

</remarks>
    </member>
    <member name="GetHealthOfDevices(String,RequestContext)">
<example>
This sample shows how to call GetHealthOfDevices with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

foreach (var data in client.GetHealthOfDevices("<filter>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("moduleId").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DeviceHealthListValue</c>:
<code>{
  deviceId: string, # Required. Device id
  moduleId: string, # Optional. Module id
  state: &quot;healthy&quot; | &quot;unhealthy&quot;, # Required. Aggregate device health state
  digitalTwinModelId: string, # Optional. Digital twin model Id
  healthChecks: [
    {
      name: string, # Optional. Health check name
      result: &quot;success&quot; | &quot;userError&quot;, # Optional. Health check result
    }
  ], # Required. Array of health checks and their results
}
</code>

</remarks>
    </member>
    <member name="ImportDevicesAsync(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call ImportDevicesAsync with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = "Devices";

var operation = await client.ImportDevicesAsync(WaitUntil.Started, RequestContent.Create(data));

var response = await operation.WaitForCompletionResponseAsync();
Console.WriteLine(response.Status)
]]></code>
</example>
    </member>
    <member name="ImportDevices(WaitUntil,RequestContent,RequestContext)">
<example>
This sample shows how to call ImportDevices with required parameters and request content.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

var data = "Devices";

var operation = client.ImportDevices(WaitUntil.Started, RequestContent.Create(data));

var response = operation.WaitForCompletionResponse();
Console.WriteLine(response.Status)
]]></code>
</example>
    </member>
  </members>
</doc>