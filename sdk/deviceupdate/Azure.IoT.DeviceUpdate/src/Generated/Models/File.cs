// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.IoT.DeviceUpdate.Models
{
    /// <summary> Update file metadata. </summary>
    public partial class File
    {
        /// <summary> Initializes a new instance of File. </summary>
        /// <param name="fileId"> File identity, generated by server at import time. </param>
        /// <param name="fileName"> File name. </param>
        /// <param name="sizeInBytes"> File size in number of bytes. </param>
        /// <param name="hashes"> Mapping of hashing algorithm to base64 encoded hash values. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="fileId"/>, <paramref name="fileName"/>, or <paramref name="hashes"/> is null. </exception>
        internal File(string fileId, string fileName, long sizeInBytes, IReadOnlyDictionary<string, string> hashes)
        {
            if (fileId == null)
            {
                throw new ArgumentNullException(nameof(fileId));
            }
            if (fileName == null)
            {
                throw new ArgumentNullException(nameof(fileName));
            }
            if (hashes == null)
            {
                throw new ArgumentNullException(nameof(hashes));
            }

            FileId = fileId;
            FileName = fileName;
            SizeInBytes = sizeInBytes;
            Hashes = hashes;
        }

        /// <summary> Initializes a new instance of File. </summary>
        /// <param name="fileId"> File identity, generated by server at import time. </param>
        /// <param name="fileName"> File name. </param>
        /// <param name="sizeInBytes"> File size in number of bytes. </param>
        /// <param name="hashes"> Mapping of hashing algorithm to base64 encoded hash values. </param>
        /// <param name="mimeType"> File MIME type. </param>
        /// <param name="etag"> File ETag. </param>
        internal File(string fileId, string fileName, long sizeInBytes, IReadOnlyDictionary<string, string> hashes, string mimeType, string etag)
        {
            FileId = fileId;
            FileName = fileName;
            SizeInBytes = sizeInBytes;
            Hashes = hashes;
            MimeType = mimeType;
            Etag = etag;
        }

        /// <summary> File identity, generated by server at import time. </summary>
        public string FileId { get; }
        /// <summary> File name. </summary>
        public string FileName { get; }
        /// <summary> File size in number of bytes. </summary>
        public long SizeInBytes { get; }
        /// <summary> Mapping of hashing algorithm to base64 encoded hash values. </summary>
        public IReadOnlyDictionary<string, string> Hashes { get; }
        /// <summary> File MIME type. </summary>
        public string MimeType { get; }
        /// <summary> File ETag. </summary>
        public string Etag { get; }
    }
}
