// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.IoT.DeviceUpdate.Models
{
    /// <summary> Operation status filter. </summary>
    internal readonly partial struct OperationFilterStatus : IEquatable<OperationFilterStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="OperationFilterStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperationFilterStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RunningValue = "Running";
        private const string NotStartedValue = "NotStarted";

        /// <summary> Running. </summary>
        public static OperationFilterStatus Running { get; } = new OperationFilterStatus(RunningValue);
        /// <summary> NotStarted. </summary>
        public static OperationFilterStatus NotStarted { get; } = new OperationFilterStatus(NotStartedValue);
        /// <summary> Determines if two <see cref="OperationFilterStatus"/> values are the same. </summary>
        public static bool operator ==(OperationFilterStatus left, OperationFilterStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperationFilterStatus"/> values are not the same. </summary>
        public static bool operator !=(OperationFilterStatus left, OperationFilterStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OperationFilterStatus"/>. </summary>
        public static implicit operator OperationFilterStatus(string value) => new OperationFilterStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperationFilterStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperationFilterStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
