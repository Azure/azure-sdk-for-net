// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.IoT.DeviceUpdate.Tests
{
    public partial class DeviceUpdateClientTests : IoTDeviceUpdateTestBase
    {
        public DeviceUpdateClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetUpdateAsync("<provider>", "<name>", "<version>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetUpdateAsync("<provider>", "<name>", "<version>", ifNoneMatch: new ETag("<ifNoneMatch>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetFile_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetFileAsync("<provider>", "<name>", "<version>", "<fileId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetFile_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetFileAsync("<provider>", "<name>", "<version>", "<fileId>", ifNoneMatch: new ETag("<ifNoneMatch>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOperationStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetOperationStatusAsync("<operationId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOperationStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetOperationStatusAsync("<operationId>", ifNoneMatch: new ETag("<ifNoneMatch>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdates_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetUpdatesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdates_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetUpdatesAsync(search: "<search>", filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetProviders_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetProvidersAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetProviders_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetProvidersAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetNames_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetNamesAsync("<provider>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetNames_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetNamesAsync("<provider>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetVersions_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetVersionsAsync("<provider>", "<name>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetVersions_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetVersionsAsync("<provider>", "<name>", filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetFiles_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetFilesAsync("<provider>", "<name>", "<version>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetFiles_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetFilesAsync("<provider>", "<name>", "<version>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOperationStatuses_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetOperationStatusesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOperationStatuses_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetOperationStatusesAsync(filter: "<filter>", top: 1234))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            Operation operation = await client.DeleteUpdateAsync(WaitUntil.Completed, "<provider>", "<name>", "<version>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            Operation operation = await client.DeleteUpdateAsync(WaitUntil.Completed, "<provider>", "<name>", "<version>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StartImportUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
importManifest = new
{
url = "<url>",
sizeInBytes = 1234L,
hashes = new
{
key = "<hashes>",
},
},
}
            });
            Operation operation = await client.StartImportUpdateAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StartImportUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceUpdateClient client = CreateDeviceUpdateClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create(new object[]
            {
new
{
importManifest = new
{
url = "<url>",
sizeInBytes = 1234L,
hashes = new
{
key = "<hashes>",
},
},
friendlyName = "<friendlyName>",
files = new object[]
{
new
{
filename = "<filename>",
url = "<url>",
}
},
}
            });
            Operation operation = await client.StartImportUpdateAsync(WaitUntil.Completed, content);
        }
    }
}
