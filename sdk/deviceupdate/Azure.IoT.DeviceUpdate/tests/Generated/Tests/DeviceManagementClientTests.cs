// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.IoT.DeviceUpdate.Tests
{
    public partial class DeviceManagementClientTests : IoTDeviceUpdateTestBase
    {
        public DeviceManagementClientTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClass_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceClassAsync("<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClass_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceClassAsync("<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateDeviceClass_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                friendlyName = "<friendlyName>",
            });
            Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task UpdateDeviceClass_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                friendlyName = "<friendlyName>",
            });
            Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteDeviceClass_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteDeviceClass_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDevice_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceAsync("<deviceId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDevice_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceAsync("<deviceId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceModule_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceModule_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdateCompliance_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetUpdateComplianceAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdateCompliance_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetUpdateComplianceAsync();
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGroup_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteGroup_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdateComplianceForGroup_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetUpdateComplianceForGroup_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                update = new
                {
                    updateId = new
                    {
                        provider = "<provider>",
                        name = "<name>",
                        version = "<version>",
                    },
                },
                groupId = "<groupId>",
            });
            Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdateDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                update = new
                {
                    updateId = new
                    {
                        provider = "<provider>",
                        name = "<name>",
                        version = "<version>",
                    },
                },
                groupId = "<groupId>",
                deviceClassSubgroups = new object[]
            {
"<deviceClassSubgroups>"
            },
                isCanceled = true,
                isRetried = true,
                rollbackPolicy = new
                {
                    failure = new
                    {
                        devicesFailedPercentage = 1234,
                        devicesFailedCount = 1234,
                    },
                },
                isCloudInitiatedRollback = true,
            });
            Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeploymentStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeploymentStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClassSubgroupUpdateCompliance_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClassSubgroupUpdateCompliance_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBestUpdatesForDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBestUpdatesForDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeploymentForDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeploymentForDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteDeploymentForDeviceClassSubgroup_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task DeleteDeploymentForDeviceClassSubgroup_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StopDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StopDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RetryDeployment_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task RetryDeployment_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClassSubgroupDeploymentStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClassSubgroupDeploymentStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOperationStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetOperationStatusAsync("<operationId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOperationStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetOperationStatusAsync("<operationId>", ifNoneMatch: new ETag("<ifNoneMatch>"));
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StartLogCollection_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                deviceList = new object[]
            {
new
{
deviceId = "<deviceId>",
}
            },
            });
            Response response = await client.StartLogCollectionAsync("<logCollectionId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task StartLogCollection_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create(new
            {
                operationId = "<operationId>",
                deviceList = new object[]
            {
new
{
deviceId = "<deviceId>",
moduleId = "<moduleId>",
}
            },
                description = "<description>",
            });
            Response response = await client.StartLogCollectionAsync("<logCollectionId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetLogCollection_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetLogCollectionAsync("<logCollectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetLogCollection_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetLogCollectionAsync("<logCollectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetLogCollectionDetailedStatus_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetLogCollectionDetailedStatusAsync("<logCollectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetLogCollectionDetailedStatus_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            Response response = await client.GetLogCollectionDetailedStatusAsync("<logCollectionId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClasses_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceClassesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClasses_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceClassesAsync(filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetInstallableUpdatesForDeviceClasses_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetInstallableUpdatesForDeviceClasses_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDevices_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDevicesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDevices_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDevicesAsync(filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetGroupsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetGroups_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetGroupsAsync(orderBy: "<orderBy>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBestUpdatesForGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBestUpdatesForGroups_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeploymentsForGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeploymentsForGroupsAsync("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeploymentsForGroups_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeploymentsForGroupsAsync("<groupId>", orderBy: "<orderBy>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClassSubgroupsForGroups_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceClassSubgroupsForGroups_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeploymentsForDeviceClassSubgroups_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeploymentsForDeviceClassSubgroups_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", orderBy: "<orderBy>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceStatesForDeviceClassSubgroupDeployments_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDeviceStatesForDeviceClassSubgroupDeployments_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOperationStatuses_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetOperationStatusesAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOperationStatuses_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetOperationStatusesAsync(filter: "<filter>", top: 1234))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetLogCollections_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetLogCollectionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetLogCollections_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetLogCollectionsAsync())
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetHealthOfDevices_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetHealthOfDevicesAsync("<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetHealthOfDevices_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            await foreach (BinaryData item in client.GetHealthOfDevicesAsync("<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ImportDevices_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create("Devices");
            Operation operation = await client.ImportDevicesAsync(WaitUntil.Completed, content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task ImportDevices_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            DeviceManagementClient client = CreateDeviceManagementClient(endpoint, "<InstanceId>", credential);

            using RequestContent content = RequestContent.Create("Devices");
            Operation operation = await client.ImportDevicesAsync(WaitUntil.Completed, content);
        }
    }
}
