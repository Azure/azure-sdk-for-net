// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.IoT.DeviceUpdate.Samples
{
    public class Samples_DeviceManagementClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClass()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClass("<deviceClassId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClass_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClass("<deviceClassId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClass_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassAsync("<deviceClassId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClass_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassAsync("<deviceClassId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateDeviceClass()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                friendlyName = "<friendlyName>",
            };

            Response response = client.UpdateDeviceClass("<deviceClassId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateDeviceClass_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                friendlyName = "<friendlyName>",
            };

            Response response = client.UpdateDeviceClass("<deviceClassId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateDeviceClass_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                friendlyName = "<friendlyName>",
            };

            Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateDeviceClass_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                friendlyName = "<friendlyName>",
            };

            Response response = await client.UpdateDeviceClassAsync("<deviceClassId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeviceClass()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeviceClass("<deviceClassId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeviceClass_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeviceClass("<deviceClassId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeviceClass_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeviceClassAsync("<deviceClassId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeviceClass_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeviceClassAsync("<deviceClassId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevice()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDevice("<deviceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevice_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDevice("<deviceId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevice_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceAsync("<deviceId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevice_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceAsync("<deviceId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceModule()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceModule("<deviceId>", "<moduleId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceModule_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceModule("<deviceId>", "<moduleId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceModule_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceModule_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceModuleAsync("<deviceId>", "<moduleId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateCompliance()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetUpdateCompliance();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateCompliance_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetUpdateCompliance(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateCompliance_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetUpdateComplianceAsync();

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateCompliance_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetUpdateComplianceAsync(new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetGroup("<groupId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("groupType").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetGroup("<groupId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("groupType").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
            Console.WriteLine(result.GetProperty("deployments")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetGroupAsync("<groupId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("groupType").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetGroupAsync("<groupId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("groupType").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
            Console.WriteLine(result.GetProperty("deployments")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteGroup("<groupId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteGroup("<groupId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteGroupAsync("<groupId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteGroupAsync("<groupId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateComplianceForGroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetUpdateComplianceForGroup("<groupId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUpdateComplianceForGroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetUpdateComplianceForGroup("<groupId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateComplianceForGroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUpdateComplianceForGroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetUpdateComplianceForGroupAsync("<groupId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeployment()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeployment("<groupId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeployment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeployment("<groupId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeployment_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeployment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentAsync("<groupId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateDeployment()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                update = new
                {
                    updateId = new
                    {
                        provider = "<provider>",
                        name = "<name>",
                        version = "<version>",
                    },
                },
                groupId = "<groupId>",
            };

            Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdateDeployment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                update = new
                {
                    updateId = new
                    {
                        provider = "<provider>",
                        name = "<name>",
                        version = "<version>",
                    },
                },
                groupId = "<groupId>",
                deviceClassSubgroups = new[] {
        "<String>"
    },
                isCanceled = true,
                isRetried = true,
                rollbackPolicy = new
                {
                    failure = new
                    {
                        devicesFailedPercentage = 1234,
                        devicesFailedCount = 1234,
                    },
                },
                isCloudInitiatedRollback = true,
            };

            Response response = client.CreateOrUpdateDeployment("<groupId>", "<deploymentId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateDeployment_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                update = new
                {
                    updateId = new
                    {
                        provider = "<provider>",
                        name = "<name>",
                        version = "<version>",
                    },
                },
                groupId = "<groupId>",
            };

            Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdateDeployment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                deploymentId = "<deploymentId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                update = new
                {
                    updateId = new
                    {
                        provider = "<provider>",
                        name = "<name>",
                        version = "<version>",
                    },
                },
                groupId = "<groupId>",
                deviceClassSubgroups = new[] {
        "<String>"
    },
                isCanceled = true,
                isRetried = true,
                rollbackPolicy = new
                {
                    failure = new
                    {
                        devicesFailedPercentage = 1234,
                        devicesFailedCount = 1234,
                    },
                },
                isCloudInitiatedRollback = true,
            };

            Response response = await client.CreateOrUpdateDeploymentAsync("<groupId>", "<deploymentId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeployment()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeployment("<groupId>", "<deploymentId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeployment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeployment("<groupId>", "<deploymentId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeployment_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeployment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeploymentAsync("<groupId>", "<deploymentId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentStatus()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentStatus_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeploymentStatus("<groupId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("occurredDateTime").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentStatus_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentStatus_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentStatusAsync("<groupId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("error").GetProperty("occurredDateTime").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("totalDevices").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedFailedCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCompletedSucceededCount").ToString());
            Console.WriteLine(result.GetProperty("subgroupStatus")[0].GetProperty("devicesCanceledCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroup("<groupId>", "<deviceClassId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeviceClassSubgroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeviceClassSubgroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeviceClassSubgroup("<groupId>", "<deviceClassId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeviceClassSubgroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeviceClassSubgroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupUpdateCompliance()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupUpdateCompliance_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroupUpdateCompliance("<groupId>", "<deviceClassId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupUpdateCompliance_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupUpdateCompliance_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupUpdateComplianceAsync("<groupId>", "<deviceClassId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("totalDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("onLatestUpdateDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("newUpdatesAvailableDeviceCount").ToString());
            Console.WriteLine(result.GetProperty("updatesInProgressDeviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForDeviceClassSubgroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForDeviceClassSubgroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetBestUpdatesForDeviceClassSubgroup("<groupId>", "<deviceClassId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForDeviceClassSubgroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForDeviceClassSubgroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetBestUpdatesForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("deviceCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentForDeviceClassSubgroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentForDeviceClassSubgroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentForDeviceClassSubgroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentForDeviceClassSubgroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeploymentForDeviceClassSubgroup()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DeleteDeploymentForDeviceClassSubgroup_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.DeleteDeploymentForDeviceClassSubgroup("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeploymentForDeviceClassSubgroup_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DeleteDeploymentForDeviceClassSubgroup_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.DeleteDeploymentForDeviceClassSubgroupAsync("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDeployment()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopDeployment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.StopDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDeployment_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopDeployment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.StopDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetryDeployment()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RetryDeployment_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.RetryDeployment("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetryDeployment_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RetryDeployment_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.RetryDeploymentAsync("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deploymentId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
            Console.WriteLine(result.GetProperty("isCanceled").ToString());
            Console.WriteLine(result.GetProperty("isRetried").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
            Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
            Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupDeploymentStatus()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupDeploymentStatus_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetDeviceClassSubgroupDeploymentStatus("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
            Console.WriteLine(result.GetProperty("totalDevices").ToString());
            Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupDeploymentStatus_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupDeploymentStatus_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetDeviceClassSubgroupDeploymentStatusAsync("<groupId>", "<deviceClassId>", "<deploymentId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("groupId").ToString());
            Console.WriteLine(result.GetProperty("deviceClassId").ToString());
            Console.WriteLine(result.GetProperty("deploymentState").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
            Console.WriteLine(result.GetProperty("totalDevices").ToString());
            Console.WriteLine(result.GetProperty("devicesInProgressCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCompletedFailedCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCompletedSucceededCount").ToString());
            Console.WriteLine(result.GetProperty("devicesCanceledCount").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOperationStatus()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetOperationStatus("<operationId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOperationStatus_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetOperationStatus("<operationId>", null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
            Console.WriteLine(result.GetProperty("traceId").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOperationStatus_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetOperationStatusAsync("<operationId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOperationStatus_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetOperationStatusAsync("<operationId>", null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
            Console.WriteLine(result.GetProperty("traceId").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("etag").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartLogCollection()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                deviceList = new[] {
        new {
            deviceId = "<deviceId>",
        }
    },
            };

            Response response = client.StartLogCollection("<logCollectionId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StartLogCollection_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                operationId = "<operationId>",
                deviceList = new[] {
        new {
            deviceId = "<deviceId>",
            moduleId = "<moduleId>",
        }
    },
                description = "<description>",
            };

            Response response = client.StartLogCollection("<logCollectionId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartLogCollection_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                deviceList = new[] {
        new {
            deviceId = "<deviceId>",
        }
    },
            };

            Response response = await client.StartLogCollectionAsync("<logCollectionId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StartLogCollection_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = new
            {
                operationId = "<operationId>",
                deviceList = new[] {
        new {
            deviceId = "<deviceId>",
            moduleId = "<moduleId>",
        }
    },
                description = "<description>",
            };

            Response response = await client.StartLogCollectionAsync("<logCollectionId>", RequestContent.Create(data), new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollection()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetLogCollection("<logCollectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollection_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetLogCollection("<logCollectionId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollection_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetLogCollectionAsync("<logCollectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollection_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetLogCollectionAsync("<logCollectionId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollectionDetailedStatus()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetLogCollectionDetailedStatus("<logCollectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollectionDetailedStatus_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = client.GetLogCollectionDetailedStatus("<logCollectionId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollectionDetailedStatus_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetLogCollectionDetailedStatusAsync("<logCollectionId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollectionDetailedStatus_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            Response response = await client.GetLogCollectionDetailedStatusAsync("<logCollectionId>", new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("operationId").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("deviceId").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("moduleId").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("resultCode").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("extendedResultCode").ToString());
            Console.WriteLine(result.GetProperty("deviceStatus")[0].GetProperty("logLocation").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClasses()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeviceClasses())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClasses_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeviceClasses("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClasses_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeviceClassesAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClasses_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeviceClassesAsync("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInstallableUpdatesForDeviceClasses()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetInstallableUpdatesForDeviceClasses_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetInstallableUpdatesForDeviceClasses("<deviceClassId>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("friendlyName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInstallableUpdatesForDeviceClasses_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetInstallableUpdatesForDeviceClasses_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetInstallableUpdatesForDeviceClassesAsync("<deviceClassId>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("friendlyName").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevices()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDevices())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDevices_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDevices("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
                Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevices_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDevicesAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDevices_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDevicesAsync("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastAttemptedUpdate").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deploymentStatus").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("installedUpdate").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("onLatestUpdate").ToString());
                Console.WriteLine(result.GetProperty("lastDeploymentId").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("resultDetails").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("extendedResultCode").ToString());
                Console.WriteLine(result.GetProperty("lastInstallResult").GetProperty("stepResults")[0].GetProperty("resultDetails").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroups()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetGroups())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("groupType").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetGroups_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetGroups("<orderBy>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("groupType").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
                Console.WriteLine(result.GetProperty("deployments")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroups_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetGroupsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("groupType").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetGroups_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetGroupsAsync("<orderBy>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("groupType").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithNewUpdatesAvailableCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithUpdatesInProgressCount").ToString());
                Console.WriteLine(result.GetProperty("subgroupsWithOnLatestUpdateCount").ToString());
                Console.WriteLine(result.GetProperty("deployments")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForGroups()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetBestUpdatesForGroups("<groupId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetBestUpdatesForGroups_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetBestUpdatesForGroups("<groupId>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForGroups_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetBestUpdatesForGroupsAsync("<groupId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetBestUpdatesForGroups_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetBestUpdatesForGroupsAsync("<groupId>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForGroups()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeploymentsForGroups("<groupId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForGroups_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeploymentsForGroups("<groupId>", "<orderBy>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
                Console.WriteLine(result.GetProperty("isCanceled").ToString());
                Console.WriteLine(result.GetProperty("isRetried").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
                Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForGroups_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeploymentsForGroupsAsync("<groupId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForGroups_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeploymentsForGroupsAsync("<groupId>", "<orderBy>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
                Console.WriteLine(result.GetProperty("isCanceled").ToString());
                Console.WriteLine(result.GetProperty("isRetried").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
                Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupsForGroups()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeviceClassSubgroupsForGroups("<groupId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceClassSubgroupsForGroups_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeviceClassSubgroupsForGroups("<groupId>", "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupsForGroups_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceClassSubgroupsForGroups_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeviceClassSubgroupsForGroupsAsync("<groupId>", "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceClassId").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("deviceCount").ToString());
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForDeviceClassSubgroups()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeploymentsForDeviceClassSubgroups_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeploymentsForDeviceClassSubgroups("<groupId>", "<deviceClassId>", "<orderBy>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
                Console.WriteLine(result.GetProperty("isCanceled").ToString());
                Console.WriteLine(result.GetProperty("isRetried").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
                Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForDeviceClassSubgroups_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeploymentsForDeviceClassSubgroups_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeploymentsForDeviceClassSubgroupsAsync("<groupId>", "<deviceClassId>", "<orderBy>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deploymentId").ToString());
                Console.WriteLine(result.GetProperty("startDateTime").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("groupId").ToString());
                Console.WriteLine(result.GetProperty("deviceClassSubgroups")[0].ToString());
                Console.WriteLine(result.GetProperty("isCanceled").ToString());
                Console.WriteLine(result.GetProperty("isRetried").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("updateId").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("update").GetProperty("friendlyName").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedPercentage").ToString());
                Console.WriteLine(result.GetProperty("rollbackPolicy").GetProperty("failure").GetProperty("devicesFailedCount").ToString());
                Console.WriteLine(result.GetProperty("isCloudInitiatedRollback").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceStatesForDeviceClassSubgroupDeployments()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
                Console.WriteLine(result.GetProperty("deviceState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDeviceStatesForDeviceClassSubgroupDeployments_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetDeviceStatesForDeviceClassSubgroupDeployments("<groupId>", "<deviceClassId>", "<deploymentId>", "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
                Console.WriteLine(result.GetProperty("deviceState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceStatesForDeviceClassSubgroupDeployments_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
                Console.WriteLine(result.GetProperty("deviceState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDeviceStatesForDeviceClassSubgroupDeployments_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetDeviceStatesForDeviceClassSubgroupDeploymentsAsync("<groupId>", "<deviceClassId>", "<deploymentId>", "<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("movedOnToNewDeployment").ToString());
                Console.WriteLine(result.GetProperty("deviceState").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOperationStatuses()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetOperationStatuses())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetOperationStatuses_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetOperationStatuses("<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
                Console.WriteLine(result.GetProperty("traceId").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOperationStatuses_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetOperationStatusesAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetOperationStatuses_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetOperationStatusesAsync("<filter>", 1234, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("errorDetail").ToString());
                Console.WriteLine(result.GetProperty("error").GetProperty("occurredDateTime").ToString());
                Console.WriteLine(result.GetProperty("traceId").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("etag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollections()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetLogCollections())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetLogCollections_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetLogCollections(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollections_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetLogCollectionsAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetLogCollections_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetLogCollectionsAsync(new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("operationId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("deviceList")[0].GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetHealthOfDevices()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetHealthOfDevices("<filter>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetHealthOfDevices_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            foreach (var item in client.GetHealthOfDevices("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetHealthOfDevices_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetHealthOfDevicesAsync("<filter>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetHealthOfDevices_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            await foreach (var item in client.GetHealthOfDevicesAsync("<filter>", new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("deviceId").ToString());
                Console.WriteLine(result.GetProperty("moduleId").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("digitalTwinModelId").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("healthChecks")[0].GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportDevices()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = "Devices";

            var operation = client.ImportDevices(WaitUntil.Completed, RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ImportDevices_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = "Devices";

            var operation = client.ImportDevices(WaitUntil.Completed, RequestContent.Create(data), new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportDevices_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = "Devices";

            var operation = await client.ImportDevicesAsync(WaitUntil.Completed, RequestContent.Create(data));

            Console.WriteLine(operation.GetRawResponse().Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ImportDevices_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);

            var data = "Devices";

            var operation = await client.ImportDevicesAsync(WaitUntil.Completed, RequestContent.Create(data), new RequestContext());

            Console.WriteLine(operation.GetRawResponse().Status);
        }
    }
}
