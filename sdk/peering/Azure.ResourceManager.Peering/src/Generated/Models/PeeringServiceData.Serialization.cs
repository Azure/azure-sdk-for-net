// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Peering.Models;

namespace Azure.ResourceManager.Peering
{
    public partial class PeeringServiceData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Core.Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(PeeringServiceLocation))
            {
                writer.WritePropertyName("peeringServiceLocation"u8);
                writer.WriteStringValue(PeeringServiceLocation);
            }
            if (Core.Optional.IsDefined(PeeringServiceProvider))
            {
                writer.WritePropertyName("peeringServiceProvider"u8);
                writer.WriteStringValue(PeeringServiceProvider);
            }
            if (Core.Optional.IsDefined(ProviderPrimaryPeeringLocation))
            {
                writer.WritePropertyName("providerPrimaryPeeringLocation"u8);
                writer.WriteStringValue(ProviderPrimaryPeeringLocation);
            }
            if (Core.Optional.IsDefined(ProviderBackupPeeringLocation))
            {
                writer.WritePropertyName("providerBackupPeeringLocation"u8);
                writer.WriteStringValue(ProviderBackupPeeringLocation);
            }
            if (Core.Optional.IsDefined(LogAnalyticsWorkspaceProperties))
            {
                writer.WritePropertyName("logAnalyticsWorkspaceProperties"u8);
                writer.WriteObjectValue(LogAnalyticsWorkspaceProperties);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static PeeringServiceData DeserializePeeringServiceData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<PeeringServiceSku> sku = default;
            Core.Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<string> peeringServiceLocation = default;
            Core.Optional<string> peeringServiceProvider = default;
            Core.Optional<PeeringProvisioningState> provisioningState = default;
            Core.Optional<string> providerPrimaryPeeringLocation = default;
            Core.Optional<string> providerBackupPeeringLocation = default;
            Core.Optional<PeeringLogAnalyticsWorkspaceProperties> logAnalyticsWorkspaceProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = PeeringServiceSku.DeserializePeeringServiceSku(property.Value);
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("peeringServiceLocation"u8))
                        {
                            peeringServiceLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("peeringServiceProvider"u8))
                        {
                            peeringServiceProvider = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new PeeringProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("providerPrimaryPeeringLocation"u8))
                        {
                            providerPrimaryPeeringLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("providerBackupPeeringLocation"u8))
                        {
                            providerBackupPeeringLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("logAnalyticsWorkspaceProperties"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            logAnalyticsWorkspaceProperties = PeeringLogAnalyticsWorkspaceProperties.DeserializePeeringLogAnalyticsWorkspaceProperties(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new PeeringServiceData(id, name, type, systemData.Value, Core.Optional.ToDictionary(tags), location, sku.Value, peeringServiceLocation.Value, peeringServiceProvider.Value, Core.Optional.ToNullable(provisioningState), providerPrimaryPeeringLocation.Value, providerBackupPeeringLocation.Value, logAnalyticsWorkspaceProperties.Value);
        }
    }
}
