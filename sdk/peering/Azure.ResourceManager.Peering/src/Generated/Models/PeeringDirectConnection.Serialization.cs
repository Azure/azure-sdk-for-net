// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Peering.Models
{
    public partial class PeeringDirectConnection : IUtf8JsonSerializable, IModelJsonSerializable<PeeringDirectConnection>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<PeeringDirectConnection>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<PeeringDirectConnection>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<PeeringDirectConnection>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(BandwidthInMbps))
            {
                writer.WritePropertyName("bandwidthInMbps"u8);
                writer.WriteNumberValue(BandwidthInMbps.Value);
            }
            if (Optional.IsDefined(SessionAddressProvider))
            {
                writer.WritePropertyName("sessionAddressProvider"u8);
                writer.WriteStringValue(SessionAddressProvider.Value.ToString());
            }
            if (Optional.IsDefined(UseForPeeringService))
            {
                writer.WritePropertyName("useForPeeringService"u8);
                writer.WriteBooleanValue(UseForPeeringService.Value);
            }
            if (Optional.IsDefined(PeeringDBFacilityId))
            {
                writer.WritePropertyName("peeringDBFacilityId"u8);
                writer.WriteNumberValue(PeeringDBFacilityId.Value);
            }
            if (Optional.IsDefined(BgpSession))
            {
                writer.WritePropertyName("bgpSession"u8);
                if (BgpSession is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<PeeringBgpSession>)BgpSession).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(ConnectionIdentifier))
            {
                writer.WritePropertyName("connectionIdentifier"u8);
                writer.WriteStringValue(ConnectionIdentifier);
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static PeeringDirectConnection DeserializePeeringDirectConnection(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> bandwidthInMbps = default;
            Optional<int> provisionedBandwidthInMbps = default;
            Optional<PeeringSessionAddressProvider> sessionAddressProvider = default;
            Optional<bool> useForPeeringService = default;
            Optional<string> microsoftTrackingId = default;
            Optional<int> peeringDBFacilityId = default;
            Optional<PeeringConnectionState> connectionState = default;
            Optional<PeeringBgpSession> bgpSession = default;
            Optional<string> connectionIdentifier = default;
            Optional<string> errorMessage = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("bandwidthInMbps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bandwidthInMbps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("provisionedBandwidthInMbps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionedBandwidthInMbps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sessionAddressProvider"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sessionAddressProvider = new PeeringSessionAddressProvider(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("useForPeeringService"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    useForPeeringService = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("microsoftTrackingId"u8))
                {
                    microsoftTrackingId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("peeringDBFacilityId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    peeringDBFacilityId = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("connectionState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectionState = new PeeringConnectionState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("bgpSession"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpSession = PeeringBgpSession.DeserializePeeringBgpSession(property.Value);
                    continue;
                }
                if (property.NameEquals("connectionIdentifier"u8))
                {
                    connectionIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorMessage"u8))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new PeeringDirectConnection(Optional.ToNullable(bandwidthInMbps), Optional.ToNullable(provisionedBandwidthInMbps), Optional.ToNullable(sessionAddressProvider), Optional.ToNullable(useForPeeringService), microsoftTrackingId.Value, Optional.ToNullable(peeringDBFacilityId), Optional.ToNullable(connectionState), bgpSession.Value, connectionIdentifier.Value, errorMessage.Value, serializedAdditionalRawData);
        }

        PeeringDirectConnection IModelJsonSerializable<PeeringDirectConnection>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<PeeringDirectConnection>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializePeeringDirectConnection(doc.RootElement, options);
        }

        BinaryData IModelSerializable<PeeringDirectConnection>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<PeeringDirectConnection>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        PeeringDirectConnection IModelSerializable<PeeringDirectConnection>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<PeeringDirectConnection>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializePeeringDirectConnection(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="PeeringDirectConnection"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="PeeringDirectConnection"/> to convert. </param>
        public static implicit operator RequestContent(PeeringDirectConnection model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="PeeringDirectConnection"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator PeeringDirectConnection(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializePeeringDirectConnection(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
