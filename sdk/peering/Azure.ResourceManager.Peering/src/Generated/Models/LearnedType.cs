// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Peering.Models
{
    /// <summary> The prefix learned type. </summary>
    public readonly partial struct LearnedType : IEquatable<LearnedType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LearnedType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LearnedType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ViaServiceProviderValue = "ViaServiceProvider";
        private const string ViaSessionValue = "ViaSession";

        /// <summary> None. </summary>
        public static LearnedType None { get; } = new LearnedType(NoneValue);
        /// <summary> ViaServiceProvider. </summary>
        public static LearnedType ViaServiceProvider { get; } = new LearnedType(ViaServiceProviderValue);
        /// <summary> ViaSession. </summary>
        public static LearnedType ViaSession { get; } = new LearnedType(ViaSessionValue);
        /// <summary> Determines if two <see cref="LearnedType"/> values are the same. </summary>
        public static bool operator ==(LearnedType left, LearnedType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LearnedType"/> values are not the same. </summary>
        public static bool operator !=(LearnedType left, LearnedType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LearnedType"/>. </summary>
        public static implicit operator LearnedType(string value) => new LearnedType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LearnedType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LearnedType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
