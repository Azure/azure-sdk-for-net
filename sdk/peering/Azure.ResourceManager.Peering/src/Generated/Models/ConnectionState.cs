// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Peering.Models
{
    /// <summary> The state of the connection. </summary>
    public readonly partial struct ConnectionState : IEquatable<ConnectionState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectionState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string PendingApprovalValue = "PendingApproval";
        private const string ApprovedValue = "Approved";
        private const string ProvisioningStartedValue = "ProvisioningStarted";
        private const string ProvisioningFailedValue = "ProvisioningFailed";
        private const string ProvisioningCompletedValue = "ProvisioningCompleted";
        private const string ValidatingValue = "Validating";
        private const string ActiveValue = "Active";
        private const string TypeChangeRequestedValue = "TypeChangeRequested";
        private const string TypeChangeInProgressValue = "TypeChangeInProgress";

        /// <summary> None. </summary>
        public static ConnectionState None { get; } = new ConnectionState(NoneValue);
        /// <summary> PendingApproval. </summary>
        public static ConnectionState PendingApproval { get; } = new ConnectionState(PendingApprovalValue);
        /// <summary> Approved. </summary>
        public static ConnectionState Approved { get; } = new ConnectionState(ApprovedValue);
        /// <summary> ProvisioningStarted. </summary>
        public static ConnectionState ProvisioningStarted { get; } = new ConnectionState(ProvisioningStartedValue);
        /// <summary> ProvisioningFailed. </summary>
        public static ConnectionState ProvisioningFailed { get; } = new ConnectionState(ProvisioningFailedValue);
        /// <summary> ProvisioningCompleted. </summary>
        public static ConnectionState ProvisioningCompleted { get; } = new ConnectionState(ProvisioningCompletedValue);
        /// <summary> Validating. </summary>
        public static ConnectionState Validating { get; } = new ConnectionState(ValidatingValue);
        /// <summary> Active. </summary>
        public static ConnectionState Active { get; } = new ConnectionState(ActiveValue);
        /// <summary> TypeChangeRequested. </summary>
        public static ConnectionState TypeChangeRequested { get; } = new ConnectionState(TypeChangeRequestedValue);
        /// <summary> TypeChangeInProgress. </summary>
        public static ConnectionState TypeChangeInProgress { get; } = new ConnectionState(TypeChangeInProgressValue);
        /// <summary> Determines if two <see cref="ConnectionState"/> values are the same. </summary>
        public static bool operator ==(ConnectionState left, ConnectionState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectionState"/> values are not the same. </summary>
        public static bool operator !=(ConnectionState left, ConnectionState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConnectionState"/>. </summary>
        public static implicit operator ConnectionState(string value) => new ConnectionState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectionState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectionState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
