// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Peering.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Peering
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Peering. </summary>
    public static partial class PeeringExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of PeerAsnResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PeerAsnResources and their operations over a PeerAsnResource. </returns>
        public static PeerAsnCollection GetPeerAsns(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetPeerAsns();
        }

        /// <summary>
        /// Gets the peer ASN with the specified name under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns/{peerAsnName}
        /// Operation Id: PeerAsns_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="peerAsnName"> The peer ASN name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="peerAsnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="peerAsnName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PeerAsnResource>> GetPeerAsnAsync(this SubscriptionResource subscriptionResource, string peerAsnName, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetPeerAsns().GetAsync(peerAsnName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the peer ASN with the specified name under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerAsns/{peerAsnName}
        /// Operation Id: PeerAsns_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="peerAsnName"> The peer ASN name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="peerAsnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="peerAsnName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PeerAsnResource> GetPeerAsn(this SubscriptionResource subscriptionResource, string peerAsnName, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetPeerAsns().Get(peerAsnName, cancellationToken);
        }

        /// <summary>
        /// Lists all of the advertised prefixes for the specified peering location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/cdnPeeringPrefixes
        /// Operation Id: CdnPeeringPrefixes_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="peeringLocation"> The peering location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="peeringLocation"/> is null. </exception>
        /// <returns> An async collection of <see cref="CdnPeeringPrefix" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CdnPeeringPrefix> GetCdnPeeringPrefixesAsync(this SubscriptionResource subscriptionResource, string peeringLocation, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(peeringLocation, nameof(peeringLocation));

            return GetExtensionClient(subscriptionResource).GetCdnPeeringPrefixesAsync(peeringLocation, cancellationToken);
        }

        /// <summary>
        /// Lists all of the advertised prefixes for the specified peering location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/cdnPeeringPrefixes
        /// Operation Id: CdnPeeringPrefixes_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="peeringLocation"> The peering location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="peeringLocation"/> is null. </exception>
        /// <returns> A collection of <see cref="CdnPeeringPrefix" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CdnPeeringPrefix> GetCdnPeeringPrefixes(this SubscriptionResource subscriptionResource, string peeringLocation, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(peeringLocation, nameof(peeringLocation));

            return GetExtensionClient(subscriptionResource).GetCdnPeeringPrefixes(peeringLocation, cancellationToken);
        }

        /// <summary>
        /// Checks if the peering service provider is present within 1000 miles of customer&apos;s location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/checkServiceProviderAvailability
        /// Operation Id: CheckServiceProviderAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> The CheckServiceProviderAvailabilityInput indicating customer location and service provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static async Task<Response<PeeringServiceProviderAvailability>> CheckPeeringServiceProviderAvailabilityAsync(this SubscriptionResource subscriptionResource, CheckPeeringServiceProviderAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return await GetExtensionClient(subscriptionResource).CheckPeeringServiceProviderAvailabilityAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks if the peering service provider is present within 1000 miles of customer&apos;s location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/checkServiceProviderAvailability
        /// Operation Id: CheckServiceProviderAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> The CheckServiceProviderAvailabilityInput indicating customer location and service provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static Response<PeeringServiceProviderAvailability> CheckPeeringServiceProviderAvailability(this SubscriptionResource subscriptionResource, CheckPeeringServiceProviderAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(subscriptionResource).CheckPeeringServiceProviderAvailability(content, cancellationToken);
        }

        /// <summary>
        /// Lists all of the legacy peerings under the given subscription matching the specified kind and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings
        /// Operation Id: LegacyPeerings_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="peeringLocation"> The location of the peering. </param>
        /// <param name="kind"> The kind of the peering. </param>
        /// <param name="asn"> The ASN number associated with a legacy peering. </param>
        /// <param name="directPeeringType"> The direct peering type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="peeringLocation"/> is null. </exception>
        /// <returns> An async collection of <see cref="PeeringResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PeeringResource> GetPeeringsByLegacyPeeringAsync(this SubscriptionResource subscriptionResource, string peeringLocation, LegacyPeeringsKind kind, int? asn = null, DirectPeeringType? directPeeringType = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(peeringLocation, nameof(peeringLocation));

            return GetExtensionClient(subscriptionResource).GetPeeringsByLegacyPeeringAsync(peeringLocation, kind, asn, directPeeringType, cancellationToken);
        }

        /// <summary>
        /// Lists all of the legacy peerings under the given subscription matching the specified kind and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings
        /// Operation Id: LegacyPeerings_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="peeringLocation"> The location of the peering. </param>
        /// <param name="kind"> The kind of the peering. </param>
        /// <param name="asn"> The ASN number associated with a legacy peering. </param>
        /// <param name="directPeeringType"> The direct peering type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="peeringLocation"/> is null. </exception>
        /// <returns> A collection of <see cref="PeeringResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PeeringResource> GetPeeringsByLegacyPeering(this SubscriptionResource subscriptionResource, string peeringLocation, LegacyPeeringsKind kind, int? asn = null, DirectPeeringType? directPeeringType = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(peeringLocation, nameof(peeringLocation));

            return GetExtensionClient(subscriptionResource).GetPeeringsByLegacyPeering(peeringLocation, kind, asn, directPeeringType, cancellationToken);
        }

        /// <summary>
        /// Run looking glass functionality
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/lookingGlass
        /// Operation Id: LookingGlass_Invoke
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="command"> The command to be executed: ping, traceroute, bgpRoute. </param>
        /// <param name="sourceType"> The type of the source: Edge site or Azure Region. </param>
        /// <param name="sourceLocation"> The location of the source. </param>
        /// <param name="destinationIP"> The IP address of the destination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceLocation"/> or <paramref name="destinationIP"/> is null. </exception>
        public static async Task<Response<LookingGlassOutput>> InvokeLookingGlassAsync(this SubscriptionResource subscriptionResource, LookingGlassCommand command, LookingGlassSourceType sourceType, string sourceLocation, string destinationIP, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sourceLocation, nameof(sourceLocation));
            Argument.AssertNotNull(destinationIP, nameof(destinationIP));

            return await GetExtensionClient(subscriptionResource).InvokeLookingGlassAsync(command, sourceType, sourceLocation, destinationIP, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Run looking glass functionality
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/lookingGlass
        /// Operation Id: LookingGlass_Invoke
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="command"> The command to be executed: ping, traceroute, bgpRoute. </param>
        /// <param name="sourceType"> The type of the source: Edge site or Azure Region. </param>
        /// <param name="sourceLocation"> The location of the source. </param>
        /// <param name="destinationIP"> The IP address of the destination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceLocation"/> or <paramref name="destinationIP"/> is null. </exception>
        public static Response<LookingGlassOutput> InvokeLookingGlass(this SubscriptionResource subscriptionResource, LookingGlassCommand command, LookingGlassSourceType sourceType, string sourceLocation, string destinationIP, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(sourceLocation, nameof(sourceLocation));
            Argument.AssertNotNull(destinationIP, nameof(destinationIP));

            return GetExtensionClient(subscriptionResource).InvokeLookingGlass(command, sourceType, sourceLocation, destinationIP, cancellationToken);
        }

        /// <summary>
        /// Lists all of the available peering locations for the specified kind of peering.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringLocations
        /// Operation Id: PeeringLocations_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="kind"> The kind of the peering. </param>
        /// <param name="directPeeringType"> The type of direct peering. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringLocation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PeeringLocation> GetPeeringLocationsAsync(this SubscriptionResource subscriptionResource, PeeringLocationsKind kind, PeeringLocationsDirectPeeringType? directPeeringType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringLocationsAsync(kind, directPeeringType, cancellationToken);
        }

        /// <summary>
        /// Lists all of the available peering locations for the specified kind of peering.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringLocations
        /// Operation Id: PeeringLocations_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="kind"> The kind of the peering. </param>
        /// <param name="directPeeringType"> The type of direct peering. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringLocation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PeeringLocation> GetPeeringLocations(this SubscriptionResource subscriptionResource, PeeringLocationsKind kind, PeeringLocationsDirectPeeringType? directPeeringType = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringLocations(kind, directPeeringType, cancellationToken);
        }

        /// <summary>
        /// Lists all of the peerings under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerings
        /// Operation Id: Peerings_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PeeringResource> GetPeeringsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all of the peerings under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerings
        /// Operation Id: Peerings_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PeeringResource> GetPeerings(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeerings(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available countries for peering service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceCountries
        /// Operation Id: PeeringServiceCountries_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringServiceCountry" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PeeringServiceCountry> GetPeeringServiceCountriesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringServiceCountriesAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available countries for peering service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceCountries
        /// Operation Id: PeeringServiceCountries_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringServiceCountry" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PeeringServiceCountry> GetPeeringServiceCountries(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringServiceCountries(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available locations for peering service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceLocations
        /// Operation Id: PeeringServiceLocations_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="country"> The country of interest, in which the locations are to be present. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringServiceLocation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PeeringServiceLocation> GetPeeringServiceLocationsAsync(this SubscriptionResource subscriptionResource, string country = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringServiceLocationsAsync(country, cancellationToken);
        }

        /// <summary>
        /// Lists all of the available locations for peering service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceLocations
        /// Operation Id: PeeringServiceLocations_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="country"> The country of interest, in which the locations are to be present. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringServiceLocation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PeeringServiceLocation> GetPeeringServiceLocations(this SubscriptionResource subscriptionResource, string country = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringServiceLocations(country, cancellationToken);
        }

        /// <summary>
        /// Lists all of the available peering service locations for the specified kind of peering.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceProviders
        /// Operation Id: PeeringServiceProviders_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringServiceProvider" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PeeringServiceProvider> GetPeeringServiceProvidersAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringServiceProvidersAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available peering service locations for the specified kind of peering.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceProviders
        /// Operation Id: PeeringServiceProviders_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringServiceProvider" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PeeringServiceProvider> GetPeeringServiceProviders(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringServiceProviders(cancellationToken);
        }

        /// <summary>
        /// Lists all of the peerings under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServices
        /// Operation Id: PeeringServices_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PeeringServiceResource> GetPeeringServicesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringServicesAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all of the peerings under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServices
        /// Operation Id: PeeringServices_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PeeringServiceResource> GetPeeringServices(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPeeringServices(cancellationToken);
        }

        /// <summary>
        /// Initialize Peering Service for Connection Monitor functionality
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/initializeConnectionMonitor
        /// Operation Id: PeeringServices_InitializeConnectionMonitor
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static async Task<Response> InitializePeeringServiceConnectionMonitorAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return await GetExtensionClient(subscriptionResource).InitializePeeringServiceConnectionMonitorAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Initialize Peering Service for Connection Monitor functionality
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/initializeConnectionMonitor
        /// Operation Id: PeeringServices_InitializeConnectionMonitor
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public static Response InitializePeeringServiceConnectionMonitor(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).InitializePeeringServiceConnectionMonitor(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of PeeringResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PeeringResources and their operations over a PeeringResource. </returns>
        public static PeeringCollection GetPeerings(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetPeerings();
        }

        /// <summary>
        /// Gets an existing peering with the specified name under the given subscription and resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}
        /// Operation Id: Peerings_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="peeringName"> The name of the peering. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="peeringName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="peeringName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PeeringResource>> GetPeeringAsync(this ResourceGroupResource resourceGroupResource, string peeringName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetPeerings().GetAsync(peeringName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an existing peering with the specified name under the given subscription and resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}
        /// Operation Id: Peerings_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="peeringName"> The name of the peering. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="peeringName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="peeringName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PeeringResource> GetPeering(this ResourceGroupResource resourceGroupResource, string peeringName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetPeerings().Get(peeringName, cancellationToken);
        }

        /// <summary> Gets a collection of PeeringServiceResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PeeringServiceResources and their operations over a PeeringServiceResource. </returns>
        public static PeeringServiceCollection GetPeeringServices(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetPeeringServices();
        }

        /// <summary>
        /// Gets an existing peering service with the specified name under the given subscription and resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}
        /// Operation Id: PeeringServices_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="peeringServiceName"> The name of the peering. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="peeringServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="peeringServiceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PeeringServiceResource>> GetPeeringServiceAsync(this ResourceGroupResource resourceGroupResource, string peeringServiceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetPeeringServices().GetAsync(peeringServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an existing peering service with the specified name under the given subscription and resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peeringServices/{peeringServiceName}
        /// Operation Id: PeeringServices_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="peeringServiceName"> The name of the peering. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="peeringServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="peeringServiceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PeeringServiceResource> GetPeeringService(this ResourceGroupResource resourceGroupResource, string peeringServiceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetPeeringServices().Get(peeringServiceName, cancellationToken);
        }

        #region PeerAsnResource
        /// <summary>
        /// Gets an object representing a <see cref="PeerAsnResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PeerAsnResource.CreateResourceIdentifier" /> to create a <see cref="PeerAsnResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PeerAsnResource" /> object. </returns>
        public static PeerAsnResource GetPeerAsnResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PeerAsnResource.ValidateResourceId(id);
                return new PeerAsnResource(client, id);
            }
            );
        }
        #endregion

        #region PeeringRegisteredAsnResource
        /// <summary>
        /// Gets an object representing a <see cref="PeeringRegisteredAsnResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PeeringRegisteredAsnResource.CreateResourceIdentifier" /> to create a <see cref="PeeringRegisteredAsnResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PeeringRegisteredAsnResource" /> object. </returns>
        public static PeeringRegisteredAsnResource GetPeeringRegisteredAsnResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PeeringRegisteredAsnResource.ValidateResourceId(id);
                return new PeeringRegisteredAsnResource(client, id);
            }
            );
        }
        #endregion

        #region PeeringRegisteredPrefixResource
        /// <summary>
        /// Gets an object representing a <see cref="PeeringRegisteredPrefixResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PeeringRegisteredPrefixResource.CreateResourceIdentifier" /> to create a <see cref="PeeringRegisteredPrefixResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PeeringRegisteredPrefixResource" /> object. </returns>
        public static PeeringRegisteredPrefixResource GetPeeringRegisteredPrefixResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PeeringRegisteredPrefixResource.ValidateResourceId(id);
                return new PeeringRegisteredPrefixResource(client, id);
            }
            );
        }
        #endregion

        #region PeeringResource
        /// <summary>
        /// Gets an object representing a <see cref="PeeringResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PeeringResource.CreateResourceIdentifier" /> to create a <see cref="PeeringResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PeeringResource" /> object. </returns>
        public static PeeringResource GetPeeringResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PeeringResource.ValidateResourceId(id);
                return new PeeringResource(client, id);
            }
            );
        }
        #endregion

        #region ConnectionMonitorTestResource
        /// <summary>
        /// Gets an object representing a <see cref="ConnectionMonitorTestResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ConnectionMonitorTestResource.CreateResourceIdentifier" /> to create a <see cref="ConnectionMonitorTestResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ConnectionMonitorTestResource" /> object. </returns>
        public static ConnectionMonitorTestResource GetConnectionMonitorTestResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ConnectionMonitorTestResource.ValidateResourceId(id);
                return new ConnectionMonitorTestResource(client, id);
            }
            );
        }
        #endregion

        #region PeeringServicePrefixResource
        /// <summary>
        /// Gets an object representing a <see cref="PeeringServicePrefixResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PeeringServicePrefixResource.CreateResourceIdentifier" /> to create a <see cref="PeeringServicePrefixResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PeeringServicePrefixResource" /> object. </returns>
        public static PeeringServicePrefixResource GetPeeringServicePrefixResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PeeringServicePrefixResource.ValidateResourceId(id);
                return new PeeringServicePrefixResource(client, id);
            }
            );
        }
        #endregion

        #region PeeringServiceResource
        /// <summary>
        /// Gets an object representing a <see cref="PeeringServiceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PeeringServiceResource.CreateResourceIdentifier" /> to create a <see cref="PeeringServiceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PeeringServiceResource" /> object. </returns>
        public static PeeringServiceResource GetPeeringServiceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PeeringServiceResource.ValidateResourceId(id);
                return new PeeringServiceResource(client, id);
            }
            );
        }
        #endregion
    }
}
