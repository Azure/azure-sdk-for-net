// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Peering.Models;

namespace Azure.ResourceManager.Peering
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _cdnPeeringPrefixesClientDiagnostics;
        private CdnPeeringPrefixesRestOperations _cdnPeeringPrefixesRestClient;
        private ClientDiagnostics _defaultClientDiagnostics;
        private PeeringManagementRestOperations _defaultRestClient;
        private ClientDiagnostics _legacyPeeringsClientDiagnostics;
        private LegacyPeeringsRestOperations _legacyPeeringsRestClient;
        private ClientDiagnostics _lookingGlassClientDiagnostics;
        private LookingGlassRestOperations _lookingGlassRestClient;
        private ClientDiagnostics _peeringLocationsClientDiagnostics;
        private PeeringLocationsRestOperations _peeringLocationsRestClient;
        private ClientDiagnostics _peeringClientDiagnostics;
        private PeeringsRestOperations _peeringRestClient;
        private ClientDiagnostics _peeringServiceCountriesClientDiagnostics;
        private PeeringServiceCountriesRestOperations _peeringServiceCountriesRestClient;
        private ClientDiagnostics _peeringServiceLocationsClientDiagnostics;
        private PeeringServiceLocationsRestOperations _peeringServiceLocationsRestClient;
        private ClientDiagnostics _peeringServiceProvidersClientDiagnostics;
        private PeeringServiceProvidersRestOperations _peeringServiceProvidersRestClient;
        private ClientDiagnostics _peeringServiceClientDiagnostics;
        private PeeringServicesRestOperations _peeringServiceRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics CdnPeeringPrefixesClientDiagnostics => _cdnPeeringPrefixesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private CdnPeeringPrefixesRestOperations CdnPeeringPrefixesRestClient => _cdnPeeringPrefixesRestClient ??= new CdnPeeringPrefixesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics DefaultClientDiagnostics => _defaultClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PeeringManagementRestOperations DefaultRestClient => _defaultRestClient ??= new PeeringManagementRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics LegacyPeeringsClientDiagnostics => _legacyPeeringsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private LegacyPeeringsRestOperations LegacyPeeringsRestClient => _legacyPeeringsRestClient ??= new LegacyPeeringsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics LookingGlassClientDiagnostics => _lookingGlassClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private LookingGlassRestOperations LookingGlassRestClient => _lookingGlassRestClient ??= new LookingGlassRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PeeringLocationsClientDiagnostics => _peeringLocationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PeeringLocationsRestOperations PeeringLocationsRestClient => _peeringLocationsRestClient ??= new PeeringLocationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PeeringClientDiagnostics => _peeringClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", PeeringResource.ResourceType.Namespace, Diagnostics);
        private PeeringsRestOperations PeeringRestClient => _peeringRestClient ??= new PeeringsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(PeeringResource.ResourceType));
        private ClientDiagnostics PeeringServiceCountriesClientDiagnostics => _peeringServiceCountriesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PeeringServiceCountriesRestOperations PeeringServiceCountriesRestClient => _peeringServiceCountriesRestClient ??= new PeeringServiceCountriesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PeeringServiceLocationsClientDiagnostics => _peeringServiceLocationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PeeringServiceLocationsRestOperations PeeringServiceLocationsRestClient => _peeringServiceLocationsRestClient ??= new PeeringServiceLocationsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PeeringServiceProvidersClientDiagnostics => _peeringServiceProvidersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private PeeringServiceProvidersRestOperations PeeringServiceProvidersRestClient => _peeringServiceProvidersRestClient ??= new PeeringServiceProvidersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics PeeringServiceClientDiagnostics => _peeringServiceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Peering", PeeringServiceResource.ResourceType.Namespace, Diagnostics);
        private PeeringServicesRestOperations PeeringServiceRestClient => _peeringServiceRestClient ??= new PeeringServicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(PeeringServiceResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of PeerAsnResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of PeerAsnResources and their operations over a PeerAsnResource. </returns>
        public virtual PeerAsnCollection GetPeerAsns()
        {
            return GetCachedClient(Client => new PeerAsnCollection(Client, Id));
        }

        /// <summary>
        /// Lists all of the advertised prefixes for the specified peering location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/cdnPeeringPrefixes
        /// Operation Id: CdnPeeringPrefixes_List
        /// </summary>
        /// <param name="peeringLocation"> The peering location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CdnPeeringPrefix" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CdnPeeringPrefix> GetCdnPeeringPrefixesAsync(string peeringLocation, CancellationToken cancellationToken = default)
        {
            async Task<Page<CdnPeeringPrefix>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CdnPeeringPrefixesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCdnPeeringPrefixes");
                scope.Start();
                try
                {
                    var response = await CdnPeeringPrefixesRestClient.ListAsync(Id.SubscriptionId, peeringLocation, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CdnPeeringPrefix>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CdnPeeringPrefixesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCdnPeeringPrefixes");
                scope.Start();
                try
                {
                    var response = await CdnPeeringPrefixesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, peeringLocation, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the advertised prefixes for the specified peering location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/cdnPeeringPrefixes
        /// Operation Id: CdnPeeringPrefixes_List
        /// </summary>
        /// <param name="peeringLocation"> The peering location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CdnPeeringPrefix" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CdnPeeringPrefix> GetCdnPeeringPrefixes(string peeringLocation, CancellationToken cancellationToken = default)
        {
            Page<CdnPeeringPrefix> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = CdnPeeringPrefixesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCdnPeeringPrefixes");
                scope.Start();
                try
                {
                    var response = CdnPeeringPrefixesRestClient.List(Id.SubscriptionId, peeringLocation, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CdnPeeringPrefix> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = CdnPeeringPrefixesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCdnPeeringPrefixes");
                scope.Start();
                try
                {
                    var response = CdnPeeringPrefixesRestClient.ListNextPage(nextLink, Id.SubscriptionId, peeringLocation, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks if the peering service provider is present within 1000 miles of customer&apos;s location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/checkServiceProviderAvailability
        /// Operation Id: CheckServiceProviderAvailability
        /// </summary>
        /// <param name="content"> The CheckServiceProviderAvailabilityInput indicating customer location and service provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Enum0>> CheckServiceProviderAvailabilityAsync(CheckServiceProviderAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckServiceProviderAvailability");
            scope.Start();
            try
            {
                var response = await DefaultRestClient.CheckServiceProviderAvailabilityAsync(Id.SubscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks if the peering service provider is present within 1000 miles of customer&apos;s location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/checkServiceProviderAvailability
        /// Operation Id: CheckServiceProviderAvailability
        /// </summary>
        /// <param name="content"> The CheckServiceProviderAvailabilityInput indicating customer location and service provider. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Enum0> CheckServiceProviderAvailability(CheckServiceProviderAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = DefaultClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckServiceProviderAvailability");
            scope.Start();
            try
            {
                var response = DefaultRestClient.CheckServiceProviderAvailability(Id.SubscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all of the legacy peerings under the given subscription matching the specified kind and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings
        /// Operation Id: LegacyPeerings_List
        /// </summary>
        /// <param name="peeringLocation"> The location of the peering. </param>
        /// <param name="kind"> The kind of the peering. </param>
        /// <param name="asn"> The ASN number associated with a legacy peering. </param>
        /// <param name="directPeeringType"> The direct peering type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PeeringResource> GetPeeringsByLegacyPeeringAsync(string peeringLocation, LegacyPeeringsKind kind, int? asn = null, DirectPeeringType? directPeeringType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PeeringResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LegacyPeeringsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringsByLegacyPeering");
                scope.Start();
                try
                {
                    var response = await LegacyPeeringsRestClient.ListAsync(Id.SubscriptionId, peeringLocation, kind, asn, directPeeringType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PeeringResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LegacyPeeringsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringsByLegacyPeering");
                scope.Start();
                try
                {
                    var response = await LegacyPeeringsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, peeringLocation, kind, asn, directPeeringType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the legacy peerings under the given subscription matching the specified kind and location.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/legacyPeerings
        /// Operation Id: LegacyPeerings_List
        /// </summary>
        /// <param name="peeringLocation"> The location of the peering. </param>
        /// <param name="kind"> The kind of the peering. </param>
        /// <param name="asn"> The ASN number associated with a legacy peering. </param>
        /// <param name="directPeeringType"> The direct peering type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PeeringResource> GetPeeringsByLegacyPeering(string peeringLocation, LegacyPeeringsKind kind, int? asn = null, DirectPeeringType? directPeeringType = null, CancellationToken cancellationToken = default)
        {
            Page<PeeringResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LegacyPeeringsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringsByLegacyPeering");
                scope.Start();
                try
                {
                    var response = LegacyPeeringsRestClient.List(Id.SubscriptionId, peeringLocation, kind, asn, directPeeringType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PeeringResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LegacyPeeringsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringsByLegacyPeering");
                scope.Start();
                try
                {
                    var response = LegacyPeeringsRestClient.ListNextPage(nextLink, Id.SubscriptionId, peeringLocation, kind, asn, directPeeringType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Run looking glass functionality
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/lookingGlass
        /// Operation Id: LookingGlass_Invoke
        /// </summary>
        /// <param name="command"> The command to be executed: ping, traceroute, bgpRoute. </param>
        /// <param name="sourceType"> The type of the source: Edge site or Azure Region. </param>
        /// <param name="sourceLocation"> The location of the source. </param>
        /// <param name="destinationIP"> The IP address of the destination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LookingGlassOutput>> InvokeLookingGlasAsync(LookingGlassCommand command, LookingGlassSourceType sourceType, string sourceLocation, string destinationIP, CancellationToken cancellationToken = default)
        {
            using var scope = LookingGlassClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.InvokeLookingGlas");
            scope.Start();
            try
            {
                var response = await LookingGlassRestClient.InvokeAsync(Id.SubscriptionId, command, sourceType, sourceLocation, destinationIP, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Run looking glass functionality
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/lookingGlass
        /// Operation Id: LookingGlass_Invoke
        /// </summary>
        /// <param name="command"> The command to be executed: ping, traceroute, bgpRoute. </param>
        /// <param name="sourceType"> The type of the source: Edge site or Azure Region. </param>
        /// <param name="sourceLocation"> The location of the source. </param>
        /// <param name="destinationIP"> The IP address of the destination. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LookingGlassOutput> InvokeLookingGlas(LookingGlassCommand command, LookingGlassSourceType sourceType, string sourceLocation, string destinationIP, CancellationToken cancellationToken = default)
        {
            using var scope = LookingGlassClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.InvokeLookingGlas");
            scope.Start();
            try
            {
                var response = LookingGlassRestClient.Invoke(Id.SubscriptionId, command, sourceType, sourceLocation, destinationIP, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all of the available peering locations for the specified kind of peering.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringLocations
        /// Operation Id: PeeringLocations_List
        /// </summary>
        /// <param name="kind"> The kind of the peering. </param>
        /// <param name="directPeeringType"> The type of direct peering. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringLocation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PeeringLocation> GetPeeringLocationsAsync(PeeringLocationsKind kind, PeeringLocationsDirectPeeringType? directPeeringType = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PeeringLocation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringLocationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringLocations");
                scope.Start();
                try
                {
                    var response = await PeeringLocationsRestClient.ListAsync(Id.SubscriptionId, kind, directPeeringType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PeeringLocation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringLocationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringLocations");
                scope.Start();
                try
                {
                    var response = await PeeringLocationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, kind, directPeeringType, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the available peering locations for the specified kind of peering.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringLocations
        /// Operation Id: PeeringLocations_List
        /// </summary>
        /// <param name="kind"> The kind of the peering. </param>
        /// <param name="directPeeringType"> The type of direct peering. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringLocation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PeeringLocation> GetPeeringLocations(PeeringLocationsKind kind, PeeringLocationsDirectPeeringType? directPeeringType = null, CancellationToken cancellationToken = default)
        {
            Page<PeeringLocation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringLocationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringLocations");
                scope.Start();
                try
                {
                    var response = PeeringLocationsRestClient.List(Id.SubscriptionId, kind, directPeeringType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PeeringLocation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringLocationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringLocations");
                scope.Start();
                try
                {
                    var response = PeeringLocationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, kind, directPeeringType, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the peerings under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerings
        /// Operation Id: Peerings_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PeeringResource> GetPeeringsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PeeringResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeerings");
                scope.Start();
                try
                {
                    var response = await PeeringRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PeeringResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeerings");
                scope.Start();
                try
                {
                    var response = await PeeringRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the peerings under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peerings
        /// Operation Id: Peerings_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PeeringResource> GetPeerings(CancellationToken cancellationToken = default)
        {
            Page<PeeringResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeerings");
                scope.Start();
                try
                {
                    var response = PeeringRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PeeringResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeerings");
                scope.Start();
                try
                {
                    var response = PeeringRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the available countries for peering service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceCountries
        /// Operation Id: PeeringServiceCountries_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringServiceCountry" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PeeringServiceCountry> GetPeeringServiceCountriesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PeeringServiceCountry>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringServiceCountriesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceCountries");
                scope.Start();
                try
                {
                    var response = await PeeringServiceCountriesRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PeeringServiceCountry>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringServiceCountriesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceCountries");
                scope.Start();
                try
                {
                    var response = await PeeringServiceCountriesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the available countries for peering service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceCountries
        /// Operation Id: PeeringServiceCountries_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringServiceCountry" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PeeringServiceCountry> GetPeeringServiceCountries(CancellationToken cancellationToken = default)
        {
            Page<PeeringServiceCountry> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringServiceCountriesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceCountries");
                scope.Start();
                try
                {
                    var response = PeeringServiceCountriesRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PeeringServiceCountry> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringServiceCountriesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceCountries");
                scope.Start();
                try
                {
                    var response = PeeringServiceCountriesRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the available locations for peering service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceLocations
        /// Operation Id: PeeringServiceLocations_List
        /// </summary>
        /// <param name="country"> The country of interest, in which the locations are to be present. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringServiceLocation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PeeringServiceLocation> GetPeeringServiceLocationsAsync(string country = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<PeeringServiceLocation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringServiceLocationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceLocations");
                scope.Start();
                try
                {
                    var response = await PeeringServiceLocationsRestClient.ListAsync(Id.SubscriptionId, country, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PeeringServiceLocation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringServiceLocationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceLocations");
                scope.Start();
                try
                {
                    var response = await PeeringServiceLocationsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, country, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the available locations for peering service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceLocations
        /// Operation Id: PeeringServiceLocations_List
        /// </summary>
        /// <param name="country"> The country of interest, in which the locations are to be present. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringServiceLocation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PeeringServiceLocation> GetPeeringServiceLocations(string country = null, CancellationToken cancellationToken = default)
        {
            Page<PeeringServiceLocation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringServiceLocationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceLocations");
                scope.Start();
                try
                {
                    var response = PeeringServiceLocationsRestClient.List(Id.SubscriptionId, country, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PeeringServiceLocation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringServiceLocationsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceLocations");
                scope.Start();
                try
                {
                    var response = PeeringServiceLocationsRestClient.ListNextPage(nextLink, Id.SubscriptionId, country, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the available peering service locations for the specified kind of peering.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceProviders
        /// Operation Id: PeeringServiceProviders_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringServiceProvider" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PeeringServiceProvider> GetPeeringServiceProvidersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PeeringServiceProvider>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringServiceProvidersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceProviders");
                scope.Start();
                try
                {
                    var response = await PeeringServiceProvidersRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PeeringServiceProvider>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringServiceProvidersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceProviders");
                scope.Start();
                try
                {
                    var response = await PeeringServiceProvidersRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the available peering service locations for the specified kind of peering.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServiceProviders
        /// Operation Id: PeeringServiceProviders_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringServiceProvider" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PeeringServiceProvider> GetPeeringServiceProviders(CancellationToken cancellationToken = default)
        {
            Page<PeeringServiceProvider> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringServiceProvidersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceProviders");
                scope.Start();
                try
                {
                    var response = PeeringServiceProvidersRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PeeringServiceProvider> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringServiceProvidersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServiceProviders");
                scope.Start();
                try
                {
                    var response = PeeringServiceProvidersRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the peerings under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServices
        /// Operation Id: PeeringServices_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PeeringServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PeeringServiceResource> GetPeeringServicesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PeeringServiceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServices");
                scope.Start();
                try
                {
                    var response = await PeeringServiceRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringServiceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PeeringServiceResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServices");
                scope.Start();
                try
                {
                    var response = await PeeringServiceRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringServiceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all of the peerings under the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/peeringServices
        /// Operation Id: PeeringServices_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PeeringServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PeeringServiceResource> GetPeeringServices(CancellationToken cancellationToken = default)
        {
            Page<PeeringServiceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PeeringServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServices");
                scope.Start();
                try
                {
                    var response = PeeringServiceRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringServiceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PeeringServiceResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PeeringServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPeeringServices");
                scope.Start();
                try
                {
                    var response = PeeringServiceRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PeeringServiceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Initialize Peering Service for Connection Monitor functionality
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/initializeConnectionMonitor
        /// Operation Id: PeeringServices_InitializeConnectionMonitor
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> InitializeConnectionMonitorPeeringServiceAsync(CancellationToken cancellationToken = default)
        {
            using var scope = PeeringServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.InitializeConnectionMonitorPeeringService");
            scope.Start();
            try
            {
                var response = await PeeringServiceRestClient.InitializeConnectionMonitorAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Initialize Peering Service for Connection Monitor functionality
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Peering/initializeConnectionMonitor
        /// Operation Id: PeeringServices_InitializeConnectionMonitor
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response InitializeConnectionMonitorPeeringService(CancellationToken cancellationToken = default)
        {
            using var scope = PeeringServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.InitializeConnectionMonitorPeeringService");
            scope.Start();
            try
            {
                var response = PeeringServiceRestClient.InitializeConnectionMonitor(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
