// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Peering
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RpUnbilledPrefixesOperations.
    /// </summary>
    public static partial class RpUnbilledPrefixesOperationsExtensions
    {
            /// <summary>
            /// Lists all of the RP unbilled prefixes for the specified peering
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Azure resource group name.
            /// </param>
            /// <param name='peeringName'>
            /// The peering name.
            /// </param>
            /// <param name='consolidate'>
            /// Flag to enable consolidation prefixes
            /// </param>
            public static IPage<RpUnbilledPrefix> List(this IRpUnbilledPrefixesOperations operations, string resourceGroupName, string peeringName, bool? consolidate = default(bool?))
            {
                return operations.ListAsync(resourceGroupName, peeringName, consolidate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the RP unbilled prefixes for the specified peering
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The Azure resource group name.
            /// </param>
            /// <param name='peeringName'>
            /// The peering name.
            /// </param>
            /// <param name='consolidate'>
            /// Flag to enable consolidation prefixes
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RpUnbilledPrefix>> ListAsync(this IRpUnbilledPrefixesOperations operations, string resourceGroupName, string peeringName, bool? consolidate = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, peeringName, consolidate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the RP unbilled prefixes for the specified peering
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RpUnbilledPrefix> ListNext(this IRpUnbilledPrefixesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the RP unbilled prefixes for the specified peering
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RpUnbilledPrefix>> ListNextAsync(this IRpUnbilledPrefixesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
