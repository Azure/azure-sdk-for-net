// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Peering
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ConnectionMonitorTestsOperations.
    /// </summary>
    public static partial class ConnectionMonitorTestsOperationsExtensions
    {
            /// <summary>
            /// Gets an existing connection monitor test with the specified name under the
            /// given subscription, resource group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringServiceName'>
            /// The name of the peering service.
            /// </param>
            /// <param name='connectionMonitorTestName'>
            /// The name of the connection monitor test
            /// </param>
            public static ConnectionMonitorTest Get(this IConnectionMonitorTestsOperations operations, string resourceGroupName, string peeringServiceName, string connectionMonitorTestName)
            {
                return operations.GetAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing connection monitor test with the specified name under the
            /// given subscription, resource group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringServiceName'>
            /// The name of the peering service.
            /// </param>
            /// <param name='connectionMonitorTestName'>
            /// The name of the connection monitor test
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionMonitorTest> GetAsync(this IConnectionMonitorTestsOperations operations, string resourceGroupName, string peeringServiceName, string connectionMonitorTestName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a connection monitor test with the specified name under
            /// the given subscription, resource group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringServiceName'>
            /// The name of the peering service.
            /// </param>
            /// <param name='connectionMonitorTestName'>
            /// The name of the connection monitor test
            /// </param>
            /// <param name='connectionMonitorTest'>
            /// The properties needed to create a connection monitor test
            /// </param>
            public static ConnectionMonitorTest CreateOrUpdate(this IConnectionMonitorTestsOperations operations, string resourceGroupName, string peeringServiceName, string connectionMonitorTestName, ConnectionMonitorTest connectionMonitorTest)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName, connectionMonitorTest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a connection monitor test with the specified name under
            /// the given subscription, resource group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringServiceName'>
            /// The name of the peering service.
            /// </param>
            /// <param name='connectionMonitorTestName'>
            /// The name of the connection monitor test
            /// </param>
            /// <param name='connectionMonitorTest'>
            /// The properties needed to create a connection monitor test
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionMonitorTest> CreateOrUpdateAsync(this IConnectionMonitorTestsOperations operations, string resourceGroupName, string peeringServiceName, string connectionMonitorTestName, ConnectionMonitorTest connectionMonitorTest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName, connectionMonitorTest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing connection monitor test with the specified name under
            /// the given subscription, resource group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringServiceName'>
            /// The name of the peering service.
            /// </param>
            /// <param name='connectionMonitorTestName'>
            /// The name of the connection monitor test
            /// </param>
            public static void Delete(this IConnectionMonitorTestsOperations operations, string resourceGroupName, string peeringServiceName, string connectionMonitorTestName)
            {
                operations.DeleteAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing connection monitor test with the specified name under
            /// the given subscription, resource group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringServiceName'>
            /// The name of the peering service.
            /// </param>
            /// <param name='connectionMonitorTestName'>
            /// The name of the connection monitor test
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IConnectionMonitorTestsOperations operations, string resourceGroupName, string peeringServiceName, string connectionMonitorTestName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all connection monitor tests under the given subscription, resource
            /// group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringServiceName'>
            /// The name of the peering service.
            /// </param>
            public static IPage<ConnectionMonitorTest> ListByPeeringService(this IConnectionMonitorTestsOperations operations, string resourceGroupName, string peeringServiceName)
            {
                return operations.ListByPeeringServiceAsync(resourceGroupName, peeringServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all connection monitor tests under the given subscription, resource
            /// group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringServiceName'>
            /// The name of the peering service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectionMonitorTest>> ListByPeeringServiceAsync(this IConnectionMonitorTestsOperations operations, string resourceGroupName, string peeringServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPeeringServiceWithHttpMessagesAsync(resourceGroupName, peeringServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all connection monitor tests under the given subscription, resource
            /// group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ConnectionMonitorTest> ListByPeeringServiceNext(this IConnectionMonitorTestsOperations operations, string nextPageLink)
            {
                return operations.ListByPeeringServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all connection monitor tests under the given subscription, resource
            /// group and peering service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ConnectionMonitorTest>> ListByPeeringServiceNextAsync(this IConnectionMonitorTestsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPeeringServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
