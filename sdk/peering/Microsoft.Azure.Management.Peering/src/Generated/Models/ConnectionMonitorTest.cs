// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Peering.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Connection Monitor Test class.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ConnectionMonitorTest : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorTest class.
        /// </summary>
        public ConnectionMonitorTest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorTest class.
        /// </summary>
        /// <param name="name">The name of the resource.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="sourceAgent">The Connection Monitor test source
        /// agent</param>
        /// <param name="destination">The Connection Monitor test
        /// destination</param>
        /// <param name="destinationPort">The Connection Monitor test
        /// destination port</param>
        /// <param name="testFrequencyInSec">The Connection Monitor test
        /// frequency in seconds</param>
        /// <param name="isTestSuccessful">The flag that indicates if the
        /// Connection Monitor test is successful or not.</param>
        /// <param name="path">The path representing the Connection Monitor
        /// test.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// resource. Possible values include: 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'</param>
        public ConnectionMonitorTest(string name = default(string), string id = default(string), string type = default(string), string sourceAgent = default(string), string destination = default(string), int? destinationPort = default(int?), int? testFrequencyInSec = default(int?), bool? isTestSuccessful = default(bool?), IList<string> path = default(IList<string>), string provisioningState = default(string))
            : base(name, id, type)
        {
            SourceAgent = sourceAgent;
            Destination = destination;
            DestinationPort = destinationPort;
            TestFrequencyInSec = testFrequencyInSec;
            IsTestSuccessful = isTestSuccessful;
            Path = path;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Connection Monitor test source agent
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceAgent")]
        public string SourceAgent { get; set; }

        /// <summary>
        /// Gets or sets the Connection Monitor test destination
        /// </summary>
        [JsonProperty(PropertyName = "properties.destination")]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or sets the Connection Monitor test destination port
        /// </summary>
        [JsonProperty(PropertyName = "properties.destinationPort")]
        public int? DestinationPort { get; set; }

        /// <summary>
        /// Gets or sets the Connection Monitor test frequency in seconds
        /// </summary>
        [JsonProperty(PropertyName = "properties.testFrequencyInSec")]
        public int? TestFrequencyInSec { get; set; }

        /// <summary>
        /// Gets the flag that indicates if the Connection Monitor test is
        /// successful or not.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isTestSuccessful")]
        public bool? IsTestSuccessful { get; private set; }

        /// <summary>
        /// Gets the path representing the Connection Monitor test.
        /// </summary>
        [JsonProperty(PropertyName = "properties.path")]
        public IList<string> Path { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the resource. Possible values
        /// include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

    }
}
