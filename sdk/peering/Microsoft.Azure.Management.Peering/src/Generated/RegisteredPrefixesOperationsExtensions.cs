// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Peering
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RegisteredPrefixesOperations.
    /// </summary>
    public static partial class RegisteredPrefixesOperationsExtensions
    {
            /// <summary>
            /// Gets an existing registered prefix with the specified name under the given
            /// subscription, resource group and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringName'>
            /// The name of the peering.
            /// </param>
            /// <param name='registeredPrefixName'>
            /// The name of the registered prefix.
            /// </param>
            public static PeeringRegisteredPrefix Get(this IRegisteredPrefixesOperations operations, string resourceGroupName, string peeringName, string registeredPrefixName)
            {
                return operations.GetAsync(resourceGroupName, peeringName, registeredPrefixName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing registered prefix with the specified name under the given
            /// subscription, resource group and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringName'>
            /// The name of the peering.
            /// </param>
            /// <param name='registeredPrefixName'>
            /// The name of the registered prefix.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PeeringRegisteredPrefix> GetAsync(this IRegisteredPrefixesOperations operations, string resourceGroupName, string peeringName, string registeredPrefixName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, peeringName, registeredPrefixName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new registered prefix with the specified name under the given
            /// subscription, resource group and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringName'>
            /// The name of the peering.
            /// </param>
            /// <param name='registeredPrefixName'>
            /// The name of the registered prefix.
            /// </param>
            /// <param name='prefix'>
            /// The customer's prefix from which traffic originates.
            /// </param>
            public static PeeringRegisteredPrefix CreateOrUpdate(this IRegisteredPrefixesOperations operations, string resourceGroupName, string peeringName, string registeredPrefixName, string prefix = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, peeringName, registeredPrefixName, prefix).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new registered prefix with the specified name under the given
            /// subscription, resource group and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringName'>
            /// The name of the peering.
            /// </param>
            /// <param name='registeredPrefixName'>
            /// The name of the registered prefix.
            /// </param>
            /// <param name='prefix'>
            /// The customer's prefix from which traffic originates.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PeeringRegisteredPrefix> CreateOrUpdateAsync(this IRegisteredPrefixesOperations operations, string resourceGroupName, string peeringName, string registeredPrefixName, string prefix = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, peeringName, registeredPrefixName, prefix, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing registered prefix with the specified name under the
            /// given subscription, resource group and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringName'>
            /// The name of the peering.
            /// </param>
            /// <param name='registeredPrefixName'>
            /// The name of the registered prefix.
            /// </param>
            public static void Delete(this IRegisteredPrefixesOperations operations, string resourceGroupName, string peeringName, string registeredPrefixName)
            {
                operations.DeleteAsync(resourceGroupName, peeringName, registeredPrefixName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing registered prefix with the specified name under the
            /// given subscription, resource group and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringName'>
            /// The name of the peering.
            /// </param>
            /// <param name='registeredPrefixName'>
            /// The name of the registered prefix.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRegisteredPrefixesOperations operations, string resourceGroupName, string peeringName, string registeredPrefixName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, peeringName, registeredPrefixName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all registered prefixes under the given subscription, resource group
            /// and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringName'>
            /// The name of the peering.
            /// </param>
            public static IPage<PeeringRegisteredPrefix> ListByPeering(this IRegisteredPrefixesOperations operations, string resourceGroupName, string peeringName)
            {
                return operations.ListByPeeringAsync(resourceGroupName, peeringName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all registered prefixes under the given subscription, resource group
            /// and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='peeringName'>
            /// The name of the peering.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PeeringRegisteredPrefix>> ListByPeeringAsync(this IRegisteredPrefixesOperations operations, string resourceGroupName, string peeringName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPeeringWithHttpMessagesAsync(resourceGroupName, peeringName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all registered prefixes under the given subscription, resource group
            /// and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PeeringRegisteredPrefix> ListByPeeringNext(this IRegisteredPrefixesOperations operations, string nextPageLink)
            {
                return operations.ListByPeeringNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all registered prefixes under the given subscription, resource group
            /// and peering.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PeeringRegisteredPrefix>> ListByPeeringNextAsync(this IRegisteredPrefixesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByPeeringNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
