// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StandbyPool.Models
{
    /// <summary> The state of the pooled virtual machines. </summary>
    public readonly partial struct PoolVirtualMachineState : IEquatable<PoolVirtualMachineState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PoolVirtualMachineState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PoolVirtualMachineState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RunningValue = "Running";
        private const string CreatingValue = "Creating";
        private const string StartingValue = "Starting";
        private const string DeletingValue = "Deleting";
        private const string DeallocatedValue = "Deallocated";
        private const string DeallocatingValue = "Deallocating";
        private const string HibernatedValue = "Hibernated";
        private const string HibernatingValue = "Hibernating";

        /// <summary> The virtual machine is up and running. </summary>
        public static PoolVirtualMachineState Running { get; } = new PoolVirtualMachineState(RunningValue);
        /// <summary> The virtual machine is creating. </summary>
        public static PoolVirtualMachineState Creating { get; } = new PoolVirtualMachineState(CreatingValue);
        /// <summary> The virtual machine is starting. </summary>
        public static PoolVirtualMachineState Starting { get; } = new PoolVirtualMachineState(StartingValue);
        /// <summary> The virtual machine is deleting. </summary>
        public static PoolVirtualMachineState Deleting { get; } = new PoolVirtualMachineState(DeletingValue);
        /// <summary> The virtual machine has released the lease on the underlying hardware and is powered off. </summary>
        public static PoolVirtualMachineState Deallocated { get; } = new PoolVirtualMachineState(DeallocatedValue);
        /// <summary> The virtual machine is releasing the lease on the underlying hardware and is powered off. </summary>
        public static PoolVirtualMachineState Deallocating { get; } = new PoolVirtualMachineState(DeallocatingValue);
        /// <summary> The virtual machine has released the lease on the underlying hardware and is powered off. Memory contents of the VM are stored in the OS disk. When started again, applications and processes that were previously running in your VM resume from the state prior to hibernation. </summary>
        public static PoolVirtualMachineState Hibernated { get; } = new PoolVirtualMachineState(HibernatedValue);
        /// <summary> The virtual machine is hibernating. </summary>
        public static PoolVirtualMachineState Hibernating { get; } = new PoolVirtualMachineState(HibernatingValue);
        /// <summary> Determines if two <see cref="PoolVirtualMachineState"/> values are the same. </summary>
        public static bool operator ==(PoolVirtualMachineState left, PoolVirtualMachineState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PoolVirtualMachineState"/> values are not the same. </summary>
        public static bool operator !=(PoolVirtualMachineState left, PoolVirtualMachineState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="PoolVirtualMachineState"/>. </summary>
        public static implicit operator PoolVirtualMachineState(string value) => new PoolVirtualMachineState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PoolVirtualMachineState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PoolVirtualMachineState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
