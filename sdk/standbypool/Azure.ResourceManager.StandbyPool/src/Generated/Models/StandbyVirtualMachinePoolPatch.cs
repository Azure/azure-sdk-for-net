// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.StandbyPool.Models
{
    /// <summary> The type used for update operations of the StandbyVirtualMachinePoolResource. </summary>
    public partial class StandbyVirtualMachinePoolPatch
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="StandbyVirtualMachinePoolPatch"/>. </summary>
        public StandbyVirtualMachinePoolPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="StandbyVirtualMachinePoolPatch"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="elasticityProfile"> Specifies the elasticity profile of the standby virtual machine pools. </param>
        /// <param name="virtualMachineState"> Specifies the desired state of virtual machines in the pool. </param>
        /// <param name="attachedVirtualMachineScaleSetId"> Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal StandbyVirtualMachinePoolPatch(IDictionary<string, string> tags, StandbyVirtualMachinePoolElasticityPatchProfile elasticityProfile, StandbyVirtualMachineState? virtualMachineState, ResourceIdentifier attachedVirtualMachineScaleSetId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Tags = tags;
            ElasticityProfile = elasticityProfile;
            VirtualMachineState = virtualMachineState;
            AttachedVirtualMachineScaleSetId = attachedVirtualMachineScaleSetId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary> Specifies the elasticity profile of the standby virtual machine pools. </summary>
        internal StandbyVirtualMachinePoolElasticityPatchProfile ElasticityProfile { get; set; }
        /// <summary> Specifies maximum number of virtual machines in the standby virtual machine pool. </summary>
        public long? ElasticityMaxReadyCapacity
        {
            get => ElasticityProfile is null ? default : ElasticityProfile.MaxReadyCapacity;
            set
            {
                if (ElasticityProfile is null)
                    ElasticityProfile = new StandbyVirtualMachinePoolElasticityPatchProfile();
                ElasticityProfile.MaxReadyCapacity = value;
            }
        }

        /// <summary> Specifies the desired state of virtual machines in the pool. </summary>
        public StandbyVirtualMachineState? VirtualMachineState { get; set; }
        /// <summary> Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to. </summary>
        public ResourceIdentifier AttachedVirtualMachineScaleSetId { get; set; }
    }
}
