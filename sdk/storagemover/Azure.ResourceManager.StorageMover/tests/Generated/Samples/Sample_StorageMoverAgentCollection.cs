// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.StorageMover.Samples
{
    public partial class Sample_StorageMoverAgentCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AgentsCreateOrUpdateMaximumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_CreateOrUpdate_MaximumSet.json
            // this example is just showing the usage of "Agent_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            StorageMoverAgentData data = new StorageMoverAgentData(null, null);
            ArmOperation<StorageMoverAgentResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, agentName, data);
            StorageMoverAgentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StorageMoverAgentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AgentsCreateOrUpdateMinimumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_CreateOrUpdate_MinimumSet.json
            // this example is just showing the usage of "Agent_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            StorageMoverAgentData data = new StorageMoverAgentData(null, null);
            ArmOperation<StorageMoverAgentResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, agentName, data);
            StorageMoverAgentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StorageMoverAgentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_AgentsCreateOrUpdateWithOvernightUploadLimitSchedule()
        {
            // Generated from example definition: 2024-07-01/Agents_CreateOrUpdate_UploadLimitSchedule_Overnight.json
            // this example is just showing the usage of "Agent_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            StorageMoverAgentData data = new StorageMoverAgentData(null, null);
            ArmOperation<StorageMoverAgentResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, agentName, data);
            StorageMoverAgentResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StorageMoverAgentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AgentsGetMaximumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_Get_MaximumSet.json
            // this example is just showing the usage of "Agent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            StorageMoverAgentResource result = await collection.GetAsync(agentName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StorageMoverAgentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_AgentsGetMinimumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_Get_MinimumSet.json
            // this example is just showing the usage of "Agent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            StorageMoverAgentResource result = await collection.GetAsync(agentName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StorageMoverAgentData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AgentsListMaximumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_List_MaximumSet.json
            // this example is just showing the usage of "Agent_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation and iterate over the result
            await foreach (StorageMoverAgentResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                StorageMoverAgentData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_AgentsListMinimumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_List_MinimumSet.json
            // this example is just showing the usage of "Agent_List" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation and iterate over the result
            await foreach (StorageMoverAgentResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                StorageMoverAgentData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AgentsGetMaximumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_Get_MaximumSet.json
            // this example is just showing the usage of "Agent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            bool result = await collection.ExistsAsync(agentName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_AgentsGetMinimumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_Get_MinimumSet.json
            // this example is just showing the usage of "Agent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            bool result = await collection.ExistsAsync(agentName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AgentsGetMaximumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_Get_MaximumSet.json
            // this example is just showing the usage of "Agent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            NullableResponse<StorageMoverAgentResource> response = await collection.GetIfExistsAsync(agentName);
            StorageMoverAgentResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                StorageMoverAgentData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_AgentsGetMinimumSet()
        {
            // Generated from example definition: 2024-07-01/Agents_Get_MinimumSet.json
            // this example is just showing the usage of "Agent_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageMoverResource created on azure
            // for more information of creating StorageMoverResource, please refer to the document of StorageMoverResource
            string subscriptionId = "60bcfc77-6589-4da2-b7fd-f9ec9322cf95";
            string resourceGroupName = "examples-rg";
            string storageMoverName = "examples-storageMoverName";
            ResourceIdentifier storageMoverResourceId = StorageMoverResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageMoverName);
            StorageMoverResource storageMover = client.GetStorageMoverResource(storageMoverResourceId);

            // get the collection of this StorageMoverAgentResource
            StorageMoverAgentCollection collection = storageMover.GetStorageMoverAgents();

            // invoke the operation
            string agentName = "examples-agentName";
            NullableResponse<StorageMoverAgentResource> response = await collection.GetIfExistsAsync(agentName);
            StorageMoverAgentResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                StorageMoverAgentData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
