// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using System.Globalization;

namespace Azure.ResourceManager.StorageMover.Models
{
    /// <summary> The minute element of the time. Allowed values are 0 and 30. If not specified, its value defaults to 0. </summary>
    public readonly partial struct Minute : IEquatable<Minute>
    {
        private readonly int _value;

        /// <summary> Initializes a new instance of <see cref="Minute"/>. </summary>
        public Minute(int value)
        {
            _value = value;
        }

        private const int ZeroValue = 0;
        private const int ThirtyValue = 30;

        /// <summary> 0. </summary>
        public static Minute Zero { get; } = new Minute(ZeroValue);
        /// <summary> 30. </summary>
        public static Minute Thirty { get; } = new Minute(ThirtyValue);

        internal int ToSerialInt32() => _value;

        /// <summary> Determines if two <see cref="Minute"/> values are the same. </summary>
        public static bool operator ==(Minute left, Minute right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Minute"/> values are not the same. </summary>
        public static bool operator !=(Minute left, Minute right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Minute"/>. </summary>
        public static implicit operator Minute(int value) => new Minute(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Minute other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Minute other) => Equals(_value, other._value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();
        /// <inheritdoc />
        public override string ToString() => _value.ToString(CultureInfo.InvariantCulture);
    }
}
