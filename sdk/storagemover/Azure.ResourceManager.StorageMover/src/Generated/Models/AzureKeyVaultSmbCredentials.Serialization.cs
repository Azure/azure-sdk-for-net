// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageMover.Models
{
    public partial class AzureKeyVaultSmbCredentials : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(UsernameUri))
            {
                writer.WritePropertyName("usernameUri"u8);
                writer.WriteStringValue(UsernameUri);
            }
            if (Optional.IsDefined(PasswordUri))
            {
                writer.WritePropertyName("passwordUri"u8);
                writer.WriteStringValue(PasswordUri);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(CredentialType.ToString());
            writer.WriteEndObject();
        }

        internal static AzureKeyVaultSmbCredentials DeserializeAzureKeyVaultSmbCredentials(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> usernameUri = default;
            Optional<string> passwordUri = default;
            CredentialType type = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("usernameUri"u8))
                {
                    usernameUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("passwordUri"u8))
                {
                    passwordUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new CredentialType(property.Value.GetString());
                    continue;
                }
            }
            return new AzureKeyVaultSmbCredentials(type, usernameUri.Value, passwordUri.Value);
        }
    }
}
