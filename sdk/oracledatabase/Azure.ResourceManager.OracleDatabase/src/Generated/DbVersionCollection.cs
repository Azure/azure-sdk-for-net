// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.OracleDatabase.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.OracleDatabase
{
    /// <summary>
    /// A class representing a collection of <see cref="DbVersionResource"/> and their operations.
    /// Each <see cref="DbVersionResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="DbVersionCollection"/> instance call the GetDbVersions method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class DbVersionCollection : ArmCollection, IEnumerable<DbVersionResource>, IAsyncEnumerable<DbVersionResource>
    {
        private readonly ClientDiagnostics _dbVersionClientDiagnostics;
        private readonly DbVersionsRestOperations _dbVersionRestClient;
        private readonly AzureLocation _location;

        /// <summary> Initializes a new instance of the <see cref="DbVersionCollection"/> class for mocking. </summary>
        protected DbVersionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DbVersionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="location"> The name of the Azure region. </param>
        internal DbVersionCollection(ArmClient client, ResourceIdentifier id, AzureLocation location) : base(client, id)
        {
            _location = location;
            _dbVersionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.OracleDatabase", DbVersionResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DbVersionResource.ResourceType, out string dbVersionApiVersion);
            _dbVersionRestClient = new DbVersionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, dbVersionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a DbVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DbVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual async Task<Response<DbVersionResource>> GetAsync(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _dbVersionClientDiagnostics.CreateScope("DbVersionCollection.Get");
            scope.Start();
            try
            {
                var response = await _dbVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DbVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a DbVersion
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DbVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual Response<DbVersionResource> Get(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _dbVersionClientDiagnostics.CreateScope("DbVersionCollection.Get");
            scope.Start();
            try
            {
                var response = _dbVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DbVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List DbVersion resources by SubscriptionLocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_ListByLocation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DbVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DbVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DbVersionResource> GetAllAsync(DbVersionCollectionGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new DbVersionCollectionGetAllOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _dbVersionRestClient.CreateListByLocationRequest(Id.SubscriptionId, new AzureLocation(_location), options.DbSystemShape, options.DbSystemId, options.StorageManagement, options.IsUpgradeSupported, options.IsDatabaseSoftwareImageSupported, options.ShapeFamily);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _dbVersionRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location), options.DbSystemShape, options.DbSystemId, options.StorageManagement, options.IsUpgradeSupported, options.IsDatabaseSoftwareImageSupported, options.ShapeFamily);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DbVersionResource(Client, DbVersionData.DeserializeDbVersionData(e)), _dbVersionClientDiagnostics, Pipeline, "DbVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List DbVersion resources by SubscriptionLocationResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_ListByLocation</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DbVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DbVersionResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DbVersionResource> GetAll(DbVersionCollectionGetAllOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new DbVersionCollectionGetAllOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _dbVersionRestClient.CreateListByLocationRequest(Id.SubscriptionId, new AzureLocation(_location), options.DbSystemShape, options.DbSystemId, options.StorageManagement, options.IsUpgradeSupported, options.IsDatabaseSoftwareImageSupported, options.ShapeFamily);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _dbVersionRestClient.CreateListByLocationNextPageRequest(nextLink, Id.SubscriptionId, new AzureLocation(_location), options.DbSystemShape, options.DbSystemId, options.StorageManagement, options.IsUpgradeSupported, options.IsDatabaseSoftwareImageSupported, options.ShapeFamily);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DbVersionResource(Client, DbVersionData.DeserializeDbVersionData(e)), _dbVersionClientDiagnostics, Pipeline, "DbVersionCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DbVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _dbVersionClientDiagnostics.CreateScope("DbVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = await _dbVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DbVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual Response<bool> Exists(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _dbVersionClientDiagnostics.CreateScope("DbVersionCollection.Exists");
            scope.Start();
            try
            {
                var response = _dbVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DbVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual async Task<NullableResponse<DbVersionResource>> GetIfExistsAsync(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _dbVersionClientDiagnostics.CreateScope("DbVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _dbVersionRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<DbVersionResource>(response.GetRawResponse());
                return Response.FromValue(new DbVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/dbSystemDbVersions/{dbversionsname}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>DbVersion_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-09-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DbVersionResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="dbversionsname"> DbVersion name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dbversionsname"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dbversionsname"/> is null. </exception>
        public virtual NullableResponse<DbVersionResource> GetIfExists(string dbversionsname, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(dbversionsname, nameof(dbversionsname));

            using var scope = _dbVersionClientDiagnostics.CreateScope("DbVersionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _dbVersionRestClient.Get(Id.SubscriptionId, new AzureLocation(_location), dbversionsname, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<DbVersionResource>(response.GetRawResponse());
                return Response.FromValue(new DbVersionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DbVersionResource> IEnumerable<DbVersionResource>.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll(options: null).GetEnumerator();
        }

        IAsyncEnumerator<DbVersionResource> IAsyncEnumerable<DbVersionResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(options: null, cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
