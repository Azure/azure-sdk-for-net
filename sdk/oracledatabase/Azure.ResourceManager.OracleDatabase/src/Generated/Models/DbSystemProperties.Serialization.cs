// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    public partial class DbSystemProperties : IUtf8JsonSerializable, IJsonModel<DbSystemProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DbSystemProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DbSystemProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected override void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbSystemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbSystemProperties)} does not support writing '{format}' format.");
            }

            base.JsonModelWriteCore(writer, options);
            writer.WritePropertyName("databaseEdition"u8);
            writer.WriteStringValue(DatabaseEdition.ToString());
            if (Optional.IsDefined(AdminPassword))
            {
                writer.WritePropertyName("adminPassword"u8);
                writer.WriteStringValue(AdminPassword);
            }
            writer.WritePropertyName("dbVersion"u8);
            writer.WriteStringValue(DbVersion);
            if (Optional.IsDefined(PdbName))
            {
                writer.WritePropertyName("pdbName"u8);
                writer.WriteStringValue(PdbName);
            }
        }

        DbSystemProperties IJsonModel<DbSystemProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbSystemProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DbSystemProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDbSystemProperties(document.RootElement, options);
        }

        internal static DbSystemProperties DeserializeDbSystemProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DbSystemDatabaseEditionType databaseEdition = default;
            string adminPassword = default;
            string dbVersion = default;
            string pdbName = default;
            DbSystemSourceType? source = default;
            OracleDatabaseProvisioningState? provisioningState = default;
            Uri ociUrl = default;
            ResourceIdentifier resourceAnchorId = default;
            ResourceIdentifier networkAnchorId = default;
            string clusterName = default;
            string displayName = default;
            int? initialDataStorageSizeInGb = default;
            int? dataStorageSizeInGbs = default;
            DbSystemOptions dbSystemOptions = default;
            DiskRedundancyType? diskRedundancy = default;
            string domain = default;
            string gridImageOcid = default;
            string hostname = default;
            string ocid = default;
            OracleLicenseModel? licenseModel = default;
            string lifecycleDetails = default;
            DbSystemLifecycleState? lifecycleState = default;
            int? listenerPort = default;
            int? memorySizeInGbs = default;
            int? nodeCount = default;
            string scanDnsName = default;
            IReadOnlyList<string> scanIPs = default;
            string shape = default;
            IList<string> sshPublicKeys = default;
            StorageVolumePerformanceMode? storageVolumePerformanceMode = default;
            string timeZone = default;
            string version = default;
            OracleDatabaseComputeModel? computeModel = default;
            int? computeCount = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("databaseEdition"u8))
                {
                    databaseEdition = new DbSystemDatabaseEditionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("adminPassword"u8))
                {
                    adminPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dbVersion"u8))
                {
                    dbVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pdbName"u8))
                {
                    pdbName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("source"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    source = new DbSystemSourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new OracleDatabaseProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ociUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ociUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceAnchorId"u8))
                {
                    resourceAnchorId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkAnchorId"u8))
                {
                    networkAnchorId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("clusterName"u8))
                {
                    clusterName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("initialDataStorageSizeInGb"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialDataStorageSizeInGb = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dataStorageSizeInGbs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataStorageSizeInGbs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dbSystemOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dbSystemOptions = DbSystemOptions.DeserializeDbSystemOptions(property.Value, options);
                    continue;
                }
                if (property.NameEquals("diskRedundancy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskRedundancy = new DiskRedundancyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("domain"u8))
                {
                    domain = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("gridImageOcid"u8))
                {
                    gridImageOcid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostname"u8))
                {
                    hostname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ocid"u8))
                {
                    ocid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("licenseModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    licenseModel = new OracleLicenseModel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lifecycleDetails"u8))
                {
                    lifecycleDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lifecycleState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lifecycleState = new DbSystemLifecycleState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("listenerPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    listenerPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("memorySizeInGbs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memorySizeInGbs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("nodeCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodeCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("scanDnsName"u8))
                {
                    scanDnsName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scanIps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    scanIPs = array;
                    continue;
                }
                if (property.NameEquals("shape"u8))
                {
                    shape = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sshPublicKeys"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sshPublicKeys = array;
                    continue;
                }
                if (property.NameEquals("storageVolumePerformanceMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageVolumePerformanceMode = new StorageVolumePerformanceMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("timeZone"u8))
                {
                    timeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("computeModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeModel = new OracleDatabaseComputeModel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("computeCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    computeCount = property.Value.GetInt32();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DbSystemProperties(
                source,
                provisioningState,
                ociUrl,
                resourceAnchorId,
                networkAnchorId,
                clusterName,
                displayName,
                initialDataStorageSizeInGb,
                dataStorageSizeInGbs,
                dbSystemOptions,
                diskRedundancy,
                domain,
                gridImageOcid,
                hostname,
                ocid,
                licenseModel,
                lifecycleDetails,
                lifecycleState,
                listenerPort,
                memorySizeInGbs,
                nodeCount,
                scanDnsName,
                scanIPs ?? new ChangeTrackingList<string>(),
                shape,
                sshPublicKeys,
                storageVolumePerformanceMode,
                timeZone,
                version,
                computeModel,
                computeCount,
                serializedAdditionalRawData,
                databaseEdition,
                adminPassword,
                dbVersion,
                pdbName);
        }

        BinaryData IPersistableModel<DbSystemProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbSystemProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerOracleDatabaseContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DbSystemProperties)} does not support writing '{options.Format}' format.");
            }
        }

        DbSystemProperties IPersistableModel<DbSystemProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DbSystemProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDbSystemProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DbSystemProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DbSystemProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
