// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.OracleDatabase.Models
{
    /// <summary> Storage Management type enum. </summary>
    public readonly partial struct StorageManagementType : IEquatable<StorageManagementType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StorageManagementType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StorageManagementType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LVMValue = "LVM";

        /// <summary> Logical Volume management. </summary>
        public static StorageManagementType LVM { get; } = new StorageManagementType(LVMValue);
        /// <summary> Determines if two <see cref="StorageManagementType"/> values are the same. </summary>
        public static bool operator ==(StorageManagementType left, StorageManagementType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StorageManagementType"/> values are not the same. </summary>
        public static bool operator !=(StorageManagementType left, StorageManagementType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="StorageManagementType"/>. </summary>
        public static implicit operator StorageManagementType(string value) => new StorageManagementType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StorageManagementType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StorageManagementType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
