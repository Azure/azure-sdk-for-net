// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.IoTCentral.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.IoTCentral
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.IoTCentral. </summary>
    public static partial class IoTCentralExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Get all IoT Central Applications in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/iotApps
        /// Operation Id: Apps_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IoTCentralAppResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IoTCentralAppResource> GetIoTCentralAppsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetIoTCentralAppsAsync(cancellationToken);
        }

        /// <summary>
        /// Get all IoT Central Applications in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/iotApps
        /// Operation Id: Apps_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IoTCentralAppResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IoTCentralAppResource> GetIoTCentralApps(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetIoTCentralApps(cancellationToken);
        }

        /// <summary>
        /// Check if an IoT Central application name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkNameAvailability
        /// Operation Id: Apps_CheckNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the name of the IoT Central application to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static async Task<Response<IoTCentralAppNameAvailabilityResponse>> CheckIoTCentralAppNameAvailabilityAsync(this SubscriptionResource subscriptionResource, IoTCentralAppNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return await GetExtensionClient(subscriptionResource).CheckIoTCentralAppNameAvailabilityAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check if an IoT Central application name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkNameAvailability
        /// Operation Id: Apps_CheckNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the name of the IoT Central application to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static Response<IoTCentralAppNameAvailabilityResponse> CheckIoTCentralAppNameAvailability(this SubscriptionResource subscriptionResource, IoTCentralAppNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(subscriptionResource).CheckIoTCentralAppNameAvailability(content, cancellationToken);
        }

        /// <summary>
        /// Check if an IoT Central application subdomain is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkSubdomainAvailability
        /// Operation Id: Apps_CheckSubdomainAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the subdomain of the IoT Central application to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static async Task<Response<IoTCentralAppNameAvailabilityResponse>> CheckIoTCentralAppSubdomainAvailabilityAsync(this SubscriptionResource subscriptionResource, IoTCentralAppNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return await GetExtensionClient(subscriptionResource).CheckIoTCentralAppSubdomainAvailabilityAsync(content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check if an IoT Central application subdomain is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkSubdomainAvailability
        /// Operation Id: Apps_CheckSubdomainAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the subdomain of the IoT Central application to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static Response<IoTCentralAppNameAvailabilityResponse> CheckIoTCentralAppSubdomainAvailability(this SubscriptionResource subscriptionResource, IoTCentralAppNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(subscriptionResource).CheckIoTCentralAppSubdomainAvailability(content, cancellationToken);
        }

        /// <summary>
        /// Get all available application templates.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/appTemplates
        /// Operation Id: Apps_ListTemplates
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IoTCentralAppTemplate" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IoTCentralAppTemplate> GetTemplatesAppsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetTemplatesAppsAsync(cancellationToken);
        }

        /// <summary>
        /// Get all available application templates.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/appTemplates
        /// Operation Id: Apps_ListTemplates
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IoTCentralAppTemplate" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IoTCentralAppTemplate> GetTemplatesApps(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetTemplatesApps(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of IoTCentralAppResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of IoTCentralAppResources and their operations over a IoTCentralAppResource. </returns>
        public static IoTCentralAppCollection GetIoTCentralApps(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetIoTCentralApps();
        }

        /// <summary>
        /// Get the metadata of an IoT Central application.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTCentral/iotApps/{resourceName}
        /// Operation Id: Apps_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceName"> The ARM resource name of the IoT Central application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<IoTCentralAppResource>> GetIoTCentralAppAsync(this ResourceGroupResource resourceGroupResource, string resourceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetIoTCentralApps().GetAsync(resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the metadata of an IoT Central application.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTCentral/iotApps/{resourceName}
        /// Operation Id: Apps_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceName"> The ARM resource name of the IoT Central application. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<IoTCentralAppResource> GetIoTCentralApp(this ResourceGroupResource resourceGroupResource, string resourceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetIoTCentralApps().Get(resourceName, cancellationToken);
        }

        #region IoTCentralAppResource
        /// <summary>
        /// Gets an object representing an <see cref="IoTCentralAppResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IoTCentralAppResource.CreateResourceIdentifier" /> to create an <see cref="IoTCentralAppResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IoTCentralAppResource" /> object. </returns>
        public static IoTCentralAppResource GetIoTCentralAppResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IoTCentralAppResource.ValidateResourceId(id);
                return new IoTCentralAppResource(client, id);
            }
            );
        }
        #endregion

        #region IoTCentralPrivateEndpointConnectionResource
        /// <summary>
        /// Gets an object representing an <see cref="IoTCentralPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IoTCentralPrivateEndpointConnectionResource.CreateResourceIdentifier" /> to create an <see cref="IoTCentralPrivateEndpointConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IoTCentralPrivateEndpointConnectionResource" /> object. </returns>
        public static IoTCentralPrivateEndpointConnectionResource GetIoTCentralPrivateEndpointConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IoTCentralPrivateEndpointConnectionResource.ValidateResourceId(id);
                return new IoTCentralPrivateEndpointConnectionResource(client, id);
            }
            );
        }
        #endregion

        #region IoTCentralPrivateLinkResource
        /// <summary>
        /// Gets an object representing an <see cref="IoTCentralPrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IoTCentralPrivateLinkResource.CreateResourceIdentifier" /> to create an <see cref="IoTCentralPrivateLinkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="IoTCentralPrivateLinkResource" /> object. </returns>
        public static IoTCentralPrivateLinkResource GetIoTCentralPrivateLinkResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                IoTCentralPrivateLinkResource.ValidateResourceId(id);
                return new IoTCentralPrivateLinkResource(client, id);
            }
            );
        }
        #endregion
    }
}
