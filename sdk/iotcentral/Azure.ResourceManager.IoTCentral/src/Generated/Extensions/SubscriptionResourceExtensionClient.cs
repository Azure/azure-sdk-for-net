// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.IoTCentral.Models;

namespace Azure.ResourceManager.IoTCentral
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _ioTCentralAppAppsClientDiagnostics;
        private AppsRestOperations _ioTCentralAppAppsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics IoTCentralAppAppsClientDiagnostics => _ioTCentralAppAppsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.IoTCentral", IoTCentralAppResource.ResourceType.Namespace, Diagnostics);
        private AppsRestOperations IoTCentralAppAppsRestClient => _ioTCentralAppAppsRestClient ??= new AppsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(IoTCentralAppResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Get all IoT Central Applications in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/iotApps
        /// Operation Id: Apps_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IoTCentralAppResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IoTCentralAppResource> GetIoTCentralAppsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<IoTCentralAppResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIoTCentralApps");
                scope.Start();
                try
                {
                    var response = await IoTCentralAppAppsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IoTCentralAppResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IoTCentralAppResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIoTCentralApps");
                scope.Start();
                try
                {
                    var response = await IoTCentralAppAppsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IoTCentralAppResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all IoT Central Applications in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/iotApps
        /// Operation Id: Apps_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IoTCentralAppResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IoTCentralAppResource> GetIoTCentralApps(CancellationToken cancellationToken = default)
        {
            Page<IoTCentralAppResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIoTCentralApps");
                scope.Start();
                try
                {
                    var response = IoTCentralAppAppsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IoTCentralAppResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IoTCentralAppResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetIoTCentralApps");
                scope.Start();
                try
                {
                    var response = IoTCentralAppAppsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IoTCentralAppResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Check if an IoT Central application name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkNameAvailability
        /// Operation Id: Apps_CheckNameAvailability
        /// </summary>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the name of the IoT Central application to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IoTCentralAppNameAvailabilityResponse>> CheckIoTCentralAppNameAvailabilityAsync(IoTCentralAppNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckIoTCentralAppNameAvailability");
            scope.Start();
            try
            {
                var response = await IoTCentralAppAppsRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check if an IoT Central application name is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkNameAvailability
        /// Operation Id: Apps_CheckNameAvailability
        /// </summary>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the name of the IoT Central application to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IoTCentralAppNameAvailabilityResponse> CheckIoTCentralAppNameAvailability(IoTCentralAppNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckIoTCentralAppNameAvailability");
            scope.Start();
            try
            {
                var response = IoTCentralAppAppsRestClient.CheckNameAvailability(Id.SubscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check if an IoT Central application subdomain is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkSubdomainAvailability
        /// Operation Id: Apps_CheckSubdomainAvailability
        /// </summary>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the subdomain of the IoT Central application to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IoTCentralAppNameAvailabilityResponse>> CheckIoTCentralAppSubdomainAvailabilityAsync(IoTCentralAppNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckIoTCentralAppSubdomainAvailability");
            scope.Start();
            try
            {
                var response = await IoTCentralAppAppsRestClient.CheckSubdomainAvailabilityAsync(Id.SubscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check if an IoT Central application subdomain is available.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkSubdomainAvailability
        /// Operation Id: Apps_CheckSubdomainAvailability
        /// </summary>
        /// <param name="content"> Set the name parameter in the OperationInputs structure to the subdomain of the IoT Central application to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IoTCentralAppNameAvailabilityResponse> CheckIoTCentralAppSubdomainAvailability(IoTCentralAppNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckIoTCentralAppSubdomainAvailability");
            scope.Start();
            try
            {
                var response = IoTCentralAppAppsRestClient.CheckSubdomainAvailability(Id.SubscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get all available application templates.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/appTemplates
        /// Operation Id: Apps_ListTemplates
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IoTCentralAppTemplate" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IoTCentralAppTemplate> GetTemplatesAppsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<IoTCentralAppTemplate>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTemplatesApps");
                scope.Start();
                try
                {
                    var response = await IoTCentralAppAppsRestClient.ListTemplatesAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IoTCentralAppTemplate>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTemplatesApps");
                scope.Start();
                try
                {
                    var response = await IoTCentralAppAppsRestClient.ListTemplatesNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get all available application templates.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/appTemplates
        /// Operation Id: Apps_ListTemplates
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IoTCentralAppTemplate" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IoTCentralAppTemplate> GetTemplatesApps(CancellationToken cancellationToken = default)
        {
            Page<IoTCentralAppTemplate> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTemplatesApps");
                scope.Start();
                try
                {
                    var response = IoTCentralAppAppsRestClient.ListTemplates(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IoTCentralAppTemplate> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = IoTCentralAppAppsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetTemplatesApps");
                scope.Start();
                try
                {
                    var response = IoTCentralAppAppsRestClient.ListTemplatesNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
