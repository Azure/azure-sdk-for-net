// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.IoTCentral.Models
{
    /// <summary> The name of the SKU. </summary>
    public readonly partial struct IoTCentralAppSku : IEquatable<IoTCentralAppSku>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IoTCentralAppSku"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IoTCentralAppSku(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ST0Value = "ST0";
        private const string ST1Value = "ST1";
        private const string ST2Value = "ST2";

        /// <summary> ST0. </summary>
        public static IoTCentralAppSku ST0 { get; } = new IoTCentralAppSku(ST0Value);
        /// <summary> ST1. </summary>
        public static IoTCentralAppSku ST1 { get; } = new IoTCentralAppSku(ST1Value);
        /// <summary> ST2. </summary>
        public static IoTCentralAppSku ST2 { get; } = new IoTCentralAppSku(ST2Value);
        /// <summary> Determines if two <see cref="IoTCentralAppSku"/> values are the same. </summary>
        public static bool operator ==(IoTCentralAppSku left, IoTCentralAppSku right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IoTCentralAppSku"/> values are not the same. </summary>
        public static bool operator !=(IoTCentralAppSku left, IoTCentralAppSku right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IoTCentralAppSku"/>. </summary>
        public static implicit operator IoTCentralAppSku(string value) => new IoTCentralAppSku(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IoTCentralAppSku other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IoTCentralAppSku other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
