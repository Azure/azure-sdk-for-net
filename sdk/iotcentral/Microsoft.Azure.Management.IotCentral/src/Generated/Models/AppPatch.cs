// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.IotCentral.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The description of the IoT Central application.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class AppPatch
    {
        /// <summary>
        /// Initializes a new instance of the AppPatch class.
        /// </summary>
        public AppPatch()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppPatch class.
        /// </summary>
        /// <param name="tags">Instance tags</param>
        /// <param name="applicationId">The ID of the application.</param>
        /// <param name="displayName">The display name of the
        /// application.</param>
        /// <param name="subdomain">The subdomain of the application.</param>
        /// <param name="template">The ID of the application template, which is
        /// a blueprint that defines the characteristics and behaviors of an
        /// application. Optional; if not specified, defaults to a blank
        /// blueprint and allows the application to be defined from
        /// scratch.</param>
        public AppPatch(IDictionary<string, string> tags = default(IDictionary<string, string>), string applicationId = default(string), string displayName = default(string), string subdomain = default(string), string template = default(string))
        {
            Tags = tags;
            ApplicationId = applicationId;
            DisplayName = displayName;
            Subdomain = subdomain;
            Template = template;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets instance tags
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets the ID of the application.
        /// </summary>
        [JsonProperty(PropertyName = "properties.applicationId")]
        public string ApplicationId { get; private set; }

        /// <summary>
        /// Gets or sets the display name of the application.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the subdomain of the application.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subdomain")]
        public string Subdomain { get; set; }

        /// <summary>
        /// Gets or sets the ID of the application template, which is a
        /// blueprint that defines the characteristics and behaviors of an
        /// application. Optional; if not specified, defaults to a blank
        /// blueprint and allows the application to be defined from scratch.
        /// </summary>
        [JsonProperty(PropertyName = "properties.template")]
        public string Template { get; set; }

    }
}
