// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DeviceProvisioningServices.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The description of an X509 CA Certificate.
    /// </summary>
    public partial class CertificateProperties
    {
        /// <summary>
        /// Initializes a new instance of the CertificateProperties class.
        /// </summary>
        public CertificateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateProperties class.
        /// </summary>
        /// <param name="subject">The certificate's subject name.</param>
        /// <param name="expiry">The certificate's expiration date and
        /// time.</param>
        /// <param name="thumbprint">The certificate's thumbprint.</param>
        /// <param name="isVerified">Determines whether certificate has been
        /// verified.</param>
        /// <param name="certificate">base-64 representation of X509
        /// certificate .cer file or just .pem file content.</param>
        /// <param name="created">The certificate's creation date and
        /// time.</param>
        /// <param name="updated">The certificate's last update date and
        /// time.</param>
        public CertificateProperties(string subject = default(string), System.DateTime? expiry = default(System.DateTime?), string thumbprint = default(string), bool? isVerified = default(bool?), byte[] certificate = default(byte[]), System.DateTime? created = default(System.DateTime?), System.DateTime? updated = default(System.DateTime?))
        {
            Subject = subject;
            Expiry = expiry;
            Thumbprint = thumbprint;
            IsVerified = isVerified;
            Certificate = certificate;
            Created = created;
            Updated = updated;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the certificate's subject name.
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; private set; }

        /// <summary>
        /// Gets the certificate's expiration date and time.
        /// </summary>
        [JsonConverter(typeof(DateTimeRfc1123JsonConverter))]
        [JsonProperty(PropertyName = "expiry")]
        public System.DateTime? Expiry { get; private set; }

        /// <summary>
        /// Gets the certificate's thumbprint.
        /// </summary>
        [JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; private set; }

        /// <summary>
        /// Gets determines whether certificate has been verified.
        /// </summary>
        [JsonProperty(PropertyName = "isVerified")]
        public bool? IsVerified { get; private set; }

        /// <summary>
        /// Gets base-64 representation of X509 certificate .cer file or just
        /// .pem file content.
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public byte[] Certificate { get; private set; }

        /// <summary>
        /// Gets the certificate's creation date and time.
        /// </summary>
        [JsonConverter(typeof(DateTimeRfc1123JsonConverter))]
        [JsonProperty(PropertyName = "created")]
        public System.DateTime? Created { get; private set; }

        /// <summary>
        /// Gets the certificate's last update date and time.
        /// </summary>
        [JsonConverter(typeof(DateTimeRfc1123JsonConverter))]
        [JsonProperty(PropertyName = "updated")]
        public System.DateTime? Updated { get; private set; }

    }
}
