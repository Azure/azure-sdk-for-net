// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DeviceProvisioningServices.Models
{
    /// <summary> Current state of the provisioning service. </summary>
    public readonly partial struct State : IEquatable<State>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="State"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActivatingValue = "Activating";
        private const string ActiveValue = "Active";
        private const string DeletingValue = "Deleting";
        private const string DeletedValue = "Deleted";
        private const string ActivationFailedValue = "ActivationFailed";
        private const string DeletionFailedValue = "DeletionFailed";
        private const string TransitioningValue = "Transitioning";
        private const string SuspendingValue = "Suspending";
        private const string SuspendedValue = "Suspended";
        private const string ResumingValue = "Resuming";
        private const string FailingOverValue = "FailingOver";
        private const string FailoverFailedValue = "FailoverFailed";

        /// <summary> Activating. </summary>
        public static State Activating { get; } = new State(ActivatingValue);
        /// <summary> Active. </summary>
        public static State Active { get; } = new State(ActiveValue);
        /// <summary> Deleting. </summary>
        public static State Deleting { get; } = new State(DeletingValue);
        /// <summary> Deleted. </summary>
        public static State Deleted { get; } = new State(DeletedValue);
        /// <summary> ActivationFailed. </summary>
        public static State ActivationFailed { get; } = new State(ActivationFailedValue);
        /// <summary> DeletionFailed. </summary>
        public static State DeletionFailed { get; } = new State(DeletionFailedValue);
        /// <summary> Transitioning. </summary>
        public static State Transitioning { get; } = new State(TransitioningValue);
        /// <summary> Suspending. </summary>
        public static State Suspending { get; } = new State(SuspendingValue);
        /// <summary> Suspended. </summary>
        public static State Suspended { get; } = new State(SuspendedValue);
        /// <summary> Resuming. </summary>
        public static State Resuming { get; } = new State(ResumingValue);
        /// <summary> FailingOver. </summary>
        public static State FailingOver { get; } = new State(FailingOverValue);
        /// <summary> FailoverFailed. </summary>
        public static State FailoverFailed { get; } = new State(FailoverFailedValue);
        /// <summary> Determines if two <see cref="State"/> values are the same. </summary>
        public static bool operator ==(State left, State right) => left.Equals(right);
        /// <summary> Determines if two <see cref="State"/> values are not the same. </summary>
        public static bool operator !=(State left, State right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="State"/>. </summary>
        public static implicit operator State(string value) => new State(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is State other && Equals(other);
        /// <inheritdoc />
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
