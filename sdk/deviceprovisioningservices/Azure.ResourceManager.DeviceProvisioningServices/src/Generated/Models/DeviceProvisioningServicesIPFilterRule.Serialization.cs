// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeviceProvisioningServices.Models
{
    public partial class DeviceProvisioningServicesIPFilterRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("filterName");
            writer.WriteStringValue(FilterName);
            writer.WritePropertyName("action");
            writer.WriteStringValue(Action.ToSerialString());
            writer.WritePropertyName("ipMask");
            writer.WriteStringValue(IPMask);
            if (Optional.IsDefined(Target))
            {
                writer.WritePropertyName("target");
                writer.WriteStringValue(Target.Value.ToSerialString());
            }
            writer.WriteEndObject();
        }

        internal static DeviceProvisioningServicesIPFilterRule DeserializeDeviceProvisioningServicesIPFilterRule(JsonElement element)
        {
            string filterName = default;
            DeviceProvisioningServicesIPFilterActionType action = default;
            string ipMask = default;
            Optional<DeviceProvisioningServicesIPFilterTargetType> target = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("filterName"))
                {
                    filterName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("action"))
                {
                    action = property.Value.GetString().ToDeviceProvisioningServicesIPFilterActionType();
                    continue;
                }
                if (property.NameEquals("ipMask"))
                {
                    ipMask = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("target"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    target = property.Value.GetString().ToDeviceProvisioningServicesIPFilterTargetType();
                    continue;
                }
            }
            return new DeviceProvisioningServicesIPFilterRule(filterName, action, ipMask, Optional.ToNullable(target));
        }
    }
}
