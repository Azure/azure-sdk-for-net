// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.DeviceProvisioningServices.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeviceProvisioningServices
{
    /// <summary>
    /// A Class representing a ProvisioningServiceDescription along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="ProvisioningServiceDescriptionResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetProvisioningServiceDescriptionResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetProvisioningServiceDescription method.
    /// </summary>
    public partial class ProvisioningServiceDescriptionResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="ProvisioningServiceDescriptionResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string provisioningServiceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _provisioningServiceDescriptionIotDpsResourceClientDiagnostics;
        private readonly IotDpsResourceRestOperations _provisioningServiceDescriptionIotDpsResourceRestClient;
        private readonly ProvisioningServiceDescriptionData _data;

        /// <summary> Initializes a new instance of the <see cref="ProvisioningServiceDescriptionResource"/> class for mocking. </summary>
        protected ProvisioningServiceDescriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "ProvisioningServiceDescriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ProvisioningServiceDescriptionResource(ArmClient client, ProvisioningServiceDescriptionData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ProvisioningServiceDescriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ProvisioningServiceDescriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _provisioningServiceDescriptionIotDpsResourceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DeviceProvisioningServices", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string provisioningServiceDescriptionIotDpsResourceApiVersion);
            _provisioningServiceDescriptionIotDpsResourceRestClient = new IotDpsResourceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, provisioningServiceDescriptionIotDpsResourceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Devices/provisioningServices";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ProvisioningServiceDescriptionData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of CertificateResponseResources in the ProvisioningServiceDescription. </summary>
        /// <returns> An object representing collection of CertificateResponseResources and their operations over a CertificateResponseResource. </returns>
        public virtual CertificateResponseCollection GetCertificateResponses()
        {
            return GetCachedClient(Client => new CertificateResponseCollection(Client, Id));
        }

        /// <summary>
        /// Get the certificate from the provisioning service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}
        /// Operation Id: DpsCertificate_Get
        /// </summary>
        /// <param name="certificateName"> Name of the certificate to retrieve. </param>
        /// <param name="ifMatch"> ETag of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="certificateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<CertificateResponseResource>> GetCertificateResponseAsync(string certificateName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            return await GetCertificateResponses().GetAsync(certificateName, ifMatch, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the certificate from the provisioning service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}
        /// Operation Id: DpsCertificate_Get
        /// </summary>
        /// <param name="certificateName"> Name of the certificate to retrieve. </param>
        /// <param name="ifMatch"> ETag of the certificate. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="certificateName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="certificateName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<CertificateResponseResource> GetCertificateResponse(string certificateName, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            return GetCertificateResponses().Get(certificateName, ifMatch, cancellationToken);
        }

        /// <summary> Gets a collection of GroupIdInformationResources in the ProvisioningServiceDescription. </summary>
        /// <returns> An object representing collection of GroupIdInformationResources and their operations over a GroupIdInformationResource. </returns>
        public virtual GroupIdInformationCollection GetAllGroupIdInformation()
        {
            return GetCachedClient(Client => new GroupIdInformationCollection(Client, Id));
        }

        /// <summary>
        /// Get the specified private link resource for the given provisioning service
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateLinkResources/{groupId}
        /// Operation Id: IotDpsResource_GetPrivateLinkResources
        /// </summary>
        /// <param name="groupId"> The name of the private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<GroupIdInformationResource>> GetGroupIdInformationAsync(string groupId, CancellationToken cancellationToken = default)
        {
            return await GetAllGroupIdInformation().GetAsync(groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the specified private link resource for the given provisioning service
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateLinkResources/{groupId}
        /// Operation Id: IotDpsResource_GetPrivateLinkResources
        /// </summary>
        /// <param name="groupId"> The name of the private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="groupId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="groupId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<GroupIdInformationResource> GetGroupIdInformation(string groupId, CancellationToken cancellationToken = default)
        {
            return GetAllGroupIdInformation().Get(groupId, cancellationToken);
        }

        /// <summary> Gets a collection of DeviceProvisioningServicesPrivateEndpointConnectionResources in the ProvisioningServiceDescription. </summary>
        /// <returns> An object representing collection of DeviceProvisioningServicesPrivateEndpointConnectionResources and their operations over a DeviceProvisioningServicesPrivateEndpointConnectionResource. </returns>
        public virtual DeviceProvisioningServicesPrivateEndpointConnectionCollection GetDeviceProvisioningServicesPrivateEndpointConnections()
        {
            return GetCachedClient(Client => new DeviceProvisioningServicesPrivateEndpointConnectionCollection(Client, Id));
        }

        /// <summary>
        /// Get private endpoint connection properties
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}
        /// Operation Id: IotDpsResource_GetPrivateEndpointConnection
        /// </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DeviceProvisioningServicesPrivateEndpointConnectionResource>> GetDeviceProvisioningServicesPrivateEndpointConnectionAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return await GetDeviceProvisioningServicesPrivateEndpointConnections().GetAsync(privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get private endpoint connection properties
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}
        /// Operation Id: IotDpsResource_GetPrivateEndpointConnection
        /// </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<DeviceProvisioningServicesPrivateEndpointConnectionResource> GetDeviceProvisioningServicesPrivateEndpointConnection(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return GetDeviceProvisioningServicesPrivateEndpointConnections().Get(privateEndpointConnectionName, cancellationToken);
        }

        /// <summary>
        /// Get the metadata of the provisioning service without SAS keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ProvisioningServiceDescriptionResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.Get");
            scope.Start();
            try
            {
                var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ProvisioningServiceDescriptionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the metadata of the provisioning service without SAS keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ProvisioningServiceDescriptionResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.Get");
            scope.Start();
            try
            {
                var response = _provisioningServiceDescriptionIotDpsResourceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ProvisioningServiceDescriptionResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the Provisioning Service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.Delete");
            scope.Start();
            try
            {
                var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new DeviceProvisioningServicesArmOperation(_provisioningServiceDescriptionIotDpsResourceClientDiagnostics, Pipeline, _provisioningServiceDescriptionIotDpsResourceRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the Provisioning Service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.Delete");
            scope.Start();
            try
            {
                var response = _provisioningServiceDescriptionIotDpsResourceRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new DeviceProvisioningServicesArmOperation(_provisioningServiceDescriptionIotDpsResourceClientDiagnostics, Pipeline, _provisioningServiceDescriptionIotDpsResourceRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update an existing provisioning service&apos;s tags. to update other fields use the CreateOrUpdate method
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Update
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> Updated tag information to set into the provisioning service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<ProvisioningServiceDescriptionResource>> UpdateAsync(WaitUntil waitUntil, ProvisioningServiceDescriptionPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.Update");
            scope.Start();
            try
            {
                var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                var operation = new DeviceProvisioningServicesArmOperation<ProvisioningServiceDescriptionResource>(new ProvisioningServiceDescriptionOperationSource(Client), _provisioningServiceDescriptionIotDpsResourceClientDiagnostics, Pipeline, _provisioningServiceDescriptionIotDpsResourceRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update an existing provisioning service&apos;s tags. to update other fields use the CreateOrUpdate method
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Update
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> Updated tag information to set into the provisioning service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<ProvisioningServiceDescriptionResource> Update(WaitUntil waitUntil, ProvisioningServiceDescriptionPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.Update");
            scope.Start();
            try
            {
                var response = _provisioningServiceDescriptionIotDpsResourceRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                var operation = new DeviceProvisioningServicesArmOperation<ProvisioningServiceDescriptionResource>(new ProvisioningServiceDescriptionOperationSource(Client), _provisioningServiceDescriptionIotDpsResourceClientDiagnostics, Pipeline, _provisioningServiceDescriptionIotDpsResourceRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the status of a long running operation, such as create, update or delete a provisioning service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}
        /// Operation Id: IotDpsResource_GetOperationResult
        /// </summary>
        /// <param name="operationId"> Operation id corresponding to long running operation. Use this to poll for the status. </param>
        /// <param name="asyncinfo"> Async header used to poll on the status of the operation, obtained while creating the long running operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> or <paramref name="asyncinfo"/> is null. </exception>
        public virtual async Task<Response<AsyncOperationResult>> GetOperationResultAsync(string operationId, string asyncinfo, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));
            Argument.AssertNotNull(asyncinfo, nameof(asyncinfo));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetOperationResult");
            scope.Start();
            try
            {
                var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.GetOperationResultAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, operationId, asyncinfo, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the status of a long running operation, such as create, update or delete a provisioning service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}
        /// Operation Id: IotDpsResource_GetOperationResult
        /// </summary>
        /// <param name="operationId"> Operation id corresponding to long running operation. Use this to poll for the status. </param>
        /// <param name="asyncinfo"> Async header used to poll on the status of the operation, obtained while creating the long running operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> or <paramref name="asyncinfo"/> is null. </exception>
        public virtual Response<AsyncOperationResult> GetOperationResult(string operationId, string asyncinfo, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));
            Argument.AssertNotNull(asyncinfo, nameof(asyncinfo));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetOperationResult");
            scope.Start();
            try
            {
                var response = _provisioningServiceDescriptionIotDpsResourceRestClient.GetOperationResult(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, operationId, asyncinfo, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the list of valid SKUs and tiers for a provisioning service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus
        /// Operation Id: IotDpsResource_listValidSkus
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IotDpsSkuDefinition" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IotDpsSkuDefinition> GetValidSkusAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<IotDpsSkuDefinition>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetValidSkus");
                scope.Start();
                try
                {
                    var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.ListValidSkusAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IotDpsSkuDefinition>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetValidSkus");
                scope.Start();
                try
                {
                    var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.ListValidSkusNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the list of valid SKUs and tiers for a provisioning service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus
        /// Operation Id: IotDpsResource_listValidSkus
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IotDpsSkuDefinition" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IotDpsSkuDefinition> GetValidSkus(CancellationToken cancellationToken = default)
        {
            Page<IotDpsSkuDefinition> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetValidSkus");
                scope.Start();
                try
                {
                    var response = _provisioningServiceDescriptionIotDpsResourceRestClient.ListValidSkus(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IotDpsSkuDefinition> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetValidSkus");
                scope.Start();
                try
                {
                    var response = _provisioningServiceDescriptionIotDpsResourceRestClient.ListValidSkusNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List the primary and secondary keys for a provisioning service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys
        /// Operation Id: IotDpsResource_ListKeys
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SharedAccessSignatureAuthorizationRuleAccessRightsDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> GetKeysAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetKeys");
                scope.Start();
                try
                {
                    var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.ListKeysAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetKeys");
                scope.Start();
                try
                {
                    var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.ListKeysNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List the primary and secondary keys for a provisioning service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys
        /// Operation Id: IotDpsResource_ListKeys
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SharedAccessSignatureAuthorizationRuleAccessRightsDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> GetKeys(CancellationToken cancellationToken = default)
        {
            Page<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetKeys");
                scope.Start();
                try
                {
                    var response = _provisioningServiceDescriptionIotDpsResourceRestClient.ListKeys(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetKeys");
                scope.Start();
                try
                {
                    var response = _provisioningServiceDescriptionIotDpsResourceRestClient.ListKeysNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List primary and secondary keys for a specific key name
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys
        /// Operation Id: IotDpsResource_ListKeysForKeyName
        /// </summary>
        /// <param name="keyName"> Logical key name to get key-values for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> is null. </exception>
        public virtual async Task<Response<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>> GetKeysForKeyNameAsync(string keyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetKeysForKeyName");
            scope.Start();
            try
            {
                var response = await _provisioningServiceDescriptionIotDpsResourceRestClient.ListKeysForKeyNameAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, keyName, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List primary and secondary keys for a specific key name
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys
        /// Operation Id: IotDpsResource_ListKeysForKeyName
        /// </summary>
        /// <param name="keyName"> Logical key name to get key-values for. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> is null. </exception>
        public virtual Response<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> GetKeysForKeyName(string keyName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(keyName, nameof(keyName));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.GetKeysForKeyName");
            scope.Start();
            try
            {
                var response = _provisioningServiceDescriptionIotDpsResourceRestClient.ListKeysForKeyName(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, keyName, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<ProvisioningServiceDescriptionResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.AddTag");
            scope.Start();
            try
            {
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues[key] = value;
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _provisioningServiceDescriptionIotDpsResourceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ProvisioningServiceDescriptionResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<ProvisioningServiceDescriptionResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.AddTag");
            scope.Start();
            try
            {
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues[key] = value;
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _provisioningServiceDescriptionIotDpsResourceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new ProvisioningServiceDescriptionResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<ProvisioningServiceDescriptionResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.SetTags");
            scope.Start();
            try
            {
                await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues.ReplaceWith(tags);
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _provisioningServiceDescriptionIotDpsResourceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ProvisioningServiceDescriptionResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<ProvisioningServiceDescriptionResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.SetTags");
            scope.Start();
            try
            {
                GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues.ReplaceWith(tags);
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _provisioningServiceDescriptionIotDpsResourceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new ProvisioningServiceDescriptionResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<ProvisioningServiceDescriptionResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                originalTags.Value.Data.TagValues.Remove(key);
                await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                var originalResponse = await _provisioningServiceDescriptionIotDpsResourceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ProvisioningServiceDescriptionResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<ProvisioningServiceDescriptionResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _provisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("ProvisioningServiceDescriptionResource.RemoveTag");
            scope.Start();
            try
            {
                var originalTags = GetTagResource().Get(cancellationToken);
                originalTags.Value.Data.TagValues.Remove(key);
                GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                var originalResponse = _provisioningServiceDescriptionIotDpsResourceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(new ProvisioningServiceDescriptionResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
