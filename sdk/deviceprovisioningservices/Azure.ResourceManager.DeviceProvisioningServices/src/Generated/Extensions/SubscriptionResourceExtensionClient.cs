// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.DeviceProvisioningServices.Models;

namespace Azure.ResourceManager.DeviceProvisioningServices
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _provisioningServiceDescriptionIotDpsResourceClientDiagnostics;
        private IotDpsResourceRestOperations _provisioningServiceDescriptionIotDpsResourceRestClient;
        private ClientDiagnostics _iotDpsResourceClientDiagnostics;
        private IotDpsResourceRestOperations _iotDpsResourceRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ProvisioningServiceDescriptionIotDpsResourceClientDiagnostics => _provisioningServiceDescriptionIotDpsResourceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DeviceProvisioningServices", ProvisioningServiceDescriptionResource.ResourceType.Namespace, Diagnostics);
        private IotDpsResourceRestOperations ProvisioningServiceDescriptionIotDpsResourceRestClient => _provisioningServiceDescriptionIotDpsResourceRestClient ??= new IotDpsResourceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ProvisioningServiceDescriptionResource.ResourceType));
        private ClientDiagnostics IotDpsResourceClientDiagnostics => _iotDpsResourceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DeviceProvisioningServices", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private IotDpsResourceRestOperations IotDpsResourceRestClient => _iotDpsResourceRestClient ??= new IotDpsResourceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List all the provisioning services for a given subscription id.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices
        /// Operation Id: IotDpsResource_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProvisioningServiceDescriptionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProvisioningServiceDescriptionResource> GetProvisioningServiceDescriptionsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ProvisioningServiceDescriptionResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProvisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetProvisioningServiceDescriptions");
                scope.Start();
                try
                {
                    var response = await ProvisioningServiceDescriptionIotDpsResourceRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ProvisioningServiceDescriptionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ProvisioningServiceDescriptionResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProvisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetProvisioningServiceDescriptions");
                scope.Start();
                try
                {
                    var response = await ProvisioningServiceDescriptionIotDpsResourceRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ProvisioningServiceDescriptionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List all the provisioning services for a given subscription id.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices
        /// Operation Id: IotDpsResource_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProvisioningServiceDescriptionResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProvisioningServiceDescriptionResource> GetProvisioningServiceDescriptions(CancellationToken cancellationToken = default)
        {
            Page<ProvisioningServiceDescriptionResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ProvisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetProvisioningServiceDescriptions");
                scope.Start();
                try
                {
                    var response = ProvisioningServiceDescriptionIotDpsResourceRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ProvisioningServiceDescriptionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ProvisioningServiceDescriptionResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ProvisioningServiceDescriptionIotDpsResourceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetProvisioningServiceDescriptions");
                scope.Start();
                try
                {
                    var response = ProvisioningServiceDescriptionIotDpsResourceRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ProvisioningServiceDescriptionResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Check if a provisioning service name is available. This will validate if the name is syntactically valid and if the name is usable
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability
        /// Operation Id: IotDpsResource_CheckProvisioningServiceNameAvailability
        /// </summary>
        /// <param name="arguments"> Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NameAvailabilityInfo>> CheckProvisioningServiceNameAvailabilityIotDpsResourceAsync(OperationInputs arguments, CancellationToken cancellationToken = default)
        {
            using var scope = IotDpsResourceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckProvisioningServiceNameAvailabilityIotDpsResource");
            scope.Start();
            try
            {
                var response = await IotDpsResourceRestClient.CheckProvisioningServiceNameAvailabilityAsync(Id.SubscriptionId, arguments, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Check if a provisioning service name is available. This will validate if the name is syntactically valid and if the name is usable
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability
        /// Operation Id: IotDpsResource_CheckProvisioningServiceNameAvailability
        /// </summary>
        /// <param name="arguments"> Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NameAvailabilityInfo> CheckProvisioningServiceNameAvailabilityIotDpsResource(OperationInputs arguments, CancellationToken cancellationToken = default)
        {
            using var scope = IotDpsResourceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckProvisioningServiceNameAvailabilityIotDpsResource");
            scope.Start();
            try
            {
                var response = IotDpsResourceRestClient.CheckProvisioningServiceNameAvailability(Id.SubscriptionId, arguments, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
