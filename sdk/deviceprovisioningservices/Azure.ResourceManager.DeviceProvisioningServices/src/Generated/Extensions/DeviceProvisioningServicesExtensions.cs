// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.DeviceProvisioningServices.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DeviceProvisioningServices
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DeviceProvisioningServices. </summary>
    public static partial class DeviceProvisioningServicesExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// List all the provisioning services for a given subscription id.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices
        /// Operation Id: IotDpsResource_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProvisioningServiceDescriptionResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ProvisioningServiceDescriptionResource> GetProvisioningServiceDescriptionsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetProvisioningServiceDescriptionsAsync(cancellationToken);
        }

        /// <summary>
        /// List all the provisioning services for a given subscription id.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices
        /// Operation Id: IotDpsResource_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProvisioningServiceDescriptionResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ProvisioningServiceDescriptionResource> GetProvisioningServiceDescriptions(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetProvisioningServiceDescriptions(cancellationToken);
        }

        /// <summary>
        /// Check if a provisioning service name is available. This will validate if the name is syntactically valid and if the name is usable
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability
        /// Operation Id: IotDpsResource_CheckProvisioningServiceNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="arguments"> Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="arguments"/> is null. </exception>
        public static async Task<Response<NameAvailabilityInfo>> CheckProvisioningServiceNameAvailabilityIotDpsResourceAsync(this SubscriptionResource subscriptionResource, OperationInputs arguments, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(arguments, nameof(arguments));

            return await GetExtensionClient(subscriptionResource).CheckProvisioningServiceNameAvailabilityIotDpsResourceAsync(arguments, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check if a provisioning service name is available. This will validate if the name is syntactically valid and if the name is usable
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability
        /// Operation Id: IotDpsResource_CheckProvisioningServiceNameAvailability
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="arguments"> Set the name parameter in the OperationInputs structure to the name of the provisioning service to check. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="arguments"/> is null. </exception>
        public static Response<NameAvailabilityInfo> CheckProvisioningServiceNameAvailabilityIotDpsResource(this SubscriptionResource subscriptionResource, OperationInputs arguments, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(arguments, nameof(arguments));

            return GetExtensionClient(subscriptionResource).CheckProvisioningServiceNameAvailabilityIotDpsResource(arguments, cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of ProvisioningServiceDescriptionResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ProvisioningServiceDescriptionResources and their operations over a ProvisioningServiceDescriptionResource. </returns>
        public static ProvisioningServiceDescriptionCollection GetProvisioningServiceDescriptions(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetProvisioningServiceDescriptions();
        }

        /// <summary>
        /// Get the metadata of the provisioning service without SAS keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="provisioningServiceName"> Name of the provisioning service to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="provisioningServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="provisioningServiceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ProvisioningServiceDescriptionResource>> GetProvisioningServiceDescriptionAsync(this ResourceGroupResource resourceGroupResource, string provisioningServiceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetProvisioningServiceDescriptions().GetAsync(provisioningServiceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the metadata of the provisioning service without SAS keys.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}
        /// Operation Id: IotDpsResource_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="provisioningServiceName"> Name of the provisioning service to retrieve. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="provisioningServiceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="provisioningServiceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ProvisioningServiceDescriptionResource> GetProvisioningServiceDescription(this ResourceGroupResource resourceGroupResource, string provisioningServiceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetProvisioningServiceDescriptions().Get(provisioningServiceName, cancellationToken);
        }

        #region CertificateResponseResource
        /// <summary>
        /// Gets an object representing a <see cref="CertificateResponseResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CertificateResponseResource.CreateResourceIdentifier" /> to create a <see cref="CertificateResponseResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CertificateResponseResource" /> object. </returns>
        public static CertificateResponseResource GetCertificateResponseResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CertificateResponseResource.ValidateResourceId(id);
                return new CertificateResponseResource(client, id);
            }
            );
        }
        #endregion

        #region ProvisioningServiceDescriptionResource
        /// <summary>
        /// Gets an object representing a <see cref="ProvisioningServiceDescriptionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProvisioningServiceDescriptionResource.CreateResourceIdentifier" /> to create a <see cref="ProvisioningServiceDescriptionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProvisioningServiceDescriptionResource" /> object. </returns>
        public static ProvisioningServiceDescriptionResource GetProvisioningServiceDescriptionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProvisioningServiceDescriptionResource.ValidateResourceId(id);
                return new ProvisioningServiceDescriptionResource(client, id);
            }
            );
        }
        #endregion

        #region GroupIdInformationResource
        /// <summary>
        /// Gets an object representing a <see cref="GroupIdInformationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GroupIdInformationResource.CreateResourceIdentifier" /> to create a <see cref="GroupIdInformationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GroupIdInformationResource" /> object. </returns>
        public static GroupIdInformationResource GetGroupIdInformationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GroupIdInformationResource.ValidateResourceId(id);
                return new GroupIdInformationResource(client, id);
            }
            );
        }
        #endregion

        #region DeviceProvisioningServicesPrivateEndpointConnectionResource
        /// <summary>
        /// Gets an object representing a <see cref="DeviceProvisioningServicesPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeviceProvisioningServicesPrivateEndpointConnectionResource.CreateResourceIdentifier" /> to create a <see cref="DeviceProvisioningServicesPrivateEndpointConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DeviceProvisioningServicesPrivateEndpointConnectionResource" /> object. </returns>
        public static DeviceProvisioningServicesPrivateEndpointConnectionResource GetDeviceProvisioningServicesPrivateEndpointConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DeviceProvisioningServicesPrivateEndpointConnectionResource.ValidateResourceId(id);
                return new DeviceProvisioningServicesPrivateEndpointConnectionResource(client, id);
            }
            );
        }
        #endregion
    }
}
