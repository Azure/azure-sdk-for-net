// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Disk.Models;

namespace Azure.ResourceManager.Disk.Samples
{
    public partial class Sample_DiskPrivateEndpointConnectionResource
    {
        // Get information about a private endpoint connection under a disk access resource.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetInformationAboutAPrivateEndpointConnectionUnderADiskAccessResource()
        {
            // Generated from example definition: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2024-03-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Get.json
            // this example is just showing the usage of "DiskAccesses_GetAPrivateEndpointConnection" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DiskPrivateEndpointConnectionResource created on azure
            // for more information of creating DiskPrivateEndpointConnectionResource, please refer to the document of DiskPrivateEndpointConnectionResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "myResourceGroup";
            string diskAccessName = "myDiskAccess";
            string privateEndpointConnectionName = "myPrivateEndpointConnection";
            ResourceIdentifier diskPrivateEndpointConnectionResourceId = DiskPrivateEndpointConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, diskAccessName, privateEndpointConnectionName);
            DiskPrivateEndpointConnectionResource diskPrivateEndpointConnection = client.GetDiskPrivateEndpointConnectionResource(diskPrivateEndpointConnectionResourceId);

            // invoke the operation
            DiskPrivateEndpointConnectionResource result = await diskPrivateEndpointConnection.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DiskPrivateEndpointConnectionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Approve a Private Endpoint Connection under a disk access resource.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_ApproveAPrivateEndpointConnectionUnderADiskAccessResource()
        {
            // Generated from example definition: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2024-03-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Approve.json
            // this example is just showing the usage of "DiskAccesses_UpdateAPrivateEndpointConnection" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DiskPrivateEndpointConnectionResource created on azure
            // for more information of creating DiskPrivateEndpointConnectionResource, please refer to the document of DiskPrivateEndpointConnectionResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "myResourceGroup";
            string diskAccessName = "myDiskAccess";
            string privateEndpointConnectionName = "myPrivateEndpointConnection";
            ResourceIdentifier diskPrivateEndpointConnectionResourceId = DiskPrivateEndpointConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, diskAccessName, privateEndpointConnectionName);
            DiskPrivateEndpointConnectionResource diskPrivateEndpointConnection = client.GetDiskPrivateEndpointConnectionResource(diskPrivateEndpointConnectionResourceId);

            // invoke the operation
            DiskPrivateEndpointConnectionData data = new DiskPrivateEndpointConnectionData()
            {
                ConnectionState = new DiskPrivateLinkServiceConnectionState()
                {
                    Status = DiskPrivateEndpointServiceConnectionStatus.Approved,
                    Description = "Approving myPrivateEndpointConnection",
                },
            };
            ArmOperation<DiskPrivateEndpointConnectionResource> lro = await diskPrivateEndpointConnection.UpdateAsync(WaitUntil.Completed, data);
            DiskPrivateEndpointConnectionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DiskPrivateEndpointConnectionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a private endpoint connection under a disk access resource.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAPrivateEndpointConnectionUnderADiskAccessResource()
        {
            // Generated from example definition: specification/compute/resource-manager/Microsoft.Compute/DiskRP/stable/2024-03-02/examples/diskAccessExamples/DiskAccessPrivateEndpointConnection_Delete.json
            // this example is just showing the usage of "DiskAccesses_DeleteAPrivateEndpointConnection" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DiskPrivateEndpointConnectionResource created on azure
            // for more information of creating DiskPrivateEndpointConnectionResource, please refer to the document of DiskPrivateEndpointConnectionResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "myResourceGroup";
            string diskAccessName = "myDiskAccess";
            string privateEndpointConnectionName = "myPrivateEndpointConnection";
            ResourceIdentifier diskPrivateEndpointConnectionResourceId = DiskPrivateEndpointConnectionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, diskAccessName, privateEndpointConnectionName);
            DiskPrivateEndpointConnectionResource diskPrivateEndpointConnection = client.GetDiskPrivateEndpointConnectionResource(diskPrivateEndpointConnectionResourceId);

            // invoke the operation
            await diskPrivateEndpointConnection.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
