<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetGalleryImageVersionAsync(string,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryImageVersionAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

Response response = await client.GetGalleryImageVersionAsync("<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call GetGalleryImageVersionAsync with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

Response response = await client.GetGalleryImageVersionAsync("<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", "ReplicationStatus", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("regionalReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocationReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("communityGalleryImageId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("virtualMachineId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("reportedForPolicyViolation").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("allowDeletionOfReplicatedLocations").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("progress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("signatureTemplateNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetGalleryImageVersion(string,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryImageVersion and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

Response response = client.GetGalleryImageVersion("<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call GetGalleryImageVersion with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

Response response = client.GetGalleryImageVersion("<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", "ReplicationStatus", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("regionalReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocationReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("communityGalleryImageId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("virtualMachineId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("reportedForPolicyViolation").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("allowDeletionOfReplicatedLocations").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("progress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("signatureTemplateNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetGalleryImageVersionsByGalleryImageAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryImageVersionsByGalleryImageAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

await foreach (BinaryData item in client.GetGalleryImageVersionsByGalleryImageAsync("<resourceGroupName>", "<galleryName>", "<galleryImageName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("location").ToString());
}
]]></code>
This sample shows how to call GetGalleryImageVersionsByGalleryImageAsync with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

await foreach (BinaryData item in client.GetGalleryImageVersionsByGalleryImageAsync("<resourceGroupName>", "<galleryName>", "<galleryImageName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("regionalReplicaCount").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("storageAccountType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("excludeFromLatest").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicaCount").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("excludeFromLatest").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("endOfLifeDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("storageAccountType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicationMode").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocationReplicaCount").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("storageAccountType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("communityGalleryImageId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("virtualMachineId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("sizeInGB").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("uri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("storageAccountId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("sizeInGB").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("uri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("storageAccountId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("reportedForPolicyViolation").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("details").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("allowDeletionOfReplicatedLocations").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("aggregatedState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("region").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("details").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("progress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("signatureTemplateNames")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("value")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("value")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("value")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("value")[0].ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetGalleryImageVersionsByGalleryImage(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryImageVersionsByGalleryImage and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

foreach (BinaryData item in client.GetGalleryImageVersionsByGalleryImage("<resourceGroupName>", "<galleryName>", "<galleryImageName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("location").ToString());
}
]]></code>
This sample shows how to call GetGalleryImageVersionsByGalleryImage with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

foreach (BinaryData item in client.GetGalleryImageVersionsByGalleryImage("<resourceGroupName>", "<galleryName>", "<galleryImageName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("regionalReplicaCount").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("storageAccountType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("excludeFromLatest").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicaCount").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("excludeFromLatest").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("endOfLifeDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("storageAccountType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicationMode").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocationReplicaCount").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("storageAccountType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("communityGalleryImageId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("virtualMachineId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("sizeInGB").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("uri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("storageAccountId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("sizeInGB").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("uri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("storageAccountId").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("reportedForPolicyViolation").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("category").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("details").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("allowDeletionOfReplicatedLocations").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("aggregatedState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("region").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("details").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("progress").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("signatureTemplateNames")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("value")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("value")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("value")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("value")[0].ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(WaitUntil,string,string,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    location = "<location>",
});
Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        publishingProfile = new
        {
            targetRegions = new object[]
            {
                new
                {
                    name = "<name>",
                    regionalReplicaCount = 1234,
                    storageAccountType = "Standard_LRS",
                    encryption = new
                    {
                        osDiskImage = new
                        {
                            securityProfile = new
                            {
                                confidentialVMEncryptionType = "EncryptedVMGuestStateOnlyWithPmk",
                                secureVMDiskEncryptionSetId = "<secureVMDiskEncryptionSetId>",
                            },
                            diskEncryptionSetId = "<diskEncryptionSetId>",
                        },
                        dataDiskImages = new object[]
                        {
                            new
                            {
                                lun = 1234,
                                diskEncryptionSetId = "<diskEncryptionSetId>",
                            }
                        },
                    },
                    excludeFromLatest = true,
                }
            },
            replicaCount = 1234,
            excludeFromLatest = true,
            endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
            storageAccountType = "Standard_LRS",
            replicationMode = "Full",
            targetExtendedLocations = new object[]
            {
                new
                {
                    name = "<name>",
                    extendedLocation = new
                    {
                        name = "<name>",
                        type = "EdgeZone",
                    },
                    extendedLocationReplicaCount = 1234,
                    storageAccountType = "Standard_LRS",
                }
            },
        },
        storageProfile = new
        {
            source = new
            {
                communityGalleryImageId = "<communityGalleryImageId>",
                virtualMachineId = "<virtualMachineId>",
                id = "<id>",
            },
            osDiskImage = new
            {
                hostCaching = "None",
                source = new
                {
                    uri = "<uri>",
                    storageAccountId = "<storageAccountId>",
                    id = "<id>",
                },
            },
            dataDiskImages = new object[]
            {
                new
                {
                    lun = 1234,
                    hostCaching = "None",
                }
            },
        },
        safetyProfile = new
        {
            allowDeletionOfReplicatedLocations = true,
        },
        securityProfile = new
        {
            uefiSettings = new
            {
                signatureTemplateNames = new object[]
                {
                    "NoSignatureTemplate"
                },
                additionalSignatures = new
                {
                    pk = new
                    {
                        type = "sha256",
                        value = new object[]
                        {
                            "<value>"
                        },
                    },
                    kek = new object[]
                    {
                        null
                    },
                    db = new object[]
                    {
                        null
                    },
                    dbx = new object[]
                    {
                        null
                    },
                },
            },
        },
    },
    location = "<location>",
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("regionalReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocationReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("communityGalleryImageId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("virtualMachineId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("reportedForPolicyViolation").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("allowDeletionOfReplicatedLocations").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("progress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("signatureTemplateNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(WaitUntil,string,string,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    location = "<location>",
});
Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        publishingProfile = new
        {
            targetRegions = new object[]
            {
                new
                {
                    name = "<name>",
                    regionalReplicaCount = 1234,
                    storageAccountType = "Standard_LRS",
                    encryption = new
                    {
                        osDiskImage = new
                        {
                            securityProfile = new
                            {
                                confidentialVMEncryptionType = "EncryptedVMGuestStateOnlyWithPmk",
                                secureVMDiskEncryptionSetId = "<secureVMDiskEncryptionSetId>",
                            },
                            diskEncryptionSetId = "<diskEncryptionSetId>",
                        },
                        dataDiskImages = new object[]
                        {
                            new
                            {
                                lun = 1234,
                                diskEncryptionSetId = "<diskEncryptionSetId>",
                            }
                        },
                    },
                    excludeFromLatest = true,
                }
            },
            replicaCount = 1234,
            excludeFromLatest = true,
            endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
            storageAccountType = "Standard_LRS",
            replicationMode = "Full",
            targetExtendedLocations = new object[]
            {
                new
                {
                    name = "<name>",
                    extendedLocation = new
                    {
                        name = "<name>",
                        type = "EdgeZone",
                    },
                    extendedLocationReplicaCount = 1234,
                    storageAccountType = "Standard_LRS",
                }
            },
        },
        storageProfile = new
        {
            source = new
            {
                communityGalleryImageId = "<communityGalleryImageId>",
                virtualMachineId = "<virtualMachineId>",
                id = "<id>",
            },
            osDiskImage = new
            {
                hostCaching = "None",
                source = new
                {
                    uri = "<uri>",
                    storageAccountId = "<storageAccountId>",
                    id = "<id>",
                },
            },
            dataDiskImages = new object[]
            {
                new
                {
                    lun = 1234,
                    hostCaching = "None",
                }
            },
        },
        safetyProfile = new
        {
            allowDeletionOfReplicatedLocations = true,
        },
        securityProfile = new
        {
            uefiSettings = new
            {
                signatureTemplateNames = new object[]
                {
                    "NoSignatureTemplate"
                },
                additionalSignatures = new
                {
                    pk = new
                    {
                        type = "sha256",
                        value = new object[]
                        {
                            "<value>"
                        },
                    },
                    kek = new object[]
                    {
                        null
                    },
                    db = new object[]
                    {
                        null
                    },
                    dbx = new object[]
                    {
                        null
                    },
                },
            },
        },
    },
    location = "<location>",
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("regionalReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocationReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("communityGalleryImageId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("virtualMachineId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("reportedForPolicyViolation").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("allowDeletionOfReplicatedLocations").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("progress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("signatureTemplateNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(WaitUntil,string,string,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        publishingProfile = new
        {
            targetRegions = new object[]
            {
                new
                {
                    name = "<name>",
                    regionalReplicaCount = 1234,
                    storageAccountType = "Standard_LRS",
                    encryption = new
                    {
                        osDiskImage = new
                        {
                            securityProfile = new
                            {
                                confidentialVMEncryptionType = "EncryptedVMGuestStateOnlyWithPmk",
                                secureVMDiskEncryptionSetId = "<secureVMDiskEncryptionSetId>",
                            },
                            diskEncryptionSetId = "<diskEncryptionSetId>",
                        },
                        dataDiskImages = new object[]
                        {
                            new
                            {
                                lun = 1234,
                                diskEncryptionSetId = "<diskEncryptionSetId>",
                            }
                        },
                    },
                    excludeFromLatest = true,
                }
            },
            replicaCount = 1234,
            excludeFromLatest = true,
            endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
            storageAccountType = "Standard_LRS",
            replicationMode = "Full",
            targetExtendedLocations = new object[]
            {
                new
                {
                    name = "<name>",
                    extendedLocation = new
                    {
                        name = "<name>",
                        type = "EdgeZone",
                    },
                    extendedLocationReplicaCount = 1234,
                    storageAccountType = "Standard_LRS",
                }
            },
        },
        storageProfile = new
        {
            source = new
            {
                communityGalleryImageId = "<communityGalleryImageId>",
                virtualMachineId = "<virtualMachineId>",
                id = "<id>",
            },
            osDiskImage = new
            {
                hostCaching = "None",
                source = new
                {
                    uri = "<uri>",
                    storageAccountId = "<storageAccountId>",
                    id = "<id>",
                },
            },
            dataDiskImages = new object[]
            {
                new
                {
                    lun = 1234,
                    hostCaching = "None",
                }
            },
        },
        safetyProfile = new
        {
            allowDeletionOfReplicatedLocations = true,
        },
        securityProfile = new
        {
            uefiSettings = new
            {
                signatureTemplateNames = new object[]
                {
                    "NoSignatureTemplate"
                },
                additionalSignatures = new
                {
                    pk = new
                    {
                        type = "sha256",
                        value = new object[]
                        {
                            "<value>"
                        },
                    },
                    kek = new object[]
                    {
                        null
                    },
                    db = new object[]
                    {
                        null
                    },
                    dbx = new object[]
                    {
                        null
                    },
                },
            },
        },
    },
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("regionalReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocationReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("communityGalleryImageId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("virtualMachineId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("reportedForPolicyViolation").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("allowDeletionOfReplicatedLocations").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("progress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("signatureTemplateNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="Update(WaitUntil,string,string,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call Update with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        publishingProfile = new
        {
            targetRegions = new object[]
            {
                new
                {
                    name = "<name>",
                    regionalReplicaCount = 1234,
                    storageAccountType = "Standard_LRS",
                    encryption = new
                    {
                        osDiskImage = new
                        {
                            securityProfile = new
                            {
                                confidentialVMEncryptionType = "EncryptedVMGuestStateOnlyWithPmk",
                                secureVMDiskEncryptionSetId = "<secureVMDiskEncryptionSetId>",
                            },
                            diskEncryptionSetId = "<diskEncryptionSetId>",
                        },
                        dataDiskImages = new object[]
                        {
                            new
                            {
                                lun = 1234,
                                diskEncryptionSetId = "<diskEncryptionSetId>",
                            }
                        },
                    },
                    excludeFromLatest = true,
                }
            },
            replicaCount = 1234,
            excludeFromLatest = true,
            endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
            storageAccountType = "Standard_LRS",
            replicationMode = "Full",
            targetExtendedLocations = new object[]
            {
                new
                {
                    name = "<name>",
                    extendedLocation = new
                    {
                        name = "<name>",
                        type = "EdgeZone",
                    },
                    extendedLocationReplicaCount = 1234,
                    storageAccountType = "Standard_LRS",
                }
            },
        },
        storageProfile = new
        {
            source = new
            {
                communityGalleryImageId = "<communityGalleryImageId>",
                virtualMachineId = "<virtualMachineId>",
                id = "<id>",
            },
            osDiskImage = new
            {
                hostCaching = "None",
                source = new
                {
                    uri = "<uri>",
                    storageAccountId = "<storageAccountId>",
                    id = "<id>",
                },
            },
            dataDiskImages = new object[]
            {
                new
                {
                    lun = 1234,
                    hostCaching = "None",
                }
            },
        },
        safetyProfile = new
        {
            allowDeletionOfReplicatedLocations = true,
        },
        securityProfile = new
        {
            uefiSettings = new
            {
                signatureTemplateNames = new object[]
                {
                    "NoSignatureTemplate"
                },
                additionalSignatures = new
                {
                    pk = new
                    {
                        type = "sha256",
                        value = new object[]
                        {
                            "<value>"
                        },
                    },
                    kek = new object[]
                    {
                        null
                    },
                    db = new object[]
                    {
                        null
                    },
                    dbx = new object[]
                    {
                        null
                    },
                },
            },
        },
    },
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("regionalReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetRegions")[0].GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("excludeFromLatest").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("replicationMode").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocation").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("extendedLocationReplicaCount").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("storageAccountType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("confidentialVMEncryptionType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("securityProfile").GetProperty("secureVMDiskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("osDiskImage").GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("publishingProfile").GetProperty("targetExtendedLocations")[0].GetProperty("encryption").GetProperty("dataDiskImages")[0].GetProperty("diskEncryptionSetId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("communityGalleryImageId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("virtualMachineId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("osDiskImage").GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("lun").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("sizeInGB").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("hostCaching").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("uri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("storageAccountId").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("storageProfile").GetProperty("dataDiskImages")[0].GetProperty("source").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("reportedForPolicyViolation").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("policyViolations")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("safetyProfile").GetProperty("allowDeletionOfReplicatedLocations").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("replicationStatus").GetProperty("summary")[0].GetProperty("progress").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("signatureTemplateNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("pk").GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("kek")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("db")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("additionalSignatures").GetProperty("dbx")[0].GetProperty("value")[0].ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(WaitUntil,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>");
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>");
]]></code></example>
    </member>
    <member name="Delete(WaitUntil,string,string,string,string,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>");
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryImageVersionsClient client = new GalleryImageVersionsClient("<SubscriptionId>", credential);

Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryImageName>", "<galleryImageVersionName>");
]]></code></example>
    </member>
  </members>
</doc>