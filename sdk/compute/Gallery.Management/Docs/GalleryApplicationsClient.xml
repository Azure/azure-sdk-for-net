<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetGalleryApplicationAsync(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryApplicationAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

Response response = await client.GetGalleryApplicationAsync("<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call GetGalleryApplicationAsync with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

Response response = await client.GetGalleryApplicationAsync("<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetGalleryApplication(string,string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryApplication and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

Response response = client.GetGalleryApplication("<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call GetGalleryApplication with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

Response response = client.GetGalleryApplication("<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetGalleryApplicationsByGalleryAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryApplicationsByGalleryAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

await foreach (BinaryData item in client.GetGalleryApplicationsByGalleryAsync("<resourceGroupName>", "<galleryName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("location").ToString());
}
]]></code>
This sample shows how to call GetGalleryApplicationsByGalleryAsync with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

await foreach (BinaryData item in client.GetGalleryApplicationsByGalleryAsync("<resourceGroupName>", "<galleryName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetGalleryApplicationsByGallery(string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryApplicationsByGallery and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

foreach (BinaryData item in client.GetGalleryApplicationsByGallery("<resourceGroupName>", "<galleryName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("location").ToString());
}
]]></code>
This sample shows how to call GetGalleryApplicationsByGallery with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

foreach (BinaryData item in client.GetGalleryApplicationsByGallery("<resourceGroupName>", "<galleryName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(WaitUntil,string,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    location = "<location>",
});
Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        description = "<description>",
        eula = "<eula>",
        privacyStatementUri = "<privacyStatementUri>",
        releaseNoteUri = "<releaseNoteUri>",
        endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
        supportedOSType = "Windows",
        customActions = new object[]
        {
            new
            {
                name = "<name>",
                script = "<script>",
                description = "<description>",
                parameters = new object[]
                {
                    new
                    {
                        name = "<name>",
                        required = true,
                        type = "String",
                        defaultValue = "<defaultValue>",
                        description = "<description>",
                    }
                },
            }
        },
    },
    location = "<location>",
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(WaitUntil,string,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    location = "<location>",
});
Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        description = "<description>",
        eula = "<eula>",
        privacyStatementUri = "<privacyStatementUri>",
        releaseNoteUri = "<releaseNoteUri>",
        endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
        supportedOSType = "Windows",
        customActions = new object[]
        {
            new
            {
                name = "<name>",
                script = "<script>",
                description = "<description>",
                parameters = new object[]
                {
                    new
                    {
                        name = "<name>",
                        required = true,
                        type = "String",
                        defaultValue = "<defaultValue>",
                        description = "<description>",
                    }
                },
            }
        },
    },
    location = "<location>",
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(WaitUntil,string,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        description = "<description>",
        eula = "<eula>",
        privacyStatementUri = "<privacyStatementUri>",
        releaseNoteUri = "<releaseNoteUri>",
        endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
        supportedOSType = "Windows",
        customActions = new object[]
        {
            new
            {
                name = "<name>",
                script = "<script>",
                description = "<description>",
                parameters = new object[]
                {
                    new
                    {
                        name = "<name>",
                        required = true,
                        type = "String",
                        defaultValue = "<defaultValue>",
                        description = "<description>",
                    }
                },
            }
        },
    },
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="Update(WaitUntil,string,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call Update with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        description = "<description>",
        eula = "<eula>",
        privacyStatementUri = "<privacyStatementUri>",
        releaseNoteUri = "<releaseNoteUri>",
        endOfLifeDate = "2022-05-10T18:57:31.2311892Z",
        supportedOSType = "Windows",
        customActions = new object[]
        {
            new
            {
                name = "<name>",
                script = "<script>",
                description = "<description>",
                parameters = new object[]
                {
                    new
                    {
                        name = "<name>",
                        required = true,
                        type = "String",
                        defaultValue = "<defaultValue>",
                        description = "<description>",
                    }
                },
            }
        },
    },
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("privacyStatementUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("releaseNoteUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("endOfLifeDate").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("supportedOSType").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("script").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("required").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("defaultValue").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("customActions")[0].GetProperty("parameters")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(WaitUntil,string,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>");
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>");
]]></code></example>
    </member>
    <member name="Delete(WaitUntil,string,string,string,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>");
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleryApplicationsClient client = new GalleryApplicationsClient("<SubscriptionId>", credential);

Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", "<galleryApplicationName>");
]]></code></example>
    </member>
  </members>
</doc>