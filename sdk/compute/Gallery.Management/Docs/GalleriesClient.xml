<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetGalleryAsync(string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetGalleryAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

Response response = await client.GetGalleryAsync("<resourceGroupName>", "<galleryName>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call GetGalleryAsync with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

Response response = await client.GetGalleryAsync("<resourceGroupName>", "<galleryName>", "Permissions", "SharingProfile/Groups", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetGallery(string,string,string,string,RequestContext)">
      <example>
This sample shows how to call GetGallery and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

Response response = client.GetGallery("<resourceGroupName>", "<galleryName>", null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call GetGallery with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

Response response = client.GetGallery("<resourceGroupName>", "<galleryName>", "Permissions", "SharingProfile/Groups", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetGalleriesAsync(RequestContext)">
      <example>
This sample shows how to call GetGalleriesAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

await foreach (BinaryData item in client.GetGalleriesAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("location").ToString());
}
]]></code>
This sample shows how to call GetGalleriesAsync with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

await foreach (BinaryData item in client.GetGalleriesAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetGalleries(RequestContext)">
      <example>
This sample shows how to call GetGalleries and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

foreach (BinaryData item in client.GetGalleries(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("location").ToString());
}
]]></code>
This sample shows how to call GetGalleries with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

foreach (BinaryData item in client.GetGalleries(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetGalleriesByResourceGroupAsync(string,RequestContext)">
      <example>
This sample shows how to call GetGalleriesByResourceGroupAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

await foreach (BinaryData item in client.GetGalleriesByResourceGroupAsync("<resourceGroupName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("location").ToString());
}
]]></code>
This sample shows how to call GetGalleriesByResourceGroupAsync with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

await foreach (BinaryData item in client.GetGalleriesByResourceGroupAsync("<resourceGroupName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetGalleriesByResourceGroup(string,RequestContext)">
      <example>
This sample shows how to call GetGalleriesByResourceGroup and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

foreach (BinaryData item in client.GetGalleriesByResourceGroup("<resourceGroupName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("location").ToString());
}
]]></code>
This sample shows how to call GetGalleriesByResourceGroup with all parameters and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

foreach (BinaryData item in client.GetGalleriesByResourceGroup("<resourceGroupName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    location = "<location>",
});
Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        description = "<description>",
        identifier = new object(),
        sharingProfile = new
        {
            permissions = "Private",
            communityGalleryInfo = new
            {
                publisherUri = "<publisherUri>",
                publisherContact = "<publisherContact>",
                eula = "<eula>",
                publicNamePrefix = "<publicNamePrefix>",
            },
        },
        softDeletePolicy = new
        {
            isSoftDeleteEnabled = true,
        },
    },
    location = "<location>",
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = await client.CreateOrUpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    location = "<location>",
});
Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        description = "<description>",
        identifier = new object(),
        sharingProfile = new
        {
            permissions = "Private",
            communityGalleryInfo = new
            {
                publisherUri = "<publisherUri>",
                publisherContact = "<publisherContact>",
                eula = "<eula>",
                publicNamePrefix = "<publicNamePrefix>",
            },
        },
        softDeletePolicy = new
        {
            isSoftDeleteEnabled = true,
        },
    },
    location = "<location>",
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = client.CreateOrUpdate(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="UpdateAsync(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call UpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        description = "<description>",
        identifier = new object(),
        sharingProfile = new
        {
            permissions = "Private",
            communityGalleryInfo = new
            {
                publisherUri = "<publisherUri>",
                publisherContact = "<publisherContact>",
                eula = "<eula>",
                publicNamePrefix = "<publicNamePrefix>",
            },
        },
        softDeletePolicy = new
        {
            isSoftDeleteEnabled = true,
        },
    },
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = await client.UpdateAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="Update(WaitUntil,string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("location").ToString());
]]></code>
This sample shows how to call Update with all parameters and request content and parse the result.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        description = "<description>",
        identifier = new object(),
        sharingProfile = new
        {
            permissions = "Private",
            communityGalleryInfo = new
            {
                publisherUri = "<publisherUri>",
                publisherContact = "<publisherContact>",
                eula = "<eula>",
                publicNamePrefix = "<publicNamePrefix>",
            },
        },
        softDeletePolicy = new
        {
            isSoftDeleteEnabled = true,
        },
    },
    tags = new
    {
        key = "<tags>",
    },
});
Operation<BinaryData> operation = client.Update(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("identifier").GetProperty("uniqueName").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("permissions").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("groups")[0].GetProperty("ids")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherUri").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publisherContact").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("eula").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNamePrefix").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("communityGalleryEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingProfile").GetProperty("communityGalleryInfo").GetProperty("publicNames")[0].ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("softDeletePolicy").GetProperty("isSoftDeleteEnabled").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("aggregatedState").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("region").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("sharingStatus").GetProperty("summary")[0].GetProperty("details").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>");
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

Operation operation = await client.DeleteAsync(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>");
]]></code></example>
    </member>
    <member name="Delete(WaitUntil,string,string,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>");
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
TokenCredential credential = new DefaultAzureCredential();
GalleriesClient client = new GalleriesClient("<SubscriptionId>", credential);

Operation operation = client.Delete(WaitUntil.Completed, "<resourceGroupName>", "<galleryName>");
]]></code></example>
    </member>
  </members>
</doc>