// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ComputeModelFactory
    {
        /// <summary> Initializes a new instance of ComputeApiError. </summary>
        /// <param name="details"> The Api error details. </param>
        /// <param name="innererror"> The Api inner error. </param>
        /// <param name="code"> The error code. </param>
        /// <param name="target"> The target of the particular error. </param>
        /// <param name="message"> The error message. </param>
        /// <returns> A new <see cref="Models.ComputeApiError"/> instance for mocking. </returns>
        public static ComputeApiError ComputeApiError(IEnumerable<ComputeApiErrorBase> details = null, InnerError innererror = null, string code = null, string target = null, string message = null)
        {
            details ??= new List<ComputeApiErrorBase>();

            return new ComputeApiError(details?.ToList(), innererror, code, target, message);
        }

        /// <summary> Initializes a new instance of ComputeApiErrorBase. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="target"> The target of the particular error. </param>
        /// <param name="message"> The error message. </param>
        /// <returns> A new <see cref="Models.ComputeApiErrorBase"/> instance for mocking. </returns>
        public static ComputeApiErrorBase ComputeApiErrorBase(string code = null, string target = null, string message = null)
        {
            return new ComputeApiErrorBase(code, target, message);
        }

        /// <summary> Initializes a new instance of InnerError. </summary>
        /// <param name="exceptiontype"> The exception type. </param>
        /// <param name="errordetail"> The internal error message or exception dump. </param>
        /// <returns> A new <see cref="Models.InnerError"/> instance for mocking. </returns>
        public static InnerError InnerError(string exceptiontype = null, string errordetail = null)
        {
            return new InnerError(exceptiontype, errordetail);
        }

        /// <summary> Initializes a new instance of ComputeUsage. </summary>
        /// <param name="unit"> An enum describing the unit of usage measurement. </param>
        /// <param name="currentValue"> The current usage of the resource. </param>
        /// <param name="limit"> The maximum permitted usage of the resource. </param>
        /// <param name="name"> The name of the type of usage. </param>
        /// <returns> A new <see cref="Models.ComputeUsage"/> instance for mocking. </returns>
        public static ComputeUsage ComputeUsage(ComputeUsageUnit unit = default, int currentValue = default, long limit = default, ComputeUsageName name = null)
        {
            return new ComputeUsage(unit, currentValue, limit, name);
        }

        /// <summary> Initializes a new instance of ComputeUsageName. </summary>
        /// <param name="value"> The name of the resource. </param>
        /// <param name="localizedValue"> The localized name of the resource. </param>
        /// <returns> A new <see cref="Models.ComputeUsageName"/> instance for mocking. </returns>
        public static ComputeUsageName ComputeUsageName(string value = null, string localizedValue = null)
        {
            return new ComputeUsageName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of VirtualMachineSize. </summary>
        /// <param name="name"> The name of the virtual machine size. </param>
        /// <param name="numberOfCores"> The number of cores supported by the virtual machine size. For Constrained vCPU capable VM sizes, this number represents the total vCPUs of quota that the VM uses. For accurate vCPU count, please refer to https://docs.microsoft.com/azure/virtual-machines/constrained-vcpu or https://docs.microsoft.com/rest/api/compute/resourceskus/list. </param>
        /// <param name="osDiskSizeInMB"> The OS disk size, in MB, allowed by the virtual machine size. </param>
        /// <param name="resourceDiskSizeInMB"> The resource disk size, in MB, allowed by the virtual machine size. </param>
        /// <param name="memoryInMB"> The amount of memory, in MB, supported by the virtual machine size. </param>
        /// <param name="maxDataDiskCount"> The maximum number of data disks that can be attached to the virtual machine size. </param>
        /// <returns> A new <see cref="Models.VirtualMachineSize"/> instance for mocking. </returns>
        public static VirtualMachineSize VirtualMachineSize(string name = null, int? numberOfCores = null, int? osDiskSizeInMB = null, int? resourceDiskSizeInMB = null, int? memoryInMB = null, int? maxDataDiskCount = null)
        {
            return new VirtualMachineSize(name, numberOfCores, osDiskSizeInMB, resourceDiskSizeInMB, memoryInMB, maxDataDiskCount);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The virtual machine scale set sku. </param>
        /// <param name="plan"> Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**. </param>
        /// <param name="identity"> The identity of the virtual machine scale set, if configured. </param>
        /// <param name="zones"> The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set. </param>
        /// <param name="extendedLocation"> The extended location of the Virtual Machine Scale Set. </param>
        /// <param name="upgradePolicy"> The upgrade policy. </param>
        /// <param name="automaticRepairsPolicy"> Policy for automatic repairs. </param>
        /// <param name="virtualMachineProfile"> The virtual machine profile. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="overprovision"> Specifies whether the Virtual Machine Scale Set should be overprovisioned. </param>
        /// <param name="doNotRunExtensionsOnOverprovisionedVms"> When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs. </param>
        /// <param name="uniqueId"> Specifies the ID which uniquely identifies a Virtual Machine Scale Set. </param>
        /// <param name="singlePlacementGroup"> When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if singlePlacementGroup is false, it may not be modified to true. </param>
        /// <param name="zoneBalance"> Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage. zoneBalance property can only be set if the zones property of the scale set contains more than one zone. If there are no zones or only one zone specified, then zoneBalance property should not be set. </param>
        /// <param name="platformFaultDomainCount"> Fault Domain count for each placement group. </param>
        /// <param name="proximityPlacementGroupId"> Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01. </param>
        /// <param name="hostGroupId"> Specifies information about the dedicated host group that the virtual machine scale set resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. </param>
        /// <param name="additionalCapabilities"> Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type. </param>
        /// <param name="scaleInPolicy"> Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale Set. </param>
        /// <param name="orchestrationMode"> Specifies the orchestration mode for the virtual machine scale set. </param>
        /// <param name="spotRestorePolicy"> Specifies the Spot Restore properties for the virtual machine scale set. </param>
        /// <param name="timeCreated"> Specifies the time at which the Virtual Machine Scale Set resource was created.&lt;br&gt;&lt;br&gt;Minimum api-version: 2022-03-01. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineScaleSetData"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetData VirtualMachineScaleSetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ComputeSku sku = null, ComputePlan plan = null, ManagedServiceIdentity identity = null, IEnumerable<string> zones = null, ExtendedLocation extendedLocation = null, VirtualMachineScaleSetUpgradePolicy upgradePolicy = null, AutomaticRepairsPolicy automaticRepairsPolicy = null, VirtualMachineScaleSetVmProfile virtualMachineProfile = null, string provisioningState = null, bool? overprovision = null, bool? doNotRunExtensionsOnOverprovisionedVms = null, string uniqueId = null, bool? singlePlacementGroup = null, bool? zoneBalance = null, int? platformFaultDomainCount = null, ResourceIdentifier proximityPlacementGroupId = null, ResourceIdentifier hostGroupId = null, AdditionalCapabilities additionalCapabilities = null, ScaleInPolicy scaleInPolicy = null, OrchestrationMode? orchestrationMode = null, SpotRestorePolicy spotRestorePolicy = null, DateTimeOffset? timeCreated = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();

            return new VirtualMachineScaleSetData(id, name, resourceType, systemData, tags, location, sku, plan, identity, zones?.ToList(), extendedLocation, upgradePolicy, automaticRepairsPolicy, virtualMachineProfile, provisioningState, overprovision, doNotRunExtensionsOnOverprovisionedVms, uniqueId, singlePlacementGroup, zoneBalance, platformFaultDomainCount, proximityPlacementGroupId != null ? ResourceManagerModelFactory.WritableSubResource(proximityPlacementGroupId) : null, hostGroupId != null ? ResourceManagerModelFactory.WritableSubResource(hostGroupId) : null, additionalCapabilities, scaleInPolicy, orchestrationMode, spotRestorePolicy, timeCreated);
        }

        /// <summary> Initializes a new instance of ComputeSku. </summary>
        /// <param name="name"> The sku name. </param>
        /// <param name="tier"> Specifies the tier of virtual machines in a scale set.&lt;br /&gt;&lt;br /&gt; Possible Values:&lt;br /&gt;&lt;br /&gt; **Standard**&lt;br /&gt;&lt;br /&gt; **Basic**. </param>
        /// <param name="capacity"> Specifies the number of virtual machines in the scale set. </param>
        /// <returns> A new <see cref="Models.ComputeSku"/> instance for mocking. </returns>
        public static ComputeSku ComputeSku(string name = null, string tier = null, long? capacity = null)
        {
            return new ComputeSku(name, tier, capacity);
        }

        /// <summary> Initializes a new instance of ComputePlan. </summary>
        /// <param name="name"> The plan ID. </param>
        /// <param name="publisher"> The publisher ID. </param>
        /// <param name="product"> Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. </param>
        /// <param name="promotionCode"> The promotion code. </param>
        /// <returns> A new <see cref="Models.ComputePlan"/> instance for mocking. </returns>
        public static ComputePlan ComputePlan(string name = null, string publisher = null, string product = null, string promotionCode = null)
        {
            return new ComputePlan(name, publisher, product, promotionCode);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetUpgradePolicy. </summary>
        /// <param name="mode"> Specifies the mode of an upgrade to virtual machines in the scale set.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.&lt;br /&gt;&lt;br /&gt; **Automatic** - All virtual machines in the scale set are  automatically updated at the same time. </param>
        /// <param name="rollingUpgradePolicy"> The configuration parameters used while performing a rolling upgrade. </param>
        /// <param name="automaticOSUpgradePolicy"> Configuration parameters used for performing automatic OS Upgrade. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetUpgradePolicy"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetUpgradePolicy VirtualMachineScaleSetUpgradePolicy(VirtualMachineScaleSetUpgradeMode? mode = null, RollingUpgradePolicy rollingUpgradePolicy = null, AutomaticOSUpgradePolicy automaticOSUpgradePolicy = null)
        {
            return new VirtualMachineScaleSetUpgradePolicy(mode, rollingUpgradePolicy, automaticOSUpgradePolicy);
        }

        /// <summary> Initializes a new instance of RollingUpgradePolicy. </summary>
        /// <param name="maxBatchInstancePercent"> The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter is 20%. </param>
        /// <param name="maxUnhealthyInstancePercent"> The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The default value for this parameter is 20%. </param>
        /// <param name="maxUnhealthyUpgradedInstancePercent"> The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The default value for this parameter is 20%. </param>
        /// <param name="pauseTimeBetweenBatches"> The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. The default value is 0 seconds (PT0S). </param>
        /// <param name="enableCrossZoneUpgrade"> Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. </param>
        /// <param name="prioritizeUnhealthyInstances"> Upgrade all unhealthy instances in a scale set before any healthy instances. </param>
        /// <returns> A new <see cref="Models.RollingUpgradePolicy"/> instance for mocking. </returns>
        public static RollingUpgradePolicy RollingUpgradePolicy(int? maxBatchInstancePercent = null, int? maxUnhealthyInstancePercent = null, int? maxUnhealthyUpgradedInstancePercent = null, string pauseTimeBetweenBatches = null, bool? enableCrossZoneUpgrade = null, bool? prioritizeUnhealthyInstances = null)
        {
            return new RollingUpgradePolicy(maxBatchInstancePercent, maxUnhealthyInstancePercent, maxUnhealthyUpgradedInstancePercent, pauseTimeBetweenBatches, enableCrossZoneUpgrade, prioritizeUnhealthyInstances);
        }

        /// <summary> Initializes a new instance of AutomaticOSUpgradePolicy. </summary>
        /// <param name="enableAutomaticOSUpgrade"> Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. Default value is false. &lt;br&gt;&lt;br&gt; If this is set to true for Windows based scale sets, [enableAutomaticUpdates](https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet) is automatically set to false and cannot be set to true. </param>
        /// <param name="disableAutomaticRollback"> Whether OS image rollback feature should be disabled. Default value is false. </param>
        /// <param name="useRollingUpgradePolicy"> Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS. </param>
        /// <returns> A new <see cref="Models.AutomaticOSUpgradePolicy"/> instance for mocking. </returns>
        public static AutomaticOSUpgradePolicy AutomaticOSUpgradePolicy(bool? enableAutomaticOSUpgrade = null, bool? disableAutomaticRollback = null, bool? useRollingUpgradePolicy = null)
        {
            return new AutomaticOSUpgradePolicy(enableAutomaticOSUpgrade, disableAutomaticRollback, useRollingUpgradePolicy);
        }

        /// <summary> Initializes a new instance of AutomaticRepairsPolicy. </summary>
        /// <param name="enabled"> Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false. </param>
        /// <param name="gracePeriod"> The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the state change has completed. This helps avoid premature or accidental repairs. The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum allowed grace period is 90 minutes (PT90M). </param>
        /// <param name="repairAction"> Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale set. Default value is replace. </param>
        /// <returns> A new <see cref="Models.AutomaticRepairsPolicy"/> instance for mocking. </returns>
        public static AutomaticRepairsPolicy AutomaticRepairsPolicy(bool? enabled = null, string gracePeriod = null, RepairAction? repairAction = null)
        {
            return new AutomaticRepairsPolicy(enabled, gracePeriod, repairAction);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmProfile. </summary>
        /// <param name="osProfile"> Specifies the operating system settings for the virtual machines in the scale set. </param>
        /// <param name="storageProfile"> Specifies the storage settings for the virtual machine disks. </param>
        /// <param name="networkProfile"> Specifies properties of the network interfaces of the virtual machines in the scale set. </param>
        /// <param name="securityProfile"> Specifies the Security related profile settings for the virtual machines in the scale set. </param>
        /// <param name="bootDiagnostics"> Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15. </param>
        /// <param name="extensionProfile"> Specifies a collection of settings for extensions installed on virtual machines in the scale set. </param>
        /// <param name="licenseType"> Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15. </param>
        /// <param name="priority"> Specifies the priority for the virtual machines in the scale set. &lt;br&gt;&lt;br&gt;Minimum api-version: 2017-10-30-preview. </param>
        /// <param name="evictionPolicy"> Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. &lt;br&gt;&lt;br&gt;For Azure Spot virtual machines, both &apos;Deallocate&apos; and &apos;Delete&apos; are supported and the minimum api-version is 2019-03-01. &lt;br&gt;&lt;br&gt;For Azure Spot scale sets, both &apos;Deallocate&apos; and &apos;Delete&apos; are supported and the minimum api-version is 2017-10-30-preview. </param>
        /// <param name="billingMaxPrice"> Specifies the billing related details of a Azure Spot VMSS. &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01. </param>
        /// <param name="scheduledEventsTerminateNotificationProfile"> Specifies Scheduled Event related configurations. </param>
        /// <param name="userData"> UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets in here. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-03-01. </param>
        /// <param name="capacityReservationGroupId"> Specifies the capacity reservation related details of a scale set. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-04-01. </param>
        /// <param name="galleryApplications"> Specifies the gallery applications that should be made available to the VM/VMSS. </param>
        /// <param name="hardwareVmSizeProperties"> Specifies the hardware profile related details of a scale set. &lt;br&gt;&lt;br&gt;Minimum api-version: 2022-03-01. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetVmProfile"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetVmProfile VirtualMachineScaleSetVmProfile(VirtualMachineScaleSetOSProfile osProfile = null, VirtualMachineScaleSetStorageProfile storageProfile = null, VirtualMachineScaleSetNetworkProfile networkProfile = null, SecurityProfile securityProfile = null, BootDiagnostics bootDiagnostics = null, VirtualMachineScaleSetExtensionProfile extensionProfile = null, string licenseType = null, VirtualMachinePriorityType? priority = null, VirtualMachineEvictionPolicyType? evictionPolicy = null, double? billingMaxPrice = null, TerminateNotificationProfile scheduledEventsTerminateNotificationProfile = null, string userData = null, ResourceIdentifier capacityReservationGroupId = null, IEnumerable<VirtualMachineGalleryApplication> galleryApplications = null, VirtualMachineSizeProperties hardwareVmSizeProperties = null)
        {
            galleryApplications ??= new List<VirtualMachineGalleryApplication>();

            return new VirtualMachineScaleSetVmProfile(osProfile, storageProfile, networkProfile, securityProfile, bootDiagnostics != null ? new DiagnosticsProfile(bootDiagnostics) : null, extensionProfile, licenseType, priority, evictionPolicy, billingMaxPrice != null ? new BillingProfile(billingMaxPrice) : null, scheduledEventsTerminateNotificationProfile != null ? new ScheduledEventsProfile(scheduledEventsTerminateNotificationProfile) : null, userData, capacityReservationGroupId != null ? new CapacityReservationProfile(ResourceManagerModelFactory.WritableSubResource(capacityReservationGroupId)) : null, galleryApplications != null ? new ApplicationProfile(galleryApplications?.ToList()) : null, hardwareVmSizeProperties != null ? new VirtualMachineScaleSetHardwareProfile(hardwareVmSizeProperties) : null);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetOSProfile. </summary>
        /// <param name="computerNamePrefix"> Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to 15 characters long. </param>
        /// <param name="adminUsername"> Specifies the name of the administrator account. &lt;br&gt;&lt;br&gt; **Windows-only restriction:** Cannot end in &quot;.&quot; &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;administrator&quot;, &quot;admin&quot;, &quot;user&quot;, &quot;user1&quot;, &quot;test&quot;, &quot;user2&quot;, &quot;test1&quot;, &quot;user3&quot;, &quot;admin1&quot;, &quot;1&quot;, &quot;123&quot;, &quot;a&quot;, &quot;actuser&quot;, &quot;adm&quot;, &quot;admin2&quot;, &quot;aspnet&quot;, &quot;backup&quot;, &quot;console&quot;, &quot;david&quot;, &quot;guest&quot;, &quot;john&quot;, &quot;owner&quot;, &quot;root&quot;, &quot;server&quot;, &quot;sql&quot;, &quot;support&quot;, &quot;support_388945a0&quot;, &quot;sys&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;user4&quot;, &quot;user5&quot;. &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 1  character &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 20 characters. </param>
        /// <param name="adminPassword"> Specifies the password of the administrator account. &lt;br&gt;&lt;br&gt; **Minimum-length (Windows):** 8 characters &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 6 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 123 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 72 characters &lt;br&gt;&lt;br&gt; **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled &lt;br&gt; Has lower characters &lt;br&gt;Has upper characters &lt;br&gt; Has a digit &lt;br&gt; Has a special character (Regex match [\W_]) &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;abc@123&quot;, &quot;P@$$w0rd&quot;, &quot;P@ssw0rd&quot;, &quot;P@ssword123&quot;, &quot;Pa$$word&quot;, &quot;pass@word1&quot;, &quot;Password!&quot;, &quot;Password1&quot;, &quot;Password22&quot;, &quot;iloveyou!&quot; &lt;br&gt;&lt;br&gt; For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) &lt;br&gt;&lt;br&gt; For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection). </param>
        /// <param name="customData"> Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. &lt;br&gt;&lt;br&gt; For using cloud-init for your VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init). </param>
        /// <param name="windowsConfiguration"> Specifies Windows operating system settings on the virtual machine. </param>
        /// <param name="linuxConfiguration"> Specifies the Linux operating system settings on the virtual machine. &lt;br&gt;&lt;br&gt;For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros). </param>
        /// <param name="secrets"> Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). </param>
        /// <param name="allowExtensionOperations"> Specifies whether extension operations should be allowed on the virtual machine scale set. &lt;br&gt;&lt;br&gt;This may only be set to False when no extensions are present on the virtual machine scale set. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetOSProfile"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetOSProfile VirtualMachineScaleSetOSProfile(string computerNamePrefix = null, string adminUsername = null, string adminPassword = null, string customData = null, WindowsConfiguration windowsConfiguration = null, LinuxConfiguration linuxConfiguration = null, IEnumerable<VaultSecretGroup> secrets = null, bool? allowExtensionOperations = null)
        {
            secrets ??= new List<VaultSecretGroup>();

            return new VirtualMachineScaleSetOSProfile(computerNamePrefix, adminUsername, adminPassword, customData, windowsConfiguration, linuxConfiguration, secrets?.ToList(), allowExtensionOperations);
        }

        /// <summary> Initializes a new instance of WindowsConfiguration. </summary>
        /// <param name="provisionVmAgent"> Indicates whether virtual machine agent should be provisioned on the virtual machine. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later. </param>
        /// <param name="enableAutomaticUpdates"> Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. &lt;br&gt;&lt;br&gt; For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning. </param>
        /// <param name="timeZone"> Specifies the time zone of the virtual machine. e.g. &quot;Pacific Standard Time&quot;. &lt;br&gt;&lt;br&gt; Possible values can be [TimeZoneInfo.Id](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id) value from time zones returned by [TimeZoneInfo.GetSystemTimeZones](https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones). </param>
        /// <param name="additionalUnattendContent"> Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. </param>
        /// <param name="patchSettings"> [Preview Feature] Specifies settings related to VM Guest Patching on Windows. </param>
        /// <param name="winRMListeners"> Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. </param>
        /// <returns> A new <see cref="Models.WindowsConfiguration"/> instance for mocking. </returns>
        public static WindowsConfiguration WindowsConfiguration(bool? provisionVmAgent = null, bool? enableAutomaticUpdates = null, string timeZone = null, IEnumerable<AdditionalUnattendContent> additionalUnattendContent = null, PatchSettings patchSettings = null, IEnumerable<WinRMListener> winRMListeners = null)
        {
            additionalUnattendContent ??= new List<AdditionalUnattendContent>();
            winRMListeners ??= new List<WinRMListener>();

            return new WindowsConfiguration(provisionVmAgent, enableAutomaticUpdates, timeZone, additionalUnattendContent?.ToList(), patchSettings, winRMListeners != null ? new WinRMConfiguration(winRMListeners?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of AdditionalUnattendContent. </summary>
        /// <param name="passName"> The pass name. Currently, the only allowable value is OobeSystem. </param>
        /// <param name="componentName"> The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup. </param>
        /// <param name="settingName"> Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon. </param>
        /// <param name="content"> Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted. </param>
        /// <returns> A new <see cref="Models.AdditionalUnattendContent"/> instance for mocking. </returns>
        public static AdditionalUnattendContent AdditionalUnattendContent(PassName? passName = null, ComponentName? componentName = null, SettingName? settingName = null, string content = null)
        {
            return new AdditionalUnattendContent(passName, componentName, settingName, content);
        }

        /// <summary> Initializes a new instance of PatchSettings. </summary>
        /// <param name="patchMode"> Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false&lt;br /&gt;&lt;br /&gt; **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true. </param>
        /// <param name="enableHotpatching"> Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the &apos;provisionVMAgent&apos; must be set to true and &apos;patchMode&apos; must be set to &apos;AutomaticByPlatform&apos;. </param>
        /// <param name="assessmentMode"> Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - You control the timing of patch assessments on a virtual machine.&lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true. </param>
        /// <param name="automaticByPlatformRebootSetting"> Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Windows. </param>
        /// <returns> A new <see cref="Models.PatchSettings"/> instance for mocking. </returns>
        public static PatchSettings PatchSettings(WindowsVmGuestPatchMode? patchMode = null, bool? enableHotpatching = null, WindowsPatchAssessmentMode? assessmentMode = null, WindowsVmGuestPatchAutomaticByPlatformRebootSetting? automaticByPlatformRebootSetting = null)
        {
            return new PatchSettings(patchMode, enableHotpatching, assessmentMode, automaticByPlatformRebootSetting != null ? new WindowsVmGuestPatchAutomaticByPlatformSettings(automaticByPlatformRebootSetting) : null);
        }

        /// <summary> Initializes a new instance of WinRMListener. </summary>
        /// <param name="protocol"> Specifies the protocol of WinRM listener. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;**http** &lt;br&gt;&lt;br&gt; **https**. </param>
        /// <param name="certificateUri"> This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: &lt;br&gt;&lt;br&gt; {&lt;br&gt;  &quot;data&quot;:&quot;&lt;Base64-encoded-certificate&gt;&quot;,&lt;br&gt;  &quot;dataType&quot;:&quot;pfx&quot;,&lt;br&gt;  &quot;password&quot;:&quot;&lt;pfx-file-password&gt;&quot;&lt;br&gt;} &lt;br&gt; To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). </param>
        /// <returns> A new <see cref="Models.WinRMListener"/> instance for mocking. </returns>
        public static WinRMListener WinRMListener(WinRMListenerProtocolType? protocol = null, Uri certificateUri = null)
        {
            return new WinRMListener(protocol, certificateUri);
        }

        /// <summary> Initializes a new instance of LinuxConfiguration. </summary>
        /// <param name="disablePasswordAuthentication"> Specifies whether password authentication should be disabled. </param>
        /// <param name="sshPublicKeys"> Specifies the ssh key configuration for a Linux OS. </param>
        /// <param name="provisionVmAgent"> Indicates whether virtual machine agent should be provisioned on the virtual machine. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body, default behavior is to set it to true.  This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later. </param>
        /// <param name="patchSettings"> [Preview Feature] Specifies settings related to VM Guest Patching on Linux. </param>
        /// <returns> A new <see cref="Models.LinuxConfiguration"/> instance for mocking. </returns>
        public static LinuxConfiguration LinuxConfiguration(bool? disablePasswordAuthentication = null, IEnumerable<SshPublicKeyConfiguration> sshPublicKeys = null, bool? provisionVmAgent = null, LinuxPatchSettings patchSettings = null)
        {
            sshPublicKeys ??= new List<SshPublicKeyConfiguration>();

            return new LinuxConfiguration(disablePasswordAuthentication, sshPublicKeys != null ? new SshConfiguration(sshPublicKeys?.ToList()) : null, provisionVmAgent, patchSettings);
        }

        /// <summary> Initializes a new instance of SshPublicKeyConfiguration. </summary>
        /// <param name="path"> Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys. </param>
        /// <param name="keyData"> SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. &lt;br&gt;&lt;br&gt; For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed). </param>
        /// <returns> A new <see cref="Models.SshPublicKeyConfiguration"/> instance for mocking. </returns>
        public static SshPublicKeyConfiguration SshPublicKeyConfiguration(string path = null, string keyData = null)
        {
            return new SshPublicKeyConfiguration(path, keyData);
        }

        /// <summary> Initializes a new instance of LinuxPatchSettings. </summary>
        /// <param name="patchMode"> Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - The virtual machine&apos;s default patching configuration is used. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true. </param>
        /// <param name="assessmentMode"> Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - You control the timing of patch assessments on a virtual machine. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true. </param>
        /// <param name="automaticByPlatformRebootSetting"> Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux. </param>
        /// <returns> A new <see cref="Models.LinuxPatchSettings"/> instance for mocking. </returns>
        public static LinuxPatchSettings LinuxPatchSettings(LinuxVmGuestPatchMode? patchMode = null, LinuxPatchAssessmentMode? assessmentMode = null, LinuxVmGuestPatchAutomaticByPlatformRebootSetting? automaticByPlatformRebootSetting = null)
        {
            return new LinuxPatchSettings(patchMode, assessmentMode, automaticByPlatformRebootSetting != null ? new LinuxVmGuestPatchAutomaticByPlatformSettings(automaticByPlatformRebootSetting) : null);
        }

        /// <summary> Initializes a new instance of VaultSecretGroup. </summary>
        /// <param name="sourceVaultId"> The relative URL of the Key Vault containing all of the certificates in VaultCertificates. </param>
        /// <param name="vaultCertificates"> The list of key vault references in SourceVault which contain certificates. </param>
        /// <returns> A new <see cref="Models.VaultSecretGroup"/> instance for mocking. </returns>
        public static VaultSecretGroup VaultSecretGroup(ResourceIdentifier sourceVaultId = null, IEnumerable<VaultCertificate> vaultCertificates = null)
        {
            vaultCertificates ??= new List<VaultCertificate>();

            return new VaultSecretGroup(sourceVaultId != null ? ResourceManagerModelFactory.WritableSubResource(sourceVaultId) : null, vaultCertificates?.ToList());
        }

        /// <summary> Initializes a new instance of ComputeWriteableSubResourceData. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <returns> A new <see cref="Models.ComputeWriteableSubResourceData"/> instance for mocking. </returns>
        public static ComputeWriteableSubResourceData ComputeWriteableSubResourceData(ResourceIdentifier id = null)
        {
            return new ComputeWriteableSubResourceData(id);
        }

        /// <summary> Initializes a new instance of VaultCertificate. </summary>
        /// <param name="certificateUri"> This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault, see [Add a key or secret to the key vault](https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add). In this case, your certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded in UTF-8: &lt;br&gt;&lt;br&gt; {&lt;br&gt;  &quot;data&quot;:&quot;&lt;Base64-encoded-certificate&gt;&quot;,&lt;br&gt;  &quot;dataType&quot;:&quot;pfx&quot;,&lt;br&gt;  &quot;password&quot;:&quot;&lt;pfx-file-password&gt;&quot;&lt;br&gt;} &lt;br&gt; To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). </param>
        /// <param name="certificateStore"> For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. &lt;br&gt;&lt;br&gt;For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name &amp;lt;UppercaseThumbprint&amp;gt;.crt for the X509 certificate file and &amp;lt;UppercaseThumbprint&amp;gt;.prv for private key. Both of these files are .pem formatted. </param>
        /// <returns> A new <see cref="Models.VaultCertificate"/> instance for mocking. </returns>
        public static VaultCertificate VaultCertificate(Uri certificateUri = null, string certificateStore = null)
        {
            return new VaultCertificate(certificateUri, certificateStore);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetStorageProfile. </summary>
        /// <param name="imageReference"> Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. </param>
        /// <param name="osDisk"> Specifies information about the operating system disk used by the virtual machines in the scale set. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). </param>
        /// <param name="dataDisks"> Specifies the parameters that are used to add data disks to the virtual machines in the scale set. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetStorageProfile"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetStorageProfile VirtualMachineScaleSetStorageProfile(ImageReference imageReference = null, VirtualMachineScaleSetOSDisk osDisk = null, IEnumerable<VirtualMachineScaleSetDataDisk> dataDisks = null)
        {
            dataDisks ??= new List<VirtualMachineScaleSetDataDisk>();

            return new VirtualMachineScaleSetStorageProfile(imageReference, osDisk, dataDisks?.ToList());
        }

        /// <summary> Initializes a new instance of ImageReference. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="publisher"> The image publisher. </param>
        /// <param name="offer"> Specifies the offer of the platform image or marketplace image used to create the virtual machine. </param>
        /// <param name="sku"> The image SKU. </param>
        /// <param name="version"> Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or &apos;latest&apos;. Major, Minor, and Build are decimal numbers. Specify &apos;latest&apos; to use the latest version of an image available at deploy time. Even if you use &apos;latest&apos;, the VM image will not automatically update after deploy time even if a new version becomes available. Please do not use field &apos;version&apos; for gallery image deployment, gallery image should always use &apos;id&apos; field for deployment, to use &apos;latest&apos; version of gallery image, just set &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}&apos; in the &apos;id&apos; field without version input. </param>
        /// <param name="exactVersion"> Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual machine. This readonly field differs from &apos;version&apos;, only if the value specified in &apos;version&apos; field is &apos;latest&apos;. </param>
        /// <param name="sharedGalleryImageUniqueId"> Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call. </param>
        /// <param name="communityGalleryImageId"> Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call. </param>
        /// <returns> A new <see cref="Models.ImageReference"/> instance for mocking. </returns>
        public static ImageReference ImageReference(ResourceIdentifier id = null, string publisher = null, string offer = null, string sku = null, string version = null, string exactVersion = null, string sharedGalleryImageUniqueId = null, string communityGalleryImageId = null)
        {
            return new ImageReference(id, publisher, offer, sku, version, exactVersion, sharedGalleryImageUniqueId, communityGalleryImageId);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetOSDisk. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="writeAcceleratorEnabled"> Specifies whether writeAccelerator should be enabled or disabled on the disk. </param>
        /// <param name="createOption"> Specifies how the virtual machines in the scale set should be created.&lt;br&gt;&lt;br&gt; The only allowed value is: **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. </param>
        /// <param name="diffDiskSettings"> Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set. </param>
        /// <param name="diskSizeGB"> Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="imageUri"> Specifies information about the unmanaged user image to base the scale set on. </param>
        /// <param name="vhdContainers"> Specifies the container urls that are used to store operating system disks for the scale set. </param>
        /// <param name="managedDisk"> The managed disk parameters. </param>
        /// <param name="deleteOption"> Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only). &lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the OS disk is deleted when VMSS Flex VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the OS disk is retained after VMSS Flex VM is deleted. &lt;br&gt;&lt;br&gt; The default value is set to **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetOSDisk"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetOSDisk VirtualMachineScaleSetOSDisk(string name = null, CachingType? caching = null, bool? writeAcceleratorEnabled = null, DiskCreateOptionType createOption = default, DiffDiskSettings diffDiskSettings = null, int? diskSizeGB = null, SupportedOperatingSystemType? osType = null, Uri imageUri = null, IEnumerable<string> vhdContainers = null, VirtualMachineScaleSetManagedDisk managedDisk = null, DiskDeleteOptionType? deleteOption = null)
        {
            vhdContainers ??= new List<string>();

            return new VirtualMachineScaleSetOSDisk(name, caching, writeAcceleratorEnabled, createOption, diffDiskSettings, diskSizeGB, osType, imageUri != null ? new VirtualHardDisk(imageUri) : null, vhdContainers?.ToList(), managedDisk, deleteOption);
        }

        /// <summary> Initializes a new instance of DiffDiskSettings. </summary>
        /// <param name="option"> Specifies the ephemeral disk settings for operating system disk. </param>
        /// <param name="placement"> Specifies the ephemeral disk placement for operating system disk.&lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **CacheDisk** &lt;br&gt;&lt;br&gt; **ResourceDisk** &lt;br&gt;&lt;br&gt; Default: **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** is used.&lt;br&gt;&lt;br&gt; Refer to VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a cache disk. </param>
        /// <returns> A new <see cref="Models.DiffDiskSettings"/> instance for mocking. </returns>
        public static DiffDiskSettings DiffDiskSettings(DiffDiskOption? option = null, DiffDiskPlacement? placement = null)
        {
            return new DiffDiskSettings(option, placement);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetManagedDisk. </summary>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSetId"> Specifies the customer managed disk encryption set resource id for the managed disk. </param>
        /// <param name="securityProfile"> Specifies the security profile for the managed disk. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetManagedDisk"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetManagedDisk VirtualMachineScaleSetManagedDisk(StorageAccountType? storageAccountType = null, ResourceIdentifier diskEncryptionSetId = null, VirtualMachineDiskSecurityProfile securityProfile = null)
        {
            return new VirtualMachineScaleSetManagedDisk(storageAccountType, diskEncryptionSetId != null ? ResourceManagerModelFactory.WritableSubResource(diskEncryptionSetId) : null, securityProfile);
        }

        /// <summary> Initializes a new instance of VirtualMachineDiskSecurityProfile. </summary>
        /// <param name="securityEncryptionType"> Specifies the EncryptionType of the managed disk. &lt;br&gt; It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, and VMGuestStateOnly for encryption of just the VMGuestState blob. &lt;br&gt;&lt;br&gt; NOTE: It can be set for only Confidential VMs. </param>
        /// <param name="diskEncryptionSetId"> Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob. </param>
        /// <returns> A new <see cref="Models.VirtualMachineDiskSecurityProfile"/> instance for mocking. </returns>
        public static VirtualMachineDiskSecurityProfile VirtualMachineDiskSecurityProfile(SecurityEncryptionType? securityEncryptionType = null, ResourceIdentifier diskEncryptionSetId = null)
        {
            return new VirtualMachineDiskSecurityProfile(securityEncryptionType, diskEncryptionSetId != null ? ResourceManagerModelFactory.WritableSubResource(diskEncryptionSetId) : null);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetDataDisk. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="lun"> Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="writeAcceleratorEnabled"> Specifies whether writeAccelerator should be enabled or disabled on the disk. </param>
        /// <param name="createOption"> The create option. </param>
        /// <param name="diskSizeGB"> Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="managedDisk"> The managed disk parameters. </param>
        /// <param name="diskIopsReadWrite"> Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB. </param>
        /// <param name="diskMBpsReadWrite"> Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB. </param>
        /// <param name="deleteOption"> Specifies whether data disk should be deleted or detached upon VMSS Flex deletion (This feature is available for VMSS with Flexible OrchestrationMode only).&lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the data disk is deleted when the VMSS Flex VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the data disk is retained after VMSS Flex VM is deleted.&lt;br&gt;&lt;br&gt; The default value is set to **Delete**. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetDataDisk"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetDataDisk VirtualMachineScaleSetDataDisk(string name = null, int lun = default, CachingType? caching = null, bool? writeAcceleratorEnabled = null, DiskCreateOptionType createOption = default, int? diskSizeGB = null, VirtualMachineScaleSetManagedDisk managedDisk = null, long? diskIopsReadWrite = null, long? diskMBpsReadWrite = null, DiskDeleteOptionType? deleteOption = null)
        {
            return new VirtualMachineScaleSetDataDisk(name, lun, caching, writeAcceleratorEnabled, createOption, diskSizeGB, managedDisk, diskIopsReadWrite, diskMBpsReadWrite, deleteOption);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetNetworkProfile. </summary>
        /// <param name="healthProbeId"> A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The reference will be in the form: &apos;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}&apos;. </param>
        /// <param name="networkInterfaceConfigurations"> The list of network configurations. </param>
        /// <param name="networkApiVersion"> specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations for Virtual Machine Scale Set with orchestration mode &apos;Flexible&apos;. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetNetworkProfile"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetNetworkProfile VirtualMachineScaleSetNetworkProfile(ResourceIdentifier healthProbeId = null, IEnumerable<VirtualMachineScaleSetNetworkConfiguration> networkInterfaceConfigurations = null, NetworkApiVersion? networkApiVersion = null)
        {
            networkInterfaceConfigurations ??= new List<VirtualMachineScaleSetNetworkConfiguration>();

            return new VirtualMachineScaleSetNetworkProfile(healthProbeId != null ? ResourceManagerModelFactory.WritableSubResource(healthProbeId) : null, networkInterfaceConfigurations?.ToList(), networkApiVersion);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetNetworkConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The network configuration name. </param>
        /// <param name="primary"> Specifies the primary network interface in case the virtual machine has more than 1 network interface. </param>
        /// <param name="enableAcceleratedNetworking"> Specifies whether the network interface is accelerated networking-enabled. </param>
        /// <param name="enableFpga"> Specifies whether the network interface is FPGA networking-enabled. </param>
        /// <param name="networkSecurityGroupId"> The network security group. </param>
        /// <param name="dnsServers"> The dns settings to be applied on the network interfaces. </param>
        /// <param name="ipConfigurations"> Specifies the IP configurations of the network interface. </param>
        /// <param name="enableIPForwarding"> Whether IP forwarding enabled on this NIC. </param>
        /// <param name="deleteOption"> Specify what happens to the network interface when the VM is deleted. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetNetworkConfiguration"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetNetworkConfiguration VirtualMachineScaleSetNetworkConfiguration(ResourceIdentifier id = null, string name = null, bool? primary = null, bool? enableAcceleratedNetworking = null, bool? enableFpga = null, ResourceIdentifier networkSecurityGroupId = null, IEnumerable<string> dnsServers = null, IEnumerable<VirtualMachineScaleSetIPConfiguration> ipConfigurations = null, bool? enableIPForwarding = null, ComputeDeleteOption? deleteOption = null)
        {
            dnsServers ??= new List<string>();
            ipConfigurations ??= new List<VirtualMachineScaleSetIPConfiguration>();

            return new VirtualMachineScaleSetNetworkConfiguration(id, name, primary, enableAcceleratedNetworking, enableFpga, networkSecurityGroupId != null ? ResourceManagerModelFactory.WritableSubResource(networkSecurityGroupId) : null, dnsServers != null ? new VirtualMachineScaleSetNetworkConfigurationDnsSettings(dnsServers?.ToList()) : null, ipConfigurations?.ToList(), enableIPForwarding, deleteOption);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetIPConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The IP configuration name. </param>
        /// <param name="subnetId"> Specifies the identifier of the subnet. </param>
        /// <param name="primary"> Specifies the primary network interface in case the virtual machine has more than 1 network interface. </param>
        /// <param name="publicIPAddressConfiguration"> The publicIPAddressConfiguration. </param>
        /// <param name="privateIPAddressVersion"> Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </param>
        /// <param name="applicationGatewayBackendAddressPools"> Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address pools of multiple application gateways. Multiple scale sets cannot use the same application gateway. </param>
        /// <param name="applicationSecurityGroups"> Specifies an array of references to application security group. </param>
        /// <param name="loadBalancerBackendAddressPools"> Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer. </param>
        /// <param name="loadBalancerInboundNatPools"> Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools of one public and one internal load balancer. Multiple scale sets cannot use the same basic sku load balancer. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetIPConfiguration"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetIPConfiguration VirtualMachineScaleSetIPConfiguration(ResourceIdentifier id = null, string name = null, ResourceIdentifier subnetId = null, bool? primary = null, VirtualMachineScaleSetPublicIPAddressConfiguration publicIPAddressConfiguration = null, IPVersion? privateIPAddressVersion = null, IEnumerable<WritableSubResource> applicationGatewayBackendAddressPools = null, IEnumerable<WritableSubResource> applicationSecurityGroups = null, IEnumerable<WritableSubResource> loadBalancerBackendAddressPools = null, IEnumerable<WritableSubResource> loadBalancerInboundNatPools = null)
        {
            applicationGatewayBackendAddressPools ??= new List<WritableSubResource>();
            applicationSecurityGroups ??= new List<WritableSubResource>();
            loadBalancerBackendAddressPools ??= new List<WritableSubResource>();
            loadBalancerInboundNatPools ??= new List<WritableSubResource>();

            return new VirtualMachineScaleSetIPConfiguration(id, name, subnetId != null ? ResourceManagerModelFactory.WritableSubResource(subnetId) : null, primary, publicIPAddressConfiguration, privateIPAddressVersion, applicationGatewayBackendAddressPools?.ToList(), applicationSecurityGroups?.ToList(), loadBalancerBackendAddressPools?.ToList(), loadBalancerInboundNatPools?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetPublicIPAddressConfiguration. </summary>
        /// <param name="name"> The publicIP address configuration name. </param>
        /// <param name="sku"> Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible. </param>
        /// <param name="idleTimeoutInMinutes"> The idle timeout of the public IP address. </param>
        /// <param name="dnsDomainNameLabel"> The dns settings to be applied on the publicIP addresses . </param>
        /// <param name="ipTags"> The list of IP tags associated with the public IP address. </param>
        /// <param name="publicIPPrefixId"> The PublicIPPrefix from which to allocate publicIP addresses. </param>
        /// <param name="publicIPAddressVersion"> Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </param>
        /// <param name="deleteOption"> Specify what happens to the public IP when the VM is deleted. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetPublicIPAddressConfiguration"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetPublicIPAddressConfiguration VirtualMachineScaleSetPublicIPAddressConfiguration(string name = null, ComputePublicIPAddressSku sku = null, int? idleTimeoutInMinutes = null, string dnsDomainNameLabel = null, IEnumerable<VirtualMachineScaleSetIPTag> ipTags = null, ResourceIdentifier publicIPPrefixId = null, IPVersion? publicIPAddressVersion = null, ComputeDeleteOption? deleteOption = null)
        {
            ipTags ??= new List<VirtualMachineScaleSetIPTag>();

            return new VirtualMachineScaleSetPublicIPAddressConfiguration(name, sku, idleTimeoutInMinutes, dnsDomainNameLabel != null ? new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings(dnsDomainNameLabel) : null, ipTags?.ToList(), publicIPPrefixId != null ? ResourceManagerModelFactory.WritableSubResource(publicIPPrefixId) : null, publicIPAddressVersion, deleteOption);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetIPTag. </summary>
        /// <param name="ipTagType"> IP tag type. Example: FirstPartyUsage. </param>
        /// <param name="tag"> IP tag associated with the public IP. Example: SQL, Storage etc. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetIPTag"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetIPTag VirtualMachineScaleSetIPTag(string ipTagType = null, string tag = null)
        {
            return new VirtualMachineScaleSetIPTag(ipTagType, tag);
        }

        /// <summary> Initializes a new instance of ComputePublicIPAddressSku. </summary>
        /// <param name="name"> Specify public IP sku name. </param>
        /// <param name="tier"> Specify public IP sku tier. </param>
        /// <returns> A new <see cref="Models.ComputePublicIPAddressSku"/> instance for mocking. </returns>
        public static ComputePublicIPAddressSku ComputePublicIPAddressSku(ComputePublicIPAddressSkuName? name = null, ComputePublicIPAddressSkuTier? tier = null)
        {
            return new ComputePublicIPAddressSku(name, tier);
        }

        /// <summary> Initializes a new instance of SecurityProfile. </summary>
        /// <param name="uefiSettings"> Specifies the security settings like secure boot and vTPM used while creating the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01. </param>
        /// <param name="encryptionAtHost"> This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. &lt;br&gt;&lt;br&gt; Default: The Encryption at host will be disabled unless this property is set to true for the resource. </param>
        /// <param name="securityType"> Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. &lt;br&gt;&lt;br&gt; Default: UefiSettings will not be enabled unless this property is set. </param>
        /// <returns> A new <see cref="Models.SecurityProfile"/> instance for mocking. </returns>
        public static SecurityProfile SecurityProfile(UefiSettings uefiSettings = null, bool? encryptionAtHost = null, SecurityType? securityType = null)
        {
            return new SecurityProfile(uefiSettings, encryptionAtHost, securityType);
        }

        /// <summary> Initializes a new instance of UefiSettings. </summary>
        /// <param name="isSecureBootEnabled"> Specifies whether secure boot should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01. </param>
        /// <param name="isVirtualTpmEnabled"> Specifies whether vTPM should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01. </param>
        /// <returns> A new <see cref="Models.UefiSettings"/> instance for mocking. </returns>
        public static UefiSettings UefiSettings(bool? isSecureBootEnabled = null, bool? isVirtualTpmEnabled = null)
        {
            return new UefiSettings(isSecureBootEnabled, isVirtualTpmEnabled);
        }

        /// <summary> Initializes a new instance of BootDiagnostics. </summary>
        /// <param name="enabled"> Whether boot diagnostics should be enabled on the Virtual Machine. </param>
        /// <param name="storageUri"> Uri of the storage account to use for placing the console output and screenshot. &lt;br&gt;&lt;br&gt;If storageUri is not specified while enabling boot diagnostics, managed storage will be used. </param>
        /// <returns> A new <see cref="Models.BootDiagnostics"/> instance for mocking. </returns>
        public static BootDiagnostics BootDiagnostics(bool? enabled = null, Uri storageUri = null)
        {
            return new BootDiagnostics(enabled, storageUri);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetExtensionProfile. </summary>
        /// <param name="extensions"> The virtual machine scale set child extension resources. </param>
        /// <param name="extensionsTimeBudget"> Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version: 2020-06-01. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetExtensionProfile"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetExtensionProfile VirtualMachineScaleSetExtensionProfile(IEnumerable<VirtualMachineScaleSetExtensionData> extensions = null, string extensionsTimeBudget = null)
        {
            extensions ??= new List<VirtualMachineScaleSetExtensionData>();

            return new VirtualMachineScaleSetExtensionProfile(extensions?.ToList(), extensionsTimeBudget);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetExtensionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="forceUpdateTag"> If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="extensionType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="autoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="enableAutomaticUpgrade"> Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. </param>
        /// <param name="settings"> Json formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="provisionAfterExtensions"> Collection of extension names after which this extension needs to be provisioned. </param>
        /// <param name="suppressFailures"> Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. </param>
        /// <param name="protectedSettingsFromKeyVault"> The extensions protected settings that are passed by reference, and consumed from key vault. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineScaleSetExtensionData"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetExtensionData VirtualMachineScaleSetExtensionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string forceUpdateTag = null, string publisher = null, string extensionType = null, string typeHandlerVersion = null, bool? autoUpgradeMinorVersion = null, bool? enableAutomaticUpgrade = null, BinaryData settings = null, BinaryData protectedSettings = null, string provisioningState = null, IEnumerable<string> provisionAfterExtensions = null, bool? suppressFailures = null, BinaryData protectedSettingsFromKeyVault = null)
        {
            provisionAfterExtensions ??= new List<string>();

            return new VirtualMachineScaleSetExtensionData(id, name, resourceType, systemData, forceUpdateTag, publisher, extensionType, typeHandlerVersion, autoUpgradeMinorVersion, enableAutomaticUpgrade, settings, protectedSettings, provisioningState, provisionAfterExtensions?.ToList(), suppressFailures, protectedSettingsFromKeyVault);
        }

        /// <summary> Initializes a new instance of TerminateNotificationProfile. </summary>
        /// <param name="notBeforeTimeout"> Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event before the event is auto approved (timed out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes (PT5M). </param>
        /// <param name="enable"> Specifies whether the Terminate Scheduled event is enabled or disabled. </param>
        /// <returns> A new <see cref="Models.TerminateNotificationProfile"/> instance for mocking. </returns>
        public static TerminateNotificationProfile TerminateNotificationProfile(string notBeforeTimeout = null, bool? enable = null)
        {
            return new TerminateNotificationProfile(notBeforeTimeout, enable);
        }

        /// <summary> Initializes a new instance of VirtualMachineGalleryApplication. </summary>
        /// <param name="tags"> Optional, Specifies a passthrough value for more generic context. </param>
        /// <param name="order"> Optional, Specifies the order in which the packages have to be installed. </param>
        /// <param name="packageReferenceId"> Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}. </param>
        /// <param name="configurationReference"> Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided. </param>
        /// <param name="treatFailureAsDeploymentFailure"> Optional, If true, any failure for any operation in the VmApplication will fail the deployment. </param>
        /// <param name="enableAutomaticUpgrade"> If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS. </param>
        /// <returns> A new <see cref="Models.VirtualMachineGalleryApplication"/> instance for mocking. </returns>
        public static VirtualMachineGalleryApplication VirtualMachineGalleryApplication(string tags = null, int? order = null, string packageReferenceId = null, string configurationReference = null, bool? treatFailureAsDeploymentFailure = null, bool? enableAutomaticUpgrade = null)
        {
            return new VirtualMachineGalleryApplication(tags, order, packageReferenceId, configurationReference, treatFailureAsDeploymentFailure, enableAutomaticUpgrade);
        }

        /// <summary> Initializes a new instance of VirtualMachineSizeProperties. </summary>
        /// <param name="vCpusAvailable"> Specifies the number of vCPUs available for the VM. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list) . </param>
        /// <param name="vCpusPerCore"> Specifies the vCPU to physical core ratio. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list) &lt;br&gt;&lt;br&gt; Setting this property to 1 also means that hyper-threading is disabled. </param>
        /// <returns> A new <see cref="Models.VirtualMachineSizeProperties"/> instance for mocking. </returns>
        public static VirtualMachineSizeProperties VirtualMachineSizeProperties(int? vCpusAvailable = null, int? vCpusPerCore = null)
        {
            return new VirtualMachineSizeProperties(vCpusAvailable, vCpusPerCore);
        }

        /// <summary> Initializes a new instance of AdditionalCapabilities. </summary>
        /// <param name="ultraSsdEnabled"> The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled. </param>
        /// <param name="hibernationEnabled"> The flag that enables or disables hibernation capability on the VM. </param>
        /// <returns> A new <see cref="Models.AdditionalCapabilities"/> instance for mocking. </returns>
        public static AdditionalCapabilities AdditionalCapabilities(bool? ultraSsdEnabled = null, bool? hibernationEnabled = null)
        {
            return new AdditionalCapabilities(ultraSsdEnabled, hibernationEnabled);
        }

        /// <summary> Initializes a new instance of ScaleInPolicy. </summary>
        /// <param name="rules"> The rules to be followed when scaling-in a virtual machine scale set. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Default** When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in. &lt;br&gt;&lt;br&gt; **OldestVM** When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will be chosen for removal. &lt;br&gt;&lt;br&gt; **NewestVM** When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will be chosen for removal. &lt;br&gt;&lt;br&gt;. </param>
        /// <param name="forceDeletion"> This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature in Preview). </param>
        /// <returns> A new <see cref="Models.ScaleInPolicy"/> instance for mocking. </returns>
        public static ScaleInPolicy ScaleInPolicy(IEnumerable<VirtualMachineScaleSetScaleInRule> rules = null, bool? forceDeletion = null)
        {
            rules ??= new List<VirtualMachineScaleSetScaleInRule>();

            return new ScaleInPolicy(rules?.ToList(), forceDeletion);
        }

        /// <summary> Initializes a new instance of SpotRestorePolicy. </summary>
        /// <param name="enabled"> Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based on capacity availability and pricing constraints. </param>
        /// <param name="restoreTimeout"> Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances. </param>
        /// <returns> A new <see cref="Models.SpotRestorePolicy"/> instance for mocking. </returns>
        public static SpotRestorePolicy SpotRestorePolicy(bool? enabled = null, string restoreTimeout = null)
        {
            return new SpotRestorePolicy(enabled, restoreTimeout);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetUpdateNetworkConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The network configuration name. </param>
        /// <param name="primary"> Whether this is a primary NIC on a virtual machine. </param>
        /// <param name="enableAcceleratedNetworking"> Specifies whether the network interface is accelerated networking-enabled. </param>
        /// <param name="enableFpga"> Specifies whether the network interface is FPGA networking-enabled. </param>
        /// <param name="networkSecurityGroupId"> The network security group. </param>
        /// <param name="dnsServers"> The dns settings to be applied on the network interfaces. </param>
        /// <param name="ipConfigurations"> The virtual machine scale set IP Configuration. </param>
        /// <param name="enableIPForwarding"> Whether IP forwarding enabled on this NIC. </param>
        /// <param name="deleteOption"> Specify what happens to the network interface when the VM is deleted. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetUpdateNetworkConfiguration"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetUpdateNetworkConfiguration VirtualMachineScaleSetUpdateNetworkConfiguration(ResourceIdentifier id = null, string name = null, bool? primary = null, bool? enableAcceleratedNetworking = null, bool? enableFpga = null, ResourceIdentifier networkSecurityGroupId = null, IEnumerable<string> dnsServers = null, IEnumerable<VirtualMachineScaleSetUpdateIPConfiguration> ipConfigurations = null, bool? enableIPForwarding = null, ComputeDeleteOption? deleteOption = null)
        {
            dnsServers ??= new List<string>();
            ipConfigurations ??= new List<VirtualMachineScaleSetUpdateIPConfiguration>();

            return new VirtualMachineScaleSetUpdateNetworkConfiguration(id, name, primary, enableAcceleratedNetworking, enableFpga, networkSecurityGroupId != null ? ResourceManagerModelFactory.WritableSubResource(networkSecurityGroupId) : null, dnsServers != null ? new VirtualMachineScaleSetNetworkConfigurationDnsSettings(dnsServers?.ToList()) : null, ipConfigurations?.ToList(), enableIPForwarding, deleteOption);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetUpdateIPConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The IP configuration name. </param>
        /// <param name="subnetId"> The subnet. </param>
        /// <param name="primary"> Specifies the primary IP Configuration in case the network interface has more than one IP Configuration. </param>
        /// <param name="publicIPAddressConfiguration"> The publicIPAddressConfiguration. </param>
        /// <param name="privateIPAddressVersion"> Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </param>
        /// <param name="applicationGatewayBackendAddressPools"> The application gateway backend address pools. </param>
        /// <param name="applicationSecurityGroups"> Specifies an array of references to application security group. </param>
        /// <param name="loadBalancerBackendAddressPools"> The load balancer backend address pools. </param>
        /// <param name="loadBalancerInboundNatPools"> The load balancer inbound nat pools. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetUpdateIPConfiguration"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetUpdateIPConfiguration VirtualMachineScaleSetUpdateIPConfiguration(ResourceIdentifier id = null, string name = null, ResourceIdentifier subnetId = null, bool? primary = null, VirtualMachineScaleSetUpdatePublicIPAddressConfiguration publicIPAddressConfiguration = null, IPVersion? privateIPAddressVersion = null, IEnumerable<WritableSubResource> applicationGatewayBackendAddressPools = null, IEnumerable<WritableSubResource> applicationSecurityGroups = null, IEnumerable<WritableSubResource> loadBalancerBackendAddressPools = null, IEnumerable<WritableSubResource> loadBalancerInboundNatPools = null)
        {
            applicationGatewayBackendAddressPools ??= new List<WritableSubResource>();
            applicationSecurityGroups ??= new List<WritableSubResource>();
            loadBalancerBackendAddressPools ??= new List<WritableSubResource>();
            loadBalancerInboundNatPools ??= new List<WritableSubResource>();

            return new VirtualMachineScaleSetUpdateIPConfiguration(id, name, subnetId != null ? ResourceManagerModelFactory.WritableSubResource(subnetId) : null, primary, publicIPAddressConfiguration, privateIPAddressVersion, applicationGatewayBackendAddressPools?.ToList(), applicationSecurityGroups?.ToList(), loadBalancerBackendAddressPools?.ToList(), loadBalancerInboundNatPools?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetUpdatePublicIPAddressConfiguration. </summary>
        /// <param name="name"> The publicIP address configuration name. </param>
        /// <param name="idleTimeoutInMinutes"> The idle timeout of the public IP address. </param>
        /// <param name="dnsDomainNameLabel"> The dns settings to be applied on the publicIP addresses . </param>
        /// <param name="publicIPPrefixId"> The PublicIPPrefix from which to allocate publicIP addresses. </param>
        /// <param name="deleteOption"> Specify what happens to the public IP when the VM is deleted. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetUpdatePublicIPAddressConfiguration"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetUpdatePublicIPAddressConfiguration VirtualMachineScaleSetUpdatePublicIPAddressConfiguration(string name = null, int? idleTimeoutInMinutes = null, string dnsDomainNameLabel = null, ResourceIdentifier publicIPPrefixId = null, ComputeDeleteOption? deleteOption = null)
        {
            return new VirtualMachineScaleSetUpdatePublicIPAddressConfiguration(name, idleTimeoutInMinutes, dnsDomainNameLabel != null ? new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings(dnsDomainNameLabel) : null, publicIPPrefixId != null ? ResourceManagerModelFactory.WritableSubResource(publicIPPrefixId) : null, deleteOption);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetInstanceView. </summary>
        /// <param name="virtualMachineStatusesSummary"> The instance view status summary for the virtual machine scale set. </param>
        /// <param name="extensions"> The extensions information. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="orchestrationServices"> The orchestration services information. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetInstanceView VirtualMachineScaleSetInstanceView(IEnumerable<VirtualMachineStatusCodeCount> virtualMachineStatusesSummary = null, IEnumerable<VirtualMachineScaleSetVmExtensionsSummary> extensions = null, IEnumerable<InstanceViewStatus> statuses = null, IEnumerable<OrchestrationServiceSummary> orchestrationServices = null)
        {
            virtualMachineStatusesSummary ??= new List<VirtualMachineStatusCodeCount>();
            extensions ??= new List<VirtualMachineScaleSetVmExtensionsSummary>();
            statuses ??= new List<InstanceViewStatus>();
            orchestrationServices ??= new List<OrchestrationServiceSummary>();

            return new VirtualMachineScaleSetInstanceView(virtualMachineStatusesSummary != null ? new VirtualMachineScaleSetInstanceViewStatusesSummary(virtualMachineStatusesSummary?.ToList()) : null, extensions?.ToList(), statuses?.ToList(), orchestrationServices?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineStatusCodeCount. </summary>
        /// <param name="code"> The instance view status code. </param>
        /// <param name="count"> The number of instances having a particular status code. </param>
        /// <returns> A new <see cref="Models.VirtualMachineStatusCodeCount"/> instance for mocking. </returns>
        public static VirtualMachineStatusCodeCount VirtualMachineStatusCodeCount(string code = null, int? count = null)
        {
            return new VirtualMachineStatusCodeCount(code, count);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmExtensionsSummary. </summary>
        /// <param name="name"> The extension name. </param>
        /// <param name="statusesSummary"> The extensions information. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetVmExtensionsSummary"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetVmExtensionsSummary VirtualMachineScaleSetVmExtensionsSummary(string name = null, IEnumerable<VirtualMachineStatusCodeCount> statusesSummary = null)
        {
            statusesSummary ??= new List<VirtualMachineStatusCodeCount>();

            return new VirtualMachineScaleSetVmExtensionsSummary(name, statusesSummary?.ToList());
        }

        /// <summary> Initializes a new instance of InstanceViewStatus. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="level"> The level code. </param>
        /// <param name="displayStatus"> The short localizable label for the status. </param>
        /// <param name="message"> The detailed status message, including for alerts and error messages. </param>
        /// <param name="time"> The time of the status. </param>
        /// <returns> A new <see cref="Models.InstanceViewStatus"/> instance for mocking. </returns>
        public static InstanceViewStatus InstanceViewStatus(string code = null, ComputeStatusLevelType? level = null, string displayStatus = null, string message = null, DateTimeOffset? time = null)
        {
            return new InstanceViewStatus(code, level, displayStatus, message, time);
        }

        /// <summary> Initializes a new instance of OrchestrationServiceSummary. </summary>
        /// <param name="serviceName"> The name of the service. </param>
        /// <param name="serviceState"> The current state of the service. </param>
        /// <returns> A new <see cref="Models.OrchestrationServiceSummary"/> instance for mocking. </returns>
        public static OrchestrationServiceSummary OrchestrationServiceSummary(OrchestrationServiceName? serviceName = null, OrchestrationServiceState? serviceState = null)
        {
            return new OrchestrationServiceSummary(serviceName, serviceState);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetExtensionPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="forceUpdateTag"> If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="extensionType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="autoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="enableAutomaticUpgrade"> Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. </param>
        /// <param name="settings"> Json formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="provisionAfterExtensions"> Collection of extension names after which this extension needs to be provisioned. </param>
        /// <param name="suppressFailures"> Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. </param>
        /// <param name="protectedSettingsFromKeyVault"> The extensions protected settings that are passed by reference, and consumed from key vault. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetExtensionPatch"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetExtensionPatch VirtualMachineScaleSetExtensionPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string forceUpdateTag = null, string publisher = null, string extensionType = null, string typeHandlerVersion = null, bool? autoUpgradeMinorVersion = null, bool? enableAutomaticUpgrade = null, BinaryData settings = null, BinaryData protectedSettings = null, string provisioningState = null, IEnumerable<string> provisionAfterExtensions = null, bool? suppressFailures = null, BinaryData protectedSettingsFromKeyVault = null)
        {
            provisionAfterExtensions ??= new List<string>();

            return new VirtualMachineScaleSetExtensionPatch(id, name, resourceType, systemData, forceUpdateTag, publisher, extensionType, typeHandlerVersion, autoUpgradeMinorVersion, enableAutomaticUpgrade, settings, protectedSettings, provisioningState, provisionAfterExtensions?.ToList(), suppressFailures, protectedSettingsFromKeyVault);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetSku. </summary>
        /// <param name="resourceType"> The type of resource the sku applies to. </param>
        /// <param name="sku"> The Sku. </param>
        /// <param name="capacity"> Specifies the number of virtual machines in the scale set. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetSku"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetSku VirtualMachineScaleSetSku(ResourceType? resourceType = null, ComputeSku sku = null, VirtualMachineScaleSetSkuCapacity capacity = null)
        {
            return new VirtualMachineScaleSetSku(resourceType, sku, capacity);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetSkuCapacity. </summary>
        /// <param name="minimum"> The minimum capacity. </param>
        /// <param name="maximum"> The maximum capacity that can be set. </param>
        /// <param name="defaultCapacity"> The default capacity. </param>
        /// <param name="scaleType"> The scale type applicable to the sku. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetSkuCapacity"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetSkuCapacity VirtualMachineScaleSetSkuCapacity(long? minimum = null, long? maximum = null, long? defaultCapacity = null, VirtualMachineScaleSetSkuScaleType? scaleType = null)
        {
            return new VirtualMachineScaleSetSkuCapacity(minimum, maximum, defaultCapacity, scaleType);
        }

        /// <summary> Initializes a new instance of UpgradeOperationHistoricalStatusInfo. </summary>
        /// <param name="properties"> Information about the properties of the upgrade operation. </param>
        /// <param name="upgradeOperationHistoricalStatusInfoType"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <returns> A new <see cref="Models.UpgradeOperationHistoricalStatusInfo"/> instance for mocking. </returns>
        public static UpgradeOperationHistoricalStatusInfo UpgradeOperationHistoricalStatusInfo(UpgradeOperationHistoricalStatusInfoProperties properties = null, string upgradeOperationHistoricalStatusInfoType = null, AzureLocation? location = null)
        {
            return new UpgradeOperationHistoricalStatusInfo(properties, upgradeOperationHistoricalStatusInfoType, location);
        }

        /// <summary> Initializes a new instance of UpgradeOperationHistoricalStatusInfoProperties. </summary>
        /// <param name="runningStatus"> Information about the overall status of the upgrade operation. </param>
        /// <param name="progress"> Counts of the VMs in each state. </param>
        /// <param name="error"> Error Details for this upgrade if there are any. </param>
        /// <param name="startedBy"> Invoker of the Upgrade Operation. </param>
        /// <param name="targetImageReference"> Image Reference details. </param>
        /// <param name="rollbackInfo"> Information about OS rollback if performed. </param>
        /// <returns> A new <see cref="Models.UpgradeOperationHistoricalStatusInfoProperties"/> instance for mocking. </returns>
        public static UpgradeOperationHistoricalStatusInfoProperties UpgradeOperationHistoricalStatusInfoProperties(UpgradeOperationHistoryStatus runningStatus = null, RollingUpgradeProgressInfo progress = null, ComputeApiError error = null, UpgradeOperationInvoker? startedBy = null, ImageReference targetImageReference = null, RollbackStatusInfo rollbackInfo = null)
        {
            return new UpgradeOperationHistoricalStatusInfoProperties(runningStatus, progress, error, startedBy, targetImageReference, rollbackInfo);
        }

        /// <summary> Initializes a new instance of UpgradeOperationHistoryStatus. </summary>
        /// <param name="code"> Code indicating the current status of the upgrade. </param>
        /// <param name="startOn"> Start time of the upgrade. </param>
        /// <param name="endOn"> End time of the upgrade. </param>
        /// <returns> A new <see cref="Models.UpgradeOperationHistoryStatus"/> instance for mocking. </returns>
        public static UpgradeOperationHistoryStatus UpgradeOperationHistoryStatus(UpgradeState? code = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null)
        {
            return new UpgradeOperationHistoryStatus(code, startOn, endOn);
        }

        /// <summary> Initializes a new instance of RollingUpgradeProgressInfo. </summary>
        /// <param name="successfulInstanceCount"> The number of instances that have been successfully upgraded. </param>
        /// <param name="failedInstanceCount"> The number of instances that have failed to be upgraded successfully. </param>
        /// <param name="inProgressInstanceCount"> The number of instances that are currently being upgraded. </param>
        /// <param name="pendingInstanceCount"> The number of instances that have not yet begun to be upgraded. </param>
        /// <returns> A new <see cref="Models.RollingUpgradeProgressInfo"/> instance for mocking. </returns>
        public static RollingUpgradeProgressInfo RollingUpgradeProgressInfo(int? successfulInstanceCount = null, int? failedInstanceCount = null, int? inProgressInstanceCount = null, int? pendingInstanceCount = null)
        {
            return new RollingUpgradeProgressInfo(successfulInstanceCount, failedInstanceCount, inProgressInstanceCount, pendingInstanceCount);
        }

        /// <summary> Initializes a new instance of RollbackStatusInfo. </summary>
        /// <param name="successfullyRolledbackInstanceCount"> The number of instances which have been successfully rolled back. </param>
        /// <param name="failedRolledbackInstanceCount"> The number of instances which failed to rollback. </param>
        /// <param name="rollbackError"> Error details if OS rollback failed. </param>
        /// <returns> A new <see cref="Models.RollbackStatusInfo"/> instance for mocking. </returns>
        public static RollbackStatusInfo RollbackStatusInfo(int? successfullyRolledbackInstanceCount = null, int? failedRolledbackInstanceCount = null, ComputeApiError rollbackError = null)
        {
            return new RollbackStatusInfo(successfullyRolledbackInstanceCount, failedRolledbackInstanceCount, rollbackError);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetRollingUpgradeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="policy"> The rolling upgrade policies applied for this upgrade. </param>
        /// <param name="runningStatus"> Information about the current running state of the overall upgrade. </param>
        /// <param name="progress"> Information about the number of virtual machine instances in each upgrade state. </param>
        /// <param name="error"> Error details for this upgrade, if there are any. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineScaleSetRollingUpgradeData"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetRollingUpgradeData VirtualMachineScaleSetRollingUpgradeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RollingUpgradePolicy policy = null, RollingUpgradeRunningStatus runningStatus = null, RollingUpgradeProgressInfo progress = null, ComputeApiError error = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualMachineScaleSetRollingUpgradeData(id, name, resourceType, systemData, tags, location, policy, runningStatus, progress, error);
        }

        /// <summary> Initializes a new instance of RollingUpgradeRunningStatus. </summary>
        /// <param name="code"> Code indicating the current status of the upgrade. </param>
        /// <param name="startOn"> Start time of the upgrade. </param>
        /// <param name="lastAction"> The last action performed on the rolling upgrade. </param>
        /// <param name="lastActionOn"> Last action time of the upgrade. </param>
        /// <returns> A new <see cref="Models.RollingUpgradeRunningStatus"/> instance for mocking. </returns>
        public static RollingUpgradeRunningStatus RollingUpgradeRunningStatus(RollingUpgradeStatusCode? code = null, DateTimeOffset? startOn = null, RollingUpgradeActionType? lastAction = null, DateTimeOffset? lastActionOn = null)
        {
            return new RollingUpgradeRunningStatus(code, startOn, lastAction, lastActionOn);
        }

        /// <summary> Initializes a new instance of RecoveryWalkResponse. </summary>
        /// <param name="walkPerformed"> Whether the recovery walk was performed. </param>
        /// <param name="nextPlatformUpdateDomain"> The next update domain that needs to be walked. Null means walk spanning all update domains has been completed. </param>
        /// <returns> A new <see cref="Models.RecoveryWalkResponse"/> instance for mocking. </returns>
        public static RecoveryWalkResponse RecoveryWalkResponse(bool? walkPerformed = null, int? nextPlatformUpdateDomain = null)
        {
            return new RecoveryWalkResponse(walkPerformed, nextPlatformUpdateDomain);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmExtensionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="forceUpdateTag"> How the extension handler should be forced to update even if the extension configuration has not changed. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="extensionType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="autoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="enableAutomaticUpgrade"> Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. </param>
        /// <param name="settings"> Json formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="instanceView"> The virtual machine extension instance view. </param>
        /// <param name="suppressFailures"> Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. </param>
        /// <param name="protectedSettingsFromKeyVault"> The extensions protected settings that are passed by reference, and consumed from key vault. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineScaleSetVmExtensionData"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetVmExtensionData VirtualMachineScaleSetVmExtensionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string forceUpdateTag = null, string publisher = null, string extensionType = null, string typeHandlerVersion = null, bool? autoUpgradeMinorVersion = null, bool? enableAutomaticUpgrade = null, BinaryData settings = null, BinaryData protectedSettings = null, string provisioningState = null, VirtualMachineExtensionInstanceView instanceView = null, bool? suppressFailures = null, BinaryData protectedSettingsFromKeyVault = null)
        {
            return new VirtualMachineScaleSetVmExtensionData(id, name, resourceType, systemData, forceUpdateTag, publisher, extensionType, typeHandlerVersion, autoUpgradeMinorVersion, enableAutomaticUpgrade, settings, protectedSettings, provisioningState, instanceView, suppressFailures, protectedSettingsFromKeyVault);
        }

        /// <summary> Initializes a new instance of VirtualMachineExtensionInstanceView. </summary>
        /// <param name="name"> The virtual machine extension name. </param>
        /// <param name="virtualMachineExtensionInstanceViewType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="substatuses"> The resource status information. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.VirtualMachineExtensionInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineExtensionInstanceView VirtualMachineExtensionInstanceView(string name = null, string virtualMachineExtensionInstanceViewType = null, string typeHandlerVersion = null, IEnumerable<InstanceViewStatus> substatuses = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            substatuses ??= new List<InstanceViewStatus>();
            statuses ??= new List<InstanceViewStatus>();

            return new VirtualMachineExtensionInstanceView(name, virtualMachineExtensionInstanceViewType, typeHandlerVersion, substatuses?.ToList(), statuses?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmExtensionPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="forceUpdateTag"> How the extension handler should be forced to update even if the extension configuration has not changed. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="extensionType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="autoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="enableAutomaticUpgrade"> Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. </param>
        /// <param name="settings"> Json formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. </param>
        /// <param name="suppressFailures"> Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. </param>
        /// <param name="protectedSettingsFromKeyVault"> The extensions protected settings that are passed by reference, and consumed from key vault. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetVmExtensionPatch"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetVmExtensionPatch VirtualMachineScaleSetVmExtensionPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string forceUpdateTag = null, string publisher = null, string extensionType = null, string typeHandlerVersion = null, bool? autoUpgradeMinorVersion = null, bool? enableAutomaticUpgrade = null, BinaryData settings = null, BinaryData protectedSettings = null, bool? suppressFailures = null, BinaryData protectedSettingsFromKeyVault = null)
        {
            return new VirtualMachineScaleSetVmExtensionPatch(id, name, resourceType, systemData, forceUpdateTag, publisher, extensionType, typeHandlerVersion, autoUpgradeMinorVersion, enableAutomaticUpgrade, settings, protectedSettings, suppressFailures, protectedSettingsFromKeyVault);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="instanceId"> The virtual machine instance ID. </param>
        /// <param name="sku"> The virtual machine SKU. </param>
        /// <param name="plan"> Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**. </param>
        /// <param name="resources"> The virtual machine child extension resources. </param>
        /// <param name="zones"> The virtual machine zones. </param>
        /// <param name="identity"> The identity of the virtual machine, if configured. </param>
        /// <param name="latestModelApplied"> Specifies whether the latest model has been applied to the virtual machine. </param>
        /// <param name="vmId"> Azure VM unique ID. </param>
        /// <param name="instanceView"> The virtual machine instance view. </param>
        /// <param name="hardwareProfile"> Specifies the hardware settings for the virtual machine. </param>
        /// <param name="storageProfile"> Specifies the storage settings for the virtual machine disks. </param>
        /// <param name="additionalCapabilities"> Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the virtual machine has the capability to support attaching managed data disks with UltraSSD_LRS storage account type. </param>
        /// <param name="osProfile"> Specifies the operating system settings for the virtual machine. </param>
        /// <param name="securityProfile"> Specifies the Security related profile settings for the virtual machine. </param>
        /// <param name="networkProfile"> Specifies the network interfaces of the virtual machine. </param>
        /// <param name="networkInterfaceConfigurations"> Specifies the network profile configuration of the virtual machine. </param>
        /// <param name="bootDiagnostics"> Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15. </param>
        /// <param name="availabilitySetId"> Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="licenseType"> Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15. </param>
        /// <param name="modelDefinitionApplied"> Specifies whether the model applied to the virtual machine is the model of the virtual machine scale set or the customized model for the virtual machine. </param>
        /// <param name="protectionPolicy"> Specifies the protection policy of the virtual machine. </param>
        /// <param name="userData"> UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-03-01. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineScaleSetVmData"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetVmData VirtualMachineScaleSetVmData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string instanceId = null, ComputeSku sku = null, ComputePlan plan = null, IEnumerable<VirtualMachineExtensionData> resources = null, IEnumerable<string> zones = null, ManagedServiceIdentity identity = null, bool? latestModelApplied = null, string vmId = null, VirtualMachineScaleSetVmInstanceView instanceView = null, VirtualMachineHardwareProfile hardwareProfile = null, VirtualMachineStorageProfile storageProfile = null, AdditionalCapabilities additionalCapabilities = null, VirtualMachineOSProfile osProfile = null, SecurityProfile securityProfile = null, VirtualMachineNetworkProfile networkProfile = null, IEnumerable<VirtualMachineScaleSetNetworkConfiguration> networkInterfaceConfigurations = null, BootDiagnostics bootDiagnostics = null, ResourceIdentifier availabilitySetId = null, string provisioningState = null, string licenseType = null, string modelDefinitionApplied = null, VirtualMachineScaleSetVmProtectionPolicy protectionPolicy = null, string userData = null)
        {
            tags ??= new Dictionary<string, string>();
            resources ??= new List<VirtualMachineExtensionData>();
            zones ??= new List<string>();
            networkInterfaceConfigurations ??= new List<VirtualMachineScaleSetNetworkConfiguration>();

            return new VirtualMachineScaleSetVmData(id, name, resourceType, systemData, tags, location, instanceId, sku, plan, resources?.ToList(), zones?.ToList(), identity, latestModelApplied, vmId, instanceView, hardwareProfile, storageProfile, additionalCapabilities, osProfile, securityProfile, networkProfile, networkInterfaceConfigurations != null ? new VirtualMachineScaleSetVmNetworkProfileConfiguration(networkInterfaceConfigurations?.ToList()) : null, bootDiagnostics != null ? new DiagnosticsProfile(bootDiagnostics) : null, availabilitySetId != null ? ResourceManagerModelFactory.WritableSubResource(availabilitySetId) : null, provisioningState, licenseType, modelDefinitionApplied, protectionPolicy, userData);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmInstanceView. </summary>
        /// <param name="platformUpdateDomain"> The Update Domain count. </param>
        /// <param name="platformFaultDomain"> The Fault Domain count. </param>
        /// <param name="rdpThumbPrint"> The Remote desktop certificate thumbprint. </param>
        /// <param name="vmAgent"> The VM Agent running on the virtual machine. </param>
        /// <param name="maintenanceRedeployStatus"> The Maintenance Operation status on the virtual machine. </param>
        /// <param name="disks"> The disks information. </param>
        /// <param name="extensions"> The extensions information. </param>
        /// <param name="vmHealthStatus"> The health status for the VM. </param>
        /// <param name="bootDiagnostics"> Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a screenshot of the VM from the hypervisor. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="assignedHost"> Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. </param>
        /// <param name="placementGroupId"> The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetVmInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetVmInstanceView VirtualMachineScaleSetVmInstanceView(int? platformUpdateDomain = null, int? platformFaultDomain = null, string rdpThumbPrint = null, VirtualMachineAgentInstanceView vmAgent = null, MaintenanceRedeployStatus maintenanceRedeployStatus = null, IEnumerable<DiskInstanceView> disks = null, IEnumerable<VirtualMachineExtensionInstanceView> extensions = null, InstanceViewStatus vmHealthStatus = null, BootDiagnosticsInstanceView bootDiagnostics = null, IEnumerable<InstanceViewStatus> statuses = null, ResourceIdentifier assignedHost = null, string placementGroupId = null)
        {
            disks ??= new List<DiskInstanceView>();
            extensions ??= new List<VirtualMachineExtensionInstanceView>();
            statuses ??= new List<InstanceViewStatus>();

            return new VirtualMachineScaleSetVmInstanceView(platformUpdateDomain, platformFaultDomain, rdpThumbPrint, vmAgent, maintenanceRedeployStatus, disks?.ToList(), extensions?.ToList(), vmHealthStatus != null ? new VirtualMachineHealthStatus(vmHealthStatus) : null, bootDiagnostics, statuses?.ToList(), assignedHost, placementGroupId);
        }

        /// <summary> Initializes a new instance of VirtualMachineAgentInstanceView. </summary>
        /// <param name="vmAgentVersion"> The VM Agent full version. </param>
        /// <param name="extensionHandlers"> The virtual machine extension handler instance view. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.VirtualMachineAgentInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineAgentInstanceView VirtualMachineAgentInstanceView(string vmAgentVersion = null, IEnumerable<VirtualMachineExtensionHandlerInstanceView> extensionHandlers = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            extensionHandlers ??= new List<VirtualMachineExtensionHandlerInstanceView>();
            statuses ??= new List<InstanceViewStatus>();

            return new VirtualMachineAgentInstanceView(vmAgentVersion, extensionHandlers?.ToList(), statuses?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineExtensionHandlerInstanceView. </summary>
        /// <param name="virtualMachineExtensionHandlerInstanceViewType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="status"> The extension handler status. </param>
        /// <returns> A new <see cref="Models.VirtualMachineExtensionHandlerInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineExtensionHandlerInstanceView VirtualMachineExtensionHandlerInstanceView(string virtualMachineExtensionHandlerInstanceViewType = null, string typeHandlerVersion = null, InstanceViewStatus status = null)
        {
            return new VirtualMachineExtensionHandlerInstanceView(virtualMachineExtensionHandlerInstanceViewType, typeHandlerVersion, status);
        }

        /// <summary> Initializes a new instance of MaintenanceRedeployStatus. </summary>
        /// <param name="isCustomerInitiatedMaintenanceAllowed"> True, if customer is allowed to perform Maintenance. </param>
        /// <param name="preMaintenanceWindowStartOn"> Start Time for the Pre Maintenance Window. </param>
        /// <param name="preMaintenanceWindowEndOn"> End Time for the Pre Maintenance Window. </param>
        /// <param name="maintenanceWindowStartOn"> Start Time for the Maintenance Window. </param>
        /// <param name="maintenanceWindowEndOn"> End Time for the Maintenance Window. </param>
        /// <param name="lastOperationResultCode"> The Last Maintenance Operation Result Code. </param>
        /// <param name="lastOperationMessage"> Message returned for the last Maintenance Operation. </param>
        /// <returns> A new <see cref="Models.MaintenanceRedeployStatus"/> instance for mocking. </returns>
        public static MaintenanceRedeployStatus MaintenanceRedeployStatus(bool? isCustomerInitiatedMaintenanceAllowed = null, DateTimeOffset? preMaintenanceWindowStartOn = null, DateTimeOffset? preMaintenanceWindowEndOn = null, DateTimeOffset? maintenanceWindowStartOn = null, DateTimeOffset? maintenanceWindowEndOn = null, MaintenanceOperationResultCodeType? lastOperationResultCode = null, string lastOperationMessage = null)
        {
            return new MaintenanceRedeployStatus(isCustomerInitiatedMaintenanceAllowed, preMaintenanceWindowStartOn, preMaintenanceWindowEndOn, maintenanceWindowStartOn, maintenanceWindowEndOn, lastOperationResultCode, lastOperationMessage);
        }

        /// <summary> Initializes a new instance of DiskInstanceView. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="encryptionSettings"> Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.DiskInstanceView"/> instance for mocking. </returns>
        public static DiskInstanceView DiskInstanceView(string name = null, IEnumerable<DiskEncryptionSettings> encryptionSettings = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            encryptionSettings ??= new List<DiskEncryptionSettings>();
            statuses ??= new List<InstanceViewStatus>();

            return new DiskInstanceView(name, encryptionSettings?.ToList(), statuses?.ToList());
        }

        /// <summary> Initializes a new instance of DiskEncryptionSettings. </summary>
        /// <param name="diskEncryptionKey"> Specifies the location of the disk encryption key, which is a Key Vault Secret. </param>
        /// <param name="keyEncryptionKey"> Specifies the location of the key encryption key in Key Vault. </param>
        /// <param name="enabled"> Specifies whether disk encryption should be enabled on the virtual machine. </param>
        /// <returns> A new <see cref="Models.DiskEncryptionSettings"/> instance for mocking. </returns>
        public static DiskEncryptionSettings DiskEncryptionSettings(KeyVaultSecretReference diskEncryptionKey = null, KeyVaultKeyReference keyEncryptionKey = null, bool? enabled = null)
        {
            return new DiskEncryptionSettings(diskEncryptionKey, keyEncryptionKey, enabled);
        }

        /// <summary> Initializes a new instance of BootDiagnosticsInstanceView. </summary>
        /// <param name="consoleScreenshotBlobUri"> The console screenshot blob URI. &lt;br&gt;&lt;br&gt;NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage. </param>
        /// <param name="serialConsoleLogBlobUri"> The serial console log blob Uri. &lt;br&gt;&lt;br&gt;NOTE: This will **not** be set if boot diagnostics is currently enabled with managed storage. </param>
        /// <param name="status"> The boot diagnostics status information for the VM. &lt;br&gt;&lt;br&gt; NOTE: It will be set only if there are errors encountered in enabling boot diagnostics. </param>
        /// <returns> A new <see cref="Models.BootDiagnosticsInstanceView"/> instance for mocking. </returns>
        public static BootDiagnosticsInstanceView BootDiagnosticsInstanceView(Uri consoleScreenshotBlobUri = null, Uri serialConsoleLogBlobUri = null, InstanceViewStatus status = null)
        {
            return new BootDiagnosticsInstanceView(consoleScreenshotBlobUri, serialConsoleLogBlobUri, status);
        }

        /// <summary> Initializes a new instance of VirtualMachineHardwareProfile. </summary>
        /// <param name="vmSize"> Specifies the size of the virtual machine. &lt;br&gt;&lt;br&gt; The enum data type is currently deprecated and will be removed by December 23rd 2023. &lt;br&gt;&lt;br&gt; Recommended way to get the list of available sizes is using these APIs: &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes in an availability set](https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes) &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes in a region]( https://docs.microsoft.com/rest/api/compute/resourceskus/list) &lt;br&gt;&lt;br&gt; [List all available virtual machine sizes for resizing](https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes). For more information about virtual machine sizes, see [Sizes for virtual machines](https://docs.microsoft.com/azure/virtual-machines/sizes). &lt;br&gt;&lt;br&gt; The available VM sizes depend on region and availability set. </param>
        /// <param name="vmSizeProperties"> Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01. &lt;br&gt;&lt;br&gt; This feature is still in preview mode and is not supported for VirtualMachineScaleSet. &lt;br&gt;&lt;br&gt; Please follow the instructions in [VM Customization](https://aka.ms/vmcustomization) for more details. </param>
        /// <returns> A new <see cref="Models.VirtualMachineHardwareProfile"/> instance for mocking. </returns>
        public static VirtualMachineHardwareProfile VirtualMachineHardwareProfile(VirtualMachineSizeType? vmSize = null, VirtualMachineSizeProperties vmSizeProperties = null)
        {
            return new VirtualMachineHardwareProfile(vmSize, vmSizeProperties);
        }

        /// <summary> Initializes a new instance of VirtualMachineStorageProfile. </summary>
        /// <param name="imageReference"> Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. </param>
        /// <param name="osDisk"> Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). </param>
        /// <param name="dataDisks"> Specifies the parameters that are used to add a data disk to a virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). </param>
        /// <returns> A new <see cref="Models.VirtualMachineStorageProfile"/> instance for mocking. </returns>
        public static VirtualMachineStorageProfile VirtualMachineStorageProfile(ImageReference imageReference = null, VirtualMachineOSDisk osDisk = null, IEnumerable<VirtualMachineDataDisk> dataDisks = null)
        {
            dataDisks ??= new List<VirtualMachineDataDisk>();

            return new VirtualMachineStorageProfile(imageReference, osDisk, dataDisks?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineOSDisk. </summary>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="encryptionSettings"> Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15. </param>
        /// <param name="name"> The disk name. </param>
        /// <param name="vhdUri"> The virtual hard disk. </param>
        /// <param name="imageUri"> The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None** for Standard storage. **ReadOnly** for Premium storage. </param>
        /// <param name="writeAcceleratorEnabled"> Specifies whether writeAccelerator should be enabled or disabled on the disk. </param>
        /// <param name="diffDiskSettings"> Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine. </param>
        /// <param name="createOption"> Specifies how the virtual machine should be created.&lt;br&gt;&lt;br&gt; Possible values are:&lt;br&gt;&lt;br&gt; **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.&lt;br&gt;&lt;br&gt; **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. </param>
        /// <param name="diskSizeGB"> Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="managedDisk"> The managed disk parameters. </param>
        /// <param name="deleteOption"> Specifies whether OS Disk should be deleted or detached upon VM deletion. &lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the OS disk is deleted when VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the os disk is retained after VM is deleted. &lt;br&gt;&lt;br&gt; The default value is set to **detach**. For an ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for ephemeral OS Disk. </param>
        /// <returns> A new <see cref="Models.VirtualMachineOSDisk"/> instance for mocking. </returns>
        public static VirtualMachineOSDisk VirtualMachineOSDisk(SupportedOperatingSystemType? osType = null, DiskEncryptionSettings encryptionSettings = null, string name = null, Uri vhdUri = null, Uri imageUri = null, CachingType? caching = null, bool? writeAcceleratorEnabled = null, DiffDiskSettings diffDiskSettings = null, DiskCreateOptionType createOption = default, int? diskSizeGB = null, VirtualMachineManagedDisk managedDisk = null, DiskDeleteOptionType? deleteOption = null)
        {
            return new VirtualMachineOSDisk(osType, encryptionSettings, name, vhdUri != null ? new VirtualHardDisk(vhdUri) : null, imageUri != null ? new VirtualHardDisk(imageUri) : null, caching, writeAcceleratorEnabled, diffDiskSettings, createOption, diskSizeGB, managedDisk, deleteOption);
        }

        /// <summary> Initializes a new instance of VirtualMachineManagedDisk. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSetId"> Specifies the customer managed disk encryption set resource id for the managed disk. </param>
        /// <param name="securityProfile"> Specifies the security profile for the managed disk. </param>
        /// <returns> A new <see cref="Models.VirtualMachineManagedDisk"/> instance for mocking. </returns>
        public static VirtualMachineManagedDisk VirtualMachineManagedDisk(ResourceIdentifier id = null, StorageAccountType? storageAccountType = null, ResourceIdentifier diskEncryptionSetId = null, VirtualMachineDiskSecurityProfile securityProfile = null)
        {
            return new VirtualMachineManagedDisk(id, storageAccountType, diskEncryptionSetId != null ? ResourceManagerModelFactory.WritableSubResource(diskEncryptionSetId) : null, securityProfile);
        }

        /// <summary> Initializes a new instance of VirtualMachineDataDisk. </summary>
        /// <param name="lun"> Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. </param>
        /// <param name="name"> The disk name. </param>
        /// <param name="vhdUri"> The virtual hard disk. </param>
        /// <param name="imageUri"> The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="writeAcceleratorEnabled"> Specifies whether writeAccelerator should be enabled or disabled on the disk. </param>
        /// <param name="createOption"> Specifies how the virtual machine should be created.&lt;br&gt;&lt;br&gt; Possible values are:&lt;br&gt;&lt;br&gt; **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.&lt;br&gt;&lt;br&gt; **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described. </param>
        /// <param name="diskSizeGB"> Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="managedDisk"> The managed disk parameters. </param>
        /// <param name="toBeDetached"> Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset. </param>
        /// <param name="diskIopsReadWrite"> Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set. </param>
        /// <param name="diskMBpsReadWrite"> Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine Scale Set. </param>
        /// <param name="detachOption"> Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach**. &lt;br&gt;&lt;br&gt; detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. &lt;br&gt;&lt;br&gt; This feature is still in preview mode and is not supported for VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to &apos;true&apos; along with setting detachOption: &apos;ForceDetach&apos;. </param>
        /// <param name="deleteOption"> Specifies whether data disk should be deleted or detached upon VM deletion.&lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the data disk is deleted when VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the data disk is retained after VM is deleted.&lt;br&gt;&lt;br&gt; The default value is set to **detach**. </param>
        /// <returns> A new <see cref="Models.VirtualMachineDataDisk"/> instance for mocking. </returns>
        public static VirtualMachineDataDisk VirtualMachineDataDisk(int lun = default, string name = null, Uri vhdUri = null, Uri imageUri = null, CachingType? caching = null, bool? writeAcceleratorEnabled = null, DiskCreateOptionType createOption = default, int? diskSizeGB = null, VirtualMachineManagedDisk managedDisk = null, bool? toBeDetached = null, long? diskIopsReadWrite = null, long? diskMBpsReadWrite = null, DiskDetachOptionType? detachOption = null, DiskDeleteOptionType? deleteOption = null)
        {
            return new VirtualMachineDataDisk(lun, name, vhdUri != null ? new VirtualHardDisk(vhdUri) : null, imageUri != null ? new VirtualHardDisk(imageUri) : null, caching, writeAcceleratorEnabled, createOption, diskSizeGB, managedDisk, toBeDetached, diskIopsReadWrite, diskMBpsReadWrite, detachOption, deleteOption);
        }

        /// <summary> Initializes a new instance of VirtualMachineOSProfile. </summary>
        /// <param name="computerName"> Specifies the host OS name of the virtual machine. &lt;br&gt;&lt;br&gt; This name cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 15 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters. &lt;br&gt;&lt;br&gt; For naming conventions and restrictions see [Azure infrastructure services implementation guidelines](https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules). </param>
        /// <param name="adminUsername"> Specifies the name of the administrator account. &lt;br&gt;&lt;br&gt; This property cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; **Windows-only restriction:** Cannot end in &quot;.&quot; &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;administrator&quot;, &quot;admin&quot;, &quot;user&quot;, &quot;user1&quot;, &quot;test&quot;, &quot;user2&quot;, &quot;test1&quot;, &quot;user3&quot;, &quot;admin1&quot;, &quot;1&quot;, &quot;123&quot;, &quot;a&quot;, &quot;actuser&quot;, &quot;adm&quot;, &quot;admin2&quot;, &quot;aspnet&quot;, &quot;backup&quot;, &quot;console&quot;, &quot;david&quot;, &quot;guest&quot;, &quot;john&quot;, &quot;owner&quot;, &quot;root&quot;, &quot;server&quot;, &quot;sql&quot;, &quot;support&quot;, &quot;support_388945a0&quot;, &quot;sys&quot;, &quot;test2&quot;, &quot;test3&quot;, &quot;user4&quot;, &quot;user5&quot;. &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 1  character &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 64 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 20 characters. </param>
        /// <param name="adminPassword"> Specifies the password of the administrator account. &lt;br&gt;&lt;br&gt; **Minimum-length (Windows):** 8 characters &lt;br&gt;&lt;br&gt; **Minimum-length (Linux):** 6 characters &lt;br&gt;&lt;br&gt; **Max-length (Windows):** 123 characters &lt;br&gt;&lt;br&gt; **Max-length (Linux):** 72 characters &lt;br&gt;&lt;br&gt; **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled &lt;br&gt; Has lower characters &lt;br&gt;Has upper characters &lt;br&gt; Has a digit &lt;br&gt; Has a special character (Regex match [\W_]) &lt;br&gt;&lt;br&gt; **Disallowed values:** &quot;abc@123&quot;, &quot;P@$$w0rd&quot;, &quot;P@ssw0rd&quot;, &quot;P@ssword123&quot;, &quot;Pa$$word&quot;, &quot;pass@word1&quot;, &quot;Password!&quot;, &quot;Password1&quot;, &quot;Password22&quot;, &quot;iloveyou!&quot; &lt;br&gt;&lt;br&gt; For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) &lt;br&gt;&lt;br&gt; For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection). </param>
        /// <param name="customData"> Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. &lt;br&gt;&lt;br&gt; **Note: Do not pass any secrets or passwords in customData property** &lt;br&gt;&lt;br&gt; This property cannot be updated after the VM is created. &lt;br&gt;&lt;br&gt; customData is passed to the VM to be saved as a file, for more information see [Custom Data on Azure VMs](https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/) &lt;br&gt;&lt;br&gt; For using cloud-init for your Linux VM, see [Using cloud-init to customize a Linux VM during creation](https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init). </param>
        /// <param name="windowsConfiguration"> Specifies Windows operating system settings on the virtual machine. </param>
        /// <param name="linuxConfiguration"> Specifies the Linux operating system settings on the virtual machine. &lt;br&gt;&lt;br&gt;For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros). </param>
        /// <param name="secrets"> Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine it is recommended to use the [Azure Key Vault virtual machine extension for Linux](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux) or the [Azure Key Vault virtual machine extension for Windows](https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows). </param>
        /// <param name="allowExtensionOperations"> Specifies whether extension operations should be allowed on the virtual machine. &lt;br&gt;&lt;br&gt;This may only be set to False when no extensions are present on the virtual machine. </param>
        /// <param name="requireGuestProvisionSignal"> Optional property which must either be set to True or omitted. </param>
        /// <returns> A new <see cref="Models.VirtualMachineOSProfile"/> instance for mocking. </returns>
        public static VirtualMachineOSProfile VirtualMachineOSProfile(string computerName = null, string adminUsername = null, string adminPassword = null, string customData = null, WindowsConfiguration windowsConfiguration = null, LinuxConfiguration linuxConfiguration = null, IEnumerable<VaultSecretGroup> secrets = null, bool? allowExtensionOperations = null, bool? requireGuestProvisionSignal = null)
        {
            secrets ??= new List<VaultSecretGroup>();

            return new VirtualMachineOSProfile(computerName, adminUsername, adminPassword, customData, windowsConfiguration, linuxConfiguration, secrets?.ToList(), allowExtensionOperations, requireGuestProvisionSignal);
        }

        /// <summary> Initializes a new instance of VirtualMachineNetworkProfile. </summary>
        /// <param name="networkInterfaces"> Specifies the list of resource Ids for the network interfaces associated with the virtual machine. </param>
        /// <param name="networkApiVersion"> specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations. </param>
        /// <param name="networkInterfaceConfigurations"> Specifies the networking configurations that will be used to create the virtual machine networking resources. </param>
        /// <returns> A new <see cref="Models.VirtualMachineNetworkProfile"/> instance for mocking. </returns>
        public static VirtualMachineNetworkProfile VirtualMachineNetworkProfile(IEnumerable<VirtualMachineNetworkInterfaceReference> networkInterfaces = null, NetworkApiVersion? networkApiVersion = null, IEnumerable<VirtualMachineNetworkInterfaceConfiguration> networkInterfaceConfigurations = null)
        {
            networkInterfaces ??= new List<VirtualMachineNetworkInterfaceReference>();
            networkInterfaceConfigurations ??= new List<VirtualMachineNetworkInterfaceConfiguration>();

            return new VirtualMachineNetworkProfile(networkInterfaces?.ToList(), networkApiVersion, networkInterfaceConfigurations?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineNetworkInterfaceReference. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="primary"> Specifies the primary network interface in case the virtual machine has more than 1 network interface. </param>
        /// <param name="deleteOption"> Specify what happens to the network interface when the VM is deleted. </param>
        /// <returns> A new <see cref="Models.VirtualMachineNetworkInterfaceReference"/> instance for mocking. </returns>
        public static VirtualMachineNetworkInterfaceReference VirtualMachineNetworkInterfaceReference(ResourceIdentifier id = null, bool? primary = null, ComputeDeleteOption? deleteOption = null)
        {
            return new VirtualMachineNetworkInterfaceReference(id, primary, deleteOption);
        }

        /// <summary> Initializes a new instance of VirtualMachineNetworkInterfaceConfiguration. </summary>
        /// <param name="name"> The network interface configuration name. </param>
        /// <param name="primary"> Specifies the primary network interface in case the virtual machine has more than 1 network interface. </param>
        /// <param name="deleteOption"> Specify what happens to the network interface when the VM is deleted. </param>
        /// <param name="enableAcceleratedNetworking"> Specifies whether the network interface is accelerated networking-enabled. </param>
        /// <param name="enableFpga"> Specifies whether the network interface is FPGA networking-enabled. </param>
        /// <param name="enableIPForwarding"> Whether IP forwarding enabled on this NIC. </param>
        /// <param name="networkSecurityGroupId"> The network security group. </param>
        /// <param name="dnsServers"> The dns settings to be applied on the network interfaces. </param>
        /// <param name="ipConfigurations"> Specifies the IP configurations of the network interface. </param>
        /// <param name="dscpConfigurationId"> Gets or sets the dscp configuration. </param>
        /// <returns> A new <see cref="Models.VirtualMachineNetworkInterfaceConfiguration"/> instance for mocking. </returns>
        public static VirtualMachineNetworkInterfaceConfiguration VirtualMachineNetworkInterfaceConfiguration(string name = null, bool? primary = null, ComputeDeleteOption? deleteOption = null, bool? enableAcceleratedNetworking = null, bool? enableFpga = null, bool? enableIPForwarding = null, ResourceIdentifier networkSecurityGroupId = null, IEnumerable<string> dnsServers = null, IEnumerable<VirtualMachineNetworkInterfaceIPConfiguration> ipConfigurations = null, ResourceIdentifier dscpConfigurationId = null)
        {
            dnsServers ??= new List<string>();
            ipConfigurations ??= new List<VirtualMachineNetworkInterfaceIPConfiguration>();

            return new VirtualMachineNetworkInterfaceConfiguration(name, primary, deleteOption, enableAcceleratedNetworking, enableFpga, enableIPForwarding, networkSecurityGroupId != null ? ResourceManagerModelFactory.WritableSubResource(networkSecurityGroupId) : null, dnsServers != null ? new VirtualMachineNetworkInterfaceDnsSettingsConfiguration(dnsServers?.ToList()) : null, ipConfigurations?.ToList(), dscpConfigurationId != null ? ResourceManagerModelFactory.WritableSubResource(dscpConfigurationId) : null);
        }

        /// <summary> Initializes a new instance of VirtualMachineNetworkInterfaceIPConfiguration. </summary>
        /// <param name="name"> The IP configuration name. </param>
        /// <param name="subnetId"> Specifies the identifier of the subnet. </param>
        /// <param name="primary"> Specifies the primary network interface in case the virtual machine has more than 1 network interface. </param>
        /// <param name="publicIPAddressConfiguration"> The publicIPAddressConfiguration. </param>
        /// <param name="privateIPAddressVersion"> Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </param>
        /// <param name="applicationSecurityGroups"> Specifies an array of references to application security group. </param>
        /// <param name="applicationGatewayBackendAddressPools"> Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway. </param>
        /// <param name="loadBalancerBackendAddressPools"> Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer]. </param>
        /// <returns> A new <see cref="Models.VirtualMachineNetworkInterfaceIPConfiguration"/> instance for mocking. </returns>
        public static VirtualMachineNetworkInterfaceIPConfiguration VirtualMachineNetworkInterfaceIPConfiguration(string name = null, ResourceIdentifier subnetId = null, bool? primary = null, VirtualMachinePublicIPAddressConfiguration publicIPAddressConfiguration = null, IPVersion? privateIPAddressVersion = null, IEnumerable<WritableSubResource> applicationSecurityGroups = null, IEnumerable<WritableSubResource> applicationGatewayBackendAddressPools = null, IEnumerable<WritableSubResource> loadBalancerBackendAddressPools = null)
        {
            applicationSecurityGroups ??= new List<WritableSubResource>();
            applicationGatewayBackendAddressPools ??= new List<WritableSubResource>();
            loadBalancerBackendAddressPools ??= new List<WritableSubResource>();

            return new VirtualMachineNetworkInterfaceIPConfiguration(name, subnetId != null ? ResourceManagerModelFactory.WritableSubResource(subnetId) : null, primary, publicIPAddressConfiguration, privateIPAddressVersion, applicationSecurityGroups?.ToList(), applicationGatewayBackendAddressPools?.ToList(), loadBalancerBackendAddressPools?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachinePublicIPAddressConfiguration. </summary>
        /// <param name="name"> The publicIP address configuration name. </param>
        /// <param name="sku"> Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible. </param>
        /// <param name="idleTimeoutInMinutes"> The idle timeout of the public IP address. </param>
        /// <param name="deleteOption"> Specify what happens to the public IP address when the VM is deleted. </param>
        /// <param name="dnsDomainNameLabel"> The dns settings to be applied on the publicIP addresses . </param>
        /// <param name="ipTags"> The list of IP tags associated with the public IP address. </param>
        /// <param name="publicIPPrefixId"> The PublicIPPrefix from which to allocate publicIP addresses. </param>
        /// <param name="publicIPAddressVersion"> Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </param>
        /// <param name="publicIPAllocationMethod"> Specify the public IP allocation type. </param>
        /// <returns> A new <see cref="Models.VirtualMachinePublicIPAddressConfiguration"/> instance for mocking. </returns>
        public static VirtualMachinePublicIPAddressConfiguration VirtualMachinePublicIPAddressConfiguration(string name = null, ComputePublicIPAddressSku sku = null, int? idleTimeoutInMinutes = null, ComputeDeleteOption? deleteOption = null, string dnsDomainNameLabel = null, IEnumerable<VirtualMachineIPTag> ipTags = null, ResourceIdentifier publicIPPrefixId = null, IPVersion? publicIPAddressVersion = null, PublicIPAllocationMethod? publicIPAllocationMethod = null)
        {
            ipTags ??= new List<VirtualMachineIPTag>();

            return new VirtualMachinePublicIPAddressConfiguration(name, sku, idleTimeoutInMinutes, deleteOption, dnsDomainNameLabel != null ? new VirtualMachinePublicIPAddressDnsSettingsConfiguration(dnsDomainNameLabel) : null, ipTags?.ToList(), publicIPPrefixId != null ? ResourceManagerModelFactory.WritableSubResource(publicIPPrefixId) : null, publicIPAddressVersion, publicIPAllocationMethod);
        }

        /// <summary> Initializes a new instance of VirtualMachineIPTag. </summary>
        /// <param name="ipTagType"> IP tag type. Example: FirstPartyUsage. </param>
        /// <param name="tag"> IP tag associated with the public IP. Example: SQL, Storage etc. </param>
        /// <returns> A new <see cref="Models.VirtualMachineIPTag"/> instance for mocking. </returns>
        public static VirtualMachineIPTag VirtualMachineIPTag(string ipTagType = null, string tag = null)
        {
            return new VirtualMachineIPTag(ipTagType, tag);
        }

        /// <summary> Initializes a new instance of VirtualMachineScaleSetVmProtectionPolicy. </summary>
        /// <param name="protectFromScaleIn"> Indicates that the virtual machine scale set VM shouldn&apos;t be considered for deletion during a scale-in operation. </param>
        /// <param name="protectFromScaleSetActions"> Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied to the virtual machine scale set VM. </param>
        /// <returns> A new <see cref="Models.VirtualMachineScaleSetVmProtectionPolicy"/> instance for mocking. </returns>
        public static VirtualMachineScaleSetVmProtectionPolicy VirtualMachineScaleSetVmProtectionPolicy(bool? protectFromScaleIn = null, bool? protectFromScaleSetActions = null)
        {
            return new VirtualMachineScaleSetVmProtectionPolicy(protectFromScaleIn, protectFromScaleSetActions);
        }

        /// <summary> Initializes a new instance of VirtualMachineExtensionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="forceUpdateTag"> How the extension handler should be forced to update even if the extension configuration has not changed. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="extensionType"> Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="autoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="enableAutomaticUpgrade"> Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. </param>
        /// <param name="settings"> Json formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="instanceView"> The virtual machine extension instance view. </param>
        /// <param name="suppressFailures"> Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false. </param>
        /// <param name="protectedSettingsFromKeyVault"> The extensions protected settings that are passed by reference, and consumed from key vault. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineExtensionData"/> instance for mocking. </returns>
        public static VirtualMachineExtensionData VirtualMachineExtensionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string forceUpdateTag = null, string publisher = null, string extensionType = null, string typeHandlerVersion = null, bool? autoUpgradeMinorVersion = null, bool? enableAutomaticUpgrade = null, BinaryData settings = null, BinaryData protectedSettings = null, string provisioningState = null, VirtualMachineExtensionInstanceView instanceView = null, bool? suppressFailures = null, BinaryData protectedSettingsFromKeyVault = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualMachineExtensionData(id, name, resourceType, systemData, tags, location, forceUpdateTag, publisher, extensionType, typeHandlerVersion, autoUpgradeMinorVersion, enableAutomaticUpgrade, settings, protectedSettings, provisioningState, instanceView, suppressFailures, protectedSettingsFromKeyVault);
        }

        /// <summary> Initializes a new instance of RetrieveBootDiagnosticsDataResult. </summary>
        /// <param name="consoleScreenshotBlobUri"> The console screenshot blob URI. </param>
        /// <param name="serialConsoleLogBlobUri"> The serial console log blob URI. </param>
        /// <returns> A new <see cref="Models.RetrieveBootDiagnosticsDataResult"/> instance for mocking. </returns>
        public static RetrieveBootDiagnosticsDataResult RetrieveBootDiagnosticsDataResult(Uri consoleScreenshotBlobUri = null, Uri serialConsoleLogBlobUri = null)
        {
            return new RetrieveBootDiagnosticsDataResult(consoleScreenshotBlobUri, serialConsoleLogBlobUri);
        }

        /// <summary> Initializes a new instance of VirtualMachineData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="plan"> Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**. </param>
        /// <param name="resources"> The virtual machine child extension resources. </param>
        /// <param name="identity"> The identity of the virtual machine, if configured. </param>
        /// <param name="zones"> The virtual machine zones. </param>
        /// <param name="extendedLocation"> The extended location of the Virtual Machine. </param>
        /// <param name="hardwareProfile"> Specifies the hardware settings for the virtual machine. </param>
        /// <param name="storageProfile"> Specifies the storage settings for the virtual machine disks. </param>
        /// <param name="additionalCapabilities"> Specifies additional capabilities enabled or disabled on the virtual machine. </param>
        /// <param name="osProfile"> Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed once VM is provisioned. </param>
        /// <param name="networkProfile"> Specifies the network interfaces of the virtual machine. </param>
        /// <param name="securityProfile"> Specifies the Security related profile settings for the virtual machine. </param>
        /// <param name="bootDiagnostics"> Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15. </param>
        /// <param name="availabilitySetId"> Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Availability sets overview](https://docs.microsoft.com/azure/virtual-machines/availability-set-overview). &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Maintenance and updates for Virtual Machines in Azure](https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates) &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added should be under the same resource group as the availability set resource. An existing VM cannot be added to an availability set. &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null properties.virtualMachineScaleSet reference. </param>
        /// <param name="virtualMachineScaleSetId"> Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines specified in the same virtual machine scale set are allocated to different nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing VM cannot be added to a virtual machine scale set. &lt;br&gt;&lt;br&gt;This property cannot exist along with a non-null properties.availabilitySet reference. &lt;br&gt;&lt;br&gt;Minimum api‐version: 2019‐03‐01. </param>
        /// <param name="proximityPlacementGroupId"> Specifies information about the proximity placement group that the virtual machine should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01. </param>
        /// <param name="priority"> Specifies the priority for the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01. </param>
        /// <param name="evictionPolicy"> Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. &lt;br&gt;&lt;br&gt;For Azure Spot virtual machines, both &apos;Deallocate&apos; and &apos;Delete&apos; are supported and the minimum api-version is 2019-03-01. &lt;br&gt;&lt;br&gt;For Azure Spot scale sets, both &apos;Deallocate&apos; and &apos;Delete&apos; are supported and the minimum api-version is 2017-10-30-preview. </param>
        /// <param name="billingMaxPrice"> Specifies the billing related details of a Azure Spot virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2019-03-01. </param>
        /// <param name="hostId"> Specifies information about the dedicated host that the virtual machine resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-10-01. </param>
        /// <param name="hostGroupId"> Specifies information about the dedicated host group that the virtual machine resides in. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. &lt;br&gt;&lt;br&gt;NOTE: User cannot specify both host and hostGroup properties. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="instanceView"> The virtual machine instance view. </param>
        /// <param name="licenseType"> Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15. </param>
        /// <param name="vmId"> Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands. </param>
        /// <param name="extensionsTimeBudget"> Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version: 2020-06-01. </param>
        /// <param name="platformFaultDomain"> Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned to a fault domain that best maintains balance across available fault domains.&lt;br&gt;&lt;li&gt;This is applicable only if the &apos;virtualMachineScaleSet&apos; property of this Virtual Machine is set.&lt;li&gt;The Virtual Machine Scale Set that is referenced, must have &apos;platformFaultDomainCount&apos; &amp;gt; 1.&lt;li&gt;This property cannot be updated once the Virtual Machine is created.&lt;li&gt;Fault domain assignment can be viewed in the Virtual Machine Instance View.&lt;br&gt;&lt;br&gt;Minimum api‐version: 2020‐12‐01. </param>
        /// <param name="scheduledEventsTerminateNotificationProfile"> Specifies Scheduled Event related configurations. </param>
        /// <param name="userData"> UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-03-01. </param>
        /// <param name="capacityReservationGroupId"> Specifies information about the capacity reservation that is used to allocate virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-04-01. </param>
        /// <param name="galleryApplications"> Specifies the gallery applications that should be made available to the VM/VMSS. </param>
        /// <param name="timeCreated"> Specifies the time at which the Virtual Machine resource was created.&lt;br&gt;&lt;br&gt;Minimum api-version: 2022-03-01. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineData"/> instance for mocking. </returns>
        public static VirtualMachineData VirtualMachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ComputePlan plan = null, IEnumerable<VirtualMachineExtensionData> resources = null, ManagedServiceIdentity identity = null, IEnumerable<string> zones = null, ExtendedLocation extendedLocation = null, VirtualMachineHardwareProfile hardwareProfile = null, VirtualMachineStorageProfile storageProfile = null, AdditionalCapabilities additionalCapabilities = null, VirtualMachineOSProfile osProfile = null, VirtualMachineNetworkProfile networkProfile = null, SecurityProfile securityProfile = null, BootDiagnostics bootDiagnostics = null, ResourceIdentifier availabilitySetId = null, ResourceIdentifier virtualMachineScaleSetId = null, ResourceIdentifier proximityPlacementGroupId = null, VirtualMachinePriorityType? priority = null, VirtualMachineEvictionPolicyType? evictionPolicy = null, double? billingMaxPrice = null, ResourceIdentifier hostId = null, ResourceIdentifier hostGroupId = null, string provisioningState = null, VirtualMachineInstanceView instanceView = null, string licenseType = null, string vmId = null, string extensionsTimeBudget = null, int? platformFaultDomain = null, TerminateNotificationProfile scheduledEventsTerminateNotificationProfile = null, string userData = null, ResourceIdentifier capacityReservationGroupId = null, IEnumerable<VirtualMachineGalleryApplication> galleryApplications = null, DateTimeOffset? timeCreated = null)
        {
            tags ??= new Dictionary<string, string>();
            resources ??= new List<VirtualMachineExtensionData>();
            zones ??= new List<string>();
            galleryApplications ??= new List<VirtualMachineGalleryApplication>();

            return new VirtualMachineData(id, name, resourceType, systemData, tags, location, plan, resources?.ToList(), identity, zones?.ToList(), extendedLocation, hardwareProfile, storageProfile, additionalCapabilities, osProfile, networkProfile, securityProfile, bootDiagnostics != null ? new DiagnosticsProfile(bootDiagnostics) : null, availabilitySetId != null ? ResourceManagerModelFactory.WritableSubResource(availabilitySetId) : null, virtualMachineScaleSetId != null ? ResourceManagerModelFactory.WritableSubResource(virtualMachineScaleSetId) : null, proximityPlacementGroupId != null ? ResourceManagerModelFactory.WritableSubResource(proximityPlacementGroupId) : null, priority, evictionPolicy, billingMaxPrice != null ? new BillingProfile(billingMaxPrice) : null, hostId != null ? ResourceManagerModelFactory.WritableSubResource(hostId) : null, hostGroupId != null ? ResourceManagerModelFactory.WritableSubResource(hostGroupId) : null, provisioningState, instanceView, licenseType, vmId, extensionsTimeBudget, platformFaultDomain, scheduledEventsTerminateNotificationProfile != null ? new ScheduledEventsProfile(scheduledEventsTerminateNotificationProfile) : null, userData, capacityReservationGroupId != null ? new CapacityReservationProfile(ResourceManagerModelFactory.WritableSubResource(capacityReservationGroupId)) : null, galleryApplications != null ? new ApplicationProfile(galleryApplications?.ToList()) : null, timeCreated);
        }

        /// <summary> Initializes a new instance of VirtualMachineInstanceView. </summary>
        /// <param name="platformUpdateDomain"> Specifies the update domain of the virtual machine. </param>
        /// <param name="platformFaultDomain"> Specifies the fault domain of the virtual machine. </param>
        /// <param name="computerName"> The computer name assigned to the virtual machine. </param>
        /// <param name="osName"> The Operating System running on the virtual machine. </param>
        /// <param name="osVersion"> The version of Operating System running on the virtual machine. </param>
        /// <param name="hyperVGeneration"> Specifies the HyperVGeneration Type associated with a resource. </param>
        /// <param name="rdpThumbPrint"> The Remote desktop certificate thumbprint. </param>
        /// <param name="vmAgent"> The VM Agent running on the virtual machine. </param>
        /// <param name="maintenanceRedeployStatus"> The Maintenance Operation status on the virtual machine. </param>
        /// <param name="disks"> The virtual machine disk information. </param>
        /// <param name="extensions"> The extensions information. </param>
        /// <param name="vmHealthStatus"> The health status for the VM. </param>
        /// <param name="bootDiagnostics"> Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status. &lt;br&gt;&lt;br&gt; You can easily view the output of your console log. &lt;br&gt;&lt;br&gt; Azure also enables you to see a screenshot of the VM from the hypervisor. </param>
        /// <param name="assignedHost"> Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="patchStatus"> [Preview Feature] The status of virtual machine patch operations. </param>
        /// <returns> A new <see cref="Models.VirtualMachineInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineInstanceView VirtualMachineInstanceView(int? platformUpdateDomain = null, int? platformFaultDomain = null, string computerName = null, string osName = null, string osVersion = null, HyperVGeneration? hyperVGeneration = null, string rdpThumbPrint = null, VirtualMachineAgentInstanceView vmAgent = null, MaintenanceRedeployStatus maintenanceRedeployStatus = null, IEnumerable<DiskInstanceView> disks = null, IEnumerable<VirtualMachineExtensionInstanceView> extensions = null, InstanceViewStatus vmHealthStatus = null, BootDiagnosticsInstanceView bootDiagnostics = null, string assignedHost = null, IEnumerable<InstanceViewStatus> statuses = null, VirtualMachinePatchStatus patchStatus = null)
        {
            disks ??= new List<DiskInstanceView>();
            extensions ??= new List<VirtualMachineExtensionInstanceView>();
            statuses ??= new List<InstanceViewStatus>();

            return new VirtualMachineInstanceView(platformUpdateDomain, platformFaultDomain, computerName, osName, osVersion, hyperVGeneration, rdpThumbPrint, vmAgent, maintenanceRedeployStatus, disks?.ToList(), extensions?.ToList(), vmHealthStatus != null ? new VirtualMachineHealthStatus(vmHealthStatus) : null, bootDiagnostics, assignedHost, statuses?.ToList(), patchStatus);
        }

        /// <summary> Initializes a new instance of VirtualMachinePatchStatus. </summary>
        /// <param name="availablePatchSummary"> The available patch summary of the latest assessment operation for the virtual machine. </param>
        /// <param name="lastPatchInstallationSummary"> The installation summary of the latest installation operation for the virtual machine. </param>
        /// <param name="configurationStatuses"> The enablement status of the specified patchMode. </param>
        /// <returns> A new <see cref="Models.VirtualMachinePatchStatus"/> instance for mocking. </returns>
        public static VirtualMachinePatchStatus VirtualMachinePatchStatus(AvailablePatchSummary availablePatchSummary = null, LastPatchInstallationSummary lastPatchInstallationSummary = null, IEnumerable<InstanceViewStatus> configurationStatuses = null)
        {
            configurationStatuses ??= new List<InstanceViewStatus>();

            return new VirtualMachinePatchStatus(availablePatchSummary, lastPatchInstallationSummary, configurationStatuses?.ToList());
        }

        /// <summary> Initializes a new instance of AvailablePatchSummary. </summary>
        /// <param name="status"> The overall success or failure status of the operation. It remains &quot;InProgress&quot; until the operation completes. At that point it will become &quot;Unknown&quot;, &quot;Failed&quot;, &quot;Succeeded&quot;, or &quot;CompletedWithWarnings.&quot;. </param>
        /// <param name="assessmentActivityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="rebootPending"> The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred. </param>
        /// <param name="criticalAndSecurityPatchCount"> The number of critical or security patches that have been detected as available and not yet installed. </param>
        /// <param name="otherPatchCount"> The number of all available patches excluding critical and security. </param>
        /// <param name="startOn"> The UTC timestamp when the operation began. </param>
        /// <param name="lastModifiedOn"> The UTC timestamp when the operation began. </param>
        /// <param name="error"> The errors that were encountered during execution of the operation. The details array contains the list of them. </param>
        /// <returns> A new <see cref="Models.AvailablePatchSummary"/> instance for mocking. </returns>
        public static AvailablePatchSummary AvailablePatchSummary(PatchOperationStatus? status = null, string assessmentActivityId = null, bool? rebootPending = null, int? criticalAndSecurityPatchCount = null, int? otherPatchCount = null, DateTimeOffset? startOn = null, DateTimeOffset? lastModifiedOn = null, ComputeApiError error = null)
        {
            return new AvailablePatchSummary(status, assessmentActivityId, rebootPending, criticalAndSecurityPatchCount, otherPatchCount, startOn, lastModifiedOn, error);
        }

        /// <summary> Initializes a new instance of LastPatchInstallationSummary. </summary>
        /// <param name="status"> The overall success or failure status of the operation. It remains &quot;InProgress&quot; until the operation completes. At that point it will become &quot;Unknown&quot;, &quot;Failed&quot;, &quot;Succeeded&quot;, or &quot;CompletedWithWarnings.&quot;. </param>
        /// <param name="installationActivityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="maintenanceWindowExceeded"> Describes whether the operation ran out of time before it completed all its intended actions. </param>
        /// <param name="notSelectedPatchCount"> The number of all available patches but not going to be installed because it didn&apos;t match a classification or inclusion list entry. </param>
        /// <param name="excludedPatchCount"> The number of all available patches but excluded explicitly by a customer-specified exclusion list match. </param>
        /// <param name="pendingPatchCount"> The number of all available patches expected to be installed over the course of the patch installation operation. </param>
        /// <param name="installedPatchCount"> The count of patches that successfully installed. </param>
        /// <param name="failedPatchCount"> The count of patches that failed installation. </param>
        /// <param name="startOn"> The UTC timestamp when the operation began. </param>
        /// <param name="lastModifiedOn"> The UTC timestamp when the operation began. </param>
        /// <param name="error"> The errors that were encountered during execution of the operation. The details array contains the list of them. </param>
        /// <returns> A new <see cref="Models.LastPatchInstallationSummary"/> instance for mocking. </returns>
        public static LastPatchInstallationSummary LastPatchInstallationSummary(PatchOperationStatus? status = null, string installationActivityId = null, bool? maintenanceWindowExceeded = null, int? notSelectedPatchCount = null, int? excludedPatchCount = null, int? pendingPatchCount = null, int? installedPatchCount = null, int? failedPatchCount = null, DateTimeOffset? startOn = null, DateTimeOffset? lastModifiedOn = null, ComputeApiError error = null)
        {
            return new LastPatchInstallationSummary(status, installationActivityId, maintenanceWindowExceeded, notSelectedPatchCount, excludedPatchCount, pendingPatchCount, installedPatchCount, failedPatchCount, startOn, lastModifiedOn, error);
        }

        /// <summary> Initializes a new instance of VirtualMachineCaptureResult. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="schema"> the schema of the captured virtual machine. </param>
        /// <param name="contentVersion"> the version of the content. </param>
        /// <param name="parameters"> parameters of the captured virtual machine. </param>
        /// <param name="resources"> a list of resource items of the captured virtual machine. </param>
        /// <returns> A new <see cref="Models.VirtualMachineCaptureResult"/> instance for mocking. </returns>
        public static VirtualMachineCaptureResult VirtualMachineCaptureResult(ResourceIdentifier id = null, string schema = null, string contentVersion = null, BinaryData parameters = null, IEnumerable<BinaryData> resources = null)
        {
            resources ??= new List<BinaryData>();

            return new VirtualMachineCaptureResult(id, schema, contentVersion, parameters, resources?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineAssessPatchesResult. </summary>
        /// <param name="status"> The overall success or failure status of the operation. It remains &quot;InProgress&quot; until the operation completes. At that point it will become &quot;Unknown&quot;, &quot;Failed&quot;, &quot;Succeeded&quot;, or &quot;CompletedWithWarnings.&quot;. </param>
        /// <param name="assessmentActivityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="rebootPending"> The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred. </param>
        /// <param name="criticalAndSecurityPatchCount"> The number of critical or security patches that have been detected as available and not yet installed. </param>
        /// <param name="otherPatchCount"> The number of all available patches excluding critical and security. </param>
        /// <param name="startOn"> The UTC timestamp when the operation began. </param>
        /// <param name="availablePatches"> The list of patches that have been detected as available for installation. </param>
        /// <param name="error"> The errors that were encountered during execution of the operation. The details array contains the list of them. </param>
        /// <returns> A new <see cref="Models.VirtualMachineAssessPatchesResult"/> instance for mocking. </returns>
        public static VirtualMachineAssessPatchesResult VirtualMachineAssessPatchesResult(PatchOperationStatus? status = null, string assessmentActivityId = null, bool? rebootPending = null, int? criticalAndSecurityPatchCount = null, int? otherPatchCount = null, DateTimeOffset? startOn = null, IEnumerable<VirtualMachineSoftwarePatchProperties> availablePatches = null, ComputeApiError error = null)
        {
            availablePatches ??= new List<VirtualMachineSoftwarePatchProperties>();

            return new VirtualMachineAssessPatchesResult(status, assessmentActivityId, rebootPending, criticalAndSecurityPatchCount, otherPatchCount, startOn, availablePatches?.ToList(), error);
        }

        /// <summary> Initializes a new instance of VirtualMachineSoftwarePatchProperties. </summary>
        /// <param name="patchId"> A unique identifier for the patch. </param>
        /// <param name="name"> The friendly name of the patch. </param>
        /// <param name="version"> The version number of the patch. This property applies only to Linux patches. </param>
        /// <param name="kbId"> The KBID of the patch. Only applies to Windows patches. </param>
        /// <param name="classifications"> The classification(s) of the patch as provided by the patch publisher. </param>
        /// <param name="rebootBehavior"> Describes the reboot requirements of the patch. </param>
        /// <param name="activityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="publishedOn"> The UTC timestamp when the repository published this patch. </param>
        /// <param name="lastModifiedOn"> The UTC timestamp of the last update to this patch record. </param>
        /// <param name="assessmentState"> Describes the availability of a given patch. </param>
        /// <returns> A new <see cref="Models.VirtualMachineSoftwarePatchProperties"/> instance for mocking. </returns>
        public static VirtualMachineSoftwarePatchProperties VirtualMachineSoftwarePatchProperties(string patchId = null, string name = null, string version = null, string kbId = null, IEnumerable<string> classifications = null, VmGuestPatchRebootBehavior? rebootBehavior = null, string activityId = null, DateTimeOffset? publishedOn = null, DateTimeOffset? lastModifiedOn = null, PatchAssessmentState? assessmentState = null)
        {
            classifications ??= new List<string>();

            return new VirtualMachineSoftwarePatchProperties(patchId, name, version, kbId, classifications?.ToList(), rebootBehavior, activityId, publishedOn, lastModifiedOn, assessmentState);
        }

        /// <summary> Initializes a new instance of VirtualMachineInstallPatchesResult. </summary>
        /// <param name="status"> The overall success or failure status of the operation. It remains &quot;InProgress&quot; until the operation completes. At that point it will become &quot;Failed&quot;, &quot;Succeeded&quot;, &quot;Unknown&quot; or &quot;CompletedWithWarnings.&quot;. </param>
        /// <param name="installationActivityId"> The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs. </param>
        /// <param name="rebootStatus"> The reboot state of the VM following completion of the operation. </param>
        /// <param name="maintenanceWindowExceeded"> Whether the operation ran out of time before it completed all its intended actions. </param>
        /// <param name="excludedPatchCount"> The number of patches that were not installed due to the user blocking their installation. </param>
        /// <param name="notSelectedPatchCount"> The number of patches that were detected as available for install, but did not meet the operation&apos;s criteria. </param>
        /// <param name="pendingPatchCount"> The number of patches that were identified as meeting the installation criteria, but were not able to be installed. Typically this happens when maintenanceWindowExceeded == true. </param>
        /// <param name="installedPatchCount"> The number of patches successfully installed. </param>
        /// <param name="failedPatchCount"> The number of patches that could not be installed due to some issue. See errors for details. </param>
        /// <param name="patches"> The patches that were installed during the operation. </param>
        /// <param name="startOn"> The UTC timestamp when the operation began. </param>
        /// <param name="error"> The errors that were encountered during execution of the operation. The details array contains the list of them. </param>
        /// <returns> A new <see cref="Models.VirtualMachineInstallPatchesResult"/> instance for mocking. </returns>
        public static VirtualMachineInstallPatchesResult VirtualMachineInstallPatchesResult(PatchOperationStatus? status = null, string installationActivityId = null, VmGuestPatchRebootStatus? rebootStatus = null, bool? maintenanceWindowExceeded = null, int? excludedPatchCount = null, int? notSelectedPatchCount = null, int? pendingPatchCount = null, int? installedPatchCount = null, int? failedPatchCount = null, IEnumerable<PatchInstallationDetail> patches = null, DateTimeOffset? startOn = null, ComputeApiError error = null)
        {
            patches ??= new List<PatchInstallationDetail>();

            return new VirtualMachineInstallPatchesResult(status, installationActivityId, rebootStatus, maintenanceWindowExceeded, excludedPatchCount, notSelectedPatchCount, pendingPatchCount, installedPatchCount, failedPatchCount, patches?.ToList(), startOn, error);
        }

        /// <summary> Initializes a new instance of PatchInstallationDetail. </summary>
        /// <param name="patchId"> A unique identifier for the patch. </param>
        /// <param name="name"> The friendly name of the patch. </param>
        /// <param name="version"> The version string of the package. It may conform to Semantic Versioning. Only applies to Linux. </param>
        /// <param name="kbId"> The KBID of the patch. Only applies to Windows patches. </param>
        /// <param name="classifications"> The classification(s) of the patch as provided by the patch publisher. </param>
        /// <param name="installationState"> The state of the patch after the installation operation completed. </param>
        /// <returns> A new <see cref="Models.PatchInstallationDetail"/> instance for mocking. </returns>
        public static PatchInstallationDetail PatchInstallationDetail(string patchId = null, string name = null, string version = null, string kbId = null, IEnumerable<string> classifications = null, PatchInstallationState? installationState = null)
        {
            classifications ??= new List<string>();

            return new PatchInstallationDetail(patchId, name, version, kbId, classifications?.ToList(), installationState);
        }

        /// <summary> Initializes a new instance of VirtualMachineImage. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="location"> The supported Azure location of the resource. </param>
        /// <param name="tags"> Specifies the tags that are assigned to the virtual machine. For more information about using tags, see [Using tags to organize your Azure resources](https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md). </param>
        /// <param name="extendedLocation"> The extended location of the Virtual Machine. </param>
        /// <param name="plan"> Used for establishing the purchase context of any 3rd Party artifact through MarketPlace. </param>
        /// <param name="osDiskImageOperatingSystem"> Contains the os disk image information. </param>
        /// <param name="dataDiskImages"> The list of data disk images information. </param>
        /// <param name="automaticOSUpgradeSupported"> Describes automatic OS upgrade properties on the image. </param>
        /// <param name="hyperVGeneration"> Specifies the HyperVGeneration Type. </param>
        /// <param name="disallowedVmDiskType"> Specifies disallowed configuration for the VirtualMachine created from the image. </param>
        /// <param name="features"></param>
        /// <param name="architecture"> Specifies the Architecture Type. </param>
        /// <returns> A new <see cref="Models.VirtualMachineImage"/> instance for mocking. </returns>
        public static VirtualMachineImage VirtualMachineImage(ResourceIdentifier id = null, string name = null, AzureLocation location = default, IDictionary<string, string> tags = null, ExtendedLocation extendedLocation = null, PurchasePlan plan = null, SupportedOperatingSystemType? osDiskImageOperatingSystem = null, IEnumerable<DataDiskImage> dataDiskImages = null, bool? automaticOSUpgradeSupported = null, HyperVGeneration? hyperVGeneration = null, VirtualMachineDiskType? disallowedVmDiskType = null, IEnumerable<VirtualMachineImageFeature> features = null, ArchitectureType? architecture = null)
        {
            tags ??= new Dictionary<string, string>();
            dataDiskImages ??= new List<DataDiskImage>();
            features ??= new List<VirtualMachineImageFeature>();

            return new VirtualMachineImage(id, name, location, tags, extendedLocation, plan, osDiskImageOperatingSystem.HasValue ? new OSDiskImage(osDiskImageOperatingSystem.Value) : null, dataDiskImages?.ToList(), automaticOSUpgradeSupported.HasValue ? new AutomaticOSUpgradeProperties(automaticOSUpgradeSupported.Value) : null, hyperVGeneration, disallowedVmDiskType != null ? new DisallowedConfiguration(disallowedVmDiskType) : null, features?.ToList(), architecture);
        }

        /// <summary> Initializes a new instance of DataDiskImage. </summary>
        /// <param name="lun"> Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. </param>
        /// <returns> A new <see cref="Models.DataDiskImage"/> instance for mocking. </returns>
        public static DataDiskImage DataDiskImage(int? lun = null)
        {
            return new DataDiskImage(lun);
        }

        /// <summary> Initializes a new instance of VirtualMachineImageFeature. </summary>
        /// <param name="name"> The name of the feature. </param>
        /// <param name="value"> The corresponding value for the feature. </param>
        /// <returns> A new <see cref="Models.VirtualMachineImageFeature"/> instance for mocking. </returns>
        public static VirtualMachineImageFeature VirtualMachineImageFeature(string name = null, string value = null)
        {
            return new VirtualMachineImageFeature(name, value);
        }

        /// <summary> Initializes a new instance of VirtualMachineImageBase. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="location"> The supported Azure location of the resource. </param>
        /// <param name="tags"> Specifies the tags that are assigned to the virtual machine. For more information about using tags, see [Using tags to organize your Azure resources](https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md). </param>
        /// <param name="extendedLocation"> The extended location of the Virtual Machine. </param>
        /// <returns> A new <see cref="Models.VirtualMachineImageBase"/> instance for mocking. </returns>
        public static VirtualMachineImageBase VirtualMachineImageBase(ResourceIdentifier id = null, string name = null, AzureLocation location = default, IDictionary<string, string> tags = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualMachineImageBase(id, name, location, tags, extendedLocation);
        }

        /// <summary> Initializes a new instance of VirtualMachineExtensionImageData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="operatingSystem"> The operating system this extension supports. </param>
        /// <param name="computeRole"> The type of role (IaaS or PaaS) this extension supports. </param>
        /// <param name="handlerSchema"> The schema defined by publisher, where extension consumers should provide settings in a matching schema. </param>
        /// <param name="virtualMachineScaleSetEnabled"> Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS. </param>
        /// <param name="supportsMultipleExtensions"> Whether the handler can support multiple extensions. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineExtensionImageData"/> instance for mocking. </returns>
        public static VirtualMachineExtensionImageData VirtualMachineExtensionImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string operatingSystem = null, string computeRole = null, string handlerSchema = null, bool? virtualMachineScaleSetEnabled = null, bool? supportsMultipleExtensions = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualMachineExtensionImageData(id, name, resourceType, systemData, tags, location, operatingSystem, computeRole, handlerSchema, virtualMachineScaleSetEnabled, supportsMultipleExtensions);
        }

        /// <summary> Initializes a new instance of AvailabilitySetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> Sku of the availability set, only name is required to be set. See AvailabilitySetSkuTypes for possible set of values. Use &apos;Aligned&apos; for virtual machines with managed disks and &apos;Classic&apos; for virtual machines with unmanaged disks. Default value is &apos;Classic&apos;. </param>
        /// <param name="platformUpdateDomainCount"> Update Domain count. </param>
        /// <param name="platformFaultDomainCount"> Fault Domain count. </param>
        /// <param name="virtualMachines"> A list of references to all virtual machines in the availability set. </param>
        /// <param name="proximityPlacementGroupId"> Specifies information about the proximity placement group that the availability set should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Compute.AvailabilitySetData"/> instance for mocking. </returns>
        public static AvailabilitySetData AvailabilitySetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ComputeSku sku = null, int? platformUpdateDomainCount = null, int? platformFaultDomainCount = null, IEnumerable<WritableSubResource> virtualMachines = null, ResourceIdentifier proximityPlacementGroupId = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            tags ??= new Dictionary<string, string>();
            virtualMachines ??= new List<WritableSubResource>();
            statuses ??= new List<InstanceViewStatus>();

            return new AvailabilitySetData(id, name, resourceType, systemData, tags, location, sku, platformUpdateDomainCount, platformFaultDomainCount, virtualMachines?.ToList(), proximityPlacementGroupId != null ? ResourceManagerModelFactory.WritableSubResource(proximityPlacementGroupId) : null, statuses?.ToList());
        }

        /// <summary> Initializes a new instance of ProximityPlacementGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> Specifies the Availability Zone where virtual machine, virtual machine scale set or availability set associated with the  proximity placement group can be created. </param>
        /// <param name="proximityPlacementGroupType"> Specifies the type of the proximity placement group. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Standard** : Co-locate resources within an Azure region or Availability Zone. &lt;br&gt;&lt;br&gt; **Ultra** : For future use. </param>
        /// <param name="virtualMachines"> A list of references to all virtual machines in the proximity placement group. </param>
        /// <param name="virtualMachineScaleSets"> A list of references to all virtual machine scale sets in the proximity placement group. </param>
        /// <param name="availabilitySets"> A list of references to all availability sets in the proximity placement group. </param>
        /// <param name="colocationStatus"> Describes colocation status of the Proximity Placement Group. </param>
        /// <param name="intentVmSizes"> Specifies the user intent of the proximity placement group. </param>
        /// <returns> A new <see cref="Compute.ProximityPlacementGroupData"/> instance for mocking. </returns>
        public static ProximityPlacementGroupData ProximityPlacementGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<string> zones = null, ProximityPlacementGroupType? proximityPlacementGroupType = null, IEnumerable<ComputeSubResourceDataWithColocationStatus> virtualMachines = null, IEnumerable<ComputeSubResourceDataWithColocationStatus> virtualMachineScaleSets = null, IEnumerable<ComputeSubResourceDataWithColocationStatus> availabilitySets = null, InstanceViewStatus colocationStatus = null, IEnumerable<string> intentVmSizes = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();
            virtualMachines ??= new List<ComputeSubResourceDataWithColocationStatus>();
            virtualMachineScaleSets ??= new List<ComputeSubResourceDataWithColocationStatus>();
            availabilitySets ??= new List<ComputeSubResourceDataWithColocationStatus>();
            intentVmSizes ??= new List<string>();

            return new ProximityPlacementGroupData(id, name, resourceType, systemData, tags, location, zones?.ToList(), proximityPlacementGroupType, virtualMachines?.ToList(), virtualMachineScaleSets?.ToList(), availabilitySets?.ToList(), colocationStatus, intentVmSizes != null ? new ProximityPlacementGroupPropertiesIntent(intentVmSizes?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of ComputeSubResourceDataWithColocationStatus. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="colocationStatus"> Describes colocation status of a resource in the Proximity Placement Group. </param>
        /// <returns> A new <see cref="Models.ComputeSubResourceDataWithColocationStatus"/> instance for mocking. </returns>
        public static ComputeSubResourceDataWithColocationStatus ComputeSubResourceDataWithColocationStatus(ResourceIdentifier id = null, InstanceViewStatus colocationStatus = null)
        {
            return new ComputeSubResourceDataWithColocationStatus(id, colocationStatus);
        }

        /// <summary> Initializes a new instance of DedicatedHostGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation. If not provided, the group supports all zones in the region. If provided, enforces each host in the group to be in the same zone. </param>
        /// <param name="platformFaultDomainCount"> Number of fault domains that the host group can span. </param>
        /// <param name="dedicatedHosts"> A list of references to all dedicated hosts in the dedicated host group. </param>
        /// <param name="instanceViewHosts"> The dedicated host group instance view, which has the list of instance view of the dedicated hosts under the dedicated host group. </param>
        /// <param name="supportAutomaticPlacement"> Specifies whether virtual machines or virtual machine scale sets can be placed automatically on the dedicated host group. Automatic placement means resources are allocated on dedicated hosts, that are chosen by Azure, under the dedicated host group. The value is defaulted to &apos;false&apos; when not provided. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01. </param>
        /// <param name="ultraSsdEnabled"> Enables or disables a capability on the dedicated host group.&lt;br&gt;&lt;br&gt;Minimum api-version: 2022-03-01. </param>
        /// <returns> A new <see cref="Compute.DedicatedHostGroupData"/> instance for mocking. </returns>
        public static DedicatedHostGroupData DedicatedHostGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<string> zones = null, int? platformFaultDomainCount = null, IEnumerable<SubResource> dedicatedHosts = null, IEnumerable<DedicatedHostInstanceViewWithName> instanceViewHosts = null, bool? supportAutomaticPlacement = null, bool? ultraSsdEnabled = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();
            dedicatedHosts ??= new List<SubResource>();
            instanceViewHosts ??= new List<DedicatedHostInstanceViewWithName>();

            return new DedicatedHostGroupData(id, name, resourceType, systemData, tags, location, zones?.ToList(), platformFaultDomainCount, dedicatedHosts?.ToList(), instanceViewHosts != null ? new DedicatedHostGroupInstanceView(instanceViewHosts?.ToList()) : null, supportAutomaticPlacement, ultraSsdEnabled != null ? new DedicatedHostGroupPropertiesAdditionalCapabilities(ultraSsdEnabled) : null);
        }

        /// <summary> Initializes a new instance of DedicatedHostInstanceViewWithName. </summary>
        /// <param name="assetId"> Specifies the unique id of the dedicated physical machine on which the dedicated host resides. </param>
        /// <param name="availableCapacityAllocatableVms"> Unutilized capacity of the dedicated host. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="name"> The name of the dedicated host. </param>
        /// <returns> A new <see cref="Models.DedicatedHostInstanceViewWithName"/> instance for mocking. </returns>
        public static DedicatedHostInstanceViewWithName DedicatedHostInstanceViewWithName(string assetId = null, IEnumerable<DedicatedHostAllocatableVm> availableCapacityAllocatableVms = null, IEnumerable<InstanceViewStatus> statuses = null, string name = null)
        {
            availableCapacityAllocatableVms ??= new List<DedicatedHostAllocatableVm>();
            statuses ??= new List<InstanceViewStatus>();

            return new DedicatedHostInstanceViewWithName(assetId, availableCapacityAllocatableVms != null ? new DedicatedHostAvailableCapacity(availableCapacityAllocatableVms?.ToList()) : null, statuses?.ToList(), name);
        }

        /// <summary> Initializes a new instance of DedicatedHostInstanceView. </summary>
        /// <param name="assetId"> Specifies the unique id of the dedicated physical machine on which the dedicated host resides. </param>
        /// <param name="availableCapacityAllocatableVms"> Unutilized capacity of the dedicated host. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.DedicatedHostInstanceView"/> instance for mocking. </returns>
        public static DedicatedHostInstanceView DedicatedHostInstanceView(string assetId = null, IEnumerable<DedicatedHostAllocatableVm> availableCapacityAllocatableVms = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            availableCapacityAllocatableVms ??= new List<DedicatedHostAllocatableVm>();
            statuses ??= new List<InstanceViewStatus>();

            return new DedicatedHostInstanceView(assetId, availableCapacityAllocatableVms != null ? new DedicatedHostAvailableCapacity(availableCapacityAllocatableVms?.ToList()) : null, statuses?.ToList());
        }

        /// <summary> Initializes a new instance of DedicatedHostAllocatableVm. </summary>
        /// <param name="vmSize"> VM size in terms of which the unutilized capacity is represented. </param>
        /// <param name="count"> Maximum number of VMs of size vmSize that can fit in the dedicated host&apos;s remaining capacity. </param>
        /// <returns> A new <see cref="Models.DedicatedHostAllocatableVm"/> instance for mocking. </returns>
        public static DedicatedHostAllocatableVm DedicatedHostAllocatableVm(string vmSize = null, double? count = null)
        {
            return new DedicatedHostAllocatableVm(vmSize, count);
        }

        /// <summary> Initializes a new instance of DedicatedHostData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute SKUs for a list of possible values. </param>
        /// <param name="platformFaultDomain"> Fault domain of the dedicated host within a dedicated host group. </param>
        /// <param name="autoReplaceOnFailure"> Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to &apos;true&apos; when not provided. </param>
        /// <param name="hostId"> A unique id generated and assigned to the dedicated host by the platform. &lt;br&gt;&lt;br&gt; Does not change throughout the lifetime of the host. </param>
        /// <param name="virtualMachines"> A list of references to all virtual machines in the Dedicated Host. </param>
        /// <param name="licenseType"> Specifies the software license type that will be applied to the VMs deployed on the dedicated host. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **Windows_Server_Hybrid** &lt;br&gt;&lt;br&gt; **Windows_Server_Perpetual** &lt;br&gt;&lt;br&gt; Default: **None**. </param>
        /// <param name="provisioningOn"> The date when the host was first provisioned. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="instanceView"> The dedicated host instance view. </param>
        /// <param name="timeCreated"> Specifies the time at which the Dedicated Host resource was created.&lt;br&gt;&lt;br&gt;Minimum api-version: 2022-03-01. </param>
        /// <returns> A new <see cref="Compute.DedicatedHostData"/> instance for mocking. </returns>
        public static DedicatedHostData DedicatedHostData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ComputeSku sku = null, int? platformFaultDomain = null, bool? autoReplaceOnFailure = null, string hostId = null, IEnumerable<SubResource> virtualMachines = null, DedicatedHostLicenseType? licenseType = null, DateTimeOffset? provisioningOn = null, string provisioningState = null, DedicatedHostInstanceView instanceView = null, DateTimeOffset? timeCreated = null)
        {
            tags ??= new Dictionary<string, string>();
            virtualMachines ??= new List<SubResource>();

            return new DedicatedHostData(id, name, resourceType, systemData, tags, location, sku, platformFaultDomain, autoReplaceOnFailure, hostId, virtualMachines?.ToList(), licenseType, provisioningOn, provisioningState, instanceView, timeCreated);
        }

        /// <summary> Initializes a new instance of SshPublicKeyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="publicKey"> SSH public key used to authenticate to a virtual machine through ssh. If this property is not initially provided when the resource is created, the publicKey property will be populated when generateKeyPair is called. If the public key is provided upon resource creation, the provided public key needs to be at least 2048-bit and in ssh-rsa format. </param>
        /// <returns> A new <see cref="Compute.SshPublicKeyData"/> instance for mocking. </returns>
        public static SshPublicKeyData SshPublicKeyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string publicKey = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SshPublicKeyData(id, name, resourceType, systemData, tags, location, publicKey);
        }

        /// <summary> Initializes a new instance of SshPublicKeyGenerateKeyPairResult. </summary>
        /// <param name="privateKey"> Private key portion of the key pair used to authenticate to a virtual machine through ssh. The private key is returned in RFC3447 format and should be treated as a secret. </param>
        /// <param name="publicKey"> Public key portion of the key pair used to authenticate to a virtual machine through ssh. The public key is in ssh-rsa format. </param>
        /// <param name="id"> The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{SshPublicKeyName}. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="privateKey"/>, <paramref name="publicKey"/> or <paramref name="id"/> is null. </exception>
        /// <returns> A new <see cref="Models.SshPublicKeyGenerateKeyPairResult"/> instance for mocking. </returns>
        public static SshPublicKeyGenerateKeyPairResult SshPublicKeyGenerateKeyPairResult(string privateKey = null, string publicKey = null, ResourceIdentifier id = null)
        {
            if (privateKey == null)
            {
                throw new ArgumentNullException(nameof(privateKey));
            }
            if (publicKey == null)
            {
                throw new ArgumentNullException(nameof(publicKey));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            return new SshPublicKeyGenerateKeyPairResult(privateKey, publicKey, id);
        }

        /// <summary> Initializes a new instance of DiskImageData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extended location of the Image. </param>
        /// <param name="sourceVirtualMachineId"> The source virtual machine from which Image is created. </param>
        /// <param name="storageProfile"> Specifies the storage settings for the virtual machine disks. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <param name="hyperVGeneration"> Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API Version 2019-03-01 if the image source is a blob, then we need the user to specify the value, if the source is managed resource like disk or snapshot, we may require the user to specify the property if we cannot deduce it from the source managed resource. </param>
        /// <returns> A new <see cref="Compute.DiskImageData"/> instance for mocking. </returns>
        public static DiskImageData DiskImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, ResourceIdentifier sourceVirtualMachineId = null, ImageStorageProfile storageProfile = null, string provisioningState = null, HyperVGeneration? hyperVGeneration = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DiskImageData(id, name, resourceType, systemData, tags, location, extendedLocation, sourceVirtualMachineId != null ? ResourceManagerModelFactory.WritableSubResource(sourceVirtualMachineId) : null, storageProfile, provisioningState, hyperVGeneration);
        }

        /// <summary> Initializes a new instance of ImageStorageProfile. </summary>
        /// <param name="osDisk"> Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). </param>
        /// <param name="dataDisks"> Specifies the parameters that are used to add a data disk to a virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview). </param>
        /// <param name="zoneResilient"> Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS). </param>
        /// <returns> A new <see cref="Models.ImageStorageProfile"/> instance for mocking. </returns>
        public static ImageStorageProfile ImageStorageProfile(ImageOSDisk osDisk = null, IEnumerable<ImageDataDisk> dataDisks = null, bool? zoneResilient = null)
        {
            dataDisks ??= new List<ImageDataDisk>();

            return new ImageStorageProfile(osDisk, dataDisks?.ToList(), zoneResilient);
        }

        /// <summary> Initializes a new instance of ImageOSDisk. </summary>
        /// <param name="snapshotId"> The snapshot. </param>
        /// <param name="managedDiskId"> The managedDisk. </param>
        /// <param name="blobUri"> The Virtual Hard Disk. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="diskSizeGB"> Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSetId"> Specifies the customer managed disk encryption set resource id for the managed image disk. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="osState"> The OS State. For managed images, use Generalized. </param>
        /// <returns> A new <see cref="Models.ImageOSDisk"/> instance for mocking. </returns>
        public static ImageOSDisk ImageOSDisk(ResourceIdentifier snapshotId = null, ResourceIdentifier managedDiskId = null, Uri blobUri = null, CachingType? caching = null, int? diskSizeGB = null, StorageAccountType? storageAccountType = null, ResourceIdentifier diskEncryptionSetId = null, SupportedOperatingSystemType osType = default, OperatingSystemStateType osState = default)
        {
            return new ImageOSDisk(snapshotId != null ? ResourceManagerModelFactory.WritableSubResource(snapshotId) : null, managedDiskId != null ? ResourceManagerModelFactory.WritableSubResource(managedDiskId) : null, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSetId != null ? ResourceManagerModelFactory.WritableSubResource(diskEncryptionSetId) : null, osType, osState);
        }

        /// <summary> Initializes a new instance of ImageDisk. </summary>
        /// <param name="snapshotId"> The snapshot. </param>
        /// <param name="managedDiskId"> The managedDisk. </param>
        /// <param name="blobUri"> The Virtual Hard Disk. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="diskSizeGB"> Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSetId"> Specifies the customer managed disk encryption set resource id for the managed image disk. </param>
        /// <returns> A new <see cref="Models.ImageDisk"/> instance for mocking. </returns>
        public static ImageDisk ImageDisk(ResourceIdentifier snapshotId = null, ResourceIdentifier managedDiskId = null, Uri blobUri = null, CachingType? caching = null, int? diskSizeGB = null, StorageAccountType? storageAccountType = null, ResourceIdentifier diskEncryptionSetId = null)
        {
            return new ImageDisk(snapshotId != null ? ResourceManagerModelFactory.WritableSubResource(snapshotId) : null, managedDiskId != null ? ResourceManagerModelFactory.WritableSubResource(managedDiskId) : null, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSetId != null ? ResourceManagerModelFactory.WritableSubResource(diskEncryptionSetId) : null);
        }

        /// <summary> Initializes a new instance of ImageDataDisk. </summary>
        /// <param name="snapshotId"> The snapshot. </param>
        /// <param name="managedDiskId"> The managedDisk. </param>
        /// <param name="blobUri"> The Virtual Hard Disk. </param>
        /// <param name="caching"> Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**. </param>
        /// <param name="diskSizeGB"> Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB. </param>
        /// <param name="storageAccountType"> Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. </param>
        /// <param name="diskEncryptionSetId"> Specifies the customer managed disk encryption set resource id for the managed image disk. </param>
        /// <param name="lun"> Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. </param>
        /// <returns> A new <see cref="Models.ImageDataDisk"/> instance for mocking. </returns>
        public static ImageDataDisk ImageDataDisk(ResourceIdentifier snapshotId = null, ResourceIdentifier managedDiskId = null, Uri blobUri = null, CachingType? caching = null, int? diskSizeGB = null, StorageAccountType? storageAccountType = null, ResourceIdentifier diskEncryptionSetId = null, int lun = default)
        {
            return new ImageDataDisk(snapshotId != null ? ResourceManagerModelFactory.WritableSubResource(snapshotId) : null, managedDiskId != null ? ResourceManagerModelFactory.WritableSubResource(managedDiskId) : null, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSetId != null ? ResourceManagerModelFactory.WritableSubResource(diskEncryptionSetId) : null, lun);
        }

        /// <summary> Initializes a new instance of RestorePointGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="source"> The properties of the source resource that this restore point collection is created from. </param>
        /// <param name="provisioningState"> The provisioning state of the restore point collection. </param>
        /// <param name="restorePointGroupId"> The unique id of the restore point collection. </param>
        /// <param name="restorePoints"> A list containing all restore points created under this restore point collection. </param>
        /// <returns> A new <see cref="Compute.RestorePointGroupData"/> instance for mocking. </returns>
        public static RestorePointGroupData RestorePointGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, RestorePointGroupSource source = null, string provisioningState = null, string restorePointGroupId = null, IEnumerable<RestorePointData> restorePoints = null)
        {
            tags ??= new Dictionary<string, string>();
            restorePoints ??= new List<RestorePointData>();

            return new RestorePointGroupData(id, name, resourceType, systemData, tags, location, source, provisioningState, restorePointGroupId, restorePoints?.ToList());
        }

        /// <summary> Initializes a new instance of RestorePointGroupSource. </summary>
        /// <param name="location"> Location of the source resource used to create this restore point collection. </param>
        /// <param name="id"> Resource Id of the source resource used to create this restore point collection. </param>
        /// <returns> A new <see cref="Models.RestorePointGroupSource"/> instance for mocking. </returns>
        public static RestorePointGroupSource RestorePointGroupSource(AzureLocation? location = null, ResourceIdentifier id = null)
        {
            return new RestorePointGroupSource(location, id);
        }

        /// <summary> Initializes a new instance of RestorePointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="excludeDisks"> List of disk resource ids that the customer wishes to exclude from the restore point. If no disks are specified, all disks will be included. </param>
        /// <param name="sourceMetadata"> Gets the details of the VM captured at the time of the restore point creation. </param>
        /// <param name="provisioningState"> Gets the provisioning state of the restore point. </param>
        /// <param name="consistencyMode"> ConsistencyMode of the RestorePoint. Can be specified in the input while creating a restore point. For now, only CrashConsistent is accepted as a valid input. Please refer to https://aka.ms/RestorePoints for more details. </param>
        /// <param name="timeCreated"> Gets the creation time of the restore point. </param>
        /// <param name="sourceRestorePointId"> Resource Id of the source restore point from which a copy needs to be created. </param>
        /// <param name="instanceView"> The restore point instance view. </param>
        /// <returns> A new <see cref="Compute.RestorePointData"/> instance for mocking. </returns>
        public static RestorePointData RestorePointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<WritableSubResource> excludeDisks = null, RestorePointSourceMetadata sourceMetadata = null, string provisioningState = null, ConsistencyModeType? consistencyMode = null, DateTimeOffset? timeCreated = null, ResourceIdentifier sourceRestorePointId = null, RestorePointInstanceView instanceView = null)
        {
            excludeDisks ??= new List<WritableSubResource>();

            return new RestorePointData(id, name, resourceType, systemData, excludeDisks?.ToList(), sourceMetadata, provisioningState, consistencyMode, timeCreated, sourceRestorePointId != null ? ResourceManagerModelFactory.WritableSubResource(sourceRestorePointId) : null, instanceView);
        }

        /// <summary> Initializes a new instance of RestorePointSourceMetadata. </summary>
        /// <param name="hardwareProfile"> Gets the hardware profile. </param>
        /// <param name="storageProfile"> Gets the storage profile. </param>
        /// <param name="osProfile"> Gets the OS profile. </param>
        /// <param name="bootDiagnostics"> Gets the diagnostics profile. </param>
        /// <param name="licenseType"> Gets the license type, which is for bring your own license scenario. </param>
        /// <param name="vmId"> Gets the virtual machine unique id. </param>
        /// <param name="securityProfile"> Gets the security profile. </param>
        /// <param name="location"> Location of the VM from which the restore point was created. </param>
        /// <returns> A new <see cref="Models.RestorePointSourceMetadata"/> instance for mocking. </returns>
        public static RestorePointSourceMetadata RestorePointSourceMetadata(VirtualMachineHardwareProfile hardwareProfile = null, RestorePointSourceVmStorageProfile storageProfile = null, VirtualMachineOSProfile osProfile = null, BootDiagnostics bootDiagnostics = null, string licenseType = null, string vmId = null, SecurityProfile securityProfile = null, AzureLocation? location = null)
        {
            return new RestorePointSourceMetadata(hardwareProfile, storageProfile, osProfile, bootDiagnostics != null ? new DiagnosticsProfile(bootDiagnostics) : null, licenseType, vmId, securityProfile, location);
        }

        /// <summary> Initializes a new instance of RestorePointSourceVmStorageProfile. </summary>
        /// <param name="osDisk"> Gets the OS disk of the VM captured at the time of the restore point creation. </param>
        /// <param name="dataDisks"> Gets the data disks of the VM captured at the time of the restore point creation. </param>
        /// <returns> A new <see cref="Models.RestorePointSourceVmStorageProfile"/> instance for mocking. </returns>
        public static RestorePointSourceVmStorageProfile RestorePointSourceVmStorageProfile(RestorePointSourceVmOSDisk osDisk = null, IEnumerable<RestorePointSourceVmDataDisk> dataDisks = null)
        {
            dataDisks ??= new List<RestorePointSourceVmDataDisk>();

            return new RestorePointSourceVmStorageProfile(osDisk, dataDisks?.ToList());
        }

        /// <summary> Initializes a new instance of RestorePointSourceVmOSDisk. </summary>
        /// <param name="osType"> Gets the Operating System type. </param>
        /// <param name="encryptionSettings"> Gets the disk encryption settings. </param>
        /// <param name="name"> Gets the disk name. </param>
        /// <param name="caching"> Gets the caching type. </param>
        /// <param name="diskSizeGB"> Gets the disk size in GB. </param>
        /// <param name="managedDisk"> Gets the managed disk details. </param>
        /// <param name="diskRestorePointId"> Gets the disk restore point Id. </param>
        /// <returns> A new <see cref="Models.RestorePointSourceVmOSDisk"/> instance for mocking. </returns>
        public static RestorePointSourceVmOSDisk RestorePointSourceVmOSDisk(OperatingSystemType? osType = null, DiskEncryptionSettings encryptionSettings = null, string name = null, CachingType? caching = null, int? diskSizeGB = null, VirtualMachineManagedDisk managedDisk = null, ResourceIdentifier diskRestorePointId = null)
        {
            return new RestorePointSourceVmOSDisk(osType, encryptionSettings, name, caching, diskSizeGB, managedDisk, diskRestorePointId != null ? ResourceManagerModelFactory.WritableSubResource(diskRestorePointId) : null);
        }

        /// <summary> Initializes a new instance of RestorePointSourceVmDataDisk. </summary>
        /// <param name="lun"> Gets the logical unit number. </param>
        /// <param name="name"> Gets the disk name. </param>
        /// <param name="caching"> Gets the caching type. </param>
        /// <param name="diskSizeGB"> Gets the initial disk size in GB for blank data disks, and the new desired size for existing OS and Data disks. </param>
        /// <param name="managedDisk"> Gets the managed disk details. </param>
        /// <param name="diskRestorePointId"> Gets the disk restore point Id. </param>
        /// <returns> A new <see cref="Models.RestorePointSourceVmDataDisk"/> instance for mocking. </returns>
        public static RestorePointSourceVmDataDisk RestorePointSourceVmDataDisk(int? lun = null, string name = null, CachingType? caching = null, int? diskSizeGB = null, VirtualMachineManagedDisk managedDisk = null, ResourceIdentifier diskRestorePointId = null)
        {
            return new RestorePointSourceVmDataDisk(lun, name, caching, diskSizeGB, managedDisk, diskRestorePointId != null ? ResourceManagerModelFactory.WritableSubResource(diskRestorePointId) : null);
        }

        /// <summary> Initializes a new instance of RestorePointInstanceView. </summary>
        /// <param name="diskRestorePoints"> The disk restore points information. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.RestorePointInstanceView"/> instance for mocking. </returns>
        public static RestorePointInstanceView RestorePointInstanceView(IEnumerable<DiskRestorePointInstanceView> diskRestorePoints = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            diskRestorePoints ??= new List<DiskRestorePointInstanceView>();
            statuses ??= new List<InstanceViewStatus>();

            return new RestorePointInstanceView(diskRestorePoints?.ToList(), statuses?.ToList());
        }

        /// <summary> Initializes a new instance of DiskRestorePointInstanceView. </summary>
        /// <param name="id"> Disk restore point Id. </param>
        /// <param name="replicationStatus"> The disk restore point replication status information. </param>
        /// <returns> A new <see cref="Models.DiskRestorePointInstanceView"/> instance for mocking. </returns>
        public static DiskRestorePointInstanceView DiskRestorePointInstanceView(string id = null, DiskRestorePointReplicationStatus replicationStatus = null)
        {
            return new DiskRestorePointInstanceView(id, replicationStatus);
        }

        /// <summary> Initializes a new instance of DiskRestorePointReplicationStatus. </summary>
        /// <param name="status"> The resource status information. </param>
        /// <param name="completionPercent"> Replication completion percentage. </param>
        /// <returns> A new <see cref="Models.DiskRestorePointReplicationStatus"/> instance for mocking. </returns>
        public static DiskRestorePointReplicationStatus DiskRestorePointReplicationStatus(InstanceViewStatus status = null, int? completionPercent = null)
        {
            return new DiskRestorePointReplicationStatus(status, completionPercent);
        }

        /// <summary> Initializes a new instance of CapacityReservationGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> Availability Zones to use for this capacity reservation group. The zones can be assigned only during creation. If not provided, the group supports only regional resources in the region. If provided, enforces each capacity reservation in the group to be in one of the zones. </param>
        /// <param name="capacityReservations"> A list of all capacity reservation resource ids that belong to capacity reservation group. </param>
        /// <param name="virtualMachinesAssociated"> A list of references to all virtual machines associated to the capacity reservation group. </param>
        /// <param name="instanceViewCapacityReservations"> The capacity reservation group instance view which has the list of instance views for all the capacity reservations that belong to the capacity reservation group. </param>
        /// <returns> A new <see cref="Compute.CapacityReservationGroupData"/> instance for mocking. </returns>
        public static CapacityReservationGroupData CapacityReservationGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<string> zones = null, IEnumerable<SubResource> capacityReservations = null, IEnumerable<SubResource> virtualMachinesAssociated = null, IEnumerable<CapacityReservationInstanceViewWithName> instanceViewCapacityReservations = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();
            capacityReservations ??= new List<SubResource>();
            virtualMachinesAssociated ??= new List<SubResource>();
            instanceViewCapacityReservations ??= new List<CapacityReservationInstanceViewWithName>();

            return new CapacityReservationGroupData(id, name, resourceType, systemData, tags, location, zones?.ToList(), capacityReservations?.ToList(), virtualMachinesAssociated?.ToList(), instanceViewCapacityReservations != null ? new CapacityReservationGroupInstanceView(instanceViewCapacityReservations?.ToList()) : null);
        }

        /// <summary> Initializes a new instance of CapacityReservationInstanceViewWithName. </summary>
        /// <param name="utilizationInfoVirtualMachinesAllocated"> Unutilized capacity of the capacity reservation. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="name"> The name of the capacity reservation. </param>
        /// <returns> A new <see cref="Models.CapacityReservationInstanceViewWithName"/> instance for mocking. </returns>
        public static CapacityReservationInstanceViewWithName CapacityReservationInstanceViewWithName(IEnumerable<SubResource> utilizationInfoVirtualMachinesAllocated = null, IEnumerable<InstanceViewStatus> statuses = null, string name = null)
        {
            utilizationInfoVirtualMachinesAllocated ??= new List<SubResource>();
            statuses ??= new List<InstanceViewStatus>();

            return new CapacityReservationInstanceViewWithName(utilizationInfoVirtualMachinesAllocated != null ? new CapacityReservationUtilization(utilizationInfoVirtualMachinesAllocated?.ToList()) : null, statuses?.ToList(), name);
        }

        /// <summary> Initializes a new instance of CapacityReservationInstanceView. </summary>
        /// <param name="utilizationInfoVirtualMachinesAllocated"> Unutilized capacity of the capacity reservation. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.CapacityReservationInstanceView"/> instance for mocking. </returns>
        public static CapacityReservationInstanceView CapacityReservationInstanceView(IEnumerable<SubResource> utilizationInfoVirtualMachinesAllocated = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            utilizationInfoVirtualMachinesAllocated ??= new List<SubResource>();
            statuses ??= new List<InstanceViewStatus>();

            return new CapacityReservationInstanceView(utilizationInfoVirtualMachinesAllocated != null ? new CapacityReservationUtilization(utilizationInfoVirtualMachinesAllocated?.ToList()) : null, statuses?.ToList());
        }

        /// <summary> Initializes a new instance of CapacityReservationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required to be set. Currently VM Skus with the capability called &apos;CapacityReservationSupported&apos; set to true are supported. Refer to List Microsoft.Compute SKUs in a region (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported values. </param>
        /// <param name="zones"> Availability Zone to use for this capacity reservation. The zone has to be single value and also should be part for the list of zones specified during the capacity reservation group creation. The zone can be assigned only during creation. If not provided, the reservation supports only non-zonal deployments. If provided, enforces VM/VMSS using this capacity reservation to be in same zone. </param>
        /// <param name="reservationId"> A unique id generated and assigned to the capacity reservation by the platform which does not change throughout the lifetime of the resource. </param>
        /// <param name="virtualMachinesAssociated"> A list of all virtual machine resource ids that are associated with the capacity reservation. </param>
        /// <param name="provisioningOn"> The date time when the capacity reservation was last updated. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="instanceView"> The Capacity reservation instance view. </param>
        /// <param name="timeCreated"> Specifies the time at which the Capacity Reservation resource was created.&lt;br&gt;&lt;br&gt;Minimum api-version: 2022-03-01. </param>
        /// <returns> A new <see cref="Compute.CapacityReservationData"/> instance for mocking. </returns>
        public static CapacityReservationData CapacityReservationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ComputeSku sku = null, IEnumerable<string> zones = null, string reservationId = null, IEnumerable<SubResource> virtualMachinesAssociated = null, DateTimeOffset? provisioningOn = null, string provisioningState = null, CapacityReservationInstanceView instanceView = null, DateTimeOffset? timeCreated = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();
            virtualMachinesAssociated ??= new List<SubResource>();

            return new CapacityReservationData(id, name, resourceType, systemData, tags, location, sku, zones?.ToList(), reservationId, virtualMachinesAssociated?.ToList(), provisioningOn, provisioningState, instanceView, timeCreated);
        }

        /// <summary> Initializes a new instance of LogAnalytics. </summary>
        /// <param name="logAnalyticsOutput"> LogAnalyticsOutput. </param>
        /// <returns> A new <see cref="Models.LogAnalytics"/> instance for mocking. </returns>
        public static LogAnalytics LogAnalytics(string logAnalyticsOutput = null)
        {
            return new LogAnalytics(logAnalyticsOutput != null ? new LogAnalyticsOutput(logAnalyticsOutput) : null);
        }

        /// <summary> Initializes a new instance of RunCommandDocumentBase. </summary>
        /// <param name="schema"> The VM run command schema. </param>
        /// <param name="id"> The VM run command id. </param>
        /// <param name="osType"> The Operating System type. </param>
        /// <param name="label"> The VM run command label. </param>
        /// <param name="description"> The VM run command description. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schema"/>, <paramref name="id"/>, <paramref name="label"/> or <paramref name="description"/> is null. </exception>
        /// <returns> A new <see cref="Models.RunCommandDocumentBase"/> instance for mocking. </returns>
        public static RunCommandDocumentBase RunCommandDocumentBase(string schema = null, string id = null, SupportedOperatingSystemType osType = default, string label = null, string description = null)
        {
            if (schema == null)
            {
                throw new ArgumentNullException(nameof(schema));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (label == null)
            {
                throw new ArgumentNullException(nameof(label));
            }
            if (description == null)
            {
                throw new ArgumentNullException(nameof(description));
            }

            return new RunCommandDocumentBase(schema, id, osType, label, description);
        }

        /// <summary> Initializes a new instance of RunCommandDocument. </summary>
        /// <param name="schema"> The VM run command schema. </param>
        /// <param name="id"> The VM run command id. </param>
        /// <param name="osType"> The Operating System type. </param>
        /// <param name="label"> The VM run command label. </param>
        /// <param name="description"> The VM run command description. </param>
        /// <param name="script"> The script to be executed. </param>
        /// <param name="parameters"> The parameters used by the script. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="schema"/>, <paramref name="id"/>, <paramref name="label"/> or <paramref name="description"/> is null. </exception>
        /// <returns> A new <see cref="Models.RunCommandDocument"/> instance for mocking. </returns>
        public static RunCommandDocument RunCommandDocument(string schema = null, string id = null, SupportedOperatingSystemType osType = default, string label = null, string description = null, IEnumerable<string> script = null, IEnumerable<RunCommandParameterDefinition> parameters = null)
        {
            if (schema == null)
            {
                throw new ArgumentNullException(nameof(schema));
            }
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (label == null)
            {
                throw new ArgumentNullException(nameof(label));
            }
            if (description == null)
            {
                throw new ArgumentNullException(nameof(description));
            }
            script ??= new List<string>();
            parameters ??= new List<RunCommandParameterDefinition>();

            return new RunCommandDocument(schema, id, osType, label, description, script?.ToList(), parameters?.ToList());
        }

        /// <summary> Initializes a new instance of RunCommandParameterDefinition. </summary>
        /// <param name="name"> The run command parameter name. </param>
        /// <param name="runCommandParameterDefinitionType"> The run command parameter type. </param>
        /// <param name="defaultValue"> The run command parameter default value. </param>
        /// <param name="required"> The run command parameter required. </param>
        /// <returns> A new <see cref="Models.RunCommandParameterDefinition"/> instance for mocking. </returns>
        public static RunCommandParameterDefinition RunCommandParameterDefinition(string name = null, string runCommandParameterDefinitionType = null, string defaultValue = null, bool? required = null)
        {
            return new RunCommandParameterDefinition(name, runCommandParameterDefinitionType, defaultValue, required);
        }

        /// <summary> Initializes a new instance of VirtualMachineRunCommandResult. </summary>
        /// <param name="value"> Run command operation response. </param>
        /// <returns> A new <see cref="Models.VirtualMachineRunCommandResult"/> instance for mocking. </returns>
        public static VirtualMachineRunCommandResult VirtualMachineRunCommandResult(IEnumerable<InstanceViewStatus> value = null)
        {
            value ??= new List<InstanceViewStatus>();

            return new VirtualMachineRunCommandResult(value?.ToList());
        }

        /// <summary> Initializes a new instance of VirtualMachineRunCommandData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="source"> The source of the run command script. </param>
        /// <param name="parameters"> The parameters used by the script. </param>
        /// <param name="protectedParameters"> The parameters used by the script. </param>
        /// <param name="asyncExecution"> Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete. </param>
        /// <param name="runAsUser"> Specifies the user account on the VM when executing the run command. </param>
        /// <param name="runAsPassword"> Specifies the user account password on the VM when executing the run command. </param>
        /// <param name="timeoutInSeconds"> The timeout in seconds to execute the run command. </param>
        /// <param name="outputBlobUri"> Specifies the Azure storage blob where script output stream will be uploaded. </param>
        /// <param name="errorBlobUri"> Specifies the Azure storage blob where script error stream will be uploaded. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="instanceView"> The virtual machine run command instance view. </param>
        /// <returns> A new <see cref="Compute.VirtualMachineRunCommandData"/> instance for mocking. </returns>
        public static VirtualMachineRunCommandData VirtualMachineRunCommandData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualMachineRunCommandScriptSource source = null, IEnumerable<RunCommandInputParameter> parameters = null, IEnumerable<RunCommandInputParameter> protectedParameters = null, bool? asyncExecution = null, string runAsUser = null, string runAsPassword = null, int? timeoutInSeconds = null, Uri outputBlobUri = null, Uri errorBlobUri = null, string provisioningState = null, VirtualMachineRunCommandInstanceView instanceView = null)
        {
            tags ??= new Dictionary<string, string>();
            parameters ??= new List<RunCommandInputParameter>();
            protectedParameters ??= new List<RunCommandInputParameter>();

            return new VirtualMachineRunCommandData(id, name, resourceType, systemData, tags, location, source, parameters?.ToList(), protectedParameters?.ToList(), asyncExecution, runAsUser, runAsPassword, timeoutInSeconds, outputBlobUri, errorBlobUri, provisioningState, instanceView);
        }

        /// <summary> Initializes a new instance of VirtualMachineRunCommandScriptSource. </summary>
        /// <param name="script"> Specifies the script content to be executed on the VM. </param>
        /// <param name="scriptUri"> Specifies the script download location. </param>
        /// <param name="commandId"> Specifies a commandId of predefined built-in script. </param>
        /// <returns> A new <see cref="Models.VirtualMachineRunCommandScriptSource"/> instance for mocking. </returns>
        public static VirtualMachineRunCommandScriptSource VirtualMachineRunCommandScriptSource(string script = null, Uri scriptUri = null, string commandId = null)
        {
            return new VirtualMachineRunCommandScriptSource(script, scriptUri, commandId);
        }

        /// <summary> Initializes a new instance of VirtualMachineRunCommandInstanceView. </summary>
        /// <param name="executionState"> Script execution status. </param>
        /// <param name="executionMessage"> Communicate script configuration errors or execution messages. </param>
        /// <param name="exitCode"> Exit code returned from script execution. </param>
        /// <param name="output"> Script output stream. </param>
        /// <param name="error"> Script error stream. </param>
        /// <param name="startOn"> Script start time. </param>
        /// <param name="endOn"> Script end time. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.VirtualMachineRunCommandInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineRunCommandInstanceView VirtualMachineRunCommandInstanceView(ExecutionState? executionState = null, string executionMessage = null, int? exitCode = null, string output = null, string error = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            statuses ??= new List<InstanceViewStatus>();

            return new VirtualMachineRunCommandInstanceView(executionState, executionMessage, exitCode, output, error, startOn, endOn, statuses?.ToList());
        }

        /// <summary> Initializes a new instance of ManagedDiskData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="managedBy"> A relative URI containing the ID of the VM that has the disk attached. </param>
        /// <param name="managedByExtended"> List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs. </param>
        /// <param name="sku"> The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, StandardSSD_ZRS, or PremiumV2_LRS. </param>
        /// <param name="zones"> The Logical zone list for Disk. </param>
        /// <param name="extendedLocation"> The extended location where the disk will be created. Extended location cannot be changed. </param>
        /// <param name="timeCreated"> The time when the disk was created. </param>
        /// <param name="osType"> The Operating System type. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="purchasePlan"> Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}. </param>
        /// <param name="supportedCapabilities"> List of supported capabilities for the image from which the OS disk was created. </param>
        /// <param name="creationData"> Disk source information. CreationData information cannot be changed after the disk has been created. </param>
        /// <param name="diskSizeGB"> If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&apos;s size. </param>
        /// <param name="diskSizeBytes"> The size of the disk in bytes. This field is read only. </param>
        /// <param name="uniqueId"> Unique Guid identifying the resource. </param>
        /// <param name="encryptionSettingsGroup"> Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. </param>
        /// <param name="provisioningState"> The disk provisioning state. </param>
        /// <param name="diskIopsReadWrite"> The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes. </param>
        /// <param name="diskMBpsReadWrite"> The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. </param>
        /// <param name="diskIopsReadOnly"> The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes. </param>
        /// <param name="diskMBpsReadOnly"> The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. </param>
        /// <param name="diskState"> The state of the disk. </param>
        /// <param name="encryption"> Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. </param>
        /// <param name="maxShares"> The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. </param>
        /// <param name="shareInfo"> Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs. </param>
        /// <param name="networkAccessPolicy"> Policy for accessing the disk via network. </param>
        /// <param name="diskAccessId"> ARM id of the DiskAccess resource for using private endpoints on disks. </param>
        /// <param name="tier"> Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks. </param>
        /// <param name="burstingEnabled"> Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks. </param>
        /// <param name="propertyUpdatesInProgressTargetTier"> Properties of the disk for which update is pending. </param>
        /// <param name="supportsHibernation"> Indicates the OS on a disk supports hibernation. </param>
        /// <param name="securityProfile"> Contains the security related information for the resource. </param>
        /// <param name="completionPercent"> Percentage complete for the background copy when a resource is created via the CopyStart operation. </param>
        /// <param name="publicNetworkAccess"> Policy for controlling export on the disk. </param>
        /// <param name="dataAccessAuthMode"> Additional authentication requirements when exporting or uploading to a disk or snapshot. </param>
        /// <returns> A new <see cref="Compute.ManagedDiskData"/> instance for mocking. </returns>
        public static ManagedDiskData ManagedDiskData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ResourceIdentifier managedBy = null, IEnumerable<ResourceIdentifier> managedByExtended = null, DiskSku sku = null, IEnumerable<string> zones = null, ExtendedLocation extendedLocation = null, DateTimeOffset? timeCreated = null, SupportedOperatingSystemType? osType = null, HyperVGeneration? hyperVGeneration = null, DiskPurchasePlan purchasePlan = null, SupportedCapabilities supportedCapabilities = null, DiskCreationData creationData = null, int? diskSizeGB = null, long? diskSizeBytes = null, string uniqueId = null, EncryptionSettingsGroup encryptionSettingsGroup = null, string provisioningState = null, long? diskIopsReadWrite = null, long? diskMBpsReadWrite = null, long? diskIopsReadOnly = null, long? diskMBpsReadOnly = null, DiskState? diskState = null, DiskEncryption encryption = null, int? maxShares = null, IEnumerable<ShareInfoElement> shareInfo = null, NetworkAccessPolicy? networkAccessPolicy = null, ResourceIdentifier diskAccessId = null, string tier = null, bool? burstingEnabled = null, string propertyUpdatesInProgressTargetTier = null, bool? supportsHibernation = null, DiskSecurityProfile securityProfile = null, float? completionPercent = null, DiskPublicNetworkAccess? publicNetworkAccess = null, DataAccessAuthMode? dataAccessAuthMode = null)
        {
            tags ??= new Dictionary<string, string>();
            managedByExtended ??= new List<ResourceIdentifier>();
            zones ??= new List<string>();
            shareInfo ??= new List<ShareInfoElement>();

            return new ManagedDiskData(id, name, resourceType, systemData, tags, location, managedBy, managedByExtended?.ToList(), sku, zones?.ToList(), extendedLocation, timeCreated, osType, hyperVGeneration, purchasePlan, supportedCapabilities, creationData, diskSizeGB, diskSizeBytes, uniqueId, encryptionSettingsGroup, provisioningState, diskIopsReadWrite, diskMBpsReadWrite, diskIopsReadOnly, diskMBpsReadOnly, diskState, encryption, maxShares, shareInfo?.ToList(), networkAccessPolicy, diskAccessId, tier, burstingEnabled, propertyUpdatesInProgressTargetTier != null ? new PropertyUpdatesInProgress(propertyUpdatesInProgressTargetTier) : null, supportsHibernation, securityProfile, completionPercent, publicNetworkAccess, dataAccessAuthMode);
        }

        /// <summary> Initializes a new instance of DiskSku. </summary>
        /// <param name="name"> The sku name. </param>
        /// <param name="tier"> The sku tier. </param>
        /// <returns> A new <see cref="Models.DiskSku"/> instance for mocking. </returns>
        public static DiskSku DiskSku(DiskStorageAccountType? name = null, string tier = null)
        {
            return new DiskSku(name, tier);
        }

        /// <summary> Initializes a new instance of DiskPurchasePlan. </summary>
        /// <param name="name"> The plan ID. </param>
        /// <param name="publisher"> The publisher ID. </param>
        /// <param name="product"> Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element. </param>
        /// <param name="promotionCode"> The Offer Promotion Code. </param>
        /// <returns> A new <see cref="Models.DiskPurchasePlan"/> instance for mocking. </returns>
        public static DiskPurchasePlan DiskPurchasePlan(string name = null, string publisher = null, string product = null, string promotionCode = null)
        {
            return new DiskPurchasePlan(name, publisher, product, promotionCode);
        }

        /// <summary> Initializes a new instance of SupportedCapabilities. </summary>
        /// <param name="acceleratedNetwork"> True if the image from which the OS disk is created supports accelerated networking. </param>
        /// <param name="architecture"> CPU architecture supported by an OS disk. </param>
        /// <returns> A new <see cref="Models.SupportedCapabilities"/> instance for mocking. </returns>
        public static SupportedCapabilities SupportedCapabilities(bool? acceleratedNetwork = null, ArchitectureType? architecture = null)
        {
            return new SupportedCapabilities(acceleratedNetwork, architecture);
        }

        /// <summary> Initializes a new instance of DiskCreationData. </summary>
        /// <param name="createOption"> This enumerates the possible sources of a disk&apos;s creation. </param>
        /// <param name="storageAccountId"> Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk. </param>
        /// <param name="imageReference"> Disk source information for PIR or user images. </param>
        /// <param name="galleryImageReference"> Required if creating from a Gallery Image. The id/sharedGalleryImageId/communityGalleryImageId of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk. </param>
        /// <param name="sourceUri"> If createOption is Import, this is the URI of a blob to be imported into a managed disk. </param>
        /// <param name="sourceResourceId"> If createOption is Copy, this is the ARM id of the source snapshot or disk. </param>
        /// <param name="sourceUniqueId"> If this field is set, this is the unique id identifying the source of this resource. </param>
        /// <param name="uploadSizeBytes"> If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer). </param>
        /// <param name="logicalSectorSize"> Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default. </param>
        /// <param name="securityDataUri"> If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state. </param>
        /// <returns> A new <see cref="Models.DiskCreationData"/> instance for mocking. </returns>
        public static DiskCreationData DiskCreationData(DiskCreateOption createOption = default, ResourceIdentifier storageAccountId = null, ImageDiskReference imageReference = null, ImageDiskReference galleryImageReference = null, Uri sourceUri = null, ResourceIdentifier sourceResourceId = null, string sourceUniqueId = null, long? uploadSizeBytes = null, int? logicalSectorSize = null, Uri securityDataUri = null)
        {
            return new DiskCreationData(createOption, storageAccountId, imageReference, galleryImageReference, sourceUri, sourceResourceId, sourceUniqueId, uploadSizeBytes, logicalSectorSize, securityDataUri);
        }

        /// <summary> Initializes a new instance of ImageDiskReference. </summary>
        /// <param name="id"> A relative uri containing either a Platform Image Repository, user image, or Azure Compute Gallery image reference. </param>
        /// <param name="sharedGalleryImageId"> A relative uri containing a direct shared Azure Compute Gallery image reference. </param>
        /// <param name="communityGalleryImageId"> A relative uri containing a community Azure Compute Gallery image reference. </param>
        /// <param name="lun"> If the disk is created from an image&apos;s data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null. </param>
        /// <returns> A new <see cref="Models.ImageDiskReference"/> instance for mocking. </returns>
        public static ImageDiskReference ImageDiskReference(ResourceIdentifier id = null, string sharedGalleryImageId = null, string communityGalleryImageId = null, int? lun = null)
        {
            return new ImageDiskReference(id, sharedGalleryImageId, communityGalleryImageId, lun);
        }

        /// <summary> Initializes a new instance of EncryptionSettingsGroup. </summary>
        /// <param name="enabled"> Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged. </param>
        /// <param name="encryptionSettings"> A collection of encryption settings, one for each disk volume. </param>
        /// <param name="encryptionSettingsVersion"> Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. &apos;1.0&apos; corresponds to Azure Disk Encryption with AAD app.&apos;1.1&apos; corresponds to Azure Disk Encryption. </param>
        /// <returns> A new <see cref="Models.EncryptionSettingsGroup"/> instance for mocking. </returns>
        public static EncryptionSettingsGroup EncryptionSettingsGroup(bool enabled = default, IEnumerable<EncryptionSettingsElement> encryptionSettings = null, string encryptionSettingsVersion = null)
        {
            encryptionSettings ??= new List<EncryptionSettingsElement>();

            return new EncryptionSettingsGroup(enabled, encryptionSettings?.ToList(), encryptionSettingsVersion);
        }

        /// <summary> Initializes a new instance of EncryptionSettingsElement. </summary>
        /// <param name="diskEncryptionKey"> Key Vault Secret Url and vault id of the disk encryption key. </param>
        /// <param name="keyEncryptionKey"> Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key. </param>
        /// <returns> A new <see cref="Models.EncryptionSettingsElement"/> instance for mocking. </returns>
        public static EncryptionSettingsElement EncryptionSettingsElement(KeyVaultAndSecretReference diskEncryptionKey = null, KeyVaultAndKeyReference keyEncryptionKey = null)
        {
            return new EncryptionSettingsElement(diskEncryptionKey, keyEncryptionKey);
        }

        /// <summary> Initializes a new instance of DiskEncryption. </summary>
        /// <param name="diskEncryptionSetId"> ResourceId of the disk encryption set to use for enabling encryption at rest. </param>
        /// <param name="encryptionType"> The type of key used to encrypt the data of the disk. </param>
        /// <returns> A new <see cref="Models.DiskEncryption"/> instance for mocking. </returns>
        public static DiskEncryption DiskEncryption(ResourceIdentifier diskEncryptionSetId = null, ComputeEncryptionType? encryptionType = null)
        {
            return new DiskEncryption(diskEncryptionSetId, encryptionType);
        }

        /// <summary> Initializes a new instance of ShareInfoElement. </summary>
        /// <param name="vmUri"> A relative URI containing the ID of the VM that has the disk attached. </param>
        /// <returns> A new <see cref="Models.ShareInfoElement"/> instance for mocking. </returns>
        public static ShareInfoElement ShareInfoElement(Uri vmUri = null)
        {
            return new ShareInfoElement(vmUri);
        }

        /// <summary> Initializes a new instance of DiskSecurityProfile. </summary>
        /// <param name="securityType"> Specifies the SecurityType of the VM. Applicable for OS disks only. </param>
        /// <param name="secureVmDiskEncryptionSetId"> ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key. </param>
        /// <returns> A new <see cref="Models.DiskSecurityProfile"/> instance for mocking. </returns>
        public static DiskSecurityProfile DiskSecurityProfile(DiskSecurityType? securityType = null, ResourceIdentifier secureVmDiskEncryptionSetId = null)
        {
            return new DiskSecurityProfile(securityType, secureVmDiskEncryptionSetId);
        }

        /// <summary> Initializes a new instance of AccessUri. </summary>
        /// <param name="accessSas"> A SAS uri for accessing a disk. </param>
        /// <param name="securityDataAccessSas"> A SAS uri for accessing a VM guest state. </param>
        /// <returns> A new <see cref="Models.AccessUri"/> instance for mocking. </returns>
        public static AccessUri AccessUri(string accessSas = null, string securityDataAccessSas = null)
        {
            return new AccessUri(accessSas, securityDataAccessSas);
        }

        /// <summary> Initializes a new instance of DiskAccessData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extended location where the disk access will be created. Extended location cannot be changed. </param>
        /// <param name="privateEndpointConnections"> A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection is supported. </param>
        /// <param name="provisioningState"> The disk access resource provisioning state. </param>
        /// <param name="timeCreated"> The time when the disk access was created. </param>
        /// <returns> A new <see cref="Compute.DiskAccessData"/> instance for mocking. </returns>
        public static DiskAccessData DiskAccessData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, IEnumerable<ComputePrivateEndpointConnectionData> privateEndpointConnections = null, string provisioningState = null, DateTimeOffset? timeCreated = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<ComputePrivateEndpointConnectionData>();

            return new DiskAccessData(id, name, resourceType, systemData, tags, location, extendedLocation, privateEndpointConnections?.ToList(), provisioningState, timeCreated);
        }

        /// <summary> Initializes a new instance of ComputePrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="privateEndpointId"> The resource of private end point. </param>
        /// <param name="connectionState"> A collection of information about the state of the connection between DiskAccess and Virtual Network. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection resource. </param>
        /// <returns> A new <see cref="Compute.ComputePrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static ComputePrivateEndpointConnectionData ComputePrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier privateEndpointId = null, ComputePrivateLinkServiceConnectionState connectionState = null, ComputePrivateEndpointConnectionProvisioningState? provisioningState = null)
        {
            return new ComputePrivateEndpointConnectionData(id, name, resourceType, systemData, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, connectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of ComputePrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. </param>
        /// <param name="description"> The reason for approval/rejection of the connection. </param>
        /// <param name="actionsRequired"> A message indicating if changes on the service provider require any updates on the consumer. </param>
        /// <returns> A new <see cref="Models.ComputePrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static ComputePrivateLinkServiceConnectionState ComputePrivateLinkServiceConnectionState(ComputePrivateEndpointServiceConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new ComputePrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of ComputePrivateLinkResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource DNS zone name. </param>
        /// <returns> A new <see cref="Models.ComputePrivateLinkResourceData"/> instance for mocking. </returns>
        public static ComputePrivateLinkResourceData ComputePrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new ComputePrivateLinkResourceData(id, name, resourceType, systemData, groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of DiskEncryptionSetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. </param>
        /// <param name="encryptionType"> The type of key used to encrypt the data of the disk. </param>
        /// <param name="activeKey"> The key vault key which is currently used by this disk encryption set. </param>
        /// <param name="previousKeys"> A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation. </param>
        /// <param name="provisioningState"> The disk encryption set provisioning state. </param>
        /// <param name="rotationToLatestKeyVersionEnabled"> Set this flag to true to enable auto-updating of this disk encryption set to the latest key version. </param>
        /// <param name="lastKeyRotationTimestamp"> The time when the active key of this disk encryption set was updated. </param>
        /// <param name="autoKeyRotationError"> The error that was encountered during auto-key rotation. If an error is present, then auto-key rotation will not be attempted until the error on this disk encryption set is fixed. </param>
        /// <param name="federatedClientId"> Multi-tenant application client id to access key vault in a different tenant. Setting the value to &apos;None&apos; will clear the property. </param>
        /// <returns> A new <see cref="Compute.DiskEncryptionSetData"/> instance for mocking. </returns>
        public static DiskEncryptionSetData DiskEncryptionSetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, DiskEncryptionSetType? encryptionType = null, KeyForDiskEncryptionSet activeKey = null, IEnumerable<KeyForDiskEncryptionSet> previousKeys = null, string provisioningState = null, bool? rotationToLatestKeyVersionEnabled = null, DateTimeOffset? lastKeyRotationTimestamp = null, ComputeApiError autoKeyRotationError = null, string federatedClientId = null)
        {
            tags ??= new Dictionary<string, string>();
            previousKeys ??= new List<KeyForDiskEncryptionSet>();

            return new DiskEncryptionSetData(id, name, resourceType, systemData, tags, location, identity, encryptionType, activeKey, previousKeys?.ToList(), provisioningState, rotationToLatestKeyVersionEnabled, lastKeyRotationTimestamp, autoKeyRotationError, federatedClientId);
        }

        /// <summary> Initializes a new instance of KeyForDiskEncryptionSet. </summary>
        /// <param name="sourceVaultId"> Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription. </param>
        /// <param name="keyUri"> Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value. </param>
        /// <returns> A new <see cref="Models.KeyForDiskEncryptionSet"/> instance for mocking. </returns>
        public static KeyForDiskEncryptionSet KeyForDiskEncryptionSet(ResourceIdentifier sourceVaultId = null, Uri keyUri = null)
        {
            return new KeyForDiskEncryptionSet(sourceVaultId != null ? ResourceManagerModelFactory.WritableSubResource(sourceVaultId) : null, keyUri);
        }

        /// <summary> Initializes a new instance of DiskRestorePointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="timeCreated"> The timestamp of restorePoint creation. </param>
        /// <param name="sourceResourceId"> arm id of source disk or source disk restore point. </param>
        /// <param name="osType"> The Operating System type. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="purchasePlan"> Purchase plan information for the the image from which the OS disk was created. </param>
        /// <param name="supportedCapabilities"> List of supported capabilities for the image from which the OS disk was created. </param>
        /// <param name="familyId"> id of the backing snapshot&apos;s MIS family. </param>
        /// <param name="sourceUniqueId"> unique incarnation id of the source disk. </param>
        /// <param name="encryption"> Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. </param>
        /// <param name="supportsHibernation"> Indicates the OS on a disk supports hibernation. </param>
        /// <param name="networkAccessPolicy"> Policy for accessing the disk via network. </param>
        /// <param name="publicNetworkAccess"> Policy for controlling export on the disk. </param>
        /// <param name="diskAccessId"> ARM id of the DiskAccess resource for using private endpoints on disks. </param>
        /// <param name="completionPercent"> Percentage complete for the background copy of disk restore point when source resource is from a different region. </param>
        /// <param name="replicationState"> Replication state of disk restore point when source resource is from a different region. </param>
        /// <param name="sourceResourceLocation"> Location of source disk or source disk restore point when source resource is from a different region. </param>
        /// <param name="securityProfile"> Contains the security related information for the resource. </param>
        /// <returns> A new <see cref="Compute.DiskRestorePointData"/> instance for mocking. </returns>
        public static DiskRestorePointData DiskRestorePointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DateTimeOffset? timeCreated = null, ResourceIdentifier sourceResourceId = null, SupportedOperatingSystemType? osType = null, HyperVGeneration? hyperVGeneration = null, DiskPurchasePlan purchasePlan = null, SupportedCapabilities supportedCapabilities = null, string familyId = null, string sourceUniqueId = null, DiskEncryption encryption = null, bool? supportsHibernation = null, NetworkAccessPolicy? networkAccessPolicy = null, DiskPublicNetworkAccess? publicNetworkAccess = null, ResourceIdentifier diskAccessId = null, float? completionPercent = null, string replicationState = null, AzureLocation? sourceResourceLocation = null, DiskSecurityProfile securityProfile = null)
        {
            return new DiskRestorePointData(id, name, resourceType, systemData, timeCreated, sourceResourceId, osType, hyperVGeneration, purchasePlan, supportedCapabilities, familyId, sourceUniqueId, encryption, supportsHibernation, networkAccessPolicy, publicNetworkAccess, diskAccessId, completionPercent, replicationState, sourceResourceLocation, securityProfile);
        }

        /// <summary> Initializes a new instance of SnapshotData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="managedBy"> Unused. Always Null. </param>
        /// <param name="sku"> The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot. </param>
        /// <param name="extendedLocation"> The extended location where the snapshot will be created. Extended location cannot be changed. </param>
        /// <param name="timeCreated"> The time when the snapshot was created. </param>
        /// <param name="osType"> The Operating System type. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="purchasePlan"> Purchase plan information for the image from which the source disk for the snapshot was originally created. </param>
        /// <param name="supportedCapabilities"> List of supported capabilities for the image from which the source disk from the snapshot was originally created. </param>
        /// <param name="creationData"> Disk source information. CreationData information cannot be changed after the disk has been created. </param>
        /// <param name="diskSizeGB"> If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&apos;s size. </param>
        /// <param name="diskSizeBytes"> The size of the disk in bytes. This field is read only. </param>
        /// <param name="diskState"> The state of the snapshot. </param>
        /// <param name="uniqueId"> Unique Guid identifying the resource. </param>
        /// <param name="encryptionSettingsGroup"> Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot. </param>
        /// <param name="provisioningState"> The disk provisioning state. </param>
        /// <param name="incremental"> Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed. </param>
        /// <param name="encryption"> Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys. </param>
        /// <param name="networkAccessPolicy"> Policy for accessing the disk via network. </param>
        /// <param name="diskAccessId"> ARM id of the DiskAccess resource for using private endpoints on disks. </param>
        /// <param name="securityProfile"> Contains the security related information for the resource. </param>
        /// <param name="supportsHibernation"> Indicates the OS on a snapshot supports hibernation. </param>
        /// <param name="publicNetworkAccess"> Policy for controlling export on the disk. </param>
        /// <param name="completionPercent"> Percentage complete for the background copy when a resource is created via the CopyStart operation. </param>
        /// <param name="copyCompletionError"> Indicates the error details if the background copy of a resource created via the CopyStart operation fails. </param>
        /// <param name="dataAccessAuthMode"> Additional authentication requirements when exporting or uploading to a disk or snapshot. </param>
        /// <returns> A new <see cref="Compute.SnapshotData"/> instance for mocking. </returns>
        public static SnapshotData SnapshotData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string managedBy = null, SnapshotSku sku = null, ExtendedLocation extendedLocation = null, DateTimeOffset? timeCreated = null, SupportedOperatingSystemType? osType = null, HyperVGeneration? hyperVGeneration = null, DiskPurchasePlan purchasePlan = null, SupportedCapabilities supportedCapabilities = null, DiskCreationData creationData = null, int? diskSizeGB = null, long? diskSizeBytes = null, DiskState? diskState = null, string uniqueId = null, EncryptionSettingsGroup encryptionSettingsGroup = null, string provisioningState = null, bool? incremental = null, DiskEncryption encryption = null, NetworkAccessPolicy? networkAccessPolicy = null, ResourceIdentifier diskAccessId = null, DiskSecurityProfile securityProfile = null, bool? supportsHibernation = null, DiskPublicNetworkAccess? publicNetworkAccess = null, float? completionPercent = null, CopyCompletionError copyCompletionError = null, DataAccessAuthMode? dataAccessAuthMode = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SnapshotData(id, name, resourceType, systemData, tags, location, managedBy, sku, extendedLocation, timeCreated, osType, hyperVGeneration, purchasePlan, supportedCapabilities, creationData, diskSizeGB, diskSizeBytes, diskState, uniqueId, encryptionSettingsGroup, provisioningState, incremental, encryption, networkAccessPolicy, diskAccessId, securityProfile, supportsHibernation, publicNetworkAccess, completionPercent, copyCompletionError, dataAccessAuthMode);
        }

        /// <summary> Initializes a new instance of SnapshotSku. </summary>
        /// <param name="name"> The sku name. </param>
        /// <param name="tier"> The sku tier. </param>
        /// <returns> A new <see cref="Models.SnapshotSku"/> instance for mocking. </returns>
        public static SnapshotSku SnapshotSku(SnapshotStorageAccountType? name = null, string tier = null)
        {
            return new SnapshotSku(name, tier);
        }

        /// <summary> Initializes a new instance of ComputeResourceSku. </summary>
        /// <param name="resourceType"> The type of resource the SKU applies to. </param>
        /// <param name="name"> The name of SKU. </param>
        /// <param name="tier"> Specifies the tier of virtual machines in a scale set.&lt;br /&gt;&lt;br /&gt; Possible Values:&lt;br /&gt;&lt;br /&gt; **Standard**&lt;br /&gt;&lt;br /&gt; **Basic**. </param>
        /// <param name="size"> The Size of the SKU. </param>
        /// <param name="family"> The Family of this particular SKU. </param>
        /// <param name="kind"> The Kind of resources that are supported in this SKU. </param>
        /// <param name="capacity"> Specifies the number of virtual machines in the scale set. </param>
        /// <param name="locations"> The set of locations that the SKU is available. </param>
        /// <param name="locationInfo"> A list of locations and availability zones in those locations where the SKU is available. </param>
        /// <param name="apiVersions"> The api versions that support this SKU. </param>
        /// <param name="costs"> Metadata for retrieving price info. </param>
        /// <param name="capabilities"> A name value pair to describe the capability. </param>
        /// <param name="restrictions"> The restrictions because of which SKU cannot be used. This is empty if there are no restrictions. </param>
        /// <returns> A new <see cref="Models.ComputeResourceSku"/> instance for mocking. </returns>
        public static ComputeResourceSku ComputeResourceSku(string resourceType = null, string name = null, string tier = null, string size = null, string family = null, string kind = null, ComputeResourceSkuCapacity capacity = null, IEnumerable<AzureLocation> locations = null, IEnumerable<ComputeResourceSkuLocationInfo> locationInfo = null, IEnumerable<string> apiVersions = null, IEnumerable<ResourceSkuCosts> costs = null, IEnumerable<ComputeResourceSkuCapabilities> capabilities = null, IEnumerable<ComputeResourceSkuRestrictions> restrictions = null)
        {
            locations ??= new List<AzureLocation>();
            locationInfo ??= new List<ComputeResourceSkuLocationInfo>();
            apiVersions ??= new List<string>();
            costs ??= new List<ResourceSkuCosts>();
            capabilities ??= new List<ComputeResourceSkuCapabilities>();
            restrictions ??= new List<ComputeResourceSkuRestrictions>();

            return new ComputeResourceSku(resourceType, name, tier, size, family, kind, capacity, locations?.ToList(), locationInfo?.ToList(), apiVersions?.ToList(), costs?.ToList(), capabilities?.ToList(), restrictions?.ToList());
        }

        /// <summary> Initializes a new instance of ComputeResourceSkuCapacity. </summary>
        /// <param name="minimum"> The minimum capacity. </param>
        /// <param name="maximum"> The maximum capacity that can be set. </param>
        /// <param name="default"> The default capacity. </param>
        /// <param name="scaleType"> The scale type applicable to the sku. </param>
        /// <returns> A new <see cref="Models.ComputeResourceSkuCapacity"/> instance for mocking. </returns>
        public static ComputeResourceSkuCapacity ComputeResourceSkuCapacity(long? minimum = null, long? maximum = null, long? @default = null, ComputeResourceSkuCapacityScaleType? scaleType = null)
        {
            return new ComputeResourceSkuCapacity(minimum, maximum, @default, scaleType);
        }

        /// <summary> Initializes a new instance of ComputeResourceSkuLocationInfo. </summary>
        /// <param name="location"> Location of the SKU. </param>
        /// <param name="zones"> List of availability zones where the SKU is supported. </param>
        /// <param name="zoneDetails"> Details of capabilities available to a SKU in specific zones. </param>
        /// <param name="extendedLocations"> The names of extended locations. </param>
        /// <param name="extendedLocationType"> The type of the extended location. </param>
        /// <returns> A new <see cref="Models.ComputeResourceSkuLocationInfo"/> instance for mocking. </returns>
        public static ComputeResourceSkuLocationInfo ComputeResourceSkuLocationInfo(AzureLocation? location = null, IEnumerable<string> zones = null, IEnumerable<ComputeResourceSkuZoneDetails> zoneDetails = null, IEnumerable<string> extendedLocations = null, ExtendedLocationType? extendedLocationType = null)
        {
            zones ??= new List<string>();
            zoneDetails ??= new List<ComputeResourceSkuZoneDetails>();
            extendedLocations ??= new List<string>();

            return new ComputeResourceSkuLocationInfo(location, zones?.ToList(), zoneDetails?.ToList(), extendedLocations?.ToList(), extendedLocationType);
        }

        /// <summary> Initializes a new instance of ComputeResourceSkuZoneDetails. </summary>
        /// <param name="name"> The set of zones that the SKU is available in with the specified capabilities. </param>
        /// <param name="capabilities"> A list of capabilities that are available for the SKU in the specified list of zones. </param>
        /// <returns> A new <see cref="Models.ComputeResourceSkuZoneDetails"/> instance for mocking. </returns>
        public static ComputeResourceSkuZoneDetails ComputeResourceSkuZoneDetails(IEnumerable<string> name = null, IEnumerable<ComputeResourceSkuCapabilities> capabilities = null)
        {
            name ??= new List<string>();
            capabilities ??= new List<ComputeResourceSkuCapabilities>();

            return new ComputeResourceSkuZoneDetails(name?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of ComputeResourceSkuCapabilities. </summary>
        /// <param name="name"> An invariant to describe the feature. </param>
        /// <param name="value"> An invariant if the feature is measured by quantity. </param>
        /// <returns> A new <see cref="Models.ComputeResourceSkuCapabilities"/> instance for mocking. </returns>
        public static ComputeResourceSkuCapabilities ComputeResourceSkuCapabilities(string name = null, string value = null)
        {
            return new ComputeResourceSkuCapabilities(name, value);
        }

        /// <summary> Initializes a new instance of ResourceSkuCosts. </summary>
        /// <param name="meterId"> Used for querying price from commerce. </param>
        /// <param name="quantity"> The multiplier is needed to extend the base metered cost. </param>
        /// <param name="extendedUnit"> An invariant to show the extended unit. </param>
        /// <returns> A new <see cref="Models.ResourceSkuCosts"/> instance for mocking. </returns>
        public static ResourceSkuCosts ResourceSkuCosts(string meterId = null, long? quantity = null, string extendedUnit = null)
        {
            return new ResourceSkuCosts(meterId, quantity, extendedUnit);
        }

        /// <summary> Initializes a new instance of ComputeResourceSkuRestrictions. </summary>
        /// <param name="restrictionsType"> The type of restrictions. </param>
        /// <param name="values"> The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted. </param>
        /// <param name="restrictionInfo"> The information about the restriction where the SKU cannot be used. </param>
        /// <param name="reasonCode"> The reason for restriction. </param>
        /// <returns> A new <see cref="Models.ComputeResourceSkuRestrictions"/> instance for mocking. </returns>
        public static ComputeResourceSkuRestrictions ComputeResourceSkuRestrictions(ComputeResourceSkuRestrictionsType? restrictionsType = null, IEnumerable<string> values = null, ComputeResourceSkuRestrictionInfo restrictionInfo = null, ComputeResourceSkuRestrictionsReasonCode? reasonCode = null)
        {
            values ??= new List<string>();

            return new ComputeResourceSkuRestrictions(restrictionsType, values?.ToList(), restrictionInfo, reasonCode);
        }

        /// <summary> Initializes a new instance of ComputeResourceSkuRestrictionInfo. </summary>
        /// <param name="locations"> Locations where the SKU is restricted. </param>
        /// <param name="zones"> List of availability zones where the SKU is restricted. </param>
        /// <returns> A new <see cref="Models.ComputeResourceSkuRestrictionInfo"/> instance for mocking. </returns>
        public static ComputeResourceSkuRestrictionInfo ComputeResourceSkuRestrictionInfo(IEnumerable<AzureLocation> locations = null, IEnumerable<string> zones = null)
        {
            locations ??= new List<AzureLocation>();
            zones ??= new List<string>();

            return new ComputeResourceSkuRestrictionInfo(locations?.ToList(), zones?.ToList());
        }

        /// <summary> Initializes a new instance of GalleryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="description"> The description of this Shared Image Gallery resource. This property is updatable. </param>
        /// <param name="identifierUniqueName"> Describes the gallery unique name. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="sharingProfile"> Profile for gallery sharing to subscription or tenant. </param>
        /// <param name="isSoftDeleteEnabled"> Contains information about the soft deletion policy of the gallery. </param>
        /// <param name="sharingStatus"> Sharing status of current gallery. </param>
        /// <returns> A new <see cref="Compute.GalleryData"/> instance for mocking. </returns>
        public static GalleryData GalleryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string description = null, string identifierUniqueName = null, GalleryProvisioningState? provisioningState = null, SharingProfile sharingProfile = null, bool? isSoftDeleteEnabled = null, SharingStatus sharingStatus = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryData(id, name, resourceType, systemData, tags, location, description, identifierUniqueName != null ? new GalleryIdentifier(identifierUniqueName) : null, provisioningState, sharingProfile, isSoftDeleteEnabled != null ? new SoftDeletePolicy(isSoftDeleteEnabled) : null, sharingStatus);
        }

        /// <summary> Initializes a new instance of SharingProfile. </summary>
        /// <param name="permission"> This property allows you to specify the permission of sharing gallery. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Private** &lt;br&gt;&lt;br&gt; **Groups** &lt;br&gt;&lt;br&gt; **Community**. </param>
        /// <param name="groups"> A list of sharing profile groups. </param>
        /// <param name="communityGalleryInfo"> Information of community gallery if current gallery is shared to community. </param>
        /// <returns> A new <see cref="Models.SharingProfile"/> instance for mocking. </returns>
        public static SharingProfile SharingProfile(GallerySharingPermissionType? permission = null, IEnumerable<SharingProfileGroup> groups = null, CommunityGalleryInfo communityGalleryInfo = null)
        {
            groups ??= new List<SharingProfileGroup>();

            return new SharingProfile(permission, groups?.ToList(), communityGalleryInfo);
        }

        /// <summary> Initializes a new instance of SharingProfileGroup. </summary>
        /// <param name="groupType"> This property allows you to specify the type of sharing group. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Subscriptions** &lt;br&gt;&lt;br&gt; **AADTenants**. </param>
        /// <param name="ids"> A list of subscription/tenant ids the gallery is aimed to be shared to. </param>
        /// <returns> A new <see cref="Models.SharingProfileGroup"/> instance for mocking. </returns>
        public static SharingProfileGroup SharingProfileGroup(SharingProfileGroupType? groupType = null, IEnumerable<string> ids = null)
        {
            ids ??= new List<string>();

            return new SharingProfileGroup(groupType, ids?.ToList());
        }

        /// <summary> Initializes a new instance of CommunityGalleryInfo. </summary>
        /// <param name="publisherUri"> The link to the publisher website. Visible to all users. </param>
        /// <param name="publisherContact"> Community gallery publisher support email. The email address of the publisher. Visible to all users. </param>
        /// <param name="eula"> End-user license agreement for community gallery image. </param>
        /// <param name="publicNamePrefix"> The prefix of the gallery name that will be displayed publicly. Visible to all users. </param>
        /// <param name="communityGalleryEnabled"> Contains info about whether community gallery sharing is enabled. </param>
        /// <param name="publicNames"> Community gallery public name list. </param>
        /// <returns> A new <see cref="Models.CommunityGalleryInfo"/> instance for mocking. </returns>
        public static CommunityGalleryInfo CommunityGalleryInfo(Uri publisherUri = null, string publisherContact = null, string eula = null, string publicNamePrefix = null, bool? communityGalleryEnabled = null, IEnumerable<string> publicNames = null)
        {
            publicNames ??= new List<string>();

            return new CommunityGalleryInfo(publisherUri, publisherContact, eula, publicNamePrefix, communityGalleryEnabled, publicNames?.ToList());
        }

        /// <summary> Initializes a new instance of SharingStatus. </summary>
        /// <param name="aggregatedState"> Aggregated sharing state of current gallery. </param>
        /// <param name="summary"> Summary of all regional sharing status. </param>
        /// <returns> A new <see cref="Models.SharingStatus"/> instance for mocking. </returns>
        public static SharingStatus SharingStatus(SharingState? aggregatedState = null, IEnumerable<RegionalSharingStatus> summary = null)
        {
            summary ??= new List<RegionalSharingStatus>();

            return new SharingStatus(aggregatedState, summary?.ToList());
        }

        /// <summary> Initializes a new instance of RegionalSharingStatus. </summary>
        /// <param name="region"> Region name. </param>
        /// <param name="state"> Gallery sharing state in current region. </param>
        /// <param name="details"> Details of gallery regional sharing failure. </param>
        /// <returns> A new <see cref="Models.RegionalSharingStatus"/> instance for mocking. </returns>
        public static RegionalSharingStatus RegionalSharingStatus(string region = null, SharingState? state = null, string details = null)
        {
            return new RegionalSharingStatus(region, state, details);
        }

        /// <summary> Initializes a new instance of GalleryImageData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="description"> The description of this gallery image definition resource. This property is updatable. </param>
        /// <param name="eula"> The Eula agreement for the gallery image definition. </param>
        /// <param name="privacyStatementUri"> The privacy statement uri. </param>
        /// <param name="releaseNoteUri"> The release note uri. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="osState"> This property allows the user to specify whether the virtual machines created under this image are &apos;Generalized&apos; or &apos;Specialized&apos;. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="recommended"> The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. </param>
        /// <param name="disallowedDiskTypes"> Describes the disallowed disk types. </param>
        /// <param name="purchasePlan"> Describes the gallery image definition purchase plan. This is used by marketplace images. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="features"> A list of gallery image features. </param>
        /// <param name="architecture"> The architecture of the image. Applicable to OS disks only. </param>
        /// <returns> A new <see cref="Compute.GalleryImageData"/> instance for mocking. </returns>
        public static GalleryImageData GalleryImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string description = null, string eula = null, Uri privacyStatementUri = null, Uri releaseNoteUri = null, SupportedOperatingSystemType? osType = null, OperatingSystemStateType? osState = null, HyperVGeneration? hyperVGeneration = null, DateTimeOffset? endOfLifeOn = null, GalleryImageIdentifier identifier = null, RecommendedMachineConfiguration recommended = null, IEnumerable<string> disallowedDiskTypes = null, ImagePurchasePlan purchasePlan = null, GalleryProvisioningState? provisioningState = null, IEnumerable<GalleryImageFeature> features = null, ArchitectureType? architecture = null)
        {
            tags ??= new Dictionary<string, string>();
            disallowedDiskTypes ??= new List<string>();
            features ??= new List<GalleryImageFeature>();

            return new GalleryImageData(id, name, resourceType, systemData, tags, location, description, eula, privacyStatementUri, releaseNoteUri, osType, osState, hyperVGeneration, endOfLifeOn, identifier, recommended, disallowedDiskTypes != null ? new Disallowed(disallowedDiskTypes?.ToList()) : null, purchasePlan, provisioningState, features?.ToList(), architecture);
        }

        /// <summary> Initializes a new instance of RecommendedMachineConfiguration. </summary>
        /// <param name="vCpus"> Describes the resource range. </param>
        /// <param name="memory"> Describes the resource range. </param>
        /// <returns> A new <see cref="Models.RecommendedMachineConfiguration"/> instance for mocking. </returns>
        public static RecommendedMachineConfiguration RecommendedMachineConfiguration(ResourceRange vCpus = null, ResourceRange memory = null)
        {
            return new RecommendedMachineConfiguration(vCpus, memory);
        }

        /// <summary> Initializes a new instance of ResourceRange. </summary>
        /// <param name="min"> The minimum number of the resource. </param>
        /// <param name="max"> The maximum number of the resource. </param>
        /// <returns> A new <see cref="Models.ResourceRange"/> instance for mocking. </returns>
        public static ResourceRange ResourceRange(int? min = null, int? max = null)
        {
            return new ResourceRange(min, max);
        }

        /// <summary> Initializes a new instance of ImagePurchasePlan. </summary>
        /// <param name="name"> The plan ID. </param>
        /// <param name="publisher"> The publisher ID. </param>
        /// <param name="product"> The product ID. </param>
        /// <returns> A new <see cref="Models.ImagePurchasePlan"/> instance for mocking. </returns>
        public static ImagePurchasePlan ImagePurchasePlan(string name = null, string publisher = null, string product = null)
        {
            return new ImagePurchasePlan(name, publisher, product);
        }

        /// <summary> Initializes a new instance of GalleryImageFeature. </summary>
        /// <param name="name"> The name of the gallery image feature. </param>
        /// <param name="value"> The value of the gallery image feature. </param>
        /// <returns> A new <see cref="Models.GalleryImageFeature"/> instance for mocking. </returns>
        public static GalleryImageFeature GalleryImageFeature(string name = null, string value = null)
        {
            return new GalleryImageFeature(name, value);
        }

        /// <summary> Initializes a new instance of GalleryImageVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="publishingProfile"> The publishing profile of a gallery image Version. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="storageProfile"> This is the storage profile of a Gallery Image Version. </param>
        /// <param name="replicationStatus"> This is the replication status of the gallery image version. </param>
        /// <returns> A new <see cref="Compute.GalleryImageVersionData"/> instance for mocking. </returns>
        public static GalleryImageVersionData GalleryImageVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, GalleryImageVersionPublishingProfile publishingProfile = null, GalleryProvisioningState? provisioningState = null, GalleryImageVersionStorageProfile storageProfile = null, ReplicationStatus replicationStatus = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryImageVersionData(id, name, resourceType, systemData, tags, location, publishingProfile, provisioningState, storageProfile, replicationStatus);
        }

        /// <summary> Initializes a new instance of GalleryImageVersionPublishingProfile. </summary>
        /// <param name="targetRegions"> The target regions where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <param name="replicaCount"> The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable. </param>
        /// <param name="excludeFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won&apos;t use this Image Version. </param>
        /// <param name="publishedOn"> The timestamp for when the gallery image version is published. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="storageAccountType"> Specifies the storage account type to be used to store the image. This property is not updatable. </param>
        /// <param name="replicationMode"> Optional parameter which specifies the mode to be used for replication. This property is not updatable. </param>
        /// <param name="targetExtendedLocations"> The target extended locations where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <returns> A new <see cref="Models.GalleryImageVersionPublishingProfile"/> instance for mocking. </returns>
        public static GalleryImageVersionPublishingProfile GalleryImageVersionPublishingProfile(IEnumerable<TargetRegion> targetRegions = null, int? replicaCount = null, bool? excludeFromLatest = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, ImageStorageAccountType? storageAccountType = null, GalleryReplicationMode? replicationMode = null, IEnumerable<GalleryTargetExtendedLocation> targetExtendedLocations = null)
        {
            targetRegions ??= new List<TargetRegion>();
            targetExtendedLocations ??= new List<GalleryTargetExtendedLocation>();

            return new GalleryImageVersionPublishingProfile(targetRegions?.ToList(), replicaCount, excludeFromLatest, publishedOn, endOfLifeOn, storageAccountType, replicationMode, targetExtendedLocations?.ToList());
        }

        /// <summary> Initializes a new instance of GalleryArtifactPublishingProfileBase. </summary>
        /// <param name="targetRegions"> The target regions where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <param name="replicaCount"> The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable. </param>
        /// <param name="excludeFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won&apos;t use this Image Version. </param>
        /// <param name="publishedOn"> The timestamp for when the gallery image version is published. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="storageAccountType"> Specifies the storage account type to be used to store the image. This property is not updatable. </param>
        /// <param name="replicationMode"> Optional parameter which specifies the mode to be used for replication. This property is not updatable. </param>
        /// <param name="targetExtendedLocations"> The target extended locations where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <returns> A new <see cref="Models.GalleryArtifactPublishingProfileBase"/> instance for mocking. </returns>
        public static GalleryArtifactPublishingProfileBase GalleryArtifactPublishingProfileBase(IEnumerable<TargetRegion> targetRegions = null, int? replicaCount = null, bool? excludeFromLatest = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, ImageStorageAccountType? storageAccountType = null, GalleryReplicationMode? replicationMode = null, IEnumerable<GalleryTargetExtendedLocation> targetExtendedLocations = null)
        {
            targetRegions ??= new List<TargetRegion>();
            targetExtendedLocations ??= new List<GalleryTargetExtendedLocation>();

            return new GalleryArtifactPublishingProfileBase(targetRegions?.ToList(), replicaCount, excludeFromLatest, publishedOn, endOfLifeOn, storageAccountType, replicationMode, targetExtendedLocations?.ToList());
        }

        /// <summary> Initializes a new instance of TargetRegion. </summary>
        /// <param name="name"> The name of the region. </param>
        /// <param name="regionalReplicaCount"> The number of replicas of the Image Version to be created per region. This property is updatable. </param>
        /// <param name="storageAccountType"> Specifies the storage account type to be used to store the image. This property is not updatable. </param>
        /// <param name="encryption"> Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact. </param>
        /// <returns> A new <see cref="Models.TargetRegion"/> instance for mocking. </returns>
        public static TargetRegion TargetRegion(string name = null, int? regionalReplicaCount = null, ImageStorageAccountType? storageAccountType = null, EncryptionImages encryption = null)
        {
            return new TargetRegion(name, regionalReplicaCount, storageAccountType, encryption);
        }

        /// <summary> Initializes a new instance of EncryptionImages. </summary>
        /// <param name="osDiskImage"> Contains encryption settings for an OS disk image. </param>
        /// <param name="dataDiskImages"> A list of encryption specifications for data disk images. </param>
        /// <returns> A new <see cref="Models.EncryptionImages"/> instance for mocking. </returns>
        public static EncryptionImages EncryptionImages(OSDiskImageEncryption osDiskImage = null, IEnumerable<DataDiskImageEncryption> dataDiskImages = null)
        {
            dataDiskImages ??= new List<DataDiskImageEncryption>();

            return new EncryptionImages(osDiskImage, dataDiskImages?.ToList());
        }

        /// <summary> Initializes a new instance of OSDiskImageEncryption. </summary>
        /// <param name="diskEncryptionSetId"> A relative URI containing the resource ID of the disk encryption set. </param>
        /// <param name="securityProfile"> This property specifies the security profile of an OS disk image. </param>
        /// <returns> A new <see cref="Models.OSDiskImageEncryption"/> instance for mocking. </returns>
        public static OSDiskImageEncryption OSDiskImageEncryption(ResourceIdentifier diskEncryptionSetId = null, OSDiskImageSecurityProfile securityProfile = null)
        {
            return new OSDiskImageEncryption(diskEncryptionSetId, securityProfile);
        }

        /// <summary> Initializes a new instance of OSDiskImageSecurityProfile. </summary>
        /// <param name="confidentialVmEncryptionType"> confidential VM encryption types. </param>
        /// <param name="secureVmDiskEncryptionSetId"> secure VM disk encryption set id. </param>
        /// <returns> A new <see cref="Models.OSDiskImageSecurityProfile"/> instance for mocking. </returns>
        public static OSDiskImageSecurityProfile OSDiskImageSecurityProfile(ConfidentialVmEncryptionType? confidentialVmEncryptionType = null, string secureVmDiskEncryptionSetId = null)
        {
            return new OSDiskImageSecurityProfile(confidentialVmEncryptionType, secureVmDiskEncryptionSetId);
        }

        /// <summary> Initializes a new instance of DiskImageEncryption. </summary>
        /// <param name="diskEncryptionSetId"> A relative URI containing the resource ID of the disk encryption set. </param>
        /// <returns> A new <see cref="Models.DiskImageEncryption"/> instance for mocking. </returns>
        public static DiskImageEncryption DiskImageEncryption(ResourceIdentifier diskEncryptionSetId = null)
        {
            return new DiskImageEncryption(diskEncryptionSetId);
        }

        /// <summary> Initializes a new instance of DataDiskImageEncryption. </summary>
        /// <param name="diskEncryptionSetId"> A relative URI containing the resource ID of the disk encryption set. </param>
        /// <param name="lun"> This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. </param>
        /// <returns> A new <see cref="Models.DataDiskImageEncryption"/> instance for mocking. </returns>
        public static DataDiskImageEncryption DataDiskImageEncryption(ResourceIdentifier diskEncryptionSetId = null, int lun = default)
        {
            return new DataDiskImageEncryption(diskEncryptionSetId, lun);
        }

        /// <summary> Initializes a new instance of GalleryTargetExtendedLocation. </summary>
        /// <param name="name"> The name of the region. </param>
        /// <param name="extendedLocation"> The name of the extended location. </param>
        /// <param name="extendedLocationReplicaCount"> The number of replicas of the Image Version to be created per extended location. This property is updatable. </param>
        /// <param name="storageAccountType"> Specifies the storage account type to be used to store the image. This property is not updatable. </param>
        /// <param name="encryption"> Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact. </param>
        /// <returns> A new <see cref="Models.GalleryTargetExtendedLocation"/> instance for mocking. </returns>
        public static GalleryTargetExtendedLocation GalleryTargetExtendedLocation(string name = null, GalleryExtendedLocation extendedLocation = null, int? extendedLocationReplicaCount = null, ImageStorageAccountType? storageAccountType = null, EncryptionImages encryption = null)
        {
            return new GalleryTargetExtendedLocation(name, extendedLocation, extendedLocationReplicaCount, storageAccountType, encryption);
        }

        /// <summary> Initializes a new instance of GalleryExtendedLocation. </summary>
        /// <param name="name"></param>
        /// <param name="extendedLocationType"> It is type of the extended location. </param>
        /// <returns> A new <see cref="Models.GalleryExtendedLocation"/> instance for mocking. </returns>
        public static GalleryExtendedLocation GalleryExtendedLocation(string name = null, GalleryExtendedLocationType? extendedLocationType = null)
        {
            return new GalleryExtendedLocation(name, extendedLocationType);
        }

        /// <summary> Initializes a new instance of GalleryImageVersionStorageProfile. </summary>
        /// <param name="source"> The gallery artifact version source. </param>
        /// <param name="osDiskImage"> This is the OS disk image. </param>
        /// <param name="dataDiskImages"> A list of data disk images. </param>
        /// <returns> A new <see cref="Models.GalleryImageVersionStorageProfile"/> instance for mocking. </returns>
        public static GalleryImageVersionStorageProfile GalleryImageVersionStorageProfile(GalleryArtifactVersionSource source = null, GalleryOSDiskImage osDiskImage = null, IEnumerable<GalleryDataDiskImage> dataDiskImages = null)
        {
            dataDiskImages ??= new List<GalleryDataDiskImage>();

            return new GalleryImageVersionStorageProfile(source, osDiskImage, dataDiskImages?.ToList());
        }

        /// <summary> Initializes a new instance of GalleryArtifactVersionSource. </summary>
        /// <param name="id"> The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource. </param>
        /// <param name="uri"> The uri of the gallery artifact version source. Currently used to specify vhd/blob source. </param>
        /// <returns> A new <see cref="Models.GalleryArtifactVersionSource"/> instance for mocking. </returns>
        public static GalleryArtifactVersionSource GalleryArtifactVersionSource(ResourceIdentifier id = null, Uri uri = null)
        {
            return new GalleryArtifactVersionSource(id, uri);
        }

        /// <summary> Initializes a new instance of GalleryOSDiskImage. </summary>
        /// <param name="sizeInGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are &apos;None&apos;, &apos;ReadOnly&apos;, and &apos;ReadWrite&apos;. </param>
        /// <param name="source"> The gallery artifact version source. </param>
        /// <returns> A new <see cref="Models.GalleryOSDiskImage"/> instance for mocking. </returns>
        public static GalleryOSDiskImage GalleryOSDiskImage(int? sizeInGB = null, HostCaching? hostCaching = null, GalleryArtifactVersionSource source = null)
        {
            return new GalleryOSDiskImage(sizeInGB, hostCaching, source);
        }

        /// <summary> Initializes a new instance of GalleryDiskImage. </summary>
        /// <param name="sizeInGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are &apos;None&apos;, &apos;ReadOnly&apos;, and &apos;ReadWrite&apos;. </param>
        /// <param name="source"> The gallery artifact version source. </param>
        /// <returns> A new <see cref="Models.GalleryDiskImage"/> instance for mocking. </returns>
        public static GalleryDiskImage GalleryDiskImage(int? sizeInGB = null, HostCaching? hostCaching = null, GalleryArtifactVersionSource source = null)
        {
            return new GalleryDiskImage(sizeInGB, hostCaching, source);
        }

        /// <summary> Initializes a new instance of GalleryDataDiskImage. </summary>
        /// <param name="sizeInGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are &apos;None&apos;, &apos;ReadOnly&apos;, and &apos;ReadWrite&apos;. </param>
        /// <param name="source"> The gallery artifact version source. </param>
        /// <param name="lun"> This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. </param>
        /// <returns> A new <see cref="Models.GalleryDataDiskImage"/> instance for mocking. </returns>
        public static GalleryDataDiskImage GalleryDataDiskImage(int? sizeInGB = null, HostCaching? hostCaching = null, GalleryArtifactVersionSource source = null, int lun = default)
        {
            return new GalleryDataDiskImage(sizeInGB, hostCaching, source, lun);
        }

        /// <summary> Initializes a new instance of ReplicationStatus. </summary>
        /// <param name="aggregatedState"> This is the aggregated replication status based on all the regional replication status flags. </param>
        /// <param name="summary"> This is a summary of replication status for each region. </param>
        /// <returns> A new <see cref="Models.ReplicationStatus"/> instance for mocking. </returns>
        public static ReplicationStatus ReplicationStatus(AggregatedReplicationState? aggregatedState = null, IEnumerable<RegionalReplicationStatus> summary = null)
        {
            summary ??= new List<RegionalReplicationStatus>();

            return new ReplicationStatus(aggregatedState, summary?.ToList());
        }

        /// <summary> Initializes a new instance of RegionalReplicationStatus. </summary>
        /// <param name="region"> The region to which the gallery image version is being replicated to. </param>
        /// <param name="state"> This is the regional replication state. </param>
        /// <param name="details"> The details of the replication status. </param>
        /// <param name="progress"> It indicates progress of the replication job. </param>
        /// <returns> A new <see cref="Models.RegionalReplicationStatus"/> instance for mocking. </returns>
        public static RegionalReplicationStatus RegionalReplicationStatus(string region = null, RegionalReplicationState? state = null, string details = null, int? progress = null)
        {
            return new RegionalReplicationStatus(region, state, details, progress);
        }

        /// <summary> Initializes a new instance of GalleryApplicationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="description"> The description of this gallery Application Definition resource. This property is updatable. </param>
        /// <param name="eula"> The Eula agreement for the gallery Application Definition. </param>
        /// <param name="privacyStatementUri"> The privacy statement uri. </param>
        /// <param name="releaseNoteUri"> The release note uri. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="supportedOSType"> This property allows you to specify the supported type of the OS that application is built for. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <returns> A new <see cref="Compute.GalleryApplicationData"/> instance for mocking. </returns>
        public static GalleryApplicationData GalleryApplicationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string description = null, string eula = null, Uri privacyStatementUri = null, Uri releaseNoteUri = null, DateTimeOffset? endOfLifeOn = null, SupportedOperatingSystemType? supportedOSType = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryApplicationData(id, name, resourceType, systemData, tags, location, description, eula, privacyStatementUri, releaseNoteUri, endOfLifeOn, supportedOSType);
        }

        /// <summary> Initializes a new instance of GalleryApplicationVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="publishingProfile"> The publishing profile of a gallery image version. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="replicationStatus"> This is the replication status of the gallery image version. </param>
        /// <returns> A new <see cref="Compute.GalleryApplicationVersionData"/> instance for mocking. </returns>
        public static GalleryApplicationVersionData GalleryApplicationVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, GalleryApplicationVersionPublishingProfile publishingProfile = null, GalleryProvisioningState? provisioningState = null, ReplicationStatus replicationStatus = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryApplicationVersionData(id, name, resourceType, systemData, tags, location, publishingProfile, provisioningState, replicationStatus);
        }

        /// <summary> Initializes a new instance of GalleryApplicationVersionPublishingProfile. </summary>
        /// <param name="targetRegions"> The target regions where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <param name="replicaCount"> The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable. </param>
        /// <param name="excludeFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won&apos;t use this Image Version. </param>
        /// <param name="publishedOn"> The timestamp for when the gallery image version is published. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="storageAccountType"> Specifies the storage account type to be used to store the image. This property is not updatable. </param>
        /// <param name="replicationMode"> Optional parameter which specifies the mode to be used for replication. This property is not updatable. </param>
        /// <param name="targetExtendedLocations"> The target extended locations where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <param name="source"> The source image from which the Image Version is going to be created. </param>
        /// <param name="manageActions"></param>
        /// <param name="settings"> Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set. </param>
        /// <param name="advancedSettings"> Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only. </param>
        /// <param name="enableHealthCheck"> Optional. Whether or not this application reports health. </param>
        /// <returns> A new <see cref="Models.GalleryApplicationVersionPublishingProfile"/> instance for mocking. </returns>
        public static GalleryApplicationVersionPublishingProfile GalleryApplicationVersionPublishingProfile(IEnumerable<TargetRegion> targetRegions = null, int? replicaCount = null, bool? excludeFromLatest = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, ImageStorageAccountType? storageAccountType = null, GalleryReplicationMode? replicationMode = null, IEnumerable<GalleryTargetExtendedLocation> targetExtendedLocations = null, UserArtifactSource source = null, UserArtifactManagement manageActions = null, UserArtifactSettings settings = null, IDictionary<string, string> advancedSettings = null, bool? enableHealthCheck = null)
        {
            targetRegions ??= new List<TargetRegion>();
            targetExtendedLocations ??= new List<GalleryTargetExtendedLocation>();
            advancedSettings ??= new Dictionary<string, string>();

            return new GalleryApplicationVersionPublishingProfile(targetRegions?.ToList(), replicaCount, excludeFromLatest, publishedOn, endOfLifeOn, storageAccountType, replicationMode, targetExtendedLocations?.ToList(), source, manageActions, settings, advancedSettings, enableHealthCheck);
        }

        /// <summary> Initializes a new instance of UserArtifactSource. </summary>
        /// <param name="mediaLink"> Required. The mediaLink of the artifact, must be a readable storage page blob. </param>
        /// <param name="defaultConfigurationLink"> Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob. </param>
        /// <returns> A new <see cref="Models.UserArtifactSource"/> instance for mocking. </returns>
        public static UserArtifactSource UserArtifactSource(string mediaLink = null, string defaultConfigurationLink = null)
        {
            return new UserArtifactSource(mediaLink, defaultConfigurationLink);
        }

        /// <summary> Initializes a new instance of UserArtifactManagement. </summary>
        /// <param name="install"> Required. The path and arguments to install the gallery application. This is limited to 4096 characters. </param>
        /// <param name="remove"> Required. The path and arguments to remove the gallery application. This is limited to 4096 characters. </param>
        /// <param name="update"> Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters. </param>
        /// <returns> A new <see cref="Models.UserArtifactManagement"/> instance for mocking. </returns>
        public static UserArtifactManagement UserArtifactManagement(string install = null, string @remove = null, string update = null)
        {
            return new UserArtifactManagement(install, @remove, update);
        }

        /// <summary> Initializes a new instance of UserArtifactSettings. </summary>
        /// <param name="packageFileName"> Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name. </param>
        /// <param name="configFileName"> Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with &quot;_config&quot;. </param>
        /// <returns> A new <see cref="Models.UserArtifactSettings"/> instance for mocking. </returns>
        public static UserArtifactSettings UserArtifactSettings(string packageFileName = null, string configFileName = null)
        {
            return new UserArtifactSettings(packageFileName, configFileName);
        }

        /// <summary> Initializes a new instance of SharingUpdate. </summary>
        /// <param name="operationType"> This property allows you to specify the operation type of gallery sharing update. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Add** &lt;br&gt;&lt;br&gt; **Remove** &lt;br&gt;&lt;br&gt; **Reset**. </param>
        /// <param name="groups"> A list of sharing profile groups. </param>
        /// <returns> A new <see cref="Models.SharingUpdate"/> instance for mocking. </returns>
        public static SharingUpdate SharingUpdate(SharingUpdateOperationType operationType = default, IEnumerable<SharingProfileGroup> groups = null)
        {
            groups ??= new List<SharingProfileGroup>();

            return new SharingUpdate(operationType, groups?.ToList());
        }

        /// <summary> Initializes a new instance of SharedGalleryData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="uniqueId"> The unique id of this shared gallery. </param>
        /// <returns> A new <see cref="Compute.SharedGalleryData"/> instance for mocking. </returns>
        public static SharedGalleryData SharedGalleryData(string name = null, AzureLocation? location = null, string uniqueId = null)
        {
            return new SharedGalleryData(name, location, uniqueId);
        }

        /// <summary> Initializes a new instance of PirSharedGalleryResourceData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="uniqueId"> The unique id of this shared gallery. </param>
        /// <returns> A new <see cref="Models.PirSharedGalleryResourceData"/> instance for mocking. </returns>
        public static PirSharedGalleryResourceData PirSharedGalleryResourceData(string name = null, AzureLocation? location = null, string uniqueId = null)
        {
            return new PirSharedGalleryResourceData(name, location, uniqueId);
        }

        /// <summary> Initializes a new instance of PirResourceData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <returns> A new <see cref="Models.PirResourceData"/> instance for mocking. </returns>
        public static PirResourceData PirResourceData(string name = null, AzureLocation? location = null)
        {
            return new PirResourceData(name, location);
        }

        /// <summary> Initializes a new instance of SharedGalleryImageData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="uniqueId"> The unique id of this shared gallery. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="osState"> This property allows the user to specify whether the virtual machines created under this image are &apos;Generalized&apos; or &apos;Specialized&apos;. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="recommended"> The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. </param>
        /// <param name="disallowedDiskTypes"> Describes the disallowed disk types. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="features"> A list of gallery image features. </param>
        /// <param name="purchasePlan"> Describes the gallery image definition purchase plan. This is used by marketplace images. </param>
        /// <param name="architecture"> The architecture of the image. Applicable to OS disks only. </param>
        /// <returns> A new <see cref="Compute.SharedGalleryImageData"/> instance for mocking. </returns>
        public static SharedGalleryImageData SharedGalleryImageData(string name = null, AzureLocation? location = null, string uniqueId = null, SupportedOperatingSystemType? osType = null, OperatingSystemStateType? osState = null, DateTimeOffset? endOfLifeOn = null, GalleryImageIdentifier identifier = null, RecommendedMachineConfiguration recommended = null, IEnumerable<string> disallowedDiskTypes = null, HyperVGeneration? hyperVGeneration = null, IEnumerable<GalleryImageFeature> features = null, ImagePurchasePlan purchasePlan = null, ArchitectureType? architecture = null)
        {
            disallowedDiskTypes ??= new List<string>();
            features ??= new List<GalleryImageFeature>();

            return new SharedGalleryImageData(name, location, uniqueId, osType, osState, endOfLifeOn, identifier, recommended, disallowedDiskTypes != null ? new Disallowed(disallowedDiskTypes?.ToList()) : null, hyperVGeneration, features?.ToList(), purchasePlan, architecture);
        }

        /// <summary> Initializes a new instance of SharedGalleryImageVersionData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="uniqueId"> The unique id of this shared gallery. </param>
        /// <param name="publishedOn"> The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="excludeFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won&apos;t use this Image Version. </param>
        /// <param name="storageProfile"> Describes the storage profile of the image version. </param>
        /// <returns> A new <see cref="Compute.SharedGalleryImageVersionData"/> instance for mocking. </returns>
        public static SharedGalleryImageVersionData SharedGalleryImageVersionData(string name = null, AzureLocation? location = null, string uniqueId = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, bool? excludeFromLatest = null, SharedGalleryImageVersionStorageProfile storageProfile = null)
        {
            return new SharedGalleryImageVersionData(name, location, uniqueId, publishedOn, endOfLifeOn, excludeFromLatest, storageProfile);
        }

        /// <summary> Initializes a new instance of SharedGalleryImageVersionStorageProfile. </summary>
        /// <param name="osDiskImage"> This is the OS disk image. </param>
        /// <param name="dataDiskImages"> A list of data disk images. </param>
        /// <returns> A new <see cref="Models.SharedGalleryImageVersionStorageProfile"/> instance for mocking. </returns>
        public static SharedGalleryImageVersionStorageProfile SharedGalleryImageVersionStorageProfile(SharedGalleryOSDiskImage osDiskImage = null, IEnumerable<SharedGalleryDataDiskImage> dataDiskImages = null)
        {
            dataDiskImages ??= new List<SharedGalleryDataDiskImage>();

            return new SharedGalleryImageVersionStorageProfile(osDiskImage, dataDiskImages?.ToList());
        }

        /// <summary> Initializes a new instance of SharedGalleryOSDiskImage. </summary>
        /// <param name="diskSizeGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are &apos;None&apos;, &apos;ReadOnly&apos;, and &apos;ReadWrite&apos;. </param>
        /// <returns> A new <see cref="Models.SharedGalleryOSDiskImage"/> instance for mocking. </returns>
        public static SharedGalleryOSDiskImage SharedGalleryOSDiskImage(int? diskSizeGB = null, SharedGalleryHostCaching? hostCaching = null)
        {
            return new SharedGalleryOSDiskImage(diskSizeGB, hostCaching);
        }

        /// <summary> Initializes a new instance of SharedGalleryDiskImage. </summary>
        /// <param name="diskSizeGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are &apos;None&apos;, &apos;ReadOnly&apos;, and &apos;ReadWrite&apos;. </param>
        /// <returns> A new <see cref="Models.SharedGalleryDiskImage"/> instance for mocking. </returns>
        public static SharedGalleryDiskImage SharedGalleryDiskImage(int? diskSizeGB = null, SharedGalleryHostCaching? hostCaching = null)
        {
            return new SharedGalleryDiskImage(diskSizeGB, hostCaching);
        }

        /// <summary> Initializes a new instance of SharedGalleryDataDiskImage. </summary>
        /// <param name="diskSizeGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are &apos;None&apos;, &apos;ReadOnly&apos;, and &apos;ReadWrite&apos;. </param>
        /// <param name="lun"> This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. </param>
        /// <returns> A new <see cref="Models.SharedGalleryDataDiskImage"/> instance for mocking. </returns>
        public static SharedGalleryDataDiskImage SharedGalleryDataDiskImage(int? diskSizeGB = null, SharedGalleryHostCaching? hostCaching = null, int lun = default)
        {
            return new SharedGalleryDataDiskImage(diskSizeGB, hostCaching, lun);
        }

        /// <summary> Initializes a new instance of CommunityGalleryData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="uniqueId"> The unique id of this community gallery. </param>
        /// <returns> A new <see cref="Compute.CommunityGalleryData"/> instance for mocking. </returns>
        public static CommunityGalleryData CommunityGalleryData(string name = null, AzureLocation? location = null, ResourceType? resourceType = null, string uniqueId = null)
        {
            return new CommunityGalleryData(name, location, resourceType, uniqueId);
        }

        /// <summary> Initializes a new instance of PirCommunityGalleryResourceData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="uniqueId"> The unique id of this community gallery. </param>
        /// <returns> A new <see cref="Models.PirCommunityGalleryResourceData"/> instance for mocking. </returns>
        public static PirCommunityGalleryResourceData PirCommunityGalleryResourceData(string name = null, AzureLocation? location = null, ResourceType? resourceType = null, string uniqueId = null)
        {
            return new PirCommunityGalleryResourceData(name, location, resourceType, uniqueId);
        }

        /// <summary> Initializes a new instance of CommunityGalleryImageData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="uniqueId"> The unique id of this community gallery. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**. </param>
        /// <param name="osState"> This property allows the user to specify whether the virtual machines created under this image are &apos;Generalized&apos; or &apos;Specialized&apos;. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="recommended"> The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. </param>
        /// <param name="disallowedDiskTypes"> Describes the disallowed disk types. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="features"> A list of gallery image features. </param>
        /// <param name="purchasePlan"> Describes the gallery image definition purchase plan. This is used by marketplace images. </param>
        /// <param name="architecture"> The architecture of the image. Applicable to OS disks only. </param>
        /// <param name="privacyStatementUri"> Privacy statement uri for the current community gallery image. </param>
        /// <param name="eula"> End-user license agreement for the current community gallery image. </param>
        /// <returns> A new <see cref="Compute.CommunityGalleryImageData"/> instance for mocking. </returns>
        public static CommunityGalleryImageData CommunityGalleryImageData(string name = null, AzureLocation? location = null, ResourceType? resourceType = null, string uniqueId = null, SupportedOperatingSystemType? osType = null, OperatingSystemStateType? osState = null, DateTimeOffset? endOfLifeOn = null, GalleryImageIdentifier identifier = null, RecommendedMachineConfiguration recommended = null, IEnumerable<string> disallowedDiskTypes = null, HyperVGeneration? hyperVGeneration = null, IEnumerable<GalleryImageFeature> features = null, ImagePurchasePlan purchasePlan = null, ArchitectureType? architecture = null, Uri privacyStatementUri = null, string eula = null)
        {
            disallowedDiskTypes ??= new List<string>();
            features ??= new List<GalleryImageFeature>();

            return new CommunityGalleryImageData(name, location, resourceType, uniqueId, osType, osState, endOfLifeOn, identifier, recommended, disallowedDiskTypes != null ? new Disallowed(disallowedDiskTypes?.ToList()) : null, hyperVGeneration, features?.ToList(), purchasePlan, architecture, privacyStatementUri, eula);
        }

        /// <summary> Initializes a new instance of CommunityGalleryImageVersionData. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="uniqueId"> The unique id of this community gallery. </param>
        /// <param name="publishedOn"> The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="excludeFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won&apos;t use this Image Version. </param>
        /// <param name="storageProfile"> Describes the storage profile of the image version. </param>
        /// <returns> A new <see cref="Compute.CommunityGalleryImageVersionData"/> instance for mocking. </returns>
        public static CommunityGalleryImageVersionData CommunityGalleryImageVersionData(string name = null, AzureLocation? location = null, ResourceType? resourceType = null, string uniqueId = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, bool? excludeFromLatest = null, SharedGalleryImageVersionStorageProfile storageProfile = null)
        {
            return new CommunityGalleryImageVersionData(name, location, resourceType, uniqueId, publishedOn, endOfLifeOn, excludeFromLatest, storageProfile);
        }

        /// <summary> Initializes a new instance of CloudServiceRoleInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource Location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="sku"> The role instance SKU. </param>
        /// <param name="networkInterfaces"> Describes the network profile for the role instance. </param>
        /// <param name="instanceView"> The instance view of the role instance. </param>
        /// <returns> A new <see cref="Compute.CloudServiceRoleInstanceData"/> instance for mocking. </returns>
        public static CloudServiceRoleInstanceData CloudServiceRoleInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, IReadOnlyDictionary<string, string> tags = null, InstanceSku sku = null, IEnumerable<WritableSubResource> networkInterfaces = null, RoleInstanceView instanceView = null)
        {
            tags ??= new Dictionary<string, string>();
            networkInterfaces ??= new List<WritableSubResource>();

            return new CloudServiceRoleInstanceData(id, name, resourceType, systemData, location, tags, sku, networkInterfaces != null ? new RoleInstanceNetworkProfile(networkInterfaces?.ToList()) : null, instanceView);
        }

        /// <summary> Initializes a new instance of InstanceSku. </summary>
        /// <param name="name"> The sku name. </param>
        /// <param name="tier"> The tier of the cloud service role instance. </param>
        /// <returns> A new <see cref="Models.InstanceSku"/> instance for mocking. </returns>
        public static InstanceSku InstanceSku(string name = null, string tier = null)
        {
            return new InstanceSku(name, tier);
        }

        /// <summary> Initializes a new instance of RoleInstanceView. </summary>
        /// <param name="platformUpdateDomain"> The Update Domain. </param>
        /// <param name="platformFaultDomain"> The Fault Domain. </param>
        /// <param name="privateId"> Specifies a unique identifier generated internally for the cloud service associated with this role instance. &lt;br /&gt;&lt;br /&gt; NOTE: If you are using Azure Diagnostics extension, this property can be used as &apos;DeploymentId&apos; for querying details. </param>
        /// <param name="statuses"></param>
        /// <returns> A new <see cref="Models.RoleInstanceView"/> instance for mocking. </returns>
        public static RoleInstanceView RoleInstanceView(int? platformUpdateDomain = null, int? platformFaultDomain = null, string privateId = null, IEnumerable<ResourceInstanceViewStatus> statuses = null)
        {
            statuses ??= new List<ResourceInstanceViewStatus>();

            return new RoleInstanceView(platformUpdateDomain, platformFaultDomain, privateId, statuses?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceInstanceViewStatus. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="displayStatus"> The short localizable label for the status. </param>
        /// <param name="message"> The detailed status message, including for alerts and error messages. </param>
        /// <param name="time"> The time of the status. </param>
        /// <param name="level"> The level code. </param>
        /// <returns> A new <see cref="Models.ResourceInstanceViewStatus"/> instance for mocking. </returns>
        public static ResourceInstanceViewStatus ResourceInstanceViewStatus(string code = null, string displayStatus = null, string message = null, DateTimeOffset? time = null, ComputeStatusLevelType? level = null)
        {
            return new ResourceInstanceViewStatus(code, displayStatus, message, time, level);
        }

        /// <summary> Initializes a new instance of CloudServiceRoleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="sku"> Describes the cloud service role sku. </param>
        /// <param name="uniqueId"> Specifies the ID which uniquely identifies a cloud service role. </param>
        /// <returns> A new <see cref="Compute.CloudServiceRoleData"/> instance for mocking. </returns>
        public static CloudServiceRoleData CloudServiceRoleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, CloudServiceRoleSku sku = null, string uniqueId = null)
        {
            return new CloudServiceRoleData(id, name, resourceType, systemData, location, sku, uniqueId);
        }

        /// <summary> Initializes a new instance of CloudServiceRoleSku. </summary>
        /// <param name="name"> The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete and recreate the cloud service or move back to the old sku. </param>
        /// <param name="tier"> Specifies the tier of the cloud service. Possible Values are &lt;br /&gt;&lt;br /&gt; **Standard** &lt;br /&gt;&lt;br /&gt; **Basic**. </param>
        /// <param name="capacity"> Specifies the number of role instances in the cloud service. </param>
        /// <returns> A new <see cref="Models.CloudServiceRoleSku"/> instance for mocking. </returns>
        public static CloudServiceRoleSku CloudServiceRoleSku(string name = null, string tier = null, long? capacity = null)
        {
            return new CloudServiceRoleSku(name, tier, capacity);
        }

        /// <summary> Initializes a new instance of CloudServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="packageUri">
        /// Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
        /// This is a write-only property and is not returned in GET calls.
        /// </param>
        /// <param name="configuration"> Specifies the XML service configuration (.cscfg) for the cloud service. </param>
        /// <param name="configurationUri">
        /// Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
        /// This is a write-only property and is not returned in GET calls.
        /// </param>
        /// <param name="startCloudService">
        /// (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
        /// If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
        /// </param>
        /// <param name="allowModelOverride">
        /// (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
        /// The default value is `false`.
        /// </param>
        /// <param name="upgradeMode">
        /// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
        /// Possible Values are &lt;br /&gt;&lt;br /&gt;**Auto**&lt;br /&gt;&lt;br /&gt;**Manual** &lt;br /&gt;&lt;br /&gt;**Simultaneous**&lt;br /&gt;&lt;br /&gt;
        /// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
        /// </param>
        /// <param name="roles"> Describes the role profile for the cloud service. </param>
        /// <param name="osSecrets"> Describes the OS profile for the cloud service. </param>
        /// <param name="networkProfile"> Network Profile for the cloud service. </param>
        /// <param name="extensions"> Describes a cloud service extension profile. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="uniqueId"> The unique identifier for the cloud service. </param>
        /// <returns> A new <see cref="Compute.CloudServiceData"/> instance for mocking. </returns>
        public static CloudServiceData CloudServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, Uri packageUri = null, string configuration = null, Uri configurationUri = null, bool? startCloudService = null, bool? allowModelOverride = null, CloudServiceUpgradeMode? upgradeMode = null, IEnumerable<CloudServiceRoleProfileProperties> roles = null, IEnumerable<CloudServiceVaultSecretGroup> osSecrets = null, CloudServiceNetworkProfile networkProfile = null, IEnumerable<CloudServiceExtension> extensions = null, string provisioningState = null, string uniqueId = null)
        {
            tags ??= new Dictionary<string, string>();
            roles ??= new List<CloudServiceRoleProfileProperties>();
            osSecrets ??= new List<CloudServiceVaultSecretGroup>();
            extensions ??= new List<CloudServiceExtension>();

            return new CloudServiceData(id, name, resourceType, systemData, tags, location, packageUri, configuration, configurationUri, startCloudService, allowModelOverride, upgradeMode, roles != null ? new CloudServiceRoleProfile(roles?.ToList()) : null, osSecrets != null ? new CloudServiceOSProfile(osSecrets?.ToList()) : null, networkProfile, extensions != null ? new CloudServiceExtensionProfile(extensions?.ToList()) : null, provisioningState, uniqueId);
        }

        /// <summary> Initializes a new instance of CloudServiceRoleProfileProperties. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="sku"> Describes the cloud service role sku. </param>
        /// <returns> A new <see cref="Models.CloudServiceRoleProfileProperties"/> instance for mocking. </returns>
        public static CloudServiceRoleProfileProperties CloudServiceRoleProfileProperties(string name = null, CloudServiceRoleSku sku = null)
        {
            return new CloudServiceRoleProfileProperties(name, sku);
        }

        /// <summary> Initializes a new instance of CloudServiceVaultSecretGroup. </summary>
        /// <param name="sourceVaultId"> The relative URL of the Key Vault containing all of the certificates in VaultCertificates. </param>
        /// <param name="vaultCertificates"> The list of key vault references in SourceVault which contain certificates. </param>
        /// <returns> A new <see cref="Models.CloudServiceVaultSecretGroup"/> instance for mocking. </returns>
        public static CloudServiceVaultSecretGroup CloudServiceVaultSecretGroup(ResourceIdentifier sourceVaultId = null, IEnumerable<CloudServiceVaultCertificate> vaultCertificates = null)
        {
            vaultCertificates ??= new List<CloudServiceVaultCertificate>();

            return new CloudServiceVaultSecretGroup(sourceVaultId != null ? ResourceManagerModelFactory.WritableSubResource(sourceVaultId) : null, vaultCertificates?.ToList());
        }

        /// <summary> Initializes a new instance of CloudServiceVaultCertificate. </summary>
        /// <param name="certificateUri"> This is the URL of a certificate that has been uploaded to Key Vault as a secret. </param>
        /// <returns> A new <see cref="Models.CloudServiceVaultCertificate"/> instance for mocking. </returns>
        public static CloudServiceVaultCertificate CloudServiceVaultCertificate(Uri certificateUri = null)
        {
            return new CloudServiceVaultCertificate(certificateUri);
        }

        /// <summary> Initializes a new instance of CloudServiceNetworkProfile. </summary>
        /// <param name="loadBalancerConfigurations"> List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a Public Load Balancer and an Internal Load Balancer. </param>
        /// <param name="slotType">
        /// Slot type for the cloud service.
        /// Possible values are &lt;br /&gt;&lt;br /&gt;**Production**&lt;br /&gt;&lt;br /&gt;**Staging**&lt;br /&gt;&lt;br /&gt;
        /// If not specified, the default value is Production.
        /// </param>
        /// <param name="swappableCloudServiceId"> The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap. This property cannot be updated once it is set. The swappable cloud service referred by this id must be present otherwise an error will be thrown. </param>
        /// <returns> A new <see cref="Models.CloudServiceNetworkProfile"/> instance for mocking. </returns>
        public static CloudServiceNetworkProfile CloudServiceNetworkProfile(IEnumerable<CloudServiceLoadBalancerConfiguration> loadBalancerConfigurations = null, CloudServiceSlotType? slotType = null, ResourceIdentifier swappableCloudServiceId = null)
        {
            loadBalancerConfigurations ??= new List<CloudServiceLoadBalancerConfiguration>();

            return new CloudServiceNetworkProfile(loadBalancerConfigurations?.ToList(), slotType, swappableCloudServiceId != null ? ResourceManagerModelFactory.WritableSubResource(swappableCloudServiceId) : null);
        }

        /// <summary> Initializes a new instance of CloudServiceLoadBalancerConfiguration. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> The name of the Load balancer. </param>
        /// <param name="frontendIPConfigurations"> Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration. </param>
        /// <returns> A new <see cref="Models.CloudServiceLoadBalancerConfiguration"/> instance for mocking. </returns>
        public static CloudServiceLoadBalancerConfiguration CloudServiceLoadBalancerConfiguration(ResourceIdentifier id = null, string name = null, IEnumerable<LoadBalancerFrontendIPConfiguration> frontendIPConfigurations = null)
        {
            frontendIPConfigurations ??= new List<LoadBalancerFrontendIPConfiguration>();

            return new CloudServiceLoadBalancerConfiguration(id, name, frontendIPConfigurations?.ToList());
        }

        /// <summary> Initializes a new instance of LoadBalancerFrontendIPConfiguration. </summary>
        /// <param name="name"> The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource. </param>
        /// <param name="publicIPAddressId"> The reference to the public ip address resource. </param>
        /// <param name="subnetId"> The reference to the virtual network subnet resource. </param>
        /// <param name="privateIPAddress"> The virtual network private IP address of the IP configuration. </param>
        /// <returns> A new <see cref="Models.LoadBalancerFrontendIPConfiguration"/> instance for mocking. </returns>
        public static LoadBalancerFrontendIPConfiguration LoadBalancerFrontendIPConfiguration(string name = null, ResourceIdentifier publicIPAddressId = null, ResourceIdentifier subnetId = null, string privateIPAddress = null)
        {
            return new LoadBalancerFrontendIPConfiguration(name, publicIPAddressId != null ? ResourceManagerModelFactory.WritableSubResource(publicIPAddressId) : null, subnetId != null ? ResourceManagerModelFactory.WritableSubResource(subnetId) : null, privateIPAddress);
        }

        /// <summary> Initializes a new instance of CloudServiceExtension. </summary>
        /// <param name="name"> The name of the extension. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="cloudServiceExtensionPropertiesType"> Specifies the type of the extension. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an asterisk (*) is used as the value, the latest version of the extension is used. If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor version of the specified major version is selected. If a major version number and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified, an auto-upgrade is performed on the role instance. </param>
        /// <param name="autoUpgradeMinorVersion"> Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become available. </param>
        /// <param name="settings"> Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension (like RDP), this is the XML setting for the extension. </param>
        /// <param name="protectedSettings"> Protected settings for the extension which are encrypted before sent to the role instance. </param>
        /// <param name="protectedSettingsFromKeyVault"> Protected settings for the extension, referenced using KeyVault which are encrypted before sent to the role instance. </param>
        /// <param name="forceUpdateTag">
        /// Tag to force apply the provided public and protected settings.
        /// Changing the tag value allows for re-running the extension without changing any of the public or protected settings.
        /// If forceUpdateTag is not changed, updates to public or protected settings would still be applied by the handler.
        /// If neither forceUpdateTag nor any of public or protected settings change, extension would flow to the role instance with the same sequence-number, and
        /// it is up to handler implementation whether to re-run it or not
        /// </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="rolesAppliedTo"> Optional list of roles to apply this extension. If property is not specified or &apos;*&apos; is specified, extension is applied to all roles in the cloud service. </param>
        /// <returns> A new <see cref="Models.CloudServiceExtension"/> instance for mocking. </returns>
        public static CloudServiceExtension CloudServiceExtension(string name = null, string publisher = null, string cloudServiceExtensionPropertiesType = null, string typeHandlerVersion = null, bool? autoUpgradeMinorVersion = null, BinaryData settings = null, BinaryData protectedSettings = null, CloudServiceVaultAndSecretReference protectedSettingsFromKeyVault = null, string forceUpdateTag = null, string provisioningState = null, IEnumerable<string> rolesAppliedTo = null)
        {
            rolesAppliedTo ??= new List<string>();

            return new CloudServiceExtension(name, publisher, cloudServiceExtensionPropertiesType, typeHandlerVersion, autoUpgradeMinorVersion, settings, protectedSettings, protectedSettingsFromKeyVault, forceUpdateTag, provisioningState, rolesAppliedTo?.ToList());
        }

        /// <summary> Initializes a new instance of CloudServiceVaultAndSecretReference. </summary>
        /// <param name="sourceVaultId"> The ARM Resource ID of the Key Vault. </param>
        /// <param name="secretUri"> Secret URL which contains the protected settings of the extension. </param>
        /// <returns> A new <see cref="Models.CloudServiceVaultAndSecretReference"/> instance for mocking. </returns>
        public static CloudServiceVaultAndSecretReference CloudServiceVaultAndSecretReference(ResourceIdentifier sourceVaultId = null, Uri secretUri = null)
        {
            return new CloudServiceVaultAndSecretReference(sourceVaultId != null ? ResourceManagerModelFactory.WritableSubResource(sourceVaultId) : null, secretUri);
        }

        /// <summary> Initializes a new instance of CloudServiceInstanceView. </summary>
        /// <param name="roleInstanceStatusesSummary"> Instance view statuses. </param>
        /// <param name="sdkVersion"> The version of the SDK that was used to generate the package for the cloud service. </param>
        /// <param name="privateIds"> Specifies a list of unique identifiers generated internally for the cloud service. &lt;br /&gt;&lt;br /&gt; NOTE: If you are using Azure Diagnostics extension, this property can be used as &apos;DeploymentId&apos; for querying details. </param>
        /// <param name="statuses"></param>
        /// <returns> A new <see cref="Models.CloudServiceInstanceView"/> instance for mocking. </returns>
        public static CloudServiceInstanceView CloudServiceInstanceView(IEnumerable<StatusCodeCount> roleInstanceStatusesSummary = null, string sdkVersion = null, IEnumerable<string> privateIds = null, IEnumerable<ResourceInstanceViewStatus> statuses = null)
        {
            roleInstanceStatusesSummary ??= new List<StatusCodeCount>();
            privateIds ??= new List<string>();
            statuses ??= new List<ResourceInstanceViewStatus>();

            return new CloudServiceInstanceView(roleInstanceStatusesSummary != null ? new InstanceViewStatusesSummary(roleInstanceStatusesSummary?.ToList()) : null, sdkVersion, privateIds?.ToList(), statuses?.ToList());
        }

        /// <summary> Initializes a new instance of StatusCodeCount. </summary>
        /// <param name="code"> The instance view status code. </param>
        /// <param name="count"> Number of instances having this status code. </param>
        /// <returns> A new <see cref="Models.StatusCodeCount"/> instance for mocking. </returns>
        public static StatusCodeCount StatusCodeCount(string code = null, int? count = null)
        {
            return new StatusCodeCount(code, count);
        }

        /// <summary> Initializes a new instance of UpdateDomainIdentifier. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource Name. </param>
        /// <returns> A new <see cref="Models.UpdateDomainIdentifier"/> instance for mocking. </returns>
        public static UpdateDomainIdentifier UpdateDomainIdentifier(ResourceIdentifier id = null, string name = null)
        {
            return new UpdateDomainIdentifier(id, name);
        }

        /// <summary> Initializes a new instance of CloudServiceOSVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="family"> The family of this OS version. </param>
        /// <param name="familyLabel"> The family label of this OS version. </param>
        /// <param name="version"> The OS version. </param>
        /// <param name="label"> The OS version label. </param>
        /// <param name="isDefault"> Specifies whether this is the default OS version for its family. </param>
        /// <param name="isActive"> Specifies whether this OS version is active. </param>
        /// <returns> A new <see cref="Compute.CloudServiceOSVersionData"/> instance for mocking. </returns>
        public static CloudServiceOSVersionData CloudServiceOSVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string family = null, string familyLabel = null, string version = null, string label = null, bool? isDefault = null, bool? isActive = null)
        {
            return new CloudServiceOSVersionData(id, name, resourceType, systemData, location, family, familyLabel, version, label, isDefault, isActive);
        }

        /// <summary> Initializes a new instance of CloudServiceOSFamilyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resourceName"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="osFamilyName"> The OS family name. </param>
        /// <param name="label"> The OS family label. </param>
        /// <param name="versions"> List of OS versions belonging to this family. </param>
        /// <returns> A new <see cref="Compute.CloudServiceOSFamilyData"/> instance for mocking. </returns>
        public static CloudServiceOSFamilyData CloudServiceOSFamilyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string resourceName = null, AzureLocation? location = null, string osFamilyName = null, string label = null, IEnumerable<OSVersionPropertiesBase> versions = null)
        {
            versions ??= new List<OSVersionPropertiesBase>();

            return new CloudServiceOSFamilyData(id, name, resourceType, systemData, resourceName, location, osFamilyName, label, versions?.ToList());
        }

        /// <summary> Initializes a new instance of OSVersionPropertiesBase. </summary>
        /// <param name="version"> The OS version. </param>
        /// <param name="label"> The OS version label. </param>
        /// <param name="isDefault"> Specifies whether this is the default OS version for its family. </param>
        /// <param name="isActive"> Specifies whether this OS version is active. </param>
        /// <returns> A new <see cref="Models.OSVersionPropertiesBase"/> instance for mocking. </returns>
        public static OSVersionPropertiesBase OSVersionPropertiesBase(string version = null, string label = null, bool? isDefault = null, bool? isActive = null)
        {
            return new OSVersionPropertiesBase(version, label, isDefault, isActive);
        }
    }
}
