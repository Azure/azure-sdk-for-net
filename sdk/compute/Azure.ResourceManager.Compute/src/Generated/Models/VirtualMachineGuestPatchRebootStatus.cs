// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> The reboot state of the VM following completion of the operation. </summary>
    public readonly partial struct VirtualMachineGuestPatchRebootStatus : IEquatable<VirtualMachineGuestPatchRebootStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualMachineGuestPatchRebootStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualMachineGuestPatchRebootStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string NotNeededValue = "NotNeeded";
        private const string RequiredValue = "Required";
        private const string StartedValue = "Started";
        private const string FailedValue = "Failed";
        private const string CompletedValue = "Completed";

        /// <summary> Unknown. </summary>
        public static VirtualMachineGuestPatchRebootStatus Unknown { get; } = new VirtualMachineGuestPatchRebootStatus(UnknownValue);
        /// <summary> NotNeeded. </summary>
        public static VirtualMachineGuestPatchRebootStatus NotNeeded { get; } = new VirtualMachineGuestPatchRebootStatus(NotNeededValue);
        /// <summary> Required. </summary>
        public static VirtualMachineGuestPatchRebootStatus Required { get; } = new VirtualMachineGuestPatchRebootStatus(RequiredValue);
        /// <summary> Started. </summary>
        public static VirtualMachineGuestPatchRebootStatus Started { get; } = new VirtualMachineGuestPatchRebootStatus(StartedValue);
        /// <summary> Failed. </summary>
        public static VirtualMachineGuestPatchRebootStatus Failed { get; } = new VirtualMachineGuestPatchRebootStatus(FailedValue);
        /// <summary> Completed. </summary>
        public static VirtualMachineGuestPatchRebootStatus Completed { get; } = new VirtualMachineGuestPatchRebootStatus(CompletedValue);
        /// <summary> Determines if two <see cref="VirtualMachineGuestPatchRebootStatus"/> values are the same. </summary>
        public static bool operator ==(VirtualMachineGuestPatchRebootStatus left, VirtualMachineGuestPatchRebootStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualMachineGuestPatchRebootStatus"/> values are not the same. </summary>
        public static bool operator !=(VirtualMachineGuestPatchRebootStatus left, VirtualMachineGuestPatchRebootStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VirtualMachineGuestPatchRebootStatus"/>. </summary>
        public static implicit operator VirtualMachineGuestPatchRebootStatus(string value) => new VirtualMachineGuestPatchRebootStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualMachineGuestPatchRebootStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualMachineGuestPatchRebootStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
