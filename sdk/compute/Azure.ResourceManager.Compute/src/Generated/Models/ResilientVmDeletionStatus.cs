// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Specifies the resilient VM deletion status for the virtual machine. </summary>
    public readonly partial struct ResilientVmDeletionStatus : IEquatable<ResilientVmDeletionStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResilientVmDeletionStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResilientVmDeletionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";
        private const string InProgressValue = "InProgress";
        private const string FailedValue = "Failed";

        /// <summary> Enabled. </summary>
        public static ResilientVmDeletionStatus Enabled { get; } = new ResilientVmDeletionStatus(EnabledValue);
        /// <summary> Disabled. </summary>
        public static ResilientVmDeletionStatus Disabled { get; } = new ResilientVmDeletionStatus(DisabledValue);
        /// <summary> InProgress. </summary>
        public static ResilientVmDeletionStatus InProgress { get; } = new ResilientVmDeletionStatus(InProgressValue);
        /// <summary> Failed. </summary>
        public static ResilientVmDeletionStatus Failed { get; } = new ResilientVmDeletionStatus(FailedValue);
        /// <summary> Determines if two <see cref="ResilientVmDeletionStatus"/> values are the same. </summary>
        public static bool operator ==(ResilientVmDeletionStatus left, ResilientVmDeletionStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResilientVmDeletionStatus"/> values are not the same. </summary>
        public static bool operator !=(ResilientVmDeletionStatus left, ResilientVmDeletionStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResilientVmDeletionStatus"/>. </summary>
        public static implicit operator ResilientVmDeletionStatus(string value) => new ResilientVmDeletionStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResilientVmDeletionStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResilientVmDeletionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
