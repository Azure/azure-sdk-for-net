// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Approval status of a target resource in a VMScaleSet lifecycle hook event. </summary>
    public readonly partial struct LifecycleHookActionState : IEquatable<LifecycleHookActionState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LifecycleHookActionState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LifecycleHookActionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ApprovedValue = "Approved";
        private const string WaitingValue = "Waiting";

        /// <summary> The lifecycle hook for the target resource is approved. </summary>
        public static LifecycleHookActionState Approved { get; } = new LifecycleHookActionState(ApprovedValue);
        /// <summary> The lifecycle hook for the target resource is waiting for approval. </summary>
        public static LifecycleHookActionState Waiting { get; } = new LifecycleHookActionState(WaitingValue);
        /// <summary> Determines if two <see cref="LifecycleHookActionState"/> values are the same. </summary>
        public static bool operator ==(LifecycleHookActionState left, LifecycleHookActionState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LifecycleHookActionState"/> values are not the same. </summary>
        public static bool operator !=(LifecycleHookActionState left, LifecycleHookActionState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="LifecycleHookActionState"/>. </summary>
        public static implicit operator LifecycleHookActionState(string value) => new LifecycleHookActionState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LifecycleHookActionState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LifecycleHookActionState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
