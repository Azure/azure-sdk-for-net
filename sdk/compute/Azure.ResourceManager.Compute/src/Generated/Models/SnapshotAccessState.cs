// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> The state of snapshot which determines the access availability of the snapshot. </summary>
    public readonly partial struct SnapshotAccessState : IEquatable<SnapshotAccessState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SnapshotAccessState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SnapshotAccessState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string PendingValue = "Pending";
        private const string AvailableValue = "Available";
        private const string InstantAccessValue = "InstantAccess";
        private const string AvailableWithInstantAccessValue = "AvailableWithInstantAccess";

        /// <summary> Default value. </summary>
        public static SnapshotAccessState Unknown { get; } = new SnapshotAccessState(UnknownValue);
        /// <summary> The snapshot cannot be used for restore, copy or download to offline. </summary>
        public static SnapshotAccessState Pending { get; } = new SnapshotAccessState(PendingValue);
        /// <summary> The snapshot can be used for restore, copy to different region, and download to offline. </summary>
        public static SnapshotAccessState Available { get; } = new SnapshotAccessState(AvailableValue);
        /// <summary> The snapshot can be used for restoring disks with fast performance but cannot be copied or downloaded. </summary>
        public static SnapshotAccessState InstantAccess { get; } = new SnapshotAccessState(InstantAccessValue);
        /// <summary> The snapshot can be used for restoring disks with fast performance, copied and downloaded. </summary>
        public static SnapshotAccessState AvailableWithInstantAccess { get; } = new SnapshotAccessState(AvailableWithInstantAccessValue);
        /// <summary> Determines if two <see cref="SnapshotAccessState"/> values are the same. </summary>
        public static bool operator ==(SnapshotAccessState left, SnapshotAccessState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SnapshotAccessState"/> values are not the same. </summary>
        public static bool operator !=(SnapshotAccessState left, SnapshotAccessState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SnapshotAccessState"/>. </summary>
        public static implicit operator SnapshotAccessState(string value) => new SnapshotAccessState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SnapshotAccessState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SnapshotAccessState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
