// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class CloudServiceNetworkProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(LoadBalancerConfigurations))
            {
                writer.WritePropertyName("loadBalancerConfigurations");
                writer.WriteStartArray();
                foreach (var item in LoadBalancerConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SwappableCloudService))
            {
                writer.WritePropertyName("swappableCloudService");
                writer.WriteObjectValue(SwappableCloudService);
            }
            writer.WriteEndObject();
        }

        internal static CloudServiceNetworkProfile DeserializeCloudServiceNetworkProfile(JsonElement element)
        {
            Optional<IList<LoadBalancerConfiguration>> loadBalancerConfigurations = default;
            Optional<SubResource> swappableCloudService = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("loadBalancerConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<LoadBalancerConfiguration> array = new List<LoadBalancerConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(LoadBalancerConfiguration.DeserializeLoadBalancerConfiguration(item));
                    }
                    loadBalancerConfigurations = array;
                    continue;
                }
                if (property.NameEquals("swappableCloudService"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    swappableCloudService = SubResource.DeserializeSubResource(property.Value);
                    continue;
                }
            }
            return new CloudServiceNetworkProfile(Optional.ToList(loadBalancerConfigurations), swappableCloudService.Value);
        }
    }
}
