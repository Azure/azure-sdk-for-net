// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class CloudServiceNetworkProfile : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(LoadBalancerConfigurations))
            {
                writer.WritePropertyName("loadBalancerConfigurations");
                writer.WriteStartArray();
                foreach (var item in LoadBalancerConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SlotType))
            {
                writer.WritePropertyName("slotType");
                writer.WriteStringValue(SlotType.Value.ToString());
            }
            if (Optional.IsDefined(SwappableCloudService))
            {
                writer.WritePropertyName("swappableCloudService");
                JsonSerializer.Serialize(writer, SwappableCloudService);
            }
            writer.WriteEndObject();
        }

        internal static CloudServiceNetworkProfile DeserializeCloudServiceNetworkProfile(JsonElement element)
        {
            Optional<IList<CloudServiceLoadBalancerConfiguration>> loadBalancerConfigurations = default;
            Optional<CloudServiceSlotType> slotType = default;
            Optional<WritableSubResource> swappableCloudService = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("loadBalancerConfigurations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CloudServiceLoadBalancerConfiguration> array = new List<CloudServiceLoadBalancerConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CloudServiceLoadBalancerConfiguration.DeserializeCloudServiceLoadBalancerConfiguration(item));
                    }
                    loadBalancerConfigurations = array;
                    continue;
                }
                if (property.NameEquals("slotType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    slotType = new CloudServiceSlotType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("swappableCloudService"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    swappableCloudService = JsonSerializer.Deserialize<WritableSubResource>(property.Value.ToString());
                    continue;
                }
            }
            return new CloudServiceNetworkProfile(Optional.ToList(loadBalancerConfigurations), Optional.ToNullable(slotType), swappableCloudService);
        }
    }
}
