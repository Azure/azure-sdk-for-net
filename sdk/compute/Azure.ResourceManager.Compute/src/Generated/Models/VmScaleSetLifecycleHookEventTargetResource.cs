// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Define a single target resource in a lifecycle hook event. Currently, the resource can either be a VMSS or a VMSS VM. </summary>
    public partial class VmScaleSetLifecycleHookEventTargetResource
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VmScaleSetLifecycleHookEventTargetResource"/>. </summary>
        public VmScaleSetLifecycleHookEventTargetResource()
        {
            AdditionalContext = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="VmScaleSetLifecycleHookEventTargetResource"/>. </summary>
        /// <param name="resource"> Specifies the target ARM resource. Currently, can be a VMSS resource or an individual VM resource in a VMSS. </param>
        /// <param name="actionState"> State of the lifecycle hook for the target resource. The customer can patch this property to move the lifecycle hook to a terminal state. </param>
        /// <param name="additionalContext"> Additional key-value pairs set for the target resource that gives customer some useful context/data. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VmScaleSetLifecycleHookEventTargetResource(WritableSubResource resource, LifecycleHookActionState? actionState, IDictionary<string, string> additionalContext, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Resource = resource;
            ActionState = actionState;
            AdditionalContext = additionalContext;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Specifies the target ARM resource. Currently, can be a VMSS resource or an individual VM resource in a VMSS. </summary>
        internal WritableSubResource Resource { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier ResourceId
        {
            get => Resource is null ? default : Resource.Id;
            set
            {
                if (Resource is null)
                    Resource = new WritableSubResource();
                Resource.Id = value;
            }
        }

        /// <summary> State of the lifecycle hook for the target resource. The customer can patch this property to move the lifecycle hook to a terminal state. </summary>
        public LifecycleHookActionState? ActionState { get; set; }
        /// <summary> Additional key-value pairs set for the target resource that gives customer some useful context/data. </summary>
        public IDictionary<string, string> AdditionalContext { get; }
    }
}
