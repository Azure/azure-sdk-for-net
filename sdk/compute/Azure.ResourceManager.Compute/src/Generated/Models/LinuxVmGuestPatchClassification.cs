// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> The LinuxVmGuestPatchClassification. </summary>
    public readonly partial struct LinuxVmGuestPatchClassification : IEquatable<LinuxVmGuestPatchClassification>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LinuxVmGuestPatchClassification"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LinuxVmGuestPatchClassification(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CriticalValue = "Critical";
        private const string SecurityValue = "Security";
        private const string OtherValue = "Other";

        /// <summary> Critical. </summary>
        public static LinuxVmGuestPatchClassification Critical { get; } = new LinuxVmGuestPatchClassification(CriticalValue);
        /// <summary> Security. </summary>
        public static LinuxVmGuestPatchClassification Security { get; } = new LinuxVmGuestPatchClassification(SecurityValue);
        /// <summary> Other. </summary>
        public static LinuxVmGuestPatchClassification Other { get; } = new LinuxVmGuestPatchClassification(OtherValue);
        /// <summary> Determines if two <see cref="LinuxVmGuestPatchClassification"/> values are the same. </summary>
        public static bool operator ==(LinuxVmGuestPatchClassification left, LinuxVmGuestPatchClassification right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LinuxVmGuestPatchClassification"/> values are not the same. </summary>
        public static bool operator !=(LinuxVmGuestPatchClassification left, LinuxVmGuestPatchClassification right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LinuxVmGuestPatchClassification"/>. </summary>
        public static implicit operator LinuxVmGuestPatchClassification(string value) => new LinuxVmGuestPatchClassification(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LinuxVmGuestPatchClassification other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LinuxVmGuestPatchClassification other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
