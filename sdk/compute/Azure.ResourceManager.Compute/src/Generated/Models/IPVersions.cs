// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: &apos;IPv4&apos; and &apos;IPv6&apos;. </summary>
    public readonly partial struct IPVersions : IEquatable<IPVersions>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="IPVersions"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IPVersions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IPv4Value = "IPv4";
        private const string IPv6Value = "IPv6";

        /// <summary> IPv4. </summary>
        public static IPVersions IPv4 { get; } = new IPVersions(IPv4Value);
        /// <summary> IPv6. </summary>
        public static IPVersions IPv6 { get; } = new IPVersions(IPv6Value);
        /// <summary> Determines if two <see cref="IPVersions"/> values are the same. </summary>
        public static bool operator ==(IPVersions left, IPVersions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IPVersions"/> values are not the same. </summary>
        public static bool operator !=(IPVersions left, IPVersions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IPVersions"/>. </summary>
        public static implicit operator IPVersions(string value) => new IPVersions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IPVersions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IPVersions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
