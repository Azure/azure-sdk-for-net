// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> disk encryption set resource. </summary>
    public partial class DiskEncryptionSet : Resource
    {
        /// <summary> Initializes a new instance of DiskEncryptionSet. </summary>
        /// <param name="location"> Resource location. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public DiskEncryptionSet(string location) : base(location)
        {
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }

            PreviousKeys = new ChangeTrackingList<KeyVaultAndKeyReference>();
        }

        /// <summary> Initializes a new instance of DiskEncryptionSet. </summary>
        /// <param name="id"> Resource Id. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="identity"> The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. </param>
        /// <param name="activeKey"> The key vault key which is currently used by this disk encryption set. </param>
        /// <param name="previousKeys"> A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation. </param>
        /// <param name="provisioningState"> The disk encryption set provisioning state. </param>
        internal DiskEncryptionSet(string id, string name, string type, string location, IDictionary<string, string> tags, EncryptionSetIdentity identity, KeyVaultAndKeyReference activeKey, IReadOnlyList<KeyVaultAndKeyReference> previousKeys, string provisioningState) : base(id, name, type, location, tags)
        {
            Identity = identity;
            ActiveKey = activeKey;
            PreviousKeys = previousKeys;
            ProvisioningState = provisioningState;
        }

        /// <summary> The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks. </summary>
        public EncryptionSetIdentity Identity { get; set; }
        /// <summary> The key vault key which is currently used by this disk encryption set. </summary>
        public KeyVaultAndKeyReference ActiveKey { get; set; }
        /// <summary> A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation. </summary>
        public IReadOnlyList<KeyVaultAndKeyReference> PreviousKeys { get; }
        /// <summary> The disk encryption set provisioning state. </summary>
        public string ProvisioningState { get; }
    }
}
