// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Gets the consistency mode for the restore point. Please refer to https://aka.ms/RestorePoints for more details. </summary>
    public readonly partial struct ConsistencyModeTypes : IEquatable<ConsistencyModeTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ConsistencyModeTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConsistencyModeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CrashConsistentValue = "CrashConsistent";
        private const string FileSystemConsistentValue = "FileSystemConsistent";
        private const string ApplicationConsistentValue = "ApplicationConsistent";

        /// <summary> CrashConsistent. </summary>
        public static ConsistencyModeTypes CrashConsistent { get; } = new ConsistencyModeTypes(CrashConsistentValue);
        /// <summary> FileSystemConsistent. </summary>
        public static ConsistencyModeTypes FileSystemConsistent { get; } = new ConsistencyModeTypes(FileSystemConsistentValue);
        /// <summary> ApplicationConsistent. </summary>
        public static ConsistencyModeTypes ApplicationConsistent { get; } = new ConsistencyModeTypes(ApplicationConsistentValue);
        /// <summary> Determines if two <see cref="ConsistencyModeTypes"/> values are the same. </summary>
        public static bool operator ==(ConsistencyModeTypes left, ConsistencyModeTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConsistencyModeTypes"/> values are not the same. </summary>
        public static bool operator !=(ConsistencyModeTypes left, ConsistencyModeTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConsistencyModeTypes"/>. </summary>
        public static implicit operator ConsistencyModeTypes(string value) => new ConsistencyModeTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConsistencyModeTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConsistencyModeTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
