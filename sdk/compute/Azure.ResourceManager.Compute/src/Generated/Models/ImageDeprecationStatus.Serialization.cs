// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class ImageDeprecationStatus : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ImageState))
            {
                writer.WritePropertyName("imageState"u8);
                writer.WriteStringValue(ImageState.Value.ToString());
            }
            if (Core.Optional.IsDefined(ScheduledDeprecationOn))
            {
                writer.WritePropertyName("scheduledDeprecationTime"u8);
                writer.WriteStringValue(ScheduledDeprecationOn.Value, "O");
            }
            if (Core.Optional.IsDefined(AlternativeOption))
            {
                writer.WritePropertyName("alternativeOption"u8);
                writer.WriteObjectValue(AlternativeOption);
            }
            writer.WriteEndObject();
        }

        internal static ImageDeprecationStatus DeserializeImageDeprecationStatus(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ImageState> imageState = default;
            Core.Optional<DateTimeOffset> scheduledDeprecationTime = default;
            Core.Optional<ImageAlternativeOption> alternativeOption = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("imageState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    imageState = new ImageState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scheduledDeprecationTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scheduledDeprecationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("alternativeOption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    alternativeOption = ImageAlternativeOption.DeserializeImageAlternativeOption(property.Value);
                    continue;
                }
            }
            return new ImageDeprecationStatus(Core.Optional.ToNullable(imageState), Core.Optional.ToNullable(scheduledDeprecationTime), alternativeOption.Value);
        }
    }
}
