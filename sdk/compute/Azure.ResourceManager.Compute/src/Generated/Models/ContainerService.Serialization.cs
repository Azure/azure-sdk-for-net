// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class ContainerService : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(OrchestratorProfile))
            {
                writer.WritePropertyName("orchestratorProfile");
                writer.WriteObjectValue(OrchestratorProfile);
            }
            if (Optional.IsDefined(CustomProfile))
            {
                writer.WritePropertyName("customProfile");
                writer.WriteObjectValue(CustomProfile);
            }
            if (Optional.IsDefined(ServicePrincipalProfile))
            {
                writer.WritePropertyName("servicePrincipalProfile");
                writer.WriteObjectValue(ServicePrincipalProfile);
            }
            if (Optional.IsDefined(MasterProfile))
            {
                writer.WritePropertyName("masterProfile");
                writer.WriteObjectValue(MasterProfile);
            }
            if (Optional.IsCollectionDefined(AgentPoolProfiles))
            {
                writer.WritePropertyName("agentPoolProfiles");
                writer.WriteStartArray();
                foreach (var item in AgentPoolProfiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(WindowsProfile))
            {
                writer.WritePropertyName("windowsProfile");
                writer.WriteObjectValue(WindowsProfile);
            }
            if (Optional.IsDefined(LinuxProfile))
            {
                writer.WritePropertyName("linuxProfile");
                writer.WriteObjectValue(LinuxProfile);
            }
            if (Optional.IsDefined(DiagnosticsProfile))
            {
                writer.WritePropertyName("diagnosticsProfile");
                writer.WriteObjectValue(DiagnosticsProfile);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ContainerService DeserializeContainerService(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> name = default;
            Optional<string> type = default;
            string location = default;
            Optional<IDictionary<string, string>> tags = default;
            Optional<string> provisioningState = default;
            Optional<ContainerServiceOrchestratorProfile> orchestratorProfile = default;
            Optional<ContainerServiceCustomProfile> customProfile = default;
            Optional<ContainerServicePrincipalProfile> servicePrincipalProfile = default;
            Optional<ContainerServiceMasterProfile> masterProfile = default;
            Optional<IList<ContainerServiceAgentPoolProfile>> agentPoolProfiles = default;
            Optional<ContainerServiceWindowsProfile> windowsProfile = default;
            Optional<ContainerServiceLinuxProfile> linuxProfile = default;
            Optional<ContainerServiceDiagnosticsProfile> diagnosticsProfile = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("orchestratorProfile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            orchestratorProfile = ContainerServiceOrchestratorProfile.DeserializeContainerServiceOrchestratorProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("customProfile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            customProfile = ContainerServiceCustomProfile.DeserializeContainerServiceCustomProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("servicePrincipalProfile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            servicePrincipalProfile = ContainerServicePrincipalProfile.DeserializeContainerServicePrincipalProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("masterProfile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            masterProfile = ContainerServiceMasterProfile.DeserializeContainerServiceMasterProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("agentPoolProfiles"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ContainerServiceAgentPoolProfile> array = new List<ContainerServiceAgentPoolProfile>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ContainerServiceAgentPoolProfile.DeserializeContainerServiceAgentPoolProfile(item));
                            }
                            agentPoolProfiles = array;
                            continue;
                        }
                        if (property0.NameEquals("windowsProfile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            windowsProfile = ContainerServiceWindowsProfile.DeserializeContainerServiceWindowsProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("linuxProfile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            linuxProfile = ContainerServiceLinuxProfile.DeserializeContainerServiceLinuxProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("diagnosticsProfile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            diagnosticsProfile = ContainerServiceDiagnosticsProfile.DeserializeContainerServiceDiagnosticsProfile(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ContainerService(id.Value, name.Value, type.Value, location, Optional.ToDictionary(tags), provisioningState.Value, orchestratorProfile.Value, customProfile.Value, servicePrincipalProfile.Value, masterProfile.Value, Optional.ToList(agentPoolProfiles), windowsProfile.Value, linuxProfile.Value, diagnosticsProfile.Value);
        }
    }
}
