// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Specifies the priority for a standalone virtual machine or the virtual machines in the scale set. &lt;br&gt;&lt;br&gt; &apos;Low&apos; enum will be deprecated in the future, please use &apos;Spot&apos; as the enum to deploy Azure Spot VM/VMSS. </summary>
    public readonly partial struct VmPriorityType : IEquatable<VmPriorityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VmPriorityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VmPriorityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegularValue = "Regular";
        private const string LowValue = "Low";
        private const string SpotValue = "Spot";

        /// <summary> Regular. </summary>
        public static VmPriorityType Regular { get; } = new VmPriorityType(RegularValue);
        /// <summary> Low. </summary>
        public static VmPriorityType Low { get; } = new VmPriorityType(LowValue);
        /// <summary> Spot. </summary>
        public static VmPriorityType Spot { get; } = new VmPriorityType(SpotValue);
        /// <summary> Determines if two <see cref="VmPriorityType"/> values are the same. </summary>
        public static bool operator ==(VmPriorityType left, VmPriorityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VmPriorityType"/> values are not the same. </summary>
        public static bool operator !=(VmPriorityType left, VmPriorityType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VmPriorityType"/>. </summary>
        public static implicit operator VmPriorityType(string value) => new VmPriorityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VmPriorityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VmPriorityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
