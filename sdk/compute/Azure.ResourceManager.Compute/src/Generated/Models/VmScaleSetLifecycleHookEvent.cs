// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Defines a VMScaleSet lifecycle hook event. </summary>
    public partial class VmScaleSetLifecycleHookEvent : ResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VmScaleSetLifecycleHookEvent"/>. </summary>
        public VmScaleSetLifecycleHookEvent()
        {
            TargetResources = new ChangeTrackingList<VmScaleSetLifecycleHookEventTargetResource>();
            AdditionalContext = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="VmScaleSetLifecycleHookEvent"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="typePropertiesType"> Defines the type or scenario for sending a lifecycle hook notification to the customer. </param>
        /// <param name="waitUntil"> Specifies the exact UTC timestamp in ISO 8601 format till which the event would remain in the current lifecycle state waiting for an action from the customer. Beyond this timestamp, the platform will apply the DefaultAction for the event. </param>
        /// <param name="maxWaitUntil"> Specifies the exact UTC timestamp in ISO 8601 format till when the customer can delay the lifecycle hook event. The customer will not be allowed to delay the event to a timestamp beyond this time. </param>
        /// <param name="timeCreated"> The UTC timestamp in ISO 8601 format at which the platform creates the VMScaleSet lifecycle hook event entity. </param>
        /// <param name="defaultAction"> Specify the action that will be aplied on the a target resource in the VMScaleSet lifecycle hook event, if the platform does not get a response from the customer for the target resource before waitUntil. </param>
        /// <param name="targetResources"> List of resources which are getting processed in the lifecycle hook event. </param>
        /// <param name="additionalContext"> Additional key-value pairs set on the lifecycle hook event that gives customer some useful context/data. </param>
        /// <param name="state"> Specifies the state of the lifecycle hook event. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VmScaleSetLifecycleHookEvent(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string typePropertiesType, string waitUntil, string maxWaitUntil, string timeCreated, LifecycleHookAction? defaultAction, IList<VmScaleSetLifecycleHookEventTargetResource> targetResources, IDictionary<string, string> additionalContext, VmScaleSetLifecycleHookEventState? state, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData)
        {
            TypePropertiesType = typePropertiesType;
            WaitUntil = waitUntil;
            MaxWaitUntil = maxWaitUntil;
            TimeCreated = timeCreated;
            DefaultAction = defaultAction;
            TargetResources = targetResources;
            AdditionalContext = additionalContext;
            State = state;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Defines the type or scenario for sending a lifecycle hook notification to the customer. </summary>
        public string TypePropertiesType { get; set; }
        /// <summary> Specifies the exact UTC timestamp in ISO 8601 format till which the event would remain in the current lifecycle state waiting for an action from the customer. Beyond this timestamp, the platform will apply the DefaultAction for the event. </summary>
        public string WaitUntil { get; set; }
        /// <summary> Specifies the exact UTC timestamp in ISO 8601 format till when the customer can delay the lifecycle hook event. The customer will not be allowed to delay the event to a timestamp beyond this time. </summary>
        public string MaxWaitUntil { get; set; }
        /// <summary> The UTC timestamp in ISO 8601 format at which the platform creates the VMScaleSet lifecycle hook event entity. </summary>
        public string TimeCreated { get; set; }
        /// <summary> Specify the action that will be aplied on the a target resource in the VMScaleSet lifecycle hook event, if the platform does not get a response from the customer for the target resource before waitUntil. </summary>
        public LifecycleHookAction? DefaultAction { get; set; }
        /// <summary> List of resources which are getting processed in the lifecycle hook event. </summary>
        public IList<VmScaleSetLifecycleHookEventTargetResource> TargetResources { get; }
        /// <summary> Additional key-value pairs set on the lifecycle hook event that gives customer some useful context/data. </summary>
        public IDictionary<string, string> AdditionalContext { get; }
        /// <summary> Specifies the state of the lifecycle hook event. </summary>
        public VmScaleSetLifecycleHookEventState? State { get; set; }
    }
}
