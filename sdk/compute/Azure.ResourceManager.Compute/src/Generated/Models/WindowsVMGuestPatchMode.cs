// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false&lt;br /&gt;&lt;br /&gt; **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true. </summary>
    public readonly partial struct WindowsVMGuestPatchMode : IEquatable<WindowsVMGuestPatchMode>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="WindowsVMGuestPatchMode"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WindowsVMGuestPatchMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ManualValue = "Manual";
        private const string AutomaticByOSValue = "AutomaticByOS";
        private const string AutomaticByPlatformValue = "AutomaticByPlatform";

        /// <summary> Manual. </summary>
        public static WindowsVMGuestPatchMode Manual { get; } = new WindowsVMGuestPatchMode(ManualValue);
        /// <summary> AutomaticByOS. </summary>
        public static WindowsVMGuestPatchMode AutomaticByOS { get; } = new WindowsVMGuestPatchMode(AutomaticByOSValue);
        /// <summary> AutomaticByPlatform. </summary>
        public static WindowsVMGuestPatchMode AutomaticByPlatform { get; } = new WindowsVMGuestPatchMode(AutomaticByPlatformValue);
        /// <summary> Determines if two <see cref="WindowsVMGuestPatchMode"/> values are the same. </summary>
        public static bool operator ==(WindowsVMGuestPatchMode left, WindowsVMGuestPatchMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WindowsVMGuestPatchMode"/> values are not the same. </summary>
        public static bool operator !=(WindowsVMGuestPatchMode left, WindowsVMGuestPatchMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WindowsVMGuestPatchMode"/>. </summary>
        public static implicit operator WindowsVMGuestPatchMode(string value) => new WindowsVMGuestPatchMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WindowsVMGuestPatchMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WindowsVMGuestPatchMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
