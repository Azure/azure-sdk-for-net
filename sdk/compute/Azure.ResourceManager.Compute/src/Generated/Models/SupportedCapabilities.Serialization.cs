// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class SupportedCapabilities : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(DiskControllerTypes))
            {
                writer.WritePropertyName("diskControllerTypes"u8);
                writer.WriteStringValue(DiskControllerTypes);
            }
            if (Core.Optional.IsDefined(AcceleratedNetwork))
            {
                writer.WritePropertyName("acceleratedNetwork"u8);
                writer.WriteBooleanValue(AcceleratedNetwork.Value);
            }
            if (Core.Optional.IsDefined(Architecture))
            {
                writer.WritePropertyName("architecture"u8);
                writer.WriteStringValue(Architecture.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static SupportedCapabilities DeserializeSupportedCapabilities(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> diskControllerTypes = default;
            Core.Optional<bool> acceleratedNetwork = default;
            Core.Optional<ArchitectureType> architecture = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("diskControllerTypes"u8))
                {
                    diskControllerTypes = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("acceleratedNetwork"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    acceleratedNetwork = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("architecture"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    architecture = new ArchitectureType(property.Value.GetString());
                    continue;
                }
            }
            return new SupportedCapabilities(diskControllerTypes.Value, Core.Optional.ToNullable(acceleratedNetwork), Core.Optional.ToNullable(architecture));
        }
    }
}
