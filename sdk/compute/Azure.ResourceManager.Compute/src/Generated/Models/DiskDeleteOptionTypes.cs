// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Specifies the behavior of the managed disk when the VM gets deleted i.e whether the managed disk is deleted or detached. Supported values:&lt;br&gt;&lt;br&gt; **Delete** If this value is used, the managed disk is deleted when VM gets deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the managed disk is retained after VM gets deleted.&lt;br&gt;&lt;br&gt; Minimum api-version: 2021-03-01. </summary>
    public readonly partial struct DiskDeleteOptionTypes : IEquatable<DiskDeleteOptionTypes>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DiskDeleteOptionTypes"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiskDeleteOptionTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeleteValue = "Delete";
        private const string DetachValue = "Detach";

        /// <summary> Delete. </summary>
        public static DiskDeleteOptionTypes Delete { get; } = new DiskDeleteOptionTypes(DeleteValue);
        /// <summary> Detach. </summary>
        public static DiskDeleteOptionTypes Detach { get; } = new DiskDeleteOptionTypes(DetachValue);
        /// <summary> Determines if two <see cref="DiskDeleteOptionTypes"/> values are the same. </summary>
        public static bool operator ==(DiskDeleteOptionTypes left, DiskDeleteOptionTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiskDeleteOptionTypes"/> values are not the same. </summary>
        public static bool operator !=(DiskDeleteOptionTypes left, DiskDeleteOptionTypes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DiskDeleteOptionTypes"/>. </summary>
        public static implicit operator DiskDeleteOptionTypes(string value) => new DiskDeleteOptionTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiskDeleteOptionTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiskDeleteOptionTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
