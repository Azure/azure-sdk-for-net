// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class DiskEncryptionSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (DiskEncryptionKey != null)
            {
                writer.WritePropertyName("diskEncryptionKey");
                writer.WriteObjectValue(DiskEncryptionKey);
            }
            if (KeyEncryptionKey != null)
            {
                writer.WritePropertyName("keyEncryptionKey");
                writer.WriteObjectValue(KeyEncryptionKey);
            }
            if (Enabled != null)
            {
                writer.WritePropertyName("enabled");
                writer.WriteBooleanValue(Enabled.Value);
            }
            writer.WriteEndObject();
        }

        internal static DiskEncryptionSettings DeserializeDiskEncryptionSettings(JsonElement element)
        {
            KeyVaultSecretReference diskEncryptionKey = default;
            KeyVaultKeyReference keyEncryptionKey = default;
            bool? enabled = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("diskEncryptionKey"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskEncryptionKey = KeyVaultSecretReference.DeserializeKeyVaultSecretReference(property.Value);
                    continue;
                }
                if (property.NameEquals("keyEncryptionKey"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyEncryptionKey = KeyVaultKeyReference.DeserializeKeyVaultKeyReference(property.Value);
                    continue;
                }
                if (property.NameEquals("enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
            }
            return new DiskEncryptionSettings(diskEncryptionKey, keyEncryptionKey, enabled);
        }
    }
}
