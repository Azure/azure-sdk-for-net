// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class WinRMListener : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Protocol))
            {
                writer.WritePropertyName("protocol");
                writer.WriteStringValue(Protocol.Value.ToSerialString());
            }
            if (Optional.IsDefined(CertificateUri))
            {
                writer.WritePropertyName("certificateUrl");
                writer.WriteStringValue(CertificateUri.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static WinRMListener DeserializeWinRMListener(JsonElement element)
        {
            Optional<WinRMListenerProtocolType> protocol = default;
            Optional<Uri> certificateUrl = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("protocol"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    protocol = property.Value.GetString().ToWinRMListenerProtocolType();
                    continue;
                }
                if (property.NameEquals("certificateUrl"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        certificateUrl = null;
                        continue;
                    }
                    certificateUrl = new Uri(property.Value.GetString());
                    continue;
                }
            }
            return new WinRMListener(Optional.ToNullable(protocol), certificateUrl.Value);
        }
    }
}
