// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class CommunityGalleryInfo : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(PublisherUri))
            {
                writer.WritePropertyName("publisherUri"u8);
                writer.WriteStringValue(PublisherUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(PublisherContact))
            {
                writer.WritePropertyName("publisherContact"u8);
                writer.WriteStringValue(PublisherContact);
            }
            if (Core.Optional.IsDefined(Eula))
            {
                writer.WritePropertyName("eula"u8);
                writer.WriteStringValue(Eula);
            }
            if (Core.Optional.IsDefined(PublicNamePrefix))
            {
                writer.WritePropertyName("publicNamePrefix"u8);
                writer.WriteStringValue(PublicNamePrefix);
            }
            writer.WriteEndObject();
        }

        internal static CommunityGalleryInfo DeserializeCommunityGalleryInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<Uri> publisherUri = default;
            Core.Optional<string> publisherContact = default;
            Core.Optional<string> eula = default;
            Core.Optional<string> publicNamePrefix = default;
            Core.Optional<bool> communityGalleryEnabled = default;
            Core.Optional<IReadOnlyList<string>> publicNames = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("publisherUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publisherUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("publisherContact"u8))
                {
                    publisherContact = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eula"u8))
                {
                    eula = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publicNamePrefix"u8))
                {
                    publicNamePrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("communityGalleryEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    communityGalleryEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("publicNames"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    publicNames = array;
                    continue;
                }
            }
            return new CommunityGalleryInfo(publisherUri.Value, publisherContact.Value, eula.Value, publicNamePrefix.Value, Core.Optional.ToNullable(communityGalleryEnabled), Core.Optional.ToList(publicNames));
        }
    }
}
