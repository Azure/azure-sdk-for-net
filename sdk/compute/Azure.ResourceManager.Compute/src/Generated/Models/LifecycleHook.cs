// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Describes a lifecycle hook. </summary>
    public partial class LifecycleHook
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LifecycleHook"/>. </summary>
        public LifecycleHook()
        {
        }

        /// <summary> Initializes a new instance of <see cref="LifecycleHook"/>. </summary>
        /// <param name="lifecycleHookType"> Specifies the type of the lifecycle hook. </param>
        /// <param name="waitUntilTime"> Specifies the time duration an LCH event (that is sent to the customer) waits for a response from the customer. It should be in ISO 8601 format. </param>
        /// <param name="defaultAction"> Specifies the default action for the lifecycle hook. This action will be applied on the the target resources if the customer does not take any action for the target resource before waitUntil. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LifecycleHook(string lifecycleHookType, string waitUntilTime, LifecycleHookAction? defaultAction, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            LifecycleHookType = lifecycleHookType;
            WaitUntilTime = waitUntilTime;
            DefaultAction = defaultAction;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Specifies the type of the lifecycle hook. </summary>
        public string LifecycleHookType { get; set; }
        /// <summary> Specifies the time duration an LCH event (that is sent to the customer) waits for a response from the customer. It should be in ISO 8601 format. </summary>
        public string WaitUntilTime { get; set; }
        /// <summary> Specifies the default action for the lifecycle hook. This action will be applied on the the target resources if the customer does not take any action for the target resource before waitUntil. </summary>
        public LifecycleHookAction? DefaultAction { get; set; }
    }
}
