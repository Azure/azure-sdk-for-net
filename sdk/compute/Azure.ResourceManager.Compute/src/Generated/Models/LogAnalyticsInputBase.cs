// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Api input base class for LogAnalytics Api. </summary>
    public partial class LogAnalyticsInputBase
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        protected internal Dictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LogAnalyticsInputBase"/>. </summary>
        /// <param name="blobContainerSasUri"> SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to. </param>
        /// <param name="fromTime"> From time of the query. </param>
        /// <param name="toTime"> To time of the query. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="blobContainerSasUri"/> is null. </exception>
        public LogAnalyticsInputBase(Uri blobContainerSasUri, DateTimeOffset fromTime, DateTimeOffset toTime)
        {
            Argument.AssertNotNull(blobContainerSasUri, nameof(blobContainerSasUri));

            BlobContainerSasUri = blobContainerSasUri;
            FromTime = fromTime;
            ToTime = toTime;
        }

        /// <summary> Initializes a new instance of <see cref="LogAnalyticsInputBase"/>. </summary>
        /// <param name="blobContainerSasUri"> SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to. </param>
        /// <param name="fromTime"> From time of the query. </param>
        /// <param name="toTime"> To time of the query. </param>
        /// <param name="groupByThrottlePolicy"> Group query result by Throttle Policy applied. </param>
        /// <param name="groupByOperationName"> Group query result by Operation Name. </param>
        /// <param name="groupByResourceName"> Group query result by Resource Name. </param>
        /// <param name="groupByClientApplicationId"> Group query result by Client Application ID. </param>
        /// <param name="groupByUserAgent"> Group query result by User Agent. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LogAnalyticsInputBase(Uri blobContainerSasUri, DateTimeOffset fromTime, DateTimeOffset toTime, bool? groupByThrottlePolicy, bool? groupByOperationName, bool? groupByResourceName, bool? groupByClientApplicationId, bool? groupByUserAgent, Dictionary<string, BinaryData> serializedAdditionalRawData)
        {
            BlobContainerSasUri = blobContainerSasUri;
            FromTime = fromTime;
            ToTime = toTime;
            GroupByThrottlePolicy = groupByThrottlePolicy;
            GroupByOperationName = groupByOperationName;
            GroupByResourceName = groupByResourceName;
            GroupByClientApplicationId = groupByClientApplicationId;
            GroupByUserAgent = groupByUserAgent;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="LogAnalyticsInputBase"/> for deserialization. </summary>
        internal LogAnalyticsInputBase()
        {
        }

        /// <summary> SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to. </summary>
        public Uri BlobContainerSasUri { get; }
        /// <summary> From time of the query. </summary>
        public DateTimeOffset FromTime { get; }
        /// <summary> To time of the query. </summary>
        public DateTimeOffset ToTime { get; }
        /// <summary> Group query result by Throttle Policy applied. </summary>
        public bool? GroupByThrottlePolicy { get; set; }
        /// <summary> Group query result by Operation Name. </summary>
        public bool? GroupByOperationName { get; set; }
        /// <summary> Group query result by Resource Name. </summary>
        public bool? GroupByResourceName { get; set; }
        /// <summary> Group query result by Client Application ID. </summary>
        public bool? GroupByClientApplicationId { get; set; }
        /// <summary> Group query result by User Agent. </summary>
        public bool? GroupByUserAgent { get; set; }
    }
}
