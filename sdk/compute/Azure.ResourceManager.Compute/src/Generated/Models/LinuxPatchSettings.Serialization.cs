// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Compute.Models
{
    public partial class LinuxPatchSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PatchMode))
            {
                writer.WritePropertyName("patchMode");
                writer.WriteStringValue(PatchMode.Value.ToString());
            }
            if (Optional.IsDefined(AssessmentMode))
            {
                writer.WritePropertyName("assessmentMode");
                writer.WriteStringValue(AssessmentMode.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static LinuxPatchSettings DeserializeLinuxPatchSettings(JsonElement element)
        {
            Optional<LinuxVMGuestPatchMode> patchMode = default;
            Optional<LinuxPatchAssessmentMode> assessmentMode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("patchMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    patchMode = new LinuxVMGuestPatchMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("assessmentMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    assessmentMode = new LinuxPatchAssessmentMode(property.Value.GetString());
                    continue;
                }
            }
            return new LinuxPatchSettings(Optional.ToNullable(patchMode), Optional.ToNullable(assessmentMode));
        }
    }
}
