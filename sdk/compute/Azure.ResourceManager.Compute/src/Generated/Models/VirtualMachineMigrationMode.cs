// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> Specifies the mode that ProxyAgent will execute on. Warning: this property has been deprecated, please specify 'mode' under particular hostendpoint setting. </summary>
    public readonly partial struct VirtualMachineMigrationMode : IEquatable<VirtualMachineMigrationMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VirtualMachineMigrationMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VirtualMachineMigrationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AuditValue = "Audit";
        private const string EnforceValue = "Enforce";

        /// <summary> Audit. </summary>
        public static VirtualMachineMigrationMode Audit { get; } = new VirtualMachineMigrationMode(AuditValue);
        /// <summary> Enforce. </summary>
        public static VirtualMachineMigrationMode Enforce { get; } = new VirtualMachineMigrationMode(EnforceValue);
        /// <summary> Determines if two <see cref="VirtualMachineMigrationMode"/> values are the same. </summary>
        public static bool operator ==(VirtualMachineMigrationMode left, VirtualMachineMigrationMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VirtualMachineMigrationMode"/> values are not the same. </summary>
        public static bool operator !=(VirtualMachineMigrationMode left, VirtualMachineMigrationMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VirtualMachineMigrationMode"/>. </summary>
        public static implicit operator VirtualMachineMigrationMode(string value) => new VirtualMachineMigrationMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VirtualMachineMigrationMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VirtualMachineMigrationMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
