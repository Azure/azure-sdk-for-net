// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Models
{
    /// <summary> The Expand. </summary>
    public readonly partial struct Expand : IEquatable<Expand>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Expand"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Expand(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PropertiesValue = "Properties";

        /// <summary> Properties. </summary>
        public static Expand Properties { get; } = new Expand(PropertiesValue);
        /// <summary> Determines if two <see cref="Expand"/> values are the same. </summary>
        public static bool operator ==(Expand left, Expand right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Expand"/> values are not the same. </summary>
        public static bool operator !=(Expand left, Expand right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="Expand"/>. </summary>
        public static implicit operator Expand(string value) => new Expand(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Expand other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Expand other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
