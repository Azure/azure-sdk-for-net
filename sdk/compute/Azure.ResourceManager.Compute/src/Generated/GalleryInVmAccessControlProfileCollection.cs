// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Compute
{
    /// <summary>
    /// A class representing a collection of <see cref="GalleryInVmAccessControlProfileResource"/> and their operations.
    /// Each <see cref="GalleryInVmAccessControlProfileResource"/> in the collection will belong to the same instance of <see cref="GalleryResource"/>.
    /// To get a <see cref="GalleryInVmAccessControlProfileCollection"/> instance call the GetGalleryInVmAccessControlProfiles method from an instance of <see cref="GalleryResource"/>.
    /// </summary>
    public partial class GalleryInVmAccessControlProfileCollection : ArmCollection, IEnumerable<GalleryInVmAccessControlProfileResource>, IAsyncEnumerable<GalleryInVmAccessControlProfileResource>
    {
        private readonly ClientDiagnostics _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics;
        private readonly GalleryInVMAccessControlProfilesRestOperations _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient;

        /// <summary> Initializes a new instance of the <see cref="GalleryInVmAccessControlProfileCollection"/> class for mocking. </summary>
        protected GalleryInVmAccessControlProfileCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="GalleryInVmAccessControlProfileCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal GalleryInVmAccessControlProfileCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Compute", GalleryInVmAccessControlProfileResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(GalleryInVmAccessControlProfileResource.ResourceType, out string galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesApiVersion);
            _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient = new GalleryInVMAccessControlProfilesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != GalleryResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, GalleryResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create or update a gallery inVMAccessControlProfile.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="inVmAccessControlProfileName"> The name of the gallery inVMAccessControlProfile to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters. </param>
        /// <param name="data"> Parameters supplied to the create or update gallery inVMAccessControlProfile operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inVmAccessControlProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inVmAccessControlProfileName"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<GalleryInVmAccessControlProfileResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string inVmAccessControlProfileName, GalleryInVmAccessControlProfileData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inVmAccessControlProfileName, nameof(inVmAccessControlProfileName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics.CreateScope("GalleryInVmAccessControlProfileCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, data, cancellationToken).ConfigureAwait(false);
                var operation = new ComputeArmOperation<GalleryInVmAccessControlProfileResource>(new GalleryInVmAccessControlProfileOperationSource(Client), _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics, Pipeline, _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or update a gallery inVMAccessControlProfile.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="inVmAccessControlProfileName"> The name of the gallery inVMAccessControlProfile to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters. </param>
        /// <param name="data"> Parameters supplied to the create or update gallery inVMAccessControlProfile operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inVmAccessControlProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inVmAccessControlProfileName"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<GalleryInVmAccessControlProfileResource> CreateOrUpdate(WaitUntil waitUntil, string inVmAccessControlProfileName, GalleryInVmAccessControlProfileData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inVmAccessControlProfileName, nameof(inVmAccessControlProfileName));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics.CreateScope("GalleryInVmAccessControlProfileCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, data, cancellationToken);
                var operation = new ComputeArmOperation<GalleryInVmAccessControlProfileResource>(new GalleryInVmAccessControlProfileOperationSource(Client), _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics, Pipeline, _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieves information about a gallery inVMAccessControlProfile.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inVmAccessControlProfileName"> The name of the gallery inVMAccessControlProfile to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inVmAccessControlProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inVmAccessControlProfileName"/> is null. </exception>
        public virtual async Task<Response<GalleryInVmAccessControlProfileResource>> GetAsync(string inVmAccessControlProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inVmAccessControlProfileName, nameof(inVmAccessControlProfileName));

            using var scope = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics.CreateScope("GalleryInVmAccessControlProfileCollection.Get");
            scope.Start();
            try
            {
                var response = await _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GalleryInVmAccessControlProfileResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieves information about a gallery inVMAccessControlProfile.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inVmAccessControlProfileName"> The name of the gallery inVMAccessControlProfile to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inVmAccessControlProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inVmAccessControlProfileName"/> is null. </exception>
        public virtual Response<GalleryInVmAccessControlProfileResource> Get(string inVmAccessControlProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inVmAccessControlProfileName, nameof(inVmAccessControlProfileName));

            using var scope = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics.CreateScope("GalleryInVmAccessControlProfileCollection.Get");
            scope.Start();
            try
            {
                var response = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GalleryInVmAccessControlProfileResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List gallery inVMAccessControlProfiles in a gallery.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_ListByGallery</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="GalleryInVmAccessControlProfileResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GalleryInVmAccessControlProfileResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.CreateListByGalleryRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.CreateListByGalleryNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new GalleryInVmAccessControlProfileResource(Client, GalleryInVmAccessControlProfileData.DeserializeGalleryInVmAccessControlProfileData(e)), _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics, Pipeline, "GalleryInVmAccessControlProfileCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List gallery inVMAccessControlProfiles in a gallery.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_ListByGallery</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="GalleryInVmAccessControlProfileResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GalleryInVmAccessControlProfileResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.CreateListByGalleryRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.CreateListByGalleryNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new GalleryInVmAccessControlProfileResource(Client, GalleryInVmAccessControlProfileData.DeserializeGalleryInVmAccessControlProfileData(e)), _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics, Pipeline, "GalleryInVmAccessControlProfileCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inVmAccessControlProfileName"> The name of the gallery inVMAccessControlProfile to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inVmAccessControlProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inVmAccessControlProfileName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string inVmAccessControlProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inVmAccessControlProfileName, nameof(inVmAccessControlProfileName));

            using var scope = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics.CreateScope("GalleryInVmAccessControlProfileCollection.Exists");
            scope.Start();
            try
            {
                var response = await _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inVmAccessControlProfileName"> The name of the gallery inVMAccessControlProfile to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inVmAccessControlProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inVmAccessControlProfileName"/> is null. </exception>
        public virtual Response<bool> Exists(string inVmAccessControlProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inVmAccessControlProfileName, nameof(inVmAccessControlProfileName));

            using var scope = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics.CreateScope("GalleryInVmAccessControlProfileCollection.Exists");
            scope.Start();
            try
            {
                var response = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inVmAccessControlProfileName"> The name of the gallery inVMAccessControlProfile to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inVmAccessControlProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inVmAccessControlProfileName"/> is null. </exception>
        public virtual async Task<NullableResponse<GalleryInVmAccessControlProfileResource>> GetIfExistsAsync(string inVmAccessControlProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inVmAccessControlProfileName, nameof(inVmAccessControlProfileName));

            using var scope = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics.CreateScope("GalleryInVmAccessControlProfileCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<GalleryInVmAccessControlProfileResource>(response.GetRawResponse());
                return Response.FromValue(new GalleryInVmAccessControlProfileResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GalleryInVMAccessControlProfiles_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-03-03</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="GalleryInVmAccessControlProfileResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inVmAccessControlProfileName"> The name of the gallery inVMAccessControlProfile to be retrieved. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inVmAccessControlProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inVmAccessControlProfileName"/> is null. </exception>
        public virtual NullableResponse<GalleryInVmAccessControlProfileResource> GetIfExists(string inVmAccessControlProfileName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inVmAccessControlProfileName, nameof(inVmAccessControlProfileName));

            using var scope = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesClientDiagnostics.CreateScope("GalleryInVmAccessControlProfileCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _galleryInVmAccessControlProfileGalleryInVmAccessControlProfilesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, inVmAccessControlProfileName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<GalleryInVmAccessControlProfileResource>(response.GetRawResponse());
                return Response.FromValue(new GalleryInVmAccessControlProfileResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<GalleryInVmAccessControlProfileResource> IEnumerable<GalleryInVmAccessControlProfileResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<GalleryInVmAccessControlProfileResource> IAsyncEnumerable<GalleryInVmAccessControlProfileResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
