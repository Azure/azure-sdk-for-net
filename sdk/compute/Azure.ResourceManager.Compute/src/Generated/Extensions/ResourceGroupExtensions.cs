// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.Compute
{
    /// <summary> A class to add extension methods to ResourceGroup. </summary>
    public static partial class ResourceGroupExtensions
    {
        #region AvailabilitySets
        /// <summary> Gets an object representing a AvailabilitySetContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="AvailabilitySetContainer" /> object. </returns>
        public static AvailabilitySetContainer GetAvailabilitySets(this ResourceGroupOperations resourceGroup)
        {
            return new AvailabilitySetContainer(resourceGroup);
        }
        #endregion

        #region ProximityPlacementGroups
        /// <summary> Gets an object representing a ProximityPlacementGroupContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ProximityPlacementGroupContainer" /> object. </returns>
        public static ProximityPlacementGroupContainer GetProximityPlacementGroups(this ResourceGroupOperations resourceGroup)
        {
            return new ProximityPlacementGroupContainer(resourceGroup);
        }
        #endregion

        #region DedicatedHostGroups
        /// <summary> Gets an object representing a DedicatedHostGroupContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="DedicatedHostGroupContainer" /> object. </returns>
        public static DedicatedHostGroupContainer GetDedicatedHostGroups(this ResourceGroupOperations resourceGroup)
        {
            return new DedicatedHostGroupContainer(resourceGroup);
        }
        #endregion

        #region SshPublicKeys
        /// <summary> Gets an object representing a SshPublicKeyContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="SshPublicKeyContainer" /> object. </returns>
        public static SshPublicKeyContainer GetSshPublicKeys(this ResourceGroupOperations resourceGroup)
        {
            return new SshPublicKeyContainer(resourceGroup);
        }
        #endregion

        #region VirtualMachines
        /// <summary> Gets an object representing a VirtualMachineContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="VirtualMachineContainer" /> object. </returns>
        public static VirtualMachineContainer GetVirtualMachines(this ResourceGroupOperations resourceGroup)
        {
            return new VirtualMachineContainer(resourceGroup);
        }
        #endregion

        #region VirtualMachineScaleSets
        /// <summary> Gets an object representing a VirtualMachineScaleSetContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="VirtualMachineScaleSetContainer" /> object. </returns>
        public static VirtualMachineScaleSetContainer GetVirtualMachineScaleSets(this ResourceGroupOperations resourceGroup)
        {
            return new VirtualMachineScaleSetContainer(resourceGroup);
        }
        #endregion

        #region Images
        /// <summary> Gets an object representing a ImageContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="ImageContainer" /> object. </returns>
        public static ImageContainer GetImages(this ResourceGroupOperations resourceGroup)
        {
            return new ImageContainer(resourceGroup);
        }
        #endregion

        #region RestorePointCollections
        /// <summary> Gets an object representing a RestorePointCollectionContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="RestorePointCollectionContainer" /> object. </returns>
        public static RestorePointCollectionContainer GetRestorePointCollections(this ResourceGroupOperations resourceGroup)
        {
            return new RestorePointCollectionContainer(resourceGroup);
        }
        #endregion

        #region Disks
        /// <summary> Gets an object representing a DiskContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="DiskContainer" /> object. </returns>
        public static DiskContainer GetDisks(this ResourceGroupOperations resourceGroup)
        {
            return new DiskContainer(resourceGroup);
        }
        #endregion

        #region Snapshots
        /// <summary> Gets an object representing a SnapshotContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="SnapshotContainer" /> object. </returns>
        public static SnapshotContainer GetSnapshots(this ResourceGroupOperations resourceGroup)
        {
            return new SnapshotContainer(resourceGroup);
        }
        #endregion

        #region DiskEncryptionSets
        /// <summary> Gets an object representing a DiskEncryptionSetContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="DiskEncryptionSetContainer" /> object. </returns>
        public static DiskEncryptionSetContainer GetDiskEncryptionSets(this ResourceGroupOperations resourceGroup)
        {
            return new DiskEncryptionSetContainer(resourceGroup);
        }
        #endregion

        #region DiskAccesss
        /// <summary> Gets an object representing a DiskAccessContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="DiskAccessContainer" /> object. </returns>
        public static DiskAccessContainer GetDiskAccesses(this ResourceGroupOperations resourceGroup)
        {
            return new DiskAccessContainer(resourceGroup);
        }
        #endregion

        #region Gallerys
        /// <summary> Gets an object representing a GalleryContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="GalleryContainer" /> object. </returns>
        public static GalleryContainer GetGalleries(this ResourceGroupOperations resourceGroup)
        {
            return new GalleryContainer(resourceGroup);
        }
        #endregion

        #region CloudServices
        /// <summary> Gets an object representing a CloudServiceContainer along with the instance operations that can be performed on it. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <returns> Returns a <see cref="CloudServiceContainer" /> object. </returns>
        public static CloudServiceContainer GetCloudServices(this ResourceGroupOperations resourceGroup)
        {
            return new CloudServiceContainer(resourceGroup);
        }
        #endregion

        #region DiskRestorePoint
        private static DiskRestorePointRestOperations GetDiskRestorePointRestOperations(ClientDiagnostics clientDiagnostics, TokenCredential credential, ArmClientOptions clientOptions, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            return new DiskRestorePointRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
        }

        /// <summary> Lists the DiskRestorePoints for this ResourceGroupOperations. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="restorePointCollectionName"> The name of the restore point collection that the disk restore point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="vmRestorePointName"> The name of the vm restore point that the disk disk restore point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        /// <exception cref="ArgumentNullException"> <paramref name="restorePointCollectionName"/> or <paramref name="vmRestorePointName"/> is null. </exception>
        public static AsyncPageable<DiskRestorePoint> ListDiskRestorePointsByRestorePointAsync(this ResourceGroupOperations resourceGroup, string restorePointCollectionName, string vmRestorePointName, CancellationToken cancellationToken = default)
        {
            if (restorePointCollectionName == null)
            {
                throw new ArgumentNullException(nameof(restorePointCollectionName));
            }
            if (vmRestorePointName == null)
            {
                throw new ArgumentNullException(nameof(vmRestorePointName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetDiskRestorePointRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                async Task<Page<DiskRestorePoint>> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.ListDiskRestorePointsByRestorePoint");
                    scope.Start();
                    try
                    {
                        var response = await restOperations.ListByRestorePointAsync(resourceGroup.Id.Name, restorePointCollectionName, vmRestorePointName, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                async Task<Page<DiskRestorePoint>> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.ListDiskRestorePointsByRestorePoint");
                    scope.Start();
                    try
                    {
                        var response = await restOperations.ListByRestorePointNextPageAsync(nextLink, resourceGroup.Id.Name, restorePointCollectionName, vmRestorePointName, cancellationToken: cancellationToken).ConfigureAwait(false);
                        return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
            }
            );
        }

        /// <summary> Lists the DiskRestorePoints for this ResourceGroupOperations. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="restorePointCollectionName"> The name of the restore point collection that the disk restore point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="vmRestorePointName"> The name of the vm restore point that the disk disk restore point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of resource operations that may take multiple service requests to iterate over. </returns>
        /// <exception cref="ArgumentNullException"> <paramref name="restorePointCollectionName"/> or <paramref name="vmRestorePointName"/> is null. </exception>
        public static Pageable<DiskRestorePoint> ListDiskRestorePointsByRestorePoint(this ResourceGroupOperations resourceGroup, string restorePointCollectionName, string vmRestorePointName, CancellationToken cancellationToken = default)
        {
            if (restorePointCollectionName == null)
            {
                throw new ArgumentNullException(nameof(restorePointCollectionName));
            }
            if (vmRestorePointName == null)
            {
                throw new ArgumentNullException(nameof(vmRestorePointName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetDiskRestorePointRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                Page<DiskRestorePoint> FirstPageFunc(int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.ListDiskRestorePointsByRestorePoint");
                    scope.Start();
                    try
                    {
                        var response = restOperations.ListByRestorePoint(resourceGroup.Id.Name, restorePointCollectionName, vmRestorePointName, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                Page<DiskRestorePoint> NextPageFunc(string nextLink, int? pageSizeHint)
                {
                    using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.ListDiskRestorePointsByRestorePoint");
                    scope.Start();
                    try
                    {
                        var response = restOperations.ListByRestorePointNextPage(nextLink, resourceGroup.Id.Name, restorePointCollectionName, vmRestorePointName, cancellationToken: cancellationToken);
                        return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                    }
                    catch (Exception e)
                    {
                        scope.Failed(e);
                        throw;
                    }
                }
                return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
            }
            );
        }

        /// <summary> Get disk restorePoint resource. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="restorePointCollectionName"> The name of the restore point collection that the disk restore point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="vmRestorePointName"> The name of the vm restore point that the disk disk restore point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="diskRestorePointName"> The name of the disk restore point created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="restorePointCollectionName"/>, <paramref name="vmRestorePointName"/>, or <paramref name="diskRestorePointName"/> is null. </exception>
        public static async Task<Response<DiskRestorePoint>> GetDiskRestorePointAsync(this ResourceGroupOperations resourceGroup, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, CancellationToken cancellationToken = default)
        {
            if (restorePointCollectionName == null)
            {
                throw new ArgumentNullException(nameof(restorePointCollectionName));
            }
            if (vmRestorePointName == null)
            {
                throw new ArgumentNullException(nameof(vmRestorePointName));
            }
            if (diskRestorePointName == null)
            {
                throw new ArgumentNullException(nameof(diskRestorePointName));
            }

            return await resourceGroup.UseClientContext(async (baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetDiskRestorePointRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetDiskRestorePoint");
                scope.Start();
                try
                {
                    var response = await restOperations.GetAsync(resourceGroup.Id.Name, restorePointCollectionName, vmRestorePointName, diskRestorePointName, cancellationToken).ConfigureAwait(false);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        /// <summary> Get disk restorePoint resource. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroupOperations" /> instance the method will execute against. </param>
        /// <param name="restorePointCollectionName"> The name of the restore point collection that the disk restore point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="vmRestorePointName"> The name of the vm restore point that the disk disk restore point belongs. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="diskRestorePointName"> The name of the disk restore point created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="restorePointCollectionName"/>, <paramref name="vmRestorePointName"/>, or <paramref name="diskRestorePointName"/> is null. </exception>
        public static Response<DiskRestorePoint> GetDiskRestorePoint(this ResourceGroupOperations resourceGroup, string restorePointCollectionName, string vmRestorePointName, string diskRestorePointName, CancellationToken cancellationToken = default)
        {
            if (restorePointCollectionName == null)
            {
                throw new ArgumentNullException(nameof(restorePointCollectionName));
            }
            if (vmRestorePointName == null)
            {
                throw new ArgumentNullException(nameof(vmRestorePointName));
            }
            if (diskRestorePointName == null)
            {
                throw new ArgumentNullException(nameof(diskRestorePointName));
            }

            return resourceGroup.UseClientContext((baseUri, credential, options, pipeline) =>
            {
                var clientDiagnostics = new ClientDiagnostics(options);
                var restOperations = GetDiskRestorePointRestOperations(clientDiagnostics, credential, options, pipeline, resourceGroup.Id.SubscriptionId, baseUri);
                using var scope = clientDiagnostics.CreateScope("ResourceGroupExtensions.GetDiskRestorePoint");
                scope.Start();
                try
                {
                    var response = restOperations.Get(resourceGroup.Id.Name, restorePointCollectionName, vmRestorePointName, diskRestorePointName, cancellationToken);
                    return response;
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            );
        }

        #endregion
    }
}
