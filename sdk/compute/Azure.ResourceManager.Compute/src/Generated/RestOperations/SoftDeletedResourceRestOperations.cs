// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Compute.Models;

namespace Azure.ResourceManager.Compute
{
    internal partial class SoftDeletedResourceRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of SoftDeletedResourceRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public SoftDeletedResourceRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2024-03-03";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateListByArtifactNameRequestUri(string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Compute/galleries/", false);
            uri.AppendPath(galleryName, true);
            uri.AppendPath("/softDeletedArtifactTypes/", false);
            uri.AppendPath(artifactType, true);
            uri.AppendPath("/artifacts/", false);
            uri.AppendPath(artifactName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByArtifactNameRequest(string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.Compute/galleries/", false);
            uri.AppendPath(galleryName, true);
            uri.AppendPath("/softDeletedArtifactTypes/", false);
            uri.AppendPath(artifactType, true);
            uri.AppendPath("/artifacts/", false);
            uri.AppendPath(artifactName, true);
            uri.AppendPath("/versions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List soft-deleted resources of an artifact in the gallery, such as soft-deleted gallery image version of an image. </summary>
        /// <param name="subscriptionId"> Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="galleryName"> The name of the Gallery in which the soft-deleted resources resides. </param>
        /// <param name="artifactType"> The type of the artifact to be listed, such as gallery image version. </param>
        /// <param name="artifactName"> The artifact name to be listed. If artifact type is Images, then the artifact name should be the gallery image name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="galleryName"/>, <paramref name="artifactType"/> or <paramref name="artifactName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="galleryName"/>, <paramref name="artifactType"/> or <paramref name="artifactName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<GallerySoftDeletedResourceList>> ListByArtifactNameAsync(string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(galleryName, nameof(galleryName));
            Argument.AssertNotNullOrEmpty(artifactType, nameof(artifactType));
            Argument.AssertNotNullOrEmpty(artifactName, nameof(artifactName));

            using var message = CreateListByArtifactNameRequest(subscriptionId, resourceGroupName, galleryName, artifactType, artifactName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GallerySoftDeletedResourceList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GallerySoftDeletedResourceList.DeserializeGallerySoftDeletedResourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List soft-deleted resources of an artifact in the gallery, such as soft-deleted gallery image version of an image. </summary>
        /// <param name="subscriptionId"> Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="galleryName"> The name of the Gallery in which the soft-deleted resources resides. </param>
        /// <param name="artifactType"> The type of the artifact to be listed, such as gallery image version. </param>
        /// <param name="artifactName"> The artifact name to be listed. If artifact type is Images, then the artifact name should be the gallery image name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="galleryName"/>, <paramref name="artifactType"/> or <paramref name="artifactName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="galleryName"/>, <paramref name="artifactType"/> or <paramref name="artifactName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<GallerySoftDeletedResourceList> ListByArtifactName(string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(galleryName, nameof(galleryName));
            Argument.AssertNotNullOrEmpty(artifactType, nameof(artifactType));
            Argument.AssertNotNullOrEmpty(artifactName, nameof(artifactName));

            using var message = CreateListByArtifactNameRequest(subscriptionId, resourceGroupName, galleryName, artifactType, artifactName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GallerySoftDeletedResourceList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GallerySoftDeletedResourceList.DeserializeGallerySoftDeletedResourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByArtifactNameNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByArtifactNameNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> List soft-deleted resources of an artifact in the gallery, such as soft-deleted gallery image version of an image. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="galleryName"> The name of the Gallery in which the soft-deleted resources resides. </param>
        /// <param name="artifactType"> The type of the artifact to be listed, such as gallery image version. </param>
        /// <param name="artifactName"> The artifact name to be listed. If artifact type is Images, then the artifact name should be the gallery image name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="galleryName"/>, <paramref name="artifactType"/> or <paramref name="artifactName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="galleryName"/>, <paramref name="artifactType"/> or <paramref name="artifactName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<GallerySoftDeletedResourceList>> ListByArtifactNameNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(galleryName, nameof(galleryName));
            Argument.AssertNotNullOrEmpty(artifactType, nameof(artifactType));
            Argument.AssertNotNullOrEmpty(artifactName, nameof(artifactName));

            using var message = CreateListByArtifactNameNextPageRequest(nextLink, subscriptionId, resourceGroupName, galleryName, artifactType, artifactName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GallerySoftDeletedResourceList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GallerySoftDeletedResourceList.DeserializeGallerySoftDeletedResourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List soft-deleted resources of an artifact in the gallery, such as soft-deleted gallery image version of an image. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. </param>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="galleryName"> The name of the Gallery in which the soft-deleted resources resides. </param>
        /// <param name="artifactType"> The type of the artifact to be listed, such as gallery image version. </param>
        /// <param name="artifactName"> The artifact name to be listed. If artifact type is Images, then the artifact name should be the gallery image name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="galleryName"/>, <paramref name="artifactType"/> or <paramref name="artifactName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="galleryName"/>, <paramref name="artifactType"/> or <paramref name="artifactName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<GallerySoftDeletedResourceList> ListByArtifactNameNextPage(string nextLink, string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(galleryName, nameof(galleryName));
            Argument.AssertNotNullOrEmpty(artifactType, nameof(artifactType));
            Argument.AssertNotNullOrEmpty(artifactName, nameof(artifactName));

            using var message = CreateListByArtifactNameNextPageRequest(nextLink, subscriptionId, resourceGroupName, galleryName, artifactType, artifactName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GallerySoftDeletedResourceList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GallerySoftDeletedResourceList.DeserializeGallerySoftDeletedResourceList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
