// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute.Models;

namespace Azure.ResourceManager.Compute
{
    public partial class Sample_DiskImageResource_Update_UpdatesTagsOfAnImage
    {
        // Updates tags of an Image.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update()
        {
            // Generated from example definition: specification/compute/resource-manager/Microsoft.Compute/stable/2022-03-01/ComputeRP/examples/imageExamples/Image_Update.json
            // this example is just showing the usage of "Images_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DiskImageResource created on azure
            // for more information of creating DiskImageResource, please refer to the document of DiskImageResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "myResourceGroup";
            string imageName = "myImage";
            ResourceIdentifier diskImageResourceId = Compute.DiskImageResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, imageName);
            Compute.DiskImageResource diskImage = client.GetDiskImageResource(diskImageResourceId);

            // invoke the operation
            Compute.Models.DiskImagePatch patch = new DiskImagePatch()
            {
                SourceVirtualMachineId = new ResourceIdentifier("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
                HyperVGeneration = HyperVGeneration.V1,
                Tags =
{
["department"] = "HR",
},
            };
            ArmOperation<Compute.DiskImageResource> lro = await diskImage.UpdateAsync(WaitUntil.Completed, patch);
            Compute.DiskImageResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            Compute.DiskImageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
