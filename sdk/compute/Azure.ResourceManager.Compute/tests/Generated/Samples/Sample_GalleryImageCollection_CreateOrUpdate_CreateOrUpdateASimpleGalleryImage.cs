// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute.Models;

namespace Azure.ResourceManager.Compute
{
    public partial class Sample_GalleryImageCollection_CreateOrUpdate_CreateOrUpdateASimpleGalleryImage
    {
        // Create or update a simple gallery image.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate()
        {
            // Generated from example definition: 
            // this example is just showing the usage of "GalleryImages_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this GalleryResource created on azure
            // for more information of creating GalleryResource, please refer to the document of GalleryResource
            string subscriptionId = "{subscription-id}";
            string resourceGroupName = "myResourceGroup";
            string galleryName = "myGalleryName";
            ResourceIdentifier galleryResourceId = Compute.GalleryResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, galleryName);
            Compute.GalleryResource gallery = client.GetGalleryResource(galleryResourceId);

            // get the collection of this GalleryImageResource
            Compute.GalleryImageCollection collection = gallery.GetGalleryImages();

            // invoke the operation
            string galleryImageName = "myGalleryImageName";
            Compute.GalleryImageData data = new GalleryImageData(new AzureLocation("West US"))
            {
                OSType = SupportedOperatingSystemType.Windows,
                OSState = OperatingSystemStateType.Generalized,
                HyperVGeneration = HyperVGeneration.V1,
                Identifier = new GalleryImageIdentifier("myPublisherName", "myOfferName", "mySkuName"),
            };
            ArmOperation<Compute.GalleryImageResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, galleryImageName, data);
            Compute.GalleryImageResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            Compute.GalleryImageData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
