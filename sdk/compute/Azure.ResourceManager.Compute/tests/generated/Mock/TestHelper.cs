// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Compute.Tests
{
    /// <summary> Test Extension for Azure.ResourceManager.Compute. </summary>
    public static partial class TestHelper
    {
        public static async Task<Compute.Models.AvailabilitySetCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(AvailabilitySetCollection collection, string availabilitySetName)
        {
            // Example: Create an availability set.
            Compute.AvailabilitySetData parameters = new Compute.AvailabilitySetData("westus")
            {
                PlatformUpdateDomainCount = 20,
                PlatformFaultDomainCount = 2,
            };

            return await collection.CreateOrUpdateAsync(availabilitySetName, parameters);
        }

        public static async Task<Compute.Models.ProximityPlacementGroupCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(ProximityPlacementGroupCollection collection, string proximityPlacementGroupName)
        {
            // Example: Create or Update a proximity placement group.
            Compute.ProximityPlacementGroupData parameters = new Compute.ProximityPlacementGroupData("westus")
            {
                ProximityPlacementGroupType = new Compute.Models.ProximityPlacementGroupType("Standard"),
            };

            return await collection.CreateOrUpdateAsync(proximityPlacementGroupName, parameters);
        }

        public static async Task<Response<Compute.ProximityPlacementGroup>> GetExampleInstanceAsync(ProximityPlacementGroupCollection collection, string proximityPlacementGroupName)
        {
            // Example: Create a proximity placement group.
            string includeColocationStatus = null;

            return await collection.GetAsync(proximityPlacementGroupName, includeColocationStatus);
        }

        public static AsyncPageable<Compute.ProximityPlacementGroup> GetAllExampleInstanceAsync(ProximityPlacementGroupCollection collection)
        {
            // Example: Create a proximity placement group.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.DedicatedHostGroupCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(DedicatedHostGroupCollection collection, string hostGroupName)
        {
            // Example: Create or update a dedicated host group.
            Compute.DedicatedHostGroupData parameters = new Compute.DedicatedHostGroupData("westus")
            {
                PlatformFaultDomainCount = 3,
                SupportAutomaticPlacement = true,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { { "department", "finance" }, });
            return await collection.CreateOrUpdateAsync(hostGroupName, parameters);
        }

        public static async Task<Response<Compute.DedicatedHostGroup>> GetExampleInstanceAsync(DedicatedHostGroupCollection collection, string hostGroupName)
        {
            // Example: Create a dedicated host group.
            Compute.Models.InstanceViewTypes? expand = null;

            return await collection.GetAsync(hostGroupName, expand);
        }

        public static async Task<Compute.Models.DedicatedHostCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(DedicatedHostCollection collection, string hostName)
        {
            // Example: Create or update a dedicated host .
            Compute.DedicatedHostData parameters = new Compute.DedicatedHostData("westus", new Compute.Models.Sku()
            {
                Name = "DSv3-Type1",
            })
            {
                PlatformFaultDomain = 1,
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { { "department", "HR" }, });
            return await collection.CreateOrUpdateAsync(hostName, parameters);
        }

        public static async Task<Response<Compute.DedicatedHost>> GetExampleInstanceAsync(DedicatedHostCollection collection, string hostName)
        {
            // Example: Get a dedicated host.
            Compute.Models.InstanceViewTypes? expand = null;

            return await collection.GetAsync(hostName, expand);
        }

        public static async Task<Compute.Models.SshPublicKeyCreateOperation> CreateOrUpdateExampleInstanceAsync(SshPublicKeyCollection collection, string sshPublicKeyName)
        {
            // Example: Create a new SSH public key resource.
            Compute.SshPublicKeyData parameters = new Compute.SshPublicKeyData("westus")
            {
                PublicKey = "{ssh-rsa public key}",
            };

            return await collection.CreateOrUpdateAsync(sshPublicKeyName, parameters);
        }

        public static async Task<Response<Compute.SshPublicKey>> GetExampleInstanceAsync(SshPublicKeyCollection collection, string sshPublicKeyName)
        {
            // Example: Get an ssh public key.

            return await collection.GetAsync(sshPublicKeyName);
        }

        public static async Task<Compute.Models.VirtualMachineCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(VirtualMachineCollection collection, string vmName)
        {
            // Example: Create a Linux vm with a patch setting assessmentMode of ImageDefault.
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2s_v3"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "UbuntuServer",
                        Sku = "16.04-LTS",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    LinuxConfiguration = new Compute.Models.LinuxConfiguration()
                    {
                        ProvisionVMAgent = true,
                        PatchSettings = new Compute.Models.LinuxPatchSettings()
                        {
                            AssessmentMode = new Compute.Models.LinuxPatchAssessmentMode("ImageDefault"),
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            return await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        public static async Task<Response<Compute.VirtualMachine>> GetExampleInstanceAsync(VirtualMachineCollection collection, string vmName)
        {
            // Example: Get a Virtual Machine.
            Compute.Models.InstanceViewTypes? expand = null;

            return await collection.GetAsync(vmName, expand);
        }

        public static async Task<Compute.Models.VirtualMachineScaleSetCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(VirtualMachineScaleSetCollection collection, string vmScaleSetName)
        {
            // Example: Create a custom-image scale set from an unmanaged generalized os image.
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Name = "osDisk",
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            Image = new Compute.Models.VirtualHardDisk()
                            {
                                Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd",
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            return await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        public static async Task<Response<Compute.VirtualMachineScaleSet>> GetExampleInstanceAsync(VirtualMachineScaleSetCollection collection, string vmScaleSetName)
        {
            // Example: Get a virtual machine scale set placed on a dedicated host group through automatic placement.
            Compute.Models.ExpandTypesForGetVMScaleSets? expand = null;

            return await collection.GetAsync(vmScaleSetName, expand);
        }

        public static async Task<Compute.Models.ImageCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(ImageCollection collection, string imageName)
        {
            // Example: Create a virtual machine image from a blob with DiskEncryptionSet resource.
            Compute.ImageData parameters = new Compute.ImageData("West US")
            {
                StorageProfile = new Compute.Models.ImageStorageProfile()
                {
                    OsDisk = new Compute.Models.ImageOSDisk(Compute.Models.OperatingSystemTypes.Linux, Compute.Models.OperatingSystemStateTypes.Generalized)
                    {
                        BlobUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                        DiskEncryptionSet = new WritableSubResource()
                        {
                            Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{{existing-diskEncryptionSet-name}}"),
                        },
                    },
                },
            };

            return await collection.CreateOrUpdateAsync(imageName, parameters);
        }

        public static async Task<Response<Compute.Image>> GetExampleInstanceAsync(ImageCollection collection, string imageName)
        {
            // Example: Get information about a virtual machine image.
            string expand = null;

            return await collection.GetAsync(imageName, expand);
        }

        public static AsyncPageable<Compute.Image> GetAllExampleInstanceAsync(ImageCollection collection)
        {
            // Example: List all virtual machine images in a resource group.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.RestorePointCollectionCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(RestorePointGroupCollection collection, string restorePointCollectionName)
        {
            // Example: Create or update a restore point collection.
            Compute.RestorePointGroupData parameters = new Compute.RestorePointGroupData("norwayeast")
            {
                Source = new Compute.Models.RestorePointCollectionSourceProperties()
                {
                    Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
                },
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { { "myTag1", "tagValue1" }, });
            return await collection.CreateOrUpdateAsync(restorePointCollectionName, parameters);
        }

        public static async Task<Response<Compute.RestorePointGroup>> GetExampleInstanceAsync(RestorePointGroupCollection collection, string restorePointCollectionName)
        {
            // Example: Get a restore point collection (but not the restore points contained in the restore point collection)
            Compute.Models.RestorePointCollectionExpandOptions? expand = null;

            return await collection.GetAsync(restorePointCollectionName, expand);
        }

        public static AsyncPageable<Compute.RestorePointGroup> GetAllExampleInstanceAsync(RestorePointGroupCollection collection)
        {
            // Example: Gets the list of restore point collections in a resource group.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.RestorePointCreateOperation> CreateOrUpdateExampleInstanceAsync(RestorePointCollection collection, string restorePointName)
        {
            // Example: Create a restore point
            Compute.RestorePointData parameters = new Compute.RestorePointData();

            return await collection.CreateOrUpdateAsync(restorePointName, parameters);
        }

        public static async Task<Response<Compute.RestorePoint>> GetExampleInstanceAsync(RestorePointCollection collection, string restorePointName)
        {
            // Example: Get a restore point

            return await collection.GetAsync(restorePointName);
        }

        public static async Task<Compute.Models.VirtualMachineScaleSetVMExtensionCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(VirtualMachineScaleSetVMExtensionCollection collection, string vmExtensionName)
        {
            // Example: Create VirtualMachineScaleSet VM extension.
            Compute.VirtualMachineScaleSetVMExtensionData extensionParameters = new Compute.VirtualMachineScaleSetVMExtensionData()
            {
                Publisher = "extPublisher",
                TypePropertiesType = "extType",
                TypeHandlerVersion = "1.2",
                AutoUpgradeMinorVersion = true,
                Settings = JsonSerializer.Deserialize<object>("{\"UserName\":\"xyz@microsoft.com\"}"),
            };

            return await collection.CreateOrUpdateAsync(vmExtensionName, extensionParameters);
        }

        public static async Task<Response<Compute.VirtualMachineScaleSetVMExtension>> GetExampleInstanceAsync(VirtualMachineScaleSetVMExtensionCollection collection, string vmExtensionName)
        {
            // Example: Get VirtualMachineScaleSet VM extension.
            string expand = null;

            return await collection.GetAsync(vmExtensionName, expand);
        }

        public static async Task<Response<IReadOnlyList<Compute.VirtualMachineScaleSetVMExtension>>> GetAllExampleInstanceAsync(VirtualMachineScaleSetVMExtensionCollection collection)
        {
            // Example: List extensions in Vmss instance.
            string expand = null;

            return await collection.GetAllAsync(expand);
        }

        public static async Task<Response<Compute.VirtualMachineScaleSetVM>> GetExampleInstanceAsync(VirtualMachineScaleSetVMCollection collection, string instanceId)
        {
            // Example: Get VM scale set VM with UserData
            Compute.Models.InstanceViewTypes? expand = null;

            return await collection.GetAsync(instanceId, expand);
        }

        public static async Task<Compute.Models.VirtualMachineRunCommandCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(VirtualMachineRunCommandCollection collection, string runCommandName)
        {
            // Example: Create or update a run command.
            Compute.VirtualMachineRunCommandData runCommand = new Compute.VirtualMachineRunCommandData("West US")
            {
                Source = new Compute.Models.VirtualMachineRunCommandScriptSource()
                {
                    Script = "Write-Host Hello World!",
                },
                AsyncExecution = false,
                RunAsUser = "user1",
                RunAsPassword = "<runAsPassword>",
                TimeoutInSeconds = 3600,
            };

            return await collection.CreateOrUpdateAsync(runCommandName, runCommand);
        }

        public static async Task<Response<Compute.VirtualMachineRunCommand>> GetExampleInstanceAsync(VirtualMachineRunCommandCollection collection, string runCommandName)
        {
            // Example: Get a run command.
            string expand = null;

            return await collection.GetAsync(runCommandName, expand);
        }

        public static AsyncPageable<Compute.VirtualMachineRunCommand> GetAllExampleInstanceAsync(VirtualMachineRunCommandCollection collection)
        {
            // Example: List run commands in a Virtual Machine.
            string expand = null;

            return collection.GetAllAsync(expand);
        }

        public static async Task<Compute.Models.VirtualMachineScaleSetVMRunCommandCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(VirtualMachineScaleSetVirtualMachineRunCommandCollection collection, string runCommandName)
        {
            // Example: Create VirtualMachineScaleSet VM run command.
            Compute.VirtualMachineRunCommandData runCommand = new Compute.VirtualMachineRunCommandData("West US")
            {
                Source = new Compute.Models.VirtualMachineRunCommandScriptSource()
                {
                    Script = "Write-Host Hello World!",
                },
                AsyncExecution = false,
                RunAsUser = "user1",
                RunAsPassword = "<runAsPassword>",
                TimeoutInSeconds = 3600,
            };

            return await collection.CreateOrUpdateAsync(runCommandName, runCommand);
        }

        public static async Task<Response<Compute.VirtualMachineScaleSetVirtualMachineRunCommand>> GetExampleInstanceAsync(VirtualMachineScaleSetVirtualMachineRunCommandCollection collection, string runCommandName)
        {
            // Example: Get VirtualMachineScaleSet VM run commands.
            string expand = null;

            return await collection.GetAsync(runCommandName, expand);
        }

        public static AsyncPageable<Compute.VirtualMachineScaleSetVirtualMachineRunCommand> GetAllExampleInstanceAsync(VirtualMachineScaleSetVirtualMachineRunCommandCollection collection)
        {
            // Example: List run commands in Vmss instance.
            string expand = null;

            return collection.GetAllAsync(expand);
        }

        public static async Task<Compute.Models.DiskCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(DiskCollection collection, string diskName)
        {
            // Example: Create a managed disk and associate with disk access resource.
            Compute.DiskData disk = new Compute.DiskData("West US")
            {
                CreationData = new Compute.Models.CreationData(new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
                NetworkAccessPolicy = new Compute.Models.NetworkAccessPolicy("AllowPrivate"),
                DiskAccessId = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}",
            };

            return await collection.CreateOrUpdateAsync(diskName, disk);
        }

        public static async Task<Response<Compute.Disk>> GetExampleInstanceAsync(DiskCollection collection, string diskName)
        {
            // Example: Get information about a managed disk.

            return await collection.GetAsync(diskName);
        }

        public static AsyncPageable<Compute.Disk> GetAllExampleInstanceAsync(DiskCollection collection)
        {
            // Example: List all managed disks in a resource group.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.SnapshotCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(SnapshotCollection collection, string snapshotName)
        {
            // Example: Create a snapshot by importing an unmanaged blob from a different subscription.
            Compute.SnapshotData snapshot = new Compute.SnapshotData("West US")
            {
                CreationData = new Compute.Models.CreationData(new Compute.Models.DiskCreateOption("Import"))
                {
                    StorageAccountId = "subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount",
                    SourceUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                },
            };

            return await collection.CreateOrUpdateAsync(snapshotName, snapshot);
        }

        public static async Task<Response<Compute.Snapshot>> GetExampleInstanceAsync(SnapshotCollection collection, string snapshotName)
        {
            // Example: Get information about a snapshot.

            return await collection.GetAsync(snapshotName);
        }

        public static AsyncPageable<Compute.Snapshot> GetAllExampleInstanceAsync(SnapshotCollection collection)
        {
            // Example: List all snapshots in a resource group.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.DiskEncryptionSetCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(DiskEncryptionSetCollection collection, string diskEncryptionSetName)
        {
            // Example: Create a disk encryption set with key vault from a different subscription.
            Compute.DiskEncryptionSetData diskEncryptionSet = new Compute.DiskEncryptionSetData("West US")
            {
                Identity = new Compute.Models.EncryptionSetIdentity()
                {
                    Type = new Compute.Models.DiskEncryptionSetIdentityType("SystemAssigned"),
                },
                EncryptionType = new Compute.Models.DiskEncryptionSetType("EncryptionAtRestWithCustomerKey"),
                ActiveKey = new Compute.Models.KeyForDiskEncryptionSet("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
            };

            return await collection.CreateOrUpdateAsync(diskEncryptionSetName, diskEncryptionSet);
        }

        public static async Task<Response<Compute.DiskEncryptionSet>> GetExampleInstanceAsync(DiskEncryptionSetCollection collection, string diskEncryptionSetName)
        {
            // Example: Get information about a disk encryption set.

            return await collection.GetAsync(diskEncryptionSetName);
        }

        public static AsyncPageable<Compute.DiskEncryptionSet> GetAllExampleInstanceAsync(DiskEncryptionSetCollection collection)
        {
            // Example: List all disk encryption sets in a resource group.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.DiskAccessCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(DiskAccessCollection collection, string diskAccessName)
        {
            // Example: Create a disk access resource.
            Compute.DiskAccessData diskAccess = new Compute.DiskAccessData("West US");

            return await collection.CreateOrUpdateAsync(diskAccessName, diskAccess);
        }

        public static async Task<Response<Compute.DiskAccess>> GetExampleInstanceAsync(DiskAccessCollection collection, string diskAccessName)
        {
            // Example: Get information about a disk access resource with private endpoints.

            return await collection.GetAsync(diskAccessName);
        }

        public static AsyncPageable<Compute.DiskAccess> GetAllExampleInstanceAsync(DiskAccessCollection collection)
        {
            // Example: List all disk access resources in a resource group.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.DiskAccessUpdateAPrivateEndpointConnectionOperation> CreateOrUpdateExampleInstanceAsync(PrivateEndpointConnectionCollection collection, string privateEndpointConnectionName)
        {
            // Example: Approve a Private Endpoint Connection under a disk access resource.
            Compute.PrivateEndpointConnectionData privateEndpointConnection = new Compute.PrivateEndpointConnectionData()
            {
                PrivateLinkServiceConnectionState = new Compute.Models.PrivateLinkServiceConnectionState()
                {
                    Status = new Compute.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "Approving myPrivateEndpointConnection",
                },
            };

            return await collection.CreateOrUpdateAsync(privateEndpointConnectionName, privateEndpointConnection);
        }

        public static async Task<Response<Compute.PrivateEndpointConnection>> GetExampleInstanceAsync(PrivateEndpointConnectionCollection collection, string privateEndpointConnectionName)
        {
            // Example: Get information about a private endpoint connection under a disk access resource.

            return await collection.GetAsync(privateEndpointConnectionName);
        }

        public static AsyncPageable<Compute.PrivateEndpointConnection> GetAllExampleInstanceAsync(PrivateEndpointConnectionCollection collection)
        {
            // Example: Get information about a private endpoint connection under a disk access resource.

            return collection.GetAllAsync();
        }

        public static async Task<Response<Compute.DiskRestorePoint>> GetExampleInstanceAsync(DiskRestorePointCollection collection, string diskRestorePointName)
        {
            // Example: Get an incremental disk restorePoint resource.

            return await collection.GetAsync(diskRestorePointName);
        }

        public static AsyncPageable<Compute.DiskRestorePoint> GetAllExampleInstanceAsync(DiskRestorePointCollection collection)
        {
            // Example: Get an incremental disk restorePoint resource.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.GalleryCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(GalleryCollection collection, string galleryName)
        {
            // Example: Create or update a simple gallery with sharing profile.
            Compute.GalleryData gallery = new Compute.GalleryData("West US")
            {
                Description = "This is the gallery description.",
                SharingProfile = new Compute.Models.SharingProfile()
                {
                    Permissions = new Compute.Models.GallerySharingPermissionTypes("Groups"),
                },
            };

            return await collection.CreateOrUpdateAsync(galleryName, gallery);
        }

        public static async Task<Response<Compute.Gallery>> GetExampleInstanceAsync(GalleryCollection collection, string galleryName)
        {
            // Example: Get a gallery with select permissions.
            Compute.Models.SelectPermissions? select = new Compute.Models.SelectPermissions("Permissions");

            return await collection.GetAsync(galleryName, select);
        }

        public static AsyncPageable<Compute.Gallery> GetAllExampleInstanceAsync(GalleryCollection collection)
        {
            // Example: List galleries in a resource group.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.GalleryImageCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(GalleryImageCollection collection, string galleryImageName)
        {
            // Example: Create or update a simple gallery image.
            Compute.GalleryImageData galleryImage = new Compute.GalleryImageData("West US")
            {
                OsType = Compute.Models.OperatingSystemTypes.Windows,
                OsState = Compute.Models.OperatingSystemStateTypes.Generalized,
                HyperVGeneration = new Compute.Models.HyperVGeneration("V1"),
                Identifier = new Compute.Models.GalleryImageIdentifier("myPublisherName", "myOfferName", "mySkuName"),
            };

            return await collection.CreateOrUpdateAsync(galleryImageName, galleryImage);
        }

        public static async Task<Response<Compute.GalleryImage>> GetExampleInstanceAsync(GalleryImageCollection collection, string galleryImageName)
        {
            // Example: Get a gallery image.

            return await collection.GetAsync(galleryImageName);
        }

        public static AsyncPageable<Compute.GalleryImage> GetAllExampleInstanceAsync(GalleryImageCollection collection)
        {
            // Example: List gallery images in a gallery.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.GalleryImageVersionCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(GalleryImageVersionCollection collection, string galleryImageVersionName)
        {
            // Example: Create or update a simple Gallery Image Version using VM as source.
            Compute.GalleryImageVersionData galleryImageVersion = new Compute.GalleryImageVersionData("West US")
            {
                PublishingProfile = new Compute.Models.GalleryImageVersionPublishingProfile(),
                StorageProfile = new Compute.Models.GalleryImageVersionStorageProfile()
                {
                    Source = new Compute.Models.GalleryArtifactVersionSource()
                    {
                        Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/{vmName}",
                    },
                },
            };

            return await collection.CreateOrUpdateAsync(galleryImageVersionName, galleryImageVersion);
        }

        public static async Task<Response<Compute.GalleryImageVersion>> GetExampleInstanceAsync(GalleryImageVersionCollection collection, string galleryImageVersionName)
        {
            // Example: Get a gallery image version with replication status.
            Compute.Models.ReplicationStatusTypes? expand = new Compute.Models.ReplicationStatusTypes("ReplicationStatus");

            return await collection.GetAsync(galleryImageVersionName, expand);
        }

        public static AsyncPageable<Compute.GalleryImageVersion> GetAllExampleInstanceAsync(GalleryImageVersionCollection collection)
        {
            // Example: List gallery image versions in a gallery image definition.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.GalleryApplicationCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(GalleryApplicationCollection collection, string galleryApplicationName)
        {
            // Example: Create or update a simple gallery Application.
            Compute.GalleryApplicationData galleryApplication = new Compute.GalleryApplicationData("West US")
            {
                Description = "This is the gallery application description.",
                Eula = "This is the gallery application EULA.",
                PrivacyStatementUri = "myPrivacyStatementUri}",
                ReleaseNoteUri = "myReleaseNoteUri",
                SupportedOSType = Compute.Models.OperatingSystemTypes.Windows,
            };

            return await collection.CreateOrUpdateAsync(galleryApplicationName, galleryApplication);
        }

        public static async Task<Response<Compute.GalleryApplication>> GetExampleInstanceAsync(GalleryApplicationCollection collection, string galleryApplicationName)
        {
            // Example: Get a gallery Application.

            return await collection.GetAsync(galleryApplicationName);
        }

        public static AsyncPageable<Compute.GalleryApplication> GetAllExampleInstanceAsync(GalleryApplicationCollection collection)
        {
            // Example: List gallery Applications in a gallery.

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.GalleryApplicationVersionCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(GalleryApplicationVersionCollection collection, string galleryApplicationVersionName)
        {
            // Example: Create or update a simple gallery Application Version.
            Compute.GalleryApplicationVersionData galleryApplicationVersion = new Compute.GalleryApplicationVersionData("West US")
            {
                PublishingProfile = new Compute.Models.GalleryApplicationVersionPublishingProfile(new Compute.Models.UserArtifactSource("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"))
                {
                    ManageActions = new Compute.Models.UserArtifactManage("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\"", "del C:\\package "),
                    ReplicaCount = 1,
                    EndOfLifeDate = DateTimeOffset.Parse("2019-07-01T07:00:00Z"),
                    StorageAccountType = new Compute.Models.StorageAccountType("Standard_LRS"),
                },
            };

            return await collection.CreateOrUpdateAsync(galleryApplicationVersionName, galleryApplicationVersion);
        }

        public static async Task<Response<Compute.GalleryApplicationVersion>> GetExampleInstanceAsync(GalleryApplicationVersionCollection collection, string galleryApplicationVersionName)
        {
            // Example: Get a gallery Application Version with replication status.
            Compute.Models.ReplicationStatusTypes? expand = new Compute.Models.ReplicationStatusTypes("ReplicationStatus");

            return await collection.GetAsync(galleryApplicationVersionName, expand);
        }

        public static AsyncPageable<Compute.GalleryApplicationVersion> GetAllExampleInstanceAsync(GalleryApplicationVersionCollection collection)
        {
            // Example: List gallery Application Versions in a gallery Application Definition.

            return collection.GetAllAsync();
        }

        public static async Task<Response<Compute.RoleInstance>> GetExampleInstanceAsync(RoleInstanceCollection collection, string roleInstanceName)
        {
            // Example: Get Cloud Service Role Instance
            Compute.Models.InstanceViewTypes? expand = null;

            return await collection.GetAsync(roleInstanceName, expand);
        }

        public static AsyncPageable<Compute.RoleInstance> GetAllExampleInstanceAsync(RoleInstanceCollection collection)
        {
            // Example: List Role Instances in a Cloud Service
            Compute.Models.InstanceViewTypes? expand = null;

            return collection.GetAllAsync(expand);
        }

        public static async Task<Response<Compute.CloudServiceRole>> GetExampleInstanceAsync(CloudServiceRoleCollection collection, string roleName)
        {
            // Example: Get Cloud Service Role

            return await collection.GetAsync(roleName);
        }

        public static AsyncPageable<Compute.CloudServiceRole> GetAllExampleInstanceAsync(CloudServiceRoleCollection collection)
        {
            // Example: List Roles in a Cloud Service

            return collection.GetAllAsync();
        }

        public static async Task<Compute.Models.CloudServiceCreateOrUpdateOperation> CreateOrUpdateExampleInstanceAsync(CloudServiceCollection collection, string cloudServiceName)
        {
            // Example: Create New Cloud Service with Multiple Roles
            Compute.CloudServiceData parameters = new Compute.CloudServiceData("westus")
            {
                Properties = new Compute.Models.CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new Compute.Models.CloudServiceRoleProfile(),
                    NetworkProfile = new Compute.Models.CloudServiceNetworkProfile(),
                },
            };

            return await collection.CreateOrUpdateAsync(cloudServiceName, parameters);
        }

        public static async Task<Response<Compute.CloudService>> GetExampleInstanceAsync(CloudServiceCollection collection, string cloudServiceName)
        {
            // Example: Get Cloud Service with Multiple Roles and RDP Extension

            return await collection.GetAsync(cloudServiceName);
        }

        public static AsyncPageable<Compute.CloudService> GetAllExampleInstanceAsync(CloudServiceCollection collection)
        {
            // Example: List Cloud Services in a Resource Group

            return collection.GetAllAsync();
        }

        public static async Task<Response<Compute.OSVersion>> GetExampleInstanceAsync(OSVersionCollection collection, string location, string osVersionName)
        {
            // Example: Get Cloud Service OS Version

            return await collection.GetAsync(location, osVersionName);
        }

        public static AsyncPageable<Compute.OSVersion> GetAllExampleInstanceAsync(OSVersionCollection collection, string location)
        {
            // Example: List Cloud Service OS Versions in a subscription

            return collection.GetAllAsync(location);
        }

        public static async Task<Response<Compute.OSFamily>> GetExampleInstanceAsync(OSFamilyCollection collection, string location, string osFamilyName)
        {
            // Example: Get Cloud Service OS Family

            return await collection.GetAsync(location, osFamilyName);
        }

        public static AsyncPageable<Compute.OSFamily> GetAllExampleInstanceAsync(OSFamilyCollection collection, string location)
        {
            // Example: List Cloud Service OS Families in a subscription

            return collection.GetAllAsync(location);
        }

        public static async Task<ResourceGroup> CreateResourceGroupAsync(string resourceGroupName, ArmClient client)
        {
            var defaultSubscription = await client.GetDefaultSubscriptionAsync();
            var rgop = await defaultSubscription.GetResourceGroups().CreateOrUpdateAsync
            (
            resourceGroupName,
            new ResourceGroupData(defaultSubscription.ToString()) { Tags = { { "test", "env" } } }
            );
            return rgop.Value;
        }

        public static IDictionary<string, string> ReplaceWith(this IDictionary<string, string> dest, IDictionary<string, string> src)
        {
            dest.Clear();
            foreach (var kv in src)
            {
                dest.Add(kv);
            }
            return dest;
        }
    }
}
