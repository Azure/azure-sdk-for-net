// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Image. </summary>
    public partial class ImageCollectionMockTests : MockTestBase
    {
        public ImageCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.ImageCollection> GetImageCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ImageCollection imageCollection = resourceGroup.GetImages();
            return imageCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a virtual machine image from a blob with DiskEncryptionSet resource.
            var collection = await GetImageCollectionAsync("myResourceGroup");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "myImage");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create a virtual machine image from a blob.
            var collection = await GetImageCollectionAsync("myResourceGroup");
            string imageName = "myImage";
            Compute.ImageData parameters = new Compute.ImageData("West US")
            {
                StorageProfile = new Compute.Models.ImageStorageProfile()
                {
                    OsDisk = new Compute.Models.ImageOSDisk(Compute.Models.OperatingSystemTypes.Linux, Compute.Models.OperatingSystemStateTypes.Generalized)
                    {
                        BlobUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                    },
                    ZoneResilient = true,
                },
            };

            await collection.CreateOrUpdateAsync(imageName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Create a virtual machine image from an existing virtual machine.
            var collection = await GetImageCollectionAsync("myResourceGroup");
            string imageName = "myImage";
            Compute.ImageData parameters = new Compute.ImageData("West US")
            {
                SourceVirtualMachine = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
                },
            };

            await collection.CreateOrUpdateAsync(imageName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync4()
        {
            // Example: Create a virtual machine image that includes a data disk from a blob.
            var collection = await GetImageCollectionAsync("myResourceGroup");
            string imageName = "myImage";
            Compute.ImageData parameters = new Compute.ImageData("West US")
            {
                StorageProfile = new Compute.Models.ImageStorageProfile()
                {
                    OsDisk = new Compute.Models.ImageOSDisk(Compute.Models.OperatingSystemTypes.Linux, Compute.Models.OperatingSystemStateTypes.Generalized)
                    {
                        BlobUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                    },
                    ZoneResilient = false,
                },
            };

            await collection.CreateOrUpdateAsync(imageName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get information about a virtual machine image.
            var collection = await GetImageCollectionAsync("myResourceGroup");
            await TestHelper.GetExampleInstanceAsync(collection, "myImage");
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: List all virtual machine images in a resource group.
            var collection = await GetImageCollectionAsync("myResourceGroup");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
