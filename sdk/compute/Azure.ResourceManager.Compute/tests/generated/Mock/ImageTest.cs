// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Image. </summary>
    public partial class ImageMockTests : MockTestBase
    {
        public ImageMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.ImageCollection> GetImageCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ImageCollection imageCollection = resourceGroup.GetImages();
            return imageCollection;
        }

        private async Task<Compute.Image> GetImageAsync()
        {
            var collection = await GetImageCollectionAsync("myResourceGroup");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "myImage");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get information about a virtual machine image.
            var image = await GetImageAsync();
            string expand = null;

            await image.GetAsync(expand);
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Updates tags of an Image.
            var image = await GetImageAsync();
            Compute.Models.ImageUpdate parameters = new Compute.Models.ImageUpdate()
            {
                SourceVirtualMachine = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
                },
                HyperVGeneration = new Compute.Models.HyperVGenerationTypes("V1"),
            };

            await image.UpdateAsync(parameters);
        }
    }
}
