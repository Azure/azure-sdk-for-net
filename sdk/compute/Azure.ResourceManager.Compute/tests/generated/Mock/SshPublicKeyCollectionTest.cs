// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for SshPublicKey. </summary>
    public partial class SshPublicKeyCollectionMockTests : MockTestBase
    {
        public SshPublicKeyCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.SshPublicKeyCollection> GetSshPublicKeyCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            SshPublicKeyCollection sshPublicKeyCollection = resourceGroup.GetSshPublicKeys();
            return sshPublicKeyCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a new SSH public key resource.
            var collection = await GetSshPublicKeyCollectionAsync("myResourceGroup");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "mySshPublicKeyName");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get an ssh public key.
            var collection = await GetSshPublicKeyCollectionAsync("myResourceGroup");
            await TestHelper.GetExampleInstanceAsync(collection, "mySshPublicKeyName");
        }
    }
}
