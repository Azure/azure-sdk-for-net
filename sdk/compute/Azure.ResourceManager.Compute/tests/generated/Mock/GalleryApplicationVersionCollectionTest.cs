// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for GalleryApplicationVersion. </summary>
    public partial class GalleryApplicationVersionCollectionMockTests : MockTestBase
    {
        public GalleryApplicationVersionCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.GalleryApplicationVersionCollection> GetGalleryApplicationVersionCollectionAsync(string resourceGroupName, string galleryName, string galleryApplicationName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            GalleryCollection galleryCollection = resourceGroup.GetGalleries();
            var galleryOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(galleryCollection, galleryName);
            Gallery gallery = galleryOperation.Value;
            GalleryApplicationCollection galleryApplicationCollection = gallery.GetGalleryApplications();
            var galleryApplicationOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(galleryApplicationCollection, galleryApplicationName);
            GalleryApplication galleryApplication = galleryApplicationOperation.Value;
            GalleryApplicationVersionCollection galleryApplicationVersionCollection = galleryApplication.GetGalleryApplicationVersions();
            return galleryApplicationVersionCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update a simple gallery Application Version.
            var collection = await GetGalleryApplicationVersionCollectionAsync("myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "1.0.0");
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a gallery Application Version with replication status.
            var collection = await GetGalleryApplicationVersionCollectionAsync("myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            await TestHelper.GetExampleInstanceAsync(collection, "1.0.0");
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get a gallery Application Version.
            var collection = await GetGalleryApplicationVersionCollectionAsync("myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            string galleryApplicationVersionName = "1.0.0";
            Compute.Models.ReplicationStatusTypes? expand = null;

            await collection.GetAsync(galleryApplicationVersionName, expand);
        }

        [RecordedTest]
        public async Task GetAllAsync()
        {
            // Example: List gallery Application Versions in a gallery Application Definition.
            var collection = await GetGalleryApplicationVersionCollectionAsync("myResourceGroup", "myGalleryName", "myGalleryApplicationName");
            TestHelper.GetAllExampleInstanceAsync(collection).AsPages();
        }
    }
}
