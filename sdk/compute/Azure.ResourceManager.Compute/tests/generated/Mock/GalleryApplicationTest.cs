// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for GalleryApplication. </summary>
    public partial class GalleryApplicationMockTests : MockTestBase
    {
        public GalleryApplicationMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.GalleryApplicationCollection> GetGalleryApplicationCollectionAsync(string resourceGroupName, string galleryName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            GalleryCollection galleryCollection = resourceGroup.GetGalleries();
            var galleryOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(galleryCollection, galleryName);
            Gallery gallery = galleryOperation.Value;
            GalleryApplicationCollection galleryApplicationCollection = gallery.GetGalleryApplications();
            return galleryApplicationCollection;
        }

        private async Task<Compute.GalleryApplication> GetGalleryApplicationAsync()
        {
            var collection = await GetGalleryApplicationCollectionAsync("myResourceGroup", "myGalleryName");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "myGalleryApplicationName");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a gallery Application.
            var galleryApplication = await GetGalleryApplicationAsync();

            await galleryApplication.GetAsync();
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete a gallery Application.
            var galleryApplication = await GetGalleryApplicationAsync();

            await galleryApplication.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update a simple gallery Application.
            var galleryApplication = await GetGalleryApplicationAsync();
            Compute.Models.GalleryApplicationUpdate galleryApplication2 = new Compute.Models.GalleryApplicationUpdate()
            {
                Description = "This is the gallery application description.",
                Eula = "This is the gallery application EULA.",
                PrivacyStatementUri = "myPrivacyStatementUri}",
                ReleaseNoteUri = "myReleaseNoteUri",
                SupportedOSType = Compute.Models.OperatingSystemTypes.Windows,
            };

            await galleryApplication.UpdateAsync(galleryApplication2);
        }
    }
}
