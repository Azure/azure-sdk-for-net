// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for AvailabilitySet. </summary>
    public partial class AvailabilitySetMockTests : MockTestBase
    {
        public AvailabilitySetMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.AvailabilitySetCollection> GetAvailabilitySetCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            AvailabilitySetCollection availabilitySetCollection = resourceGroup.GetAvailabilitySets();
            return availabilitySetCollection;
        }

        private async Task<Compute.AvailabilitySet> GetAvailabilitySetAsync()
        {
            var collection = await GetAvailabilitySetCollectionAsync("myResourceGroup");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "myAvailabilitySet");
            return createOperation.Value;
        }
    }
}
