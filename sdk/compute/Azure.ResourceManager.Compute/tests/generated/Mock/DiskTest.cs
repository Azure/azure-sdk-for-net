// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Disk. </summary>
    public partial class DiskMockTests : MockTestBase
    {
        public DiskMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.DiskCollection> GetDiskCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            DiskCollection diskCollection = resourceGroup.GetDisks();
            return diskCollection;
        }

        private async Task<Compute.Disk> GetDiskAsync()
        {
            var collection = await GetDiskCollectionAsync("myResourceGroup");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "myDisk");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get information about a managed disk.
            var disk = await GetDiskAsync();

            await disk.GetAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Create or update a bursting enabled managed disk.
            var disk = await GetDiskAsync();
            Compute.Models.DiskUpdate disk2 = new Compute.Models.DiskUpdate()
            {
                DiskSizeGB = 1024,
                BurstingEnabled = true,
            };

            await disk.UpdateAsync(disk2);
        }

        [RecordedTest]
        public async Task UpdateAsync2()
        {
            // Example: Update a managed disk to add purchase plan.
            var disk = await GetDiskAsync();
            Compute.Models.DiskUpdate disk2 = new Compute.Models.DiskUpdate()
            {
                PurchasePlan = new Compute.Models.PurchasePlanAutoGenerated("myPurchasePlanName", "myPurchasePlanPublisher", "myPurchasePlanProduct")
                {
                    PromotionCode = "myPurchasePlanPromotionCode",
                },
            };

            await disk.UpdateAsync(disk2);
        }

        [RecordedTest]
        public async Task UpdateAsync3()
        {
            // Example: Update a managed disk to add supportsHibernation.
            var disk = await GetDiskAsync();
            Compute.Models.DiskUpdate disk2 = new Compute.Models.DiskUpdate()
            {
                SupportsHibernation = true,
            };

            await disk.UpdateAsync(disk2);
        }

        [RecordedTest]
        public async Task UpdateAsync4()
        {
            // Example: Update a managed disk to change tier.
            var disk = await GetDiskAsync();
            Compute.Models.DiskUpdate disk2 = new Compute.Models.DiskUpdate()
            {
                Tier = "P30",
            };

            await disk.UpdateAsync(disk2);
        }

        [RecordedTest]
        public async Task UpdateAsync5()
        {
            // Example: Update a managed disk to disable bursting.
            var disk = await GetDiskAsync();
            Compute.Models.DiskUpdate disk2 = new Compute.Models.DiskUpdate()
            {
                BurstingEnabled = false,
            };

            await disk.UpdateAsync(disk2);
        }

        [RecordedTest]
        public async Task UpdateAsync6()
        {
            // Example: Update managed disk to remove disk access resource association.
            var disk = await GetDiskAsync();
            Compute.Models.DiskUpdate disk2 = new Compute.Models.DiskUpdate()
            {
                NetworkAccessPolicy = new Compute.Models.NetworkAccessPolicy("AllowAll"),
            };

            await disk.UpdateAsync(disk2);
        }
    }
}
