// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for VirtualMachineScaleSet. </summary>
    public partial class VirtualMachineScaleSetCollectionMockTests : MockTestBase
    {
        public VirtualMachineScaleSetCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.VirtualMachineScaleSetCollection> GetVirtualMachineScaleSetCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            VirtualMachineScaleSetCollection virtualMachineScaleSetCollection = resourceGroup.GetVirtualMachineScaleSets();
            return virtualMachineScaleSetCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a custom-image scale set from an unmanaged generalized os image.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "{vmss-name}");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create a platform-image scale set with unmanaged os disks.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Name = "osDisk",
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Create a scale set from a custom image.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync4()
        {
            // Example: Create a scale set from a generalized shared image.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync5()
        {
            // Example: Create a scale set from a specialized shared image.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync6()
        {
            // Example: Create a scale set with DiskEncryptionSet resource in os disk and data disk.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_DS1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                                DiskEncryptionSet = new WritableSubResource()
                                {
                                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{{existing-diskEncryptionSet-name}}"),
                                },
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync7()
        {
            // Example: Create a scale set with Fpga Network Interfaces.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync8()
        {
            // Example: Create a scale set with Host Encryption using encryptionAtHost property.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_DS1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "microsoft-ads",
                            Offer = "windows-data-science-vm",
                            Sku = "windows2016",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadOnly,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                    SecurityProfile = new Compute.Models.SecurityProfile()
                    {
                        EncryptionAtHost = true,
                    },
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync9()
        {
            // Example: Create a scale set with Uefi Settings of secureBoot and vTPM.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D2s_v3",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "windowsserver-gen2preview-preview",
                            Sku = "windows10-tvm",
                            Version = "18363.592.2001092016",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadOnly,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("StandardSSD_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                    SecurityProfile = new Compute.Models.SecurityProfile()
                    {
                        UefiSettings = new Compute.Models.UefiSettings()
                        {
                            SecureBootEnabled = true,
                            VTpmEnabled = true,
                        },
                        SecurityType = new Compute.Models.SecurityTypes("TrustedLaunch"),
                    },
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync10()
        {
            // Example: Create a scale set with a marketplace image plan.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "microsoft-ads",
                            Offer = "windows-data-science-vm",
                            Sku = "windows2016",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync11()
        {
            // Example: Create a scale set with an azure application gateway.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync12()
        {
            // Example: Create a scale set with an azure load balancer.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync13()
        {
            // Example: Create a scale set with automatic repairs enabled
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                AutomaticRepairsPolicy = new Compute.Models.AutomaticRepairsPolicy()
                {
                    Enabled = true,
                    GracePeriod = "PT30M",
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync14()
        {
            // Example: Create a scale set with boot diagnostics.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                    DiagnosticsProfile = new Compute.Models.DiagnosticsProfile()
                    {
                        BootDiagnostics = new Compute.Models.BootDiagnostics()
                        {
                            Enabled = true,
                            StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
                        },
                    },
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync15()
        {
            // Example: Create a scale set with empty data disks on each vm.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D2_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            DiskSizeGB = 512,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync16()
        {
            // Example: Create a scale set with ephemeral os disks using placement property.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_DS1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "microsoft-ads",
                            Offer = "windows-data-science-vm",
                            Sku = "windows2016",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadOnly,
                            DiffDiskSettings = new Compute.Models.DiffDiskSettings()
                            {
                                Option = new Compute.Models.DiffDiskOptions("Local"),
                                Placement = new Compute.Models.DiffDiskPlacement("ResourceDisk"),
                            },
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync17()
        {
            // Example: Create a scale set with ephemeral os disks.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_DS1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "microsoft-ads",
                            Offer = "windows-data-science-vm",
                            Sku = "windows2016",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadOnly,
                            DiffDiskSettings = new Compute.Models.DiffDiskSettings()
                            {
                                Option = new Compute.Models.DiffDiskOptions("Local"),
                            },
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync18()
        {
            // Example: Create a scale set with extension time budget.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                    DiagnosticsProfile = new Compute.Models.DiagnosticsProfile()
                    {
                        BootDiagnostics = new Compute.Models.BootDiagnostics()
                        {
                            Enabled = true,
                            StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
                        },
                    },
                    ExtensionProfile = new Compute.Models.VirtualMachineScaleSetExtensionProfile()
                    {
                        ExtensionsTimeBudget = "PT1H20M",
                    },
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync19()
        {
            // Example: Create a scale set with managed boot diagnostics.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                    DiagnosticsProfile = new Compute.Models.DiagnosticsProfile()
                    {
                        BootDiagnostics = new Compute.Models.BootDiagnostics()
                        {
                            Enabled = true,
                        },
                    },
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync20()
        {
            // Example: Create a scale set with password authentication.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync21()
        {
            // Example: Create a scale set with premium storage.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync22()
        {
            // Example: Create a scale set with ssh authentication.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        LinuxConfiguration = new Compute.Models.LinuxConfiguration()
                        {
                            DisablePasswordAuthentication = true,
                            Ssh = new Compute.Models.SshConfiguration(),
                        },
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync23()
        {
            // Example: Create a scale set with terminate scheduled events enabled.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                    ScheduledEventsProfile = new Compute.Models.ScheduledEventsProfile()
                    {
                        TerminateNotificationProfile = new Compute.Models.TerminateNotificationProfile()
                        {
                            NotBeforeTimeout = "PT5M",
                            Enable = true,
                        },
                    },
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync24()
        {
            // Example: Create a scale set with userData.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("westus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Manual,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                    UserData = "RXhhbXBsZSBVc2VyRGF0YQ==",
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync25()
        {
            // Example: Create a scale set with virtual machines in different zones.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "{vmss-name}";
            Compute.VirtualMachineScaleSetData parameters = new Compute.VirtualMachineScaleSetData("centralus")
            {
                Sku = new Compute.Models.Sku()
                {
                    Name = "Standard_A1_v2",
                    Tier = "Standard",
                    Capacity = 2,
                },
                UpgradePolicy = new Compute.Models.UpgradePolicy()
                {
                    Mode = Compute.Models.UpgradeMode.Automatic,
                },
                VirtualMachineProfile = new Compute.Models.VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new Compute.Models.VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new Compute.Models.VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new Compute.Models.ImageReference()
                        {
                            Publisher = "MicrosoftWindowsServer",
                            Offer = "WindowsServer",
                            Sku = "2016-Datacenter",
                            Version = "latest",
                        },
                        OsDisk = new Compute.Models.VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Caching = Compute.Models.CachingTypes.ReadWrite,
                            DiskSizeGB = 512,
                            ManagedDisk = new Compute.Models.VirtualMachineScaleSetManagedDiskParameters()
                            {
                                StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            },
                        },
                    },
                    NetworkProfile = new Compute.Models.VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            await collection.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a virtual machine scale set placed on a dedicated host group through automatic placement.
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            await TestHelper.GetExampleInstanceAsync(collection, "myVirtualMachineScaleSet");
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get a virtual machine scale set with UserData
            var collection = await GetVirtualMachineScaleSetCollectionAsync("myResourceGroup");
            string vmScaleSetName = "myVirtualMachineScaleSet";
            Compute.Models.ExpandTypesForGetVMScaleSets? expand = null;

            await collection.GetAsync(vmScaleSetName, expand);
        }
    }
}
