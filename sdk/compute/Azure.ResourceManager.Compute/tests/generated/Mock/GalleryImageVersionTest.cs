// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for GalleryImageVersion. </summary>
    public partial class GalleryImageVersionMockTests : MockTestBase
    {
        public GalleryImageVersionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.GalleryImageVersionCollection> GetGalleryImageVersionCollectionAsync(string resourceGroupName, string galleryName, string galleryImageName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            GalleryCollection galleryCollection = resourceGroup.GetGalleries();
            var galleryOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(galleryCollection, galleryName);
            Gallery gallery = galleryOperation.Value;
            GalleryImageCollection galleryImageCollection = gallery.GetGalleryImages();
            var galleryImageOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(galleryImageCollection, galleryImageName);
            GalleryImage galleryImage = galleryImageOperation.Value;
            GalleryImageVersionCollection galleryImageVersionCollection = galleryImage.GetGalleryImageVersions();
            return galleryImageVersionCollection;
        }

        private async Task<Compute.GalleryImageVersion> GetGalleryImageVersionAsync()
        {
            var collection = await GetGalleryImageVersionCollectionAsync("myResourceGroup", "myGalleryName", "myGalleryImageName");
            var createOperation = await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "1.0.0");
            return createOperation.Value;
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a gallery image version with replication status.
            var galleryImageVersion = await GetGalleryImageVersionAsync();
            Compute.Models.ReplicationStatusTypes? expand = new Compute.Models.ReplicationStatusTypes("ReplicationStatus");

            await galleryImageVersion.GetAsync(expand);
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get a gallery image version with snapshots as a source.
            var galleryImageVersion = await GetGalleryImageVersionAsync();
            Compute.Models.ReplicationStatusTypes? expand = null;

            await galleryImageVersion.GetAsync(expand);
        }

        [RecordedTest]
        public async Task GetAsync3()
        {
            // Example: Get a gallery image version with vhd as a source.
            var galleryImageVersion = await GetGalleryImageVersionAsync();
            Compute.Models.ReplicationStatusTypes? expand = null;

            await galleryImageVersion.GetAsync(expand);
        }

        [RecordedTest]
        public async Task GetAsync4()
        {
            // Example: Get a gallery image version.
            var galleryImageVersion = await GetGalleryImageVersionAsync();
            Compute.Models.ReplicationStatusTypes? expand = null;

            await galleryImageVersion.GetAsync(expand);
        }

        [RecordedTest]
        public async Task DeleteAsync()
        {
            // Example: Delete a gallery image version.
            var galleryImageVersion = await GetGalleryImageVersionAsync();

            await galleryImageVersion.DeleteAsync();
        }

        [RecordedTest]
        public async Task UpdateAsync()
        {
            // Example: Update a simple Gallery Image Version (Managed Image as source).
            var galleryImageVersion = await GetGalleryImageVersionAsync();
            Compute.Models.GalleryImageVersionUpdate galleryImageVersion2 = new Compute.Models.GalleryImageVersionUpdate()
            {
                PublishingProfile = new Compute.Models.GalleryImageVersionPublishingProfile(),
                StorageProfile = new Compute.Models.GalleryImageVersionStorageProfile()
                {
                    Source = new Compute.Models.GalleryArtifactVersionSource()
                    {
                        Id = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}",
                    },
                },
            };

            await galleryImageVersion.UpdateAsync(galleryImageVersion2);
        }

        [RecordedTest]
        public async Task UpdateAsync2()
        {
            // Example: Update a simple Gallery Image Version without source id.
            var galleryImageVersion = await GetGalleryImageVersionAsync();
            Compute.Models.GalleryImageVersionUpdate galleryImageVersion2 = new Compute.Models.GalleryImageVersionUpdate()
            {
                PublishingProfile = new Compute.Models.GalleryImageVersionPublishingProfile(),
                StorageProfile = new Compute.Models.GalleryImageVersionStorageProfile(),
            };

            await galleryImageVersion.UpdateAsync(galleryImageVersion2);
        }
    }
}
