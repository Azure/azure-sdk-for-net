// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.TestFramework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for VirtualMachine. </summary>
    public partial class VirtualMachineCollectionMockTests : MockTestBase
    {
        public VirtualMachineCollectionMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
            System.Environment.SetEnvironmentVariable("RESOURCE_MANAGER_URL", $"https://localhost:8443");
        }

        private async Task<Compute.VirtualMachineCollection> GetVirtualMachineCollectionAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            VirtualMachineCollection virtualMachineCollection = resourceGroup.GetVirtualMachines();
            return virtualMachineCollection;
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a Linux vm with a patch setting assessmentMode of ImageDefault.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            await TestHelper.CreateOrUpdateExampleInstanceAsync(collection, "myVM");
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync2()
        {
            // Example: Create a Linux vm with a patch setting patchMode of ImageDefault.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2s_v3"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "UbuntuServer",
                        Sku = "16.04-LTS",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    LinuxConfiguration = new Compute.Models.LinuxConfiguration()
                    {
                        ProvisionVMAgent = true,
                        PatchSettings = new Compute.Models.LinuxPatchSettings()
                        {
                            PatchMode = new Compute.Models.LinuxVMGuestPatchMode("ImageDefault"),
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync3()
        {
            // Example: Create a Linux vm with a patch settings patchMode and assessmentMode set to AutomaticByPlatform.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2s_v3"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "UbuntuServer",
                        Sku = "16.04-LTS",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    LinuxConfiguration = new Compute.Models.LinuxConfiguration()
                    {
                        ProvisionVMAgent = true,
                        PatchSettings = new Compute.Models.LinuxPatchSettings()
                        {
                            PatchMode = new Compute.Models.LinuxVMGuestPatchMode("AutomaticByPlatform"),
                            AssessmentMode = new Compute.Models.LinuxPatchAssessmentMode("AutomaticByPlatform"),
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync4()
        {
            // Example: Create a VM with Uefi Settings of secureBoot and vTPM.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2s_v3"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "windowsserver-gen2preview-preview",
                        Sku = "windows10-tvm",
                        Version = "18363.592.2001092016",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadOnly,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("StandardSSD_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                SecurityProfile = new Compute.Models.SecurityProfile()
                {
                    UefiSettings = new Compute.Models.UefiSettings()
                    {
                        SecureBootEnabled = true,
                        VTpmEnabled = true,
                    },
                    SecurityType = new Compute.Models.SecurityTypes("TrustedLaunch"),
                },
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync5()
        {
            // Example: Create a VM with UserData
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "{vm-name}";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "vmOSdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "{vm-name}",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                DiagnosticsProfile = new Compute.Models.DiagnosticsProfile()
                {
                    BootDiagnostics = new Compute.Models.BootDiagnostics()
                    {
                        Enabled = true,
                        StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
                    },
                },
                UserData = "RXhhbXBsZSBVc2VyRGF0YQ==",
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync6()
        {
            // Example: Create a VM with network interface configuration
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile()
                {
                    NetworkApiVersion = new Compute.Models.NetworkApiVersion("2020-11-01"),
                },
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync7()
        {
            // Example: Create a Windows vm with a patch setting assessmentMode of ImageDefault.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    WindowsConfiguration = new Compute.Models.WindowsConfiguration()
                    {
                        ProvisionVMAgent = true,
                        EnableAutomaticUpdates = true,
                        PatchSettings = new Compute.Models.PatchSettings()
                        {
                            AssessmentMode = new Compute.Models.WindowsPatchAssessmentMode("ImageDefault"),
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync8()
        {
            // Example: Create a Windows vm with a patch setting patchMode of AutomaticByOS.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    WindowsConfiguration = new Compute.Models.WindowsConfiguration()
                    {
                        ProvisionVMAgent = true,
                        EnableAutomaticUpdates = true,
                        PatchSettings = new Compute.Models.PatchSettings()
                        {
                            PatchMode = new Compute.Models.WindowsVMGuestPatchMode("AutomaticByOS"),
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync9()
        {
            // Example: Create a Windows vm with a patch setting patchMode of AutomaticByPlatform and enableHotpatching set to true.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    WindowsConfiguration = new Compute.Models.WindowsConfiguration()
                    {
                        ProvisionVMAgent = true,
                        EnableAutomaticUpdates = true,
                        PatchSettings = new Compute.Models.PatchSettings()
                        {
                            PatchMode = new Compute.Models.WindowsVMGuestPatchMode("AutomaticByPlatform"),
                            EnableHotpatching = true,
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync10()
        {
            // Example: Create a Windows vm with a patch setting patchMode of Manual.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    WindowsConfiguration = new Compute.Models.WindowsConfiguration()
                    {
                        ProvisionVMAgent = true,
                        EnableAutomaticUpdates = true,
                        PatchSettings = new Compute.Models.PatchSettings()
                        {
                            PatchMode = new Compute.Models.WindowsVMGuestPatchMode("Manual"),
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync11()
        {
            // Example: Create a Windows vm with patch settings patchMode and assessmentMode set to AutomaticByPlatform.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    WindowsConfiguration = new Compute.Models.WindowsConfiguration()
                    {
                        ProvisionVMAgent = true,
                        EnableAutomaticUpdates = true,
                        PatchSettings = new Compute.Models.PatchSettings()
                        {
                            PatchMode = new Compute.Models.WindowsVMGuestPatchMode("AutomaticByPlatform"),
                            AssessmentMode = new Compute.Models.WindowsPatchAssessmentMode("AutomaticByPlatform"),
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync12()
        {
            // Example: Create a custom-image vm from an unmanaged generalized os image.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "{vm-name}";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        OsType = Compute.Models.OperatingSystemTypes.Windows,
                        Name = "myVMosdisk",
                        Vhd = new Compute.Models.VirtualHardDisk()
                        {
                            Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
                        },
                        Image = new Compute.Models.VirtualHardDisk()
                        {
                            Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd",
                        },
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync13()
        {
            // Example: Create a platform-image vm with unmanaged os and data disks.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "{vm-name}";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Vhd = new Compute.Models.VirtualHardDisk()
                        {
                            Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
                        },
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync14()
        {
            // Example: Create a vm from a custom image.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync15()
        {
            // Example: Create a vm from a generalized shared image.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync16()
        {
            // Example: Create a vm from a specialized shared image.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/galleries/mySharedGallery/images/mySharedImage",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync17()
        {
            // Example: Create a vm in a Virtual Machine Scale Set with customer assigned platformFaultDomain.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                VirtualMachineScaleSet = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/{{existing-flex-vmss-name-with-platformFaultDomainCount-greater-than-1}}"),
                },
                PlatformFaultDomain = 1,
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync18()
        {
            // Example: Create a vm in an availability set.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                AvailabilitySet = new WritableSubResource()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{{existing-availability-set-name}}"),
                },
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync19()
        {
            // Example: Create a vm with DiskEncryptionSet resource id in the os disk and data disk.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                            DiskEncryptionSet = new WritableSubResource()
                            {
                                Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{{existing-diskEncryptionSet-name}}"),
                            },
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync20()
        {
            // Example: Create a vm with Host Encryption using encryptionAtHost property.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_DS1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "microsoft-ads",
                        Offer = "windows-data-science-vm",
                        Sku = "windows2016",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadOnly,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                SecurityProfile = new Compute.Models.SecurityProfile()
                {
                    EncryptionAtHost = true,
                },
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync21()
        {
            // Example: Create a vm with Scheduled Events Profile
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                DiagnosticsProfile = new Compute.Models.DiagnosticsProfile()
                {
                    BootDiagnostics = new Compute.Models.BootDiagnostics()
                    {
                        Enabled = true,
                        StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
                    },
                },
                ScheduledEventsProfile = new Compute.Models.ScheduledEventsProfile()
                {
                    TerminateNotificationProfile = new Compute.Models.TerminateNotificationProfile()
                    {
                        NotBeforeTimeout = "PT10M",
                        Enable = true,
                    },
                },
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync22()
        {
            // Example: Create a vm with a marketplace image plan.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "microsoft-ads",
                        Offer = "windows-data-science-vm",
                        Sku = "windows2016",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync23()
        {
            // Example: Create a vm with an extensions time budget.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                DiagnosticsProfile = new Compute.Models.DiagnosticsProfile()
                {
                    BootDiagnostics = new Compute.Models.BootDiagnostics()
                    {
                        Enabled = true,
                        StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
                    },
                },
                ExtensionsTimeBudget = "PT30M",
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync24()
        {
            // Example: Create a vm with boot diagnostics.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                DiagnosticsProfile = new Compute.Models.DiagnosticsProfile()
                {
                    BootDiagnostics = new Compute.Models.BootDiagnostics()
                    {
                        Enabled = true,
                        StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
                    },
                },
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync25()
        {
            // Example: Create a vm with empty data disks.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync26()
        {
            // Example: Create a vm with ephemeral os disk provisioning in Cache disk using placement property.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_DS1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "microsoft-ads",
                        Offer = "windows-data-science-vm",
                        Sku = "windows2016",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadOnly,
                        DiffDiskSettings = new Compute.Models.DiffDiskSettings()
                        {
                            Option = new Compute.Models.DiffDiskOptions("Local"),
                            Placement = new Compute.Models.DiffDiskPlacement("CacheDisk"),
                        },
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync27()
        {
            // Example: Create a vm with ephemeral os disk provisioning in Resource disk using placement property.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_DS1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "microsoft-ads",
                        Offer = "windows-data-science-vm",
                        Sku = "windows2016",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadOnly,
                        DiffDiskSettings = new Compute.Models.DiffDiskSettings()
                        {
                            Option = new Compute.Models.DiffDiskOptions("Local"),
                            Placement = new Compute.Models.DiffDiskPlacement("ResourceDisk"),
                        },
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync28()
        {
            // Example: Create a vm with ephemeral os disk.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                Plan = new Compute.Models.Plan()
                {
                    Name = "windows2016",
                    Publisher = "microsoft-ads",
                    Product = "windows-data-science-vm",
                },
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_DS1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "microsoft-ads",
                        Offer = "windows-data-science-vm",
                        Sku = "windows2016",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadOnly,
                        DiffDiskSettings = new Compute.Models.DiffDiskSettings()
                        {
                            Option = new Compute.Models.DiffDiskOptions("Local"),
                        },
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync29()
        {
            // Example: Create a vm with managed boot diagnostics.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
                DiagnosticsProfile = new Compute.Models.DiagnosticsProfile()
                {
                    BootDiagnostics = new Compute.Models.BootDiagnostics()
                    {
                        Enabled = true,
                    },
                },
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync30()
        {
            // Example: Create a vm with password authentication.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync31()
        {
            // Example: Create a vm with premium storage.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "MicrosoftWindowsServer",
                        Offer = "WindowsServer",
                        Sku = "2016-Datacenter",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task CreateOrUpdateAsync32()
        {
            // Example: Create a vm with ssh authentication.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.VirtualMachineData parameters = new Compute.VirtualMachineData("westus")
            {
                HardwareProfile = new Compute.Models.HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D1_v2"),
                },
                StorageProfile = new Compute.Models.StorageProfile()
                {
                    ImageReference = new Compute.Models.ImageReference()
                    {
                        Publisher = "{image_publisher}",
                        Offer = "{image_offer}",
                        Sku = "{image_sku}",
                        Version = "latest",
                    },
                    OsDisk = new Compute.Models.OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = Compute.Models.CachingTypes.ReadWrite,
                        ManagedDisk = new Compute.Models.ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Standard_LRS"),
                        },
                    },
                },
                OsProfile = new Compute.Models.OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    LinuxConfiguration = new Compute.Models.LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        Ssh = new Compute.Models.SshConfiguration(),
                    },
                },
                NetworkProfile = new Compute.Models.NetworkProfile(),
            };

            await collection.CreateOrUpdateAsync(vmName, parameters);
        }

        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: Get a Virtual Machine.
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            await TestHelper.GetExampleInstanceAsync(collection, "myVM");
        }

        [RecordedTest]
        public async Task GetAsync2()
        {
            // Example: Get a virtual machine placed on a dedicated host group through automatic placement
            var collection = await GetVirtualMachineCollectionAsync("myResourceGroup");
            string vmName = "myVM";
            Compute.Models.InstanceViewTypes? expand = null;

            await collection.GetAsync(vmName, expand);
        }
    }
}
