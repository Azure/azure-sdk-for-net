// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CommunityGalleryImagesOperations.
    /// </summary>
    public static partial class CommunityGalleryImagesOperationsExtensions
    {
            /// <summary>
            /// Get a community gallery image.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='publicGalleryName'>
            /// The public name of the community gallery.
            /// </param>
            /// <param name='galleryImageName'>
            /// The name of the community gallery image definition.
            /// </param>
            public static CommunityGalleryImage Get(this ICommunityGalleryImagesOperations operations, string location, string publicGalleryName, string galleryImageName)
            {
                return operations.GetAsync(location, publicGalleryName, galleryImageName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a community gallery image.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='publicGalleryName'>
            /// The public name of the community gallery.
            /// </param>
            /// <param name='galleryImageName'>
            /// The name of the community gallery image definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommunityGalleryImage> GetAsync(this ICommunityGalleryImagesOperations operations, string location, string publicGalleryName, string galleryImageName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, publicGalleryName, galleryImageName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List community gallery images inside a gallery.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='publicGalleryName'>
            /// The public name of the community gallery.
            /// </param>
            public static IPage<CommunityGalleryImage> List(this ICommunityGalleryImagesOperations operations, string location, string publicGalleryName)
            {
                return operations.ListAsync(location, publicGalleryName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List community gallery images inside a gallery.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// Resource location.
            /// </param>
            /// <param name='publicGalleryName'>
            /// The public name of the community gallery.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunityGalleryImage>> ListAsync(this ICommunityGalleryImagesOperations operations, string location, string publicGalleryName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, publicGalleryName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List community gallery images inside a gallery.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CommunityGalleryImage> ListNext(this ICommunityGalleryImagesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List community gallery images inside a gallery.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CommunityGalleryImage>> ListNextAsync(this ICommunityGalleryImagesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
