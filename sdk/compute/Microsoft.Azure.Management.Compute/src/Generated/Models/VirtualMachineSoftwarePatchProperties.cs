// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes the properties of a Virtual Machine software patch.
    /// </summary>
    public partial class VirtualMachineSoftwarePatchProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineSoftwarePatchProperties class.
        /// </summary>
        public VirtualMachineSoftwarePatchProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineSoftwarePatchProperties class.
        /// </summary>
        /// <param name="patchId">A unique identifier for the patch.</param>
        /// <param name="name">The friendly name of the patch.</param>
        /// <param name="version">The version number of the patch. This
        /// property applies only to Linux patches.</param>
        /// <param name="kbid">The KBID of the patch. Only applies to Windows
        /// patches.</param>
        /// <param name="classifications">The classification(s) of the patch as
        /// provided by the patch publisher.</param>
        /// <param name="rebootBehavior">Describes the reboot requirements of
        /// the patch. Possible values include: 'NeverReboots',
        /// 'AlwaysRequiresReboot', 'CanRequestReboot'</param>
        /// <param name="activityId">The activity ID of the operation that
        /// produced this result. It is used to correlate across CRP and
        /// extension logs.</param>
        /// <param name="publishedDate">The UTC timestamp when the repository
        /// published this patch.</param>
        /// <param name="lastModifiedDateTime">The UTC timestamp of the last
        /// update to this patch record.</param>
        /// <param name="assessmentState">Describes the outcome of an install
        /// operation for a given patch. Possible values include: 'Installed',
        /// 'Failed', 'Excluded', 'NotSelected', 'Pending', 'Available'</param>
        public VirtualMachineSoftwarePatchProperties(string patchId = default(string), string name = default(string), string version = default(string), string kbid = default(string), IList<string> classifications = default(IList<string>), string rebootBehavior = default(string), string activityId = default(string), System.DateTime? publishedDate = default(System.DateTime?), System.DateTime? lastModifiedDateTime = default(System.DateTime?), string assessmentState = default(string))
        {
            PatchId = patchId;
            Name = name;
            Version = version;
            Kbid = kbid;
            Classifications = classifications;
            RebootBehavior = rebootBehavior;
            ActivityId = activityId;
            PublishedDate = publishedDate;
            LastModifiedDateTime = lastModifiedDateTime;
            AssessmentState = assessmentState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a unique identifier for the patch.
        /// </summary>
        [JsonProperty(PropertyName = "patchId")]
        public string PatchId { get; private set; }

        /// <summary>
        /// Gets the friendly name of the patch.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the version number of the patch. This property applies only to
        /// Linux patches.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; private set; }

        /// <summary>
        /// Gets the KBID of the patch. Only applies to Windows patches.
        /// </summary>
        [JsonProperty(PropertyName = "kbid")]
        public string Kbid { get; private set; }

        /// <summary>
        /// Gets the classification(s) of the patch as provided by the patch
        /// publisher.
        /// </summary>
        [JsonProperty(PropertyName = "classifications")]
        public IList<string> Classifications { get; private set; }

        /// <summary>
        /// Gets describes the reboot requirements of the patch. Possible
        /// values include: 'NeverReboots', 'AlwaysRequiresReboot',
        /// 'CanRequestReboot'
        /// </summary>
        [JsonProperty(PropertyName = "rebootBehavior")]
        public string RebootBehavior { get; private set; }

        /// <summary>
        /// Gets the activity ID of the operation that produced this result. It
        /// is used to correlate across CRP and extension logs.
        /// </summary>
        [JsonProperty(PropertyName = "activityId")]
        public string ActivityId { get; private set; }

        /// <summary>
        /// Gets the UTC timestamp when the repository published this patch.
        /// </summary>
        [JsonProperty(PropertyName = "publishedDate")]
        public System.DateTime? PublishedDate { get; private set; }

        /// <summary>
        /// Gets the UTC timestamp of the last update to this patch record.
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public System.DateTime? LastModifiedDateTime { get; private set; }

        /// <summary>
        /// Gets describes the outcome of an install operation for a given
        /// patch. Possible values include: 'Installed', 'Failed', 'Excluded',
        /// 'NotSelected', 'Pending', 'Available'
        /// </summary>
        [JsonProperty(PropertyName = "assessmentState")]
        public string AssessmentState { get; private set; }

    }
}
