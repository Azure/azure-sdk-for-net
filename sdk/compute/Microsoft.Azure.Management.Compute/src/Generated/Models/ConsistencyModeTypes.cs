// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ConsistencyModeTypes.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ConsistencyModeTypes
    {
        [EnumMember(Value = "CrashConsistent")]
        CrashConsistent,
        [EnumMember(Value = "FileSystemConsistent")]
        FileSystemConsistent,
        [EnumMember(Value = "ApplicationConsistent")]
        ApplicationConsistent
    }
    internal static class ConsistencyModeTypesEnumExtension
    {
        internal static string ToSerializedValue(this ConsistencyModeTypes? value)
        {
            return value == null ? null : ((ConsistencyModeTypes)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ConsistencyModeTypes value)
        {
            switch( value )
            {
                case ConsistencyModeTypes.CrashConsistent:
                    return "CrashConsistent";
                case ConsistencyModeTypes.FileSystemConsistent:
                    return "FileSystemConsistent";
                case ConsistencyModeTypes.ApplicationConsistent:
                    return "ApplicationConsistent";
            }
            return null;
        }

        internal static ConsistencyModeTypes? ParseConsistencyModeTypes(this string value)
        {
            switch( value )
            {
                case "CrashConsistent":
                    return ConsistencyModeTypes.CrashConsistent;
                case "FileSystemConsistent":
                    return ConsistencyModeTypes.FileSystemConsistent;
                case "ApplicationConsistent":
                    return ConsistencyModeTypes.ApplicationConsistent;
            }
            return null;
        }
    }
}
