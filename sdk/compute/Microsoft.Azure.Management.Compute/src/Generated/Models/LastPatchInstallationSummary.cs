// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the properties of the last installed patch summary.
    /// </summary>
    public partial class LastPatchInstallationSummary
    {
        /// <summary>
        /// Initializes a new instance of the LastPatchInstallationSummary
        /// class.
        /// </summary>
        public LastPatchInstallationSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LastPatchInstallationSummary
        /// class.
        /// </summary>
        /// <param name="status">The overall success or failure status of the
        /// operation. It remains "InProgress" until the operation completes.
        /// At that point it will become "Unknown", "Failed", "Succeeded", or
        /// "CompletedWithWarnings.". Possible values include: 'Unknown',
        /// 'InProgress', 'Failed', 'Succeeded',
        /// 'CompletedWithWarnings'</param>
        /// <param name="installationActivityId">The activity ID of the
        /// operation that produced this result. It is used to correlate across
        /// CRP and extension logs.</param>
        /// <param name="maintenanceWindowExceeded">Describes whether the
        /// operation ran out of time before it completed all its intended
        /// actions</param>
        /// <param name="notSelectedPatchCount">The number of all available
        /// patches but not going to be installed because it didn't match a
        /// classification or inclusion list entry.</param>
        /// <param name="excludedPatchCount">The number of all available
        /// patches but excluded explicitly by a customer-specified exclusion
        /// list match.</param>
        /// <param name="pendingPatchCount">The number of all available patches
        /// expected to be installed over the course of the patch installation
        /// operation.</param>
        /// <param name="installedPatchCount">The count of patches that
        /// successfully installed.</param>
        /// <param name="failedPatchCount">The count of patches that failed
        /// installation.</param>
        /// <param name="startTime">The UTC timestamp when the operation
        /// began.</param>
        /// <param name="lastModifiedTime">The UTC timestamp when the operation
        /// began.</param>
        /// <param name="error">The errors that were encountered during
        /// execution of the operation. The details array contains the list of
        /// them.</param>
        public LastPatchInstallationSummary(string status = default(string), string installationActivityId = default(string), bool? maintenanceWindowExceeded = default(bool?), int? notSelectedPatchCount = default(int?), int? excludedPatchCount = default(int?), int? pendingPatchCount = default(int?), int? installedPatchCount = default(int?), int? failedPatchCount = default(int?), System.DateTime? startTime = default(System.DateTime?), System.DateTime? lastModifiedTime = default(System.DateTime?), ApiError error = default(ApiError))
        {
            Status = status;
            InstallationActivityId = installationActivityId;
            MaintenanceWindowExceeded = maintenanceWindowExceeded;
            NotSelectedPatchCount = notSelectedPatchCount;
            ExcludedPatchCount = excludedPatchCount;
            PendingPatchCount = pendingPatchCount;
            InstalledPatchCount = installedPatchCount;
            FailedPatchCount = failedPatchCount;
            StartTime = startTime;
            LastModifiedTime = lastModifiedTime;
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the overall success or failure status of the operation. It
        /// remains "InProgress" until the operation completes. At that point
        /// it will become "Unknown", "Failed", "Succeeded", or
        /// "CompletedWithWarnings.". Possible values include: 'Unknown',
        /// 'InProgress', 'Failed', 'Succeeded', 'CompletedWithWarnings'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets the activity ID of the operation that produced this result. It
        /// is used to correlate across CRP and extension logs.
        /// </summary>
        [JsonProperty(PropertyName = "installationActivityId")]
        public string InstallationActivityId { get; private set; }

        /// <summary>
        /// Gets describes whether the operation ran out of time before it
        /// completed all its intended actions
        /// </summary>
        [JsonProperty(PropertyName = "maintenanceWindowExceeded")]
        public bool? MaintenanceWindowExceeded { get; private set; }

        /// <summary>
        /// Gets the number of all available patches but not going to be
        /// installed because it didn't match a classification or inclusion
        /// list entry.
        /// </summary>
        [JsonProperty(PropertyName = "notSelectedPatchCount")]
        public int? NotSelectedPatchCount { get; private set; }

        /// <summary>
        /// Gets the number of all available patches but excluded explicitly by
        /// a customer-specified exclusion list match.
        /// </summary>
        [JsonProperty(PropertyName = "excludedPatchCount")]
        public int? ExcludedPatchCount { get; private set; }

        /// <summary>
        /// Gets the number of all available patches expected to be installed
        /// over the course of the patch installation operation.
        /// </summary>
        [JsonProperty(PropertyName = "pendingPatchCount")]
        public int? PendingPatchCount { get; private set; }

        /// <summary>
        /// Gets the count of patches that successfully installed.
        /// </summary>
        [JsonProperty(PropertyName = "installedPatchCount")]
        public int? InstalledPatchCount { get; private set; }

        /// <summary>
        /// Gets the count of patches that failed installation.
        /// </summary>
        [JsonProperty(PropertyName = "failedPatchCount")]
        public int? FailedPatchCount { get; private set; }

        /// <summary>
        /// Gets the UTC timestamp when the operation began.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime { get; private set; }

        /// <summary>
        /// Gets the UTC timestamp when the operation began.
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedTime")]
        public System.DateTime? LastModifiedTime { get; private set; }

        /// <summary>
        /// Gets the errors that were encountered during execution of the
        /// operation. The details array contains the list of them.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ApiError Error { get; private set; }

    }
}
