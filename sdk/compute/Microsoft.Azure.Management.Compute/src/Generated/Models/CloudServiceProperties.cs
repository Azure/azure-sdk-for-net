// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Cloud service properties
    /// </summary>
    public partial class CloudServiceProperties
    {
        /// <summary>
        /// Initializes a new instance of the CloudServiceProperties class.
        /// </summary>
        public CloudServiceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CloudServiceProperties class.
        /// </summary>
        /// <param name="packageUrl">Specifies a URL that refers to the
        /// location of the service package in the Blob service. The service
        /// package URL can be Shared Access Signature (SAS) URI from any
        /// storage account.
        /// This is a write-only property and is not returned in GET
        /// calls.</param>
        /// <param name="configuration">Specifies the XML service configuration
        /// (.cscfg) for the cloud service.</param>
        /// <param name="configurationUrl">Specifies a URL that refers to the
        /// location of the service configuration in the Blob service. The
        /// service package URL  can be Shared Access Signature (SAS) URI from
        /// any storage account.
        /// This is a write-only property and is not returned in GET
        /// calls.</param>
        /// <param name="startCloudService">(Optional) Indicates whether to
        /// start the cloud service immediately after it is created. The
        /// default value is `true`.
        /// If false, the service model is still deployed, but the code is not
        /// run immediately. Instead, the service is PoweredOff until you call
        /// Start, at which time the service will be started. A deployed
        /// service still incurs charges, even if it is poweredoff.</param>
        /// <param name="allowModelOverride">(Optional) Indicates whether the
        /// role sku properties (roleProfile.roles.sku) specified in the
        /// model/template should override the role instance count and vm size
        /// specified in the .cscfg and .csdef respectively.
        /// The default value is `false`.</param>
        /// <param name="upgradeMode">Possible values include: 'Auto',
        /// 'Manual', 'Simultaneous'</param>
        /// <param name="provisioningState">The provisioning state, which only
        /// appears in the response.</param>
        /// <param name="uniqueId">The unique identifier for the cloud
        /// service.</param>
        public CloudServiceProperties(string packageUrl = default(string), string configuration = default(string), string configurationUrl = default(string), bool? startCloudService = default(bool?), bool? allowModelOverride = default(bool?), string upgradeMode = default(string), CloudServiceRoleProfile roleProfile = default(CloudServiceRoleProfile), CloudServiceOsProfile osProfile = default(CloudServiceOsProfile), CloudServiceNetworkProfile networkProfile = default(CloudServiceNetworkProfile), CloudServiceExtensionProfile extensionProfile = default(CloudServiceExtensionProfile), string provisioningState = default(string), string uniqueId = default(string))
        {
            PackageUrl = packageUrl;
            Configuration = configuration;
            ConfigurationUrl = configurationUrl;
            StartCloudService = startCloudService;
            AllowModelOverride = allowModelOverride;
            UpgradeMode = upgradeMode;
            RoleProfile = roleProfile;
            OsProfile = osProfile;
            NetworkProfile = networkProfile;
            ExtensionProfile = extensionProfile;
            ProvisioningState = provisioningState;
            UniqueId = uniqueId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies a URL that refers to the location of the
        /// service package in the Blob service. The service package URL can be
        /// Shared Access Signature (SAS) URI from any storage account.
        /// This is a write-only property and is not returned in GET calls.
        /// </summary>
        [JsonProperty(PropertyName = "packageUrl")]
        public string PackageUrl { get; set; }

        /// <summary>
        /// Gets or sets specifies the XML service configuration (.cscfg) for
        /// the cloud service.
        /// </summary>
        [JsonProperty(PropertyName = "configuration")]
        public string Configuration { get; set; }

        /// <summary>
        /// Gets or sets specifies a URL that refers to the location of the
        /// service configuration in the Blob service. The service package URL
        /// can be Shared Access Signature (SAS) URI from any storage account.
        /// This is a write-only property and is not returned in GET calls.
        /// </summary>
        [JsonProperty(PropertyName = "configurationUrl")]
        public string ConfigurationUrl { get; set; }

        /// <summary>
        /// Gets or sets (Optional) Indicates whether to start the cloud
        /// service immediately after it is created. The default value is
        /// `true`.
        /// If false, the service model is still deployed, but the code is not
        /// run immediately. Instead, the service is PoweredOff until you call
        /// Start, at which time the service will be started. A deployed
        /// service still incurs charges, even if it is poweredoff.
        /// </summary>
        [JsonProperty(PropertyName = "startCloudService")]
        public bool? StartCloudService { get; set; }

        /// <summary>
        /// Gets or sets (Optional) Indicates whether the role sku properties
        /// (roleProfile.roles.sku) specified in the model/template should
        /// override the role instance count and vm size specified in the
        /// .cscfg and .csdef respectively.
        /// The default value is `false`.
        /// </summary>
        [JsonProperty(PropertyName = "allowModelOverride")]
        public bool? AllowModelOverride { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Auto', 'Manual',
        /// 'Simultaneous'
        /// </summary>
        [JsonProperty(PropertyName = "upgradeMode")]
        public string UpgradeMode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "roleProfile")]
        public CloudServiceRoleProfile RoleProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "osProfile")]
        public CloudServiceOsProfile OsProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "networkProfile")]
        public CloudServiceNetworkProfile NetworkProfile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extensionProfile")]
        public CloudServiceExtensionProfile ExtensionProfile { get; set; }

        /// <summary>
        /// Gets the provisioning state, which only appears in the response.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique identifier for the cloud service.
        /// </summary>
        [JsonProperty(PropertyName = "uniqueId")]
        public string UniqueId { get; private set; }

    }
}
