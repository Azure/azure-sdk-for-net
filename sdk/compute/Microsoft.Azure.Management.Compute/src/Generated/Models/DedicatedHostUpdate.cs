// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Specifies information about the dedicated host. Only tags,
    /// autoReplaceOnFailure and licenseType may be updated.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DedicatedHostUpdate : UpdateResource
    {
        /// <summary>
        /// Initializes a new instance of the DedicatedHostUpdate class.
        /// </summary>
        public DedicatedHostUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DedicatedHostUpdate class.
        /// </summary>
        /// <param name="tags">Resource tags</param>
        /// <param name="platformFaultDomain">Fault domain of the dedicated
        /// host within a dedicated host group.</param>
        /// <param name="autoReplaceOnFailure">Specifies whether the dedicated
        /// host should be replaced automatically in case of a failure. The
        /// value is defaulted to 'true' when not provided.</param>
        /// <param name="hostId">A unique id generated and assigned to the
        /// dedicated host by the platform. Does not change throughout the
        /// lifetime of the host.</param>
        /// <param name="virtualMachines">A list of references to all virtual
        /// machines in the Dedicated Host.</param>
        /// <param name="licenseType">Specifies the software license type that
        /// will be applied to the VMs deployed on the dedicated host. Possible
        /// values are: **None,** **Windows_Server_Hybrid,**
        /// **Windows_Server_Perpetual.** The default value is: **None.**.
        /// Possible values include: 'None', 'Windows_Server_Hybrid',
        /// 'Windows_Server_Perpetual'</param>
        /// <param name="provisioningTime">The date when the host was first
        /// provisioned.</param>
        /// <param name="provisioningState">The provisioning state, which only
        /// appears in the response.</param>
        /// <param name="instanceView">The dedicated host instance
        /// view.</param>
        /// <param name="timeCreated">Specifies the time at which the Dedicated
        /// Host resource was created. Minimum api-version: 2021-11-01.</param>
        /// <param name="sku">[List all available dedicated host sizes for
        /// resizing]
        /// (https://docs.microsoft.com/rest/api/compute/dedicated-hosts/listavailablesizes).
        /// Resizing can be only used to scale up DedicatedHost. Only name is
        /// required to be set. </param>
        public DedicatedHostUpdate(IDictionary<string, string> tags = default(IDictionary<string, string>), int? platformFaultDomain = default(int?), bool? autoReplaceOnFailure = default(bool?), string hostId = default(string), IList<SubResourceReadOnly> virtualMachines = default(IList<SubResourceReadOnly>), DedicatedHostLicenseTypes? licenseType = default(DedicatedHostLicenseTypes?), System.DateTime? provisioningTime = default(System.DateTime?), string provisioningState = default(string), DedicatedHostInstanceView instanceView = default(DedicatedHostInstanceView), System.DateTime? timeCreated = default(System.DateTime?), Sku sku = default(Sku))
            : base(tags)
        {
            PlatformFaultDomain = platformFaultDomain;
            AutoReplaceOnFailure = autoReplaceOnFailure;
            HostId = hostId;
            VirtualMachines = virtualMachines;
            LicenseType = licenseType;
            ProvisioningTime = provisioningTime;
            ProvisioningState = provisioningState;
            InstanceView = instanceView;
            TimeCreated = timeCreated;
            Sku = sku;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets fault domain of the dedicated host within a dedicated
        /// host group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.platformFaultDomain")]
        public int? PlatformFaultDomain { get; set; }

        /// <summary>
        /// Gets or sets specifies whether the dedicated host should be
        /// replaced automatically in case of a failure. The value is defaulted
        /// to 'true' when not provided.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoReplaceOnFailure")]
        public bool? AutoReplaceOnFailure { get; set; }

        /// <summary>
        /// Gets a unique id generated and assigned to the dedicated host by
        /// the platform. Does not change throughout the lifetime of the host.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostId")]
        public string HostId { get; private set; }

        /// <summary>
        /// Gets a list of references to all virtual machines in the Dedicated
        /// Host.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualMachines")]
        public IList<SubResourceReadOnly> VirtualMachines { get; private set; }

        /// <summary>
        /// Gets or sets specifies the software license type that will be
        /// applied to the VMs deployed on the dedicated host. Possible values
        /// are: **None,** **Windows_Server_Hybrid,**
        /// **Windows_Server_Perpetual.** The default value is: **None.**.
        /// Possible values include: 'None', 'Windows_Server_Hybrid',
        /// 'Windows_Server_Perpetual'
        /// </summary>
        [JsonProperty(PropertyName = "properties.licenseType")]
        public DedicatedHostLicenseTypes? LicenseType { get; set; }

        /// <summary>
        /// Gets the date when the host was first provisioned.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningTime")]
        public System.DateTime? ProvisioningTime { get; private set; }

        /// <summary>
        /// Gets the provisioning state, which only appears in the response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the dedicated host instance view.
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceView")]
        public DedicatedHostInstanceView InstanceView { get; private set; }

        /// <summary>
        /// Gets specifies the time at which the Dedicated Host resource was
        /// created. Minimum api-version: 2021-11-01.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeCreated")]
        public System.DateTime? TimeCreated { get; private set; }

        /// <summary>
        /// Gets or sets [List all available dedicated host sizes for resizing]
        /// (https://docs.microsoft.com/rest/api/compute/dedicated-hosts/listavailablesizes).
        /// Resizing can be only used to scale up DedicatedHost. Only name is
        /// required to be set.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PlatformFaultDomain < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PlatformFaultDomain", 0);
            }
        }
    }
}
