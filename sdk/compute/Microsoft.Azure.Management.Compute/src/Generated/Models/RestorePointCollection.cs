// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Create or update Restore Point collection parameters.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RestorePointCollection : Resource
    {
        /// <summary>
        /// Initializes a new instance of the RestorePointCollection class.
        /// </summary>
        public RestorePointCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestorePointCollection class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="provisioningState">The provisioning state of the
        /// restore point collection.</param>
        /// <param name="restorePointCollectionId">The unique id of the restore
        /// point collection.</param>
        /// <param name="restorePoints">A list containing all restore points
        /// created under this restore point collection.</param>
        public RestorePointCollection(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), RestorePointCollectionSourceProperties source = default(RestorePointCollectionSourceProperties), string provisioningState = default(string), string restorePointCollectionId = default(string), IList<RestorePoint> restorePoints = default(IList<RestorePoint>))
            : base(location, id, name, type, tags)
        {
            Source = source;
            ProvisioningState = provisioningState;
            RestorePointCollectionId = restorePointCollectionId;
            RestorePoints = restorePoints;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public RestorePointCollectionSourceProperties Source { get; set; }

        /// <summary>
        /// Gets the provisioning state of the restore point collection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the unique id of the restore point collection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.restorePointCollectionId")]
        public string RestorePointCollectionId { get; private set; }

        /// <summary>
        /// Gets a list containing all restore points created under this
        /// restore point collection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.restorePoints")]
        public IList<RestorePoint> RestorePoints { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (RestorePoints != null)
            {
                foreach (var element in RestorePoints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
