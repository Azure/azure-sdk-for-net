// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The source user image virtual hard disk. Only tags may be updated.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ImageUpdate : UpdateResource
    {
        /// <summary>
        /// Initializes a new instance of the ImageUpdate class.
        /// </summary>
        public ImageUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageUpdate class.
        /// </summary>
        /// <param name="tags">Resource tags</param>
        /// <param name="sourceVirtualMachine">The source virtual machine from
        /// which Image is created.</param>
        /// <param name="storageProfile">Specifies the storage settings for the
        /// virtual machine disks.</param>
        /// <param name="provisioningState">The provisioning state.</param>
        /// <param name="hyperVGeneration">Specifies the HyperVGenerationType
        /// of the VirtualMachine created from the image. From API Version
        /// 2019-03-01 if the image source is a blob, then we need the user to
        /// specify the value, if the source is managed resource like disk or
        /// snapshot, we may require the user to specify the property if we
        /// cannot deduce it from the source managed resource. Possible values
        /// include: 'V1', 'V2'</param>
        public ImageUpdate(IDictionary<string, string> tags = default(IDictionary<string, string>), SubResource sourceVirtualMachine = default(SubResource), ImageStorageProfile storageProfile = default(ImageStorageProfile), string provisioningState = default(string), string hyperVGeneration = default(string))
            : base(tags)
        {
            SourceVirtualMachine = sourceVirtualMachine;
            StorageProfile = storageProfile;
            ProvisioningState = provisioningState;
            HyperVGeneration = hyperVGeneration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the source virtual machine from which Image is
        /// created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceVirtualMachine")]
        public SubResource SourceVirtualMachine { get; set; }

        /// <summary>
        /// Gets or sets specifies the storage settings for the virtual machine
        /// disks.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageProfile")]
        public ImageStorageProfile StorageProfile { get; set; }

        /// <summary>
        /// Gets the provisioning state.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets specifies the HyperVGenerationType of the
        /// VirtualMachine created from the image. From API Version 2019-03-01
        /// if the image source is a blob, then we need the user to specify the
        /// value, if the source is managed resource like disk or snapshot, we
        /// may require the user to specify the property if we cannot deduce it
        /// from the source managed resource. Possible values include: 'V1',
        /// 'V2'
        /// </summary>
        [JsonProperty(PropertyName = "properties.hyperVGeneration")]
        public string HyperVGeneration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageProfile != null)
            {
                StorageProfile.Validate();
            }
        }
    }
}
