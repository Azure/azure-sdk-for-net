// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Extension Properties.
    /// </summary>
    public partial class CloudServiceExtensionProperties
    {
        /// <summary>
        /// Initializes a new instance of the CloudServiceExtensionProperties
        /// class.
        /// </summary>
        public CloudServiceExtensionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CloudServiceExtensionProperties
        /// class.
        /// </summary>
        /// <param name="publisher">The name of the extension handler
        /// publisher.</param>
        /// <param name="type">Specifies the type of the extension.</param>
        /// <param name="typeHandlerVersion">Specifies the version of the
        /// extension. Specifies the version of the extension. If this element
        /// is not specified or an asterisk (*) is used as the value, the
        /// latest version of the extension is used. If the value is specified
        /// with a major version number and an asterisk as the minor version
        /// number (X.), the latest minor version of the specified major
        /// version is selected. If a major version number and a minor version
        /// number are specified (X.Y), the specific extension version is
        /// selected. If a version is specified, an auto-upgrade is performed
        /// on the role instance.</param>
        /// <param name="autoUpgradeMinorVersion">Explicitly specify whether
        /// platform can automatically upgrade typeHandlerVersion to higher
        /// minor versions when they become available.</param>
        /// <param name="settings">Public settings for the extension. For JSON
        /// extensions, this is the JSON settings for the extension. For XML
        /// Extension (like RDP), this is the XML setting for the
        /// extension.</param>
        /// <param name="protectedSettings">Protected settings for the
        /// extension which are encrypted before sent to the role
        /// instance.</param>
        /// <param name="forceUpdateTag">Tag to force apply the provided public
        /// and protected settings.
        /// Changing the tag value allows for re-running the extension without
        /// changing any of the public or protected settings.
        /// If forceUpdateTag is not changed, updates to public or protected
        /// settings would still be applied by the handler.
        /// If neither forceUpdateTag nor any of public or protected settings
        /// change, extension would flow to the role instance with the same
        /// sequence-number, and
        /// it is up to handler implementation whether to re-run it or
        /// not</param>
        /// <param name="provisioningState">The provisioning state, which only
        /// appears in the response.</param>
        /// <param name="rolesAppliedTo">Optional list of roles to apply this
        /// extension. If property is not specified or '*' is specified,
        /// extension is applied to all roles in the cloud service.</param>
        public CloudServiceExtensionProperties(string publisher = default(string), string type = default(string), string typeHandlerVersion = default(string), bool? autoUpgradeMinorVersion = default(bool?), string settings = default(string), string protectedSettings = default(string), CloudServiceVaultAndSecretReference protectedSettingsFromKeyVault = default(CloudServiceVaultAndSecretReference), string forceUpdateTag = default(string), string provisioningState = default(string), IList<string> rolesAppliedTo = default(IList<string>))
        {
            Publisher = publisher;
            Type = type;
            TypeHandlerVersion = typeHandlerVersion;
            AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            Settings = settings;
            ProtectedSettings = protectedSettings;
            ProtectedSettingsFromKeyVault = protectedSettingsFromKeyVault;
            ForceUpdateTag = forceUpdateTag;
            ProvisioningState = provisioningState;
            RolesAppliedTo = rolesAppliedTo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the extension handler publisher.
        /// </summary>
        [JsonProperty(PropertyName = "publisher")]
        public string Publisher { get; set; }

        /// <summary>
        /// Gets or sets specifies the type of the extension.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets specifies the version of the extension. Specifies the
        /// version of the extension. If this element is not specified or an
        /// asterisk (*) is used as the value, the latest version of the
        /// extension is used. If the value is specified with a major version
        /// number and an asterisk as the minor version number (X.), the latest
        /// minor version of the specified major version is selected. If a
        /// major version number and a minor version number are specified
        /// (X.Y), the specific extension version is selected. If a version is
        /// specified, an auto-upgrade is performed on the role instance.
        /// </summary>
        [JsonProperty(PropertyName = "typeHandlerVersion")]
        public string TypeHandlerVersion { get; set; }

        /// <summary>
        /// Gets or sets explicitly specify whether platform can automatically
        /// upgrade typeHandlerVersion to higher minor versions when they
        /// become available.
        /// </summary>
        [JsonProperty(PropertyName = "autoUpgradeMinorVersion")]
        public bool? AutoUpgradeMinorVersion { get; set; }

        /// <summary>
        /// Gets or sets public settings for the extension. For JSON
        /// extensions, this is the JSON settings for the extension. For XML
        /// Extension (like RDP), this is the XML setting for the extension.
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public string Settings { get; set; }

        /// <summary>
        /// Gets or sets protected settings for the extension which are
        /// encrypted before sent to the role instance.
        /// </summary>
        [JsonProperty(PropertyName = "protectedSettings")]
        public string ProtectedSettings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "protectedSettingsFromKeyVault")]
        public CloudServiceVaultAndSecretReference ProtectedSettingsFromKeyVault { get; set; }

        /// <summary>
        /// Gets or sets tag to force apply the provided public and protected
        /// settings.
        /// Changing the tag value allows for re-running the extension without
        /// changing any of the public or protected settings.
        /// If forceUpdateTag is not changed, updates to public or protected
        /// settings would still be applied by the handler.
        /// If neither forceUpdateTag nor any of public or protected settings
        /// change, extension would flow to the role instance with the same
        /// sequence-number, and
        /// it is up to handler implementation whether to re-run it or not
        /// </summary>
        [JsonProperty(PropertyName = "forceUpdateTag")]
        public string ForceUpdateTag { get; set; }

        /// <summary>
        /// Gets the provisioning state, which only appears in the response.
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets optional list of roles to apply this extension. If
        /// property is not specified or '*' is specified, extension is applied
        /// to all roles in the cloud service.
        /// </summary>
        [JsonProperty(PropertyName = "rolesAppliedTo")]
        public IList<string> RolesAppliedTo { get; set; }

    }
}
