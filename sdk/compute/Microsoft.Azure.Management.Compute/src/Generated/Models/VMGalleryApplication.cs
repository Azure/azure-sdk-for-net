// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Specifies the required information to reference a compute gallery
    /// application version
    /// </summary>
    public partial class VMGalleryApplication
    {
        /// <summary>
        /// Initializes a new instance of the VMGalleryApplication class.
        /// </summary>
        public VMGalleryApplication()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VMGalleryApplication class.
        /// </summary>
        /// <param name="packageReferenceId">Specifies the
        /// GalleryApplicationVersion resource id on the form of
        /// /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}</param>
        /// <param name="tags">Optional, Specifies a passthrough value for more
        /// generic context.</param>
        /// <param name="order">Optional, Specifies the order in which the
        /// packages have to be installed</param>
        /// <param name="configurationReference">Optional, Specifies the uri to
        /// an azure blob that will replace the default configuration for the
        /// package if provided</param>
        /// <param name="treatFailureAsDeploymentFailure">Optional, If true,
        /// any failure for any operation in the VmApplication will fail the
        /// deployment</param>
        /// <param name="enableAutomaticUpgrade">If set to true, when a new
        /// Gallery Application version is available in PIR/SIG, it will be
        /// automatically updated for the VM/VMSS</param>
        public VMGalleryApplication(string packageReferenceId, string tags = default(string), int? order = default(int?), string configurationReference = default(string), bool? treatFailureAsDeploymentFailure = default(bool?), bool? enableAutomaticUpgrade = default(bool?))
        {
            Tags = tags;
            Order = order;
            PackageReferenceId = packageReferenceId;
            ConfigurationReference = configurationReference;
            TreatFailureAsDeploymentFailure = treatFailureAsDeploymentFailure;
            EnableAutomaticUpgrade = enableAutomaticUpgrade;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets optional, Specifies a passthrough value for more
        /// generic context.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public string Tags { get; set; }

        /// <summary>
        /// Gets or sets optional, Specifies the order in which the packages
        /// have to be installed
        /// </summary>
        [JsonProperty(PropertyName = "order")]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or sets specifies the GalleryApplicationVersion resource id on
        /// the form of
        /// /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
        /// </summary>
        [JsonProperty(PropertyName = "packageReferenceId")]
        public string PackageReferenceId { get; set; }

        /// <summary>
        /// Gets or sets optional, Specifies the uri to an azure blob that will
        /// replace the default configuration for the package if provided
        /// </summary>
        [JsonProperty(PropertyName = "configurationReference")]
        public string ConfigurationReference { get; set; }

        /// <summary>
        /// Gets or sets optional, If true, any failure for any operation in
        /// the VmApplication will fail the deployment
        /// </summary>
        [JsonProperty(PropertyName = "treatFailureAsDeploymentFailure")]
        public bool? TreatFailureAsDeploymentFailure { get; set; }

        /// <summary>
        /// Gets or sets if set to true, when a new Gallery Application version
        /// is available in PIR/SIG, it will be automatically updated for the
        /// VM/VMSS
        /// </summary>
        [JsonProperty(PropertyName = "enableAutomaticUpgrade")]
        public bool? EnableAutomaticUpgrade { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PackageReferenceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PackageReferenceId");
            }
        }
    }
}
