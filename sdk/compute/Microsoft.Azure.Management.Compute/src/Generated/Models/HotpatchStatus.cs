// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes the properties of the last installed patch summary.
    /// </summary>
    public partial class HotpatchStatus
    {
        /// <summary>
        /// Initializes a new instance of the HotpatchStatus class.
        /// </summary>
        public HotpatchStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HotpatchStatus class.
        /// </summary>
        /// <param name="hotpatchEnablementStatus">Represents what state of
        /// hotpatching opt in the VM is in. .&lt;br /&gt;&lt;br /&gt; Possible
        /// values are:&lt;br /&gt;&lt;br /&gt; **Unknown** - Safe default
        /// until initialized. &lt;br /&gt;&lt;br /&gt; **PendingEvaluation** -
        /// Value reported when there's no data from the extension to work
        /// with. &lt;br /&gt;&lt;br /&gt; **NotRequested** - Extension reports
        /// that there was no instruction to enable hotpatching. &lt;br
        /// /&gt;&lt;br /&gt; **ActionRequired** - Extension reports that
        /// customer action is required to complete opt in. &lt;br /&gt;&lt;br
        /// /&gt; **Enabled** - Extension reports that hotpatching enablement
        /// has completed. Possible values include: 'Unknown',
        /// 'PendingEvaluation', 'Disabled', 'ActionRequired',
        /// 'Enabled'</param>
        /// <param name="lastRefreshedTime">The UTC timestamp when the status
        /// was last refreshed.</param>
        /// <param name="error">The errors that were encountered during
        /// execution of the operation. The details array contains the list of
        /// them.</param>
        public HotpatchStatus(string hotpatchEnablementStatus = default(string), System.DateTime? lastRefreshedTime = default(System.DateTime?), ApiError error = default(ApiError))
        {
            HotpatchEnablementStatus = hotpatchEnablementStatus;
            LastRefreshedTime = lastRefreshedTime;
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets represents what state of hotpatching opt in the VM is in.
        /// .&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; Possible values
        /// are:&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt; **Unknown** - Safe
        /// default until initialized. &amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
        /// **PendingEvaluation** - Value reported when there's no data from
        /// the extension to work with. &amp;lt;br /&amp;gt;&amp;lt;br
        /// /&amp;gt; **NotRequested** - Extension reports that there was no
        /// instruction to enable hotpatching. &amp;lt;br /&amp;gt;&amp;lt;br
        /// /&amp;gt; **ActionRequired** - Extension reports that customer
        /// action is required to complete opt in. &amp;lt;br
        /// /&amp;gt;&amp;lt;br /&amp;gt; **Enabled** - Extension reports that
        /// hotpatching enablement has completed. Possible values include:
        /// 'Unknown', 'PendingEvaluation', 'Disabled', 'ActionRequired',
        /// 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "hotpatchEnablementStatus")]
        public string HotpatchEnablementStatus { get; private set; }

        /// <summary>
        /// Gets the UTC timestamp when the status was last refreshed.
        /// </summary>
        [JsonProperty(PropertyName = "lastRefreshedTime")]
        public System.DateTime? LastRefreshedTime { get; private set; }

        /// <summary>
        /// Gets the errors that were encountered during execution of the
        /// operation. The details array contains the list of them.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ApiError Error { get; private set; }

    }
}
