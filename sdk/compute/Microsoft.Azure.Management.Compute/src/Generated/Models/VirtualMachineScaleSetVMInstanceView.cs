// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The instance view of a virtual machine scale set VM.
    /// </summary>
    public partial class VirtualMachineScaleSetVMInstanceView
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineScaleSetVMInstanceView class.
        /// </summary>
        public VirtualMachineScaleSetVMInstanceView()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineScaleSetVMInstanceView class.
        /// </summary>
        /// <param name="platformUpdateDomain">The Update Domain count.</param>
        /// <param name="platformFaultDomain">The Fault Domain count.</param>
        /// <param name="rdpThumbPrint">The Remote desktop certificate
        /// thumbprint.</param>
        /// <param name="vmAgent">The VM Agent running on the virtual
        /// machine.</param>
        /// <param name="maintenanceRedeployStatus">The Maintenance Operation
        /// status on the virtual machine.</param>
        /// <param name="disks">The disks information.</param>
        /// <param name="extensions">The extensions information.</param>
        /// <param name="vmHealth">The health status for the VM.</param>
        /// <param name="bootDiagnostics">Boot Diagnostics is a debugging
        /// feature which allows you to view Console Output and Screenshot to
        /// diagnose VM status. You can easily view the output of your console
        /// log. Azure also enables you to see a screenshot of the VM from the
        /// hypervisor.</param>
        /// <param name="statuses">The resource status information.</param>
        /// <param name="assignedHost">Resource id of the dedicated host, on
        /// which the virtual machine is allocated through automatic placement,
        /// when the virtual machine is associated with a dedicated host group
        /// that has automatic placement enabled. Minimum api-version:
        /// 2020-06-01.</param>
        /// <param name="placementGroupId">The placement group in which the VM
        /// is running. If the VM is deallocated it will not have a
        /// placementGroupId.</param>
        /// <param name="computerName">Specifies the host OS name of the
        /// virtual machine. &lt;br&gt;&lt;br&gt; This name cannot be updated
        /// after the VM is created. &lt;br&gt;&lt;br&gt; **Max-length
        /// (Windows):** 15 characters &lt;br&gt;&lt;br&gt; **Max-length
        /// (Linux):** 64 characters. &lt;br&gt;&lt;br&gt; For naming
        /// conventions and restrictions see [Azure infrastructure services
        /// implementation
        /// guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).</param>
        /// <param name="osName">The Operating System running on the hybrid
        /// machine.</param>
        /// <param name="osVersion">The version of Operating System running on
        /// the hybrid machine.</param>
        /// <param name="hyperVGeneration">The hypervisor generation of the
        /// Virtual Machine [V1, V2]. Possible values include: 'V1',
        /// 'V2'</param>
        public VirtualMachineScaleSetVMInstanceView(int? platformUpdateDomain = default(int?), int? platformFaultDomain = default(int?), string rdpThumbPrint = default(string), VirtualMachineAgentInstanceView vmAgent = default(VirtualMachineAgentInstanceView), MaintenanceRedeployStatus maintenanceRedeployStatus = default(MaintenanceRedeployStatus), IList<DiskInstanceView> disks = default(IList<DiskInstanceView>), IList<VirtualMachineExtensionInstanceView> extensions = default(IList<VirtualMachineExtensionInstanceView>), VirtualMachineHealthStatus vmHealth = default(VirtualMachineHealthStatus), BootDiagnosticsInstanceView bootDiagnostics = default(BootDiagnosticsInstanceView), IList<InstanceViewStatus> statuses = default(IList<InstanceViewStatus>), string assignedHost = default(string), string placementGroupId = default(string), string computerName = default(string), string osName = default(string), string osVersion = default(string), string hyperVGeneration = default(string))
        {
            PlatformUpdateDomain = platformUpdateDomain;
            PlatformFaultDomain = platformFaultDomain;
            RdpThumbPrint = rdpThumbPrint;
            VmAgent = vmAgent;
            MaintenanceRedeployStatus = maintenanceRedeployStatus;
            Disks = disks;
            Extensions = extensions;
            VmHealth = vmHealth;
            BootDiagnostics = bootDiagnostics;
            Statuses = statuses;
            AssignedHost = assignedHost;
            PlacementGroupId = placementGroupId;
            ComputerName = computerName;
            OsName = osName;
            OsVersion = osVersion;
            HyperVGeneration = hyperVGeneration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Update Domain count.
        /// </summary>
        [JsonProperty(PropertyName = "platformUpdateDomain")]
        public int? PlatformUpdateDomain { get; set; }

        /// <summary>
        /// Gets or sets the Fault Domain count.
        /// </summary>
        [JsonProperty(PropertyName = "platformFaultDomain")]
        public int? PlatformFaultDomain { get; set; }

        /// <summary>
        /// Gets or sets the Remote desktop certificate thumbprint.
        /// </summary>
        [JsonProperty(PropertyName = "rdpThumbPrint")]
        public string RdpThumbPrint { get; set; }

        /// <summary>
        /// Gets or sets the VM Agent running on the virtual machine.
        /// </summary>
        [JsonProperty(PropertyName = "vmAgent")]
        public VirtualMachineAgentInstanceView VmAgent { get; set; }

        /// <summary>
        /// Gets or sets the Maintenance Operation status on the virtual
        /// machine.
        /// </summary>
        [JsonProperty(PropertyName = "maintenanceRedeployStatus")]
        public MaintenanceRedeployStatus MaintenanceRedeployStatus { get; set; }

        /// <summary>
        /// Gets or sets the disks information.
        /// </summary>
        [JsonProperty(PropertyName = "disks")]
        public IList<DiskInstanceView> Disks { get; set; }

        /// <summary>
        /// Gets or sets the extensions information.
        /// </summary>
        [JsonProperty(PropertyName = "extensions")]
        public IList<VirtualMachineExtensionInstanceView> Extensions { get; set; }

        /// <summary>
        /// Gets the health status for the VM.
        /// </summary>
        [JsonProperty(PropertyName = "vmHealth")]
        public VirtualMachineHealthStatus VmHealth { get; private set; }

        /// <summary>
        /// Gets or sets boot Diagnostics is a debugging feature which allows
        /// you to view Console Output and Screenshot to diagnose VM status.
        /// You can easily view the output of your console log. Azure also
        /// enables you to see a screenshot of the VM from the hypervisor.
        /// </summary>
        [JsonProperty(PropertyName = "bootDiagnostics")]
        public BootDiagnosticsInstanceView BootDiagnostics { get; set; }

        /// <summary>
        /// Gets or sets the resource status information.
        /// </summary>
        [JsonProperty(PropertyName = "statuses")]
        public IList<InstanceViewStatus> Statuses { get; set; }

        /// <summary>
        /// Gets resource id of the dedicated host, on which the virtual
        /// machine is allocated through automatic placement, when the virtual
        /// machine is associated with a dedicated host group that has
        /// automatic placement enabled. Minimum api-version: 2020-06-01.
        /// </summary>
        [JsonProperty(PropertyName = "assignedHost")]
        public string AssignedHost { get; private set; }

        /// <summary>
        /// Gets or sets the placement group in which the VM is running. If the
        /// VM is deallocated it will not have a placementGroupId.
        /// </summary>
        [JsonProperty(PropertyName = "placementGroupId")]
        public string PlacementGroupId { get; set; }

        /// <summary>
        /// Gets or sets specifies the host OS name of the virtual machine.
        /// &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; This name cannot be updated
        /// after the VM is created. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        /// **Max-length (Windows):** 15 characters
        /// &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; **Max-length (Linux):** 64
        /// characters. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; For naming
        /// conventions and restrictions see [Azure infrastructure services
        /// implementation
        /// guidelines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions).
        /// </summary>
        [JsonProperty(PropertyName = "computerName")]
        public string ComputerName { get; set; }

        /// <summary>
        /// Gets or sets the Operating System running on the hybrid machine.
        /// </summary>
        [JsonProperty(PropertyName = "osName")]
        public string OsName { get; set; }

        /// <summary>
        /// Gets or sets the version of Operating System running on the hybrid
        /// machine.
        /// </summary>
        [JsonProperty(PropertyName = "osVersion")]
        public string OsVersion { get; set; }

        /// <summary>
        /// Gets or sets the hypervisor generation of the Virtual Machine [V1,
        /// V2]. Possible values include: 'V1', 'V2'
        /// </summary>
        [JsonProperty(PropertyName = "hyperVGeneration")]
        public string HyperVGeneration { get; set; }

    }
}
