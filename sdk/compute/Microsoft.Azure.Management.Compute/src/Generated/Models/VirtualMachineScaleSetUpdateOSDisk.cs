// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes virtual machine scale set operating system disk Update
    /// Object. This should be used for Updating VMSS OS Disk.
    /// </summary>
    public partial class VirtualMachineScaleSetUpdateOSDisk
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineScaleSetUpdateOSDisk class.
        /// </summary>
        public VirtualMachineScaleSetUpdateOSDisk()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// VirtualMachineScaleSetUpdateOSDisk class.
        /// </summary>
        /// <param name="caching">The caching type. Possible values include:
        /// 'None', 'ReadOnly', 'ReadWrite'</param>
        /// <param name="writeAcceleratorEnabled">Specifies whether
        /// writeAccelerator should be enabled or disabled on the disk.</param>
        /// <param name="diskSizeGB">Specifies the size of the operating system
        /// disk in gigabytes. This element can be used to overwrite the size
        /// of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This
        /// value cannot be larger than 1023 GB</param>
        /// <param name="image">The Source User Image VirtualHardDisk. This
        /// VirtualHardDisk will be copied before using it to attach to the
        /// Virtual Machine. If SourceImage is provided, the destination
        /// VirtualHardDisk should not exist.</param>
        /// <param name="vhdContainers">The list of virtual hard disk container
        /// uris.</param>
        /// <param name="managedDisk">The managed disk parameters.</param>
        /// <param name="deleteOption">[In Preview] Specifies the behavior of
        /// the managed OS Disk when the virtual machines in the scale set are
        /// deleted.&lt;br&gt;&lt;br&gt;Possible values are
        /// &lt;br&gt;&lt;br&gt;**Delete** If this value is used, the OS disk
        /// is deleted when VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If
        /// this value is used, the OS disk is retained after VM is deleted.
        /// &lt;br&gt;&lt;br&gt;NOTE: This is not applicable for VMSS uniform.
        /// The disks of virtual machines in VMSS uniform are deleted when VMs
        /// are deleted. Possible values include: 'Delete', 'Detach'</param>
        public VirtualMachineScaleSetUpdateOSDisk(CachingTypes? caching = default(CachingTypes?), bool? writeAcceleratorEnabled = default(bool?), int? diskSizeGB = default(int?), VirtualHardDisk image = default(VirtualHardDisk), IList<string> vhdContainers = default(IList<string>), VirtualMachineScaleSetManagedDiskParameters managedDisk = default(VirtualMachineScaleSetManagedDiskParameters), string deleteOption = default(string))
        {
            Caching = caching;
            WriteAcceleratorEnabled = writeAcceleratorEnabled;
            DiskSizeGB = diskSizeGB;
            Image = image;
            VhdContainers = vhdContainers;
            ManagedDisk = managedDisk;
            DeleteOption = deleteOption;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the caching type. Possible values include: 'None',
        /// 'ReadOnly', 'ReadWrite'
        /// </summary>
        [JsonProperty(PropertyName = "caching")]
        public CachingTypes? Caching { get; set; }

        /// <summary>
        /// Gets or sets specifies whether writeAccelerator should be enabled
        /// or disabled on the disk.
        /// </summary>
        [JsonProperty(PropertyName = "writeAcceleratorEnabled")]
        public bool? WriteAcceleratorEnabled { get; set; }

        /// <summary>
        /// Gets or sets specifies the size of the operating system disk in
        /// gigabytes. This element can be used to overwrite the size of the
        /// disk in a virtual machine image.
        /// &amp;lt;br&amp;gt;&amp;lt;br&amp;gt; This value cannot be larger
        /// than 1023 GB
        /// </summary>
        [JsonProperty(PropertyName = "diskSizeGB")]
        public int? DiskSizeGB { get; set; }

        /// <summary>
        /// Gets or sets the Source User Image VirtualHardDisk. This
        /// VirtualHardDisk will be copied before using it to attach to the
        /// Virtual Machine. If SourceImage is provided, the destination
        /// VirtualHardDisk should not exist.
        /// </summary>
        [JsonProperty(PropertyName = "image")]
        public VirtualHardDisk Image { get; set; }

        /// <summary>
        /// Gets or sets the list of virtual hard disk container uris.
        /// </summary>
        [JsonProperty(PropertyName = "vhdContainers")]
        public IList<string> VhdContainers { get; set; }

        /// <summary>
        /// Gets or sets the managed disk parameters.
        /// </summary>
        [JsonProperty(PropertyName = "managedDisk")]
        public VirtualMachineScaleSetManagedDiskParameters ManagedDisk { get; set; }

        /// <summary>
        /// Gets or sets [In Preview] Specifies the behavior of the managed OS
        /// Disk when the virtual machines in the scale set are
        /// deleted.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Possible values are
        /// &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;**Delete** If this value is
        /// used, the OS disk is deleted when VM is
        /// deleted.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; **Detach** If this
        /// value is used, the OS disk is retained after VM is deleted.
        /// &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;NOTE: This is not applicable
        /// for VMSS uniform. The disks of virtual machines in VMSS uniform are
        /// deleted when VMs are deleted. Possible values include: 'Delete',
        /// 'Detach'
        /// </summary>
        [JsonProperty(PropertyName = "deleteOption")]
        public string DeleteOption { get; set; }

    }
}
