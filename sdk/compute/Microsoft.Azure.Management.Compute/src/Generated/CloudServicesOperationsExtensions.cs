// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CloudServicesOperations.
    /// </summary>
    public static partial class CloudServicesOperationsExtensions
    {
            /// <summary>
            /// Create or update a cloud service. Please note some properties can be set
            /// only during cloud service creation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='parameters'>
            /// The cloud service object.
            /// </param>
            public static CloudService CreateOrUpdate(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CloudService parameters = default(CloudService))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, cloudServiceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a cloud service. Please note some properties can be set
            /// only during cloud service creation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='parameters'>
            /// The cloud service object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudService> CreateOrUpdateAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CloudService parameters = default(CloudService), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, cloudServiceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='tags'>
            /// Resource tags
            /// </param>
            public static CloudService Update(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateAsync(resourceGroupName, cloudServiceName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='tags'>
            /// Resource tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudService> UpdateAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, cloudServiceName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            public static void Delete(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName)
            {
                operations.DeleteAsync(resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Display information about a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            public static CloudService Get(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName)
            {
                return operations.GetAsync(resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Display information about a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudService> GetAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the status of a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            public static CloudServiceInstanceView GetInstanceView(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName)
            {
                return operations.GetInstanceViewAsync(resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the status of a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudServiceInstanceView> GetInstanceViewAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceViewWithHttpMessagesAsync(resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all cloud services in the subscription, regardless of the
            /// associated resource group. Use nextLink property in the response to get the
            /// next page of Cloud Services. Do this till nextLink is null to fetch all the
            /// Cloud Services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<CloudService> ListAll(this ICloudServicesOperations operations)
            {
                return operations.ListAllAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all cloud services in the subscription, regardless of the
            /// associated resource group. Use nextLink property in the response to get the
            /// next page of Cloud Services. Do this till nextLink is null to fetch all the
            /// Cloud Services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudService>> ListAllAsync(this ICloudServicesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all cloud services under a resource group. Use nextLink
            /// property in the response to get the next page of Cloud Services. Do this
            /// till nextLink is null to fetch all the Cloud Services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            public static IPage<CloudService> List(this ICloudServicesOperations operations, string resourceGroupName)
            {
                return operations.ListAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all cloud services under a resource group. Use nextLink
            /// property in the response to get the next page of Cloud Services. Do this
            /// till nextLink is null to fetch all the Cloud Services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudService>> ListAsync(this ICloudServicesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts the cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            public static void Start(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName)
            {
                operations.StartAsync(resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Power off the cloud service. Note that resources are still attached and you
            /// are getting charged for the resources.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            public static void PowerOff(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName)
            {
                operations.PowerOffAsync(resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power off the cloud service. Note that resources are still attached and you
            /// are getting charged for the resources.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PowerOffAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PowerOffWithHttpMessagesAsync(resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restarts one or more role instances in a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            public static void Restart(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty)
            {
                operations.RestartAsync(resourceGroupName, cloudServiceName, roleInstancesProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts one or more role instances in a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartWithHttpMessagesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reimage asynchronous operation reinstalls the operating system on instances
            /// of web roles or worker roles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            public static void Reimage(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty)
            {
                operations.ReimageAsync(resourceGroupName, cloudServiceName, roleInstancesProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reimage asynchronous operation reinstalls the operating system on instances
            /// of web roles or worker roles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReimageAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReimageWithHttpMessagesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Rebuild Role Instances reinstalls the operating system on instances of web
            /// roles or worker roles and initializes the storage resources that are used
            /// by them. If you do not want to initialize storage resources, you can use
            /// Reimage Role Instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            public static void Rebuild(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty)
            {
                operations.RebuildAsync(resourceGroupName, cloudServiceName, roleInstancesProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rebuild Role Instances reinstalls the operating system on instances of web
            /// roles or worker roles and initializes the storage resources that are used
            /// by them. If you do not want to initialize storage resources, you can use
            /// Reimage Role Instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RebuildAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RebuildWithHttpMessagesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes role instances in a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            public static void DeleteInstances(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty)
            {
                operations.DeleteInstancesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes role instances in a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInstancesAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteInstancesWithHttpMessagesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a cloud service. Please note some properties can be set
            /// only during cloud service creation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='parameters'>
            /// The cloud service object.
            /// </param>
            public static CloudService BeginCreateOrUpdate(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CloudService parameters = default(CloudService))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, cloudServiceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a cloud service. Please note some properties can be set
            /// only during cloud service creation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='parameters'>
            /// The cloud service object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudService> BeginCreateOrUpdateAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CloudService parameters = default(CloudService), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, cloudServiceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='tags'>
            /// Resource tags
            /// </param>
            public static CloudService BeginUpdate(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.BeginUpdateAsync(resourceGroupName, cloudServiceName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='tags'>
            /// Resource tags
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudService> BeginUpdateAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, cloudServiceName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            public static void BeginDelete(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName)
            {
                operations.BeginDeleteAsync(resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Starts the cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            public static void BeginStart(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName)
            {
                operations.BeginStartAsync(resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginStartAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Power off the cloud service. Note that resources are still attached and you
            /// are getting charged for the resources.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            public static void BeginPowerOff(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName)
            {
                operations.BeginPowerOffAsync(resourceGroupName, cloudServiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Power off the cloud service. Note that resources are still attached and you
            /// are getting charged for the resources.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPowerOffAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginPowerOffWithHttpMessagesAsync(resourceGroupName, cloudServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restarts one or more role instances in a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            public static void BeginRestart(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty)
            {
                operations.BeginRestartAsync(resourceGroupName, cloudServiceName, roleInstancesProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts one or more role instances in a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestartAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestartWithHttpMessagesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Reimage asynchronous operation reinstalls the operating system on instances
            /// of web roles or worker roles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            public static void BeginReimage(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty)
            {
                operations.BeginReimageAsync(resourceGroupName, cloudServiceName, roleInstancesProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reimage asynchronous operation reinstalls the operating system on instances
            /// of web roles or worker roles.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginReimageAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginReimageWithHttpMessagesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Rebuild Role Instances reinstalls the operating system on instances of web
            /// roles or worker roles and initializes the storage resources that are used
            /// by them. If you do not want to initialize storage resources, you can use
            /// Reimage Role Instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            public static void BeginRebuild(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty)
            {
                operations.BeginRebuildAsync(resourceGroupName, cloudServiceName, roleInstancesProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Rebuild Role Instances reinstalls the operating system on instances of web
            /// roles or worker roles and initializes the storage resources that are used
            /// by them. If you do not want to initialize storage resources, you can use
            /// Reimage Role Instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRebuildAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRebuildWithHttpMessagesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes role instances in a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            public static void BeginDeleteInstances(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty)
            {
                operations.BeginDeleteInstancesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes role instances in a cloud service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group.
            /// </param>
            /// <param name='cloudServiceName'>
            /// Name of the cloud service.
            /// </param>
            /// <param name='roleInstancesProperty'>
            /// List of cloud service role instance names. Value of '*' will signify all
            /// role instances of the cloud service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteInstancesAsync(this ICloudServicesOperations operations, string resourceGroupName, string cloudServiceName, IList<string> roleInstancesProperty, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteInstancesWithHttpMessagesAsync(resourceGroupName, cloudServiceName, roleInstancesProperty, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a list of all cloud services in the subscription, regardless of the
            /// associated resource group. Use nextLink property in the response to get the
            /// next page of Cloud Services. Do this till nextLink is null to fetch all the
            /// Cloud Services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CloudService> ListAllNext(this ICloudServicesOperations operations, string nextPageLink)
            {
                return operations.ListAllNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all cloud services in the subscription, regardless of the
            /// associated resource group. Use nextLink property in the response to get the
            /// next page of Cloud Services. Do this till nextLink is null to fetch all the
            /// Cloud Services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudService>> ListAllNextAsync(this ICloudServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all cloud services under a resource group. Use nextLink
            /// property in the response to get the next page of Cloud Services. Do this
            /// till nextLink is null to fetch all the Cloud Services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CloudService> ListNext(this ICloudServicesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all cloud services under a resource group. Use nextLink
            /// property in the response to get the next page of Cloud Services. Do this
            /// till nextLink is null to fetch all the Cloud Services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudService>> ListNextAsync(this ICloudServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
