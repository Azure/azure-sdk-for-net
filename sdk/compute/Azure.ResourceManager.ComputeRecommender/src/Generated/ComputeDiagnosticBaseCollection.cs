// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ComputeRecommender
{
    /// <summary>
    /// A class representing a collection of <see cref="ComputeDiagnosticBaseResource"/> and their operations.
    /// Each <see cref="ComputeDiagnosticBaseResource"/> in the collection will belong to the same instance of <see cref="SubscriptionResource"/>.
    /// To get a <see cref="ComputeDiagnosticBaseCollection"/> instance call the GetComputeDiagnosticBases method from an instance of <see cref="SubscriptionResource"/>.
    /// </summary>
    public partial class ComputeDiagnosticBaseCollection : ArmCollection
    {
        private readonly ClientDiagnostics _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics;
        private readonly ComputeDiagnosticBasesRestOperations _computeDiagnosticBaseComputeDiagnosticBasesRestClient;

        /// <summary> Initializes a new instance of the <see cref="ComputeDiagnosticBaseCollection"/> class for mocking. </summary>
        protected ComputeDiagnosticBaseCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ComputeDiagnosticBaseCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ComputeDiagnosticBaseCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ComputeRecommender", ComputeDiagnosticBaseResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ComputeDiagnosticBaseResource.ResourceType, out string computeDiagnosticBaseComputeDiagnosticBasesApiVersion);
            _computeDiagnosticBaseComputeDiagnosticBasesRestClient = new ComputeDiagnosticBasesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, computeDiagnosticBaseComputeDiagnosticBasesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SubscriptionResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SubscriptionResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets Spot Placement Scores metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ComputeDiagnosticBaseResource>> GetAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseCollection.Get");
            scope.Start();
            try
            {
                var response = await _computeDiagnosticBaseComputeDiagnosticBasesRestClient.GetAsync(Id.SubscriptionId, location, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ComputeDiagnosticBaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets Spot Placement Scores metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ComputeDiagnosticBaseResource> Get(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseCollection.Get");
            scope.Start();
            try
            {
                var response = _computeDiagnosticBaseComputeDiagnosticBasesRestClient.Get(Id.SubscriptionId, location, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ComputeDiagnosticBaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseCollection.Exists");
            scope.Start();
            try
            {
                var response = await _computeDiagnosticBaseComputeDiagnosticBasesRestClient.GetAsync(Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseCollection.Exists");
            scope.Start();
            try
            {
                var response = _computeDiagnosticBaseComputeDiagnosticBasesRestClient.Get(Id.SubscriptionId, location, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<NullableResponse<ComputeDiagnosticBaseResource>> GetIfExistsAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _computeDiagnosticBaseComputeDiagnosticBasesRestClient.GetAsync(Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ComputeDiagnosticBaseResource>(response.GetRawResponse());
                return Response.FromValue(new ComputeDiagnosticBaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual NullableResponse<ComputeDiagnosticBaseResource> GetIfExists(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _computeDiagnosticBaseComputeDiagnosticBasesRestClient.Get(Id.SubscriptionId, location, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ComputeDiagnosticBaseResource>(response.GetRawResponse());
                return Response.FromValue(new ComputeDiagnosticBaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
