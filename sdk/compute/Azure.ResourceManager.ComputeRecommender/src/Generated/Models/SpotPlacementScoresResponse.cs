// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ComputeRecommender.Models
{
    /// <summary> SpotPlacementScores API response. </summary>
    public partial class SpotPlacementScoresResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SpotPlacementScoresResponse"/>. </summary>
        internal SpotPlacementScoresResponse()
        {
            DesiredLocations = new ChangeTrackingList<string>();
            DesiredSizes = new ChangeTrackingList<ResourceSize>();
            PlacementScores = new ChangeTrackingList<PlacementScore>();
        }

        /// <summary> Initializes a new instance of <see cref="SpotPlacementScoresResponse"/>. </summary>
        /// <param name="desiredLocations"> The desired regions. </param>
        /// <param name="desiredSizes"> The desired virtual machine SKU sizes. </param>
        /// <param name="desiredCount"> Desired instance count per region/zone based on the scope. </param>
        /// <param name="availabilityZones"> Defines if the scope is zonal or regional. </param>
        /// <param name="placementScores"> A placement score indicating the likelihood of successfully allocating the specified Spot VM(s), as well as the expected lifetimes of the Spot VM(s) after allocation. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SpotPlacementScoresResponse(IReadOnlyList<string> desiredLocations, IReadOnlyList<ResourceSize> desiredSizes, int? desiredCount, bool? availabilityZones, IReadOnlyList<PlacementScore> placementScores, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DesiredLocations = desiredLocations;
            DesiredSizes = desiredSizes;
            DesiredCount = desiredCount;
            AvailabilityZones = availabilityZones;
            PlacementScores = placementScores;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The desired regions. </summary>
        public IReadOnlyList<string> DesiredLocations { get; }
        /// <summary> The desired virtual machine SKU sizes. </summary>
        public IReadOnlyList<ResourceSize> DesiredSizes { get; }
        /// <summary> Desired instance count per region/zone based on the scope. </summary>
        public int? DesiredCount { get; }
        /// <summary> Defines if the scope is zonal or regional. </summary>
        public bool? AvailabilityZones { get; }
        /// <summary> A placement score indicating the likelihood of successfully allocating the specified Spot VM(s), as well as the expected lifetimes of the Spot VM(s) after allocation. </summary>
        public IReadOnlyList<PlacementScore> PlacementScores { get; }
    }
}
