// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ComputeRecommender.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ComputeRecommender
{
    /// <summary>
    /// A Class representing a ComputeDiagnosticBase along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="ComputeDiagnosticBaseResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetComputeDiagnosticBaseResource method.
    /// Otherwise you can get one from its parent resource <see cref="SubscriptionResource"/> using the GetComputeDiagnosticBase method.
    /// </summary>
    public partial class ComputeDiagnosticBaseResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="ComputeDiagnosticBaseResource"/> instance. </summary>
        /// <param name="subscriptionId"> The subscriptionId. </param>
        /// <param name="location"> The location. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, AzureLocation location)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics;
        private readonly ComputeDiagnosticBasesRestOperations _computeDiagnosticBaseComputeDiagnosticBasesRestClient;
        private readonly ComputeDiagnosticBaseData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Compute/locations/placementScores";

        /// <summary> Initializes a new instance of the <see cref="ComputeDiagnosticBaseResource"/> class for mocking. </summary>
        protected ComputeDiagnosticBaseResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ComputeDiagnosticBaseResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ComputeDiagnosticBaseResource(ArmClient client, ComputeDiagnosticBaseData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ComputeDiagnosticBaseResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ComputeDiagnosticBaseResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ComputeRecommender", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string computeDiagnosticBaseComputeDiagnosticBasesApiVersion);
            _computeDiagnosticBaseComputeDiagnosticBasesRestClient = new ComputeDiagnosticBasesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, computeDiagnosticBaseComputeDiagnosticBasesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ComputeDiagnosticBaseData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets Spot Placement Scores metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ComputeDiagnosticBaseResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseResource.Get");
            scope.Start();
            try
            {
                var response = await _computeDiagnosticBaseComputeDiagnosticBasesRestClient.GetAsync(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ComputeDiagnosticBaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets Spot Placement Scores metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ComputeDiagnosticBaseResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseResource.Get");
            scope.Start();
            try
            {
                var response = _computeDiagnosticBaseComputeDiagnosticBasesRestClient.Get(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ComputeDiagnosticBaseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generates placement scores for Spot VM skus.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot/generate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBases_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> SpotPlacementScores object supplied in the body of the Post spot placement scores operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<SpotPlacementScoresResponse>> PostAsync(SpotPlacementScoresContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseResource.Post");
            scope.Start();
            try
            {
                var response = await _computeDiagnosticBaseComputeDiagnosticBasesRestClient.PostAsync(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generates placement scores for Spot VM skus.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot/generate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBases_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ComputeDiagnosticBaseResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> SpotPlacementScores object supplied in the body of the Post spot placement scores operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<SpotPlacementScoresResponse> Post(SpotPlacementScoresContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _computeDiagnosticBaseComputeDiagnosticBasesClientDiagnostics.CreateScope("ComputeDiagnosticBaseResource.Post");
            scope.Start();
            try
            {
                var response = _computeDiagnosticBaseComputeDiagnosticBasesRestClient.Post(Id.SubscriptionId, new AzureLocation(Id.Parent.Name), content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
