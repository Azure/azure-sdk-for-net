// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Gallery.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmGalleryModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Gallery.GalleryData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="description"> The description of this Shared Image Gallery resource. This property is updatable. </param>
        /// <param name="identifierUniqueName"> Describes the gallery unique name. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="sharingProfile"> Profile for gallery sharing to subscription or tenant. </param>
        /// <param name="isSoftDeleteEnabled"> Contains information about the soft deletion policy of the gallery. </param>
        /// <param name="sharingStatus"> Sharing status of current gallery. </param>
        /// <returns> A new <see cref="Gallery.GalleryData"/> instance for mocking. </returns>
        public static GalleryData GalleryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string description = null, string identifierUniqueName = null, GalleryProvisioningState? provisioningState = null, SharingProfile sharingProfile = null, bool? isSoftDeleteEnabled = null, SharingStatus sharingStatus = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                description,
                identifierUniqueName != null ? new GalleryIdentifier(identifierUniqueName, serializedAdditionalRawData: null) : null,
                provisioningState,
                sharingProfile,
                isSoftDeleteEnabled != null ? new SoftDeletePolicy(isSoftDeleteEnabled, serializedAdditionalRawData: null) : null,
                sharingStatus,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SharingProfile"/>. </summary>
        /// <param name="permission"> This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**. </param>
        /// <param name="groups"> A list of sharing profile groups. </param>
        /// <param name="communityGalleryInfo"> Information of community gallery if current gallery is shared to community. </param>
        /// <returns> A new <see cref="Models.SharingProfile"/> instance for mocking. </returns>
        public static SharingProfile SharingProfile(GallerySharingPermissionType? permission = null, IEnumerable<SharingProfileGroup> groups = null, CommunityGalleryInfo communityGalleryInfo = null)
        {
            groups ??= new List<SharingProfileGroup>();

            return new SharingProfile(permission, groups?.ToList(), communityGalleryInfo, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CommunityGalleryInfo"/>. </summary>
        /// <param name="publisherUriString"> The link to the publisher website. Visible to all users. </param>
        /// <param name="publisherContact"> Community gallery publisher support email. The email address of the publisher. Visible to all users. </param>
        /// <param name="eula"> End-user license agreement for community gallery image. </param>
        /// <param name="publicNamePrefix"> The prefix of the gallery name that will be displayed publicly. Visible to all users. </param>
        /// <param name="communityGalleryEnabled"> Contains info about whether community gallery sharing is enabled. </param>
        /// <param name="publicNames"> Community gallery public name list. </param>
        /// <returns> A new <see cref="Models.CommunityGalleryInfo"/> instance for mocking. </returns>
        public static CommunityGalleryInfo CommunityGalleryInfo(string publisherUriString = null, string publisherContact = null, string eula = null, string publicNamePrefix = null, bool? communityGalleryEnabled = null, IEnumerable<string> publicNames = null)
        {
            publicNames ??= new List<string>();

            return new CommunityGalleryInfo(
                publisherUriString,
                publisherContact,
                eula,
                publicNamePrefix,
                communityGalleryEnabled,
                publicNames?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SharingStatus"/>. </summary>
        /// <param name="aggregatedState"> Aggregated sharing state of current gallery. </param>
        /// <param name="summary"> Summary of all regional sharing status. </param>
        /// <returns> A new <see cref="Models.SharingStatus"/> instance for mocking. </returns>
        public static SharingStatus SharingStatus(SharingState? aggregatedState = null, IEnumerable<RegionalSharingStatus> summary = null)
        {
            summary ??= new List<RegionalSharingStatus>();

            return new SharingStatus(aggregatedState, summary?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RegionalSharingStatus"/>. </summary>
        /// <param name="region"> Region name. </param>
        /// <param name="state"> Gallery sharing state in current region. </param>
        /// <param name="details"> Details of gallery regional sharing failure. </param>
        /// <returns> A new <see cref="Models.RegionalSharingStatus"/> instance for mocking. </returns>
        public static RegionalSharingStatus RegionalSharingStatus(string region = null, SharingState? state = null, string details = null)
        {
            return new RegionalSharingStatus(region, state, details, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> The description of this Shared Image Gallery resource. This property is updatable. </param>
        /// <param name="identifierUniqueName"> Describes the gallery unique name. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="sharingProfile"> Profile for gallery sharing to subscription or tenant. </param>
        /// <param name="isSoftDeleteEnabled"> Contains information about the soft deletion policy of the gallery. </param>
        /// <param name="sharingStatus"> Sharing status of current gallery. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.GalleryPatch"/> instance for mocking. </returns>
        public static GalleryPatch GalleryPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string identifierUniqueName = null, GalleryProvisioningState? provisioningState = null, SharingProfile sharingProfile = null, bool? isSoftDeleteEnabled = null, SharingStatus sharingStatus = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryPatch(
                id,
                name,
                resourceType,
                systemData,
                description,
                identifierUniqueName != null ? new GalleryIdentifier(identifierUniqueName, serializedAdditionalRawData: null) : null,
                provisioningState,
                sharingProfile,
                isSoftDeleteEnabled != null ? new SoftDeletePolicy(isSoftDeleteEnabled, serializedAdditionalRawData: null) : null,
                sharingStatus,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.GalleryApplicationData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="description"> The description of this gallery Application Definition resource. This property is updatable. </param>
        /// <param name="eula"> The Eula agreement for the gallery Application Definition. </param>
        /// <param name="privacyStatementUri"> The privacy statement uri. </param>
        /// <param name="releaseNoteUri"> The release note uri. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="supportedOSType"> This property allows you to specify the supported type of the OS that application is built for. Possible values are: **Windows,** **Linux.**. </param>
        /// <param name="customActions"> A list of custom actions that can be performed with all of the Gallery Application Versions within this Gallery Application. </param>
        /// <returns> A new <see cref="Gallery.GalleryApplicationData"/> instance for mocking. </returns>
        public static GalleryApplicationData GalleryApplicationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string description = null, string eula = null, Uri privacyStatementUri = null, Uri releaseNoteUri = null, DateTimeOffset? endOfLifeOn = null, SupportedOperatingSystemType? supportedOSType = null, IEnumerable<GalleryApplicationCustomAction> customActions = null)
        {
            tags ??= new Dictionary<string, string>();
            customActions ??= new List<GalleryApplicationCustomAction>();

            return new GalleryApplicationData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                description,
                eula,
                privacyStatementUri,
                releaseNoteUri,
                endOfLifeOn,
                supportedOSType,
                customActions?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryApplicationPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> The description of this gallery Application Definition resource. This property is updatable. </param>
        /// <param name="eula"> The Eula agreement for the gallery Application Definition. </param>
        /// <param name="privacyStatementUri"> The privacy statement uri. </param>
        /// <param name="releaseNoteUri"> The release note uri. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="supportedOSType"> This property allows you to specify the supported type of the OS that application is built for. Possible values are: **Windows,** **Linux.**. </param>
        /// <param name="customActions"> A list of custom actions that can be performed with all of the Gallery Application Versions within this Gallery Application. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.GalleryApplicationPatch"/> instance for mocking. </returns>
        public static GalleryApplicationPatch GalleryApplicationPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string eula = null, Uri privacyStatementUri = null, Uri releaseNoteUri = null, DateTimeOffset? endOfLifeOn = null, SupportedOperatingSystemType? supportedOSType = null, IEnumerable<GalleryApplicationCustomAction> customActions = null, IDictionary<string, string> tags = null)
        {
            customActions ??= new List<GalleryApplicationCustomAction>();
            tags ??= new Dictionary<string, string>();

            return new GalleryApplicationPatch(
                id,
                name,
                resourceType,
                systemData,
                description,
                eula,
                privacyStatementUri,
                releaseNoteUri,
                endOfLifeOn,
                supportedOSType,
                customActions?.ToList(),
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.GalleryApplicationVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="publishingProfile"> The publishing profile of a gallery image version. </param>
        /// <param name="allowDeletionOfReplicatedLocations"> The safety profile of the Gallery Application Version. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="replicationStatus"> This is the replication status of the gallery image version. </param>
        /// <returns> A new <see cref="Gallery.GalleryApplicationVersionData"/> instance for mocking. </returns>
        public static GalleryApplicationVersionData GalleryApplicationVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, GalleryApplicationVersionPublishingProfile publishingProfile = null, bool? allowDeletionOfReplicatedLocations = null, GalleryProvisioningState? provisioningState = null, ReplicationStatus replicationStatus = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryApplicationVersionData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                publishingProfile,
                allowDeletionOfReplicatedLocations != null ? new GalleryApplicationVersionSafetyProfile(allowDeletionOfReplicatedLocations, serializedAdditionalRawData: null) : null,
                provisioningState,
                replicationStatus,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryApplicationVersionPublishingProfile"/>. </summary>
        /// <param name="targetRegions"> The target regions where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <param name="replicaCount"> The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable. </param>
        /// <param name="isExcludedFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. </param>
        /// <param name="publishedOn"> The timestamp for when the gallery image version is published. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="storageAccountType"> Specifies the storage account type to be used to store the image. This property is not updatable. </param>
        /// <param name="replicationMode"> Optional parameter which specifies the mode to be used for replication. This property is not updatable. </param>
        /// <param name="targetExtendedLocations"> The target extended locations where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <param name="source"> The source image from which the Image Version is going to be created. </param>
        /// <param name="manageActions"></param>
        /// <param name="settings"> Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set. </param>
        /// <param name="advancedSettings"> Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only. </param>
        /// <param name="enableHealthCheck"> Optional. Whether or not this application reports health. </param>
        /// <param name="customActions"> A list of custom actions that can be performed with this Gallery Application Version. </param>
        /// <returns> A new <see cref="Models.GalleryApplicationVersionPublishingProfile"/> instance for mocking. </returns>
        public static GalleryApplicationVersionPublishingProfile GalleryApplicationVersionPublishingProfile(IEnumerable<TargetRegion> targetRegions = null, int? replicaCount = null, bool? isExcludedFromLatest = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, ImageStorageAccountType? storageAccountType = null, GalleryReplicationMode? replicationMode = null, IEnumerable<GalleryTargetExtendedLocation> targetExtendedLocations = null, UserArtifactSource source = null, UserArtifactManagement manageActions = null, UserArtifactSettings settings = null, IDictionary<string, string> advancedSettings = null, bool? enableHealthCheck = null, IEnumerable<GalleryApplicationCustomAction> customActions = null)
        {
            targetRegions ??= new List<TargetRegion>();
            targetExtendedLocations ??= new List<GalleryTargetExtendedLocation>();
            advancedSettings ??= new Dictionary<string, string>();
            customActions ??= new List<GalleryApplicationCustomAction>();

            return new GalleryApplicationVersionPublishingProfile(
                targetRegions?.ToList(),
                replicaCount,
                isExcludedFromLatest,
                publishedOn,
                endOfLifeOn,
                storageAccountType,
                replicationMode,
                targetExtendedLocations?.ToList(),
                serializedAdditionalRawData: null,
                source,
                manageActions,
                settings,
                advancedSettings,
                enableHealthCheck,
                customActions?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryArtifactPublishingProfileBase"/>. </summary>
        /// <param name="targetRegions"> The target regions where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <param name="replicaCount"> The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable. </param>
        /// <param name="isExcludedFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. </param>
        /// <param name="publishedOn"> The timestamp for when the gallery image version is published. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="storageAccountType"> Specifies the storage account type to be used to store the image. This property is not updatable. </param>
        /// <param name="replicationMode"> Optional parameter which specifies the mode to be used for replication. This property is not updatable. </param>
        /// <param name="targetExtendedLocations"> The target extended locations where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <returns> A new <see cref="Models.GalleryArtifactPublishingProfileBase"/> instance for mocking. </returns>
        public static GalleryArtifactPublishingProfileBase GalleryArtifactPublishingProfileBase(IEnumerable<TargetRegion> targetRegions = null, int? replicaCount = null, bool? isExcludedFromLatest = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, ImageStorageAccountType? storageAccountType = null, GalleryReplicationMode? replicationMode = null, IEnumerable<GalleryTargetExtendedLocation> targetExtendedLocations = null)
        {
            targetRegions ??= new List<TargetRegion>();
            targetExtendedLocations ??= new List<GalleryTargetExtendedLocation>();

            return new GalleryArtifactPublishingProfileBase(
                targetRegions?.ToList(),
                replicaCount,
                isExcludedFromLatest,
                publishedOn,
                endOfLifeOn,
                storageAccountType,
                replicationMode,
                targetExtendedLocations?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReplicationStatus"/>. </summary>
        /// <param name="aggregatedState"> This is the aggregated replication status based on all the regional replication status flags. </param>
        /// <param name="summary"> This is a summary of replication status for each region. </param>
        /// <returns> A new <see cref="Models.ReplicationStatus"/> instance for mocking. </returns>
        public static ReplicationStatus ReplicationStatus(AggregatedReplicationState? aggregatedState = null, IEnumerable<RegionalReplicationStatus> summary = null)
        {
            summary ??= new List<RegionalReplicationStatus>();

            return new ReplicationStatus(aggregatedState, summary?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RegionalReplicationStatus"/>. </summary>
        /// <param name="region"> The region to which the gallery image version is being replicated to. </param>
        /// <param name="state"> This is the regional replication state. </param>
        /// <param name="details"> The details of the replication status. </param>
        /// <param name="progress"> It indicates progress of the replication job. </param>
        /// <returns> A new <see cref="Models.RegionalReplicationStatus"/> instance for mocking. </returns>
        public static RegionalReplicationStatus RegionalReplicationStatus(string region = null, RegionalReplicationState? state = null, string details = null, int? progress = null)
        {
            return new RegionalReplicationStatus(region, state, details, progress, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryApplicationVersionPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="publishingProfile"> The publishing profile of a gallery image version. </param>
        /// <param name="allowDeletionOfReplicatedLocations"> The safety profile of the Gallery Application Version. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="replicationStatus"> This is the replication status of the gallery image version. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.GalleryApplicationVersionPatch"/> instance for mocking. </returns>
        public static GalleryApplicationVersionPatch GalleryApplicationVersionPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GalleryApplicationVersionPublishingProfile publishingProfile = null, bool? allowDeletionOfReplicatedLocations = null, GalleryProvisioningState? provisioningState = null, ReplicationStatus replicationStatus = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryApplicationVersionPatch(
                id,
                name,
                resourceType,
                systemData,
                publishingProfile,
                allowDeletionOfReplicatedLocations != null ? new GalleryApplicationVersionSafetyProfile(allowDeletionOfReplicatedLocations, serializedAdditionalRawData: null) : null,
                provisioningState,
                replicationStatus,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.GalleryImageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="description"> The description of this gallery image definition resource. This property is updatable. </param>
        /// <param name="eula"> The Eula agreement for the gallery image definition. </param>
        /// <param name="privacyStatementUri"> The privacy statement uri. </param>
        /// <param name="releaseNoteUri"> The release note uri. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.**. </param>
        /// <param name="osState"> This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="recommended"> The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. </param>
        /// <param name="disallowedDiskTypes"> Describes the disallowed disk types. </param>
        /// <param name="purchasePlan"> Describes the gallery image definition purchase plan. This is used by marketplace images. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="features"> A list of gallery image features. </param>
        /// <param name="architecture"> The architecture of the image. Applicable to OS disks only. </param>
        /// <returns> A new <see cref="Gallery.GalleryImageData"/> instance for mocking. </returns>
        public static GalleryImageData GalleryImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string description = null, string eula = null, Uri privacyStatementUri = null, Uri releaseNoteUri = null, SupportedOperatingSystemType? osType = null, OperatingSystemStateType? osState = null, HyperVGeneration? hyperVGeneration = null, DateTimeOffset? endOfLifeOn = null, GalleryImageIdentifier identifier = null, RecommendedMachineConfiguration recommended = null, IEnumerable<string> disallowedDiskTypes = null, ImagePurchasePlan purchasePlan = null, GalleryProvisioningState? provisioningState = null, IEnumerable<GalleryImageFeature> features = null, ArchitectureType? architecture = null)
        {
            tags ??= new Dictionary<string, string>();
            disallowedDiskTypes ??= new List<string>();
            features ??= new List<GalleryImageFeature>();

            return new GalleryImageData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                description,
                eula,
                privacyStatementUri,
                releaseNoteUri,
                osType,
                osState,
                hyperVGeneration,
                endOfLifeOn,
                identifier,
                recommended,
                disallowedDiskTypes != null ? new Disallowed(disallowedDiskTypes?.ToList(), serializedAdditionalRawData: null) : null,
                purchasePlan,
                provisioningState,
                features?.ToList(),
                architecture,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImagePatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> The description of this gallery image definition resource. This property is updatable. </param>
        /// <param name="eula"> The Eula agreement for the gallery image definition. </param>
        /// <param name="privacyStatementUri"> The privacy statement uri. </param>
        /// <param name="releaseNoteUri"> The release note uri. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.**. </param>
        /// <param name="osState"> This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="recommended"> The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. </param>
        /// <param name="disallowedDiskTypes"> Describes the disallowed disk types. </param>
        /// <param name="purchasePlan"> Describes the gallery image definition purchase plan. This is used by marketplace images. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="features"> A list of gallery image features. </param>
        /// <param name="architecture"> The architecture of the image. Applicable to OS disks only. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.GalleryImagePatch"/> instance for mocking. </returns>
        public static GalleryImagePatch GalleryImagePatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, string eula = null, Uri privacyStatementUri = null, Uri releaseNoteUri = null, SupportedOperatingSystemType? osType = null, OperatingSystemStateType? osState = null, HyperVGeneration? hyperVGeneration = null, DateTimeOffset? endOfLifeOn = null, GalleryImageIdentifier identifier = null, RecommendedMachineConfiguration recommended = null, IEnumerable<string> disallowedDiskTypes = null, ImagePurchasePlan purchasePlan = null, GalleryProvisioningState? provisioningState = null, IEnumerable<GalleryImageFeature> features = null, ArchitectureType? architecture = null, IDictionary<string, string> tags = null)
        {
            disallowedDiskTypes ??= new List<string>();
            features ??= new List<GalleryImageFeature>();
            tags ??= new Dictionary<string, string>();

            return new GalleryImagePatch(
                id,
                name,
                resourceType,
                systemData,
                description,
                eula,
                privacyStatementUri,
                releaseNoteUri,
                osType,
                osState,
                hyperVGeneration,
                endOfLifeOn,
                identifier,
                recommended,
                disallowedDiskTypes != null ? new Disallowed(disallowedDiskTypes?.ToList(), serializedAdditionalRawData: null) : null,
                purchasePlan,
                provisioningState,
                features?.ToList(),
                architecture,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.GalleryImageVersionData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="publishingProfile"> The publishing profile of a gallery image Version. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="storageProfile"> This is the storage profile of a Gallery Image Version. </param>
        /// <param name="safetyProfile"> This is the safety profile of the Gallery Image Version. </param>
        /// <param name="replicationStatus"> This is the replication status of the gallery image version. </param>
        /// <param name="securityUefiSettings"> The security profile of a gallery image version. </param>
        /// <returns> A new <see cref="Gallery.GalleryImageVersionData"/> instance for mocking. </returns>
        public static GalleryImageVersionData GalleryImageVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, GalleryImageVersionPublishingProfile publishingProfile = null, GalleryProvisioningState? provisioningState = null, GalleryImageVersionStorageProfile storageProfile = null, GalleryImageVersionSafetyProfile safetyProfile = null, ReplicationStatus replicationStatus = null, GalleryImageVersionUefiSettings securityUefiSettings = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryImageVersionData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                publishingProfile,
                provisioningState,
                storageProfile,
                safetyProfile,
                replicationStatus,
                securityUefiSettings != null ? new ImageVersionSecurityProfile(securityUefiSettings, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageVersionPublishingProfile"/>. </summary>
        /// <param name="targetRegions"> The target regions where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <param name="replicaCount"> The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable. </param>
        /// <param name="isExcludedFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. </param>
        /// <param name="publishedOn"> The timestamp for when the gallery image version is published. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="storageAccountType"> Specifies the storage account type to be used to store the image. This property is not updatable. </param>
        /// <param name="replicationMode"> Optional parameter which specifies the mode to be used for replication. This property is not updatable. </param>
        /// <param name="targetExtendedLocations"> The target extended locations where the Image Version is going to be replicated to. This property is updatable. </param>
        /// <returns> A new <see cref="Models.GalleryImageVersionPublishingProfile"/> instance for mocking. </returns>
        public static GalleryImageVersionPublishingProfile GalleryImageVersionPublishingProfile(IEnumerable<TargetRegion> targetRegions = null, int? replicaCount = null, bool? isExcludedFromLatest = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, ImageStorageAccountType? storageAccountType = null, GalleryReplicationMode? replicationMode = null, IEnumerable<GalleryTargetExtendedLocation> targetExtendedLocations = null)
        {
            targetRegions ??= new List<TargetRegion>();
            targetExtendedLocations ??= new List<GalleryTargetExtendedLocation>();

            return new GalleryImageVersionPublishingProfile(
                targetRegions?.ToList(),
                replicaCount,
                isExcludedFromLatest,
                publishedOn,
                endOfLifeOn,
                storageAccountType,
                replicationMode,
                targetExtendedLocations?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryOSDiskImage"/>. </summary>
        /// <param name="sizeInGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'. </param>
        /// <param name="gallerySource"> The source for the disk image. </param>
        /// <returns> A new <see cref="Models.GalleryOSDiskImage"/> instance for mocking. </returns>
        public static GalleryOSDiskImage GalleryOSDiskImage(int? sizeInGB = null, HostCaching? hostCaching = null, GalleryDiskImageSource gallerySource = null)
        {
            return new GalleryOSDiskImage(sizeInGB, hostCaching, gallerySource, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryDiskImage"/>. </summary>
        /// <param name="sizeInGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'. </param>
        /// <param name="gallerySource"> The source for the disk image. </param>
        /// <returns> A new <see cref="Models.GalleryDiskImage"/> instance for mocking. </returns>
        public static GalleryDiskImage GalleryDiskImage(int? sizeInGB = null, HostCaching? hostCaching = null, GalleryDiskImageSource gallerySource = null)
        {
            return new GalleryDiskImage(sizeInGB, hostCaching, gallerySource, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryDataDiskImage"/>. </summary>
        /// <param name="sizeInGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'. </param>
        /// <param name="gallerySource"> The source for the disk image. </param>
        /// <param name="lun"> This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. </param>
        /// <returns> A new <see cref="Models.GalleryDataDiskImage"/> instance for mocking. </returns>
        public static GalleryDataDiskImage GalleryDataDiskImage(int? sizeInGB = null, HostCaching? hostCaching = null, GalleryDiskImageSource gallerySource = null, int lun = default)
        {
            return new GalleryDataDiskImage(sizeInGB, hostCaching, gallerySource, serializedAdditionalRawData: null, lun);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageVersionSafetyProfile"/>. </summary>
        /// <param name="allowDeletionOfReplicatedLocations"> Indicates whether or not removing this Gallery Image Version from replicated regions is allowed. </param>
        /// <param name="isReportedForPolicyViolation"> Indicates whether this image has been reported as violating Microsoft's policies. </param>
        /// <param name="policyViolations"> A list of Policy Violations that have been reported for this Gallery Image Version. </param>
        /// <returns> A new <see cref="Models.GalleryImageVersionSafetyProfile"/> instance for mocking. </returns>
        public static GalleryImageVersionSafetyProfile GalleryImageVersionSafetyProfile(bool? allowDeletionOfReplicatedLocations = null, bool? isReportedForPolicyViolation = null, IEnumerable<GalleryImageVersionPolicyViolation> policyViolations = null)
        {
            policyViolations ??= new List<GalleryImageVersionPolicyViolation>();

            return new GalleryImageVersionSafetyProfile(allowDeletionOfReplicatedLocations, serializedAdditionalRawData: null, isReportedForPolicyViolation, policyViolations?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageVersionPolicyViolation"/>. </summary>
        /// <param name="category"> Describes the nature of the policy violation. </param>
        /// <param name="details"> Describes specific details about why this policy violation was reported. </param>
        /// <returns> A new <see cref="Models.GalleryImageVersionPolicyViolation"/> instance for mocking. </returns>
        public static GalleryImageVersionPolicyViolation GalleryImageVersionPolicyViolation(GalleryImageVersionPolicyViolationCategory? category = null, string details = null)
        {
            return new GalleryImageVersionPolicyViolation(category, details, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageVersionPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="publishingProfile"> The publishing profile of a gallery image Version. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="storageProfile"> This is the storage profile of a Gallery Image Version. </param>
        /// <param name="safetyProfile"> This is the safety profile of the Gallery Image Version. </param>
        /// <param name="replicationStatus"> This is the replication status of the gallery image version. </param>
        /// <param name="securityUefiSettings"> The security profile of a gallery image version. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.GalleryImageVersionPatch"/> instance for mocking. </returns>
        public static GalleryImageVersionPatch GalleryImageVersionPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GalleryImageVersionPublishingProfile publishingProfile = null, GalleryProvisioningState? provisioningState = null, GalleryImageVersionStorageProfile storageProfile = null, GalleryImageVersionSafetyProfile safetyProfile = null, ReplicationStatus replicationStatus = null, GalleryImageVersionUefiSettings securityUefiSettings = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryImageVersionPatch(
                id,
                name,
                resourceType,
                systemData,
                publishingProfile,
                provisioningState,
                storageProfile,
                safetyProfile,
                replicationStatus,
                securityUefiSettings != null ? new ImageVersionSecurityProfile(securityUefiSettings, serializedAdditionalRawData: null) : null,
                tags,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.SharedGalleryData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="uniqueId"> The unique id of this shared gallery. </param>
        /// <param name="artifactTags"> The artifact tags of a shared gallery resource. </param>
        /// <returns> A new <see cref="Gallery.SharedGalleryData"/> instance for mocking. </returns>
        public static SharedGalleryData SharedGalleryData(string name = null, AzureLocation? location = null, string uniqueId = null, IReadOnlyDictionary<string, string> artifactTags = null)
        {
            artifactTags ??= new Dictionary<string, string>();

            return new SharedGalleryData(name, location, serializedAdditionalRawData: null, uniqueId, artifactTags);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PirSharedGalleryResourceData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="uniqueId"> The unique id of this shared gallery. </param>
        /// <returns> A new <see cref="Models.PirSharedGalleryResourceData"/> instance for mocking. </returns>
        public static PirSharedGalleryResourceData PirSharedGalleryResourceData(string name = null, AzureLocation? location = null, string uniqueId = null)
        {
            return new PirSharedGalleryResourceData(name, location, serializedAdditionalRawData: null, uniqueId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PirResourceData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <returns> A new <see cref="Models.PirResourceData"/> instance for mocking. </returns>
        public static PirResourceData PirResourceData(string name = null, AzureLocation? location = null)
        {
            return new PirResourceData(name, location, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.SharedGalleryImageData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="uniqueId"> The unique id of this shared gallery. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.**. </param>
        /// <param name="osState"> This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="recommended"> The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. </param>
        /// <param name="disallowedDiskTypes"> Describes the disallowed disk types. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="features"> A list of gallery image features. </param>
        /// <param name="purchasePlan"> Describes the gallery image definition purchase plan. This is used by marketplace images. </param>
        /// <param name="architecture"> The architecture of the image. Applicable to OS disks only. </param>
        /// <param name="privacyStatementUri"> Privacy statement uri for the current community gallery image. </param>
        /// <param name="eula"> End-user license agreement for the current community gallery image. </param>
        /// <param name="artifactTags"> The artifact tags of a shared gallery resource. </param>
        /// <returns> A new <see cref="Gallery.SharedGalleryImageData"/> instance for mocking. </returns>
        public static SharedGalleryImageData SharedGalleryImageData(string name = null, AzureLocation? location = null, string uniqueId = null, SupportedOperatingSystemType? osType = null, OperatingSystemStateType? osState = null, DateTimeOffset? endOfLifeOn = null, GalleryImageIdentifier identifier = null, RecommendedMachineConfiguration recommended = null, IEnumerable<string> disallowedDiskTypes = null, HyperVGeneration? hyperVGeneration = null, IEnumerable<GalleryImageFeature> features = null, ImagePurchasePlan purchasePlan = null, ArchitectureType? architecture = null, Uri privacyStatementUri = null, string eula = null, IReadOnlyDictionary<string, string> artifactTags = null)
        {
            disallowedDiskTypes ??= new List<string>();
            features ??= new List<GalleryImageFeature>();
            artifactTags ??= new Dictionary<string, string>();

            return new SharedGalleryImageData(
                name,
                location,
                serializedAdditionalRawData: null,
                uniqueId,
                osType,
                osState,
                endOfLifeOn,
                identifier,
                recommended,
                disallowedDiskTypes != null ? new Disallowed(disallowedDiskTypes?.ToList(), serializedAdditionalRawData: null) : null,
                hyperVGeneration,
                features?.ToList(),
                purchasePlan,
                architecture,
                privacyStatementUri,
                eula,
                artifactTags);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.SharedGalleryImageVersionData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="uniqueId"> The unique id of this shared gallery. </param>
        /// <param name="publishedOn"> The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="isExcludedFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. </param>
        /// <param name="storageProfile"> Describes the storage profile of the image version. </param>
        /// <param name="artifactTags"> The artifact tags of a shared gallery resource. </param>
        /// <returns> A new <see cref="Gallery.SharedGalleryImageVersionData"/> instance for mocking. </returns>
        public static SharedGalleryImageVersionData SharedGalleryImageVersionData(string name = null, AzureLocation? location = null, string uniqueId = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, bool? isExcludedFromLatest = null, SharedGalleryImageVersionStorageProfile storageProfile = null, IReadOnlyDictionary<string, string> artifactTags = null)
        {
            artifactTags ??= new Dictionary<string, string>();

            return new SharedGalleryImageVersionData(
                name,
                location,
                serializedAdditionalRawData: null,
                uniqueId,
                publishedOn,
                endOfLifeOn,
                isExcludedFromLatest,
                storageProfile,
                artifactTags);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SharedGalleryImageVersionStorageProfile"/>. </summary>
        /// <param name="osDiskImage"> This is the OS disk image. </param>
        /// <param name="dataDiskImages"> A list of data disk images. </param>
        /// <returns> A new <see cref="Models.SharedGalleryImageVersionStorageProfile"/> instance for mocking. </returns>
        public static SharedGalleryImageVersionStorageProfile SharedGalleryImageVersionStorageProfile(SharedGalleryOSDiskImage osDiskImage = null, IEnumerable<SharedGalleryDataDiskImage> dataDiskImages = null)
        {
            dataDiskImages ??= new List<SharedGalleryDataDiskImage>();

            return new SharedGalleryImageVersionStorageProfile(osDiskImage, dataDiskImages?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SharedGalleryOSDiskImage"/>. </summary>
        /// <param name="diskSizeGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'. </param>
        /// <returns> A new <see cref="Models.SharedGalleryOSDiskImage"/> instance for mocking. </returns>
        public static SharedGalleryOSDiskImage SharedGalleryOSDiskImage(int? diskSizeGB = null, SharedGalleryHostCaching? hostCaching = null)
        {
            return new SharedGalleryOSDiskImage(diskSizeGB, hostCaching, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SharedGalleryDiskImage"/>. </summary>
        /// <param name="diskSizeGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'. </param>
        /// <returns> A new <see cref="Models.SharedGalleryDiskImage"/> instance for mocking. </returns>
        public static SharedGalleryDiskImage SharedGalleryDiskImage(int? diskSizeGB = null, SharedGalleryHostCaching? hostCaching = null)
        {
            return new SharedGalleryDiskImage(diskSizeGB, hostCaching, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SharedGalleryDataDiskImage"/>. </summary>
        /// <param name="diskSizeGB"> This property indicates the size of the VHD to be created. </param>
        /// <param name="hostCaching"> The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'. </param>
        /// <param name="lun"> This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine. </param>
        /// <returns> A new <see cref="Models.SharedGalleryDataDiskImage"/> instance for mocking. </returns>
        public static SharedGalleryDataDiskImage SharedGalleryDataDiskImage(int? diskSizeGB = null, SharedGalleryHostCaching? hostCaching = null, int lun = default)
        {
            return new SharedGalleryDataDiskImage(diskSizeGB, hostCaching, serializedAdditionalRawData: null, lun);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.CommunityGalleryData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="uniqueId"> The unique id of this community gallery. </param>
        /// <param name="disclaimer"> The disclaimer for a community gallery resource. </param>
        /// <param name="artifactTags"> The artifact tags of a community gallery resource. </param>
        /// <param name="communityMetadata"> The metadata of community gallery. </param>
        /// <returns> A new <see cref="Gallery.CommunityGalleryData"/> instance for mocking. </returns>
        public static CommunityGalleryData CommunityGalleryData(string name = null, AzureLocation? location = null, ResourceType? resourceType = null, string uniqueId = null, string disclaimer = null, IReadOnlyDictionary<string, string> artifactTags = null, CommunityGalleryMetadata communityMetadata = null)
        {
            artifactTags ??= new Dictionary<string, string>();

            return new CommunityGalleryData(
                name,
                location,
                resourceType,
                uniqueId,
                serializedAdditionalRawData: null,
                disclaimer,
                artifactTags,
                communityMetadata);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CommunityGalleryMetadata"/>. </summary>
        /// <param name="publisherUri"> The publisher URI of this community gallery. </param>
        /// <param name="publisherContact"> The publisher email id of this community gallery. </param>
        /// <param name="eula"> The end-user license agreement for this community gallery. </param>
        /// <param name="publicNames"> A list of public names the gallery has. </param>
        /// <param name="privacyStatementUri"> The link for the privacy statement of this community gallery from the gallery publisher. </param>
        /// <returns> A new <see cref="Models.CommunityGalleryMetadata"/> instance for mocking. </returns>
        public static CommunityGalleryMetadata CommunityGalleryMetadata(Uri publisherUri = null, string publisherContact = null, string eula = null, IEnumerable<string> publicNames = null, Uri privacyStatementUri = null)
        {
            publicNames ??= new List<string>();

            return new CommunityGalleryMetadata(
                publisherUri,
                publisherContact,
                eula,
                publicNames?.ToList(),
                privacyStatementUri,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PirCommunityGalleryResourceData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="uniqueId"> The unique id of this community gallery. </param>
        /// <returns> A new <see cref="Models.PirCommunityGalleryResourceData"/> instance for mocking. </returns>
        public static PirCommunityGalleryResourceData PirCommunityGalleryResourceData(string name = null, AzureLocation? location = null, ResourceType? resourceType = null, string uniqueId = null)
        {
            return new PirCommunityGalleryResourceData(name, location, resourceType, uniqueId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.CommunityGalleryImageData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="uniqueId"> The unique id of this community gallery. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.**. </param>
        /// <param name="osState"> This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="imageIdentifier"> This is the community gallery image definition identifier. </param>
        /// <param name="recommended"> The properties describe the recommended machine configuration for this Image Definition. These properties are updatable. </param>
        /// <param name="disallowedDiskTypes"> Describes the disallowed disk types. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine. Applicable to OS disks only. </param>
        /// <param name="features"> A list of gallery image features. </param>
        /// <param name="purchasePlan"> Describes the gallery image definition purchase plan. This is used by marketplace images. </param>
        /// <param name="architecture"> The architecture of the image. Applicable to OS disks only. </param>
        /// <param name="privacyStatementUri"> Privacy statement URI for the current community gallery image. </param>
        /// <param name="eula"> The end-user license agreement for the current community gallery image. </param>
        /// <param name="disclaimer"> The disclaimer for a community gallery resource. </param>
        /// <param name="artifactTags"> The artifact tags of a community gallery resource. </param>
        /// <returns> A new <see cref="Gallery.CommunityGalleryImageData"/> instance for mocking. </returns>
        public static CommunityGalleryImageData CommunityGalleryImageData(string name = null, AzureLocation? location = null, ResourceType? resourceType = null, string uniqueId = null, SupportedOperatingSystemType? osType = null, OperatingSystemStateType? osState = null, DateTimeOffset? endOfLifeOn = null, CommunityGalleryImageIdentifier imageIdentifier = null, RecommendedMachineConfiguration recommended = null, IEnumerable<string> disallowedDiskTypes = null, HyperVGeneration? hyperVGeneration = null, IEnumerable<GalleryImageFeature> features = null, ImagePurchasePlan purchasePlan = null, ArchitectureType? architecture = null, Uri privacyStatementUri = null, string eula = null, string disclaimer = null, IReadOnlyDictionary<string, string> artifactTags = null)
        {
            disallowedDiskTypes ??= new List<string>();
            features ??= new List<GalleryImageFeature>();
            artifactTags ??= new Dictionary<string, string>();

            return new CommunityGalleryImageData(
                name,
                location,
                resourceType,
                uniqueId,
                serializedAdditionalRawData: null,
                osType,
                osState,
                endOfLifeOn,
                imageIdentifier,
                recommended,
                disallowedDiskTypes != null ? new Disallowed(disallowedDiskTypes?.ToList(), serializedAdditionalRawData: null) : null,
                hyperVGeneration,
                features?.ToList(),
                purchasePlan,
                architecture,
                privacyStatementUri,
                eula,
                disclaimer,
                artifactTags);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CommunityGalleryImageIdentifier"/>. </summary>
        /// <param name="publisher"> The name of the gallery image definition publisher. </param>
        /// <param name="offer"> The name of the gallery image definition offer. </param>
        /// <param name="sku"> The name of the gallery image definition SKU. </param>
        /// <returns> A new <see cref="Models.CommunityGalleryImageIdentifier"/> instance for mocking. </returns>
        public static CommunityGalleryImageIdentifier CommunityGalleryImageIdentifier(string publisher = null, string offer = null, string sku = null)
        {
            return new CommunityGalleryImageIdentifier(publisher, offer, sku, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Gallery.CommunityGalleryImageVersionData"/>. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="resourceType"> Resource type. </param>
        /// <param name="uniqueId"> The unique id of this community gallery. </param>
        /// <param name="publishedOn"> The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="endOfLifeOn"> The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This property is updatable. </param>
        /// <param name="isExcludedFromLatest"> If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version. </param>
        /// <param name="storageProfile"> Describes the storage profile of the image version. </param>
        /// <param name="disclaimer"> The disclaimer for a community gallery resource. </param>
        /// <param name="artifactTags"> The artifact tags of a community gallery resource. </param>
        /// <returns> A new <see cref="Gallery.CommunityGalleryImageVersionData"/> instance for mocking. </returns>
        public static CommunityGalleryImageVersionData CommunityGalleryImageVersionData(string name = null, AzureLocation? location = null, ResourceType? resourceType = null, string uniqueId = null, DateTimeOffset? publishedOn = null, DateTimeOffset? endOfLifeOn = null, bool? isExcludedFromLatest = null, SharedGalleryImageVersionStorageProfile storageProfile = null, string disclaimer = null, IReadOnlyDictionary<string, string> artifactTags = null)
        {
            artifactTags ??= new Dictionary<string, string>();

            return new CommunityGalleryImageVersionData(
                name,
                location,
                resourceType,
                uniqueId,
                serializedAdditionalRawData: null,
                publishedOn,
                endOfLifeOn,
                isExcludedFromLatest,
                storageProfile,
                disclaimer,
                artifactTags);
        }
    }
}
