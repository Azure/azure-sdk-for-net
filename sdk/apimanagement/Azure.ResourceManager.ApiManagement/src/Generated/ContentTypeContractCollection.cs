// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A class representing collection of ContentTypeContract and their operations over its parent. </summary>
    public partial class ContentTypeContractCollection : ArmCollection, IEnumerable<ContentTypeContract>, IAsyncEnumerable<ContentTypeContract>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ContentTypeRestOperations _contentTypeRestClient;

        /// <summary> Initializes a new instance of the <see cref="ContentTypeContractCollection"/> class for mocking. </summary>
        protected ContentTypeContractCollection()
        {
        }

        /// <summary> Initializes a new instance of ContentTypeContractCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ContentTypeContractCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _contentTypeRestClient = new ContentTypeRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ApiManagementServiceResource.ResourceType;

        // Collection level operations.

        /// <summary> Creates or updates the developer portal&apos;s content type. Content types describe content items&apos; properties, validation rules, and constraints. Custom content types&apos; identifiers need to start with the `c-` prefix. Built-in content types can&apos;t be modified. </summary>
        /// <param name="contentTypeId"> Content type identifier. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentTypeId"/> is null. </exception>
        public virtual ContentTypeCreateOrUpdateOperation CreateOrUpdate(string contentTypeId, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (contentTypeId == null)
            {
                throw new ArgumentNullException(nameof(contentTypeId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _contentTypeRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, contentTypeId, ifMatch, cancellationToken);
                var operation = new ContentTypeCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the developer portal&apos;s content type. Content types describe content items&apos; properties, validation rules, and constraints. Custom content types&apos; identifiers need to start with the `c-` prefix. Built-in content types can&apos;t be modified. </summary>
        /// <param name="contentTypeId"> Content type identifier. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentTypeId"/> is null. </exception>
        public async virtual Task<ContentTypeCreateOrUpdateOperation> CreateOrUpdateAsync(string contentTypeId, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (contentTypeId == null)
            {
                throw new ArgumentNullException(nameof(contentTypeId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _contentTypeRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, contentTypeId, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new ContentTypeCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the developer portal&apos;s content type. Content types describe content items&apos; properties, validation rules, and constraints. </summary>
        /// <param name="contentTypeId"> Content type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentTypeId"/> is null. </exception>
        public virtual Response<ContentTypeContract> Get(string contentTypeId, CancellationToken cancellationToken = default)
        {
            if (contentTypeId == null)
            {
                throw new ArgumentNullException(nameof(contentTypeId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.Get");
            scope.Start();
            try
            {
                var response = _contentTypeRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, contentTypeId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ContentTypeContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the developer portal&apos;s content type. Content types describe content items&apos; properties, validation rules, and constraints. </summary>
        /// <param name="contentTypeId"> Content type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentTypeId"/> is null. </exception>
        public async virtual Task<Response<ContentTypeContract>> GetAsync(string contentTypeId, CancellationToken cancellationToken = default)
        {
            if (contentTypeId == null)
            {
                throw new ArgumentNullException(nameof(contentTypeId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _contentTypeRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, contentTypeId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ContentTypeContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="contentTypeId"> Content type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentTypeId"/> is null. </exception>
        public virtual Response<ContentTypeContract> GetIfExists(string contentTypeId, CancellationToken cancellationToken = default)
        {
            if (contentTypeId == null)
            {
                throw new ArgumentNullException(nameof(contentTypeId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _contentTypeRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, contentTypeId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<ContentTypeContract>(null, response.GetRawResponse())
                    : Response.FromValue(new ContentTypeContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="contentTypeId"> Content type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentTypeId"/> is null. </exception>
        public async virtual Task<Response<ContentTypeContract>> GetIfExistsAsync(string contentTypeId, CancellationToken cancellationToken = default)
        {
            if (contentTypeId == null)
            {
                throw new ArgumentNullException(nameof(contentTypeId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _contentTypeRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, contentTypeId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<ContentTypeContract>(null, response.GetRawResponse())
                    : Response.FromValue(new ContentTypeContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="contentTypeId"> Content type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentTypeId"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string contentTypeId, CancellationToken cancellationToken = default)
        {
            if (contentTypeId == null)
            {
                throw new ArgumentNullException(nameof(contentTypeId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(contentTypeId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="contentTypeId"> Content type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentTypeId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string contentTypeId, CancellationToken cancellationToken = default)
        {
            if (contentTypeId == null)
            {
                throw new ArgumentNullException(nameof(contentTypeId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(contentTypeId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the developer portal&apos;s content types. Content types describe content items&apos; properties, validation rules, and constraints. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContentTypeContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContentTypeContract> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ContentTypeContract> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _contentTypeRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContentTypeContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContentTypeContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _contentTypeRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContentTypeContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the developer portal&apos;s content types. Content types describe content items&apos; properties, validation rules, and constraints. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContentTypeContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContentTypeContract> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ContentTypeContract>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _contentTypeRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContentTypeContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContentTypeContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ContentTypeContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _contentTypeRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContentTypeContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ContentTypeContract> IEnumerable<ContentTypeContract>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ContentTypeContract> IAsyncEnumerable<ContentTypeContract>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, ContentTypeContract, ContentTypeContractData> Construct() { }
    }
}
