// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A class representing the GatewayHostnameConfigurationContract data model. </summary>
    public partial class GatewayHostnameConfigurationContractData : ResourceData
    {
        /// <summary> Initializes a new instance of GatewayHostnameConfigurationContractData. </summary>
        public GatewayHostnameConfigurationContractData()
        {
        }

        /// <summary> Initializes a new instance of GatewayHostnameConfigurationContractData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="hostname"> Hostname value. Supports valid domain name, partial or full wildcard. </param>
        /// <param name="certificateId"> Identifier of Certificate entity that will be used for TLS connection establishment. </param>
        /// <param name="negotiateClientCertificate"> Determines whether gateway requests client certificate. </param>
        /// <param name="tls10Enabled"> Specifies if TLS 1.0 is supported. </param>
        /// <param name="tls11Enabled"> Specifies if TLS 1.1 is supported. </param>
        /// <param name="http2Enabled"> Specifies if HTTP/2.0 is supported. </param>
        internal GatewayHostnameConfigurationContractData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, string hostname, string certificateId, bool? negotiateClientCertificate, bool? tls10Enabled, bool? tls11Enabled, bool? http2Enabled) : base(id, name, resourceType, systemData)
        {
            Hostname = hostname;
            CertificateId = certificateId;
            NegotiateClientCertificate = negotiateClientCertificate;
            Tls10Enabled = tls10Enabled;
            Tls11Enabled = tls11Enabled;
            Http2Enabled = http2Enabled;
        }

        /// <summary> Hostname value. Supports valid domain name, partial or full wildcard. </summary>
        public string Hostname { get; set; }
        /// <summary> Identifier of Certificate entity that will be used for TLS connection establishment. </summary>
        public string CertificateId { get; set; }
        /// <summary> Determines whether gateway requests client certificate. </summary>
        public bool? NegotiateClientCertificate { get; set; }
        /// <summary> Specifies if TLS 1.0 is supported. </summary>
        public bool? Tls10Enabled { get; set; }
        /// <summary> Specifies if TLS 1.1 is supported. </summary>
        public bool? Tls11Enabled { get; set; }
        /// <summary> Specifies if HTTP/2.0 is supported. </summary>
        public bool? Http2Enabled { get; set; }
    }
}
