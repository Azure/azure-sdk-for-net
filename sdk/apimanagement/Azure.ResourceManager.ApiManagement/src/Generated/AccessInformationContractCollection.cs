// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A class representing collection of AccessInformationContract and their operations over its parent. </summary>
    public partial class AccessInformationContractCollection : ArmCollection, IEnumerable<AccessInformationContract>, IAsyncEnumerable<AccessInformationContract>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly TenantAccessRestOperations _tenantAccessRestClient;

        /// <summary> Initializes a new instance of the <see cref="AccessInformationContractCollection"/> class for mocking. </summary>
        protected AccessInformationContractCollection()
        {
        }

        /// <summary> Initializes a new instance of AccessInformationContractCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal AccessInformationContractCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _tenantAccessRestClient = new TenantAccessRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ApiManagementServiceResource.ResourceType;

        // Collection level operations.

        /// <summary> Update tenant access information details. </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="ifMatch"> ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. </param>
        /// <param name="parameters"> Parameters supplied to retrieve the Tenant Access Information. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ifMatch"/> or <paramref name="parameters"/> is null. </exception>
        public virtual TenantAccesCreateOperation CreateOrUpdate(AccessIdName accessName, string ifMatch, AccessInformationCreateParameters parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (ifMatch == null)
            {
                throw new ArgumentNullException(nameof(ifMatch));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _tenantAccessRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, ifMatch, parameters, cancellationToken);
                var operation = new TenantAccesCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update tenant access information details. </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="ifMatch"> ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. </param>
        /// <param name="parameters"> Parameters supplied to retrieve the Tenant Access Information. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ifMatch"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<TenantAccesCreateOperation> CreateOrUpdateAsync(AccessIdName accessName, string ifMatch, AccessInformationCreateParameters parameters, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (ifMatch == null)
            {
                throw new ArgumentNullException(nameof(ifMatch));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _tenantAccessRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, ifMatch, parameters, cancellationToken).ConfigureAwait(false);
                var operation = new TenantAccesCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get tenant access information details without secrets. </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AccessInformationContract> Get(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.Get");
            scope.Start();
            try
            {
                var response = _tenantAccessRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AccessInformationContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get tenant access information details without secrets. </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<AccessInformationContract>> GetAsync(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _tenantAccessRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new AccessInformationContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AccessInformationContract> GetIfExists(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _tenantAccessRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<AccessInformationContract>(null, response.GetRawResponse())
                    : Response.FromValue(new AccessInformationContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<AccessInformationContract>> GetIfExistsAsync(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _tenantAccessRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<AccessInformationContract>(null, response.GetRawResponse())
                    : Response.FromValue(new AccessInformationContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(accessName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<bool>> ExistsAsync(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.ExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(accessName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns list of access infos - for Git and Management endpoints. </summary>
        /// <param name="filter"> Not used. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AccessInformationContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AccessInformationContract> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<AccessInformationContract> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _tenantAccessRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessInformationContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AccessInformationContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _tenantAccessRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessInformationContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns list of access infos - for Git and Management endpoints. </summary>
        /// <param name="filter"> Not used. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AccessInformationContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AccessInformationContract> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AccessInformationContract>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _tenantAccessRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessInformationContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AccessInformationContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("AccessInformationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _tenantAccessRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessInformationContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<AccessInformationContract> IEnumerable<AccessInformationContract>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AccessInformationContract> IAsyncEnumerable<AccessInformationContract>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, AccessInformationContract, AccessInformationContractData> Construct() { }
    }
}
