// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary>
    /// A class representing a collection of <see cref="AccessInformationContractResource" /> and their operations.
    /// Each <see cref="AccessInformationContractResource" /> in the collection will belong to the same instance of <see cref="ApiManagementServiceResource" />.
    /// To get an <see cref="AccessInformationContractCollection" /> instance call the GetAccessInformationContracts method from an instance of <see cref="ApiManagementServiceResource" />.
    /// </summary>
    public partial class AccessInformationContractCollection : ArmCollection, IEnumerable<AccessInformationContractResource>, IAsyncEnumerable<AccessInformationContractResource>
    {
        private readonly ClientDiagnostics _accessInformationContractTenantAccessClientDiagnostics;
        private readonly TenantAccessRestOperations _accessInformationContractTenantAccessRestClient;

        /// <summary> Initializes a new instance of the <see cref="AccessInformationContractCollection"/> class for mocking. </summary>
        protected AccessInformationContractCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AccessInformationContractCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AccessInformationContractCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _accessInformationContractTenantAccessClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ApiManagement", AccessInformationContractResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AccessInformationContractResource.ResourceType, out string accessInformationContractTenantAccessApiVersion);
            _accessInformationContractTenantAccessRestClient = new TenantAccessRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, accessInformationContractTenantAccessApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ApiManagementServiceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ApiManagementServiceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Update tenant access information details.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}
        /// Operation Id: TenantAccess_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="ifMatch"> ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. </param>
        /// <param name="content"> Parameters supplied to retrieve the Tenant Access Information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ifMatch"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<AccessInformationContractResource>> CreateOrUpdateAsync(WaitUntil waitUntil, AccessIdName accessName, string ifMatch, AccessInformationContractCreateOrUpdateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ifMatch, nameof(ifMatch));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _accessInformationContractTenantAccessRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, ifMatch, content, cancellationToken).ConfigureAwait(false);
                var operation = new ApiManagementArmOperation<AccessInformationContractResource>(Response.FromValue(new AccessInformationContractResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Update tenant access information details.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}
        /// Operation Id: TenantAccess_Create
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="ifMatch"> ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. </param>
        /// <param name="content"> Parameters supplied to retrieve the Tenant Access Information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ifMatch"/> or <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<AccessInformationContractResource> CreateOrUpdate(WaitUntil waitUntil, AccessIdName accessName, string ifMatch, AccessInformationContractCreateOrUpdateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ifMatch, nameof(ifMatch));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _accessInformationContractTenantAccessRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, ifMatch, content, cancellationToken);
                var operation = new ApiManagementArmOperation<AccessInformationContractResource>(Response.FromValue(new AccessInformationContractResource(Client, response), response.GetRawResponse()));
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get tenant access information details without secrets.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}
        /// Operation Id: TenantAccess_Get
        /// </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<AccessInformationContractResource>> GetAsync(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _accessInformationContractTenantAccessRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AccessInformationContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get tenant access information details without secrets.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}
        /// Operation Id: TenantAccess_Get
        /// </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<AccessInformationContractResource> Get(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.Get");
            scope.Start();
            try
            {
                var response = _accessInformationContractTenantAccessRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AccessInformationContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns list of access infos - for Git and Management endpoints.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant
        /// Operation Id: TenantAccess_ListByService
        /// </summary>
        /// <param name="filter"> Not used. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AccessInformationContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AccessInformationContractResource> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AccessInformationContractResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessInformationContractTenantAccessRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessInformationContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AccessInformationContractResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _accessInformationContractTenantAccessRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessInformationContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns list of access infos - for Git and Management endpoints.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant
        /// Operation Id: TenantAccess_ListByService
        /// </summary>
        /// <param name="filter"> Not used. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AccessInformationContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AccessInformationContractResource> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<AccessInformationContractResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessInformationContractTenantAccessRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessInformationContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AccessInformationContractResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _accessInformationContractTenantAccessRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AccessInformationContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}
        /// Operation Id: TenantAccess_Get
        /// </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.Exists");
            scope.Start();
            try
            {
                var response = await _accessInformationContractTenantAccessRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{accessName}
        /// Operation Id: TenantAccess_Get
        /// </summary>
        /// <param name="accessName"> The identifier of the Access configuration. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(AccessIdName accessName, CancellationToken cancellationToken = default)
        {
            using var scope = _accessInformationContractTenantAccessClientDiagnostics.CreateScope("AccessInformationContractCollection.Exists");
            scope.Start();
            try
            {
                var response = _accessInformationContractTenantAccessRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, accessName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AccessInformationContractResource> IEnumerable<AccessInformationContractResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AccessInformationContractResource> IAsyncEnumerable<AccessInformationContractResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
