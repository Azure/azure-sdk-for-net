// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _deletedServiceContractDeletedServicesClientDiagnostics;
        private DeletedServicesRestOperations _deletedServiceContractDeletedServicesRestClient;
        private ClientDiagnostics _apiManagementServiceResourceApiManagementServiceClientDiagnostics;
        private ApiManagementServiceRestOperations _apiManagementServiceResourceApiManagementServiceRestClient;
        private ClientDiagnostics _apiManagementSkusClientDiagnostics;
        private ApiManagementSkusRestOperations _apiManagementSkusRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics DeletedServiceContractDeletedServicesClientDiagnostics => _deletedServiceContractDeletedServicesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ApiManagement", DeletedServiceContractResource.ResourceType.Namespace, Diagnostics);
        private DeletedServicesRestOperations DeletedServiceContractDeletedServicesRestClient => _deletedServiceContractDeletedServicesRestClient ??= new DeletedServicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(DeletedServiceContractResource.ResourceType));
        private ClientDiagnostics ApiManagementServiceResourceApiManagementServiceClientDiagnostics => _apiManagementServiceResourceApiManagementServiceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ApiManagement", ApiManagementServiceResource.ResourceType.Namespace, Diagnostics);
        private ApiManagementServiceRestOperations ApiManagementServiceResourceApiManagementServiceRestClient => _apiManagementServiceResourceApiManagementServiceRestClient ??= new ApiManagementServiceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ApiManagementServiceResource.ResourceType));
        private ClientDiagnostics ApiManagementSkusClientDiagnostics => _apiManagementSkusClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ApiManagement", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ApiManagementSkusRestOperations ApiManagementSkusRestClient => _apiManagementSkusRestClient ??= new ApiManagementSkusRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of DeletedServiceContractResources in the SubscriptionResource. </summary>
        /// <returns> An object representing collection of DeletedServiceContractResources and their operations over a DeletedServiceContractResource. </returns>
        public virtual DeletedServiceContractCollection GetDeletedServiceContracts()
        {
            return GetCachedClient(Client => new DeletedServiceContractCollection(Client, Id));
        }

        /// <summary>
        /// Lists all soft-deleted services available for undelete for the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/deletedservices
        /// Operation Id: DeletedServices_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DeletedServiceContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DeletedServiceContractResource> GetDeletedServiceContractsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<DeletedServiceContractResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DeletedServiceContractDeletedServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDeletedServiceContracts");
                scope.Start();
                try
                {
                    var response = await DeletedServiceContractDeletedServicesRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DeletedServiceContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<DeletedServiceContractResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DeletedServiceContractDeletedServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDeletedServiceContracts");
                scope.Start();
                try
                {
                    var response = await DeletedServiceContractDeletedServicesRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new DeletedServiceContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all soft-deleted services available for undelete for the given subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/deletedservices
        /// Operation Id: DeletedServices_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DeletedServiceContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DeletedServiceContractResource> GetDeletedServiceContracts(CancellationToken cancellationToken = default)
        {
            Page<DeletedServiceContractResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = DeletedServiceContractDeletedServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDeletedServiceContracts");
                scope.Start();
                try
                {
                    var response = DeletedServiceContractDeletedServicesRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DeletedServiceContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<DeletedServiceContractResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = DeletedServiceContractDeletedServicesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDeletedServiceContracts");
                scope.Start();
                try
                {
                    var response = DeletedServiceContractDeletedServicesRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new DeletedServiceContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all API Management services within an Azure subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/service
        /// Operation Id: ApiManagementService_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApiManagementServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApiManagementServiceResource> GetApiManagementServiceResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ApiManagementServiceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ApiManagementServiceResourceApiManagementServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetApiManagementServiceResources");
                scope.Start();
                try
                {
                    var response = await ApiManagementServiceResourceApiManagementServiceRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiManagementServiceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApiManagementServiceResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ApiManagementServiceResourceApiManagementServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetApiManagementServiceResources");
                scope.Start();
                try
                {
                    var response = await ApiManagementServiceResourceApiManagementServiceRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiManagementServiceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all API Management services within an Azure subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/service
        /// Operation Id: ApiManagementService_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApiManagementServiceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApiManagementServiceResource> GetApiManagementServiceResources(CancellationToken cancellationToken = default)
        {
            Page<ApiManagementServiceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ApiManagementServiceResourceApiManagementServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetApiManagementServiceResources");
                scope.Start();
                try
                {
                    var response = ApiManagementServiceResourceApiManagementServiceRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiManagementServiceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApiManagementServiceResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ApiManagementServiceResourceApiManagementServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetApiManagementServiceResources");
                scope.Start();
                try
                {
                    var response = ApiManagementServiceResourceApiManagementServiceRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiManagementServiceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks availability and correctness of a name for an API Management service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/checkNameAvailability
        /// Operation Id: ApiManagementService_CheckNameAvailability
        /// </summary>
        /// <param name="content"> Parameters supplied to the CheckNameAvailability operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ApiManagementServiceNameAvailabilityResult>> CheckNameAvailabilityApiManagementServiceAsync(ApiManagementServiceCheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ApiManagementServiceResourceApiManagementServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityApiManagementService");
            scope.Start();
            try
            {
                var response = await ApiManagementServiceResourceApiManagementServiceRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks availability and correctness of a name for an API Management service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/checkNameAvailability
        /// Operation Id: ApiManagementService_CheckNameAvailability
        /// </summary>
        /// <param name="content"> Parameters supplied to the CheckNameAvailability operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ApiManagementServiceNameAvailabilityResult> CheckNameAvailabilityApiManagementService(ApiManagementServiceCheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ApiManagementServiceResourceApiManagementServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityApiManagementService");
            scope.Start();
            try
            {
                var response = ApiManagementServiceResourceApiManagementServiceRestClient.CheckNameAvailability(Id.SubscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the custom domain ownership identifier for an API Management service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/getDomainOwnershipIdentifier
        /// Operation Id: ApiManagementService_GetDomainOwnershipIdentifier
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ApiManagementServiceGetDomainOwnershipIdentifierResult>> GetDomainOwnershipIdentifierApiManagementServiceAsync(CancellationToken cancellationToken = default)
        {
            using var scope = ApiManagementServiceResourceApiManagementServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDomainOwnershipIdentifierApiManagementService");
            scope.Start();
            try
            {
                var response = await ApiManagementServiceResourceApiManagementServiceRestClient.GetDomainOwnershipIdentifierAsync(Id.SubscriptionId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the custom domain ownership identifier for an API Management service.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/getDomainOwnershipIdentifier
        /// Operation Id: ApiManagementService_GetDomainOwnershipIdentifier
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ApiManagementServiceGetDomainOwnershipIdentifierResult> GetDomainOwnershipIdentifierApiManagementService(CancellationToken cancellationToken = default)
        {
            using var scope = ApiManagementServiceResourceApiManagementServiceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetDomainOwnershipIdentifierApiManagementService");
            scope.Start();
            try
            {
                var response = ApiManagementServiceResourceApiManagementServiceRestClient.GetDomainOwnershipIdentifier(Id.SubscriptionId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the list of Microsoft.ApiManagement SKUs available for your Subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/skus
        /// Operation Id: ApiManagementSkus_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApiManagementSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApiManagementSku> GetApiManagementSkusAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ApiManagementSku>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ApiManagementSkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetApiManagementSkus");
                scope.Start();
                try
                {
                    var response = await ApiManagementSkusRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApiManagementSku>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ApiManagementSkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetApiManagementSkus");
                scope.Start();
                try
                {
                    var response = await ApiManagementSkusRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the list of Microsoft.ApiManagement SKUs available for your Subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ApiManagement/skus
        /// Operation Id: ApiManagementSkus_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApiManagementSku" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApiManagementSku> GetApiManagementSkus(CancellationToken cancellationToken = default)
        {
            Page<ApiManagementSku> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ApiManagementSkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetApiManagementSkus");
                scope.Start();
                try
                {
                    var response = ApiManagementSkusRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApiManagementSku> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ApiManagementSkusClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetApiManagementSkus");
                scope.Start();
                try
                {
                    var response = ApiManagementSkusRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
