// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary>
    /// A Class representing an ApiContract along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct an <see cref="ApiContractResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetApiContractResource method.
    /// Otherwise you can get one from its parent resource <see cref="ApiManagementServiceResource" /> using the GetApiContract method.
    /// </summary>
    public partial class ApiContractResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="ApiContractResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string serviceName, string apiId)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _apiContractApiClientDiagnostics;
        private readonly ApiRestOperations _apiContractApiRestClient;
        private readonly ClientDiagnostics _apiRevisionClientDiagnostics;
        private readonly ApiRevisionRestOperations _apiRevisionRestClient;
        private readonly ClientDiagnostics _apiProductClientDiagnostics;
        private readonly ApiProductRestOperations _apiProductRestClient;
        private readonly ClientDiagnostics _operationClientDiagnostics;
        private readonly OperationRestOperations _operationRestClient;
        private readonly ApiContractData _data;

        /// <summary> Initializes a new instance of the <see cref="ApiContractResource"/> class for mocking. </summary>
        protected ApiContractResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "ApiContractResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ApiContractResource(ArmClient client, ApiContractData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ApiContractResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ApiContractResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _apiContractApiClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ApiManagement", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string apiContractApiApiVersion);
            _apiContractApiRestClient = new ApiRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, apiContractApiApiVersion);
            _apiRevisionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ApiManagement", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _apiRevisionRestClient = new ApiRevisionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _apiProductClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ApiManagement", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _apiProductRestClient = new ApiProductRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
            _operationClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ApiManagement", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _operationRestClient = new OperationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.ApiManagement/service/apis";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ApiContractData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of ApiReleaseContractResources in the ApiContract. </summary>
        /// <returns> An object representing collection of ApiReleaseContractResources and their operations over a ApiReleaseContractResource. </returns>
        public virtual ApiReleaseContractCollection GetApiReleaseContracts()
        {
            return GetCachedClient(Client => new ApiReleaseContractCollection(Client, Id));
        }

        /// <summary>
        /// Returns the details of an API release.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}
        /// Operation Id: ApiRelease_Get
        /// </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ApiReleaseContractResource>> GetApiReleaseContractAsync(string releaseId, CancellationToken cancellationToken = default)
        {
            return await GetApiReleaseContracts().GetAsync(releaseId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns the details of an API release.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}
        /// Operation Id: ApiRelease_Get
        /// </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="releaseId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<ApiReleaseContractResource> GetApiReleaseContract(string releaseId, CancellationToken cancellationToken = default)
        {
            return GetApiReleaseContracts().Get(releaseId, cancellationToken);
        }

        /// <summary> Gets a collection of OperationContractResources in the ApiContract. </summary>
        /// <returns> An object representing collection of OperationContractResources and their operations over a OperationContractResource. </returns>
        public virtual OperationContractCollection GetOperationContracts()
        {
            return GetCachedClient(Client => new OperationContractCollection(Client, Id));
        }

        /// <summary>
        /// Gets the details of the API Operation specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}
        /// Operation Id: ApiOperation_Get
        /// </summary>
        /// <param name="operationId"> Operation identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<OperationContractResource>> GetOperationContractAsync(string operationId, CancellationToken cancellationToken = default)
        {
            return await GetOperationContracts().GetAsync(operationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the details of the API Operation specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}
        /// Operation Id: ApiOperation_Get
        /// </summary>
        /// <param name="operationId"> Operation identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<OperationContractResource> GetOperationContract(string operationId, CancellationToken cancellationToken = default)
        {
            return GetOperationContracts().Get(operationId, cancellationToken);
        }

        /// <summary> Gets a collection of ServiceApiPolicyResources in the ApiContract. </summary>
        /// <returns> An object representing collection of ServiceApiPolicyResources and their operations over a ServiceApiPolicyResource. </returns>
        public virtual ServiceApiPolicyCollection GetServiceApiPolicies()
        {
            return GetCachedClient(Client => new ServiceApiPolicyCollection(Client, Id));
        }

        /// <summary>
        /// Get the policy configuration at the API level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}
        /// Operation Id: ApiPolicy_Get
        /// </summary>
        /// <param name="policyId"> The identifier of the Policy. </param>
        /// <param name="format"> Policy Export Format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServiceApiPolicyResource>> GetServiceApiPolicyAsync(PolicyIdName policyId, PolicyExportFormat? format = null, CancellationToken cancellationToken = default)
        {
            return await GetServiceApiPolicies().GetAsync(policyId, format, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the policy configuration at the API level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}
        /// Operation Id: ApiPolicy_Get
        /// </summary>
        /// <param name="policyId"> The identifier of the Policy. </param>
        /// <param name="format"> Policy Export Format. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<ServiceApiPolicyResource> GetServiceApiPolicy(PolicyIdName policyId, PolicyExportFormat? format = null, CancellationToken cancellationToken = default)
        {
            return GetServiceApiPolicies().Get(policyId, format, cancellationToken);
        }

        /// <summary> Gets a collection of ServiceApiTagResources in the ApiContract. </summary>
        /// <returns> An object representing collection of ServiceApiTagResources and their operations over a ServiceApiTagResource. </returns>
        public virtual ServiceApiTagCollection GetServiceApiTags()
        {
            return GetCachedClient(Client => new ServiceApiTagCollection(Client, Id));
        }

        /// <summary>
        /// Get tag associated with the API.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}
        /// Operation Id: Tag_GetByApi
        /// </summary>
        /// <param name="tagId"> Tag identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tagId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tagId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServiceApiTagResource>> GetServiceApiTagAsync(string tagId, CancellationToken cancellationToken = default)
        {
            return await GetServiceApiTags().GetAsync(tagId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get tag associated with the API.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}
        /// Operation Id: Tag_GetByApi
        /// </summary>
        /// <param name="tagId"> Tag identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tagId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tagId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<ServiceApiTagResource> GetServiceApiTag(string tagId, CancellationToken cancellationToken = default)
        {
            return GetServiceApiTags().Get(tagId, cancellationToken);
        }

        /// <summary> Gets a collection of SchemaContractResources in the ApiContract. </summary>
        /// <returns> An object representing collection of SchemaContractResources and their operations over a SchemaContractResource. </returns>
        public virtual SchemaContractCollection GetSchemaContracts()
        {
            return GetCachedClient(Client => new SchemaContractCollection(Client, Id));
        }

        /// <summary>
        /// Get the schema configuration at the API level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}
        /// Operation Id: ApiSchema_Get
        /// </summary>
        /// <param name="schemaId"> Schema id identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SchemaContractResource>> GetSchemaContractAsync(string schemaId, CancellationToken cancellationToken = default)
        {
            return await GetSchemaContracts().GetAsync(schemaId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the schema configuration at the API level.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}
        /// Operation Id: ApiSchema_Get
        /// </summary>
        /// <param name="schemaId"> Schema id identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="schemaId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="schemaId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SchemaContractResource> GetSchemaContract(string schemaId, CancellationToken cancellationToken = default)
        {
            return GetSchemaContracts().Get(schemaId, cancellationToken);
        }

        /// <summary> Gets a collection of ServiceApiDiagnosticResources in the ApiContract. </summary>
        /// <returns> An object representing collection of ServiceApiDiagnosticResources and their operations over a ServiceApiDiagnosticResource. </returns>
        public virtual ServiceApiDiagnosticCollection GetServiceApiDiagnostics()
        {
            return GetCachedClient(Client => new ServiceApiDiagnosticCollection(Client, Id));
        }

        /// <summary>
        /// Gets the details of the Diagnostic for an API specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}
        /// Operation Id: ApiDiagnostic_Get
        /// </summary>
        /// <param name="diagnosticId"> Diagnostic identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServiceApiDiagnosticResource>> GetServiceApiDiagnosticAsync(string diagnosticId, CancellationToken cancellationToken = default)
        {
            return await GetServiceApiDiagnostics().GetAsync(diagnosticId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the details of the Diagnostic for an API specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}
        /// Operation Id: ApiDiagnostic_Get
        /// </summary>
        /// <param name="diagnosticId"> Diagnostic identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="diagnosticId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="diagnosticId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<ServiceApiDiagnosticResource> GetServiceApiDiagnostic(string diagnosticId, CancellationToken cancellationToken = default)
        {
            return GetServiceApiDiagnostics().Get(diagnosticId, cancellationToken);
        }

        /// <summary> Gets a collection of ServiceApiIssueResources in the ApiContract. </summary>
        /// <returns> An object representing collection of ServiceApiIssueResources and their operations over a ServiceApiIssueResource. </returns>
        public virtual ServiceApiIssueCollection GetServiceApiIssues()
        {
            return GetCachedClient(Client => new ServiceApiIssueCollection(Client, Id));
        }

        /// <summary>
        /// Gets the details of the Issue for an API specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}
        /// Operation Id: ApiIssue_Get
        /// </summary>
        /// <param name="issueId"> Issue identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="expandCommentsAttachments"> Expand the comment attachments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="issueId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="issueId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServiceApiIssueResource>> GetServiceApiIssueAsync(string issueId, bool? expandCommentsAttachments = null, CancellationToken cancellationToken = default)
        {
            return await GetServiceApiIssues().GetAsync(issueId, expandCommentsAttachments, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the details of the Issue for an API specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}
        /// Operation Id: ApiIssue_Get
        /// </summary>
        /// <param name="issueId"> Issue identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="expandCommentsAttachments"> Expand the comment attachments. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="issueId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="issueId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<ServiceApiIssueResource> GetServiceApiIssue(string issueId, bool? expandCommentsAttachments = null, CancellationToken cancellationToken = default)
        {
            return GetServiceApiIssues().Get(issueId, expandCommentsAttachments, cancellationToken);
        }

        /// <summary> Gets a collection of TagDescriptionContractResources in the ApiContract. </summary>
        /// <returns> An object representing collection of TagDescriptionContractResources and their operations over a TagDescriptionContractResource. </returns>
        public virtual TagDescriptionContractCollection GetTagDescriptionContracts()
        {
            return GetCachedClient(Client => new TagDescriptionContractCollection(Client, Id));
        }

        /// <summary>
        /// Get Tag description in scope of API
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}
        /// Operation Id: ApiTagDescription_Get
        /// </summary>
        /// <param name="tagDescriptionId"> Tag description identifier. Used when creating tagDescription for API/Tag association. Based on API and Tag names. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tagDescriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tagDescriptionId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<TagDescriptionContractResource>> GetTagDescriptionContractAsync(string tagDescriptionId, CancellationToken cancellationToken = default)
        {
            return await GetTagDescriptionContracts().GetAsync(tagDescriptionId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get Tag description in scope of API
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}
        /// Operation Id: ApiTagDescription_Get
        /// </summary>
        /// <param name="tagDescriptionId"> Tag description identifier. Used when creating tagDescription for API/Tag association. Based on API and Tag names. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="tagDescriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="tagDescriptionId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<TagDescriptionContractResource> GetTagDescriptionContract(string tagDescriptionId, CancellationToken cancellationToken = default)
        {
            return GetTagDescriptionContracts().Get(tagDescriptionId, cancellationToken);
        }

        /// <summary>
        /// Gets the details of the API specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
        /// Operation Id: Api_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ApiContractResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _apiContractApiClientDiagnostics.CreateScope("ApiContractResource.Get");
            scope.Start();
            try
            {
                var response = await _apiContractApiRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApiContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the details of the API specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
        /// Operation Id: Api_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ApiContractResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _apiContractApiClientDiagnostics.CreateScope("ApiContractResource.Get");
            scope.Start();
            try
            {
                var response = _apiContractApiRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApiContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified API of the API Management service instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
        /// Operation Id: Api_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="ifMatch"> ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. </param>
        /// <param name="deleteRevisions"> Delete all revisions of the Api. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ifMatch"/> is null. </exception>
        public virtual async Task<ArmOperation> DeleteAsync(WaitUntil waitUntil, string ifMatch, bool? deleteRevisions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ifMatch, nameof(ifMatch));

            using var scope = _apiContractApiClientDiagnostics.CreateScope("ApiContractResource.Delete");
            scope.Start();
            try
            {
                var response = await _apiContractApiRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, ifMatch, deleteRevisions, cancellationToken).ConfigureAwait(false);
                var operation = new ApiManagementArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified API of the API Management service instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
        /// Operation Id: Api_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="ifMatch"> ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. </param>
        /// <param name="deleteRevisions"> Delete all revisions of the Api. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ifMatch"/> is null. </exception>
        public virtual ArmOperation Delete(WaitUntil waitUntil, string ifMatch, bool? deleteRevisions = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ifMatch, nameof(ifMatch));

            using var scope = _apiContractApiClientDiagnostics.CreateScope("ApiContractResource.Delete");
            scope.Start();
            try
            {
                var response = _apiContractApiRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, ifMatch, deleteRevisions, cancellationToken);
                var operation = new ApiManagementArmOperation(response);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates the specified API of the API Management service instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
        /// Operation Id: Api_Update
        /// </summary>
        /// <param name="ifMatch"> ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. </param>
        /// <param name="patch"> API Update Contract parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ifMatch"/> or <paramref name="patch"/> is null. </exception>
        public virtual async Task<Response<ApiContractResource>> UpdateAsync(string ifMatch, ApiContractPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ifMatch, nameof(ifMatch));
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _apiContractApiClientDiagnostics.CreateScope("ApiContractResource.Update");
            scope.Start();
            try
            {
                var response = await _apiContractApiRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, ifMatch, patch, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new ApiContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates the specified API of the API Management service instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
        /// Operation Id: Api_Update
        /// </summary>
        /// <param name="ifMatch"> ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. </param>
        /// <param name="patch"> API Update Contract parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ifMatch"/> or <paramref name="patch"/> is null. </exception>
        public virtual Response<ApiContractResource> Update(string ifMatch, ApiContractPatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(ifMatch, nameof(ifMatch));
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _apiContractApiClientDiagnostics.CreateScope("ApiContractResource.Update");
            scope.Start();
            try
            {
                var response = _apiContractApiRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, ifMatch, patch, cancellationToken);
                return Response.FromValue(new ApiContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all revisions of an API.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/revisions
        /// Operation Id: ApiRevision_ListByService
        /// </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApiRevisionContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApiRevisionContract> GetApiRevisionsByServiceAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ApiRevisionContract>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _apiRevisionClientDiagnostics.CreateScope("ApiContractResource.GetApiRevisionsByService");
                scope.Start();
                try
                {
                    var response = await _apiRevisionRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApiRevisionContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _apiRevisionClientDiagnostics.CreateScope("ApiContractResource.GetApiRevisionsByService");
                scope.Start();
                try
                {
                    var response = await _apiRevisionRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all revisions of an API.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/revisions
        /// Operation Id: ApiRevision_ListByService
        /// </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApiRevisionContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApiRevisionContract> GetApiRevisionsByService(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Page<ApiRevisionContract> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _apiRevisionClientDiagnostics.CreateScope("ApiContractResource.GetApiRevisionsByService");
                scope.Start();
                try
                {
                    var response = _apiRevisionRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApiRevisionContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _apiRevisionClientDiagnostics.CreateScope("ApiContractResource.GetApiRevisionsByService");
                scope.Start();
                try
                {
                    var response = _apiRevisionRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all Products, which the API is part of.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/products
        /// Operation Id: ApiProduct_ListByApis
        /// </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ProductContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ProductContractResource> GetApiProductsByApisAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ProductContractResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _apiProductClientDiagnostics.CreateScope("ApiContractResource.GetApiProductsByApis");
                scope.Start();
                try
                {
                    var response = await _apiProductRestClient.ListByApisAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ProductContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ProductContractResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _apiProductClientDiagnostics.CreateScope("ApiContractResource.GetApiProductsByApis");
                scope.Start();
                try
                {
                    var response = await _apiProductRestClient.ListByApisNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ProductContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists all Products, which the API is part of.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/products
        /// Operation Id: ApiProduct_ListByApis
        /// </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ProductContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ProductContractResource> GetApiProductsByApis(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Page<ProductContractResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _apiProductClientDiagnostics.CreateScope("ApiContractResource.GetApiProductsByApis");
                scope.Start();
                try
                {
                    var response = _apiProductRestClient.ListByApis(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ProductContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ProductContractResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _apiProductClientDiagnostics.CreateScope("ApiContractResource.GetApiProductsByApis");
                scope.Start();
                try
                {
                    var response = _apiProductRestClient.ListByApisNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ProductContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists a collection of operations associated with tags.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operationsByTags
        /// Operation Id: Operation_ListByTags
        /// </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="includeNotTaggedOperations"> Include not tagged Operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TagResourceContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TagResourceContract> GetOperationsByTagsAsync(string filter = null, int? top = null, int? skip = null, bool? includeNotTaggedOperations = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<TagResourceContract>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _operationClientDiagnostics.CreateScope("ApiContractResource.GetOperationsByTags");
                scope.Start();
                try
                {
                    var response = await _operationRestClient.ListByTagsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, includeNotTaggedOperations, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<TagResourceContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _operationClientDiagnostics.CreateScope("ApiContractResource.GetOperationsByTags");
                scope.Start();
                try
                {
                    var response = await _operationRestClient.ListByTagsNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, includeNotTaggedOperations, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists a collection of operations associated with tags.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operationsByTags
        /// Operation Id: Operation_ListByTags
        /// </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="includeNotTaggedOperations"> Include not tagged Operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TagResourceContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TagResourceContract> GetOperationsByTags(string filter = null, int? top = null, int? skip = null, bool? includeNotTaggedOperations = null, CancellationToken cancellationToken = default)
        {
            Page<TagResourceContract> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _operationClientDiagnostics.CreateScope("ApiContractResource.GetOperationsByTags");
                scope.Start();
                try
                {
                    var response = _operationRestClient.ListByTags(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, includeNotTaggedOperations, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<TagResourceContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _operationClientDiagnostics.CreateScope("ApiContractResource.GetOperationsByTags");
                scope.Start();
                try
                {
                    var response = _operationRestClient.ListByTagsNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, includeNotTaggedOperations, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets the entity state (Etag) version of the API specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
        /// Operation Id: Api_GetEntityTag
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> GetEntityTagAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _apiContractApiClientDiagnostics.CreateScope("ApiContractResource.GetEntityTag");
            scope.Start();
            try
            {
                var response = await _apiContractApiRestClient.GetEntityTagAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the entity state (Etag) version of the API specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
        /// Operation Id: Api_GetEntityTag
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> GetEntityTag(CancellationToken cancellationToken = default)
        {
            using var scope = _apiContractApiClientDiagnostics.CreateScope("ApiContractResource.GetEntityTag");
            scope.Start();
            try
            {
                var response = _apiContractApiRestClient.GetEntityTag(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
