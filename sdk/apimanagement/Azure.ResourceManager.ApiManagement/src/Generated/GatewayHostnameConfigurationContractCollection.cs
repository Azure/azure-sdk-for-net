// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A class representing collection of GatewayHostnameConfigurationContract and their operations over its parent. </summary>
    public partial class GatewayHostnameConfigurationContractCollection : ArmCollection, IEnumerable<GatewayHostnameConfigurationContract>, IAsyncEnumerable<GatewayHostnameConfigurationContract>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly GatewayHostnameConfigurationRestOperations _gatewayHostnameConfigurationRestClient;

        /// <summary> Initializes a new instance of the <see cref="GatewayHostnameConfigurationContractCollection"/> class for mocking. </summary>
        protected GatewayHostnameConfigurationContractCollection()
        {
        }

        /// <summary> Initializes a new instance of GatewayHostnameConfigurationContractCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal GatewayHostnameConfigurationContractCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _gatewayHostnameConfigurationRestClient = new GatewayHostnameConfigurationRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => GatewayContract.ResourceType;

        // Collection level operations.

        /// <summary> Creates of updates hostname configuration for a Gateway. </summary>
        /// <param name="hcId"> Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity. </param>
        /// <param name="parameters"> The GatewayHostnameConfigurationContract to use. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hcId"/> or <paramref name="parameters"/> is null. </exception>
        public virtual GatewayHostnameConfigurationCreateOrUpdateOperation CreateOrUpdate(string hcId, GatewayHostnameConfigurationContractData parameters, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (hcId == null)
            {
                throw new ArgumentNullException(nameof(hcId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _gatewayHostnameConfigurationRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, hcId, parameters, ifMatch, cancellationToken);
                var operation = new GatewayHostnameConfigurationCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates of updates hostname configuration for a Gateway. </summary>
        /// <param name="hcId"> Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity. </param>
        /// <param name="parameters"> The GatewayHostnameConfigurationContract to use. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hcId"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<GatewayHostnameConfigurationCreateOrUpdateOperation> CreateOrUpdateAsync(string hcId, GatewayHostnameConfigurationContractData parameters, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (hcId == null)
            {
                throw new ArgumentNullException(nameof(hcId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _gatewayHostnameConfigurationRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, hcId, parameters, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new GatewayHostnameConfigurationCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get details of a hostname configuration. </summary>
        /// <param name="hcId"> Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hcId"/> is null. </exception>
        public virtual Response<GatewayHostnameConfigurationContract> Get(string hcId, CancellationToken cancellationToken = default)
        {
            if (hcId == null)
            {
                throw new ArgumentNullException(nameof(hcId));
            }

            using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.Get");
            scope.Start();
            try
            {
                var response = _gatewayHostnameConfigurationRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, hcId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GatewayHostnameConfigurationContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get details of a hostname configuration. </summary>
        /// <param name="hcId"> Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hcId"/> is null. </exception>
        public async virtual Task<Response<GatewayHostnameConfigurationContract>> GetAsync(string hcId, CancellationToken cancellationToken = default)
        {
            if (hcId == null)
            {
                throw new ArgumentNullException(nameof(hcId));
            }

            using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _gatewayHostnameConfigurationRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, hcId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new GatewayHostnameConfigurationContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="hcId"> Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hcId"/> is null. </exception>
        public virtual Response<GatewayHostnameConfigurationContract> GetIfExists(string hcId, CancellationToken cancellationToken = default)
        {
            if (hcId == null)
            {
                throw new ArgumentNullException(nameof(hcId));
            }

            using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _gatewayHostnameConfigurationRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, hcId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<GatewayHostnameConfigurationContract>(null, response.GetRawResponse())
                    : Response.FromValue(new GatewayHostnameConfigurationContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="hcId"> Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hcId"/> is null. </exception>
        public async virtual Task<Response<GatewayHostnameConfigurationContract>> GetIfExistsAsync(string hcId, CancellationToken cancellationToken = default)
        {
            if (hcId == null)
            {
                throw new ArgumentNullException(nameof(hcId));
            }

            using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _gatewayHostnameConfigurationRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, hcId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<GatewayHostnameConfigurationContract>(null, response.GetRawResponse())
                    : Response.FromValue(new GatewayHostnameConfigurationContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="hcId"> Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hcId"/> is null. </exception>
        public virtual Response<bool> Exists(string hcId, CancellationToken cancellationToken = default)
        {
            if (hcId == null)
            {
                throw new ArgumentNullException(nameof(hcId));
            }

            using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(hcId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="hcId"> Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="hcId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string hcId, CancellationToken cancellationToken = default)
        {
            if (hcId == null)
            {
                throw new ArgumentNullException(nameof(hcId));
            }

            using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.ExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(hcId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the collection of hostname configurations for the specified gateway. </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| hostname | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="GatewayHostnameConfigurationContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<GatewayHostnameConfigurationContract> GetAll(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Page<GatewayHostnameConfigurationContract> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _gatewayHostnameConfigurationRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new GatewayHostnameConfigurationContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<GatewayHostnameConfigurationContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _gatewayHostnameConfigurationRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new GatewayHostnameConfigurationContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists the collection of hostname configurations for the specified gateway. </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| hostname | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="GatewayHostnameConfigurationContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<GatewayHostnameConfigurationContract> GetAllAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<GatewayHostnameConfigurationContract>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _gatewayHostnameConfigurationRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new GatewayHostnameConfigurationContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<GatewayHostnameConfigurationContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("GatewayHostnameConfigurationContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _gatewayHostnameConfigurationRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new GatewayHostnameConfigurationContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<GatewayHostnameConfigurationContract> IEnumerable<GatewayHostnameConfigurationContract>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<GatewayHostnameConfigurationContract> IAsyncEnumerable<GatewayHostnameConfigurationContract>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, GatewayHostnameConfigurationContract, GatewayHostnameConfigurationContractData> Construct() { }
    }
}
