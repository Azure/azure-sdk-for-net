// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class SchemaContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(ContentType))
            {
                writer.WritePropertyName("contentType");
                writer.WriteStringValue(ContentType);
            }
            writer.WritePropertyName("document");
            writer.WriteStartObject();
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value");
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(Definitions))
            {
                writer.WritePropertyName("definitions");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Definitions);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Definitions.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(Components))
            {
                writer.WritePropertyName("components");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Components);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Components.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SchemaContractData DeserializeSchemaContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> contentType = default;
            Optional<string> value = default;
            Optional<BinaryData> definitions = default;
            Optional<BinaryData> components = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("contentType"))
                        {
                            contentType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("document"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("value"))
                                {
                                    value = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("definitions"))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    definitions = BinaryData.FromString(property1.Value.GetRawText());
                                    continue;
                                }
                                if (property1.NameEquals("components"))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    components = BinaryData.FromString(property1.Value.GetRawText());
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SchemaContractData(id, name, type, systemData.Value, contentType.Value, value.Value, definitions.Value, components.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "SchemaContract");
            if (Optional.IsDefined(ContentType))
            {
                writer.WriteStartElement("contentType");
                writer.WriteValue(ContentType);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Value))
            {
                writer.WriteStartElement("value");
                writer.WriteValue(Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Definitions))
            {
                writer.WriteStartElement("definitions");
                writer.WriteValue(Definitions);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Components))
            {
                writer.WriteStartElement("components");
                writer.WriteValue(Components);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(ResourceType);
            writer.WriteEndElement();
            if (Optional.IsDefined(SystemData))
            {
                writer.WriteStartElement("systemData");
                writer.WriteValue(SystemData);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static SchemaContractData DeserializeSchemaContractData(XElement element)
        {
            string contentType = default;
            string value = default;
            BinaryData definitions = default;
            BinaryData components = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType resourceType = default;
            SystemData systemData = default;
            if (element.Element("contentType") is XElement contentTypeElement)
            {
                contentType = (string)contentTypeElement;
            }
            if (element.Element("value") is XElement valueElement)
            {
                value = (string)valueElement;
            }
            if (element.Element("definitions") is XElement definitionsElement)
            {
                definitions = definitionsElement.(null);
            }
            if (element.Element("components") is XElement componentsElement)
            {
                components = componentsElement.(null);
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                resourceType = (string)typeElement;
            }
            if (element.Element("systemData") is XElement systemDataElement)
            {
                systemData = systemDataElement.(null);
            }
            return new SchemaContractData(id, name, resourceType, systemData, contentType, value, definitions, components);
        }
    }
}
