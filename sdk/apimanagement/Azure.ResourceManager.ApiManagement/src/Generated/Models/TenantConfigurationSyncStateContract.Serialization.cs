// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class TenantConfigurationSyncStateContract : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Branch))
            {
                writer.WritePropertyName("branch");
                writer.WriteStringValue(Branch);
            }
            if (Optional.IsDefined(CommitId))
            {
                writer.WritePropertyName("commitId");
                writer.WriteStringValue(CommitId);
            }
            if (Optional.IsDefined(IsExport))
            {
                writer.WritePropertyName("isExport");
                writer.WriteBooleanValue(IsExport.Value);
            }
            if (Optional.IsDefined(IsSynced))
            {
                writer.WritePropertyName("isSynced");
                writer.WriteBooleanValue(IsSynced.Value);
            }
            if (Optional.IsDefined(IsGitEnabled))
            {
                writer.WritePropertyName("isGitEnabled");
                writer.WriteBooleanValue(IsGitEnabled.Value);
            }
            if (Optional.IsDefined(SyncOn))
            {
                writer.WritePropertyName("syncDate");
                writer.WriteStringValue(SyncOn.Value, "O");
            }
            if (Optional.IsDefined(ConfigurationChangeOn))
            {
                writer.WritePropertyName("configurationChangeDate");
                writer.WriteStringValue(ConfigurationChangeOn.Value, "O");
            }
            if (Optional.IsDefined(LastOperationId))
            {
                writer.WritePropertyName("lastOperationId");
                writer.WriteStringValue(LastOperationId);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static TenantConfigurationSyncStateContract DeserializeTenantConfigurationSyncStateContract(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> branch = default;
            Optional<string> commitId = default;
            Optional<bool> isExport = default;
            Optional<bool> isSynced = default;
            Optional<bool> isGitEnabled = default;
            Optional<DateTimeOffset> syncDate = default;
            Optional<DateTimeOffset> configurationChangeDate = default;
            Optional<string> lastOperationId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("branch"))
                        {
                            branch = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("commitId"))
                        {
                            commitId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isExport"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isExport = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isSynced"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isSynced = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isGitEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isGitEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("syncDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            syncDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("configurationChangeDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            configurationChangeDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastOperationId"))
                        {
                            lastOperationId = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new TenantConfigurationSyncStateContract(id, name, type, systemData.Value, branch.Value, commitId.Value, Optional.ToNullable(isExport), Optional.ToNullable(isSynced), Optional.ToNullable(isGitEnabled), Optional.ToNullable(syncDate), Optional.ToNullable(configurationChangeDate), lastOperationId.Value);
        }
    }
}
