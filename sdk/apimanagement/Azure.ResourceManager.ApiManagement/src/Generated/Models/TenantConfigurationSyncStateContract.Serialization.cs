// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class TenantConfigurationSyncStateContract : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Branch))
            {
                writer.WritePropertyName("branch");
                writer.WriteStringValue(Branch);
            }
            if (Optional.IsDefined(CommitId))
            {
                writer.WritePropertyName("commitId");
                writer.WriteStringValue(CommitId);
            }
            if (Optional.IsDefined(IsExport))
            {
                writer.WritePropertyName("isExport");
                writer.WriteBooleanValue(IsExport.Value);
            }
            if (Optional.IsDefined(IsSynced))
            {
                writer.WritePropertyName("isSynced");
                writer.WriteBooleanValue(IsSynced.Value);
            }
            if (Optional.IsDefined(IsGitEnabled))
            {
                writer.WritePropertyName("isGitEnabled");
                writer.WriteBooleanValue(IsGitEnabled.Value);
            }
            if (Optional.IsDefined(SyncOn))
            {
                writer.WritePropertyName("syncDate");
                writer.WriteStringValue(SyncOn.Value, "O");
            }
            if (Optional.IsDefined(ConfigurationChangeOn))
            {
                writer.WritePropertyName("configurationChangeDate");
                writer.WriteStringValue(ConfigurationChangeOn.Value, "O");
            }
            if (Optional.IsDefined(LastOperationId))
            {
                writer.WritePropertyName("lastOperationId");
                writer.WriteStringValue(LastOperationId);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static TenantConfigurationSyncStateContract DeserializeTenantConfigurationSyncStateContract(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> branch = default;
            Optional<string> commitId = default;
            Optional<bool> isExport = default;
            Optional<bool> isSynced = default;
            Optional<bool> isGitEnabled = default;
            Optional<DateTimeOffset> syncDate = default;
            Optional<DateTimeOffset> configurationChangeDate = default;
            Optional<string> lastOperationId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("branch"))
                        {
                            branch = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("commitId"))
                        {
                            commitId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isExport"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isExport = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isSynced"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isSynced = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isGitEnabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isGitEnabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("syncDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            syncDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("configurationChangeDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            configurationChangeDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastOperationId"))
                        {
                            lastOperationId = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new TenantConfigurationSyncStateContract(id, name, type, systemData.Value, branch.Value, commitId.Value, Optional.ToNullable(isExport), Optional.ToNullable(isSynced), Optional.ToNullable(isGitEnabled), Optional.ToNullable(syncDate), Optional.ToNullable(configurationChangeDate), lastOperationId.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "TenantConfigurationSyncStateContract");
            if (Optional.IsDefined(Branch))
            {
                writer.WriteStartElement("branch");
                writer.WriteValue(Branch);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(CommitId))
            {
                writer.WriteStartElement("commitId");
                writer.WriteValue(CommitId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsExport))
            {
                writer.WriteStartElement("isExport");
                writer.WriteValue(IsExport.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsSynced))
            {
                writer.WriteStartElement("isSynced");
                writer.WriteValue(IsSynced.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsGitEnabled))
            {
                writer.WriteStartElement("isGitEnabled");
                writer.WriteValue(IsGitEnabled.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(SyncOn))
            {
                writer.WriteStartElement("syncDate");
                writer.WriteValue(SyncOn.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ConfigurationChangeOn))
            {
                writer.WriteStartElement("configurationChangeDate");
                writer.WriteValue(ConfigurationChangeOn.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LastOperationId))
            {
                writer.WriteStartElement("lastOperationId");
                writer.WriteValue(LastOperationId);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(ResourceType);
            writer.WriteEndElement();
            if (Optional.IsDefined(SystemData))
            {
                writer.WriteStartElement("systemData");
                writer.WriteValue(SystemData);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static TenantConfigurationSyncStateContract DeserializeTenantConfigurationSyncStateContract(XElement element)
        {
            string branch = default;
            string commitId = default;
            bool? isExport = default;
            bool? isSynced = default;
            bool? isGitEnabled = default;
            DateTimeOffset? syncOn = default;
            DateTimeOffset? configurationChangeOn = default;
            string lastOperationId = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType resourceType = default;
            SystemData systemData = default;
            if (element.Element("branch") is XElement branchElement)
            {
                branch = (string)branchElement;
            }
            if (element.Element("commitId") is XElement commitIdElement)
            {
                commitId = (string)commitIdElement;
            }
            if (element.Element("isExport") is XElement isExportElement)
            {
                isExport = (bool?)isExportElement;
            }
            if (element.Element("isSynced") is XElement isSyncedElement)
            {
                isSynced = (bool?)isSyncedElement;
            }
            if (element.Element("isGitEnabled") is XElement isGitEnabledElement)
            {
                isGitEnabled = (bool?)isGitEnabledElement;
            }
            if (element.Element("syncDate") is XElement syncDateElement)
            {
                syncOn = syncDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("configurationChangeDate") is XElement configurationChangeDateElement)
            {
                configurationChangeOn = configurationChangeDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("lastOperationId") is XElement lastOperationIdElement)
            {
                lastOperationId = (string)lastOperationIdElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                resourceType = (string)typeElement;
            }
            if (element.Element("systemData") is XElement systemDataElement)
            {
                systemData = systemDataElement.(null);
            }
            return new TenantConfigurationSyncStateContract(id, name, resourceType, systemData, branch, commitId, isExport, isSynced, isGitEnabled, syncOn, configurationChangeOn, lastOperationId);
        }
    }
}
