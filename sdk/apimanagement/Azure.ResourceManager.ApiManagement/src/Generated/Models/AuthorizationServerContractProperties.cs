// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> External OAuth authorization server settings Properties. </summary>
    internal partial class AuthorizationServerContractProperties : AuthorizationServerContractBaseProperties
    {
        /// <summary> Initializes a new instance of AuthorizationServerContractProperties. </summary>
        /// <param name="displayName"> User-friendly authorization server name. </param>
        /// <param name="clientRegistrationEndpoint"> Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. </param>
        /// <param name="authorizationEndpoint"> OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. </param>
        /// <param name="grantTypes"> Form of an authorization grant, which the client uses to request the access token. </param>
        /// <param name="clientId"> Client or app id registered with this authorization server. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="displayName"/>, <paramref name="clientRegistrationEndpoint"/>, <paramref name="authorizationEndpoint"/>, <paramref name="grantTypes"/>, or <paramref name="clientId"/> is null. </exception>
        internal AuthorizationServerContractProperties(string displayName, string clientRegistrationEndpoint, string authorizationEndpoint, IEnumerable<GrantType> grantTypes, string clientId)
        {
            if (displayName == null)
            {
                throw new ArgumentNullException(nameof(displayName));
            }
            if (clientRegistrationEndpoint == null)
            {
                throw new ArgumentNullException(nameof(clientRegistrationEndpoint));
            }
            if (authorizationEndpoint == null)
            {
                throw new ArgumentNullException(nameof(authorizationEndpoint));
            }
            if (grantTypes == null)
            {
                throw new ArgumentNullException(nameof(grantTypes));
            }
            if (clientId == null)
            {
                throw new ArgumentNullException(nameof(clientId));
            }

            DisplayName = displayName;
            ClientRegistrationEndpoint = clientRegistrationEndpoint;
            AuthorizationEndpoint = authorizationEndpoint;
            GrantTypes = grantTypes.ToList();
            ClientId = clientId;
        }

        /// <summary> User-friendly authorization server name. </summary>
        public string DisplayName { get; }
        /// <summary> Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. </summary>
        public string ClientRegistrationEndpoint { get; }
        /// <summary> OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. </summary>
        public string AuthorizationEndpoint { get; }
        /// <summary> Form of an authorization grant, which the client uses to request the access token. </summary>
        public IReadOnlyList<GrantType> GrantTypes { get; }
        /// <summary> Client or app id registered with this authorization server. </summary>
        public string ClientId { get; }
        /// <summary> Client or app secret registered with this authorization server. This property will not be filled on &apos;GET&apos; operations! Use &apos;/listSecrets&apos; POST request to get the value. </summary>
        public string ClientSecret { get; }
    }
}
