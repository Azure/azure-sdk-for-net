// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class AuthorizationServerUpdateContract : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(AuthorizationMethods))
            {
                writer.WritePropertyName("authorizationMethods");
                writer.WriteStartArray();
                foreach (var item in AuthorizationMethods)
                {
                    writer.WriteStringValue(item.ToSerialString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ClientAuthenticationMethod))
            {
                writer.WritePropertyName("clientAuthenticationMethod");
                writer.WriteStartArray();
                foreach (var item in ClientAuthenticationMethod)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TokenBodyParameters))
            {
                writer.WritePropertyName("tokenBodyParameters");
                writer.WriteStartArray();
                foreach (var item in TokenBodyParameters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TokenEndpoint))
            {
                writer.WritePropertyName("tokenEndpoint");
                writer.WriteStringValue(TokenEndpoint);
            }
            if (Optional.IsDefined(SupportState))
            {
                writer.WritePropertyName("supportState");
                writer.WriteBooleanValue(SupportState.Value);
            }
            if (Optional.IsDefined(DefaultScope))
            {
                writer.WritePropertyName("defaultScope");
                writer.WriteStringValue(DefaultScope);
            }
            if (Optional.IsCollectionDefined(BearerTokenSendingMethods))
            {
                writer.WritePropertyName("bearerTokenSendingMethods");
                writer.WriteStartArray();
                foreach (var item in BearerTokenSendingMethods)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ResourceOwnerUsername))
            {
                writer.WritePropertyName("resourceOwnerUsername");
                writer.WriteStringValue(ResourceOwnerUsername);
            }
            if (Optional.IsDefined(ResourceOwnerPassword))
            {
                writer.WritePropertyName("resourceOwnerPassword");
                writer.WriteStringValue(ResourceOwnerPassword);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(ClientRegistrationEndpoint))
            {
                writer.WritePropertyName("clientRegistrationEndpoint");
                writer.WriteStringValue(ClientRegistrationEndpoint);
            }
            if (Optional.IsDefined(AuthorizationEndpoint))
            {
                writer.WritePropertyName("authorizationEndpoint");
                writer.WriteStringValue(AuthorizationEndpoint);
            }
            if (Optional.IsCollectionDefined(GrantTypes))
            {
                writer.WritePropertyName("grantTypes");
                writer.WriteStartArray();
                foreach (var item in GrantTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ClientId))
            {
                writer.WritePropertyName("clientId");
                writer.WriteStringValue(ClientId);
            }
            if (Optional.IsDefined(ClientSecret))
            {
                writer.WritePropertyName("clientSecret");
                writer.WriteStringValue(ClientSecret);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static AuthorizationServerUpdateContract DeserializeAuthorizationServerUpdateContract(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> description = default;
            Optional<IList<AuthorizationMethod>> authorizationMethods = default;
            Optional<IList<ClientAuthenticationMethod>> clientAuthenticationMethod = default;
            Optional<IList<TokenBodyParameterContract>> tokenBodyParameters = default;
            Optional<string> tokenEndpoint = default;
            Optional<bool> supportState = default;
            Optional<string> defaultScope = default;
            Optional<IList<BearerTokenSendingMethod>> bearerTokenSendingMethods = default;
            Optional<string> resourceOwnerUsername = default;
            Optional<string> resourceOwnerPassword = default;
            Optional<string> displayName = default;
            Optional<string> clientRegistrationEndpoint = default;
            Optional<string> authorizationEndpoint = default;
            Optional<IList<GrantType>> grantTypes = default;
            Optional<string> clientId = default;
            Optional<string> clientSecret = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("authorizationMethods"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<AuthorizationMethod> array = new List<AuthorizationMethod>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString().ToAuthorizationMethod());
                            }
                            authorizationMethods = array;
                            continue;
                        }
                        if (property0.NameEquals("clientAuthenticationMethod"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ClientAuthenticationMethod> array = new List<ClientAuthenticationMethod>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new ClientAuthenticationMethod(item.GetString()));
                            }
                            clientAuthenticationMethod = array;
                            continue;
                        }
                        if (property0.NameEquals("tokenBodyParameters"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<TokenBodyParameterContract> array = new List<TokenBodyParameterContract>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(TokenBodyParameterContract.DeserializeTokenBodyParameterContract(item));
                            }
                            tokenBodyParameters = array;
                            continue;
                        }
                        if (property0.NameEquals("tokenEndpoint"))
                        {
                            tokenEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("supportState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            supportState = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("defaultScope"))
                        {
                            defaultScope = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("bearerTokenSendingMethods"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<BearerTokenSendingMethod> array = new List<BearerTokenSendingMethod>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new BearerTokenSendingMethod(item.GetString()));
                            }
                            bearerTokenSendingMethods = array;
                            continue;
                        }
                        if (property0.NameEquals("resourceOwnerUsername"))
                        {
                            resourceOwnerUsername = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("resourceOwnerPassword"))
                        {
                            resourceOwnerPassword = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientRegistrationEndpoint"))
                        {
                            clientRegistrationEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("authorizationEndpoint"))
                        {
                            authorizationEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("grantTypes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<GrantType> array = new List<GrantType>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new GrantType(item.GetString()));
                            }
                            grantTypes = array;
                            continue;
                        }
                        if (property0.NameEquals("clientId"))
                        {
                            clientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecret"))
                        {
                            clientSecret = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new AuthorizationServerUpdateContract(id, name, type, description.Value, Optional.ToList(authorizationMethods), Optional.ToList(clientAuthenticationMethod), Optional.ToList(tokenBodyParameters), tokenEndpoint.Value, Optional.ToNullable(supportState), defaultScope.Value, Optional.ToList(bearerTokenSendingMethods), resourceOwnerUsername.Value, resourceOwnerPassword.Value, displayName.Value, clientRegistrationEndpoint.Value, authorizationEndpoint.Value, Optional.ToList(grantTypes), clientId.Value, clientSecret.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "AuthorizationServerUpdateContract");
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(TokenEndpoint))
            {
                writer.WriteStartElement("tokenEndpoint");
                writer.WriteValue(TokenEndpoint);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(SupportState))
            {
                writer.WriteStartElement("supportState");
                writer.WriteValue(SupportState.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DefaultScope))
            {
                writer.WriteStartElement("defaultScope");
                writer.WriteValue(DefaultScope);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ResourceOwnerUsername))
            {
                writer.WriteStartElement("resourceOwnerUsername");
                writer.WriteValue(ResourceOwnerUsername);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ResourceOwnerPassword))
            {
                writer.WriteStartElement("resourceOwnerPassword");
                writer.WriteValue(ResourceOwnerPassword);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WriteStartElement("displayName");
                writer.WriteValue(DisplayName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ClientRegistrationEndpoint))
            {
                writer.WriteStartElement("clientRegistrationEndpoint");
                writer.WriteValue(ClientRegistrationEndpoint);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AuthorizationEndpoint))
            {
                writer.WriteStartElement("authorizationEndpoint");
                writer.WriteValue(AuthorizationEndpoint);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ClientId))
            {
                writer.WriteStartElement("clientId");
                writer.WriteValue(ClientId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ClientSecret))
            {
                writer.WriteStartElement("clientSecret");
                writer.WriteValue(ClientSecret);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(AuthorizationMethods))
            {
                foreach (var item in AuthorizationMethods)
                {
                    writer.WriteStartElement("AuthorizationMethod");
                    writer.WriteValue(item.ToSerialString());
                    writer.WriteEndElement();
                }
            }
            if (Optional.IsCollectionDefined(ClientAuthenticationMethod))
            {
                foreach (var item in ClientAuthenticationMethod)
                {
                    writer.WriteStartElement("ClientAuthenticationMethod");
                    writer.WriteValue(item.ToString());
                    writer.WriteEndElement();
                }
            }
            if (Optional.IsCollectionDefined(TokenBodyParameters))
            {
                foreach (var item in TokenBodyParameters)
                {
                    writer.WriteObjectValue(item, "TokenBodyParameterContract");
                }
            }
            if (Optional.IsCollectionDefined(BearerTokenSendingMethods))
            {
                foreach (var item in BearerTokenSendingMethods)
                {
                    writer.WriteStartElement("BearerTokenSendingMethod");
                    writer.WriteValue(item.ToString());
                    writer.WriteEndElement();
                }
            }
            if (Optional.IsCollectionDefined(GrantTypes))
            {
                foreach (var item in GrantTypes)
                {
                    writer.WriteStartElement("GrantType");
                    writer.WriteValue(item.ToString());
                    writer.WriteEndElement();
                }
            }
            writer.WriteEndElement();
        }

        internal static AuthorizationServerUpdateContract DeserializeAuthorizationServerUpdateContract(XElement element)
        {
            string description = default;
            string tokenEndpoint = default;
            bool? supportState = default;
            string defaultScope = default;
            string resourceOwnerUsername = default;
            string resourceOwnerPassword = default;
            string displayName = default;
            string clientRegistrationEndpoint = default;
            string authorizationEndpoint = default;
            string clientId = default;
            string clientSecret = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            IList<AuthorizationMethod> authorizationMethods = default;
            IList<ClientAuthenticationMethod> clientAuthenticationMethod = default;
            IList<TokenBodyParameterContract> tokenBodyParameters = default;
            IList<BearerTokenSendingMethod> bearerTokenSendingMethods = default;
            IList<GrantType> grantTypes = default;
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("tokenEndpoint") is XElement tokenEndpointElement)
            {
                tokenEndpoint = (string)tokenEndpointElement;
            }
            if (element.Element("supportState") is XElement supportStateElement)
            {
                supportState = (bool?)supportStateElement;
            }
            if (element.Element("defaultScope") is XElement defaultScopeElement)
            {
                defaultScope = (string)defaultScopeElement;
            }
            if (element.Element("resourceOwnerUsername") is XElement resourceOwnerUsernameElement)
            {
                resourceOwnerUsername = (string)resourceOwnerUsernameElement;
            }
            if (element.Element("resourceOwnerPassword") is XElement resourceOwnerPasswordElement)
            {
                resourceOwnerPassword = (string)resourceOwnerPasswordElement;
            }
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("clientRegistrationEndpoint") is XElement clientRegistrationEndpointElement)
            {
                clientRegistrationEndpoint = (string)clientRegistrationEndpointElement;
            }
            if (element.Element("authorizationEndpoint") is XElement authorizationEndpointElement)
            {
                authorizationEndpoint = (string)authorizationEndpointElement;
            }
            if (element.Element("clientId") is XElement clientIdElement)
            {
                clientId = (string)clientIdElement;
            }
            if (element.Element("clientSecret") is XElement clientSecretElement)
            {
                clientSecret = (string)clientSecretElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            var array = new List<AuthorizationMethod>();
            foreach (var e in element.Elements("AuthorizationMethod"))
            {
                array.Add(e.Value.ToAuthorizationMethod());
            }
            authorizationMethods = array;
            var array0 = new List<ClientAuthenticationMethod>();
            foreach (var e in element.Elements("ClientAuthenticationMethod"))
            {
                array0.Add(new ClientAuthenticationMethod(e.Value));
            }
            clientAuthenticationMethod = array0;
            var array1 = new List<TokenBodyParameterContract>();
            foreach (var e in element.Elements("TokenBodyParameterContract"))
            {
                array1.Add(TokenBodyParameterContract.DeserializeTokenBodyParameterContract(e));
            }
            tokenBodyParameters = array1;
            var array2 = new List<BearerTokenSendingMethod>();
            foreach (var e in element.Elements("BearerTokenSendingMethod"))
            {
                array2.Add(new BearerTokenSendingMethod(e.Value));
            }
            bearerTokenSendingMethods = array2;
            var array3 = new List<GrantType>();
            foreach (var e in element.Elements("GrantType"))
            {
                array3.Add(new GrantType(e.Value));
            }
            grantTypes = array3;
            return new AuthorizationServerUpdateContract(id, name, type, description, authorizationMethods, clientAuthenticationMethod, tokenBodyParameters, tokenEndpoint, supportState, defaultScope, bearerTokenSendingMethods, resourceOwnerUsername, resourceOwnerPassword, displayName, clientRegistrationEndpoint, authorizationEndpoint, grantTypes, clientId, clientSecret);
        }
    }
}
