// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class OperationResultContract : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(IdPropertiesId))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(IdPropertiesId);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToSerialString());
            }
            if (Optional.IsDefined(Started))
            {
                writer.WritePropertyName("started");
                writer.WriteStringValue(Started.Value, "O");
            }
            if (Optional.IsDefined(Updated))
            {
                writer.WritePropertyName("updated");
                writer.WriteStringValue(Updated.Value, "O");
            }
            if (Optional.IsDefined(ResultInfo))
            {
                writer.WritePropertyName("resultInfo");
                writer.WriteStringValue(ResultInfo);
            }
            if (Optional.IsDefined(Error))
            {
                writer.WritePropertyName("error");
                writer.WriteObjectValue(Error);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static OperationResultContract DeserializeOperationResultContract(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> id0 = default;
            Optional<AsyncOperationStatus> status = default;
            Optional<DateTimeOffset> started = default;
            Optional<DateTimeOffset> updated = default;
            Optional<string> resultInfo = default;
            Optional<ErrorResponseBody> error = default;
            Optional<IReadOnlyList<OperationResultLogItemContract>> actionLog = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("id"))
                        {
                            id0 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            status = property0.Value.GetString().ToAsyncOperationStatus();
                            continue;
                        }
                        if (property0.NameEquals("started"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            started = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updated"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            updated = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("resultInfo"))
                        {
                            resultInfo = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("error"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            error = ErrorResponseBody.DeserializeErrorResponseBody(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("actionLog"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<OperationResultLogItemContract> array = new List<OperationResultLogItemContract>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(OperationResultLogItemContract.DeserializeOperationResultLogItemContract(item));
                            }
                            actionLog = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new OperationResultContract(id, name, type, id0.Value, Optional.ToNullable(status), Optional.ToNullable(started), Optional.ToNullable(updated), resultInfo.Value, error.Value, Optional.ToList(actionLog));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "OperationResultContract");
            if (Optional.IsDefined(IdPropertiesId))
            {
                writer.WriteStartElement("id");
                writer.WriteValue(IdPropertiesId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Status))
            {
                writer.WriteStartElement("status");
                writer.WriteValue(Status.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Started))
            {
                writer.WriteStartElement("started");
                writer.WriteValue(Started.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Updated))
            {
                writer.WriteStartElement("updated");
                writer.WriteValue(Updated.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ResultInfo))
            {
                writer.WriteStartElement("resultInfo");
                writer.WriteValue(ResultInfo);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Error))
            {
                writer.WriteObjectValue(Error, "error");
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(ActionLog))
            {
                foreach (var item in ActionLog)
                {
                    writer.WriteObjectValue(item, "OperationResultLogItemContract");
                }
            }
            writer.WriteEndElement();
        }

        internal static OperationResultContract DeserializeOperationResultContract(XElement element)
        {
            string idPropertiesId = default;
            AsyncOperationStatus? status = default;
            DateTimeOffset? started = default;
            DateTimeOffset? updated = default;
            string resultInfo = default;
            ErrorResponseBody error = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            IReadOnlyList<OperationResultLogItemContract> actionLog = default;
            if (element.Element("id") is XElement idElement)
            {
                idPropertiesId = (string)idElement;
            }
            if (element.Element("status") is XElement statusElement)
            {
                status = statusElement.Value.ToAsyncOperationStatus();
            }
            if (element.Element("started") is XElement startedElement)
            {
                started = startedElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("updated") is XElement updatedElement)
            {
                updated = updatedElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("resultInfo") is XElement resultInfoElement)
            {
                resultInfo = (string)resultInfoElement;
            }
            if (element.Element("error") is XElement errorElement)
            {
                error = ErrorResponseBody.DeserializeErrorResponseBody(errorElement);
            }
            if (element.Element("id") is XElement idElement0)
            {
                id = new ResourceIdentifier((string)idElement0);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            var array = new List<OperationResultLogItemContract>();
            foreach (var e in element.Elements("OperationResultLogItemContract"))
            {
                array.Add(OperationResultLogItemContract.DeserializeOperationResultLogItemContract(e));
            }
            actionLog = array;
            return new OperationResultContract(id, name, type, idPropertiesId, status, started, updated, resultInfo, error, actionLog);
        }
    }
}
