// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class DataMaskingEntity : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value");
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(Mode))
            {
                writer.WritePropertyName("mode");
                writer.WriteStringValue(Mode.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static DataMaskingEntity DeserializeDataMaskingEntity(JsonElement element)
        {
            Optional<string> value = default;
            Optional<DataMaskingMode> mode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"))
                {
                    value = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("mode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mode = new DataMaskingMode(property.Value.GetString());
                    continue;
                }
            }
            return new DataMaskingEntity(value.Value, Optional.ToNullable(mode));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "DataMaskingEntity");
            if (Optional.IsDefined(Value))
            {
                writer.WriteStartElement("value");
                writer.WriteValue(Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Mode))
            {
                writer.WriteStartElement("mode");
                writer.WriteValue(Mode.Value.ToString());
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static DataMaskingEntity DeserializeDataMaskingEntity(XElement element)
        {
            string value = default;
            DataMaskingMode? mode = default;
            if (element.Element("value") is XElement valueElement)
            {
                value = (string)valueElement;
            }
            if (element.Element("mode") is XElement modeElement)
            {
                mode = new DataMaskingMode(modeElement.Value);
            }
            return new DataMaskingEntity(value, mode);
        }
    }
}
