// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class ApiReleaseContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(ApiId))
            {
                writer.WritePropertyName("apiId");
                writer.WriteStringValue(ApiId);
            }
            if (Optional.IsDefined(Notes))
            {
                writer.WritePropertyName("notes");
                writer.WriteStringValue(Notes);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ApiReleaseContractData DeserializeApiReleaseContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> apiId = default;
            Optional<DateTimeOffset> createdDateTime = default;
            Optional<DateTimeOffset> updatedDateTime = default;
            Optional<string> notes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("apiId"))
                        {
                            apiId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdDateTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            createdDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("updatedDateTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            updatedDateTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("notes"))
                        {
                            notes = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ApiReleaseContractData(id, name, type, apiId.Value, Optional.ToNullable(createdDateTime), Optional.ToNullable(updatedDateTime), notes.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "ApiReleaseContract");
            if (Optional.IsDefined(ApiId))
            {
                writer.WriteStartElement("apiId");
                writer.WriteValue(ApiId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(CreatedDateTime))
            {
                writer.WriteStartElement("createdDateTime");
                writer.WriteValue(CreatedDateTime.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(UpdatedDateTime))
            {
                writer.WriteStartElement("updatedDateTime");
                writer.WriteValue(UpdatedDateTime.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Notes))
            {
                writer.WriteStartElement("notes");
                writer.WriteValue(Notes);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static ApiReleaseContractData DeserializeApiReleaseContractData(XElement element)
        {
            string apiId = default;
            DateTimeOffset? createdDateTime = default;
            DateTimeOffset? updatedDateTime = default;
            string notes = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            if (element.Element("apiId") is XElement apiIdElement)
            {
                apiId = (string)apiIdElement;
            }
            if (element.Element("createdDateTime") is XElement createdDateTimeElement)
            {
                createdDateTime = createdDateTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("updatedDateTime") is XElement updatedDateTimeElement)
            {
                updatedDateTime = updatedDateTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("notes") is XElement notesElement)
            {
                notes = (string)notesElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            return new ApiReleaseContractData(id, name, type, apiId, createdDateTime, updatedDateTime, notes);
        }
    }
}
