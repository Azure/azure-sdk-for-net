// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class KeyVaultContractCreateProperties : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SecretIdentifier))
            {
                writer.WritePropertyName("secretIdentifier");
                writer.WriteStringValue(SecretIdentifier);
            }
            if (Optional.IsDefined(IdentityClientId))
            {
                writer.WritePropertyName("identityClientId");
                writer.WriteStringValue(IdentityClientId);
            }
            writer.WriteEndObject();
        }

        internal static KeyVaultContractCreateProperties DeserializeKeyVaultContractCreateProperties(JsonElement element)
        {
            Optional<string> secretIdentifier = default;
            Optional<string> identityClientId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("secretIdentifier"))
                {
                    secretIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("identityClientId"))
                {
                    identityClientId = property.Value.GetString();
                    continue;
                }
            }
            return new KeyVaultContractCreateProperties(secretIdentifier.Value, identityClientId.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "KeyVaultContractCreateProperties");
            if (Optional.IsDefined(SecretIdentifier))
            {
                writer.WriteStartElement("secretIdentifier");
                writer.WriteValue(SecretIdentifier);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IdentityClientId))
            {
                writer.WriteStartElement("identityClientId");
                writer.WriteValue(IdentityClientId);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static KeyVaultContractCreateProperties DeserializeKeyVaultContractCreateProperties(XElement element)
        {
            string secretIdentifier = default;
            string identityClientId = default;
            if (element.Element("secretIdentifier") is XElement secretIdentifierElement)
            {
                secretIdentifier = (string)secretIdentifierElement;
            }
            if (element.Element("identityClientId") is XElement identityClientIdElement)
            {
                identityClientId = (string)identityClientIdElement;
            }
            return new KeyVaultContractCreateProperties(secretIdentifier, identityClientId);
        }
    }
}
