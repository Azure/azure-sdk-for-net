// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class HttpMessageDiagnostic : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Headers))
            {
                writer.WritePropertyName("headers");
                writer.WriteStartArray();
                foreach (var item in Headers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Body))
            {
                writer.WritePropertyName("body");
                writer.WriteObjectValue(Body);
            }
            if (Optional.IsDefined(DataMasking))
            {
                writer.WritePropertyName("dataMasking");
                writer.WriteObjectValue(DataMasking);
            }
            writer.WriteEndObject();
        }

        internal static HttpMessageDiagnostic DeserializeHttpMessageDiagnostic(JsonElement element)
        {
            Optional<IList<string>> headers = default;
            Optional<BodyDiagnosticSettings> body = default;
            Optional<DataMasking> dataMasking = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("headers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    headers = array;
                    continue;
                }
                if (property.NameEquals("body"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    body = BodyDiagnosticSettings.DeserializeBodyDiagnosticSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("dataMasking"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dataMasking = DataMasking.DeserializeDataMasking(property.Value);
                    continue;
                }
            }
            return new HttpMessageDiagnostic(Optional.ToList(headers), body.Value, dataMasking.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "HttpMessageDiagnostic");
            if (Optional.IsDefined(Body))
            {
                writer.WriteObjectValue(Body, "body");
            }
            if (Optional.IsDefined(DataMasking))
            {
                writer.WriteObjectValue(DataMasking, "dataMasking");
            }
            if (Optional.IsCollectionDefined(Headers))
            {
                foreach (var item in Headers)
                {
                    writer.WriteStartElement("HttpMessageDiagnosticHeadersItem");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            writer.WriteEndElement();
        }

        internal static HttpMessageDiagnostic DeserializeHttpMessageDiagnostic(XElement element)
        {
            BodyDiagnosticSettings body = default;
            DataMasking dataMasking = default;
            IList<string> headers = default;
            if (element.Element("body") is XElement bodyElement)
            {
                body = BodyDiagnosticSettings.DeserializeBodyDiagnosticSettings(bodyElement);
            }
            if (element.Element("dataMasking") is XElement dataMaskingElement)
            {
                dataMasking = DataMasking.DeserializeDataMasking(dataMaskingElement);
            }
            var array = new List<string>();
            foreach (var e in element.Elements("HttpMessageDiagnosticHeadersItem"))
            {
                array.Add((string)e);
            }
            headers = array;
            return new HttpMessageDiagnostic(headers, body, dataMasking);
        }
    }
}
