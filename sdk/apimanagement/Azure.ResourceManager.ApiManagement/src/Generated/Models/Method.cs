// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> The HTTP method to be used. </summary>
    public readonly partial struct Method : IEquatable<Method>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Method"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Method(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GETValue = "GET";
        private const string PostValue = "POST";

        /// <summary> GET. </summary>
        public static Method GET { get; } = new Method(GETValue);
        /// <summary> POST. </summary>
        public static Method Post { get; } = new Method(PostValue);
        /// <summary> Determines if two <see cref="Method"/> values are the same. </summary>
        public static bool operator ==(Method left, Method right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Method"/> values are not the same. </summary>
        public static bool operator !=(Method left, Method right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Method"/>. </summary>
        public static implicit operator Method(string value) => new Method(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Method other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Method other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
