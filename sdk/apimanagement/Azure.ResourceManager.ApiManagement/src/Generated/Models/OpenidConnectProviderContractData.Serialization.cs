// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class OpenidConnectProviderContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(MetadataEndpoint))
            {
                writer.WritePropertyName("metadataEndpoint");
                writer.WriteStringValue(MetadataEndpoint);
            }
            if (Optional.IsDefined(ClientId))
            {
                writer.WritePropertyName("clientId");
                writer.WriteStringValue(ClientId);
            }
            if (Optional.IsDefined(ClientSecret))
            {
                writer.WritePropertyName("clientSecret");
                writer.WriteStringValue(ClientSecret);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static OpenidConnectProviderContractData DeserializeOpenidConnectProviderContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> displayName = default;
            Optional<string> description = default;
            Optional<string> metadataEndpoint = default;
            Optional<string> clientId = default;
            Optional<string> clientSecret = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("metadataEndpoint"))
                        {
                            metadataEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientId"))
                        {
                            clientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("clientSecret"))
                        {
                            clientSecret = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new OpenidConnectProviderContractData(id, name, type, displayName.Value, description.Value, metadataEndpoint.Value, clientId.Value, clientSecret.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "OpenidConnectProviderContract");
            if (Optional.IsDefined(DisplayName))
            {
                writer.WriteStartElement("displayName");
                writer.WriteValue(DisplayName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(MetadataEndpoint))
            {
                writer.WriteStartElement("metadataEndpoint");
                writer.WriteValue(MetadataEndpoint);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ClientId))
            {
                writer.WriteStartElement("clientId");
                writer.WriteValue(ClientId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ClientSecret))
            {
                writer.WriteStartElement("clientSecret");
                writer.WriteValue(ClientSecret);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static OpenidConnectProviderContractData DeserializeOpenidConnectProviderContractData(XElement element)
        {
            string displayName = default;
            string description = default;
            string metadataEndpoint = default;
            string clientId = default;
            string clientSecret = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("metadataEndpoint") is XElement metadataEndpointElement)
            {
                metadataEndpoint = (string)metadataEndpointElement;
            }
            if (element.Element("clientId") is XElement clientIdElement)
            {
                clientId = (string)clientIdElement;
            }
            if (element.Element("clientSecret") is XElement clientSecretElement)
            {
                clientSecret = (string)clientSecretElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            return new OpenidConnectProviderContractData(id, name, type, displayName, description, metadataEndpoint, clientId, clientSecret);
        }
    }
}
