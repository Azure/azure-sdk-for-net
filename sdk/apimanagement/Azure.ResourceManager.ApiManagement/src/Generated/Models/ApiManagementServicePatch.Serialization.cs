// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class ApiManagementServicePatch : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Core.Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                JsonSerializer.Serialize(writer, Identity);
            }
            if (Core.Optional.IsCollectionDefined(Zones))
            {
                writer.WritePropertyName("zones"u8);
                writer.WriteStartArray();
                foreach (var item in Zones)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(NotificationSenderEmail))
            {
                writer.WritePropertyName("notificationSenderEmail"u8);
                writer.WriteStringValue(NotificationSenderEmail);
            }
            if (Core.Optional.IsCollectionDefined(HostnameConfigurations))
            {
                writer.WritePropertyName("hostnameConfigurations"u8);
                writer.WriteStartArray();
                foreach (var item in HostnameConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(PublicIPAddressId))
            {
                writer.WritePropertyName("publicIpAddressId"u8);
                writer.WriteStringValue(PublicIPAddressId);
            }
            if (Core.Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            if (Core.Optional.IsDefined(VirtualNetworkConfiguration))
            {
                writer.WritePropertyName("virtualNetworkConfiguration"u8);
                writer.WriteObjectValue(VirtualNetworkConfiguration);
            }
            if (Core.Optional.IsCollectionDefined(AdditionalLocations))
            {
                writer.WritePropertyName("additionalLocations"u8);
                writer.WriteStartArray();
                foreach (var item in AdditionalLocations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(CustomProperties))
            {
                writer.WritePropertyName("customProperties"u8);
                writer.WriteStartObject();
                foreach (var item in CustomProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Core.Optional.IsCollectionDefined(Certificates))
            {
                writer.WritePropertyName("certificates"u8);
                writer.WriteStartArray();
                foreach (var item in Certificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(EnableClientCertificate))
            {
                writer.WritePropertyName("enableClientCertificate"u8);
                writer.WriteBooleanValue(EnableClientCertificate.Value);
            }
            if (Core.Optional.IsDefined(DisableGateway))
            {
                writer.WritePropertyName("disableGateway"u8);
                writer.WriteBooleanValue(DisableGateway.Value);
            }
            if (Core.Optional.IsDefined(VirtualNetworkType))
            {
                writer.WritePropertyName("virtualNetworkType"u8);
                writer.WriteStringValue(VirtualNetworkType.Value.ToString());
            }
            if (Core.Optional.IsDefined(ApiVersionConstraint))
            {
                writer.WritePropertyName("apiVersionConstraint"u8);
                writer.WriteObjectValue(ApiVersionConstraint);
            }
            if (Core.Optional.IsDefined(Restore))
            {
                writer.WritePropertyName("restore"u8);
                writer.WriteBooleanValue(Restore.Value);
            }
            if (Core.Optional.IsCollectionDefined(PrivateEndpointConnections))
            {
                writer.WritePropertyName("privateEndpointConnections"u8);
                writer.WriteStartArray();
                foreach (var item in PrivateEndpointConnections)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(PublisherEmail))
            {
                writer.WritePropertyName("publisherEmail"u8);
                writer.WriteStringValue(PublisherEmail);
            }
            if (Core.Optional.IsDefined(PublisherName))
            {
                writer.WritePropertyName("publisherName"u8);
                writer.WriteStringValue(PublisherName);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ApiManagementServicePatch DeserializeApiManagementServicePatch(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ApiManagementServiceSkuProperties> sku = default;
            Core.Optional<ManagedServiceIdentity> identity = default;
            Core.Optional<ETag> etag = default;
            Core.Optional<IList<string>> zones = default;
            Core.Optional<IDictionary<string, string>> tags = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<string> notificationSenderEmail = default;
            Core.Optional<string> provisioningState = default;
            Core.Optional<string> targetProvisioningState = default;
            Core.Optional<DateTimeOffset> createdAtUtc = default;
            Core.Optional<Uri> gatewayUri = default;
            Core.Optional<Uri> gatewayRegionalUri = default;
            Core.Optional<Uri> portalUri = default;
            Core.Optional<Uri> managementApiUri = default;
            Core.Optional<Uri> scmUri = default;
            Core.Optional<Uri> developerPortalUri = default;
            Core.Optional<IList<HostnameConfiguration>> hostnameConfigurations = default;
            Core.Optional<IReadOnlyList<IPAddress>> publicIPAddresses = default;
            Core.Optional<IReadOnlyList<IPAddress>> privateIPAddresses = default;
            Core.Optional<ResourceIdentifier> publicIPAddressId = default;
            Core.Optional<PublicNetworkAccess> publicNetworkAccess = default;
            Core.Optional<VirtualNetworkConfiguration> virtualNetworkConfiguration = default;
            Core.Optional<IList<AdditionalLocation>> additionalLocations = default;
            Core.Optional<IDictionary<string, string>> customProperties = default;
            Core.Optional<IList<CertificateConfiguration>> certificates = default;
            Core.Optional<bool> enableClientCertificate = default;
            Core.Optional<bool> disableGateway = default;
            Core.Optional<VirtualNetworkType> virtualNetworkType = default;
            Core.Optional<ApiVersionConstraint> apiVersionConstraint = default;
            Core.Optional<bool> restore = default;
            Core.Optional<IList<RemotePrivateEndpointConnectionWrapper>> privateEndpointConnections = default;
            Core.Optional<PlatformVersion> platformVersion = default;
            Core.Optional<string> publisherEmail = default;
            Core.Optional<string> publisherName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = ApiManagementServiceSkuProperties.DeserializeApiManagementServiceSkuProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("etag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("zones"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    zones = array;
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("notificationSenderEmail"u8))
                        {
                            notificationSenderEmail = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            provisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("targetProvisioningState"u8))
                        {
                            targetProvisioningState = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdAtUtc"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            createdAtUtc = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("gatewayUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            gatewayUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("gatewayRegionalUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            gatewayRegionalUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("portalUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            portalUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("managementApiUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            managementApiUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("scmUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            scmUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("developerPortalUrl"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            developerPortalUri = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("hostnameConfigurations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<HostnameConfiguration> array = new List<HostnameConfiguration>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HostnameConfiguration.DeserializeHostnameConfiguration(item));
                            }
                            hostnameConfigurations = array;
                            continue;
                        }
                        if (property0.NameEquals("publicIPAddresses"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<IPAddress> array = new List<IPAddress>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(IPAddress.Parse(item.GetString()));
                                }
                            }
                            publicIPAddresses = array;
                            continue;
                        }
                        if (property0.NameEquals("privateIPAddresses"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<IPAddress> array = new List<IPAddress>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(IPAddress.Parse(item.GetString()));
                                }
                            }
                            privateIPAddresses = array;
                            continue;
                        }
                        if (property0.NameEquals("publicIpAddressId"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            publicIPAddressId = new ResourceIdentifier(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccess"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            publicNetworkAccess = new PublicNetworkAccess(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("virtualNetworkConfiguration"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            virtualNetworkConfiguration = VirtualNetworkConfiguration.DeserializeVirtualNetworkConfiguration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("additionalLocations"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<AdditionalLocation> array = new List<AdditionalLocation>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(AdditionalLocation.DeserializeAdditionalLocation(item));
                            }
                            additionalLocations = array;
                            continue;
                        }
                        if (property0.NameEquals("customProperties"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            customProperties = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("certificates"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<CertificateConfiguration> array = new List<CertificateConfiguration>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(CertificateConfiguration.DeserializeCertificateConfiguration(item));
                            }
                            certificates = array;
                            continue;
                        }
                        if (property0.NameEquals("enableClientCertificate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            enableClientCertificate = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("disableGateway"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            disableGateway = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("virtualNetworkType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            virtualNetworkType = new VirtualNetworkType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("apiVersionConstraint"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            apiVersionConstraint = ApiVersionConstraint.DeserializeApiVersionConstraint(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("restore"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            restore = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("privateEndpointConnections"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<RemotePrivateEndpointConnectionWrapper> array = new List<RemotePrivateEndpointConnectionWrapper>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(RemotePrivateEndpointConnectionWrapper.DeserializeRemotePrivateEndpointConnectionWrapper(item));
                            }
                            privateEndpointConnections = array;
                            continue;
                        }
                        if (property0.NameEquals("platformVersion"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            platformVersion = new PlatformVersion(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("publisherEmail"u8))
                        {
                            publisherEmail = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisherName"u8))
                        {
                            publisherName = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ApiManagementServicePatch(id, name, type, systemData.Value, sku.Value, identity, Core.Optional.ToNullable(etag), Core.Optional.ToList(zones), notificationSenderEmail.Value, provisioningState.Value, targetProvisioningState.Value, Core.Optional.ToNullable(createdAtUtc), gatewayUri.Value, gatewayRegionalUri.Value, portalUri.Value, managementApiUri.Value, scmUri.Value, developerPortalUri.Value, Core.Optional.ToList(hostnameConfigurations), Core.Optional.ToList(publicIPAddresses), Core.Optional.ToList(privateIPAddresses), publicIPAddressId.Value, Core.Optional.ToNullable(publicNetworkAccess), virtualNetworkConfiguration.Value, Core.Optional.ToList(additionalLocations), Core.Optional.ToDictionary(customProperties), Core.Optional.ToList(certificates), Core.Optional.ToNullable(enableClientCertificate), Core.Optional.ToNullable(disableGateway), Core.Optional.ToNullable(virtualNetworkType), apiVersionConstraint.Value, Core.Optional.ToNullable(restore), Core.Optional.ToList(privateEndpointConnections), Core.Optional.ToNullable(platformVersion), publisherEmail.Value, publisherName.Value, Core.Optional.ToDictionary(tags));
        }
    }
}
