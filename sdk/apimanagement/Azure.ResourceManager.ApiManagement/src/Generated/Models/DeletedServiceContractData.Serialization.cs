// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class DeletedServiceContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(ServiceId))
            {
                writer.WritePropertyName("serviceId");
                writer.WriteStringValue(ServiceId);
            }
            if (Optional.IsDefined(ScheduledPurgeOn))
            {
                writer.WritePropertyName("scheduledPurgeDate");
                writer.WriteStringValue(ScheduledPurgeOn.Value, "O");
            }
            if (Optional.IsDefined(DeletionOn))
            {
                writer.WritePropertyName("deletionDate");
                writer.WriteStringValue(DeletionOn.Value, "O");
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DeletedServiceContractData DeserializeDeletedServiceContractData(JsonElement element)
        {
            Optional<AzureLocation> location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> serviceId = default;
            Optional<DateTimeOffset> scheduledPurgeDate = default;
            Optional<DateTimeOffset> deletionDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("location"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("serviceId"))
                        {
                            serviceId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("scheduledPurgeDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            scheduledPurgeDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("deletionDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            deletionDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DeletedServiceContractData(id, name, type, systemData.Value, Optional.ToNullable(location), serviceId.Value, Optional.ToNullable(scheduledPurgeDate), Optional.ToNullable(deletionDate));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "DeletedServiceContract");
            if (Optional.IsDefined(Location))
            {
                writer.WriteStartElement("location");
                writer.WriteValue(Location.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ServiceId))
            {
                writer.WriteStartElement("serviceId");
                writer.WriteValue(ServiceId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ScheduledPurgeOn))
            {
                writer.WriteStartElement("scheduledPurgeDate");
                writer.WriteValue(ScheduledPurgeOn.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DeletionOn))
            {
                writer.WriteStartElement("deletionDate");
                writer.WriteValue(DeletionOn.Value, "O");
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(ResourceType);
            writer.WriteEndElement();
            if (Optional.IsDefined(SystemData))
            {
                writer.WriteStartElement("systemData");
                writer.WriteValue(SystemData);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static DeletedServiceContractData DeserializeDeletedServiceContractData(XElement element)
        {
            AzureLocation? location = default;
            string serviceId = default;
            DateTimeOffset? scheduledPurgeOn = default;
            DateTimeOffset? deletionOn = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType resourceType = default;
            SystemData systemData = default;
            if (element.Element("location") is XElement locationElement)
            {
                location = locationElement.(null);
            }
            if (element.Element("serviceId") is XElement serviceIdElement)
            {
                serviceId = (string)serviceIdElement;
            }
            if (element.Element("scheduledPurgeDate") is XElement scheduledPurgeDateElement)
            {
                scheduledPurgeOn = scheduledPurgeDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("deletionDate") is XElement deletionDateElement)
            {
                deletionOn = deletionDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                resourceType = (string)typeElement;
            }
            if (element.Element("systemData") is XElement systemDataElement)
            {
                systemData = systemDataElement.(null);
            }
            return new DeletedServiceContractData(id, name, resourceType, systemData, location, serviceId, scheduledPurgeOn, deletionOn);
        }
    }
}
