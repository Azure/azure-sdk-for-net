// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class ApiContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(AuthenticationSettings))
            {
                writer.WritePropertyName("authenticationSettings");
                writer.WriteObjectValue(AuthenticationSettings);
            }
            if (Optional.IsDefined(SubscriptionKeyParameterNames))
            {
                writer.WritePropertyName("subscriptionKeyParameterNames");
                writer.WriteObjectValue(SubscriptionKeyParameterNames);
            }
            if (Optional.IsDefined(ApiType))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(ApiType.Value.ToString());
            }
            if (Optional.IsDefined(ApiRevision))
            {
                writer.WritePropertyName("apiRevision");
                writer.WriteStringValue(ApiRevision);
            }
            if (Optional.IsDefined(ApiVersion))
            {
                writer.WritePropertyName("apiVersion");
                writer.WriteStringValue(ApiVersion);
            }
            if (Optional.IsDefined(IsCurrent))
            {
                writer.WritePropertyName("isCurrent");
                writer.WriteBooleanValue(IsCurrent.Value);
            }
            if (Optional.IsDefined(ApiRevisionDescription))
            {
                writer.WritePropertyName("apiRevisionDescription");
                writer.WriteStringValue(ApiRevisionDescription);
            }
            if (Optional.IsDefined(ApiVersionDescription))
            {
                writer.WritePropertyName("apiVersionDescription");
                writer.WriteStringValue(ApiVersionDescription);
            }
            if (Optional.IsDefined(ApiVersionSetId))
            {
                writer.WritePropertyName("apiVersionSetId");
                writer.WriteStringValue(ApiVersionSetId);
            }
            if (Optional.IsDefined(SubscriptionRequired))
            {
                writer.WritePropertyName("subscriptionRequired");
                writer.WriteBooleanValue(SubscriptionRequired.Value);
            }
            if (Optional.IsDefined(TermsOfServiceUrl))
            {
                writer.WritePropertyName("termsOfServiceUrl");
                writer.WriteStringValue(TermsOfServiceUrl);
            }
            if (Optional.IsDefined(Contact))
            {
                writer.WritePropertyName("contact");
                writer.WriteObjectValue(Contact);
            }
            if (Optional.IsDefined(License))
            {
                writer.WritePropertyName("license");
                writer.WriteObjectValue(License);
            }
            if (Optional.IsDefined(SourceApiId))
            {
                writer.WritePropertyName("sourceApiId");
                writer.WriteStringValue(SourceApiId);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(ServiceUrl))
            {
                writer.WritePropertyName("serviceUrl");
                writer.WriteStringValue(ServiceUrl);
            }
            if (Optional.IsDefined(Path))
            {
                writer.WritePropertyName("path");
                writer.WriteStringValue(Path);
            }
            if (Optional.IsCollectionDefined(Protocols))
            {
                writer.WritePropertyName("protocols");
                writer.WriteStartArray();
                foreach (var item in Protocols)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ApiVersionSet))
            {
                writer.WritePropertyName("apiVersionSet");
                writer.WriteObjectValue(ApiVersionSet);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ApiContractData DeserializeApiContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> description = default;
            Optional<AuthenticationSettingsContract> authenticationSettings = default;
            Optional<SubscriptionKeyParameterNamesContract> subscriptionKeyParameterNames = default;
            Optional<ApiType> type0 = default;
            Optional<string> apiRevision = default;
            Optional<string> apiVersion = default;
            Optional<bool> isCurrent = default;
            Optional<bool> isOnline = default;
            Optional<string> apiRevisionDescription = default;
            Optional<string> apiVersionDescription = default;
            Optional<string> apiVersionSetId = default;
            Optional<bool> subscriptionRequired = default;
            Optional<string> termsOfServiceUrl = default;
            Optional<ApiContactInformation> contact = default;
            Optional<ApiLicenseInformation> license = default;
            Optional<string> sourceApiId = default;
            Optional<string> displayName = default;
            Optional<string> serviceUrl = default;
            Optional<string> path = default;
            Optional<IList<Protocol>> protocols = default;
            Optional<ApiVersionSetContractDetails> apiVersionSet = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("authenticationSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            authenticationSettings = AuthenticationSettingsContract.DeserializeAuthenticationSettingsContract(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("subscriptionKeyParameterNames"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            subscriptionKeyParameterNames = SubscriptionKeyParameterNamesContract.DeserializeSubscriptionKeyParameterNamesContract(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("type"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            type0 = new ApiType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("apiRevision"))
                        {
                            apiRevision = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("apiVersion"))
                        {
                            apiVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isCurrent"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isCurrent = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("isOnline"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isOnline = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("apiRevisionDescription"))
                        {
                            apiRevisionDescription = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("apiVersionDescription"))
                        {
                            apiVersionDescription = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("apiVersionSetId"))
                        {
                            apiVersionSetId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subscriptionRequired"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            subscriptionRequired = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("termsOfServiceUrl"))
                        {
                            termsOfServiceUrl = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("contact"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            contact = ApiContactInformation.DeserializeApiContactInformation(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("license"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            license = ApiLicenseInformation.DeserializeApiLicenseInformation(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("sourceApiId"))
                        {
                            sourceApiId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("serviceUrl"))
                        {
                            serviceUrl = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("path"))
                        {
                            path = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("protocols"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<Protocol> array = new List<Protocol>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new Protocol(item.GetString()));
                            }
                            protocols = array;
                            continue;
                        }
                        if (property0.NameEquals("apiVersionSet"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            apiVersionSet = ApiVersionSetContractDetails.DeserializeApiVersionSetContractDetails(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ApiContractData(id, name, type, description.Value, authenticationSettings.Value, subscriptionKeyParameterNames.Value, Optional.ToNullable(type0), apiRevision.Value, apiVersion.Value, Optional.ToNullable(isCurrent), Optional.ToNullable(isOnline), apiRevisionDescription.Value, apiVersionDescription.Value, apiVersionSetId.Value, Optional.ToNullable(subscriptionRequired), termsOfServiceUrl.Value, contact.Value, license.Value, sourceApiId.Value, displayName.Value, serviceUrl.Value, path.Value, Optional.ToList(protocols), apiVersionSet.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "ApiContract");
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AuthenticationSettings))
            {
                writer.WriteObjectValue(AuthenticationSettings, "authenticationSettings");
            }
            if (Optional.IsDefined(SubscriptionKeyParameterNames))
            {
                writer.WriteObjectValue(SubscriptionKeyParameterNames, "subscriptionKeyParameterNames");
            }
            if (Optional.IsDefined(ApiType))
            {
                writer.WriteStartElement("type");
                writer.WriteValue(ApiType.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ApiRevision))
            {
                writer.WriteStartElement("apiRevision");
                writer.WriteValue(ApiRevision);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ApiVersion))
            {
                writer.WriteStartElement("apiVersion");
                writer.WriteValue(ApiVersion);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsCurrent))
            {
                writer.WriteStartElement("isCurrent");
                writer.WriteValue(IsCurrent.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsOnline))
            {
                writer.WriteStartElement("isOnline");
                writer.WriteValue(IsOnline.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ApiRevisionDescription))
            {
                writer.WriteStartElement("apiRevisionDescription");
                writer.WriteValue(ApiRevisionDescription);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ApiVersionDescription))
            {
                writer.WriteStartElement("apiVersionDescription");
                writer.WriteValue(ApiVersionDescription);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ApiVersionSetId))
            {
                writer.WriteStartElement("apiVersionSetId");
                writer.WriteValue(ApiVersionSetId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(SubscriptionRequired))
            {
                writer.WriteStartElement("subscriptionRequired");
                writer.WriteValue(SubscriptionRequired.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(TermsOfServiceUrl))
            {
                writer.WriteStartElement("termsOfServiceUrl");
                writer.WriteValue(TermsOfServiceUrl);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Contact))
            {
                writer.WriteObjectValue(Contact, "contact");
            }
            if (Optional.IsDefined(License))
            {
                writer.WriteObjectValue(License, "license");
            }
            if (Optional.IsDefined(SourceApiId))
            {
                writer.WriteStartElement("sourceApiId");
                writer.WriteValue(SourceApiId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WriteStartElement("displayName");
                writer.WriteValue(DisplayName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ServiceUrl))
            {
                writer.WriteStartElement("serviceUrl");
                writer.WriteValue(ServiceUrl);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Path))
            {
                writer.WriteStartElement("path");
                writer.WriteValue(Path);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ApiVersionSet))
            {
                writer.WriteObjectValue(ApiVersionSet, "apiVersionSet");
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(Protocols))
            {
                foreach (var item in Protocols)
                {
                    writer.WriteStartElement("Protocol");
                    writer.WriteValue(item.ToString());
                    writer.WriteEndElement();
                }
            }
            writer.WriteEndElement();
        }

        internal static ApiContractData DeserializeApiContractData(XElement element)
        {
            string description = default;
            AuthenticationSettingsContract authenticationSettings = default;
            SubscriptionKeyParameterNamesContract subscriptionKeyParameterNames = default;
            ApiType? apiType = default;
            string apiRevision = default;
            string apiVersion = default;
            bool? isCurrent = default;
            bool? isOnline = default;
            string apiRevisionDescription = default;
            string apiVersionDescription = default;
            string apiVersionSetId = default;
            bool? subscriptionRequired = default;
            string termsOfServiceUrl = default;
            ApiContactInformation contact = default;
            ApiLicenseInformation license = default;
            string sourceApiId = default;
            string displayName = default;
            string serviceUrl = default;
            string path = default;
            ApiVersionSetContractDetails apiVersionSet = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            IList<Protocol> protocols = default;
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("authenticationSettings") is XElement authenticationSettingsElement)
            {
                authenticationSettings = AuthenticationSettingsContract.DeserializeAuthenticationSettingsContract(authenticationSettingsElement);
            }
            if (element.Element("subscriptionKeyParameterNames") is XElement subscriptionKeyParameterNamesElement)
            {
                subscriptionKeyParameterNames = SubscriptionKeyParameterNamesContract.DeserializeSubscriptionKeyParameterNamesContract(subscriptionKeyParameterNamesElement);
            }
            if (element.Element("type") is XElement typeElement)
            {
                apiType = new ApiType(typeElement.Value);
            }
            if (element.Element("apiRevision") is XElement apiRevisionElement)
            {
                apiRevision = (string)apiRevisionElement;
            }
            if (element.Element("apiVersion") is XElement apiVersionElement)
            {
                apiVersion = (string)apiVersionElement;
            }
            if (element.Element("isCurrent") is XElement isCurrentElement)
            {
                isCurrent = (bool?)isCurrentElement;
            }
            if (element.Element("isOnline") is XElement isOnlineElement)
            {
                isOnline = (bool?)isOnlineElement;
            }
            if (element.Element("apiRevisionDescription") is XElement apiRevisionDescriptionElement)
            {
                apiRevisionDescription = (string)apiRevisionDescriptionElement;
            }
            if (element.Element("apiVersionDescription") is XElement apiVersionDescriptionElement)
            {
                apiVersionDescription = (string)apiVersionDescriptionElement;
            }
            if (element.Element("apiVersionSetId") is XElement apiVersionSetIdElement)
            {
                apiVersionSetId = (string)apiVersionSetIdElement;
            }
            if (element.Element("subscriptionRequired") is XElement subscriptionRequiredElement)
            {
                subscriptionRequired = (bool?)subscriptionRequiredElement;
            }
            if (element.Element("termsOfServiceUrl") is XElement termsOfServiceUrlElement)
            {
                termsOfServiceUrl = (string)termsOfServiceUrlElement;
            }
            if (element.Element("contact") is XElement contactElement)
            {
                contact = ApiContactInformation.DeserializeApiContactInformation(contactElement);
            }
            if (element.Element("license") is XElement licenseElement)
            {
                license = ApiLicenseInformation.DeserializeApiLicenseInformation(licenseElement);
            }
            if (element.Element("sourceApiId") is XElement sourceApiIdElement)
            {
                sourceApiId = (string)sourceApiIdElement;
            }
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("serviceUrl") is XElement serviceUrlElement)
            {
                serviceUrl = (string)serviceUrlElement;
            }
            if (element.Element("path") is XElement pathElement)
            {
                path = (string)pathElement;
            }
            if (element.Element("apiVersionSet") is XElement apiVersionSetElement)
            {
                apiVersionSet = ApiVersionSetContractDetails.DeserializeApiVersionSetContractDetails(apiVersionSetElement);
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement0)
            {
                type = (string)typeElement0;
            }
            var array = new List<Protocol>();
            foreach (var e in element.Elements("Protocol"))
            {
                array.Add(new Protocol(e.Value));
            }
            protocols = array;
            return new ApiContractData(id, name, type, description, authenticationSettings, subscriptionKeyParameterNames, apiType, apiRevision, apiVersion, isCurrent, isOnline, apiRevisionDescription, apiVersionDescription, apiVersionSetId, subscriptionRequired, termsOfServiceUrl, contact, license, sourceApiId, displayName, serviceUrl, path, protocols, apiVersionSet);
        }
    }
}
