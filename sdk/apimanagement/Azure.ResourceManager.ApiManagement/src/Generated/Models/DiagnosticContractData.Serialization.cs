// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class DiagnosticContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(AlwaysLog))
            {
                writer.WritePropertyName("alwaysLog");
                writer.WriteStringValue(AlwaysLog.Value.ToString());
            }
            if (Optional.IsDefined(LoggerId))
            {
                writer.WritePropertyName("loggerId");
                writer.WriteStringValue(LoggerId);
            }
            if (Optional.IsDefined(Sampling))
            {
                writer.WritePropertyName("sampling");
                writer.WriteObjectValue(Sampling);
            }
            if (Optional.IsDefined(Frontend))
            {
                writer.WritePropertyName("frontend");
                writer.WriteObjectValue(Frontend);
            }
            if (Optional.IsDefined(Backend))
            {
                writer.WritePropertyName("backend");
                writer.WriteObjectValue(Backend);
            }
            if (Optional.IsDefined(LogClientIP))
            {
                writer.WritePropertyName("logClientIp");
                writer.WriteBooleanValue(LogClientIP.Value);
            }
            if (Optional.IsDefined(HttpCorrelationProtocol))
            {
                writer.WritePropertyName("httpCorrelationProtocol");
                writer.WriteStringValue(HttpCorrelationProtocol.Value.ToString());
            }
            if (Optional.IsDefined(Verbosity))
            {
                writer.WritePropertyName("verbosity");
                writer.WriteStringValue(Verbosity.Value.ToString());
            }
            if (Optional.IsDefined(OperationNameFormat))
            {
                writer.WritePropertyName("operationNameFormat");
                writer.WriteStringValue(OperationNameFormat.Value.ToString());
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static DiagnosticContractData DeserializeDiagnosticContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<AlwaysLog> alwaysLog = default;
            Optional<string> loggerId = default;
            Optional<SamplingSettings> sampling = default;
            Optional<PipelineDiagnosticSettings> frontend = default;
            Optional<PipelineDiagnosticSettings> backend = default;
            Optional<bool> logClientIp = default;
            Optional<HttpCorrelationProtocol> httpCorrelationProtocol = default;
            Optional<Verbosity> verbosity = default;
            Optional<OperationNameFormat> operationNameFormat = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("alwaysLog"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            alwaysLog = new AlwaysLog(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("loggerId"))
                        {
                            loggerId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sampling"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            sampling = SamplingSettings.DeserializeSamplingSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("frontend"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            frontend = PipelineDiagnosticSettings.DeserializePipelineDiagnosticSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("backend"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            backend = PipelineDiagnosticSettings.DeserializePipelineDiagnosticSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("logClientIp"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            logClientIp = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("httpCorrelationProtocol"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            httpCorrelationProtocol = new HttpCorrelationProtocol(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("verbosity"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            verbosity = new Verbosity(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("operationNameFormat"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            operationNameFormat = new OperationNameFormat(property0.Value.GetString());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DiagnosticContractData(id, name, type, systemData.Value, Optional.ToNullable(alwaysLog), loggerId.Value, sampling.Value, frontend.Value, backend.Value, Optional.ToNullable(logClientIp), Optional.ToNullable(httpCorrelationProtocol), Optional.ToNullable(verbosity), Optional.ToNullable(operationNameFormat));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "DiagnosticContract");
            if (Optional.IsDefined(AlwaysLog))
            {
                writer.WriteStartElement("alwaysLog");
                writer.WriteValue(AlwaysLog.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LoggerId))
            {
                writer.WriteStartElement("loggerId");
                writer.WriteValue(LoggerId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Sampling))
            {
                writer.WriteObjectValue(Sampling, "sampling");
            }
            if (Optional.IsDefined(Frontend))
            {
                writer.WriteObjectValue(Frontend, "frontend");
            }
            if (Optional.IsDefined(Backend))
            {
                writer.WriteObjectValue(Backend, "backend");
            }
            if (Optional.IsDefined(LogClientIP))
            {
                writer.WriteStartElement("logClientIp");
                writer.WriteValue(LogClientIP.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(HttpCorrelationProtocol))
            {
                writer.WriteStartElement("httpCorrelationProtocol");
                writer.WriteValue(HttpCorrelationProtocol.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Verbosity))
            {
                writer.WriteStartElement("verbosity");
                writer.WriteValue(Verbosity.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(OperationNameFormat))
            {
                writer.WriteStartElement("operationNameFormat");
                writer.WriteValue(OperationNameFormat.Value.ToString());
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(ResourceType);
            writer.WriteEndElement();
            if (Optional.IsDefined(SystemData))
            {
                writer.WriteStartElement("systemData");
                writer.WriteValue(SystemData);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static DiagnosticContractData DeserializeDiagnosticContractData(XElement element)
        {
            AlwaysLog? alwaysLog = default;
            string loggerId = default;
            SamplingSettings sampling = default;
            PipelineDiagnosticSettings frontend = default;
            PipelineDiagnosticSettings backend = default;
            bool? logClientIP = default;
            HttpCorrelationProtocol? httpCorrelationProtocol = default;
            Verbosity? verbosity = default;
            OperationNameFormat? operationNameFormat = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType resourceType = default;
            SystemData systemData = default;
            if (element.Element("alwaysLog") is XElement alwaysLogElement)
            {
                alwaysLog = new AlwaysLog(alwaysLogElement.Value);
            }
            if (element.Element("loggerId") is XElement loggerIdElement)
            {
                loggerId = (string)loggerIdElement;
            }
            if (element.Element("sampling") is XElement samplingElement)
            {
                sampling = SamplingSettings.DeserializeSamplingSettings(samplingElement);
            }
            if (element.Element("frontend") is XElement frontendElement)
            {
                frontend = PipelineDiagnosticSettings.DeserializePipelineDiagnosticSettings(frontendElement);
            }
            if (element.Element("backend") is XElement backendElement)
            {
                backend = PipelineDiagnosticSettings.DeserializePipelineDiagnosticSettings(backendElement);
            }
            if (element.Element("logClientIp") is XElement logClientIpElement)
            {
                logClientIP = (bool?)logClientIpElement;
            }
            if (element.Element("httpCorrelationProtocol") is XElement httpCorrelationProtocolElement)
            {
                httpCorrelationProtocol = new HttpCorrelationProtocol(httpCorrelationProtocolElement.Value);
            }
            if (element.Element("verbosity") is XElement verbosityElement)
            {
                verbosity = new Verbosity(verbosityElement.Value);
            }
            if (element.Element("operationNameFormat") is XElement operationNameFormatElement)
            {
                operationNameFormat = new OperationNameFormat(operationNameFormatElement.Value);
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                resourceType = (string)typeElement;
            }
            if (element.Element("systemData") is XElement systemDataElement)
            {
                systemData = systemDataElement.(null);
            }
            return new DiagnosticContractData(id, name, resourceType, systemData, alwaysLog, loggerId, sampling, frontend, backend, logClientIP, httpCorrelationProtocol, verbosity, operationNameFormat);
        }
    }
}
