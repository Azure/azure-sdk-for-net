// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class DiagnosticContractData : IUtf8JsonSerializable, IModelJsonSerializable<DiagnosticContractData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<DiagnosticContractData>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<DiagnosticContractData>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(AlwaysLog))
            {
                writer.WritePropertyName("alwaysLog"u8);
                writer.WriteStringValue(AlwaysLog.Value.ToString());
            }
            if (Optional.IsDefined(LoggerId))
            {
                writer.WritePropertyName("loggerId"u8);
                writer.WriteStringValue(LoggerId);
            }
            if (Optional.IsDefined(Sampling))
            {
                writer.WritePropertyName("sampling"u8);
                if (Sampling is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<SamplingSettings>)Sampling).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Frontend))
            {
                writer.WritePropertyName("frontend"u8);
                if (Frontend is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<PipelineDiagnosticSettings>)Frontend).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Backend))
            {
                writer.WritePropertyName("backend"u8);
                if (Backend is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<PipelineDiagnosticSettings>)Backend).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(IsLogClientIPEnabled))
            {
                writer.WritePropertyName("logClientIp"u8);
                writer.WriteBooleanValue(IsLogClientIPEnabled.Value);
            }
            if (Optional.IsDefined(HttpCorrelationProtocol))
            {
                writer.WritePropertyName("httpCorrelationProtocol"u8);
                writer.WriteStringValue(HttpCorrelationProtocol.Value.ToString());
            }
            if (Optional.IsDefined(Verbosity))
            {
                writer.WritePropertyName("verbosity"u8);
                writer.WriteStringValue(Verbosity.Value.ToString());
            }
            if (Optional.IsDefined(OperationNameFormat))
            {
                writer.WritePropertyName("operationNameFormat"u8);
                writer.WriteStringValue(OperationNameFormat.Value.ToString());
            }
            if (Optional.IsDefined(Metrics))
            {
                writer.WritePropertyName("metrics"u8);
                writer.WriteBooleanValue(Metrics.Value);
            }
            writer.WriteEndObject();
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static DiagnosticContractData DeserializeDiagnosticContractData(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<AlwaysLog> alwaysLog = default;
            Optional<string> loggerId = default;
            Optional<SamplingSettings> sampling = default;
            Optional<PipelineDiagnosticSettings> frontend = default;
            Optional<PipelineDiagnosticSettings> backend = default;
            Optional<bool> logClientIP = default;
            Optional<HttpCorrelationProtocol> httpCorrelationProtocol = default;
            Optional<TraceVerbosityLevel> verbosity = default;
            Optional<OperationNameFormat> operationNameFormat = default;
            Optional<bool> metrics = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("alwaysLog"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            alwaysLog = new AlwaysLog(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("loggerId"u8))
                        {
                            loggerId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sampling"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            sampling = SamplingSettings.DeserializeSamplingSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("frontend"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            frontend = PipelineDiagnosticSettings.DeserializePipelineDiagnosticSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("backend"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            backend = PipelineDiagnosticSettings.DeserializePipelineDiagnosticSettings(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("logClientIp"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            logClientIP = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("httpCorrelationProtocol"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            httpCorrelationProtocol = new HttpCorrelationProtocol(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("verbosity"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            verbosity = new TraceVerbosityLevel(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("operationNameFormat"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            operationNameFormat = new OperationNameFormat(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("metrics"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            metrics = property0.Value.GetBoolean();
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new DiagnosticContractData(id, name, type, systemData.Value, Optional.ToNullable(alwaysLog), loggerId.Value, sampling.Value, frontend.Value, backend.Value, Optional.ToNullable(logClientIP), Optional.ToNullable(httpCorrelationProtocol), Optional.ToNullable(verbosity), Optional.ToNullable(operationNameFormat), Optional.ToNullable(metrics), rawData);
        }

        DiagnosticContractData IModelJsonSerializable<DiagnosticContractData>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeDiagnosticContractData(doc.RootElement, options);
        }

        BinaryData IModelSerializable<DiagnosticContractData>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        DiagnosticContractData IModelSerializable<DiagnosticContractData>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeDiagnosticContractData(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="DiagnosticContractData"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="DiagnosticContractData"/> to convert. </param>
        public static implicit operator RequestContent(DiagnosticContractData model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="DiagnosticContractData"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator DiagnosticContractData(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeDiagnosticContractData(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
