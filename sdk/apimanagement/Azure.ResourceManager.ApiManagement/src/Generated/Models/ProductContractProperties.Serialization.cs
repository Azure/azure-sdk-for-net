// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class ProductContractProperties
    {
        internal static ProductContractProperties DeserializeProductContractProperties(JsonElement element)
        {
            string displayName = default;
            Optional<string> description = default;
            Optional<string> terms = default;
            Optional<bool> subscriptionRequired = default;
            Optional<bool> approvalRequired = default;
            Optional<int> subscriptionsLimit = default;
            Optional<ProductState> state = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("terms"))
                {
                    terms = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subscriptionRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    subscriptionRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("approvalRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    approvalRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("subscriptionsLimit"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    subscriptionsLimit = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = property.Value.GetString().ToProductState();
                    continue;
                }
            }
            return new ProductContractProperties(description.Value, terms.Value, Optional.ToNullable(subscriptionRequired), Optional.ToNullable(approvalRequired), Optional.ToNullable(subscriptionsLimit), Optional.ToNullable(state), displayName);
        }

        internal static ProductContractProperties DeserializeProductContractProperties(XElement element)
        {
            string displayName = default;
            string description = default;
            string terms = default;
            bool? subscriptionRequired = default;
            bool? approvalRequired = default;
            int? subscriptionsLimit = default;
            ProductState? state = default;
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("terms") is XElement termsElement)
            {
                terms = (string)termsElement;
            }
            if (element.Element("subscriptionRequired") is XElement subscriptionRequiredElement)
            {
                subscriptionRequired = (bool?)subscriptionRequiredElement;
            }
            if (element.Element("approvalRequired") is XElement approvalRequiredElement)
            {
                approvalRequired = (bool?)approvalRequiredElement;
            }
            if (element.Element("subscriptionsLimit") is XElement subscriptionsLimitElement)
            {
                subscriptionsLimit = (int?)subscriptionsLimitElement;
            }
            if (element.Element("state") is XElement stateElement)
            {
                state = stateElement.Value.ToProductState();
            }
            return new ProductContractProperties(description, terms, subscriptionRequired, approvalRequired, subscriptionsLimit, state, displayName);
        }
    }
}
