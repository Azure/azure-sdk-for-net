// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> Operation parameters details. </summary>
    public partial class ParameterContract
    {
        /// <summary> Initializes a new instance of <see cref="ParameterContract"/>. </summary>
        /// <param name="name"> Parameter name. </param>
        /// <param name="parameterContractType"> Parameter type. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="parameterContractType"/> is null. </exception>
        public ParameterContract(string name, string parameterContractType)
        {
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(parameterContractType, nameof(parameterContractType));

            Name = name;
            ParameterContractType = parameterContractType;
            Values = new ChangeTrackingList<string>();
            Examples = new ChangeTrackingDictionary<string, ParameterExampleContract>();
        }

        /// <summary> Initializes a new instance of <see cref="ParameterContract"/>. </summary>
        /// <param name="name"> Parameter name. </param>
        /// <param name="description"> Parameter description. </param>
        /// <param name="parameterContractType"> Parameter type. </param>
        /// <param name="defaultValue"> Default parameter value. </param>
        /// <param name="isRequired"> Specifies whether parameter is required or not. </param>
        /// <param name="values"> Parameter values. </param>
        /// <param name="schemaId"> Schema identifier. </param>
        /// <param name="typeName"> Type name defined by the schema. </param>
        /// <param name="examples"> Exampled defined for the parameter. </param>
        internal ParameterContract(string name, string description, string parameterContractType, string defaultValue, bool? isRequired, IList<string> values, string schemaId, string typeName, IDictionary<string, ParameterExampleContract> examples)
        {
            Name = name;
            Description = description;
            ParameterContractType = parameterContractType;
            DefaultValue = defaultValue;
            IsRequired = isRequired;
            Values = values;
            SchemaId = schemaId;
            TypeName = typeName;
            Examples = examples;
        }

        /// <summary> Parameter name. </summary>
        public string Name { get; set; }
        /// <summary> Parameter description. </summary>
        public string Description { get; set; }
        /// <summary> Parameter type. </summary>
        public string ParameterContractType { get; set; }
        /// <summary> Default parameter value. </summary>
        public string DefaultValue { get; set; }
        /// <summary> Specifies whether parameter is required or not. </summary>
        public bool? IsRequired { get; set; }
        /// <summary> Parameter values. </summary>
        public IList<string> Values { get; }
        /// <summary> Schema identifier. </summary>
        public string SchemaId { get; set; }
        /// <summary> Type name defined by the schema. </summary>
        public string TypeName { get; set; }
        /// <summary> Exampled defined for the parameter. </summary>
        public IDictionary<string, ParameterExampleContract> Examples { get; }
    }
}
