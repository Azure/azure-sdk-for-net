// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> Determines the type of confirmation e-mail that will be sent to the newly created user. </summary>
    public readonly partial struct Confirmation : IEquatable<Confirmation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Confirmation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Confirmation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SignupValue = "signup";
        private const string InviteValue = "invite";

        /// <summary> Send an e-mail to the user confirming they have successfully signed up. </summary>
        public static Confirmation Signup { get; } = new Confirmation(SignupValue);
        /// <summary> Send an e-mail inviting the user to sign-up and complete registration. </summary>
        public static Confirmation Invite { get; } = new Confirmation(InviteValue);
        /// <summary> Determines if two <see cref="Confirmation"/> values are the same. </summary>
        public static bool operator ==(Confirmation left, Confirmation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Confirmation"/> values are not the same. </summary>
        public static bool operator !=(Confirmation left, Confirmation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Confirmation"/>. </summary>
        public static implicit operator Confirmation(string value) => new Confirmation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Confirmation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Confirmation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
