// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class OperationContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(TemplateParameters))
            {
                writer.WritePropertyName("templateParameters");
                writer.WriteStartArray();
                foreach (var item in TemplateParameters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Request))
            {
                writer.WritePropertyName("request");
                writer.WriteObjectValue(Request);
            }
            if (Optional.IsCollectionDefined(Responses))
            {
                writer.WritePropertyName("responses");
                writer.WriteStartArray();
                foreach (var item in Responses)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Policies))
            {
                writer.WritePropertyName("policies");
                writer.WriteStringValue(Policies);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Method))
            {
                writer.WritePropertyName("method");
                writer.WriteStringValue(Method);
            }
            if (Optional.IsDefined(UrlTemplate))
            {
                writer.WritePropertyName("urlTemplate");
                writer.WriteStringValue(UrlTemplate);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static OperationContractData DeserializeOperationContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<IList<ParameterContract>> templateParameters = default;
            Optional<string> description = default;
            Optional<RequestContract> request = default;
            Optional<IList<ResponseContract>> responses = default;
            Optional<string> policies = default;
            Optional<string> displayName = default;
            Optional<string> method = default;
            Optional<string> urlTemplate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("templateParameters"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ParameterContract> array = new List<ParameterContract>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ParameterContract.DeserializeParameterContract(item));
                            }
                            templateParameters = array;
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("request"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            request = RequestContract.DeserializeRequestContract(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("responses"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<ResponseContract> array = new List<ResponseContract>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(ResponseContract.DeserializeResponseContract(item));
                            }
                            responses = array;
                            continue;
                        }
                        if (property0.NameEquals("policies"))
                        {
                            policies = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("method"))
                        {
                            method = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("urlTemplate"))
                        {
                            urlTemplate = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new OperationContractData(id, name, type, systemData.Value, Optional.ToList(templateParameters), description.Value, request.Value, Optional.ToList(responses), policies.Value, displayName.Value, method.Value, urlTemplate.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "OperationContract");
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Request))
            {
                writer.WriteObjectValue(Request, "request");
            }
            if (Optional.IsDefined(Policies))
            {
                writer.WriteStartElement("policies");
                writer.WriteValue(Policies);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WriteStartElement("displayName");
                writer.WriteValue(DisplayName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Method))
            {
                writer.WriteStartElement("method");
                writer.WriteValue(Method);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(UrlTemplate))
            {
                writer.WriteStartElement("urlTemplate");
                writer.WriteValue(UrlTemplate);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(ResourceType);
            writer.WriteEndElement();
            if (Optional.IsDefined(SystemData))
            {
                writer.WriteStartElement("systemData");
                writer.WriteValue(SystemData);
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(TemplateParameters))
            {
                foreach (var item in TemplateParameters)
                {
                    writer.WriteObjectValue(item, "ParameterContract");
                }
            }
            if (Optional.IsCollectionDefined(Responses))
            {
                foreach (var item in Responses)
                {
                    writer.WriteObjectValue(item, "ResponseContract");
                }
            }
            writer.WriteEndElement();
        }

        internal static OperationContractData DeserializeOperationContractData(XElement element)
        {
            string description = default;
            RequestContract request = default;
            string policies = default;
            string displayName = default;
            string method = default;
            string urlTemplate = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType resourceType = default;
            SystemData systemData = default;
            IList<ParameterContract> templateParameters = default;
            IList<ResponseContract> responses = default;
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("request") is XElement requestElement)
            {
                request = RequestContract.DeserializeRequestContract(requestElement);
            }
            if (element.Element("policies") is XElement policiesElement)
            {
                policies = (string)policiesElement;
            }
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("method") is XElement methodElement)
            {
                method = (string)methodElement;
            }
            if (element.Element("urlTemplate") is XElement urlTemplateElement)
            {
                urlTemplate = (string)urlTemplateElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                resourceType = (string)typeElement;
            }
            if (element.Element("systemData") is XElement systemDataElement)
            {
                systemData = systemDataElement.(null);
            }
            var array = new List<ParameterContract>();
            foreach (var e in element.Elements("ParameterContract"))
            {
                array.Add(ParameterContract.DeserializeParameterContract(e));
            }
            templateParameters = array;
            var array0 = new List<ResponseContract>();
            foreach (var e in element.Elements("ResponseContract"))
            {
                array0.Add(ResponseContract.DeserializeResponseContract(e));
            }
            responses = array0;
            return new OperationContractData(id, name, resourceType, systemData, templateParameters, description, request, responses, policies, displayName, method, urlTemplate);
        }
    }
}
