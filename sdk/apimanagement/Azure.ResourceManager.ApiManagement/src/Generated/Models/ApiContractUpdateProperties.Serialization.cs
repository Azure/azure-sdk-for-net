// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class ApiContractUpdateProperties
    {
        internal static ApiContractUpdateProperties DeserializeApiContractUpdateProperties(JsonElement element)
        {
            Optional<string> displayName = default;
            Optional<string> serviceUrl = default;
            Optional<string> path = default;
            Optional<IReadOnlyList<Protocol>> protocols = default;
            Optional<string> description = default;
            Optional<AuthenticationSettingsContract> authenticationSettings = default;
            Optional<SubscriptionKeyParameterNamesContract> subscriptionKeyParameterNames = default;
            Optional<ApiType> type = default;
            Optional<string> apiRevision = default;
            Optional<string> apiVersion = default;
            Optional<bool> isCurrent = default;
            Optional<bool> isOnline = default;
            Optional<string> apiRevisionDescription = default;
            Optional<string> apiVersionDescription = default;
            Optional<string> apiVersionSetId = default;
            Optional<bool> subscriptionRequired = default;
            Optional<string> termsOfServiceUrl = default;
            Optional<ApiContactInformation> contact = default;
            Optional<ApiLicenseInformation> license = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceUrl"))
                {
                    serviceUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("path"))
                {
                    path = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protocols"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Protocol> array = new List<Protocol>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new Protocol(item.GetString()));
                    }
                    protocols = array;
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authenticationSettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authenticationSettings = AuthenticationSettingsContract.DeserializeAuthenticationSettingsContract(property.Value);
                    continue;
                }
                if (property.NameEquals("subscriptionKeyParameterNames"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    subscriptionKeyParameterNames = SubscriptionKeyParameterNamesContract.DeserializeSubscriptionKeyParameterNamesContract(property.Value);
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    type = new ApiType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("apiRevision"))
                {
                    apiRevision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiVersion"))
                {
                    apiVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isCurrent"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isCurrent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isOnline"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isOnline = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("apiRevisionDescription"))
                {
                    apiRevisionDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiVersionDescription"))
                {
                    apiVersionDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("apiVersionSetId"))
                {
                    apiVersionSetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subscriptionRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    subscriptionRequired = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("termsOfServiceUrl"))
                {
                    termsOfServiceUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contact"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    contact = ApiContactInformation.DeserializeApiContactInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("license"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    license = ApiLicenseInformation.DeserializeApiLicenseInformation(property.Value);
                    continue;
                }
            }
            return new ApiContractUpdateProperties(description.Value, authenticationSettings.Value, subscriptionKeyParameterNames.Value, Optional.ToNullable(type), apiRevision.Value, apiVersion.Value, Optional.ToNullable(isCurrent), Optional.ToNullable(isOnline), apiRevisionDescription.Value, apiVersionDescription.Value, apiVersionSetId.Value, Optional.ToNullable(subscriptionRequired), termsOfServiceUrl.Value, contact.Value, license.Value, displayName.Value, serviceUrl.Value, path.Value, Optional.ToList(protocols));
        }

        internal static ApiContractUpdateProperties DeserializeApiContractUpdateProperties(XElement element)
        {
            string displayName = default;
            string serviceUrl = default;
            string path = default;
            string description = default;
            AuthenticationSettingsContract authenticationSettings = default;
            SubscriptionKeyParameterNamesContract subscriptionKeyParameterNames = default;
            ApiType? apiType = default;
            string apiRevision = default;
            string apiVersion = default;
            bool? isCurrent = default;
            bool? isOnline = default;
            string apiRevisionDescription = default;
            string apiVersionDescription = default;
            string apiVersionSetId = default;
            bool? subscriptionRequired = default;
            string termsOfServiceUrl = default;
            ApiContactInformation contact = default;
            ApiLicenseInformation license = default;
            IReadOnlyList<Protocol> protocols = default;
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("serviceUrl") is XElement serviceUrlElement)
            {
                serviceUrl = (string)serviceUrlElement;
            }
            if (element.Element("path") is XElement pathElement)
            {
                path = (string)pathElement;
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("authenticationSettings") is XElement authenticationSettingsElement)
            {
                authenticationSettings = AuthenticationSettingsContract.DeserializeAuthenticationSettingsContract(authenticationSettingsElement);
            }
            if (element.Element("subscriptionKeyParameterNames") is XElement subscriptionKeyParameterNamesElement)
            {
                subscriptionKeyParameterNames = SubscriptionKeyParameterNamesContract.DeserializeSubscriptionKeyParameterNamesContract(subscriptionKeyParameterNamesElement);
            }
            if (element.Element("type") is XElement typeElement)
            {
                apiType = new ApiType(typeElement.Value);
            }
            if (element.Element("apiRevision") is XElement apiRevisionElement)
            {
                apiRevision = (string)apiRevisionElement;
            }
            if (element.Element("apiVersion") is XElement apiVersionElement)
            {
                apiVersion = (string)apiVersionElement;
            }
            if (element.Element("isCurrent") is XElement isCurrentElement)
            {
                isCurrent = (bool?)isCurrentElement;
            }
            if (element.Element("isOnline") is XElement isOnlineElement)
            {
                isOnline = (bool?)isOnlineElement;
            }
            if (element.Element("apiRevisionDescription") is XElement apiRevisionDescriptionElement)
            {
                apiRevisionDescription = (string)apiRevisionDescriptionElement;
            }
            if (element.Element("apiVersionDescription") is XElement apiVersionDescriptionElement)
            {
                apiVersionDescription = (string)apiVersionDescriptionElement;
            }
            if (element.Element("apiVersionSetId") is XElement apiVersionSetIdElement)
            {
                apiVersionSetId = (string)apiVersionSetIdElement;
            }
            if (element.Element("subscriptionRequired") is XElement subscriptionRequiredElement)
            {
                subscriptionRequired = (bool?)subscriptionRequiredElement;
            }
            if (element.Element("termsOfServiceUrl") is XElement termsOfServiceUrlElement)
            {
                termsOfServiceUrl = (string)termsOfServiceUrlElement;
            }
            if (element.Element("contact") is XElement contactElement)
            {
                contact = ApiContactInformation.DeserializeApiContactInformation(contactElement);
            }
            if (element.Element("license") is XElement licenseElement)
            {
                license = ApiLicenseInformation.DeserializeApiLicenseInformation(licenseElement);
            }
            var array = new List<Protocol>();
            foreach (var e in element.Elements("Protocol"))
            {
                array.Add(new Protocol(e.Value));
            }
            protocols = array;
            return new ApiContractUpdateProperties(description, authenticationSettings, subscriptionKeyParameterNames, apiType, apiRevision, apiVersion, isCurrent, isOnline, apiRevisionDescription, apiVersionDescription, apiVersionSetId, subscriptionRequired, termsOfServiceUrl, contact, license, displayName, serviceUrl, path, protocols);
        }
    }
}
