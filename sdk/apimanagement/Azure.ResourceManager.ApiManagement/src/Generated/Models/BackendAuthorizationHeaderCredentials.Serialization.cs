// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class BackendAuthorizationHeaderCredentials : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("scheme");
            writer.WriteStringValue(Scheme);
            writer.WritePropertyName("parameter");
            writer.WriteStringValue(Parameter);
            writer.WriteEndObject();
        }

        internal static BackendAuthorizationHeaderCredentials DeserializeBackendAuthorizationHeaderCredentials(JsonElement element)
        {
            string scheme = default;
            string parameter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scheme"))
                {
                    scheme = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameter"))
                {
                    parameter = property.Value.GetString();
                    continue;
                }
            }
            return new BackendAuthorizationHeaderCredentials(scheme, parameter);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "BackendAuthorizationHeaderCredentials");
            writer.WriteStartElement("scheme");
            writer.WriteValue(Scheme);
            writer.WriteEndElement();
            writer.WriteStartElement("parameter");
            writer.WriteValue(Parameter);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static BackendAuthorizationHeaderCredentials DeserializeBackendAuthorizationHeaderCredentials(XElement element)
        {
            string scheme = default;
            string parameter = default;
            if (element.Element("scheme") is XElement schemeElement)
            {
                scheme = (string)schemeElement;
            }
            if (element.Element("parameter") is XElement parameterElement)
            {
                parameter = (string)parameterElement;
            }
            return new BackendAuthorizationHeaderCredentials(scheme, parameter);
        }
    }
}
