// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> The type of access to be used for the storage account. </summary>
    public readonly partial struct AccessType : IEquatable<AccessType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccessType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AccessKeyValue = "AccessKey";
        private const string SystemAssignedManagedIdentityValue = "SystemAssignedManagedIdentity";
        private const string UserAssignedManagedIdentityValue = "UserAssignedManagedIdentity";

        /// <summary> Use access key. </summary>
        public static AccessType AccessKey { get; } = new AccessType(AccessKeyValue);
        /// <summary> Use system assigned managed identity. </summary>
        public static AccessType SystemAssignedManagedIdentity { get; } = new AccessType(SystemAssignedManagedIdentityValue);
        /// <summary> Use user assigned managed identity. </summary>
        public static AccessType UserAssignedManagedIdentity { get; } = new AccessType(UserAssignedManagedIdentityValue);
        /// <summary> Determines if two <see cref="AccessType"/> values are the same. </summary>
        public static bool operator ==(AccessType left, AccessType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessType"/> values are not the same. </summary>
        public static bool operator !=(AccessType left, AccessType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessType"/>. </summary>
        public static implicit operator AccessType(string value) => new AccessType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
