// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class TermsOfServiceProperties : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Text))
            {
                writer.WritePropertyName("text");
                writer.WriteStringValue(Text);
            }
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled");
                writer.WriteBooleanValue(Enabled.Value);
            }
            if (Optional.IsDefined(ConsentRequired))
            {
                writer.WritePropertyName("consentRequired");
                writer.WriteBooleanValue(ConsentRequired.Value);
            }
            writer.WriteEndObject();
        }

        internal static TermsOfServiceProperties DeserializeTermsOfServiceProperties(JsonElement element)
        {
            Optional<string> text = default;
            Optional<bool> enabled = default;
            Optional<bool> consentRequired = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("text"))
                {
                    text = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("consentRequired"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    consentRequired = property.Value.GetBoolean();
                    continue;
                }
            }
            return new TermsOfServiceProperties(text.Value, Optional.ToNullable(enabled), Optional.ToNullable(consentRequired));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "TermsOfServiceProperties");
            if (Optional.IsDefined(Text))
            {
                writer.WriteStartElement("text");
                writer.WriteValue(Text);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Enabled))
            {
                writer.WriteStartElement("enabled");
                writer.WriteValue(Enabled.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ConsentRequired))
            {
                writer.WriteStartElement("consentRequired");
                writer.WriteValue(ConsentRequired.Value);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static TermsOfServiceProperties DeserializeTermsOfServiceProperties(XElement element)
        {
            string text = default;
            bool? enabled = default;
            bool? consentRequired = default;
            if (element.Element("text") is XElement textElement)
            {
                text = (string)textElement;
            }
            if (element.Element("enabled") is XElement enabledElement)
            {
                enabled = (bool?)enabledElement;
            }
            if (element.Element("consentRequired") is XElement consentRequiredElement)
            {
                consentRequired = (bool?)consentRequiredElement;
            }
            return new TermsOfServiceProperties(text, enabled, consentRequired);
        }
    }
}
