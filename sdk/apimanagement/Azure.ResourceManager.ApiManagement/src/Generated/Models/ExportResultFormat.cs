// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> Format in which the API Details are exported to the Storage Blob with Sas Key valid for 5 minutes. </summary>
    public readonly partial struct ExportResultFormat : IEquatable<ExportResultFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExportResultFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExportResultFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SwaggerValue = "swagger-link-json";
        private const string WsdlValue = "wsdl-link+xml";
        private const string WadlValue = "wadl-link-json";
        private const string OpenApiValue = "openapi-link";

        /// <summary> The API Definition is exported in OpenAPI Specification 2.0 format to the Storage Blob. </summary>
        public static ExportResultFormat Swagger { get; } = new ExportResultFormat(SwaggerValue);
        /// <summary> The API Definition is exported in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap`. </summary>
        public static ExportResultFormat Wsdl { get; } = new ExportResultFormat(WsdlValue);
        /// <summary> Export the API Definition in WADL Schema to Storage Blob. </summary>
        public static ExportResultFormat Wadl { get; } = new ExportResultFormat(WadlValue);
        /// <summary> Export the API Definition in OpenAPI Specification 3.0 to Storage Blob. </summary>
        public static ExportResultFormat OpenApi { get; } = new ExportResultFormat(OpenApiValue);
        /// <summary> Determines if two <see cref="ExportResultFormat"/> values are the same. </summary>
        public static bool operator ==(ExportResultFormat left, ExportResultFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExportResultFormat"/> values are not the same. </summary>
        public static bool operator !=(ExportResultFormat left, ExportResultFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExportResultFormat"/>. </summary>
        public static implicit operator ExportResultFormat(string value) => new ExportResultFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExportResultFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExportResultFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
