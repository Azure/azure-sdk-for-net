// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class GatewayHostnameConfigurationContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Hostname))
            {
                writer.WritePropertyName("hostname");
                writer.WriteStringValue(Hostname);
            }
            if (Optional.IsDefined(CertificateId))
            {
                writer.WritePropertyName("certificateId");
                writer.WriteStringValue(CertificateId);
            }
            if (Optional.IsDefined(NegotiateClientCertificate))
            {
                writer.WritePropertyName("negotiateClientCertificate");
                writer.WriteBooleanValue(NegotiateClientCertificate.Value);
            }
            if (Optional.IsDefined(Tls10Enabled))
            {
                writer.WritePropertyName("tls10Enabled");
                writer.WriteBooleanValue(Tls10Enabled.Value);
            }
            if (Optional.IsDefined(Tls11Enabled))
            {
                writer.WritePropertyName("tls11Enabled");
                writer.WriteBooleanValue(Tls11Enabled.Value);
            }
            if (Optional.IsDefined(Http2Enabled))
            {
                writer.WritePropertyName("http2Enabled");
                writer.WriteBooleanValue(Http2Enabled.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static GatewayHostnameConfigurationContractData DeserializeGatewayHostnameConfigurationContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> hostname = default;
            Optional<string> certificateId = default;
            Optional<bool> negotiateClientCertificate = default;
            Optional<bool> tls10Enabled = default;
            Optional<bool> tls11Enabled = default;
            Optional<bool> http2Enabled = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("hostname"))
                        {
                            hostname = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("certificateId"))
                        {
                            certificateId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("negotiateClientCertificate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            negotiateClientCertificate = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("tls10Enabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            tls10Enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("tls11Enabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            tls11Enabled = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("http2Enabled"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            http2Enabled = property0.Value.GetBoolean();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new GatewayHostnameConfigurationContractData(id, name, type, hostname.Value, certificateId.Value, Optional.ToNullable(negotiateClientCertificate), Optional.ToNullable(tls10Enabled), Optional.ToNullable(tls11Enabled), Optional.ToNullable(http2Enabled));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "GatewayHostnameConfigurationContract");
            if (Optional.IsDefined(Hostname))
            {
                writer.WriteStartElement("hostname");
                writer.WriteValue(Hostname);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(CertificateId))
            {
                writer.WriteStartElement("certificateId");
                writer.WriteValue(CertificateId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(NegotiateClientCertificate))
            {
                writer.WriteStartElement("negotiateClientCertificate");
                writer.WriteValue(NegotiateClientCertificate.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Tls10Enabled))
            {
                writer.WriteStartElement("tls10Enabled");
                writer.WriteValue(Tls10Enabled.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Tls11Enabled))
            {
                writer.WriteStartElement("tls11Enabled");
                writer.WriteValue(Tls11Enabled.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Http2Enabled))
            {
                writer.WriteStartElement("http2Enabled");
                writer.WriteValue(Http2Enabled.Value);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static GatewayHostnameConfigurationContractData DeserializeGatewayHostnameConfigurationContractData(XElement element)
        {
            string hostname = default;
            string certificateId = default;
            bool? negotiateClientCertificate = default;
            bool? tls10Enabled = default;
            bool? tls11Enabled = default;
            bool? http2Enabled = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            if (element.Element("hostname") is XElement hostnameElement)
            {
                hostname = (string)hostnameElement;
            }
            if (element.Element("certificateId") is XElement certificateIdElement)
            {
                certificateId = (string)certificateIdElement;
            }
            if (element.Element("negotiateClientCertificate") is XElement negotiateClientCertificateElement)
            {
                negotiateClientCertificate = (bool?)negotiateClientCertificateElement;
            }
            if (element.Element("tls10Enabled") is XElement tls10EnabledElement)
            {
                tls10Enabled = (bool?)tls10EnabledElement;
            }
            if (element.Element("tls11Enabled") is XElement tls11EnabledElement)
            {
                tls11Enabled = (bool?)tls11EnabledElement;
            }
            if (element.Element("http2Enabled") is XElement http2EnabledElement)
            {
                http2Enabled = (bool?)http2EnabledElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            return new GatewayHostnameConfigurationContractData(id, name, type, hostname, certificateId, negotiateClientCertificate, tls10Enabled, tls11Enabled, http2Enabled);
        }
    }
}
