// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class IssueContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(CreatedDate))
            {
                writer.WritePropertyName("createdDate");
                writer.WriteStringValue(CreatedDate.Value, "O");
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsDefined(ApiId))
            {
                writer.WritePropertyName("apiId");
                writer.WriteStringValue(ApiId);
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title");
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(UserId))
            {
                writer.WritePropertyName("userId");
                writer.WriteStringValue(UserId);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static IssueContractData DeserializeIssueContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<DateTimeOffset> createdDate = default;
            Optional<State> state = default;
            Optional<string> apiId = default;
            Optional<string> title = default;
            Optional<string> description = default;
            Optional<string> userId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("createdDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            createdDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("state"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            state = new State(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("apiId"))
                        {
                            apiId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("title"))
                        {
                            title = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("userId"))
                        {
                            userId = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new IssueContractData(id, name, type, Optional.ToNullable(createdDate), Optional.ToNullable(state), apiId.Value, title.Value, description.Value, userId.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "IssueContract");
            if (Optional.IsDefined(CreatedDate))
            {
                writer.WriteStartElement("createdDate");
                writer.WriteValue(CreatedDate.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(State))
            {
                writer.WriteStartElement("state");
                writer.WriteValue(State.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ApiId))
            {
                writer.WriteStartElement("apiId");
                writer.WriteValue(ApiId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Title))
            {
                writer.WriteStartElement("title");
                writer.WriteValue(Title);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(UserId))
            {
                writer.WriteStartElement("userId");
                writer.WriteValue(UserId);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static IssueContractData DeserializeIssueContractData(XElement element)
        {
            DateTimeOffset? createdDate = default;
            State? state = default;
            string apiId = default;
            string title = default;
            string description = default;
            string userId = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            if (element.Element("createdDate") is XElement createdDateElement)
            {
                createdDate = createdDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("state") is XElement stateElement)
            {
                state = new State(stateElement.Value);
            }
            if (element.Element("apiId") is XElement apiIdElement)
            {
                apiId = (string)apiIdElement;
            }
            if (element.Element("title") is XElement titleElement)
            {
                title = (string)titleElement;
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("userId") is XElement userIdElement)
            {
                userId = (string)userIdElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            return new IssueContractData(id, name, type, createdDate, state, apiId, title, description, userId);
        }
    }
}
