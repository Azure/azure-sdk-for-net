// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class HostnameConfiguration : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(HostnameType.ToString());
            writer.WritePropertyName("hostName"u8);
            writer.WriteStringValue(HostName);
            if (Core.Optional.IsDefined(KeyVaultSecretUri))
            {
                writer.WritePropertyName("keyVaultId"u8);
                writer.WriteStringValue(KeyVaultSecretUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(IdentityClientId))
            {
                writer.WritePropertyName("identityClientId"u8);
                writer.WriteStringValue(IdentityClientId);
            }
            if (Core.Optional.IsDefined(EncodedCertificate))
            {
                writer.WritePropertyName("encodedCertificate"u8);
                writer.WriteStringValue(EncodedCertificate);
            }
            if (Core.Optional.IsDefined(CertificatePassword))
            {
                writer.WritePropertyName("certificatePassword"u8);
                writer.WriteStringValue(CertificatePassword);
            }
            if (Core.Optional.IsDefined(IsDefaultSslBindingEnabled))
            {
                writer.WritePropertyName("defaultSslBinding"u8);
                writer.WriteBooleanValue(IsDefaultSslBindingEnabled.Value);
            }
            if (Core.Optional.IsDefined(IsClientCertificateNegotiationEnabled))
            {
                writer.WritePropertyName("negotiateClientCertificate"u8);
                writer.WriteBooleanValue(IsClientCertificateNegotiationEnabled.Value);
            }
            if (Core.Optional.IsDefined(Certificate))
            {
                writer.WritePropertyName("certificate"u8);
                writer.WriteObjectValue(Certificate);
            }
            if (Core.Optional.IsDefined(CertificateSource))
            {
                writer.WritePropertyName("certificateSource"u8);
                writer.WriteStringValue(CertificateSource.Value.ToString());
            }
            if (Core.Optional.IsDefined(CertificateStatus))
            {
                writer.WritePropertyName("certificateStatus"u8);
                writer.WriteStringValue(CertificateStatus.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static HostnameConfiguration DeserializeHostnameConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            HostnameType type = default;
            string hostName = default;
            Core.Optional<Uri> keyVaultId = default;
            Core.Optional<string> identityClientId = default;
            Core.Optional<string> encodedCertificate = default;
            Core.Optional<string> certificatePassword = default;
            Core.Optional<bool> defaultSslBinding = default;
            Core.Optional<bool> negotiateClientCertificate = default;
            Core.Optional<CertificateInformation> certificate = default;
            Core.Optional<CertificateSource> certificateSource = default;
            Core.Optional<CertificateStatus> certificateStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = new HostnameType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hostName"u8))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyVaultId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyVaultId = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("identityClientId"u8))
                {
                    identityClientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encodedCertificate"u8))
                {
                    encodedCertificate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificatePassword"u8))
                {
                    certificatePassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultSslBinding"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    defaultSslBinding = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("negotiateClientCertificate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    negotiateClientCertificate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("certificate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certificate = CertificateInformation.DeserializeCertificateInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("certificateSource"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certificateSource = new CertificateSource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("certificateStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certificateStatus = new CertificateStatus(property.Value.GetString());
                    continue;
                }
            }
            return new HostnameConfiguration(type, hostName, keyVaultId.Value, identityClientId.Value, encodedCertificate.Value, certificatePassword.Value, Core.Optional.ToNullable(defaultSslBinding), Core.Optional.ToNullable(negotiateClientCertificate), certificate.Value, Core.Optional.ToNullable(certificateSource), Core.Optional.ToNullable(certificateStatus));
        }
    }
}
