// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class HostnameConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(HostnameType.ToString());
            writer.WritePropertyName("hostName");
            writer.WriteStringValue(HostName);
            if (Optional.IsDefined(KeyVaultSecretUri))
            {
                if (KeyVaultSecretUri != null)
                {
                    writer.WritePropertyName("keyVaultId");
                    writer.WriteStringValue(KeyVaultSecretUri.AbsoluteUri);
                }
                else
                {
                    writer.WriteNull("keyVaultId");
                }
            }
            if (Optional.IsDefined(IdentityClientId))
            {
                if (IdentityClientId != null)
                {
                    writer.WritePropertyName("identityClientId");
                    writer.WriteStringValue(IdentityClientId);
                }
                else
                {
                    writer.WriteNull("identityClientId");
                }
            }
            if (Optional.IsDefined(EncodedCertificate))
            {
                if (EncodedCertificate != null)
                {
                    writer.WritePropertyName("encodedCertificate");
                    writer.WriteStringValue(EncodedCertificate);
                }
                else
                {
                    writer.WriteNull("encodedCertificate");
                }
            }
            if (Optional.IsDefined(CertificatePassword))
            {
                if (CertificatePassword != null)
                {
                    writer.WritePropertyName("certificatePassword");
                    writer.WriteStringValue(CertificatePassword);
                }
                else
                {
                    writer.WriteNull("certificatePassword");
                }
            }
            if (Optional.IsDefined(DefaultSslBinding))
            {
                writer.WritePropertyName("defaultSslBinding");
                writer.WriteBooleanValue(DefaultSslBinding.Value);
            }
            if (Optional.IsDefined(NegotiateClientCertificate))
            {
                writer.WritePropertyName("negotiateClientCertificate");
                writer.WriteBooleanValue(NegotiateClientCertificate.Value);
            }
            if (Optional.IsDefined(Certificate))
            {
                if (Certificate != null)
                {
                    writer.WritePropertyName("certificate");
                    writer.WriteObjectValue(Certificate);
                }
                else
                {
                    writer.WriteNull("certificate");
                }
            }
            if (Optional.IsDefined(CertificateSource))
            {
                writer.WritePropertyName("certificateSource");
                writer.WriteStringValue(CertificateSource.Value.ToString());
            }
            if (Optional.IsDefined(CertificateStatus))
            {
                if (CertificateStatus != null)
                {
                    writer.WritePropertyName("certificateStatus");
                    writer.WriteStringValue(CertificateStatus.Value.ToString());
                }
                else
                {
                    writer.WriteNull("certificateStatus");
                }
            }
            writer.WriteEndObject();
        }

        internal static HostnameConfiguration DeserializeHostnameConfiguration(JsonElement element)
        {
            HostnameType type = default;
            string hostName = default;
            Optional<Uri> keyVaultId = default;
            Optional<string> identityClientId = default;
            Optional<string> encodedCertificate = default;
            Optional<string> certificatePassword = default;
            Optional<bool> defaultSslBinding = default;
            Optional<bool> negotiateClientCertificate = default;
            Optional<CertificateInformation> certificate = default;
            Optional<CertificateSource> certificateSource = default;
            Optional<CertificateStatus?> certificateStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = new HostnameType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hostName"))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("keyVaultId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keyVaultId = null;
                        continue;
                    }
                    keyVaultId = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("identityClientId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        identityClientId = null;
                        continue;
                    }
                    identityClientId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("encodedCertificate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        encodedCertificate = null;
                        continue;
                    }
                    encodedCertificate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificatePassword"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        certificatePassword = null;
                        continue;
                    }
                    certificatePassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultSslBinding"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultSslBinding = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("negotiateClientCertificate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    negotiateClientCertificate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("certificate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        certificate = null;
                        continue;
                    }
                    certificate = CertificateInformation.DeserializeCertificateInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("certificateSource"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    certificateSource = new CertificateSource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("certificateStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        certificateStatus = null;
                        continue;
                    }
                    certificateStatus = new CertificateStatus(property.Value.GetString());
                    continue;
                }
            }
            return new HostnameConfiguration(type, hostName, keyVaultId.Value, identityClientId.Value, encodedCertificate.Value, certificatePassword.Value, Optional.ToNullable(defaultSslBinding), Optional.ToNullable(negotiateClientCertificate), certificate.Value, Optional.ToNullable(certificateSource), Optional.ToNullable(certificateStatus));
        }
    }
}
