// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class RepresentationContract : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("contentType");
            writer.WriteStringValue(ContentType);
            if (Optional.IsDefined(SchemaId))
            {
                writer.WritePropertyName("schemaId");
                writer.WriteStringValue(SchemaId);
            }
            if (Optional.IsDefined(TypeName))
            {
                writer.WritePropertyName("typeName");
                writer.WriteStringValue(TypeName);
            }
            if (Optional.IsCollectionDefined(FormParameters))
            {
                writer.WritePropertyName("formParameters");
                writer.WriteStartArray();
                foreach (var item in FormParameters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Examples))
            {
                writer.WritePropertyName("examples");
                writer.WriteStartObject();
                foreach (var item in Examples)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static RepresentationContract DeserializeRepresentationContract(JsonElement element)
        {
            string contentType = default;
            Optional<string> schemaId = default;
            Optional<string> typeName = default;
            Optional<IList<ParameterContract>> formParameters = default;
            Optional<IDictionary<string, ParameterExampleContract>> examples = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("contentType"))
                {
                    contentType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemaId"))
                {
                    schemaId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("typeName"))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("formParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ParameterContract> array = new List<ParameterContract>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParameterContract.DeserializeParameterContract(item));
                    }
                    formParameters = array;
                    continue;
                }
                if (property.NameEquals("examples"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, ParameterExampleContract> dictionary = new Dictionary<string, ParameterExampleContract>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ParameterExampleContract.DeserializeParameterExampleContract(property0.Value));
                    }
                    examples = dictionary;
                    continue;
                }
            }
            return new RepresentationContract(contentType, schemaId.Value, typeName.Value, Optional.ToList(formParameters), Optional.ToDictionary(examples));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "RepresentationContract");
            writer.WriteStartElement("contentType");
            writer.WriteValue(ContentType);
            writer.WriteEndElement();
            if (Optional.IsDefined(SchemaId))
            {
                writer.WriteStartElement("schemaId");
                writer.WriteValue(SchemaId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(TypeName))
            {
                writer.WriteStartElement("typeName");
                writer.WriteValue(TypeName);
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(Examples))
            {
                foreach (var pair in Examples)
                {
                    writer.WriteObjectValue(pair.Value, "ParameterExampleContract");
                }
            }
            if (Optional.IsCollectionDefined(FormParameters))
            {
                foreach (var item in FormParameters)
                {
                    writer.WriteObjectValue(item, "ParameterContract");
                }
            }
            writer.WriteEndElement();
        }

        internal static RepresentationContract DeserializeRepresentationContract(XElement element)
        {
            string contentType = default;
            string schemaId = default;
            string typeName = default;
            IDictionary<string, ParameterExampleContract> examples = default;
            IList<ParameterContract> formParameters = default;
            if (element.Element("contentType") is XElement contentTypeElement)
            {
                contentType = (string)contentTypeElement;
            }
            if (element.Element("schemaId") is XElement schemaIdElement)
            {
                schemaId = (string)schemaIdElement;
            }
            if (element.Element("typeName") is XElement typeNameElement)
            {
                typeName = (string)typeNameElement;
            }
            if (element.Element("examples") is XElement examplesElement)
            {
                var dictionary = new Dictionary<string, ParameterExampleContract>();
                foreach (var e in examplesElement.Elements())
                {
                    dictionary.Add(e.Name.LocalName, ParameterExampleContract.DeserializeParameterExampleContract(e));
                }
                examples = dictionary;
            }
            var array = new List<ParameterContract>();
            foreach (var e in element.Elements("ParameterContract"))
            {
                array.Add(ParameterContract.DeserializeParameterContract(e));
            }
            formParameters = array;
            return new RepresentationContract(contentType, schemaId, typeName, formParameters, examples);
        }
    }
}
