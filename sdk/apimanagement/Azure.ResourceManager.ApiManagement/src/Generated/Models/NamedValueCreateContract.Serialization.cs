// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class NamedValueCreateContract : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteStartArray();
                foreach (var item in Tags)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Secret))
            {
                writer.WritePropertyName("secret");
                writer.WriteBooleanValue(Secret.Value);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value");
                writer.WriteStringValue(Value);
            }
            if (Optional.IsDefined(KeyVault))
            {
                writer.WritePropertyName("keyVault");
                writer.WriteObjectValue(KeyVault);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static NamedValueCreateContract DeserializeNamedValueCreateContract(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<IList<string>> tags = default;
            Optional<bool> secret = default;
            Optional<string> displayName = default;
            Optional<string> value = default;
            Optional<KeyVaultContractCreateProperties> keyVault = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("tags"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            tags = array;
                            continue;
                        }
                        if (property0.NameEquals("secret"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            secret = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("value"))
                        {
                            value = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("keyVault"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            keyVault = KeyVaultContractCreateProperties.DeserializeKeyVaultContractCreateProperties(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new NamedValueCreateContract(id, name, type, Optional.ToList(tags), Optional.ToNullable(secret), displayName.Value, value.Value, keyVault.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "NamedValueCreateContract");
            if (Optional.IsDefined(Secret))
            {
                writer.WriteStartElement("secret");
                writer.WriteValue(Secret.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WriteStartElement("displayName");
                writer.WriteValue(DisplayName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Value))
            {
                writer.WriteStartElement("value");
                writer.WriteValue(Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(KeyVault))
            {
                writer.WriteObjectValue(KeyVault, "keyVault");
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(Tags))
            {
                foreach (var item in Tags)
                {
                    writer.WriteStartElement("NamedValueEntityBaseParametersTagsItem");
                    writer.WriteValue(item);
                    writer.WriteEndElement();
                }
            }
            writer.WriteEndElement();
        }

        internal static NamedValueCreateContract DeserializeNamedValueCreateContract(XElement element)
        {
            bool? secret = default;
            string displayName = default;
            string value = default;
            KeyVaultContractCreateProperties keyVault = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            IList<string> tags = default;
            if (element.Element("secret") is XElement secretElement)
            {
                secret = (bool?)secretElement;
            }
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("value") is XElement valueElement)
            {
                value = (string)valueElement;
            }
            if (element.Element("keyVault") is XElement keyVaultElement)
            {
                keyVault = KeyVaultContractCreateProperties.DeserializeKeyVaultContractCreateProperties(keyVaultElement);
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            var array = new List<string>();
            foreach (var e in element.Elements("NamedValueEntityBaseParametersTagsItem"))
            {
                array.Add((string)e);
            }
            tags = array;
            return new NamedValueCreateContract(id, name, type, tags, secret, displayName, value, keyVault);
        }
    }
}
