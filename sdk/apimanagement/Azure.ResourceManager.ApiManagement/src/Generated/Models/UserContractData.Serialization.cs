// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class UserContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsDefined(Note))
            {
                writer.WritePropertyName("note");
                writer.WriteStringValue(Note);
            }
            if (Optional.IsCollectionDefined(Identities))
            {
                writer.WritePropertyName("identities");
                writer.WriteStartArray();
                foreach (var item in Identities)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(FirstName))
            {
                writer.WritePropertyName("firstName");
                writer.WriteStringValue(FirstName);
            }
            if (Optional.IsDefined(LastName))
            {
                writer.WritePropertyName("lastName");
                writer.WriteStringValue(LastName);
            }
            if (Optional.IsDefined(Email))
            {
                writer.WritePropertyName("email");
                writer.WriteStringValue(Email);
            }
            if (Optional.IsDefined(RegistrationDate))
            {
                writer.WritePropertyName("registrationDate");
                writer.WriteStringValue(RegistrationDate.Value, "O");
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static UserContractData DeserializeUserContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<UserState> state = default;
            Optional<string> note = default;
            Optional<IList<UserIdentityContract>> identities = default;
            Optional<string> firstName = default;
            Optional<string> lastName = default;
            Optional<string> email = default;
            Optional<DateTimeOffset> registrationDate = default;
            Optional<IReadOnlyList<GroupContractProperties>> groups = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("state"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            state = new UserState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("note"))
                        {
                            note = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("identities"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<UserIdentityContract> array = new List<UserIdentityContract>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(UserIdentityContract.DeserializeUserIdentityContract(item));
                            }
                            identities = array;
                            continue;
                        }
                        if (property0.NameEquals("firstName"))
                        {
                            firstName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("lastName"))
                        {
                            lastName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("email"))
                        {
                            email = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("registrationDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            registrationDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("groups"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<GroupContractProperties> array = new List<GroupContractProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(GroupContractProperties.DeserializeGroupContractProperties(item));
                            }
                            groups = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new UserContractData(id, name, type, Optional.ToNullable(state), note.Value, Optional.ToList(identities), firstName.Value, lastName.Value, email.Value, Optional.ToNullable(registrationDate), Optional.ToList(groups));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "UserContract");
            if (Optional.IsDefined(State))
            {
                writer.WriteStartElement("state");
                writer.WriteValue(State.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Note))
            {
                writer.WriteStartElement("note");
                writer.WriteValue(Note);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(FirstName))
            {
                writer.WriteStartElement("firstName");
                writer.WriteValue(FirstName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(LastName))
            {
                writer.WriteStartElement("lastName");
                writer.WriteValue(LastName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Email))
            {
                writer.WriteStartElement("email");
                writer.WriteValue(Email);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(RegistrationDate))
            {
                writer.WriteStartElement("registrationDate");
                writer.WriteValue(RegistrationDate.Value, "O");
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(Identities))
            {
                foreach (var item in Identities)
                {
                    writer.WriteObjectValue(item, "UserIdentityContract");
                }
            }
            if (Optional.IsCollectionDefined(Groups))
            {
                foreach (var item in Groups)
                {
                    writer.WriteObjectValue(item, "GroupContractProperties");
                }
            }
            writer.WriteEndElement();
        }

        internal static UserContractData DeserializeUserContractData(XElement element)
        {
            UserState? state = default;
            string note = default;
            string firstName = default;
            string lastName = default;
            string email = default;
            DateTimeOffset? registrationDate = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            IList<UserIdentityContract> identities = default;
            IReadOnlyList<GroupContractProperties> groups = default;
            if (element.Element("state") is XElement stateElement)
            {
                state = new UserState(stateElement.Value);
            }
            if (element.Element("note") is XElement noteElement)
            {
                note = (string)noteElement;
            }
            if (element.Element("firstName") is XElement firstNameElement)
            {
                firstName = (string)firstNameElement;
            }
            if (element.Element("lastName") is XElement lastNameElement)
            {
                lastName = (string)lastNameElement;
            }
            if (element.Element("email") is XElement emailElement)
            {
                email = (string)emailElement;
            }
            if (element.Element("registrationDate") is XElement registrationDateElement)
            {
                registrationDate = registrationDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            var array = new List<UserIdentityContract>();
            foreach (var e in element.Elements("UserIdentityContract"))
            {
                array.Add(UserIdentityContract.DeserializeUserIdentityContract(e));
            }
            identities = array;
            var array0 = new List<GroupContractProperties>();
            foreach (var e in element.Elements("GroupContractProperties"))
            {
                array0.Add(GroupContractProperties.DeserializeGroupContractProperties(e));
            }
            groups = array0;
            return new UserContractData(id, name, type, state, note, identities, firstName, lastName, email, registrationDate, groups);
        }
    }
}
