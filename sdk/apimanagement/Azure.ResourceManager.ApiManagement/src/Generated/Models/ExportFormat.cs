// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> The ExportFormat. </summary>
    public readonly partial struct ExportFormat : IEquatable<ExportFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExportFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExportFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SwaggerValue = "swagger-link";
        private const string WsdlValue = "wsdl-link";
        private const string WadlValue = "wadl-link";
        private const string OpenapiValue = "openapi-link";
        private const string OpenapiJsonValue = "openapi+json-link";

        /// <summary> Export the Api Definition in OpenAPI 2.0 Specification as JSON document to the Storage Blob. </summary>
        public static ExportFormat Swagger { get; } = new ExportFormat(SwaggerValue);
        /// <summary> Export the Api Definition in WSDL Schema to Storage Blob. This is only supported for APIs of Type `soap`. </summary>
        public static ExportFormat Wsdl { get; } = new ExportFormat(WsdlValue);
        /// <summary> Export the Api Definition in WADL Schema to Storage Blob. </summary>
        public static ExportFormat Wadl { get; } = new ExportFormat(WadlValue);
        /// <summary> Export the Api Definition in OpenAPI 3.0 Specification as YAML document to Storage Blob. </summary>
        public static ExportFormat Openapi { get; } = new ExportFormat(OpenapiValue);
        /// <summary> Export the Api Definition in OpenAPI 3.0 Specification as JSON document to Storage Blob. </summary>
        public static ExportFormat OpenapiJson { get; } = new ExportFormat(OpenapiJsonValue);
        /// <summary> Determines if two <see cref="ExportFormat"/> values are the same. </summary>
        public static bool operator ==(ExportFormat left, ExportFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExportFormat"/> values are not the same. </summary>
        public static bool operator !=(ExportFormat left, ExportFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExportFormat"/>. </summary>
        public static implicit operator ExportFormat(string value) => new ExportFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExportFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExportFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
