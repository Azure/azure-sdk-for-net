// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> Name of the Sku. </summary>
    public readonly partial struct SkuType : IEquatable<SkuType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkuType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkuType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeveloperValue = "Developer";
        private const string StandardValue = "Standard";
        private const string PremiumValue = "Premium";
        private const string BasicValue = "Basic";
        private const string ConsumptionValue = "Consumption";
        private const string IsolatedValue = "Isolated";

        /// <summary> Developer SKU of Api Management. </summary>
        public static SkuType Developer { get; } = new SkuType(DeveloperValue);
        /// <summary> Standard SKU of Api Management. </summary>
        public static SkuType Standard { get; } = new SkuType(StandardValue);
        /// <summary> Premium SKU of Api Management. </summary>
        public static SkuType Premium { get; } = new SkuType(PremiumValue);
        /// <summary> Basic SKU of Api Management. </summary>
        public static SkuType Basic { get; } = new SkuType(BasicValue);
        /// <summary> Consumption SKU of Api Management. </summary>
        public static SkuType Consumption { get; } = new SkuType(ConsumptionValue);
        /// <summary> Isolated SKU of Api Management. </summary>
        public static SkuType Isolated { get; } = new SkuType(IsolatedValue);
        /// <summary> Determines if two <see cref="SkuType"/> values are the same. </summary>
        public static bool operator ==(SkuType left, SkuType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkuType"/> values are not the same. </summary>
        public static bool operator !=(SkuType left, SkuType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkuType"/>. </summary>
        public static implicit operator SkuType(string value) => new SkuType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkuType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkuType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
