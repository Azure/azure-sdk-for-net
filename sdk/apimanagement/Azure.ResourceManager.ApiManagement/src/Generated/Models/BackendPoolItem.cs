// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> Backend pool service information. </summary>
    public partial class BackendPoolItem
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BackendPoolItem"/>. </summary>
        /// <param name="id"> The unique ARM id of the backend entity. The ARM id should refer to an already existing backend entity. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public BackendPoolItem(ResourceIdentifier id)
        {
            Argument.AssertNotNull(id, nameof(id));

            Id = id;
        }

        /// <summary> Initializes a new instance of <see cref="BackendPoolItem"/>. </summary>
        /// <param name="id"> The unique ARM id of the backend entity. The ARM id should refer to an already existing backend entity. </param>
        /// <param name="weight"> The weight of the backend entity in the backend pool. Must be between 0 and 100. It can be also null if the value not specified. </param>
        /// <param name="priority"> The priority of the backend entity in the backend pool. Must be between 0 and 100. It can be also null if the value not specified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BackendPoolItem(ResourceIdentifier id, int? weight, int? priority, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Id = id;
            Weight = weight;
            Priority = priority;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BackendPoolItem"/> for deserialization. </summary>
        internal BackendPoolItem()
        {
        }

        /// <summary> The unique ARM id of the backend entity. The ARM id should refer to an already existing backend entity. </summary>
        [WirePath("id")]
        public ResourceIdentifier Id { get; set; }
        /// <summary> The weight of the backend entity in the backend pool. Must be between 0 and 100. It can be also null if the value not specified. </summary>
        [WirePath("weight")]
        public int? Weight { get; set; }
        /// <summary> The priority of the backend entity in the backend pool. Must be between 0 and 100. It can be also null if the value not specified. </summary>
        [WirePath("priority")]
        public int? Priority { get; set; }
    }
}
