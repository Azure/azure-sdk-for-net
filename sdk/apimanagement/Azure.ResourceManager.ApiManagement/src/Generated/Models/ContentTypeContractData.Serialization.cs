// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class ContentTypeContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(IdPropertiesId))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(IdPropertiesId);
            }
            if (Optional.IsDefined(NamePropertiesName))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(NamePropertiesName);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Schema))
            {
                writer.WritePropertyName("schema");
                writer.WriteObjectValue(Schema);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteStringValue(Version);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ContentTypeContractData DeserializeContentTypeContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> id0 = default;
            Optional<string> name0 = default;
            Optional<string> description = default;
            Optional<object> schema = default;
            Optional<string> version = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("id"))
                        {
                            id0 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("name"))
                        {
                            name0 = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("schema"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            schema = property0.Value.GetObject();
                            continue;
                        }
                        if (property0.NameEquals("version"))
                        {
                            version = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ContentTypeContractData(id, name, type, id0.Value, name0.Value, description.Value, schema.Value, version.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "ContentTypeContract");
            if (Optional.IsDefined(IdPropertiesId))
            {
                writer.WriteStartElement("id");
                writer.WriteValue(IdPropertiesId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(NamePropertiesName))
            {
                writer.WriteStartElement("name");
                writer.WriteValue(NamePropertiesName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Schema))
            {
                writer.WriteObjectValue(Schema, "schema");
            }
            if (Optional.IsDefined(Version))
            {
                writer.WriteStartElement("version");
                writer.WriteValue(Version);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static ContentTypeContractData DeserializeContentTypeContractData(XElement element)
        {
            string idPropertiesId = default;
            string namePropertiesName = default;
            string description = default;
            object schema = default;
            string version = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            if (element.Element("id") is XElement idElement)
            {
                idPropertiesId = (string)idElement;
            }
            if (element.Element("name") is XElement nameElement)
            {
                namePropertiesName = (string)nameElement;
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("schema") is XElement schemaElement)
            {
                schema = schemaElement.GetObjectValue(null);
            }
            if (element.Element("version") is XElement versionElement)
            {
                version = (string)versionElement;
            }
            if (element.Element("id") is XElement idElement0)
            {
                id = new ResourceIdentifier((string)idElement0);
            }
            if (element.Element("name") is XElement nameElement0)
            {
                name = (string)nameElement0;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            return new ContentTypeContractData(id, name, type, idPropertiesId, namePropertiesName, description, schema, version);
        }
    }
}
