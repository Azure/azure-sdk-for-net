// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class EmailTemplateContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Subject))
            {
                writer.WritePropertyName("subject");
                writer.WriteStringValue(Subject);
            }
            if (Optional.IsDefined(Body))
            {
                writer.WritePropertyName("body");
                writer.WriteStringValue(Body);
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title");
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Parameters))
            {
                writer.WritePropertyName("parameters");
                writer.WriteStartArray();
                foreach (var item in Parameters)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static EmailTemplateContractData DeserializeEmailTemplateContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> subject = default;
            Optional<string> body = default;
            Optional<string> title = default;
            Optional<string> description = default;
            Optional<bool> isDefault = default;
            Optional<IList<EmailTemplateParametersContractProperties>> parameters = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("subject"))
                        {
                            subject = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("body"))
                        {
                            body = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("title"))
                        {
                            title = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("isDefault"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isDefault = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("parameters"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<EmailTemplateParametersContractProperties> array = new List<EmailTemplateParametersContractProperties>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(EmailTemplateParametersContractProperties.DeserializeEmailTemplateParametersContractProperties(item));
                            }
                            parameters = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new EmailTemplateContractData(id, name, type, subject.Value, body.Value, title.Value, description.Value, Optional.ToNullable(isDefault), Optional.ToList(parameters));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "EmailTemplateContract");
            if (Optional.IsDefined(Subject))
            {
                writer.WriteStartElement("subject");
                writer.WriteValue(Subject);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Body))
            {
                writer.WriteStartElement("body");
                writer.WriteValue(Body);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Title))
            {
                writer.WriteStartElement("title");
                writer.WriteValue(Title);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(IsDefault))
            {
                writer.WriteStartElement("isDefault");
                writer.WriteValue(IsDefault.Value);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            if (Optional.IsCollectionDefined(Parameters))
            {
                foreach (var item in Parameters)
                {
                    writer.WriteObjectValue(item, "EmailTemplateParametersContractProperties");
                }
            }
            writer.WriteEndElement();
        }

        internal static EmailTemplateContractData DeserializeEmailTemplateContractData(XElement element)
        {
            string subject = default;
            string body = default;
            string title = default;
            string description = default;
            bool? isDefault = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            IList<EmailTemplateParametersContractProperties> parameters = default;
            if (element.Element("subject") is XElement subjectElement)
            {
                subject = (string)subjectElement;
            }
            if (element.Element("body") is XElement bodyElement)
            {
                body = (string)bodyElement;
            }
            if (element.Element("title") is XElement titleElement)
            {
                title = (string)titleElement;
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("isDefault") is XElement isDefaultElement)
            {
                isDefault = (bool?)isDefaultElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            var array = new List<EmailTemplateParametersContractProperties>();
            foreach (var e in element.Elements("EmailTemplateParametersContractProperties"))
            {
                array.Add(EmailTemplateParametersContractProperties.DeserializeEmailTemplateParametersContractProperties(e));
            }
            parameters = array;
            return new EmailTemplateContractData(id, name, type, subject, body, title, description, isDefault, parameters);
        }
    }
}
