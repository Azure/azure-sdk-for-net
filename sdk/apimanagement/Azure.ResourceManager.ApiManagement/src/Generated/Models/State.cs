// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> Status of the issue. </summary>
    public readonly partial struct State : IEquatable<State>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="State"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ProposedValue = "proposed";
        private const string OpenValue = "open";
        private const string RemovedValue = "removed";
        private const string ResolvedValue = "resolved";
        private const string ClosedValue = "closed";

        /// <summary> The issue is proposed. </summary>
        public static State Proposed { get; } = new State(ProposedValue);
        /// <summary> The issue is opened. </summary>
        public static State Open { get; } = new State(OpenValue);
        /// <summary> The issue was removed. </summary>
        public static State Removed { get; } = new State(RemovedValue);
        /// <summary> The issue is now resolved. </summary>
        public static State Resolved { get; } = new State(ResolvedValue);
        /// <summary> The issue was closed. </summary>
        public static State Closed { get; } = new State(ClosedValue);
        /// <summary> Determines if two <see cref="State"/> values are the same. </summary>
        public static bool operator ==(State left, State right) => left.Equals(right);
        /// <summary> Determines if two <see cref="State"/> values are not the same. </summary>
        public static bool operator !=(State left, State right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="State"/>. </summary>
        public static implicit operator State(string value) => new State(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is State other && Equals(other);
        /// <inheritdoc />
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
