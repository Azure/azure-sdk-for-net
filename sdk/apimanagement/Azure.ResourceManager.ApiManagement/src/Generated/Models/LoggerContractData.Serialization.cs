// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class LoggerContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(LoggerType))
            {
                writer.WritePropertyName("loggerType");
                writer.WriteStringValue(LoggerType.Value.ToString());
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Credentials))
            {
                writer.WritePropertyName("credentials");
                writer.WriteStartObject();
                foreach (var item in Credentials)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(IsBuffered))
            {
                writer.WritePropertyName("isBuffered");
                writer.WriteBooleanValue(IsBuffered.Value);
            }
            if (Optional.IsDefined(ResourceId))
            {
                writer.WritePropertyName("resourceId");
                writer.WriteStringValue(ResourceId);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static LoggerContractData DeserializeLoggerContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<LoggerType> loggerType = default;
            Optional<string> description = default;
            Optional<IDictionary<string, string>> credentials = default;
            Optional<bool> isBuffered = default;
            Optional<string> resourceId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("loggerType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            loggerType = new LoggerType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("credentials"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            credentials = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("isBuffered"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            isBuffered = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("resourceId"))
                        {
                            resourceId = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new LoggerContractData(id, name, type, Optional.ToNullable(loggerType), description.Value, Optional.ToDictionary(credentials), Optional.ToNullable(isBuffered), resourceId.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "LoggerContract");
            if (Optional.IsDefined(LoggerType))
            {
                writer.WriteStartElement("loggerType");
                writer.WriteValue(LoggerType.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(Credentials))
            {
                foreach (var pair in Credentials)
                {
                    writer.WriteStartElement("String");
                    writer.WriteValue(pair.Value);
                    writer.WriteEndElement();
                }
            }
            if (Optional.IsDefined(IsBuffered))
            {
                writer.WriteStartElement("isBuffered");
                writer.WriteValue(IsBuffered.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ResourceId))
            {
                writer.WriteStartElement("resourceId");
                writer.WriteValue(ResourceId);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static LoggerContractData DeserializeLoggerContractData(XElement element)
        {
            LoggerType? loggerType = default;
            string description = default;
            IDictionary<string, string> credentials = default;
            bool? isBuffered = default;
            string resourceId = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            if (element.Element("loggerType") is XElement loggerTypeElement)
            {
                loggerType = new LoggerType(loggerTypeElement.Value);
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("credentials") is XElement credentialsElement)
            {
                var dictionary = new Dictionary<string, string>();
                foreach (var e in credentialsElement.Elements())
                {
                    dictionary.Add(e.Name.LocalName, (string)e);
                }
                credentials = dictionary;
            }
            if (element.Element("isBuffered") is XElement isBufferedElement)
            {
                isBuffered = (bool?)isBufferedElement;
            }
            if (element.Element("resourceId") is XElement resourceIdElement)
            {
                resourceId = (string)resourceIdElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            return new LoggerContractData(id, name, type, loggerType, description, credentials, isBuffered, resourceId);
        }
    }
}
