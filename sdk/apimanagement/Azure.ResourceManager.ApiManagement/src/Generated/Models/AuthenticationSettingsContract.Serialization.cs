// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class AuthenticationSettingsContract : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(OAuth2))
            {
                writer.WritePropertyName("oAuth2"u8);
                writer.WriteObjectValue(OAuth2);
            }
            if (Optional.IsDefined(OpenId))
            {
                writer.WritePropertyName("openid"u8);
                writer.WriteObjectValue(OpenId);
            }
            if (Optional.IsCollectionDefined(OAuth2AuthenticationSettings))
            {
                writer.WritePropertyName("oAuth2AuthenticationSettings"u8);
                writer.WriteStartArray();
                foreach (var item in OAuth2AuthenticationSettings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(OpenidAuthenticationSettings))
            {
                writer.WritePropertyName("openidAuthenticationSettings"u8);
                writer.WriteStartArray();
                foreach (var item in OpenidAuthenticationSettings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static AuthenticationSettingsContract DeserializeAuthenticationSettingsContract(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<OAuth2AuthenticationSettingsContract> oAuth2 = default;
            Optional<OpenIdAuthenticationSettingsContract> openid = default;
            Optional<IList<OAuth2AuthenticationSettingsContract>> oAuth2AuthenticationSettings = default;
            Optional<IList<OpenIdAuthenticationSettingsContract>> openidAuthenticationSettings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("oAuth2"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    oAuth2 = OAuth2AuthenticationSettingsContract.DeserializeOAuth2AuthenticationSettingsContract(property.Value);
                    continue;
                }
                if (property.NameEquals("openid"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    openid = OpenIdAuthenticationSettingsContract.DeserializeOpenIdAuthenticationSettingsContract(property.Value);
                    continue;
                }
                if (property.NameEquals("oAuth2AuthenticationSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<OAuth2AuthenticationSettingsContract> array = new List<OAuth2AuthenticationSettingsContract>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OAuth2AuthenticationSettingsContract.DeserializeOAuth2AuthenticationSettingsContract(item));
                    }
                    oAuth2AuthenticationSettings = array;
                    continue;
                }
                if (property.NameEquals("openidAuthenticationSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<OpenIdAuthenticationSettingsContract> array = new List<OpenIdAuthenticationSettingsContract>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(OpenIdAuthenticationSettingsContract.DeserializeOpenIdAuthenticationSettingsContract(item));
                    }
                    openidAuthenticationSettings = array;
                    continue;
                }
            }
            return new AuthenticationSettingsContract(oAuth2.Value, openid.Value, Optional.ToList(oAuth2AuthenticationSettings), Optional.ToList(openidAuthenticationSettings));
        }
    }
}
