// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ApiManagement.Models
{
    /// <summary> The verbosity level applied to traces emitted by trace policies. </summary>
    public readonly partial struct Verbosity : IEquatable<Verbosity>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Verbosity"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Verbosity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VerboseValue = "verbose";
        private const string InformationValue = "information";
        private const string ErrorValue = "error";

        /// <summary> All the traces emitted by trace policies will be sent to the logger attached to this diagnostic instance. </summary>
        public static Verbosity Verbose { get; } = new Verbosity(VerboseValue);
        /// <summary> Traces with &apos;severity&apos; set to &apos;information&apos; and &apos;error&apos; will be sent to the logger attached to this diagnostic instance. </summary>
        public static Verbosity Information { get; } = new Verbosity(InformationValue);
        /// <summary> Only traces with &apos;severity&apos; set to &apos;error&apos; will be sent to the logger attached to this diagnostic instance. </summary>
        public static Verbosity Error { get; } = new Verbosity(ErrorValue);
        /// <summary> Determines if two <see cref="Verbosity"/> values are the same. </summary>
        public static bool operator ==(Verbosity left, Verbosity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Verbosity"/> values are not the same. </summary>
        public static bool operator !=(Verbosity left, Verbosity right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Verbosity"/>. </summary>
        public static implicit operator Verbosity(string value) => new Verbosity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Verbosity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Verbosity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
