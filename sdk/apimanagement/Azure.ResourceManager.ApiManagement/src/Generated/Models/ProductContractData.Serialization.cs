// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class ProductContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Terms))
            {
                writer.WritePropertyName("terms");
                writer.WriteStringValue(Terms);
            }
            if (Optional.IsDefined(SubscriptionRequired))
            {
                writer.WritePropertyName("subscriptionRequired");
                writer.WriteBooleanValue(SubscriptionRequired.Value);
            }
            if (Optional.IsDefined(ApprovalRequired))
            {
                writer.WritePropertyName("approvalRequired");
                writer.WriteBooleanValue(ApprovalRequired.Value);
            }
            if (Optional.IsDefined(SubscriptionsLimit))
            {
                writer.WritePropertyName("subscriptionsLimit");
                writer.WriteNumberValue(SubscriptionsLimit.Value);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToSerialString());
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static ProductContractData DeserializeProductContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> description = default;
            Optional<string> terms = default;
            Optional<bool> subscriptionRequired = default;
            Optional<bool> approvalRequired = default;
            Optional<int> subscriptionsLimit = default;
            Optional<ProductState> state = default;
            Optional<string> displayName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("terms"))
                        {
                            terms = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("subscriptionRequired"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            subscriptionRequired = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("approvalRequired"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            approvalRequired = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("subscriptionsLimit"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            subscriptionsLimit = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("state"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            state = property0.Value.GetString().ToProductState();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new ProductContractData(id, name, type, description.Value, terms.Value, Optional.ToNullable(subscriptionRequired), Optional.ToNullable(approvalRequired), Optional.ToNullable(subscriptionsLimit), Optional.ToNullable(state), displayName.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "ProductContract");
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Terms))
            {
                writer.WriteStartElement("terms");
                writer.WriteValue(Terms);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(SubscriptionRequired))
            {
                writer.WriteStartElement("subscriptionRequired");
                writer.WriteValue(SubscriptionRequired.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ApprovalRequired))
            {
                writer.WriteStartElement("approvalRequired");
                writer.WriteValue(ApprovalRequired.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(SubscriptionsLimit))
            {
                writer.WriteStartElement("subscriptionsLimit");
                writer.WriteValue(SubscriptionsLimit.Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(State))
            {
                writer.WriteStartElement("state");
                writer.WriteValue(State.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WriteStartElement("displayName");
                writer.WriteValue(DisplayName);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static ProductContractData DeserializeProductContractData(XElement element)
        {
            string description = default;
            string terms = default;
            bool? subscriptionRequired = default;
            bool? approvalRequired = default;
            int? subscriptionsLimit = default;
            ProductState? state = default;
            string displayName = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("terms") is XElement termsElement)
            {
                terms = (string)termsElement;
            }
            if (element.Element("subscriptionRequired") is XElement subscriptionRequiredElement)
            {
                subscriptionRequired = (bool?)subscriptionRequiredElement;
            }
            if (element.Element("approvalRequired") is XElement approvalRequiredElement)
            {
                approvalRequired = (bool?)approvalRequiredElement;
            }
            if (element.Element("subscriptionsLimit") is XElement subscriptionsLimitElement)
            {
                subscriptionsLimit = (int?)subscriptionsLimitElement;
            }
            if (element.Element("state") is XElement stateElement)
            {
                state = stateElement.Value.ToProductState();
            }
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            return new ProductContractData(id, name, type, description, terms, subscriptionRequired, approvalRequired, subscriptionsLimit, state, displayName);
        }
    }
}
