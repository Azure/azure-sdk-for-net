// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class GlobalSchemaContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(SchemaType))
            {
                writer.WritePropertyName("schemaType");
                writer.WriteStringValue(SchemaType.Value.ToString());
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Value);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Value.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(Document))
            {
                writer.WritePropertyName("document");
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Document);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Document.ToString()).RootElement);
#endif
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static GlobalSchemaContractData DeserializeGlobalSchemaContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<SchemaType> schemaType = default;
            Optional<string> description = default;
            Optional<BinaryData> value = default;
            Optional<BinaryData> document = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("schemaType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            schemaType = new SchemaType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("value"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            value = BinaryData.FromString(property0.Value.GetRawText());
                            continue;
                        }
                        if (property0.NameEquals("document"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            document = BinaryData.FromString(property0.Value.GetRawText());
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new GlobalSchemaContractData(id, name, type, systemData.Value, Optional.ToNullable(schemaType), description.Value, value.Value, document.Value);
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "GlobalSchemaContract");
            if (Optional.IsDefined(SchemaType))
            {
                writer.WriteStartElement("schemaType");
                writer.WriteValue(SchemaType.Value.ToString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Value))
            {
                writer.WriteStartElement("value");
                writer.WriteValue(Value);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Document))
            {
                writer.WriteStartElement("document");
                writer.WriteValue(Document);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(ResourceType);
            writer.WriteEndElement();
            if (Optional.IsDefined(SystemData))
            {
                writer.WriteStartElement("systemData");
                writer.WriteValue(SystemData);
                writer.WriteEndElement();
            }
            writer.WriteEndElement();
        }

        internal static GlobalSchemaContractData DeserializeGlobalSchemaContractData(XElement element)
        {
            SchemaType? schemaType = default;
            string description = default;
            BinaryData value = default;
            BinaryData document = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType resourceType = default;
            SystemData systemData = default;
            if (element.Element("schemaType") is XElement schemaTypeElement)
            {
                schemaType = new SchemaType(schemaTypeElement.Value);
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("value") is XElement valueElement)
            {
                value = valueElement.(null);
            }
            if (element.Element("document") is XElement documentElement)
            {
                document = documentElement.(null);
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                resourceType = (string)typeElement;
            }
            if (element.Element("systemData") is XElement systemDataElement)
            {
                systemData = systemDataElement.(null);
            }
            return new GlobalSchemaContractData(id, name, resourceType, systemData, schemaType, description, value, document);
        }
    }
}
