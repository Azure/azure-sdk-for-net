// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    public partial class SubscriptionContractData : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(OwnerId))
            {
                writer.WritePropertyName("ownerId");
                writer.WriteStringValue(OwnerId);
            }
            if (Optional.IsDefined(Scope))
            {
                writer.WritePropertyName("scope");
                writer.WriteStringValue(Scope);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToSerialString());
            }
            if (Optional.IsDefined(StartDate))
            {
                writer.WritePropertyName("startDate");
                writer.WriteStringValue(StartDate.Value, "O");
            }
            if (Optional.IsDefined(ExpirationDate))
            {
                writer.WritePropertyName("expirationDate");
                writer.WriteStringValue(ExpirationDate.Value, "O");
            }
            if (Optional.IsDefined(EndDate))
            {
                writer.WritePropertyName("endDate");
                writer.WriteStringValue(EndDate.Value, "O");
            }
            if (Optional.IsDefined(NotificationDate))
            {
                writer.WritePropertyName("notificationDate");
                writer.WriteStringValue(NotificationDate.Value, "O");
            }
            if (Optional.IsDefined(PrimaryKey))
            {
                writer.WritePropertyName("primaryKey");
                writer.WriteStringValue(PrimaryKey);
            }
            if (Optional.IsDefined(SecondaryKey))
            {
                writer.WritePropertyName("secondaryKey");
                writer.WriteStringValue(SecondaryKey);
            }
            if (Optional.IsDefined(StateComment))
            {
                writer.WritePropertyName("stateComment");
                writer.WriteStringValue(StateComment);
            }
            if (Optional.IsDefined(AllowTracing))
            {
                writer.WritePropertyName("allowTracing");
                writer.WriteBooleanValue(AllowTracing.Value);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SubscriptionContractData DeserializeSubscriptionContractData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<string> ownerId = default;
            Optional<string> scope = default;
            Optional<string> displayName = default;
            Optional<SubscriptionState> state = default;
            Optional<DateTimeOffset> createdDate = default;
            Optional<DateTimeOffset> startDate = default;
            Optional<DateTimeOffset> expirationDate = default;
            Optional<DateTimeOffset> endDate = default;
            Optional<DateTimeOffset> notificationDate = default;
            Optional<string> primaryKey = default;
            Optional<string> secondaryKey = default;
            Optional<string> stateComment = default;
            Optional<bool> allowTracing = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("ownerId"))
                        {
                            ownerId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("scope"))
                        {
                            scope = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("state"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            state = property0.Value.GetString().ToSubscriptionState();
                            continue;
                        }
                        if (property0.NameEquals("createdDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            createdDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("startDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            startDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("expirationDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            expirationDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("endDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            endDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("notificationDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            notificationDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("primaryKey"))
                        {
                            primaryKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("secondaryKey"))
                        {
                            secondaryKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("stateComment"))
                        {
                            stateComment = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("allowTracing"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            allowTracing = property0.Value.GetBoolean();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SubscriptionContractData(id, name, type, ownerId.Value, scope.Value, displayName.Value, Optional.ToNullable(state), Optional.ToNullable(createdDate), Optional.ToNullable(startDate), Optional.ToNullable(expirationDate), Optional.ToNullable(endDate), Optional.ToNullable(notificationDate), primaryKey.Value, secondaryKey.Value, stateComment.Value, Optional.ToNullable(allowTracing));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "SubscriptionContract");
            if (Optional.IsDefined(OwnerId))
            {
                writer.WriteStartElement("ownerId");
                writer.WriteValue(OwnerId);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(Scope))
            {
                writer.WriteStartElement("scope");
                writer.WriteValue(Scope);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WriteStartElement("displayName");
                writer.WriteValue(DisplayName);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(State))
            {
                writer.WriteStartElement("state");
                writer.WriteValue(State.Value.ToSerialString());
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(CreatedDate))
            {
                writer.WriteStartElement("createdDate");
                writer.WriteValue(CreatedDate.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(StartDate))
            {
                writer.WriteStartElement("startDate");
                writer.WriteValue(StartDate.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(ExpirationDate))
            {
                writer.WriteStartElement("expirationDate");
                writer.WriteValue(ExpirationDate.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(EndDate))
            {
                writer.WriteStartElement("endDate");
                writer.WriteValue(EndDate.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(NotificationDate))
            {
                writer.WriteStartElement("notificationDate");
                writer.WriteValue(NotificationDate.Value, "O");
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(PrimaryKey))
            {
                writer.WriteStartElement("primaryKey");
                writer.WriteValue(PrimaryKey);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(SecondaryKey))
            {
                writer.WriteStartElement("secondaryKey");
                writer.WriteValue(SecondaryKey);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(StateComment))
            {
                writer.WriteStartElement("stateComment");
                writer.WriteValue(StateComment);
                writer.WriteEndElement();
            }
            if (Optional.IsDefined(AllowTracing))
            {
                writer.WriteStartElement("allowTracing");
                writer.WriteValue(AllowTracing.Value);
                writer.WriteEndElement();
            }
            writer.WriteStartElement("id");
            writer.WriteValue(Id);
            writer.WriteEndElement();
            writer.WriteStartElement("name");
            writer.WriteValue(Name);
            writer.WriteEndElement();
            writer.WriteStartElement("type");
            writer.WriteValue(Type);
            writer.WriteEndElement();
            writer.WriteEndElement();
        }

        internal static SubscriptionContractData DeserializeSubscriptionContractData(XElement element)
        {
            string ownerId = default;
            string scope = default;
            string displayName = default;
            SubscriptionState? state = default;
            DateTimeOffset? createdDate = default;
            DateTimeOffset? startDate = default;
            DateTimeOffset? expirationDate = default;
            DateTimeOffset? endDate = default;
            DateTimeOffset? notificationDate = default;
            string primaryKey = default;
            string secondaryKey = default;
            string stateComment = default;
            bool? allowTracing = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            if (element.Element("ownerId") is XElement ownerIdElement)
            {
                ownerId = (string)ownerIdElement;
            }
            if (element.Element("scope") is XElement scopeElement)
            {
                scope = (string)scopeElement;
            }
            if (element.Element("displayName") is XElement displayNameElement)
            {
                displayName = (string)displayNameElement;
            }
            if (element.Element("state") is XElement stateElement)
            {
                state = stateElement.Value.ToSubscriptionState();
            }
            if (element.Element("createdDate") is XElement createdDateElement)
            {
                createdDate = createdDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("startDate") is XElement startDateElement)
            {
                startDate = startDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("expirationDate") is XElement expirationDateElement)
            {
                expirationDate = expirationDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("endDate") is XElement endDateElement)
            {
                endDate = endDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("notificationDate") is XElement notificationDateElement)
            {
                notificationDate = notificationDateElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("primaryKey") is XElement primaryKeyElement)
            {
                primaryKey = (string)primaryKeyElement;
            }
            if (element.Element("secondaryKey") is XElement secondaryKeyElement)
            {
                secondaryKey = (string)secondaryKeyElement;
            }
            if (element.Element("stateComment") is XElement stateCommentElement)
            {
                stateComment = (string)stateCommentElement;
            }
            if (element.Element("allowTracing") is XElement allowTracingElement)
            {
                allowTracing = (bool?)allowTracingElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = new ResourceIdentifier((string)idElement);
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("type") is XElement typeElement)
            {
                type = (string)typeElement;
            }
            return new SubscriptionContractData(id, name, type, ownerId, scope, displayName, state, createdDate, startDate, expirationDate, endDate, notificationDate, primaryKey, secondaryKey, stateComment, allowTracing);
        }
    }
}
