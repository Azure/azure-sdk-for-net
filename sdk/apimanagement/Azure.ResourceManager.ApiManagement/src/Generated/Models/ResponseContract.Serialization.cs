// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml;
using System.Xml.Linq;
using Azure.Core;

namespace Azure.ResourceManager.ApiManagement.Models
{
    public partial class ResponseContract : IUtf8JsonSerializable, IXmlSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("statusCode");
            writer.WriteNumberValue(StatusCode);
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Representations))
            {
                writer.WritePropertyName("representations");
                writer.WriteStartArray();
                foreach (var item in Representations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Headers))
            {
                writer.WritePropertyName("headers");
                writer.WriteStartArray();
                foreach (var item in Headers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ResponseContract DeserializeResponseContract(JsonElement element)
        {
            int statusCode = default;
            Optional<string> description = default;
            Optional<IList<RepresentationContract>> representations = default;
            Optional<IList<ParameterContract>> headers = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("statusCode"))
                {
                    statusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("representations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RepresentationContract> array = new List<RepresentationContract>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RepresentationContract.DeserializeRepresentationContract(item));
                    }
                    representations = array;
                    continue;
                }
                if (property.NameEquals("headers"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ParameterContract> array = new List<ParameterContract>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ParameterContract.DeserializeParameterContract(item));
                    }
                    headers = array;
                    continue;
                }
            }
            return new ResponseContract(statusCode, description.Value, Optional.ToList(representations), Optional.ToList(headers));
        }

        void IXmlSerializable.Write(XmlWriter writer, string nameHint)
        {
            writer.WriteStartElement(nameHint ?? "ResponseContract");
            writer.WriteStartElement("statusCode");
            writer.WriteValue(StatusCode);
            writer.WriteEndElement();
            if (Optional.IsDefined(Description))
            {
                writer.WriteStartElement("description");
                writer.WriteValue(Description);
                writer.WriteEndElement();
            }
            if (Optional.IsCollectionDefined(Representations))
            {
                foreach (var item in Representations)
                {
                    writer.WriteObjectValue(item, "RepresentationContract");
                }
            }
            if (Optional.IsCollectionDefined(Headers))
            {
                foreach (var item in Headers)
                {
                    writer.WriteObjectValue(item, "ParameterContract");
                }
            }
            writer.WriteEndElement();
        }

        internal static ResponseContract DeserializeResponseContract(XElement element)
        {
            int statusCode = default;
            string description = default;
            IList<RepresentationContract> representations = default;
            IList<ParameterContract> headers = default;
            if (element.Element("statusCode") is XElement statusCodeElement)
            {
                statusCode = (int)statusCodeElement;
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            var array = new List<RepresentationContract>();
            foreach (var e in element.Elements("RepresentationContract"))
            {
                array.Add(RepresentationContract.DeserializeRepresentationContract(e));
            }
            representations = array;
            var array0 = new List<ParameterContract>();
            foreach (var e in element.Elements("ParameterContract"))
            {
                array0.Add(ParameterContract.DeserializeParameterContract(e));
            }
            headers = array0;
            return new ResponseContract(statusCode, description, representations, headers);
        }
    }
}
