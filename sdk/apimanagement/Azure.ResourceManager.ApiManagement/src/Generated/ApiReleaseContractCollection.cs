// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A class representing collection of ApiReleaseContract and their operations over its parent. </summary>
    public partial class ApiReleaseContractCollection : ArmCollection, IEnumerable<ApiReleaseContract>, IAsyncEnumerable<ApiReleaseContract>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ApiReleaseRestOperations _apiReleaseRestClient;

        /// <summary> Initializes a new instance of the <see cref="ApiReleaseContractCollection"/> class for mocking. </summary>
        protected ApiReleaseContractCollection()
        {
        }

        /// <summary> Initializes a new instance of ApiReleaseContractCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ApiReleaseContractCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _apiReleaseRestClient = new ApiReleaseRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ApiContract.ResourceType;

        // Collection level operations.

        /// <summary> Creates a new Release for the API. </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="parameters"> Create parameters. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> or <paramref name="parameters"/> is null. </exception>
        public virtual ApiReleaseCreateOrUpdateOperation CreateOrUpdate(string releaseId, ApiReleaseContractData parameters, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _apiReleaseRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, releaseId, parameters, ifMatch, cancellationToken);
                var operation = new ApiReleaseCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new Release for the API. </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="parameters"> Create parameters. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> or <paramref name="parameters"/> is null. </exception>
        public async virtual Task<ApiReleaseCreateOrUpdateOperation> CreateOrUpdateAsync(string releaseId, ApiReleaseContractData parameters, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _apiReleaseRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, releaseId, parameters, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new ApiReleaseCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the details of an API release. </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        public virtual Response<ApiReleaseContract> Get(string releaseId, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }

            using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.Get");
            scope.Start();
            try
            {
                var response = _apiReleaseRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, releaseId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ApiReleaseContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the details of an API release. </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        public async virtual Task<Response<ApiReleaseContract>> GetAsync(string releaseId, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }

            using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _apiReleaseRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, releaseId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ApiReleaseContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        public virtual Response<ApiReleaseContract> GetIfExists(string releaseId, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }

            using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _apiReleaseRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, releaseId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<ApiReleaseContract>(null, response.GetRawResponse())
                    : Response.FromValue(new ApiReleaseContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        public async virtual Task<Response<ApiReleaseContract>> GetIfExistsAsync(string releaseId, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }

            using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _apiReleaseRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, releaseId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<ApiReleaseContract>(null, response.GetRawResponse())
                    : Response.FromValue(new ApiReleaseContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string releaseId, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }

            using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(releaseId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="releaseId"> Release identifier within an API. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="releaseId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string releaseId, CancellationToken cancellationToken = default)
        {
            if (releaseId == null)
            {
                throw new ArgumentNullException(nameof(releaseId));
            }

            using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(releaseId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all releases of an API. An API release is created when making an API Revision current. Releases are also used to rollback to previous revisions. Results will be paged and can be constrained by the $top and $skip parameters. </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| notes | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ApiReleaseContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ApiReleaseContract> GetAll(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            Page<ApiReleaseContract> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _apiReleaseRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiReleaseContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ApiReleaseContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _apiReleaseRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiReleaseContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all releases of an API. An API release is created when making an API Revision current. Releases are also used to rollback to previous revisions. Results will be paged and can be constrained by the $top and $skip parameters. </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| notes | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ApiReleaseContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ApiReleaseContract> GetAllAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ApiReleaseContract>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _apiReleaseRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiReleaseContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ApiReleaseContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ApiReleaseContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _apiReleaseRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, top, skip, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ApiReleaseContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ApiReleaseContract> IEnumerable<ApiReleaseContract>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ApiReleaseContract> IAsyncEnumerable<ApiReleaseContract>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, ApiReleaseContract, ApiReleaseContractData> Construct() { }
    }
}
