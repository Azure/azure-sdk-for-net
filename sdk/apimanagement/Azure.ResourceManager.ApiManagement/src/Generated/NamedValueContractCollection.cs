// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary>
    /// A class representing a collection of <see cref="NamedValueContractResource" /> and their operations.
    /// Each <see cref="NamedValueContractResource" /> in the collection will belong to the same instance of <see cref="ApiManagementServiceResource" />.
    /// To get a <see cref="NamedValueContractCollection" /> instance call the GetNamedValueContracts method from an instance of <see cref="ApiManagementServiceResource" />.
    /// </summary>
    public partial class NamedValueContractCollection : ArmCollection, IEnumerable<NamedValueContractResource>, IAsyncEnumerable<NamedValueContractResource>
    {
        private readonly ClientDiagnostics _namedValueContractNamedValueClientDiagnostics;
        private readonly NamedValueRestOperations _namedValueContractNamedValueRestClient;

        /// <summary> Initializes a new instance of the <see cref="NamedValueContractCollection"/> class for mocking. </summary>
        protected NamedValueContractCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="NamedValueContractCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal NamedValueContractCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _namedValueContractNamedValueClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ApiManagement", NamedValueContractResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(NamedValueContractResource.ResourceType, out string namedValueContractNamedValueApiVersion);
            _namedValueContractNamedValueRestClient = new NamedValueRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, namedValueContractNamedValueApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ApiManagementServiceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ApiManagementServiceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Creates or updates named value.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}
        /// Operation Id: NamedValue_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="namedValueId"> Identifier of the NamedValue. </param>
        /// <param name="content"> Create parameters. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="namedValueId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="namedValueId"/> or <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<NamedValueContractResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string namedValueId, NamedValueContractCreateOrUpdateContent content, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(namedValueId, nameof(namedValueId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _namedValueContractNamedValueRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, namedValueId, content, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new ApiManagementArmOperation<NamedValueContractResource>(new NamedValueContractOperationSource(Client), _namedValueContractNamedValueClientDiagnostics, Pipeline, _namedValueContractNamedValueRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, namedValueId, content, ifMatch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Creates or updates named value.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}
        /// Operation Id: NamedValue_CreateOrUpdate
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="namedValueId"> Identifier of the NamedValue. </param>
        /// <param name="content"> Create parameters. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="namedValueId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="namedValueId"/> or <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<NamedValueContractResource> CreateOrUpdate(WaitUntil waitUntil, string namedValueId, NamedValueContractCreateOrUpdateContent content, string ifMatch = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(namedValueId, nameof(namedValueId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _namedValueContractNamedValueRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, namedValueId, content, ifMatch, cancellationToken);
                var operation = new ApiManagementArmOperation<NamedValueContractResource>(new NamedValueContractOperationSource(Client), _namedValueContractNamedValueClientDiagnostics, Pipeline, _namedValueContractNamedValueRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, namedValueId, content, ifMatch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the details of the named value specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}
        /// Operation Id: NamedValue_Get
        /// </summary>
        /// <param name="namedValueId"> Identifier of the NamedValue. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="namedValueId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="namedValueId"/> is null. </exception>
        public virtual async Task<Response<NamedValueContractResource>> GetAsync(string namedValueId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(namedValueId, nameof(namedValueId));

            using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _namedValueContractNamedValueRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, namedValueId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NamedValueContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the details of the named value specified by its identifier.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}
        /// Operation Id: NamedValue_Get
        /// </summary>
        /// <param name="namedValueId"> Identifier of the NamedValue. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="namedValueId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="namedValueId"/> is null. </exception>
        public virtual Response<NamedValueContractResource> Get(string namedValueId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(namedValueId, nameof(namedValueId));

            using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.Get");
            scope.Start();
            try
            {
                var response = _namedValueContractNamedValueRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, namedValueId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NamedValueContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists a collection of named values defined within a service instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues
        /// Operation Id: NamedValue_ListByService
        /// </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| tags | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="isKeyVaultRefreshFailed"> When set to true, the response contains only named value entities which failed refresh. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="NamedValueContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NamedValueContractResource> GetAllAsync(string filter = null, int? top = null, int? skip = null, bool? isKeyVaultRefreshFailed = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<NamedValueContractResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _namedValueContractNamedValueRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, top, skip, isKeyVaultRefreshFailed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new NamedValueContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<NamedValueContractResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _namedValueContractNamedValueRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, top, skip, isKeyVaultRefreshFailed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new NamedValueContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists a collection of named values defined within a service instance.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues
        /// Operation Id: NamedValue_ListByService
        /// </summary>
        /// <param name="filter"> |     Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| tags | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith, any, all |&lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;. </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skip"> Number of records to skip. </param>
        /// <param name="isKeyVaultRefreshFailed"> When set to true, the response contains only named value entities which failed refresh. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="NamedValueContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NamedValueContractResource> GetAll(string filter = null, int? top = null, int? skip = null, bool? isKeyVaultRefreshFailed = null, CancellationToken cancellationToken = default)
        {
            Page<NamedValueContractResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _namedValueContractNamedValueRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, top, skip, isKeyVaultRefreshFailed, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new NamedValueContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<NamedValueContractResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _namedValueContractNamedValueRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, top, skip, isKeyVaultRefreshFailed, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new NamedValueContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}
        /// Operation Id: NamedValue_Get
        /// </summary>
        /// <param name="namedValueId"> Identifier of the NamedValue. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="namedValueId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="namedValueId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string namedValueId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(namedValueId, nameof(namedValueId));

            using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.Exists");
            scope.Start();
            try
            {
                var response = await _namedValueContractNamedValueRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, namedValueId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/namedValues/{namedValueId}
        /// Operation Id: NamedValue_Get
        /// </summary>
        /// <param name="namedValueId"> Identifier of the NamedValue. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="namedValueId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="namedValueId"/> is null. </exception>
        public virtual Response<bool> Exists(string namedValueId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(namedValueId, nameof(namedValueId));

            using var scope = _namedValueContractNamedValueClientDiagnostics.CreateScope("NamedValueContractCollection.Exists");
            scope.Start();
            try
            {
                var response = _namedValueContractNamedValueRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, namedValueId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<NamedValueContractResource> IEnumerable<NamedValueContractResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<NamedValueContractResource> IAsyncEnumerable<NamedValueContractResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
