// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary>
    /// A class representing a collection of <see cref="TenantSettingsContractResource" /> and their operations.
    /// Each <see cref="TenantSettingsContractResource" /> in the collection will belong to the same instance of <see cref="ApiManagementServiceResource" />.
    /// To get a <see cref="TenantSettingsContractCollection" /> instance call the GetTenantSettingsContracts method from an instance of <see cref="ApiManagementServiceResource" />.
    /// </summary>
    public partial class TenantSettingsContractCollection : ArmCollection, IEnumerable<TenantSettingsContractResource>, IAsyncEnumerable<TenantSettingsContractResource>
    {
        private readonly ClientDiagnostics _tenantSettingsContractTenantSettingsClientDiagnostics;
        private readonly TenantSettingsRestOperations _tenantSettingsContractTenantSettingsRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantSettingsContractCollection"/> class for mocking. </summary>
        protected TenantSettingsContractCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantSettingsContractCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal TenantSettingsContractCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _tenantSettingsContractTenantSettingsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.ApiManagement", TenantSettingsContractResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(TenantSettingsContractResource.ResourceType, out string tenantSettingsContractTenantSettingsApiVersion);
            _tenantSettingsContractTenantSettingsRestClient = new TenantSettingsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, tenantSettingsContractTenantSettingsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ApiManagementServiceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ApiManagementServiceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get tenant settings.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/settings/{settingsType}
        /// Operation Id: TenantSettings_Get
        /// </summary>
        /// <param name="settingsType"> The identifier of the settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TenantSettingsContractResource>> GetAsync(SettingsTypeName settingsType, CancellationToken cancellationToken = default)
        {
            using var scope = _tenantSettingsContractTenantSettingsClientDiagnostics.CreateScope("TenantSettingsContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _tenantSettingsContractTenantSettingsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, settingsType, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TenantSettingsContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get tenant settings.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/settings/{settingsType}
        /// Operation Id: TenantSettings_Get
        /// </summary>
        /// <param name="settingsType"> The identifier of the settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TenantSettingsContractResource> Get(SettingsTypeName settingsType, CancellationToken cancellationToken = default)
        {
            using var scope = _tenantSettingsContractTenantSettingsClientDiagnostics.CreateScope("TenantSettingsContractCollection.Get");
            scope.Start();
            try
            {
                var response = _tenantSettingsContractTenantSettingsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, settingsType, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new TenantSettingsContractResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Public settings.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/settings
        /// Operation Id: TenantSettings_ListByService
        /// </summary>
        /// <param name="filter"> Not used. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="TenantSettingsContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<TenantSettingsContractResource> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<TenantSettingsContractResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _tenantSettingsContractTenantSettingsClientDiagnostics.CreateScope("TenantSettingsContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _tenantSettingsContractTenantSettingsRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TenantSettingsContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<TenantSettingsContractResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _tenantSettingsContractTenantSettingsClientDiagnostics.CreateScope("TenantSettingsContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _tenantSettingsContractTenantSettingsRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new TenantSettingsContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Public settings.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/settings
        /// Operation Id: TenantSettings_ListByService
        /// </summary>
        /// <param name="filter"> Not used. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="TenantSettingsContractResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<TenantSettingsContractResource> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<TenantSettingsContractResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _tenantSettingsContractTenantSettingsClientDiagnostics.CreateScope("TenantSettingsContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _tenantSettingsContractTenantSettingsRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TenantSettingsContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<TenantSettingsContractResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _tenantSettingsContractTenantSettingsClientDiagnostics.CreateScope("TenantSettingsContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _tenantSettingsContractTenantSettingsRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new TenantSettingsContractResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/settings/{settingsType}
        /// Operation Id: TenantSettings_Get
        /// </summary>
        /// <param name="settingsType"> The identifier of the settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<bool>> ExistsAsync(SettingsTypeName settingsType, CancellationToken cancellationToken = default)
        {
            using var scope = _tenantSettingsContractTenantSettingsClientDiagnostics.CreateScope("TenantSettingsContractCollection.Exists");
            scope.Start();
            try
            {
                var response = await _tenantSettingsContractTenantSettingsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, settingsType, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/settings/{settingsType}
        /// Operation Id: TenantSettings_Get
        /// </summary>
        /// <param name="settingsType"> The identifier of the settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> Exists(SettingsTypeName settingsType, CancellationToken cancellationToken = default)
        {
            using var scope = _tenantSettingsContractTenantSettingsClientDiagnostics.CreateScope("TenantSettingsContractCollection.Exists");
            scope.Start();
            try
            {
                var response = _tenantSettingsContractTenantSettingsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, settingsType, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<TenantSettingsContractResource> IEnumerable<TenantSettingsContractResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<TenantSettingsContractResource> IAsyncEnumerable<TenantSettingsContractResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
