// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A class representing collection of ContentItemContract and their operations over its parent. </summary>
    public partial class ContentItemContractCollection : ArmCollection, IEnumerable<ContentItemContract>, IAsyncEnumerable<ContentItemContract>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ContentItemRestOperations _contentItemRestClient;

        /// <summary> Initializes a new instance of the <see cref="ContentItemContractCollection"/> class for mocking. </summary>
        protected ContentItemContractCollection()
        {
        }

        /// <summary> Initializes a new instance of ContentItemContractCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ContentItemContractCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _contentItemRestClient = new ContentItemRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ContentTypeContract.ResourceType;

        // Collection level operations.

        /// <summary> Creates a new developer portal&apos;s content item specified by the provided content type. </summary>
        /// <param name="contentItemId"> Content item identifier. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentItemId"/> is null. </exception>
        public virtual ContentItemCreateOrUpdateOperation CreateOrUpdate(string contentItemId, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (contentItemId == null)
            {
                throw new ArgumentNullException(nameof(contentItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _contentItemRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, contentItemId, ifMatch, cancellationToken);
                var operation = new ContentItemCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new developer portal&apos;s content item specified by the provided content type. </summary>
        /// <param name="contentItemId"> Content item identifier. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentItemId"/> is null. </exception>
        public async virtual Task<ContentItemCreateOrUpdateOperation> CreateOrUpdateAsync(string contentItemId, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (contentItemId == null)
            {
                throw new ArgumentNullException(nameof(contentItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _contentItemRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, contentItemId, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new ContentItemCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the developer portal&apos;s content item specified by its identifier. </summary>
        /// <param name="contentItemId"> Content item identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentItemId"/> is null. </exception>
        public virtual Response<ContentItemContract> Get(string contentItemId, CancellationToken cancellationToken = default)
        {
            if (contentItemId == null)
            {
                throw new ArgumentNullException(nameof(contentItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.Get");
            scope.Start();
            try
            {
                var response = _contentItemRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, contentItemId, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ContentItemContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the developer portal&apos;s content item specified by its identifier. </summary>
        /// <param name="contentItemId"> Content item identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentItemId"/> is null. </exception>
        public async virtual Task<Response<ContentItemContract>> GetAsync(string contentItemId, CancellationToken cancellationToken = default)
        {
            if (contentItemId == null)
            {
                throw new ArgumentNullException(nameof(contentItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _contentItemRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, contentItemId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new ContentItemContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="contentItemId"> Content item identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentItemId"/> is null. </exception>
        public virtual Response<ContentItemContract> GetIfExists(string contentItemId, CancellationToken cancellationToken = default)
        {
            if (contentItemId == null)
            {
                throw new ArgumentNullException(nameof(contentItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _contentItemRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, contentItemId, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<ContentItemContract>(null, response.GetRawResponse())
                    : Response.FromValue(new ContentItemContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="contentItemId"> Content item identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentItemId"/> is null. </exception>
        public async virtual Task<Response<ContentItemContract>> GetIfExistsAsync(string contentItemId, CancellationToken cancellationToken = default)
        {
            if (contentItemId == null)
            {
                throw new ArgumentNullException(nameof(contentItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _contentItemRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, contentItemId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<ContentItemContract>(null, response.GetRawResponse())
                    : Response.FromValue(new ContentItemContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="contentItemId"> Content item identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentItemId"/> is null. </exception>
        public virtual Response<bool> CheckIfExists(string contentItemId, CancellationToken cancellationToken = default)
        {
            if (contentItemId == null)
            {
                throw new ArgumentNullException(nameof(contentItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(contentItemId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="contentItemId"> Content item identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="contentItemId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(string contentItemId, CancellationToken cancellationToken = default)
        {
            if (contentItemId == null)
            {
                throw new ArgumentNullException(nameof(contentItemId));
            }

            using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(contentItemId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists developer portal&apos;s content items specified by the provided content type. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContentItemContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContentItemContract> GetAll(CancellationToken cancellationToken = default)
        {
            Page<ContentItemContract> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _contentItemRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContentItemContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContentItemContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _contentItemRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContentItemContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists developer portal&apos;s content items specified by the provided content type. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContentItemContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContentItemContract> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ContentItemContract>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _contentItemRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContentItemContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContentItemContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ContentItemContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _contentItemRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContentItemContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<ContentItemContract> IEnumerable<ContentItemContract>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ContentItemContract> IAsyncEnumerable<ContentItemContract>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, ContentItemContract, ContentItemContractData> Construct() { }
    }
}
