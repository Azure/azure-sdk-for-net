// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A Class representing a NotificationContract along with the instance operations that can be performed on it. </summary>
    public partial class NotificationContract : ArmResource
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly NotificationRestOperations _notificationRestClient;
        private readonly NotificationRecipientUserRestOperations _notificationRecipientUserRestClient;
        private readonly NotificationRecipientEmailRestOperations _notificationRecipientEmailRestClient;
        private readonly NotificationContractData _data;

        /// <summary> Initializes a new instance of the <see cref="NotificationContract"/> class for mocking. </summary>
        protected NotificationContract()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "NotificationContract"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="resource"> The resource that is the target of operations. </param>
        internal NotificationContract(ArmResource options, NotificationContractData resource) : base(options, resource.Id)
        {
            HasData = true;
            _data = resource;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _notificationRestClient = new NotificationRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _notificationRecipientUserRestClient = new NotificationRecipientUserRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _notificationRecipientEmailRestClient = new NotificationRecipientEmailRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="NotificationContract"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal NotificationContract(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _notificationRestClient = new NotificationRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _notificationRecipientUserRestClient = new NotificationRecipientUserRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _notificationRecipientEmailRestClient = new NotificationRecipientEmailRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="NotificationContract"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal NotificationContract(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _notificationRestClient = new NotificationRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _notificationRecipientUserRestClient = new NotificationRecipientUserRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _notificationRecipientEmailRestClient = new NotificationRecipientEmailRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.ApiManagement/service/notifications";

        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual NotificationContractData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        /// <summary> Gets the details of the Notification specified by its identifier. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<NotificationContract>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NotificationContract.Get");
            scope.Start();
            try
            {
                var response = await _notificationRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new NotificationContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of the Notification specified by its identifier. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotificationContract> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NotificationContract.Get");
            scope.Start();
            try
            {
                var response = _notificationRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NotificationContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// <summary> Gets the list of the Notification Recipient User subscribed to the notification. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<IReadOnlyList<RecipientUserContract>>> GetNotificationRecipientUsersAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NotificationContract.GetNotificationRecipientUsers");
            scope.Start();
            try
            {
                var response = await _notificationRecipientUserRestClient.ListByNotificationAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the list of the Notification Recipient User subscribed to the notification. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<RecipientUserContract>> GetNotificationRecipientUsers(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NotificationContract.GetNotificationRecipientUsers");
            scope.Start();
            try
            {
                var response = _notificationRecipientUserRestClient.ListByNotification(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Determine if the Notification Recipient User is subscribed to the notification. </summary>
        /// <param name="userId"> User identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckEntityExistsNotificationRecipientUserAsync(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.CheckEntityExistsNotificationRecipientUser");
            scope.Start();
            try
            {
                var response = await _notificationRecipientUserRestClient.CheckEntityExistsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Determine if the Notification Recipient User is subscribed to the notification. </summary>
        /// <param name="userId"> User identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public virtual Response<bool> CheckEntityExistsNotificationRecipientUser(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.CheckEntityExistsNotificationRecipientUser");
            scope.Start();
            try
            {
                var response = _notificationRecipientUserRestClient.CheckEntityExists(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds the API Management User to the list of Recipients for the Notification. </summary>
        /// <param name="userId"> User identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public async virtual Task<Response<RecipientUserContract>> CreateOrUpdateNotificationRecipientUserAsync(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.CreateOrUpdateNotificationRecipientUser");
            scope.Start();
            try
            {
                var response = await _notificationRecipientUserRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds the API Management User to the list of Recipients for the Notification. </summary>
        /// <param name="userId"> User identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public virtual Response<RecipientUserContract> CreateOrUpdateNotificationRecipientUser(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.CreateOrUpdateNotificationRecipientUser");
            scope.Start();
            try
            {
                var response = _notificationRecipientUserRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes the API Management user from the list of Notification. </summary>
        /// <param name="userId"> User identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public async virtual Task<Response> DeleteNotificationRecipientUserAsync(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.DeleteNotificationRecipientUser");
            scope.Start();
            try
            {
                var response = await _notificationRecipientUserRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userId, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes the API Management user from the list of Notification. </summary>
        /// <param name="userId"> User identifier. Must be unique in the current API Management service instance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        public virtual Response DeleteNotificationRecipientUser(string userId, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.DeleteNotificationRecipientUser");
            scope.Start();
            try
            {
                var response = _notificationRecipientUserRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userId, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the list of the Notification Recipient Emails subscribed to a notification. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<IReadOnlyList<RecipientEmailContract>>> GetNotificationRecipientEmailsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NotificationContract.GetNotificationRecipientEmails");
            scope.Start();
            try
            {
                var response = await _notificationRecipientEmailRestClient.ListByNotificationAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the list of the Notification Recipient Emails subscribed to a notification. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<RecipientEmailContract>> GetNotificationRecipientEmails(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("NotificationContract.GetNotificationRecipientEmails");
            scope.Start();
            try
            {
                var response = _notificationRecipientEmailRestClient.ListByNotification(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Determine if Notification Recipient Email subscribed to the notification. </summary>
        /// <param name="email"> Email identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="email"/> is null. </exception>
        public async virtual Task<Response<bool>> CheckEntityExistsNotificationRecipientEmailAsync(string email, CancellationToken cancellationToken = default)
        {
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.CheckEntityExistsNotificationRecipientEmail");
            scope.Start();
            try
            {
                var response = await _notificationRecipientEmailRestClient.CheckEntityExistsAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, email, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Determine if Notification Recipient Email subscribed to the notification. </summary>
        /// <param name="email"> Email identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="email"/> is null. </exception>
        public virtual Response<bool> CheckEntityExistsNotificationRecipientEmail(string email, CancellationToken cancellationToken = default)
        {
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.CheckEntityExistsNotificationRecipientEmail");
            scope.Start();
            try
            {
                var response = _notificationRecipientEmailRestClient.CheckEntityExists(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, email, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds the Email address to the list of Recipients for the Notification. </summary>
        /// <param name="email"> Email identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="email"/> is null. </exception>
        public async virtual Task<Response<RecipientEmailContract>> CreateOrUpdateNotificationRecipientEmailAsync(string email, CancellationToken cancellationToken = default)
        {
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.CreateOrUpdateNotificationRecipientEmail");
            scope.Start();
            try
            {
                var response = await _notificationRecipientEmailRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, email, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds the Email address to the list of Recipients for the Notification. </summary>
        /// <param name="email"> Email identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="email"/> is null. </exception>
        public virtual Response<RecipientEmailContract> CreateOrUpdateNotificationRecipientEmail(string email, CancellationToken cancellationToken = default)
        {
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.CreateOrUpdateNotificationRecipientEmail");
            scope.Start();
            try
            {
                var response = _notificationRecipientEmailRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, email, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes the email from the list of Notification. </summary>
        /// <param name="email"> Email identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="email"/> is null. </exception>
        public async virtual Task<Response> DeleteNotificationRecipientEmailAsync(string email, CancellationToken cancellationToken = default)
        {
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.DeleteNotificationRecipientEmail");
            scope.Start();
            try
            {
                var response = await _notificationRecipientEmailRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, email, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes the email from the list of Notification. </summary>
        /// <param name="email"> Email identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="email"/> is null. </exception>
        public virtual Response DeleteNotificationRecipientEmail(string email, CancellationToken cancellationToken = default)
        {
            if (email == null)
            {
                throw new ArgumentNullException(nameof(email));
            }

            using var scope = _clientDiagnostics.CreateScope("NotificationContract.DeleteNotificationRecipientEmail");
            scope.Start();
            try
            {
                var response = _notificationRecipientEmailRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, email, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
