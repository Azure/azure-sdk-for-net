// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ApiManagement.Models;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.ApiManagement
{
    /// <summary> A class representing collection of IdentityProviderContract and their operations over its parent. </summary>
    public partial class IdentityProviderContractCollection : ArmCollection, IEnumerable<IdentityProviderContract>, IAsyncEnumerable<IdentityProviderContract>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly IdentityProviderRestOperations _identityProviderRestClient;

        /// <summary> Initializes a new instance of the <see cref="IdentityProviderContractCollection"/> class for mocking. </summary>
        protected IdentityProviderContractCollection()
        {
        }

        /// <summary> Initializes a new instance of IdentityProviderContractCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal IdentityProviderContractCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _identityProviderRestClient = new IdentityProviderRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ApiManagementServiceResource.ResourceType;

        // Collection level operations.

        /// <summary> Creates or Updates the IdentityProvider configuration. </summary>
        /// <param name="identityProviderName"> Identity Provider Type identifier. </param>
        /// <param name="parameters"> Create parameters. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual IdentityProviderCreateOrUpdateOperation CreateOrUpdate(IdentityProviderType identityProviderName, IdentityProviderCreateContract parameters, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _identityProviderRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, identityProviderName, parameters, ifMatch, cancellationToken);
                var operation = new IdentityProviderCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or Updates the IdentityProvider configuration. </summary>
        /// <param name="identityProviderName"> Identity Provider Type identifier. </param>
        /// <param name="parameters"> Create parameters. </param>
        /// <param name="ifMatch"> ETag of the Entity. Not required when creating an entity, but required when updating an entity. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public async virtual Task<IdentityProviderCreateOrUpdateOperation> CreateOrUpdateAsync(IdentityProviderType identityProviderName, IdentityProviderCreateContract parameters, string ifMatch = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _identityProviderRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, identityProviderName, parameters, ifMatch, cancellationToken).ConfigureAwait(false);
                var operation = new IdentityProviderCreateOrUpdateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the configuration details of the identity Provider configured in specified service instance. </summary>
        /// <param name="identityProviderName"> Identity Provider Type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IdentityProviderContract> Get(IdentityProviderType identityProviderName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.Get");
            scope.Start();
            try
            {
                var response = _identityProviderRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, identityProviderName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new IdentityProviderContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the configuration details of the identity Provider configured in specified service instance. </summary>
        /// <param name="identityProviderName"> Identity Provider Type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<IdentityProviderContract>> GetAsync(IdentityProviderType identityProviderName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.Get");
            scope.Start();
            try
            {
                var response = await _identityProviderRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, identityProviderName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new IdentityProviderContract(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="identityProviderName"> Identity Provider Type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IdentityProviderContract> GetIfExists(IdentityProviderType identityProviderName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _identityProviderRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, identityProviderName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<IdentityProviderContract>(null, response.GetRawResponse())
                    : Response.FromValue(new IdentityProviderContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="identityProviderName"> Identity Provider Type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<IdentityProviderContract>> GetIfExistsAsync(IdentityProviderType identityProviderName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _identityProviderRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, identityProviderName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<IdentityProviderContract>(null, response.GetRawResponse())
                    : Response.FromValue(new IdentityProviderContract(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="identityProviderName"> Identity Provider Type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<bool> CheckIfExists(IdentityProviderType identityProviderName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.CheckIfExists");
            scope.Start();
            try
            {
                var response = GetIfExists(identityProviderName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="identityProviderName"> Identity Provider Type identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<bool>> CheckIfExistsAsync(IdentityProviderType identityProviderName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.CheckIfExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(identityProviderName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists a collection of Identity Provider configured in the specified service instance. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="IdentityProviderContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<IdentityProviderContract> GetAll(CancellationToken cancellationToken = default)
        {
            Page<IdentityProviderContract> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _identityProviderRestClient.ListByService(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IdentityProviderContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<IdentityProviderContract> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _identityProviderRestClient.ListByServiceNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new IdentityProviderContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists a collection of Identity Provider configured in the specified service instance. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="IdentityProviderContract" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<IdentityProviderContract> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<IdentityProviderContract>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _identityProviderRestClient.ListByServiceAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IdentityProviderContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<IdentityProviderContract>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("IdentityProviderContractCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _identityProviderRestClient.ListByServiceNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new IdentityProviderContract(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<IdentityProviderContract> IEnumerable<IdentityProviderContract>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<IdentityProviderContract> IAsyncEnumerable<IdentityProviderContract>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, IdentityProviderContract, IdentityProviderContractData> Construct() { }
    }
}
