// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApiManagementClient.
    /// </summary>
    public static partial class ApiManagementClientExtensions
    {
            /// <summary>
            /// Performs a connectivity check between the API Management service and a
            /// given destination, and returns metrics for the connection, as well as
            /// errors encountered while trying to establish it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='connectivityCheckRequestParams'>
            /// Connectivity Check request parameters.
            /// </param>
            public static ConnectivityCheckResponse PerformConnectivityCheckAsync(this IApiManagementClient operations, string resourceGroupName, string serviceName, ConnectivityCheckRequest connectivityCheckRequestParams)
            {
                return operations.PerformConnectivityCheckAsyncAsync(resourceGroupName, serviceName, connectivityCheckRequestParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a connectivity check between the API Management service and a
            /// given destination, and returns metrics for the connection, as well as
            /// errors encountered while trying to establish it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='connectivityCheckRequestParams'>
            /// Connectivity Check request parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectivityCheckResponse> PerformConnectivityCheckAsyncAsync(this IApiManagementClient operations, string resourceGroupName, string serviceName, ConnectivityCheckRequest connectivityCheckRequestParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PerformConnectivityCheckAsyncWithHttpMessagesAsync(resourceGroupName, serviceName, connectivityCheckRequestParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Performs a connectivity check between the API Management service and a
            /// given destination, and returns metrics for the connection, as well as
            /// errors encountered while trying to establish it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='connectivityCheckRequestParams'>
            /// Connectivity Check request parameters.
            /// </param>
            public static ConnectivityCheckResponse BeginPerformConnectivityCheckAsync(this IApiManagementClient operations, string resourceGroupName, string serviceName, ConnectivityCheckRequest connectivityCheckRequestParams)
            {
                return operations.BeginPerformConnectivityCheckAsyncAsync(resourceGroupName, serviceName, connectivityCheckRequestParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Performs a connectivity check between the API Management service and a
            /// given destination, and returns metrics for the connection, as well as
            /// errors encountered while trying to establish it.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='connectivityCheckRequestParams'>
            /// Connectivity Check request parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectivityCheckResponse> BeginPerformConnectivityCheckAsyncAsync(this IApiManagementClient operations, string resourceGroupName, string serviceName, ConnectivityCheckRequest connectivityCheckRequestParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPerformConnectivityCheckAsyncWithHttpMessagesAsync(resourceGroupName, serviceName, connectivityCheckRequestParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
