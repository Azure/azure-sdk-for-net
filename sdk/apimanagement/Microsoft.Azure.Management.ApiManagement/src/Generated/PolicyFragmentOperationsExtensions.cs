// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PolicyFragmentOperations.
    /// </summary>
    public static partial class PolicyFragmentOperationsExtensions
    {
            /// <summary>
            /// Gets all policy fragments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='filter'>
            /// |     Field     |     Usage     |     Supported operators     |
            /// Supported functions
            /// |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;|
            /// name | filter, orderBy | ge, le, eq, ne, gt, lt | substringof, contains,
            /// startswith, endswith |&lt;/br&gt;| description | filter | ge, le, eq, ne,
            /// gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| value |
            /// filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
            /// endswith |&lt;/br&gt;
            /// </param>
            /// <param name='orderby'>
            /// OData order by query option.
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='skip'>
            /// Number of records to skip.
            /// </param>
            public static PolicyFragmentCollection ListByService(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string filter = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?))
            {
                return operations.ListByServiceAsync(resourceGroupName, serviceName, filter, orderby, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all policy fragments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='filter'>
            /// |     Field     |     Usage     |     Supported operators     |
            /// Supported functions
            /// |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;|
            /// name | filter, orderBy | ge, le, eq, ne, gt, lt | substringof, contains,
            /// startswith, endswith |&lt;/br&gt;| description | filter | ge, le, eq, ne,
            /// gt, lt | substringof, contains, startswith, endswith |&lt;/br&gt;| value |
            /// filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith,
            /// endswith |&lt;/br&gt;
            /// </param>
            /// <param name='orderby'>
            /// OData order by query option.
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='skip'>
            /// Number of records to skip.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyFragmentCollection> ListByServiceAsync(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string filter = default(string), string orderby = default(string), int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, filter, orderby, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the entity state (Etag) version of a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            public static PolicyFragmentGetEntityTagHeaders GetEntityTag(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id)
            {
                return operations.GetEntityTagAsync(resourceGroupName, serviceName, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the entity state (Etag) version of a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyFragmentGetEntityTagHeaders> GetEntityTagAsync(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='format'>
            /// Policy fragment content format. Possible values include: 'xml', 'rawxml'
            /// </param>
            public static PolicyFragmentContract Get(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, string format = default(string))
            {
                return operations.GetAsync(resourceGroupName, serviceName, id, format).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='format'>
            /// Policy fragment content format. Possible values include: 'xml', 'rawxml'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyFragmentContract> GetAsync(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, string format = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, id, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='parameters'>
            /// The policy fragment contents to apply.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            public static PolicyFragmentContract CreateOrUpdate(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, PolicyFragmentContract parameters, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serviceName, id, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='parameters'>
            /// The policy fragment contents to apply.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyFragmentContract> CreateOrUpdateAsync(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, PolicyFragmentContract parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, id, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static void Delete(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, string ifMatch)
            {
                operations.DeleteAsync(resourceGroupName, serviceName, id, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, id, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists policy resources that reference the policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='skip'>
            /// Number of records to skip.
            /// </param>
            public static ResourceCollection ListReferences(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, int? top = default(int?), int? skip = default(int?))
            {
                return operations.ListReferencesAsync(resourceGroupName, serviceName, id, top, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists policy resources that reference the policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='top'>
            /// Number of records to return.
            /// </param>
            /// <param name='skip'>
            /// Number of records to skip.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceCollection> ListReferencesAsync(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, int? top = default(int?), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListReferencesWithHttpMessagesAsync(resourceGroupName, serviceName, id, top, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='parameters'>
            /// The policy fragment contents to apply.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            public static PolicyFragmentContract BeginCreateOrUpdate(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, PolicyFragmentContract parameters, string ifMatch = default(string))
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, serviceName, id, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a policy fragment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='id'>
            /// A resource identifier.
            /// </param>
            /// <param name='parameters'>
            /// The policy fragment contents to apply.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyFragmentContract> BeginCreateOrUpdateAsync(this IPolicyFragmentOperations operations, string resourceGroupName, string serviceName, string id, PolicyFragmentContract parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, id, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
