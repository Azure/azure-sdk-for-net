// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TenantAccessOperations.
    /// </summary>
    public static partial class TenantAccessOperationsExtensions
    {
            /// <summary>
            /// Returns list of access infos - for Git and Management endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<AccessInformationContract> ListByService(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, ODataQuery<AccessInformationContract> odataQuery = default(ODataQuery<AccessInformationContract>))
            {
                return operations.ListByServiceAsync(resourceGroupName, serviceName, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of access infos - for Git and Management endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AccessInformationContract>> ListByServiceAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, ODataQuery<AccessInformationContract> odataQuery = default(ODataQuery<AccessInformationContract>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tenant access metadata
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            public static TenantAccessGetEntityTagHeaders GetEntityTag(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
            {
                return operations.GetEntityTagAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tenant access metadata
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TenantAccessGetEntityTagHeaders> GetEntityTagAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get tenant access information details without secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            public static AccessInformationContract Get(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
            {
                return operations.GetAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get tenant access information details without secrets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessInformationContract> GetAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update tenant access information details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to retrieve the Tenant Access Information.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static AccessInformationContract Create(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, AccessInformationCreateParameters parameters, string accessName, string ifMatch)
            {
                return operations.CreateAsync(resourceGroupName, serviceName, parameters, accessName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update tenant access information details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to retrieve the Tenant Access Information.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessInformationContract> CreateAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, AccessInformationCreateParameters parameters, string accessName, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, serviceName, parameters, accessName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update tenant access information details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to retrieve the Tenant Access Information.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static AccessInformationContract Update(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, AccessInformationUpdateParameters parameters, string accessName, string ifMatch)
            {
                return operations.UpdateAsync(resourceGroupName, serviceName, parameters, accessName, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update tenant access information details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to retrieve the Tenant Access Information.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessInformationContract> UpdateAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, AccessInformationUpdateParameters parameters, string accessName, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, serviceName, parameters, accessName, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate primary access key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            public static void RegeneratePrimaryKey(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
            {
                operations.RegeneratePrimaryKeyAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate primary access key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RegeneratePrimaryKeyAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RegeneratePrimaryKeyWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Regenerate secondary access key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            public static void RegenerateSecondaryKey(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
            {
                operations.RegenerateSecondaryKeyAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate secondary access key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RegenerateSecondaryKeyAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RegenerateSecondaryKeyWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get tenant access information details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            public static AccessInformationSecretsContract ListSecrets(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName)
            {
                return operations.ListSecretsAsync(resourceGroupName, serviceName, accessName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get tenant access information details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='accessName'>
            /// The identifier of the Access configuration. Possible values include:
            /// 'access', 'gitAccess'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessInformationSecretsContract> ListSecretsAsync(this ITenantAccessOperations operations, string resourceGroupName, string serviceName, string accessName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSecretsWithHttpMessagesAsync(resourceGroupName, serviceName, accessName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of access infos - for Git and Management endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AccessInformationContract> ListByServiceNext(this ITenantAccessOperations operations, string nextPageLink)
            {
                return operations.ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of access infos - for Git and Management endpoints.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AccessInformationContract>> ListByServiceNextAsync(this ITenantAccessOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
