// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AuthorizationAccessPolicyOperations.
    /// </summary>
    public static partial class AuthorizationAccessPolicyOperationsExtensions
    {
            /// <summary>
            /// Lists a collection of authorization access policy defined within a
            /// authorization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='authorizationProviderId'>
            /// Identifier of the authorization provider.
            /// </param>
            /// <param name='authorizationId'>
            /// Identifier of the authorization.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<AuthorizationAccessPolicyContract> ListByAuthorization(this IAuthorizationAccessPolicyOperations operations, string resourceGroupName, string serviceName, string authorizationProviderId, string authorizationId, ODataQuery<AuthorizationAccessPolicyContract> odataQuery = default(ODataQuery<AuthorizationAccessPolicyContract>))
            {
                return operations.ListByAuthorizationAsync(resourceGroupName, serviceName, authorizationProviderId, authorizationId, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists a collection of authorization access policy defined within a
            /// authorization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='authorizationProviderId'>
            /// Identifier of the authorization provider.
            /// </param>
            /// <param name='authorizationId'>
            /// Identifier of the authorization.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AuthorizationAccessPolicyContract>> ListByAuthorizationAsync(this IAuthorizationAccessPolicyOperations operations, string resourceGroupName, string serviceName, string authorizationProviderId, string authorizationId, ODataQuery<AuthorizationAccessPolicyContract> odataQuery = default(ODataQuery<AuthorizationAccessPolicyContract>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAuthorizationWithHttpMessagesAsync(resourceGroupName, serviceName, authorizationProviderId, authorizationId, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of the authorization access policy specified by its
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='authorizationProviderId'>
            /// Identifier of the authorization provider.
            /// </param>
            /// <param name='authorizationId'>
            /// Identifier of the authorization.
            /// </param>
            /// <param name='authorizationAccessPolicyId'>
            /// Identifier of the authorization access policy.
            /// </param>
            public static AuthorizationAccessPolicyContract Get(this IAuthorizationAccessPolicyOperations operations, string resourceGroupName, string serviceName, string authorizationProviderId, string authorizationId, string authorizationAccessPolicyId)
            {
                return operations.GetAsync(resourceGroupName, serviceName, authorizationProviderId, authorizationId, authorizationAccessPolicyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of the authorization access policy specified by its
            /// identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='authorizationProviderId'>
            /// Identifier of the authorization provider.
            /// </param>
            /// <param name='authorizationId'>
            /// Identifier of the authorization.
            /// </param>
            /// <param name='authorizationAccessPolicyId'>
            /// Identifier of the authorization access policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthorizationAccessPolicyContract> GetAsync(this IAuthorizationAccessPolicyOperations operations, string resourceGroupName, string serviceName, string authorizationProviderId, string authorizationId, string authorizationAccessPolicyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, authorizationProviderId, authorizationId, authorizationAccessPolicyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates Authorization Access Policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='authorizationProviderId'>
            /// Identifier of the authorization provider.
            /// </param>
            /// <param name='authorizationId'>
            /// Identifier of the authorization.
            /// </param>
            /// <param name='authorizationAccessPolicyId'>
            /// Identifier of the authorization access policy.
            /// </param>
            /// <param name='parameters'>
            /// Create parameters.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            public static AuthorizationAccessPolicyContract CreateOrUpdate(this IAuthorizationAccessPolicyOperations operations, string resourceGroupName, string serviceName, string authorizationProviderId, string authorizationId, string authorizationAccessPolicyId, AuthorizationAccessPolicyContract parameters, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serviceName, authorizationProviderId, authorizationId, authorizationAccessPolicyId, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates Authorization Access Policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='authorizationProviderId'>
            /// Identifier of the authorization provider.
            /// </param>
            /// <param name='authorizationId'>
            /// Identifier of the authorization.
            /// </param>
            /// <param name='authorizationAccessPolicyId'>
            /// Identifier of the authorization access policy.
            /// </param>
            /// <param name='parameters'>
            /// Create parameters.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthorizationAccessPolicyContract> CreateOrUpdateAsync(this IAuthorizationAccessPolicyOperations operations, string resourceGroupName, string serviceName, string authorizationProviderId, string authorizationId, string authorizationAccessPolicyId, AuthorizationAccessPolicyContract parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, authorizationProviderId, authorizationId, authorizationAccessPolicyId, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes specific access policy from the Authorization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='authorizationProviderId'>
            /// Identifier of the authorization provider.
            /// </param>
            /// <param name='authorizationId'>
            /// Identifier of the authorization.
            /// </param>
            /// <param name='authorizationAccessPolicyId'>
            /// Identifier of the authorization access policy.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static void Delete(this IAuthorizationAccessPolicyOperations operations, string resourceGroupName, string serviceName, string authorizationProviderId, string authorizationId, string authorizationAccessPolicyId, string ifMatch)
            {
                operations.DeleteAsync(resourceGroupName, serviceName, authorizationProviderId, authorizationId, authorizationAccessPolicyId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes specific access policy from the Authorization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='authorizationProviderId'>
            /// Identifier of the authorization provider.
            /// </param>
            /// <param name='authorizationId'>
            /// Identifier of the authorization.
            /// </param>
            /// <param name='authorizationAccessPolicyId'>
            /// Identifier of the authorization access policy.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAuthorizationAccessPolicyOperations operations, string resourceGroupName, string serviceName, string authorizationProviderId, string authorizationId, string authorizationAccessPolicyId, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, authorizationProviderId, authorizationId, authorizationAccessPolicyId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists a collection of authorization access policy defined within a
            /// authorization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AuthorizationAccessPolicyContract> ListByAuthorizationNext(this IAuthorizationAccessPolicyOperations operations, string nextPageLink)
            {
                return operations.ListByAuthorizationNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists a collection of authorization access policy defined within a
            /// authorization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AuthorizationAccessPolicyContract>> ListByAuthorizationNextAsync(this IAuthorizationAccessPolicyOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAuthorizationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
