// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Request Report data.
    /// </summary>
    public partial class RequestReportRecordContract
    {
        /// <summary>
        /// Initializes a new instance of the RequestReportRecordContract
        /// class.
        /// </summary>
        public RequestReportRecordContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RequestReportRecordContract
        /// class.
        /// </summary>
        /// <param name="apiId">API identifier path. /apis/{apiId}</param>
        /// <param name="operationId">Operation identifier path.
        /// /apis/{apiId}/operations/{operationId}</param>
        /// <param name="productId">Product identifier path.
        /// /products/{productId}</param>
        /// <param name="userId">User identifier path. /users/{userId}</param>
        /// <param name="method">The HTTP method associated with this
        /// request..</param>
        /// <param name="url">The full URL associated with this
        /// request.</param>
        /// <param name="ipAddress">The client IP address associated with this
        /// request.</param>
        /// <param name="backendResponseCode">The HTTP status code received by
        /// the gateway as a result of forwarding this request to the
        /// backend.</param>
        /// <param name="responseCode">The HTTP status code returned by the
        /// gateway.</param>
        /// <param name="responseSize">The size of the response returned by the
        /// gateway.</param>
        /// <param name="timestamp">The date and time when this request was
        /// received by the gateway in ISO 8601 format.</param>
        /// <param name="cache">Specifies if response cache was involved in
        /// generating the response. If the value is none, the cache was not
        /// used. If the value is hit, cached response was returned. If the
        /// value is miss, the cache was used but lookup resulted in a miss and
        /// request was fulfilled by the backend.</param>
        /// <param name="apiTime">The total time it took to process this
        /// request.</param>
        /// <param name="serviceTime">he time it took to forward this request
        /// to the backend and get the response back.</param>
        /// <param name="apiRegion">Azure region where the gateway that
        /// processed this request is located.</param>
        /// <param name="subscriptionId">Subscription identifier path.
        /// /subscriptions/{subscriptionId}</param>
        /// <param name="requestId">Request Identifier.</param>
        /// <param name="requestSize">The size of this request..</param>
        public RequestReportRecordContract(string apiId = default(string), string operationId = default(string), string productId = default(string), string userId = default(string), string method = default(string), string url = default(string), string ipAddress = default(string), string backendResponseCode = default(string), int? responseCode = default(int?), int? responseSize = default(int?), System.DateTime? timestamp = default(System.DateTime?), string cache = default(string), double? apiTime = default(double?), double? serviceTime = default(double?), string apiRegion = default(string), string subscriptionId = default(string), string requestId = default(string), int? requestSize = default(int?))
        {
            ApiId = apiId;
            OperationId = operationId;
            ProductId = productId;
            UserId = userId;
            Method = method;
            Url = url;
            IpAddress = ipAddress;
            BackendResponseCode = backendResponseCode;
            ResponseCode = responseCode;
            ResponseSize = responseSize;
            Timestamp = timestamp;
            Cache = cache;
            ApiTime = apiTime;
            ServiceTime = serviceTime;
            ApiRegion = apiRegion;
            SubscriptionId = subscriptionId;
            RequestId = requestId;
            RequestSize = requestSize;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets API identifier path. /apis/{apiId}
        /// </summary>
        [JsonProperty(PropertyName = "apiId")]
        public string ApiId { get; set; }

        /// <summary>
        /// Gets or sets operation identifier path.
        /// /apis/{apiId}/operations/{operationId}
        /// </summary>
        [JsonProperty(PropertyName = "operationId")]
        public string OperationId { get; set; }

        /// <summary>
        /// Gets product identifier path. /products/{productId}
        /// </summary>
        [JsonProperty(PropertyName = "productId")]
        public string ProductId { get; private set; }

        /// <summary>
        /// Gets user identifier path. /users/{userId}
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; private set; }

        /// <summary>
        /// Gets or sets the HTTP method associated with this request..
        /// </summary>
        [JsonProperty(PropertyName = "method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or sets the full URL associated with this request.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the client IP address associated with this request.
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or sets the HTTP status code received by the gateway as a
        /// result of forwarding this request to the backend.
        /// </summary>
        [JsonProperty(PropertyName = "backendResponseCode")]
        public string BackendResponseCode { get; set; }

        /// <summary>
        /// Gets or sets the HTTP status code returned by the gateway.
        /// </summary>
        [JsonProperty(PropertyName = "responseCode")]
        public int? ResponseCode { get; set; }

        /// <summary>
        /// Gets or sets the size of the response returned by the gateway.
        /// </summary>
        [JsonProperty(PropertyName = "responseSize")]
        public int? ResponseSize { get; set; }

        /// <summary>
        /// Gets or sets the date and time when this request was received by
        /// the gateway in ISO 8601 format.
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or sets specifies if response cache was involved in generating
        /// the response. If the value is none, the cache was not used. If the
        /// value is hit, cached response was returned. If the value is miss,
        /// the cache was used but lookup resulted in a miss and request was
        /// fulfilled by the backend.
        /// </summary>
        [JsonProperty(PropertyName = "cache")]
        public string Cache { get; set; }

        /// <summary>
        /// Gets or sets the total time it took to process this request.
        /// </summary>
        [JsonProperty(PropertyName = "apiTime")]
        public double? ApiTime { get; set; }

        /// <summary>
        /// Gets or sets he time it took to forward this request to the backend
        /// and get the response back.
        /// </summary>
        [JsonProperty(PropertyName = "serviceTime")]
        public double? ServiceTime { get; set; }

        /// <summary>
        /// Gets or sets azure region where the gateway that processed this
        /// request is located.
        /// </summary>
        [JsonProperty(PropertyName = "apiRegion")]
        public string ApiRegion { get; set; }

        /// <summary>
        /// Gets or sets subscription identifier path.
        /// /subscriptions/{subscriptionId}
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets or sets request Identifier.
        /// </summary>
        [JsonProperty(PropertyName = "requestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or sets the size of this request..
        /// </summary>
        [JsonProperty(PropertyName = "requestSize")]
        public int? RequestSize { get; set; }

    }
}
