// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Diagnostic details.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DiagnosticContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the DiagnosticContract class.
        /// </summary>
        public DiagnosticContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiagnosticContract class.
        /// </summary>
        /// <param name="loggerId">Resource Id of a target logger.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type for API Management
        /// resource.</param>
        /// <param name="alwaysLog">Specifies for what type of messages
        /// sampling settings should not apply. Possible values include:
        /// 'allErrors'</param>
        /// <param name="sampling">Sampling settings for Diagnostic.</param>
        /// <param name="frontend">Diagnostic settings for incoming/outgoing
        /// HTTP messages to the Gateway.</param>
        /// <param name="backend">Diagnostic settings for incoming/outgoing
        /// HTTP messages to the Backend</param>
        /// <param name="logClientIp">Log the ClientIP. Default is
        /// false.</param>
        /// <param name="httpCorrelationProtocol">Sets correlation protocol to
        /// use for Application Insights diagnostics. Possible values include:
        /// 'None', 'Legacy', 'W3C'</param>
        /// <param name="verbosity">The verbosity level applied to traces
        /// emitted by trace policies. Possible values include: 'verbose',
        /// 'information', 'error'</param>
        public DiagnosticContract(string loggerId, string id = default(string), string name = default(string), string type = default(string), string alwaysLog = default(string), SamplingSettings sampling = default(SamplingSettings), PipelineDiagnosticSettings frontend = default(PipelineDiagnosticSettings), PipelineDiagnosticSettings backend = default(PipelineDiagnosticSettings), bool? logClientIp = default(bool?), string httpCorrelationProtocol = default(string), string verbosity = default(string))
            : base(id, name, type)
        {
            AlwaysLog = alwaysLog;
            LoggerId = loggerId;
            Sampling = sampling;
            Frontend = frontend;
            Backend = backend;
            LogClientIp = logClientIp;
            HttpCorrelationProtocol = httpCorrelationProtocol;
            Verbosity = verbosity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies for what type of messages sampling settings
        /// should not apply. Possible values include: 'allErrors'
        /// </summary>
        [JsonProperty(PropertyName = "properties.alwaysLog")]
        public string AlwaysLog { get; set; }

        /// <summary>
        /// Gets or sets resource Id of a target logger.
        /// </summary>
        [JsonProperty(PropertyName = "properties.loggerId")]
        public string LoggerId { get; set; }

        /// <summary>
        /// Gets or sets sampling settings for Diagnostic.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sampling")]
        public SamplingSettings Sampling { get; set; }

        /// <summary>
        /// Gets or sets diagnostic settings for incoming/outgoing HTTP
        /// messages to the Gateway.
        /// </summary>
        [JsonProperty(PropertyName = "properties.frontend")]
        public PipelineDiagnosticSettings Frontend { get; set; }

        /// <summary>
        /// Gets or sets diagnostic settings for incoming/outgoing HTTP
        /// messages to the Backend
        /// </summary>
        [JsonProperty(PropertyName = "properties.backend")]
        public PipelineDiagnosticSettings Backend { get; set; }

        /// <summary>
        /// Gets or sets log the ClientIP. Default is false.
        /// </summary>
        [JsonProperty(PropertyName = "properties.logClientIp")]
        public bool? LogClientIp { get; set; }

        /// <summary>
        /// Gets or sets sets correlation protocol to use for Application
        /// Insights diagnostics. Possible values include: 'None', 'Legacy',
        /// 'W3C'
        /// </summary>
        [JsonProperty(PropertyName = "properties.httpCorrelationProtocol")]
        public string HttpCorrelationProtocol { get; set; }

        /// <summary>
        /// Gets or sets the verbosity level applied to traces emitted by trace
        /// policies. Possible values include: 'verbose', 'information',
        /// 'error'
        /// </summary>
        [JsonProperty(PropertyName = "properties.verbosity")]
        public string Verbosity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LoggerId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LoggerId");
            }
            if (Sampling != null)
            {
                Sampling.Validate();
            }
            if (Frontend != null)
            {
                Frontend.Validate();
            }
            if (Backend != null)
            {
                Backend.Validate();
            }
        }
    }
}
