// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Details about connectivity to a resource.
    /// </summary>
    public partial class ConnectivityStatusContract
    {
        /// <summary>
        /// Initializes a new instance of the ConnectivityStatusContract class.
        /// </summary>
        public ConnectivityStatusContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectivityStatusContract class.
        /// </summary>
        /// <param name="name">The hostname of the resource which the service
        /// depends on. This can be the database, storage or any other azure
        /// resource on which the service depends upon.</param>
        /// <param name="status">Resource Connectivity Status Type identifier.
        /// Possible values include: 'initializing', 'success',
        /// 'failure'</param>
        /// <param name="lastUpdated">The date when the resource connectivity
        /// status was last updated. This status should be updated every 15
        /// minutes. If this status has not been updated, then it means that
        /// the service has lost network connectivity to the resource, from
        /// inside the Virtual Network.The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.
        /// </param>
        /// <param name="lastStatusChange">The date when the resource
        /// connectivity status last Changed from success to failure or
        /// vice-versa. The date conforms to the following format:
        /// `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </param>
        /// <param name="resourceType">Resource Type.</param>
        /// <param name="isOptional">Whether this is optional.</param>
        /// <param name="error">Error details of the connectivity to the
        /// resource.</param>
        public ConnectivityStatusContract(string name, string status, System.DateTime lastUpdated, System.DateTime lastStatusChange, string resourceType, bool isOptional, string error = default(string))
        {
            Name = name;
            Status = status;
            Error = error;
            LastUpdated = lastUpdated;
            LastStatusChange = lastStatusChange;
            ResourceType = resourceType;
            IsOptional = isOptional;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the hostname of the resource which the service depends
        /// on. This can be the database, storage or any other azure resource
        /// on which the service depends upon.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets resource Connectivity Status Type identifier. Possible
        /// values include: 'initializing', 'success', 'failure'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets error details of the connectivity to the resource.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public string Error { get; set; }

        /// <summary>
        /// Gets or sets the date when the resource connectivity status was
        /// last updated. This status should be updated every 15 minutes. If
        /// this status has not been updated, then it means that the service
        /// has lost network connectivity to the resource, from inside the
        /// Virtual Network.The date conforms to the following format:
        /// `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdated")]
        public System.DateTime LastUpdated { get; set; }

        /// <summary>
        /// Gets or sets the date when the resource connectivity status last
        /// Changed from success to failure or vice-versa. The date conforms to
        /// the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the
        /// ISO 8601 standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "lastStatusChange")]
        public System.DateTime LastStatusChange { get; set; }

        /// <summary>
        /// Gets or sets resource Type.
        /// </summary>
        [JsonProperty(PropertyName = "resourceType")]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or sets whether this is optional.
        /// </summary>
        [JsonProperty(PropertyName = "isOptional")]
        public bool IsOptional { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (ResourceType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceType");
            }
            if (Name != null)
            {
                if (Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
        }
    }
}
