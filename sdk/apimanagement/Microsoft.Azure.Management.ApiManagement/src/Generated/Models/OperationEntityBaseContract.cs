// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Api Operation Entity Base Contract details.
    /// </summary>
    public partial class OperationEntityBaseContract
    {
        /// <summary>
        /// Initializes a new instance of the OperationEntityBaseContract
        /// class.
        /// </summary>
        public OperationEntityBaseContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OperationEntityBaseContract
        /// class.
        /// </summary>
        /// <param name="templateParameters">Collection of URL template
        /// parameters.</param>
        /// <param name="description">Description of the operation. May include
        /// HTML formatting tags.</param>
        /// <param name="request">An entity containing request details.</param>
        /// <param name="responses">Array of Operation responses.</param>
        /// <param name="policies">Operation Policies</param>
        public OperationEntityBaseContract(IList<ParameterContract> templateParameters = default(IList<ParameterContract>), string description = default(string), RequestContract request = default(RequestContract), IList<ResponseContract> responses = default(IList<ResponseContract>), string policies = default(string))
        {
            TemplateParameters = templateParameters;
            Description = description;
            Request = request;
            Responses = responses;
            Policies = policies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets collection of URL template parameters.
        /// </summary>
        [JsonProperty(PropertyName = "templateParameters")]
        public IList<ParameterContract> TemplateParameters { get; set; }

        /// <summary>
        /// Gets or sets description of the operation. May include HTML
        /// formatting tags.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets an entity containing request details.
        /// </summary>
        [JsonProperty(PropertyName = "request")]
        public RequestContract Request { get; set; }

        /// <summary>
        /// Gets or sets array of Operation responses.
        /// </summary>
        [JsonProperty(PropertyName = "responses")]
        public IList<ResponseContract> Responses { get; set; }

        /// <summary>
        /// Gets or sets operation Policies
        /// </summary>
        [JsonProperty(PropertyName = "policies")]
        public string Policies { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TemplateParameters != null)
            {
                foreach (var element in TemplateParameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Description != null)
            {
                if (Description.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 1000);
                }
            }
            if (Responses != null)
            {
                foreach (var element1 in Responses)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
