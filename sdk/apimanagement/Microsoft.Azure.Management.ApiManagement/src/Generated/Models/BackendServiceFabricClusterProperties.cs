// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties of the Service Fabric Type Backend.
    /// </summary>
    public partial class BackendServiceFabricClusterProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// BackendServiceFabricClusterProperties class.
        /// </summary>
        public BackendServiceFabricClusterProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// BackendServiceFabricClusterProperties class.
        /// </summary>
        /// <param name="managementEndpoints">The cluster management
        /// endpoint.</param>
        /// <param name="clientCertificateId">The client certificate id for the
        /// management endpoint.</param>
        /// <param name="clientCertificatethumbprint">The client certificate
        /// thumbprint for the management endpoint. Will be ignored if
        /// certificatesIds are provided</param>
        /// <param name="maxPartitionResolutionRetries">Maximum number of
        /// retries while attempting resolve the partition.</param>
        /// <param name="serverCertificateThumbprints">Thumbprints of
        /// certificates cluster management service uses for tls
        /// communication</param>
        /// <param name="serverX509Names">Server X509 Certificate Names
        /// Collection</param>
        public BackendServiceFabricClusterProperties(IList<string> managementEndpoints, string clientCertificateId = default(string), string clientCertificatethumbprint = default(string), int? maxPartitionResolutionRetries = default(int?), IList<string> serverCertificateThumbprints = default(IList<string>), IList<X509CertificateName> serverX509Names = default(IList<X509CertificateName>))
        {
            ClientCertificateId = clientCertificateId;
            ClientCertificatethumbprint = clientCertificatethumbprint;
            MaxPartitionResolutionRetries = maxPartitionResolutionRetries;
            ManagementEndpoints = managementEndpoints;
            ServerCertificateThumbprints = serverCertificateThumbprints;
            ServerX509Names = serverX509Names;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the client certificate id for the management endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "clientCertificateId")]
        public string ClientCertificateId { get; set; }

        /// <summary>
        /// Gets or sets the client certificate thumbprint for the management
        /// endpoint. Will be ignored if certificatesIds are provided
        /// </summary>
        [JsonProperty(PropertyName = "clientCertificatethumbprint")]
        public string ClientCertificatethumbprint { get; set; }

        /// <summary>
        /// Gets or sets maximum number of retries while attempting resolve the
        /// partition.
        /// </summary>
        [JsonProperty(PropertyName = "maxPartitionResolutionRetries")]
        public int? MaxPartitionResolutionRetries { get; set; }

        /// <summary>
        /// Gets or sets the cluster management endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "managementEndpoints")]
        public IList<string> ManagementEndpoints { get; set; }

        /// <summary>
        /// Gets or sets thumbprints of certificates cluster management service
        /// uses for tls communication
        /// </summary>
        [JsonProperty(PropertyName = "serverCertificateThumbprints")]
        public IList<string> ServerCertificateThumbprints { get; set; }

        /// <summary>
        /// Gets or sets server X509 Certificate Names Collection
        /// </summary>
        [JsonProperty(PropertyName = "serverX509Names")]
        public IList<X509CertificateName> ServerX509Names { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ManagementEndpoints == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ManagementEndpoints");
            }
        }
    }
}
