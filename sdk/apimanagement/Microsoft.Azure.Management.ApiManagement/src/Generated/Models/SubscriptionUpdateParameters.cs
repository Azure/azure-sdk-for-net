// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Subscription update details.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SubscriptionUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionUpdateParameters
        /// class.
        /// </summary>
        public SubscriptionUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubscriptionUpdateParameters
        /// class.
        /// </summary>
        /// <param name="ownerId">User identifier path: /users/{userId}</param>
        /// <param name="scope">Scope like /products/{productId} or /apis or
        /// /apis/{apiId}</param>
        /// <param name="expirationDate">Subscription expiration date. The
        /// setting is for audit purposes only and the subscription is not
        /// automatically expired. The subscription lifecycle can be managed by
        /// using the `state` property. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.</param>
        /// <param name="displayName">Subscription name.</param>
        /// <param name="primaryKey">Primary subscription key.</param>
        /// <param name="secondaryKey">Secondary subscription key.</param>
        /// <param name="state">Subscription state. Possible states are *
        /// active – the subscription is active, * suspended – the subscription
        /// is blocked, and the subscriber cannot call any APIs of the product,
        /// * submitted – the subscription request has been made by the
        /// developer, but has not yet been approved or rejected, * rejected –
        /// the subscription request has been denied by an administrator, *
        /// cancelled – the subscription has been cancelled by the developer or
        /// administrator, * expired – the subscription reached its expiration
        /// date and was deactivated. Possible values include: 'suspended',
        /// 'active', 'expired', 'submitted', 'rejected', 'cancelled'</param>
        /// <param name="stateComment">Comments describing subscription state
        /// change by the administrator.</param>
        /// <param name="allowTracing">Determines whether tracing can be
        /// enabled</param>
        public SubscriptionUpdateParameters(string ownerId = default(string), string scope = default(string), System.DateTime? expirationDate = default(System.DateTime?), string displayName = default(string), string primaryKey = default(string), string secondaryKey = default(string), SubscriptionState? state = default(SubscriptionState?), string stateComment = default(string), bool? allowTracing = default(bool?))
        {
            OwnerId = ownerId;
            Scope = scope;
            ExpirationDate = expirationDate;
            DisplayName = displayName;
            PrimaryKey = primaryKey;
            SecondaryKey = secondaryKey;
            State = state;
            StateComment = stateComment;
            AllowTracing = allowTracing;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user identifier path: /users/{userId}
        /// </summary>
        [JsonProperty(PropertyName = "properties.ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or sets scope like /products/{productId} or /apis or
        /// /apis/{apiId}
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets subscription expiration date. The setting is for audit
        /// purposes only and the subscription is not automatically expired.
        /// The subscription lifecycle can be managed by using the `state`
        /// property. The date conforms to the following format:
        /// `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationDate")]
        public System.DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets subscription name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets primary subscription key.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryKey")]
        public string PrimaryKey { get; set; }

        /// <summary>
        /// Gets or sets secondary subscription key.
        /// </summary>
        [JsonProperty(PropertyName = "properties.secondaryKey")]
        public string SecondaryKey { get; set; }

        /// <summary>
        /// Gets or sets subscription state. Possible states are * active – the
        /// subscription is active, * suspended – the subscription is blocked,
        /// and the subscriber cannot call any APIs of the product, * submitted
        /// – the subscription request has been made by the developer, but has
        /// not yet been approved or rejected, * rejected – the subscription
        /// request has been denied by an administrator, * cancelled – the
        /// subscription has been cancelled by the developer or administrator,
        /// * expired – the subscription reached its expiration date and was
        /// deactivated. Possible values include: 'suspended', 'active',
        /// 'expired', 'submitted', 'rejected', 'cancelled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public SubscriptionState? State { get; set; }

        /// <summary>
        /// Gets or sets comments describing subscription state change by the
        /// administrator.
        /// </summary>
        [JsonProperty(PropertyName = "properties.stateComment")]
        public string StateComment { get; set; }

        /// <summary>
        /// Gets or sets determines whether tracing can be enabled
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowTracing")]
        public bool? AllowTracing { get; set; }

    }
}
