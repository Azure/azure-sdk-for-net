// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The connectivity check operation destination.
    /// </summary>
    public partial class ConnectivityCheckRequestDestination
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ConnectivityCheckRequestDestination class.
        /// </summary>
        public ConnectivityCheckRequestDestination()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ConnectivityCheckRequestDestination class.
        /// </summary>
        /// <param name="address">Destination address. Can either be an IP
        /// address or a FQDN.</param>
        /// <param name="port">Destination port.</param>
        public ConnectivityCheckRequestDestination(string address, long port)
        {
            Address = address;
            Port = port;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets destination address. Can either be an IP address or a
        /// FQDN.
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets destination port.
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public long Port { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Address == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Address");
            }
        }
    }
}
