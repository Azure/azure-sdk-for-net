// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A request to perform the connectivity check operation on a API
    /// Management service.
    /// </summary>
    public partial class ConnectivityCheckRequest
    {
        /// <summary>
        /// Initializes a new instance of the ConnectivityCheckRequest class.
        /// </summary>
        public ConnectivityCheckRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectivityCheckRequest class.
        /// </summary>
        /// <param name="source">Definitions about the connectivity check
        /// origin.</param>
        /// <param name="destination">The connectivity check operation
        /// destination.</param>
        /// <param name="preferredIPVersion">The IP version to be used. Only
        /// IPv4 is supported for now. Possible values include: 'IPv4'</param>
        /// <param name="protocol">The request's protocol. Specific protocol
        /// configuration can be available based on this selection. The
        /// specified destination address must be coherent with this value.
        /// Possible values include: 'TCP', 'HTTP', 'HTTPS'</param>
        /// <param name="protocolConfiguration">Protocol-specific
        /// configuration.</param>
        public ConnectivityCheckRequest(ConnectivityCheckRequestSource source, ConnectivityCheckRequestDestination destination, string preferredIPVersion = default(string), string protocol = default(string), ConnectivityCheckRequestProtocolConfiguration protocolConfiguration = default(ConnectivityCheckRequestProtocolConfiguration))
        {
            Source = source;
            Destination = destination;
            PreferredIPVersion = preferredIPVersion;
            Protocol = protocol;
            ProtocolConfiguration = protocolConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets definitions about the connectivity check origin.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public ConnectivityCheckRequestSource Source { get; set; }

        /// <summary>
        /// Gets or sets the connectivity check operation destination.
        /// </summary>
        [JsonProperty(PropertyName = "destination")]
        public ConnectivityCheckRequestDestination Destination { get; set; }

        /// <summary>
        /// Gets or sets the IP version to be used. Only IPv4 is supported for
        /// now. Possible values include: 'IPv4'
        /// </summary>
        [JsonProperty(PropertyName = "preferredIPVersion")]
        public string PreferredIPVersion { get; set; }

        /// <summary>
        /// Gets or sets the request's protocol. Specific protocol
        /// configuration can be available based on this selection. The
        /// specified destination address must be coherent with this value.
        /// Possible values include: 'TCP', 'HTTP', 'HTTPS'
        /// </summary>
        [JsonProperty(PropertyName = "protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or sets protocol-specific configuration.
        /// </summary>
        [JsonProperty(PropertyName = "protocolConfiguration")]
        public ConnectivityCheckRequestProtocolConfiguration ProtocolConfiguration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Destination == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Destination");
            }
            if (Source != null)
            {
                Source.Validate();
            }
            if (Destination != null)
            {
                Destination.Validate();
            }
        }
    }
}
