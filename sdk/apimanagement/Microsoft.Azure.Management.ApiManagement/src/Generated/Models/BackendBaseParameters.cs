// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Backend entity base Parameter set.
    /// </summary>
    public partial class BackendBaseParameters
    {
        /// <summary>
        /// Initializes a new instance of the BackendBaseParameters class.
        /// </summary>
        public BackendBaseParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendBaseParameters class.
        /// </summary>
        /// <param name="title">Backend Title.</param>
        /// <param name="description">Backend Description.</param>
        /// <param name="resourceId">Management Uri of the Resource in External
        /// System. This url can be the Arm Resource Id of Logic Apps, Function
        /// Apps or Api Apps.</param>
        /// <param name="properties">Backend Properties contract</param>
        /// <param name="credentials">Backend Credentials Contract
        /// Properties</param>
        /// <param name="proxy">Backend Proxy Contract Properties</param>
        /// <param name="tls">Backend TLS Properties</param>
        public BackendBaseParameters(string title = default(string), string description = default(string), string resourceId = default(string), BackendProperties properties = default(BackendProperties), BackendCredentialsContract credentials = default(BackendCredentialsContract), BackendProxyContract proxy = default(BackendProxyContract), BackendTlsProperties tls = default(BackendTlsProperties))
        {
            Title = title;
            Description = description;
            ResourceId = resourceId;
            Properties = properties;
            Credentials = credentials;
            Proxy = proxy;
            Tls = tls;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets backend Title.
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets backend Description.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets management Uri of the Resource in External System.
        /// This url can be the Arm Resource Id of Logic Apps, Function Apps or
        /// Api Apps.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets backend Properties contract
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public BackendProperties Properties { get; set; }

        /// <summary>
        /// Gets or sets backend Credentials Contract Properties
        /// </summary>
        [JsonProperty(PropertyName = "credentials")]
        public BackendCredentialsContract Credentials { get; set; }

        /// <summary>
        /// Gets or sets backend Proxy Contract Properties
        /// </summary>
        [JsonProperty(PropertyName = "proxy")]
        public BackendProxyContract Proxy { get; set; }

        /// <summary>
        /// Gets or sets backend TLS Properties
        /// </summary>
        [JsonProperty(PropertyName = "tls")]
        public BackendTlsProperties Tls { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Properties != null)
            {
                Properties.Validate();
            }
            if (Credentials != null)
            {
                Credentials.Validate();
            }
            if (Proxy != null)
            {
                Proxy.Validate();
            }
        }
    }
}
