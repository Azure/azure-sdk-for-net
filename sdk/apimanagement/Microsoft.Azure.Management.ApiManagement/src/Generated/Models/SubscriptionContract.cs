// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Subscription details.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SubscriptionContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionContract class.
        /// </summary>
        public SubscriptionContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubscriptionContract class.
        /// </summary>
        /// <param name="scope">Scope like /products/{productId} or /apis or
        /// /apis/{apiId}.</param>
        /// <param name="state">Subscription state. Possible states are *
        /// active – the subscription is active, * suspended – the subscription
        /// is blocked, and the subscriber cannot call any APIs of the product,
        /// * submitted – the subscription request has been made by the
        /// developer, but has not yet been approved or rejected, * rejected –
        /// the subscription request has been denied by an administrator, *
        /// cancelled – the subscription has been cancelled by the developer or
        /// administrator, * expired – the subscription reached its expiration
        /// date and was deactivated. Possible values include: 'suspended',
        /// 'active', 'expired', 'submitted', 'rejected', 'cancelled'</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type for API Management
        /// resource.</param>
        /// <param name="ownerId">The user resource identifier of the
        /// subscription owner. The value is a valid relative URL in the format
        /// of /users/{userId} where {userId} is a user identifier.</param>
        /// <param name="displayName">The name of the subscription, or null if
        /// the subscription has no name.</param>
        /// <param name="createdDate">Subscription creation date. The date
        /// conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
        /// specified by the ISO 8601 standard.
        /// </param>
        /// <param name="startDate">Subscription activation date. The setting
        /// is for audit purposes only and the subscription is not
        /// automatically activated. The subscription lifecycle can be managed
        /// by using the `state` property. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.
        /// </param>
        /// <param name="expirationDate">Subscription expiration date. The
        /// setting is for audit purposes only and the subscription is not
        /// automatically expired. The subscription lifecycle can be managed by
        /// using the `state` property. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.
        /// </param>
        /// <param name="endDate">Date when subscription was cancelled or
        /// expired. The setting is for audit purposes only and the
        /// subscription is not automatically cancelled. The subscription
        /// lifecycle can be managed by using the `state` property. The date
        /// conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
        /// specified by the ISO 8601 standard.
        /// </param>
        /// <param name="notificationDate">Upcoming subscription expiration
        /// notification date. The date conforms to the following format:
        /// `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        /// </param>
        /// <param name="primaryKey">Subscription primary key. This property
        /// will not be filled on 'GET' operations! Use '/listSecrets' POST
        /// request to get the value.</param>
        /// <param name="secondaryKey">Subscription secondary key. This
        /// property will not be filled on 'GET' operations! Use '/listSecrets'
        /// POST request to get the value.</param>
        /// <param name="stateComment">Optional subscription comment added by
        /// an administrator when the state is changed to the
        /// 'rejected'.</param>
        /// <param name="allowTracing">Determines whether tracing is
        /// enabled</param>
        public SubscriptionContract(string scope, SubscriptionState state, string id = default(string), string name = default(string), string type = default(string), string ownerId = default(string), string displayName = default(string), System.DateTime? createdDate = default(System.DateTime?), System.DateTime? startDate = default(System.DateTime?), System.DateTime? expirationDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), System.DateTime? notificationDate = default(System.DateTime?), string primaryKey = default(string), string secondaryKey = default(string), string stateComment = default(string), bool? allowTracing = default(bool?))
            : base(id, name, type)
        {
            OwnerId = ownerId;
            Scope = scope;
            DisplayName = displayName;
            State = state;
            CreatedDate = createdDate;
            StartDate = startDate;
            ExpirationDate = expirationDate;
            EndDate = endDate;
            NotificationDate = notificationDate;
            PrimaryKey = primaryKey;
            SecondaryKey = secondaryKey;
            StateComment = stateComment;
            AllowTracing = allowTracing;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the user resource identifier of the subscription
        /// owner. The value is a valid relative URL in the format of
        /// /users/{userId} where {userId} is a user identifier.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or sets scope like /products/{productId} or /apis or
        /// /apis/{apiId}.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the name of the subscription, or null if the
        /// subscription has no name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets subscription state. Possible states are * active – the
        /// subscription is active, * suspended – the subscription is blocked,
        /// and the subscriber cannot call any APIs of the product, * submitted
        /// – the subscription request has been made by the developer, but has
        /// not yet been approved or rejected, * rejected – the subscription
        /// request has been denied by an administrator, * cancelled – the
        /// subscription has been cancelled by the developer or administrator,
        /// * expired – the subscription reached its expiration date and was
        /// deactivated. Possible values include: 'suspended', 'active',
        /// 'expired', 'submitted', 'rejected', 'cancelled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public SubscriptionState State { get; set; }

        /// <summary>
        /// Gets subscription creation date. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdDate")]
        public System.DateTime? CreatedDate { get; private set; }

        /// <summary>
        /// Gets or sets subscription activation date. The setting is for audit
        /// purposes only and the subscription is not automatically activated.
        /// The subscription lifecycle can be managed by using the `state`
        /// property. The date conforms to the following format:
        /// `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "properties.startDate")]
        public System.DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets subscription expiration date. The setting is for audit
        /// purposes only and the subscription is not automatically expired.
        /// The subscription lifecycle can be managed by using the `state`
        /// property. The date conforms to the following format:
        /// `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationDate")]
        public System.DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets date when subscription was cancelled or expired. The
        /// setting is for audit purposes only and the subscription is not
        /// automatically cancelled. The subscription lifecycle can be managed
        /// by using the `state` property. The date conforms to the following
        /// format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601
        /// standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "properties.endDate")]
        public System.DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets upcoming subscription expiration notification date.
        /// The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ`
        /// as specified by the ISO 8601 standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "properties.notificationDate")]
        public System.DateTime? NotificationDate { get; set; }

        /// <summary>
        /// Gets or sets subscription primary key. This property will not be
        /// filled on 'GET' operations! Use '/listSecrets' POST request to get
        /// the value.
        /// </summary>
        [JsonProperty(PropertyName = "properties.primaryKey")]
        public string PrimaryKey { get; set; }

        /// <summary>
        /// Gets or sets subscription secondary key. This property will not be
        /// filled on 'GET' operations! Use '/listSecrets' POST request to get
        /// the value.
        /// </summary>
        [JsonProperty(PropertyName = "properties.secondaryKey")]
        public string SecondaryKey { get; set; }

        /// <summary>
        /// Gets or sets optional subscription comment added by an
        /// administrator when the state is changed to the 'rejected'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.stateComment")]
        public string StateComment { get; set; }

        /// <summary>
        /// Gets or sets determines whether tracing is enabled
        /// </summary>
        [JsonProperty(PropertyName = "properties.allowTracing")]
        public bool? AllowTracing { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Scope == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Scope");
            }
            if (DisplayName != null)
            {
                if (DisplayName.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "DisplayName", 100);
                }
                if (DisplayName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "DisplayName", 0);
                }
            }
            if (PrimaryKey != null)
            {
                if (PrimaryKey.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PrimaryKey", 256);
                }
                if (PrimaryKey.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PrimaryKey", 1);
                }
            }
            if (SecondaryKey != null)
            {
                if (SecondaryKey.Length > 256)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SecondaryKey", 256);
                }
                if (SecondaryKey.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SecondaryKey", 1);
                }
            }
        }
    }
}
