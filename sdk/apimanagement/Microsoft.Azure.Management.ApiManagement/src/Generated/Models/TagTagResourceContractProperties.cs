// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Contract defining the Tag property in the Tag Resource Contract
    /// </summary>
    public partial class TagTagResourceContractProperties
    {
        /// <summary>
        /// Initializes a new instance of the TagTagResourceContractProperties
        /// class.
        /// </summary>
        public TagTagResourceContractProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TagTagResourceContractProperties
        /// class.
        /// </summary>
        /// <param name="id">Tag identifier</param>
        /// <param name="name">Tag Name</param>
        public TagTagResourceContractProperties(string id = default(string), string name = default(string))
        {
            Id = id;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets tag identifier
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets tag Name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name != null)
            {
                if (Name.Length > 160)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 160);
                }
                if (Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
        }
    }
}
