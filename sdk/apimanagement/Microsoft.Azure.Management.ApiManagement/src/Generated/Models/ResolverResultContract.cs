// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Long Running Git Resolver Results.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ResolverResultContract : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ResolverResultContract class.
        /// </summary>
        public ResolverResultContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResolverResultContract class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="resolverResultContractId">Resolver result
        /// identifier.</param>
        /// <param name="status">Status of an async resolver. Possible values
        /// include: 'Started', 'InProgress', 'Succeeded', 'Failed'</param>
        /// <param name="started">Start time of an async resolver. The date
        /// conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
        /// specified by the ISO 8601 standard.
        /// </param>
        /// <param name="updated">Last update time of an async resolver. The
        /// date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
        /// specified by the ISO 8601 standard.
        /// </param>
        /// <param name="resultInfo">Optional result info.</param>
        /// <param name="error">Error Body Contract</param>
        /// <param name="actionLog">This property if only provided as part of
        /// the TenantConfiguration_Validate resolver. It contains the log the
        /// entities which will be updated/created/deleted as part of the
        /// TenantConfiguration_Deploy resolver.</param>
        public ResolverResultContract(string id = default(string), string name = default(string), string type = default(string), string resolverResultContractId = default(string), AsyncResolverStatus? status = default(AsyncResolverStatus?), System.DateTime? started = default(System.DateTime?), System.DateTime? updated = default(System.DateTime?), string resultInfo = default(string), ErrorResponseBody error = default(ErrorResponseBody), IList<ResolverResultLogItemContract> actionLog = default(IList<ResolverResultLogItemContract>))
            : base(id, name, type)
        {
            ResolverResultContractId = resolverResultContractId;
            Status = status;
            Started = started;
            Updated = updated;
            ResultInfo = resultInfo;
            Error = error;
            ActionLog = actionLog;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resolver result identifier.
        /// </summary>
        [JsonProperty(PropertyName = "properties.id")]
        public string ResolverResultContractId { get; set; }

        /// <summary>
        /// Gets or sets status of an async resolver. Possible values include:
        /// 'Started', 'InProgress', 'Succeeded', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public AsyncResolverStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets start time of an async resolver. The date conforms to
        /// the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the
        /// ISO 8601 standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "properties.started")]
        public System.DateTime? Started { get; set; }

        /// <summary>
        /// Gets or sets last update time of an async resolver. The date
        /// conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
        /// specified by the ISO 8601 standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "properties.updated")]
        public System.DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or sets optional result info.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resultInfo")]
        public string ResultInfo { get; set; }

        /// <summary>
        /// Gets or sets error Body Contract
        /// </summary>
        [JsonProperty(PropertyName = "properties.error")]
        public ErrorResponseBody Error { get; set; }

        /// <summary>
        /// Gets this property if only provided as part of the
        /// TenantConfiguration_Validate resolver. It contains the log the
        /// entities which will be updated/created/deleted as part of the
        /// TenantConfiguration_Deploy resolver.
        /// </summary>
        [JsonProperty(PropertyName = "properties.actionLog")]
        public IList<ResolverResultLogItemContract> ActionLog { get; private set; }

    }
}
