// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// User details.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class UserContract : Resource
    {
        /// <summary>
        /// Initializes a new instance of the UserContract class.
        /// </summary>
        public UserContract()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserContract class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type for API Management
        /// resource.</param>
        /// <param name="state">Account state. Specifies whether the user is
        /// active or not. Blocked users are unable to sign into the developer
        /// portal or call any APIs of subscribed products. Default state is
        /// Active. Possible values include: 'active', 'blocked', 'pending',
        /// 'deleted'</param>
        /// <param name="note">Optional note about a user set by the
        /// administrator.</param>
        /// <param name="identities">Collection of user identities.</param>
        /// <param name="firstName">First name.</param>
        /// <param name="lastName">Last name.</param>
        /// <param name="email">Email address.</param>
        /// <param name="registrationDate">Date of user registration. The date
        /// conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
        /// specified by the ISO 8601 standard.
        /// </param>
        /// <param name="groups">Collection of groups user is part of.</param>
        public UserContract(string id = default(string), string name = default(string), string type = default(string), string state = default(string), string note = default(string), IList<UserIdentityContract> identities = default(IList<UserIdentityContract>), string firstName = default(string), string lastName = default(string), string email = default(string), System.DateTime? registrationDate = default(System.DateTime?), IList<GroupContractProperties> groups = default(IList<GroupContractProperties>))
            : base(id, name, type)
        {
            State = state;
            Note = note;
            Identities = identities;
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            RegistrationDate = registrationDate;
            Groups = groups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets account state. Specifies whether the user is active or
        /// not. Blocked users are unable to sign into the developer portal or
        /// call any APIs of subscribed products. Default state is Active.
        /// Possible values include: 'active', 'blocked', 'pending', 'deleted'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets optional note about a user set by the administrator.
        /// </summary>
        [JsonProperty(PropertyName = "properties.note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets collection of user identities.
        /// </summary>
        [JsonProperty(PropertyName = "properties.identities")]
        public IList<UserIdentityContract> Identities { get; set; }

        /// <summary>
        /// Gets or sets first name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets last name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets email address.
        /// </summary>
        [JsonProperty(PropertyName = "properties.email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets date of user registration. The date conforms to the
        /// following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO
        /// 8601 standard.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "properties.registrationDate")]
        public System.DateTime? RegistrationDate { get; set; }

        /// <summary>
        /// Gets collection of groups user is part of.
        /// </summary>
        [JsonProperty(PropertyName = "properties.groups")]
        public IList<GroupContractProperties> Groups { get; private set; }

    }
}
