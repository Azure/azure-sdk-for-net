// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GatewayCertificateAuthorityOperations.
    /// </summary>
    public static partial class GatewayCertificateAuthorityOperationsExtensions
    {
            /// <summary>
            /// Lists the collection of Certificate Authorities for the specified Gateway
            /// entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<GatewayCertificateAuthorityContract> ListByService(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, ODataQuery<GatewayCertificateAuthorityContract> odataQuery = default(ODataQuery<GatewayCertificateAuthorityContract>))
            {
                return operations.ListByServiceAsync(resourceGroupName, serviceName, gatewayId, odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the collection of Certificate Authorities for the specified Gateway
            /// entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GatewayCertificateAuthorityContract>> ListByServiceAsync(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, ODataQuery<GatewayCertificateAuthorityContract> odataQuery = default(ODataQuery<GatewayCertificateAuthorityContract>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks if Certificate entity is assigned to Gateway entity as Certificate
            /// Authority.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='certificateId'>
            /// Identifier of the certificate entity. Must be unique in the current API
            /// Management service instance.
            /// </param>
            public static GatewayCertificateAuthorityGetEntityTagHeaders GetEntityTag(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, string certificateId)
            {
                return operations.GetEntityTagAsync(resourceGroupName, serviceName, gatewayId, certificateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks if Certificate entity is assigned to Gateway entity as Certificate
            /// Authority.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='certificateId'>
            /// Identifier of the certificate entity. Must be unique in the current API
            /// Management service instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayCertificateAuthorityGetEntityTagHeaders> GetEntityTagAsync(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, string certificateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, certificateId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Get assigned Gateway Certificate Authority details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='certificateId'>
            /// Identifier of the certificate entity. Must be unique in the current API
            /// Management service instance.
            /// </param>
            public static GatewayCertificateAuthorityContract Get(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, string certificateId)
            {
                return operations.GetAsync(resourceGroupName, serviceName, gatewayId, certificateId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get assigned Gateway Certificate Authority details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='certificateId'>
            /// Identifier of the certificate entity. Must be unique in the current API
            /// Management service instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayCertificateAuthorityContract> GetAsync(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, string certificateId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, certificateId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Assign Certificate entity to Gateway entity as Certificate Authority.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='certificateId'>
            /// Identifier of the certificate entity. Must be unique in the current API
            /// Management service instance.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            public static GatewayCertificateAuthorityContract CreateOrUpdate(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, string certificateId, GatewayCertificateAuthorityContract parameters, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serviceName, gatewayId, certificateId, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Assign Certificate entity to Gateway entity as Certificate Authority.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='certificateId'>
            /// Identifier of the certificate entity. Must be unique in the current API
            /// Management service instance.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayCertificateAuthorityContract> CreateOrUpdateAsync(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, string certificateId, GatewayCertificateAuthorityContract parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, certificateId, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove relationship between Certificate Authority and Gateway entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='certificateId'>
            /// Identifier of the certificate entity. Must be unique in the current API
            /// Management service instance.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static void Delete(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, string certificateId, string ifMatch)
            {
                operations.DeleteAsync(resourceGroupName, serviceName, gatewayId, certificateId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove relationship between Certificate Authority and Gateway entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway entity identifier. Must be unique in the current API Management
            /// service instance. Must not have value 'managed'
            /// </param>
            /// <param name='certificateId'>
            /// Identifier of the certificate entity. Must be unique in the current API
            /// Management service instance.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IGatewayCertificateAuthorityOperations operations, string resourceGroupName, string serviceName, string gatewayId, string certificateId, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, gatewayId, certificateId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the collection of Certificate Authorities for the specified Gateway
            /// entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GatewayCertificateAuthorityContract> ListByServiceNext(this IGatewayCertificateAuthorityOperations operations, string nextPageLink)
            {
                return operations.ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the collection of Certificate Authorities for the specified Gateway
            /// entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GatewayCertificateAuthorityContract>> ListByServiceNextAsync(this IGatewayCertificateAuthorityOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
