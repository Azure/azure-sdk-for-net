// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ApiManagement
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContentItemOperations.
    /// </summary>
    public static partial class ContentItemOperationsExtensions
    {
            /// <summary>
            /// Lists developer portal's content items specified by the provided content
            /// type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            public static IPage<ContentItemContract> ListByService(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId)
            {
                return operations.ListByServiceAsync(resourceGroupName, serviceName, contentTypeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists developer portal's content items specified by the provided content
            /// type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ContentItemContract>> ListByServiceAsync(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceWithHttpMessagesAsync(resourceGroupName, serviceName, contentTypeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the entity state (ETag) version of the developer portal's content
            /// item specified by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='contentItemId'>
            /// Content item identifier.
            /// </param>
            public static ContentItemGetEntityTagHeaders GetEntityTag(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, string contentItemId)
            {
                return operations.GetEntityTagAsync(resourceGroupName, serviceName, contentTypeId, contentItemId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the entity state (ETag) version of the developer portal's content
            /// item specified by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='contentItemId'>
            /// Content item identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentItemGetEntityTagHeaders> GetEntityTagAsync(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, string contentItemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntityTagWithHttpMessagesAsync(resourceGroupName, serviceName, contentTypeId, contentItemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Returns the developer portal's content item specified by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='contentItemId'>
            /// Content item identifier.
            /// </param>
            public static ContentItemContract Get(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, string contentItemId)
            {
                return operations.GetAsync(resourceGroupName, serviceName, contentTypeId, contentItemId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the developer portal's content item specified by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='contentItemId'>
            /// Content item identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentItemContract> GetAsync(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, string contentItemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, serviceName, contentTypeId, contentItemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new developer portal's content item specified by the provided
            /// content type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='contentItemId'>
            /// Content item identifier.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            public static ContentItemContract CreateOrUpdate(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, string contentItemId, string ifMatch = default(string))
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, serviceName, contentTypeId, contentItemId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new developer portal's content item specified by the provided
            /// content type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='contentItemId'>
            /// Content item identifier.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. Not required when creating an entity, but required when
            /// updating an entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContentItemContract> CreateOrUpdateAsync(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, string contentItemId, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, serviceName, contentTypeId, contentItemId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the specified developer portal's content item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='contentItemId'>
            /// Content item identifier.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            public static void Delete(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, string contentItemId, string ifMatch)
            {
                operations.DeleteAsync(resourceGroupName, serviceName, contentTypeId, contentItemId, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the specified developer portal's content item.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='serviceName'>
            /// The name of the API Management service.
            /// </param>
            /// <param name='contentTypeId'>
            /// Content type identifier.
            /// </param>
            /// <param name='contentItemId'>
            /// Content item identifier.
            /// </param>
            /// <param name='ifMatch'>
            /// ETag of the Entity. ETag should match the current entity state from the
            /// header response of the GET request or it should be * for unconditional
            /// update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IContentItemOperations operations, string resourceGroupName, string serviceName, string contentTypeId, string contentItemId, string ifMatch, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, serviceName, contentTypeId, contentItemId, ifMatch, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists developer portal's content items specified by the provided content
            /// type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ContentItemContract> ListByServiceNext(this IContentItemOperations operations, string nextPageLink)
            {
                return operations.ListByServiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists developer portal's content items specified by the provided content
            /// type.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ContentItemContract>> ListByServiceNextAsync(this IContentItemOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByServiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
