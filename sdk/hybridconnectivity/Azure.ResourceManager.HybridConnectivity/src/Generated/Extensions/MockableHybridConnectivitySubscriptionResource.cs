// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.HybridConnectivity.Models;

namespace Azure.ResourceManager.HybridConnectivity.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableHybridConnectivitySubscriptionResource : ArmResource
    {
        private ClientDiagnostics _generateAwsTemplateClientDiagnostics;
        private GenerateAwsTemplateRestOperations _generateAwsTemplateRestClient;
        private ClientDiagnostics _hybridConnectivityPublicCloudConnectorPublicCloudConnectorsClientDiagnostics;
        private PublicCloudConnectorsRestOperations _hybridConnectivityPublicCloudConnectorPublicCloudConnectorsRestClient;
        private ClientDiagnostics _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics;
        private SolutionTypesRestOperations _hybridConnectivitySolutionTypeSolutionTypesRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableHybridConnectivitySubscriptionResource"/> class for mocking. </summary>
        protected MockableHybridConnectivitySubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableHybridConnectivitySubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableHybridConnectivitySubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics GenerateAwsTemplateClientDiagnostics => _generateAwsTemplateClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HybridConnectivity", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private GenerateAwsTemplateRestOperations GenerateAwsTemplateRestClient => _generateAwsTemplateRestClient ??= new GenerateAwsTemplateRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics HybridConnectivityPublicCloudConnectorPublicCloudConnectorsClientDiagnostics => _hybridConnectivityPublicCloudConnectorPublicCloudConnectorsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HybridConnectivity", HybridConnectivityPublicCloudConnectorResource.ResourceType.Namespace, Diagnostics);
        private PublicCloudConnectorsRestOperations HybridConnectivityPublicCloudConnectorPublicCloudConnectorsRestClient => _hybridConnectivityPublicCloudConnectorPublicCloudConnectorsRestClient ??= new PublicCloudConnectorsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(HybridConnectivityPublicCloudConnectorResource.ResourceType));
        private ClientDiagnostics HybridConnectivitySolutionTypeSolutionTypesClientDiagnostics => _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.HybridConnectivity", HybridConnectivitySolutionTypeResource.ResourceType.Namespace, Diagnostics);
        private SolutionTypesRestOperations HybridConnectivitySolutionTypeSolutionTypesRestClient => _hybridConnectivitySolutionTypeSolutionTypesRestClient ??= new SolutionTypesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(HybridConnectivitySolutionTypeResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Retrieve AWS Cloud Formation template
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridConnectivity/generateAwsTemplate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateAwsTemplate_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> ConnectorId and SolutionTypes and their properties to Generate AWS CFT Template. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<BinaryData>> PostGenerateAwsTemplateAsync(GenerateAwsTemplateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = GenerateAwsTemplateClientDiagnostics.CreateScope("MockableHybridConnectivitySubscriptionResource.PostGenerateAwsTemplate");
            scope.Start();
            try
            {
                var response = await GenerateAwsTemplateRestClient.PostAsync(Id.SubscriptionId, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Retrieve AWS Cloud Formation template
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridConnectivity/generateAwsTemplate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateAwsTemplate_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> ConnectorId and SolutionTypes and their properties to Generate AWS CFT Template. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<BinaryData> PostGenerateAwsTemplate(GenerateAwsTemplateContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = GenerateAwsTemplateClientDiagnostics.CreateScope("MockableHybridConnectivitySubscriptionResource.PostGenerateAwsTemplate");
            scope.Start();
            try
            {
                var response = GenerateAwsTemplateRestClient.Post(Id.SubscriptionId, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List PublicCloudConnector resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridConnectivity/publicCloudConnectors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivityPublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridConnectivityPublicCloudConnectorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridConnectivityPublicCloudConnectorResource> GetHybridConnectivityPublicCloudConnectorsAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => HybridConnectivityPublicCloudConnectorPublicCloudConnectorsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => HybridConnectivityPublicCloudConnectorPublicCloudConnectorsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HybridConnectivityPublicCloudConnectorResource(Client, HybridConnectivityPublicCloudConnectorData.DeserializeHybridConnectivityPublicCloudConnectorData(e)), HybridConnectivityPublicCloudConnectorPublicCloudConnectorsClientDiagnostics, Pipeline, "MockableHybridConnectivitySubscriptionResource.GetHybridConnectivityPublicCloudConnectors", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List PublicCloudConnector resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridConnectivity/publicCloudConnectors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivityPublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridConnectivityPublicCloudConnectorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridConnectivityPublicCloudConnectorResource> GetHybridConnectivityPublicCloudConnectors(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => HybridConnectivityPublicCloudConnectorPublicCloudConnectorsRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => HybridConnectivityPublicCloudConnectorPublicCloudConnectorsRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HybridConnectivityPublicCloudConnectorResource(Client, HybridConnectivityPublicCloudConnectorData.DeserializeHybridConnectivityPublicCloudConnectorData(e)), HybridConnectivityPublicCloudConnectorPublicCloudConnectorsClientDiagnostics, Pipeline, "MockableHybridConnectivitySubscriptionResource.GetHybridConnectivityPublicCloudConnectors", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List SolutionTypeResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridConnectivity/solutionTypes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridConnectivitySolutionTypeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridConnectivitySolutionTypeResource> GetHybridConnectivitySolutionTypesAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => HybridConnectivitySolutionTypeSolutionTypesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => HybridConnectivitySolutionTypeSolutionTypesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HybridConnectivitySolutionTypeResource(Client, HybridConnectivitySolutionTypeData.DeserializeHybridConnectivitySolutionTypeData(e)), HybridConnectivitySolutionTypeSolutionTypesClientDiagnostics, Pipeline, "MockableHybridConnectivitySubscriptionResource.GetHybridConnectivitySolutionTypes", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List SolutionTypeResource resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridConnectivity/solutionTypes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridConnectivitySolutionTypeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridConnectivitySolutionTypeResource> GetHybridConnectivitySolutionTypes(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => HybridConnectivitySolutionTypeSolutionTypesRestClient.CreateListBySubscriptionRequest(Id.SubscriptionId);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => HybridConnectivitySolutionTypeSolutionTypesRestClient.CreateListBySubscriptionNextPageRequest(nextLink, Id.SubscriptionId);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HybridConnectivitySolutionTypeResource(Client, HybridConnectivitySolutionTypeData.DeserializeHybridConnectivitySolutionTypeData(e)), HybridConnectivitySolutionTypeSolutionTypesClientDiagnostics, Pipeline, "MockableHybridConnectivitySubscriptionResource.GetHybridConnectivitySolutionTypes", "value", "nextLink", cancellationToken);
        }
    }
}
