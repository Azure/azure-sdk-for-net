// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.HybridConnectivity.Mocking
{
    /// <summary> A class to add extension methods to ResourceGroupResource. </summary>
    public partial class MockableHybridConnectivityResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableHybridConnectivityResourceGroupResource"/> class for mocking. </summary>
        protected MockableHybridConnectivityResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableHybridConnectivityResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableHybridConnectivityResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of PublicCloudConnectorResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of PublicCloudConnectorResources and their operations over a PublicCloudConnectorResource. </returns>
        public virtual PublicCloudConnectorCollection GetPublicCloudConnectors()
        {
            return GetCachedClient(client => new PublicCloudConnectorCollection(client, Id));
        }

        /// <summary>
        /// Get a PublicCloudConnector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<PublicCloudConnectorResource>> GetPublicCloudConnectorAsync(string publicCloudConnector, CancellationToken cancellationToken = default)
        {
            return await GetPublicCloudConnectors().GetAsync(publicCloudConnector, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a PublicCloudConnector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<PublicCloudConnectorResource> GetPublicCloudConnector(string publicCloudConnector, CancellationToken cancellationToken = default)
        {
            return GetPublicCloudConnectors().Get(publicCloudConnector, cancellationToken);
        }

        /// <summary> Gets a collection of SolutionTypeResources in the ResourceGroupResource. </summary>
        /// <returns> An object representing collection of SolutionTypeResources and their operations over a SolutionTypeResource. </returns>
        public virtual SolutionTypeResourceCollection GetSolutionTypeResources()
        {
            return GetCachedClient(client => new SolutionTypeResourceCollection(client, Id));
        }

        /// <summary>
        /// Get a SolutionTypeResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes/{solutionType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionType"> Solution Type resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionType"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SolutionTypeResource>> GetSolutionTypeResourceAsync(string solutionType, CancellationToken cancellationToken = default)
        {
            return await GetSolutionTypeResources().GetAsync(solutionType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a SolutionTypeResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes/{solutionType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="SolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionType"> Solution Type resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="solutionType"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<SolutionTypeResource> GetSolutionTypeResource(string solutionType, CancellationToken cancellationToken = default)
        {
            return GetSolutionTypeResources().Get(solutionType, cancellationToken);
        }
    }
}
