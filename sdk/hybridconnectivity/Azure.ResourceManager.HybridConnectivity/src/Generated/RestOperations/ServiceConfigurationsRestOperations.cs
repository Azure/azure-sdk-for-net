// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.HybridConnectivity.Models;

namespace Azure.ResourceManager.HybridConnectivity
{
    internal partial class ServiceConfigurationsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of ServiceConfigurationsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public ServiceConfigurationsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2024-12-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateListByEndpointResourceRequestUri(string scope, string endpointName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByEndpointResourceRequest(string scope, string endpointName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> API to enumerate registered services in service configurations under a Endpoint Resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> or <paramref name="endpointName"/> is null. </exception>
        public async Task<Response<ServiceConfigurationList>> ListByEndpointResourceAsync(string scope, string endpointName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));

            using var message = CreateListByEndpointResourceRequest(scope, endpointName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServiceConfigurationList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ServiceConfigurationList.DeserializeServiceConfigurationList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> API to enumerate registered services in service configurations under a Endpoint Resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/> or <paramref name="endpointName"/> is null. </exception>
        public Response<ServiceConfigurationList> ListByEndpointResource(string scope, string endpointName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));

            using var message = CreateListByEndpointResourceRequest(scope, endpointName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServiceConfigurationList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ServiceConfigurationList.DeserializeServiceConfigurationList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateGetRequestUri(string scope, string endpointName, string serviceConfigurationName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations/", false);
            uri.AppendPath(serviceConfigurationName, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string scope, string endpointName, string serviceConfigurationName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations/", false);
            uri.AppendPath(serviceConfigurationName, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Gets the details about the service to the resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="endpointName"/> or <paramref name="serviceConfigurationName"/> is null. </exception>
        public async Task<Response<ServiceConfigurationResourceData>> GetAsync(string scope, string endpointName, string serviceConfigurationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));

            using var message = CreateGetRequest(scope, endpointName, serviceConfigurationName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServiceConfigurationResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ServiceConfigurationResourceData.DeserializeServiceConfigurationResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((ServiceConfigurationResourceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets the details about the service to the resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="endpointName"/> or <paramref name="serviceConfigurationName"/> is null. </exception>
        public Response<ServiceConfigurationResourceData> Get(string scope, string endpointName, string serviceConfigurationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));

            using var message = CreateGetRequest(scope, endpointName, serviceConfigurationName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServiceConfigurationResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ServiceConfigurationResourceData.DeserializeServiceConfigurationResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((ServiceConfigurationResourceData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrupdateRequestUri(string scope, string endpointName, string serviceConfigurationName, ServiceConfigurationResourceData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations/", false);
            uri.AppendPath(serviceConfigurationName, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrupdateRequest(string scope, string endpointName, string serviceConfigurationName, ServiceConfigurationResourceData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations/", false);
            uri.AppendPath(serviceConfigurationName, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Create or update a service in serviceConfiguration for the endpoint resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="data"> Service details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="endpointName"/>, <paramref name="serviceConfigurationName"/> or <paramref name="data"/> is null. </exception>
        public async Task<Response<ServiceConfigurationResourceData>> CreateOrupdateAsync(string scope, string endpointName, string serviceConfigurationName, ServiceConfigurationResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrupdateRequest(scope, endpointName, serviceConfigurationName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ServiceConfigurationResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ServiceConfigurationResourceData.DeserializeServiceConfigurationResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or update a service in serviceConfiguration for the endpoint resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="data"> Service details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="endpointName"/>, <paramref name="serviceConfigurationName"/> or <paramref name="data"/> is null. </exception>
        public Response<ServiceConfigurationResourceData> CreateOrupdate(string scope, string endpointName, string serviceConfigurationName, ServiceConfigurationResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrupdateRequest(scope, endpointName, serviceConfigurationName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        ServiceConfigurationResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ServiceConfigurationResourceData.DeserializeServiceConfigurationResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string scope, string endpointName, string serviceConfigurationName, ServiceConfigurationResourcePatch patch)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations/", false);
            uri.AppendPath(serviceConfigurationName, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string scope, string endpointName, string serviceConfigurationName, ServiceConfigurationResourcePatch patch)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations/", false);
            uri.AppendPath(serviceConfigurationName, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(patch, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Update the service details in the service configurations of the target resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="patch"> Service details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="endpointName"/>, <paramref name="serviceConfigurationName"/> or <paramref name="patch"/> is null. </exception>
        public async Task<Response<ServiceConfigurationResourceData>> UpdateAsync(string scope, string endpointName, string serviceConfigurationName, ServiceConfigurationResourcePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(scope, endpointName, serviceConfigurationName, patch);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServiceConfigurationResourceData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ServiceConfigurationResourceData.DeserializeServiceConfigurationResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Update the service details in the service configurations of the target resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="patch"> Service details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="endpointName"/>, <paramref name="serviceConfigurationName"/> or <paramref name="patch"/> is null. </exception>
        public Response<ServiceConfigurationResourceData> Update(string scope, string endpointName, string serviceConfigurationName, ServiceConfigurationResourcePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));
            Argument.AssertNotNull(patch, nameof(patch));

            using var message = CreateUpdateRequest(scope, endpointName, serviceConfigurationName, patch);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServiceConfigurationResourceData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ServiceConfigurationResourceData.DeserializeServiceConfigurationResourceData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string scope, string endpointName, string serviceConfigurationName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations/", false);
            uri.AppendPath(serviceConfigurationName, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string scope, string endpointName, string serviceConfigurationName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/", false);
            uri.AppendPath(scope, false);
            uri.AppendPath("/providers/Microsoft.HybridConnectivity/endpoints/", false);
            uri.AppendPath(endpointName, false);
            uri.AppendPath("/serviceConfigurations/", false);
            uri.AppendPath(serviceConfigurationName, false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Deletes the service details to the target resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="endpointName"/> or <paramref name="serviceConfigurationName"/> is null. </exception>
        public async Task<Response> DeleteAsync(string scope, string endpointName, string serviceConfigurationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));

            using var message = CreateDeleteRequest(scope, endpointName, serviceConfigurationName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes the service details to the target resource. </summary>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="serviceConfigurationName"> The service name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scope"/>, <paramref name="endpointName"/> or <paramref name="serviceConfigurationName"/> is null. </exception>
        public Response Delete(string scope, string endpointName, string serviceConfigurationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));
            Argument.AssertNotNull(serviceConfigurationName, nameof(serviceConfigurationName));

            using var message = CreateDeleteRequest(scope, endpointName, serviceConfigurationName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByEndpointResourceNextPageRequestUri(string nextLink, string scope, string endpointName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByEndpointResourceNextPageRequest(string nextLink, string scope, string endpointName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> API to enumerate registered services in service configurations under a Endpoint Resource. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="scope"/> or <paramref name="endpointName"/> is null. </exception>
        public async Task<Response<ServiceConfigurationList>> ListByEndpointResourceNextPageAsync(string nextLink, string scope, string endpointName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));

            using var message = CreateListByEndpointResourceNextPageRequest(nextLink, scope, endpointName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServiceConfigurationList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ServiceConfigurationList.DeserializeServiceConfigurationList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> API to enumerate registered services in service configurations under a Endpoint Resource. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource to be connected. </param>
        /// <param name="endpointName"> The endpoint name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="scope"/> or <paramref name="endpointName"/> is null. </exception>
        public Response<ServiceConfigurationList> ListByEndpointResourceNextPage(string nextLink, string scope, string endpointName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNull(scope, nameof(scope));
            Argument.AssertNotNull(endpointName, nameof(endpointName));

            using var message = CreateListByEndpointResourceNextPageRequest(nextLink, scope, endpointName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ServiceConfigurationList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ServiceConfigurationList.DeserializeServiceConfigurationList(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
