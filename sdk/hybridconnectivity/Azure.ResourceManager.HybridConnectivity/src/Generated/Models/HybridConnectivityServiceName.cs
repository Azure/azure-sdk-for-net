// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.HybridConnectivity.Models
{
    /// <summary> Name of the service. </summary>
    public readonly partial struct HybridConnectivityServiceName : IEquatable<HybridConnectivityServiceName>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HybridConnectivityServiceName"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HybridConnectivityServiceName(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SSHValue = "SSH";
        private const string WACValue = "WAC";

        /// <summary> SSH. </summary>
        public static HybridConnectivityServiceName SSH { get; } = new HybridConnectivityServiceName(SSHValue);
        /// <summary> WAC. </summary>
        public static HybridConnectivityServiceName WAC { get; } = new HybridConnectivityServiceName(WACValue);
        /// <summary> Determines if two <see cref="HybridConnectivityServiceName"/> values are the same. </summary>
        public static bool operator ==(HybridConnectivityServiceName left, HybridConnectivityServiceName right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HybridConnectivityServiceName"/> values are not the same. </summary>
        public static bool operator !=(HybridConnectivityServiceName left, HybridConnectivityServiceName right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="HybridConnectivityServiceName"/>. </summary>
        public static implicit operator HybridConnectivityServiceName(string value) => new HybridConnectivityServiceName(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HybridConnectivityServiceName other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HybridConnectivityServiceName other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
