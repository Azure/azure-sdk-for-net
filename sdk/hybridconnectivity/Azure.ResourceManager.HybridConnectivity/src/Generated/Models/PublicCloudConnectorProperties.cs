// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.HybridConnectivity.Models
{
    /// <summary> Properties of public cloud connectors. </summary>
    public partial class PublicCloudConnectorProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PublicCloudConnectorProperties"/>. </summary>
        /// <param name="awsCloudProfile"> Cloud profile for AWS. </param>
        /// <param name="hostType"> Host cloud the public cloud connector. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="awsCloudProfile"/> is null. </exception>
        public PublicCloudConnectorProperties(AwsCloudProfile awsCloudProfile, HybridConnectivityHostType hostType)
        {
            Argument.AssertNotNull(awsCloudProfile, nameof(awsCloudProfile));

            AwsCloudProfile = awsCloudProfile;
            HostType = hostType;
        }

        /// <summary> Initializes a new instance of <see cref="PublicCloudConnectorProperties"/>. </summary>
        /// <param name="awsCloudProfile"> Cloud profile for AWS. </param>
        /// <param name="hostType"> Host cloud the public cloud connector. </param>
        /// <param name="provisioningState"> The resource provisioning state. </param>
        /// <param name="connectorPrimaryIdentifier"> Connector primary identifier. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PublicCloudConnectorProperties(AwsCloudProfile awsCloudProfile, HybridConnectivityHostType hostType, HybridConnectivityResourceProvisioningState? provisioningState, Guid? connectorPrimaryIdentifier, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AwsCloudProfile = awsCloudProfile;
            HostType = hostType;
            ProvisioningState = provisioningState;
            ConnectorPrimaryIdentifier = connectorPrimaryIdentifier;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PublicCloudConnectorProperties"/> for deserialization. </summary>
        internal PublicCloudConnectorProperties()
        {
        }

        /// <summary> Cloud profile for AWS. </summary>
        public AwsCloudProfile AwsCloudProfile { get; set; }
        /// <summary> Host cloud the public cloud connector. </summary>
        public HybridConnectivityHostType HostType { get; set; }
        /// <summary> The resource provisioning state. </summary>
        public HybridConnectivityResourceProvisioningState? ProvisioningState { get; }
        /// <summary> Connector primary identifier. </summary>
        public Guid? ConnectorPrimaryIdentifier { get; }
    }
}
