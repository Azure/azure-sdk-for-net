// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.HybridConnectivity.Models
{
    /// <summary> Solution configuration resource. </summary>
    public partial class SolutionConfigurationProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SolutionConfigurationProperties"/>. </summary>
        /// <param name="solutionType"> The type of the solution. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        public SolutionConfigurationProperties(string solutionType)
        {
            Argument.AssertNotNull(solutionType, nameof(solutionType));

            SolutionType = solutionType;
            SolutionSettings = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="SolutionConfigurationProperties"/>. </summary>
        /// <param name="provisioningState"> The resource provisioning state. </param>
        /// <param name="solutionType"> The type of the solution. </param>
        /// <param name="solutionSettings"> Solution settings. </param>
        /// <param name="status"> The status of solution configurations. </param>
        /// <param name="statusDetails"> The detailed message of status details. </param>
        /// <param name="lastSyncOn"> The last time resources were inventoried. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SolutionConfigurationProperties(HybridConnectivityResourceProvisioningState? provisioningState, string solutionType, IDictionary<string, string> solutionSettings, SolutionConfigurationStatus? status, string statusDetails, DateTimeOffset? lastSyncOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            SolutionType = solutionType;
            SolutionSettings = solutionSettings;
            Status = status;
            StatusDetails = statusDetails;
            LastSyncOn = lastSyncOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SolutionConfigurationProperties"/> for deserialization. </summary>
        internal SolutionConfigurationProperties()
        {
        }

        /// <summary> The resource provisioning state. </summary>
        public HybridConnectivityResourceProvisioningState? ProvisioningState { get; }
        /// <summary> The type of the solution. </summary>
        public string SolutionType { get; set; }
        /// <summary> Solution settings. </summary>
        public IDictionary<string, string> SolutionSettings { get; }
        /// <summary> The status of solution configurations. </summary>
        public SolutionConfigurationStatus? Status { get; }
        /// <summary> The detailed message of status details. </summary>
        public string StatusDetails { get; }
        /// <summary> The last time resources were inventoried. </summary>
        public DateTimeOffset? LastSyncOn { get; }
    }
}
