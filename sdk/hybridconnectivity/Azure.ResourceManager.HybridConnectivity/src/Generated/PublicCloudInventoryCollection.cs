// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.HybridConnectivity
{
    /// <summary>
    /// A class representing a collection of <see cref="PublicCloudInventoryResource"/> and their operations.
    /// Each <see cref="PublicCloudInventoryResource"/> in the collection will belong to the same instance of <see cref="PublicCloudConnectorSolutionConfigurationResource"/>.
    /// To get a <see cref="PublicCloudInventoryCollection"/> instance call the GetPublicCloudInventories method from an instance of <see cref="PublicCloudConnectorSolutionConfigurationResource"/>.
    /// </summary>
    public partial class PublicCloudInventoryCollection : ArmCollection, IEnumerable<PublicCloudInventoryResource>, IAsyncEnumerable<PublicCloudInventoryResource>
    {
        private readonly ClientDiagnostics _publicCloudInventoryInventoryClientDiagnostics;
        private readonly InventoryRestOperations _publicCloudInventoryInventoryRestClient;

        /// <summary> Initializes a new instance of the <see cref="PublicCloudInventoryCollection"/> class for mocking. </summary>
        protected PublicCloudInventoryCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PublicCloudInventoryCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal PublicCloudInventoryCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _publicCloudInventoryInventoryClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridConnectivity", PublicCloudInventoryResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PublicCloudInventoryResource.ResourceType, out string publicCloudInventoryInventoryApiVersion);
            _publicCloudInventoryInventoryRestClient = new InventoryRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, publicCloudInventoryInventoryApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != PublicCloudConnectorSolutionConfigurationResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, PublicCloudConnectorSolutionConfigurationResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a InventoryResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory/{inventoryId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InventoryResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudInventoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inventoryId"> Inventory resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inventoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inventoryId"/> is null. </exception>
        public virtual async Task<Response<PublicCloudInventoryResource>> GetAsync(string inventoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inventoryId, nameof(inventoryId));

            using var scope = _publicCloudInventoryInventoryClientDiagnostics.CreateScope("PublicCloudInventoryCollection.Get");
            scope.Start();
            try
            {
                var response = await _publicCloudInventoryInventoryRestClient.GetAsync(Id.Parent, Id.Name, inventoryId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PublicCloudInventoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a InventoryResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory/{inventoryId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InventoryResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudInventoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inventoryId"> Inventory resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inventoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inventoryId"/> is null. </exception>
        public virtual Response<PublicCloudInventoryResource> Get(string inventoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inventoryId, nameof(inventoryId));

            using var scope = _publicCloudInventoryInventoryClientDiagnostics.CreateScope("PublicCloudInventoryCollection.Get");
            scope.Start();
            try
            {
                var response = _publicCloudInventoryInventoryRestClient.Get(Id.Parent, Id.Name, inventoryId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PublicCloudInventoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List InventoryResource resources by SolutionConfiguration
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InventoryResource_ListBySolutionConfiguration</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudInventoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PublicCloudInventoryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PublicCloudInventoryResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _publicCloudInventoryInventoryRestClient.CreateListBySolutionConfigurationRequest(Id.Parent, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _publicCloudInventoryInventoryRestClient.CreateListBySolutionConfigurationNextPageRequest(nextLink, Id.Parent, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PublicCloudInventoryResource(Client, PublicCloudInventoryData.DeserializePublicCloudInventoryData(e)), _publicCloudInventoryInventoryClientDiagnostics, Pipeline, "PublicCloudInventoryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List InventoryResource resources by SolutionConfiguration
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InventoryResource_ListBySolutionConfiguration</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudInventoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PublicCloudInventoryResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PublicCloudInventoryResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _publicCloudInventoryInventoryRestClient.CreateListBySolutionConfigurationRequest(Id.Parent, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _publicCloudInventoryInventoryRestClient.CreateListBySolutionConfigurationNextPageRequest(nextLink, Id.Parent, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PublicCloudInventoryResource(Client, PublicCloudInventoryData.DeserializePublicCloudInventoryData(e)), _publicCloudInventoryInventoryClientDiagnostics, Pipeline, "PublicCloudInventoryCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory/{inventoryId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InventoryResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudInventoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inventoryId"> Inventory resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inventoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inventoryId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string inventoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inventoryId, nameof(inventoryId));

            using var scope = _publicCloudInventoryInventoryClientDiagnostics.CreateScope("PublicCloudInventoryCollection.Exists");
            scope.Start();
            try
            {
                var response = await _publicCloudInventoryInventoryRestClient.GetAsync(Id.Parent, Id.Name, inventoryId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory/{inventoryId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InventoryResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudInventoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inventoryId"> Inventory resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inventoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inventoryId"/> is null. </exception>
        public virtual Response<bool> Exists(string inventoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inventoryId, nameof(inventoryId));

            using var scope = _publicCloudInventoryInventoryClientDiagnostics.CreateScope("PublicCloudInventoryCollection.Exists");
            scope.Start();
            try
            {
                var response = _publicCloudInventoryInventoryRestClient.Get(Id.Parent, Id.Name, inventoryId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory/{inventoryId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InventoryResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudInventoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inventoryId"> Inventory resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inventoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inventoryId"/> is null. </exception>
        public virtual async Task<NullableResponse<PublicCloudInventoryResource>> GetIfExistsAsync(string inventoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inventoryId, nameof(inventoryId));

            using var scope = _publicCloudInventoryInventoryClientDiagnostics.CreateScope("PublicCloudInventoryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _publicCloudInventoryInventoryRestClient.GetAsync(Id.Parent, Id.Name, inventoryId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<PublicCloudInventoryResource>(response.GetRawResponse());
                return Response.FromValue(new PublicCloudInventoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.HybridConnectivity/solutionConfigurations/{solutionConfiguration}/inventory/{inventoryId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>InventoryResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudInventoryResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="inventoryId"> Inventory resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="inventoryId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="inventoryId"/> is null. </exception>
        public virtual NullableResponse<PublicCloudInventoryResource> GetIfExists(string inventoryId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(inventoryId, nameof(inventoryId));

            using var scope = _publicCloudInventoryInventoryClientDiagnostics.CreateScope("PublicCloudInventoryCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _publicCloudInventoryInventoryRestClient.Get(Id.Parent, Id.Name, inventoryId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<PublicCloudInventoryResource>(response.GetRawResponse());
                return Response.FromValue(new PublicCloudInventoryResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PublicCloudInventoryResource> IEnumerable<PublicCloudInventoryResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PublicCloudInventoryResource> IAsyncEnumerable<PublicCloudInventoryResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
