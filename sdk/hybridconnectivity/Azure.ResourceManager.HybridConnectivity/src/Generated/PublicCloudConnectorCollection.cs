// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.HybridConnectivity
{
    /// <summary>
    /// A class representing a collection of <see cref="PublicCloudConnectorResource"/> and their operations.
    /// Each <see cref="PublicCloudConnectorResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get a <see cref="PublicCloudConnectorCollection"/> instance call the GetPublicCloudConnectors method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class PublicCloudConnectorCollection : ArmCollection, IEnumerable<PublicCloudConnectorResource>, IAsyncEnumerable<PublicCloudConnectorResource>
    {
        private readonly ClientDiagnostics _publicCloudConnectorClientDiagnostics;
        private readonly PublicCloudConnectorsRestOperations _publicCloudConnectorRestClient;

        /// <summary> Initializes a new instance of the <see cref="PublicCloudConnectorCollection"/> class for mocking. </summary>
        protected PublicCloudConnectorCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PublicCloudConnectorCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal PublicCloudConnectorCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _publicCloudConnectorClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridConnectivity", PublicCloudConnectorResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PublicCloudConnectorResource.ResourceType, out string publicCloudConnectorApiVersion);
            _publicCloudConnectorRestClient = new PublicCloudConnectorsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, publicCloudConnectorApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Create a PublicCloudConnector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<PublicCloudConnectorResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string publicCloudConnector, PublicCloudConnectorData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicCloudConnector, nameof(publicCloudConnector));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _publicCloudConnectorClientDiagnostics.CreateScope("PublicCloudConnectorCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _publicCloudConnectorRestClient.CreateOrUpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, data, cancellationToken).ConfigureAwait(false);
                var operation = new HybridConnectivityArmOperation<PublicCloudConnectorResource>(new PublicCloudConnectorOperationSource(Client), _publicCloudConnectorClientDiagnostics, Pipeline, _publicCloudConnectorRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create a PublicCloudConnector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_CreateOrUpdate</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<PublicCloudConnectorResource> CreateOrUpdate(WaitUntil waitUntil, string publicCloudConnector, PublicCloudConnectorData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicCloudConnector, nameof(publicCloudConnector));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _publicCloudConnectorClientDiagnostics.CreateScope("PublicCloudConnectorCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _publicCloudConnectorRestClient.CreateOrUpdate(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, data, cancellationToken);
                var operation = new HybridConnectivityArmOperation<PublicCloudConnectorResource>(new PublicCloudConnectorOperationSource(Client), _publicCloudConnectorClientDiagnostics, Pipeline, _publicCloudConnectorRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, data).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a PublicCloudConnector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> is null. </exception>
        public virtual async Task<Response<PublicCloudConnectorResource>> GetAsync(string publicCloudConnector, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicCloudConnector, nameof(publicCloudConnector));

            using var scope = _publicCloudConnectorClientDiagnostics.CreateScope("PublicCloudConnectorCollection.Get");
            scope.Start();
            try
            {
                var response = await _publicCloudConnectorRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PublicCloudConnectorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a PublicCloudConnector
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> is null. </exception>
        public virtual Response<PublicCloudConnectorResource> Get(string publicCloudConnector, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicCloudConnector, nameof(publicCloudConnector));

            using var scope = _publicCloudConnectorClientDiagnostics.CreateScope("PublicCloudConnectorCollection.Get");
            scope.Start();
            try
            {
                var response = _publicCloudConnectorRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PublicCloudConnectorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List PublicCloudConnector resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PublicCloudConnectorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PublicCloudConnectorResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _publicCloudConnectorRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _publicCloudConnectorRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new PublicCloudConnectorResource(Client, PublicCloudConnectorData.DeserializePublicCloudConnectorData(e)), _publicCloudConnectorClientDiagnostics, Pipeline, "PublicCloudConnectorCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List PublicCloudConnector resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PublicCloudConnectorResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PublicCloudConnectorResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _publicCloudConnectorRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _publicCloudConnectorRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new PublicCloudConnectorResource(Client, PublicCloudConnectorData.DeserializePublicCloudConnectorData(e)), _publicCloudConnectorClientDiagnostics, Pipeline, "PublicCloudConnectorCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string publicCloudConnector, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicCloudConnector, nameof(publicCloudConnector));

            using var scope = _publicCloudConnectorClientDiagnostics.CreateScope("PublicCloudConnectorCollection.Exists");
            scope.Start();
            try
            {
                var response = await _publicCloudConnectorRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> is null. </exception>
        public virtual Response<bool> Exists(string publicCloudConnector, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicCloudConnector, nameof(publicCloudConnector));

            using var scope = _publicCloudConnectorClientDiagnostics.CreateScope("PublicCloudConnectorCollection.Exists");
            scope.Start();
            try
            {
                var response = _publicCloudConnectorRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> is null. </exception>
        public virtual async Task<NullableResponse<PublicCloudConnectorResource>> GetIfExistsAsync(string publicCloudConnector, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicCloudConnector, nameof(publicCloudConnector));

            using var scope = _publicCloudConnectorClientDiagnostics.CreateScope("PublicCloudConnectorCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _publicCloudConnectorRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<PublicCloudConnectorResource>(response.GetRawResponse());
                return Response.FromValue(new PublicCloudConnectorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{publicCloudConnector}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>PublicCloudConnectors_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="PublicCloudConnectorResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publicCloudConnector"> Represent public cloud connectors resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="publicCloudConnector"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="publicCloudConnector"/> is null. </exception>
        public virtual NullableResponse<PublicCloudConnectorResource> GetIfExists(string publicCloudConnector, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(publicCloudConnector, nameof(publicCloudConnector));

            using var scope = _publicCloudConnectorClientDiagnostics.CreateScope("PublicCloudConnectorCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _publicCloudConnectorRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, publicCloudConnector, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<PublicCloudConnectorResource>(response.GetRawResponse());
                return Response.FromValue(new PublicCloudConnectorResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PublicCloudConnectorResource> IEnumerable<PublicCloudConnectorResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PublicCloudConnectorResource> IAsyncEnumerable<PublicCloudConnectorResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
