// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.HybridConnectivity
{
    /// <summary>
    /// A class representing a collection of <see cref="HybridConnectivitySolutionTypeResource"/> and their operations.
    /// Each <see cref="HybridConnectivitySolutionTypeResource"/> in the collection will belong to the same instance of <see cref="ResourceGroupResource"/>.
    /// To get a <see cref="HybridConnectivitySolutionTypeCollection"/> instance call the GetHybridConnectivitySolutionTypes method from an instance of <see cref="ResourceGroupResource"/>.
    /// </summary>
    public partial class HybridConnectivitySolutionTypeCollection : ArmCollection, IEnumerable<HybridConnectivitySolutionTypeResource>, IAsyncEnumerable<HybridConnectivitySolutionTypeResource>
    {
        private readonly ClientDiagnostics _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics;
        private readonly SolutionTypesRestOperations _hybridConnectivitySolutionTypeSolutionTypesRestClient;

        /// <summary> Initializes a new instance of the <see cref="HybridConnectivitySolutionTypeCollection"/> class for mocking. </summary>
        protected HybridConnectivitySolutionTypeCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="HybridConnectivitySolutionTypeCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal HybridConnectivitySolutionTypeCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridConnectivity", HybridConnectivitySolutionTypeResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(HybridConnectivitySolutionTypeResource.ResourceType, out string hybridConnectivitySolutionTypeSolutionTypesApiVersion);
            _hybridConnectivitySolutionTypeSolutionTypesRestClient = new SolutionTypesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, hybridConnectivitySolutionTypeSolutionTypesApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a SolutionTypeResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes/{solutionType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionType"> Solution Type resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        public virtual async Task<Response<HybridConnectivitySolutionTypeResource>> GetAsync(string solutionType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionType, nameof(solutionType));

            using var scope = _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics.CreateScope("HybridConnectivitySolutionTypeCollection.Get");
            scope.Start();
            try
            {
                var response = await _hybridConnectivitySolutionTypeSolutionTypesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, solutionType, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridConnectivitySolutionTypeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a SolutionTypeResource
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes/{solutionType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionType"> Solution Type resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        public virtual Response<HybridConnectivitySolutionTypeResource> Get(string solutionType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionType, nameof(solutionType));

            using var scope = _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics.CreateScope("HybridConnectivitySolutionTypeCollection.Get");
            scope.Start();
            try
            {
                var response = _hybridConnectivitySolutionTypeSolutionTypesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, solutionType, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new HybridConnectivitySolutionTypeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List SolutionTypeResource resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HybridConnectivitySolutionTypeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HybridConnectivitySolutionTypeResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridConnectivitySolutionTypeSolutionTypesRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridConnectivitySolutionTypeSolutionTypesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new HybridConnectivitySolutionTypeResource(Client, HybridConnectivitySolutionTypeData.DeserializeHybridConnectivitySolutionTypeData(e)), _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics, Pipeline, "HybridConnectivitySolutionTypeCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List SolutionTypeResource resources by resource group
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_ListByResourceGroup</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HybridConnectivitySolutionTypeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HybridConnectivitySolutionTypeResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _hybridConnectivitySolutionTypeSolutionTypesRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _hybridConnectivitySolutionTypeSolutionTypesRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new HybridConnectivitySolutionTypeResource(Client, HybridConnectivitySolutionTypeData.DeserializeHybridConnectivitySolutionTypeData(e)), _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics, Pipeline, "HybridConnectivitySolutionTypeCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes/{solutionType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionType"> Solution Type resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string solutionType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionType, nameof(solutionType));

            using var scope = _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics.CreateScope("HybridConnectivitySolutionTypeCollection.Exists");
            scope.Start();
            try
            {
                var response = await _hybridConnectivitySolutionTypeSolutionTypesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, solutionType, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes/{solutionType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionType"> Solution Type resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        public virtual Response<bool> Exists(string solutionType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionType, nameof(solutionType));

            using var scope = _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics.CreateScope("HybridConnectivitySolutionTypeCollection.Exists");
            scope.Start();
            try
            {
                var response = _hybridConnectivitySolutionTypeSolutionTypesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, solutionType, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes/{solutionType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionType"> Solution Type resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        public virtual async Task<NullableResponse<HybridConnectivitySolutionTypeResource>> GetIfExistsAsync(string solutionType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionType, nameof(solutionType));

            using var scope = _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics.CreateScope("HybridConnectivitySolutionTypeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _hybridConnectivitySolutionTypeSolutionTypesRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, solutionType, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<HybridConnectivitySolutionTypeResource>(response.GetRawResponse());
                return Response.FromValue(new HybridConnectivitySolutionTypeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridConnectivity/solutionTypes/{solutionType}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>SolutionTypes_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-12-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HybridConnectivitySolutionTypeResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="solutionType"> Solution Type resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="solutionType"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="solutionType"/> is null. </exception>
        public virtual NullableResponse<HybridConnectivitySolutionTypeResource> GetIfExists(string solutionType, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(solutionType, nameof(solutionType));

            using var scope = _hybridConnectivitySolutionTypeSolutionTypesClientDiagnostics.CreateScope("HybridConnectivitySolutionTypeCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _hybridConnectivitySolutionTypeSolutionTypesRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, solutionType, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<HybridConnectivitySolutionTypeResource>(response.GetRawResponse());
                return Response.FromValue(new HybridConnectivitySolutionTypeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<HybridConnectivitySolutionTypeResource> IEnumerable<HybridConnectivitySolutionTypeResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<HybridConnectivitySolutionTypeResource> IAsyncEnumerable<HybridConnectivitySolutionTypeResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
