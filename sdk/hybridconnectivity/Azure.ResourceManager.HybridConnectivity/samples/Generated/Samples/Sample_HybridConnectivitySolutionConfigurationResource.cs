// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.HybridConnectivity.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.HybridConnectivity.Samples
{
    public partial class Sample_HybridConnectivitySolutionConfigurationResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_SolutionConfigurationsGet()
        {
            // Generated from example definition: specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/PublicCloud/stable/2024-12-01/examples/SolutionConfigurations_Get.json
            // this example is just showing the usage of "SolutionConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HybridConnectivitySolutionConfigurationResource created on azure
            // for more information of creating HybridConnectivitySolutionConfigurationResource, please refer to the document of HybridConnectivitySolutionConfigurationResource
            string resourceUri = "ymuj";
            string solutionConfiguration = "tks";
            ResourceIdentifier hybridConnectivitySolutionConfigurationResourceId = HybridConnectivitySolutionConfigurationResource.CreateResourceIdentifier(resourceUri, solutionConfiguration);
            HybridConnectivitySolutionConfigurationResource hybridConnectivitySolutionConfiguration = client.GetHybridConnectivitySolutionConfigurationResource(hybridConnectivitySolutionConfigurationResourceId);

            // invoke the operation
            HybridConnectivitySolutionConfigurationResource result = await hybridConnectivitySolutionConfiguration.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            HybridConnectivitySolutionConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_SolutionConfigurationsUpdate()
        {
            // Generated from example definition: specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/PublicCloud/stable/2024-12-01/examples/SolutionConfigurations_Update.json
            // this example is just showing the usage of "SolutionConfigurations_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HybridConnectivitySolutionConfigurationResource created on azure
            // for more information of creating HybridConnectivitySolutionConfigurationResource, please refer to the document of HybridConnectivitySolutionConfigurationResource
            string resourceUri = "ymuj";
            string solutionConfiguration = "dxt";
            ResourceIdentifier hybridConnectivitySolutionConfigurationResourceId = HybridConnectivitySolutionConfigurationResource.CreateResourceIdentifier(resourceUri, solutionConfiguration);
            HybridConnectivitySolutionConfigurationResource hybridConnectivitySolutionConfiguration = client.GetHybridConnectivitySolutionConfigurationResource(hybridConnectivitySolutionConfigurationResourceId);

            // invoke the operation
            HybridConnectivitySolutionConfigurationPatch patch = new HybridConnectivitySolutionConfigurationPatch()
            {
                Properties = new SolutionConfigurationPropertiesUpdate()
                {
                    SolutionType = "myzljlstvmgkp",
                    SolutionSettings =
{
},
                },
            };
            HybridConnectivitySolutionConfigurationResource result = await hybridConnectivitySolutionConfiguration.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            HybridConnectivitySolutionConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_SolutionConfigurationsDelete()
        {
            // Generated from example definition: specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/PublicCloud/stable/2024-12-01/examples/SolutionConfigurations_Delete.json
            // this example is just showing the usage of "SolutionConfigurations_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HybridConnectivitySolutionConfigurationResource created on azure
            // for more information of creating HybridConnectivitySolutionConfigurationResource, please refer to the document of HybridConnectivitySolutionConfigurationResource
            string resourceUri = "ymuj";
            string solutionConfiguration = "stu";
            ResourceIdentifier hybridConnectivitySolutionConfigurationResourceId = HybridConnectivitySolutionConfigurationResource.CreateResourceIdentifier(resourceUri, solutionConfiguration);
            HybridConnectivitySolutionConfigurationResource hybridConnectivitySolutionConfiguration = client.GetHybridConnectivitySolutionConfigurationResource(hybridConnectivitySolutionConfigurationResourceId);

            // invoke the operation
            await hybridConnectivitySolutionConfiguration.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task SyncNow_SolutionConfigurationsSyncNow()
        {
            // Generated from example definition: specification/hybridconnectivity/resource-manager/Microsoft.HybridConnectivity/PublicCloud/stable/2024-12-01/examples/SolutionConfigurations_SyncNow.json
            // this example is just showing the usage of "SolutionConfigurations_SyncNow" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HybridConnectivitySolutionConfigurationResource created on azure
            // for more information of creating HybridConnectivitySolutionConfigurationResource, please refer to the document of HybridConnectivitySolutionConfigurationResource
            string resourceUri = "ymuj";
            string solutionConfiguration = "tks";
            ResourceIdentifier hybridConnectivitySolutionConfigurationResourceId = HybridConnectivitySolutionConfigurationResource.CreateResourceIdentifier(resourceUri, solutionConfiguration);
            HybridConnectivitySolutionConfigurationResource hybridConnectivitySolutionConfiguration = client.GetHybridConnectivitySolutionConfigurationResource(hybridConnectivitySolutionConfigurationResourceId);

            // invoke the operation
            ArmOperation<HybridConnectivityOperationStatusResult> lro = await hybridConnectivitySolutionConfiguration.SyncNowAsync(WaitUntil.Completed);
            HybridConnectivityOperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
