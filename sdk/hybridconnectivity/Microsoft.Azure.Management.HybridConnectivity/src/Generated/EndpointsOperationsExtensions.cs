// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.HybridConnectivity
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for EndpointsOperations.
    /// </summary>
    public static partial class EndpointsOperationsExtensions
    {
            /// <summary>
            /// List of endpoints to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            public static IPage<EndpointResource> List(this IEndpointsOperations operations, string resourceUri)
            {
                return operations.ListAsync(resourceUri).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of endpoints to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EndpointResource>> ListAsync(this IEndpointsOperations operations, string resourceUri, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceUri, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the endpoint to the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            public static EndpointResource Get(this IEndpointsOperations operations, string resourceUri, string endpointName)
            {
                return operations.GetAsync(resourceUri, endpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the endpoint to the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndpointResource> GetAsync(this IEndpointsOperations operations, string resourceUri, string endpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceUri, endpointName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update the endpoint to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='endpointResource'>
            /// Endpoint details
            /// </param>
            public static EndpointResource CreateOrUpdate(this IEndpointsOperations operations, string resourceUri, string endpointName, EndpointResource endpointResource)
            {
                return operations.CreateOrUpdateAsync(resourceUri, endpointName, endpointResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update the endpoint to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='endpointResource'>
            /// Endpoint details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndpointResource> CreateOrUpdateAsync(this IEndpointsOperations operations, string resourceUri, string endpointName, EndpointResource endpointResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceUri, endpointName, endpointResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the endpoint to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='endpointResource'>
            /// Endpoint details
            /// </param>
            public static EndpointResource Update(this IEndpointsOperations operations, string resourceUri, string endpointName, EndpointResource endpointResource)
            {
                return operations.UpdateAsync(resourceUri, endpointName, endpointResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the endpoint to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='endpointResource'>
            /// Endpoint details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndpointResource> UpdateAsync(this IEndpointsOperations operations, string resourceUri, string endpointName, EndpointResource endpointResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceUri, endpointName, endpointResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the endpoint access to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            public static void Delete(this IEndpointsOperations operations, string resourceUri, string endpointName)
            {
                operations.DeleteAsync(resourceUri, endpointName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the endpoint access to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IEndpointsOperations operations, string resourceUri, string endpointName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceUri, endpointName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the endpoint access credentials to the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='expiresin'>
            /// The is how long the endpoint access token is valid (in seconds).
            /// </param>
            public static EndpointAccessResource ListCredentials(this IEndpointsOperations operations, string resourceUri, string endpointName, long? expiresin = 10800)
            {
                return operations.ListCredentialsAsync(resourceUri, endpointName, expiresin).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the endpoint access credentials to the resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceUri'>
            /// The fully qualified Azure Resource manager identifier of the resource to be
            /// connected.
            /// </param>
            /// <param name='endpointName'>
            /// The endpoint name.
            /// </param>
            /// <param name='expiresin'>
            /// The is how long the endpoint access token is valid (in seconds).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndpointAccessResource> ListCredentialsAsync(this IEndpointsOperations operations, string resourceUri, string endpointName, long? expiresin = 10800, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCredentialsWithHttpMessagesAsync(resourceUri, endpointName, expiresin, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of endpoints to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<EndpointResource> ListNext(this IEndpointsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of endpoints to the target resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<EndpointResource>> ListNextAsync(this IEndpointsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
