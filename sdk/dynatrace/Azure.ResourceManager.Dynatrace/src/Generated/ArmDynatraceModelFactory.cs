// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Dynatrace.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDynatraceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ConnectedResourcesCountResult"/>. </summary>
        /// <param name="connectedResourcesCount"> Count of the connected resources. </param>
        /// <returns> A new <see cref="Models.ConnectedResourcesCountResult"/> instance for mocking. </returns>
        public static ConnectedResourcesCountResult ConnectedResourcesCountResult(long? connectedResourcesCount = null)
        {
            return new ConnectedResourcesCountResult(connectedResourcesCount, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceSaaSResourceDetailsResult"/>. </summary>
        /// <param name="marketplaceSaaSResourceId"> Id of the Marketplace SaaS Resource. </param>
        /// <param name="planId"> Id of the plan. </param>
        /// <param name="marketplaceSubscriptionStatus"> Marketplace subscription status. </param>
        /// <param name="marketplaceSaaSResourceName"> Name of the Marketplace SaaS Resource. </param>
        /// <returns> A new <see cref="Models.MarketplaceSaaSResourceDetailsResult"/> instance for mocking. </returns>
        public static MarketplaceSaaSResourceDetailsResult MarketplaceSaaSResourceDetailsResult(string marketplaceSaaSResourceId = null, string planId = null, DynatraceMonitorMarketplaceSubscriptionStatus? marketplaceSubscriptionStatus = null, string marketplaceSaaSResourceName = null)
        {
            return new MarketplaceSaaSResourceDetailsResult(marketplaceSaaSResourceId, planId, marketplaceSubscriptionStatus, marketplaceSaaSResourceName, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Dynatrace.DynatraceMonitorData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="monitoringStatus"> Status of the monitor. </param>
        /// <param name="marketplaceSubscriptionStatus"> Marketplace subscription status. </param>
        /// <param name="marketplaceSaasAutoRenew"> Marketplace resource autorenew flag. </param>
        /// <param name="dynatraceEnvironmentProperties"> Properties of the Dynatrace environment. </param>
        /// <param name="userInfo"> User info. </param>
        /// <param name="planData"> Billing plan information. </param>
        /// <param name="liftrResourceCategory"> Liftr Resource category. </param>
        /// <param name="liftrResourcePreference"> The priority of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Dynatrace.DynatraceMonitorData"/> instance for mocking. </returns>
        public static DynatraceMonitorData DynatraceMonitorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, DynatraceMonitoringStatus? monitoringStatus = null, DynatraceMonitorMarketplaceSubscriptionStatus? marketplaceSubscriptionStatus = null, MarketplaceSaasAutoRenew? marketplaceSaasAutoRenew = null, DynatraceEnvironmentProperties dynatraceEnvironmentProperties = null, DynatraceMonitorUserInfo userInfo = null, DynatraceBillingPlanInfo planData = null, LiftrResourceCategory? liftrResourceCategory = null, int? liftrResourcePreference = null, DynatraceProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DynatraceMonitorData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                monitoringStatus,
                marketplaceSubscriptionStatus,
                marketplaceSaasAutoRenew,
                dynatraceEnvironmentProperties,
                userInfo,
                planData,
                liftrResourceCategory,
                liftrResourcePreference,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DynatraceSingleSignOnProperties"/>. </summary>
        /// <param name="singleSignOnState"> State of Single Sign On. </param>
        /// <param name="enterpriseAppId"> Version of the Dynatrace agent installed on the VM. </param>
        /// <param name="singleSignOnUri"> The login URL specific to this Dynatrace Environment. </param>
        /// <param name="aadDomains"> array of Aad(azure active directory) domains. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.DynatraceSingleSignOnProperties"/> instance for mocking. </returns>
        public static DynatraceSingleSignOnProperties DynatraceSingleSignOnProperties(DynatraceSingleSignOnState? singleSignOnState = null, Guid? enterpriseAppId = null, Uri singleSignOnUri = null, IEnumerable<string> aadDomains = null, DynatraceProvisioningState? provisioningState = null)
        {
            aadDomains ??= new List<string>();

            return new DynatraceSingleSignOnProperties(
                singleSignOnState,
                enterpriseAppId,
                singleSignOnUri,
                aadDomains?.ToList(),
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CreateResourceSupportedProperties"/>. </summary>
        /// <param name="name"> The ARM id of the subscription. </param>
        /// <param name="creationSupported"> Indicates if selected subscription supports Dynatrace resource creation, if not it is already being monitored for the selected organization via multi subscription feature. </param>
        /// <returns> A new <see cref="Models.CreateResourceSupportedProperties"/> instance for mocking. </returns>
        public static CreateResourceSupportedProperties CreateResourceSupportedProperties(string name = null, bool? creationSupported = null)
        {
            return new CreateResourceSupportedProperties(name, creationSupported, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MetricsStatusResult"/>. </summary>
        /// <param name="azureResourceIds"> Azure resource IDs. </param>
        /// <returns> A new <see cref="Models.MetricsStatusResult"/> instance for mocking. </returns>
        public static MetricsStatusResult MetricsStatusResult(IEnumerable<string> azureResourceIds = null)
        {
            azureResourceIds ??= new List<string>();

            return new MetricsStatusResult(azureResourceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DynatraceSsoDetailsResult"/>. </summary>
        /// <param name="isSsoEnabled"> Whether the SSO is enabled for this resource or not. </param>
        /// <param name="metadataUri"> URL for Azure AD metadata. </param>
        /// <param name="singleSignOnUri"> The login URL specific to this Dynatrace Environment. </param>
        /// <param name="aadDomains"> array of Aad(azure active directory) domains. </param>
        /// <param name="adminUsers"> Array of admin user emails. </param>
        /// <returns> A new <see cref="Models.DynatraceSsoDetailsResult"/> instance for mocking. </returns>
        public static DynatraceSsoDetailsResult DynatraceSsoDetailsResult(DynatraceSsoStatus? isSsoEnabled = null, Uri metadataUri = null, Uri singleSignOnUri = null, IEnumerable<string> aadDomains = null, IEnumerable<string> adminUsers = null)
        {
            aadDomains ??= new List<string>();
            adminUsers ??= new List<string>();

            return new DynatraceSsoDetailsResult(
                isSsoEnabled,
                metadataUri,
                singleSignOnUri,
                aadDomains?.ToList(),
                adminUsers?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DynatraceVmExtensionPayload"/>. </summary>
        /// <param name="ingestionKey"> Ingestion key of the environment. </param>
        /// <param name="environmentId"> Id of the environment created. </param>
        /// <returns> A new <see cref="Models.DynatraceVmExtensionPayload"/> instance for mocking. </returns>
        public static DynatraceVmExtensionPayload DynatraceVmExtensionPayload(string ingestionKey = null, string environmentId = null)
        {
            return new DynatraceVmExtensionPayload(ingestionKey, environmentId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DynatraceOneAgentEnabledAppServiceInfo"/>. </summary>
        /// <param name="resourceId"> App service resource ID. </param>
        /// <param name="version"> Version of the Dynatrace agent installed on the App Service. </param>
        /// <param name="monitoringType"> The monitoring mode of OneAgent. </param>
        /// <param name="autoUpdateSetting"> Update settings of OneAgent. </param>
        /// <param name="updateStatus"> The current update status of OneAgent. </param>
        /// <param name="availabilityState"> The availability state of OneAgent. </param>
        /// <param name="logModule"> Tells whether log modules are enabled or not. </param>
        /// <param name="hostGroup"> The name of the host group. </param>
        /// <param name="hostName"> The name of the host. </param>
        /// <returns> A new <see cref="Models.DynatraceOneAgentEnabledAppServiceInfo"/> instance for mocking. </returns>
        public static DynatraceOneAgentEnabledAppServiceInfo DynatraceOneAgentEnabledAppServiceInfo(ResourceIdentifier resourceId = null, string version = null, DynatraceOneAgentMonitoringType? monitoringType = null, DynatraceOneAgentAutoUpdateSetting? autoUpdateSetting = null, DynatraceOneAgentUpdateStatus? updateStatus = null, DynatraceOneAgentAvailabilityState? availabilityState = null, DynatraceLogModuleState? logModule = null, string hostGroup = null, string hostName = null)
        {
            return new DynatraceOneAgentEnabledAppServiceInfo(
                resourceId,
                version,
                monitoringType,
                autoUpdateSetting,
                updateStatus,
                availabilityState,
                logModule,
                hostGroup,
                hostName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DynatraceMonitorVmInfo"/>. </summary>
        /// <param name="resourceId"> Azure VM resource ID. </param>
        /// <param name="version"> Version of the Dynatrace agent installed on the VM. </param>
        /// <param name="monitoringType"> The monitoring mode of OneAgent. </param>
        /// <param name="autoUpdateSetting"> Update settings of OneAgent. </param>
        /// <param name="updateStatus"> The current update status of OneAgent. </param>
        /// <param name="availabilityState"> The availability state of OneAgent. </param>
        /// <param name="logModule"> Tells whether log modules are enabled or not. </param>
        /// <param name="hostGroup"> The name of the host group. </param>
        /// <param name="hostName"> The name of the host. </param>
        /// <returns> A new <see cref="Models.DynatraceMonitorVmInfo"/> instance for mocking. </returns>
        public static DynatraceMonitorVmInfo DynatraceMonitorVmInfo(ResourceIdentifier resourceId = null, string version = null, DynatraceOneAgentMonitoringType? monitoringType = null, DynatraceOneAgentAutoUpdateSetting? autoUpdateSetting = null, DynatraceOneAgentUpdateStatus? updateStatus = null, DynatraceOneAgentAvailabilityState? availabilityState = null, DynatraceLogModuleState? logModule = null, string hostGroup = null, string hostName = null)
        {
            return new DynatraceMonitorVmInfo(
                resourceId,
                version,
                monitoringType,
                autoUpdateSetting,
                updateStatus,
                availabilityState,
                logModule,
                hostGroup,
                hostName,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LinkableEnvironmentResult"/>. </summary>
        /// <param name="environmentId"> environment id for which user is an admin. </param>
        /// <param name="environmentName"> Name of the environment. </param>
        /// <param name="planData"> Billing plan information. </param>
        /// <returns> A new <see cref="Models.LinkableEnvironmentResult"/> instance for mocking. </returns>
        public static LinkableEnvironmentResult LinkableEnvironmentResult(string environmentId = null, string environmentName = null, DynatraceBillingPlanInfo planData = null)
        {
            return new LinkableEnvironmentResult(environmentId, environmentName, planData, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DynatraceMonitoredResourceDetails"/>. </summary>
        /// <param name="id"> The ARM id of the resource. </param>
        /// <param name="sendingMetricsStatus"> Flag indicating if resource is sending metrics to Dynatrace. </param>
        /// <param name="reasonForMetricsStatus"> Reason for why the resource is sending metrics (or why it is not sending). </param>
        /// <param name="sendingLogsStatus"> Flag indicating if resource is sending logs to Dynatrace. </param>
        /// <param name="reasonForLogsStatus"> Reason for why the resource is sending logs (or why it is not sending). </param>
        /// <returns> A new <see cref="Models.DynatraceMonitoredResourceDetails"/> instance for mocking. </returns>
        public static DynatraceMonitoredResourceDetails DynatraceMonitoredResourceDetails(ResourceIdentifier id = null, MetricsSendingStatus? sendingMetricsStatus = null, string reasonForMetricsStatus = null, LogsSendingStatus? sendingLogsStatus = null, string reasonForLogsStatus = null)
        {
            return new DynatraceMonitoredResourceDetails(
                id,
                sendingMetricsStatus,
                reasonForMetricsStatus,
                sendingLogsStatus,
                reasonForLogsStatus,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Dynatrace.MonitoredSubscriptionPropertyData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The request to update subscriptions needed to be monitored by the Dynatrace monitor resource. </param>
        /// <returns> A new <see cref="Dynatrace.MonitoredSubscriptionPropertyData"/> instance for mocking. </returns>
        public static MonitoredSubscriptionPropertyData MonitoredSubscriptionPropertyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SubscriptionList properties = null)
        {
            return new MonitoredSubscriptionPropertyData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SubscriptionList"/>. </summary>
        /// <param name="operation"> The operation for the patch on the resource. </param>
        /// <param name="monitoredSubscriptionList"> List of subscriptions and the state of the monitoring. </param>
        /// <param name="provisioningState"> Provisioning State of the resource. </param>
        /// <returns> A new <see cref="Models.SubscriptionList"/> instance for mocking. </returns>
        public static SubscriptionList SubscriptionList(SubscriptionListOperation? operation = null, IEnumerable<MonitoredSubscription> monitoredSubscriptionList = null, DynatraceProvisioningState? provisioningState = null)
        {
            monitoredSubscriptionList ??= new List<MonitoredSubscription>();

            return new SubscriptionList(operation, monitoredSubscriptionList?.ToList(), provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MonitoringTagRulesProperties"/>. </summary>
        /// <param name="logRules"> Set of rules for sending logs for the Monitor resource. </param>
        /// <param name="metricRules"> Set of rules for sending metrics for the Monitor resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.MonitoringTagRulesProperties"/> instance for mocking. </returns>
        public static MonitoringTagRulesProperties MonitoringTagRulesProperties(DynatraceMonitorResourceLogRules logRules = null, DynatraceMonitorResourceMetricRules metricRules = null, DynatraceProvisioningState? provisioningState = null)
        {
            return new MonitoringTagRulesProperties(logRules, metricRules, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Dynatrace.DynatraceSingleSignOnData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="singleSignOnState"> State of Single Sign On. </param>
        /// <param name="enterpriseAppId"> Version of the Dynatrace agent installed on the VM. </param>
        /// <param name="singleSignOnUri"> The login URL specific to this Dynatrace Environment. </param>
        /// <param name="aadDomains"> array of Aad(azure active directory) domains. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Dynatrace.DynatraceSingleSignOnData"/> instance for mocking. </returns>
        public static DynatraceSingleSignOnData DynatraceSingleSignOnData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DynatraceSingleSignOnState? singleSignOnState = null, Guid? enterpriseAppId = null, Uri singleSignOnUri = null, IEnumerable<string> aadDomains = null, DynatraceProvisioningState? provisioningState = null)
        {
            aadDomains ??= new List<string>();

            return new DynatraceSingleSignOnData(
                id,
                name,
                resourceType,
                systemData,
                singleSignOnState,
                enterpriseAppId,
                singleSignOnUri,
                aadDomains?.ToList(),
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Dynatrace.DynatraceTagRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="logRules"> Set of rules for sending logs for the Monitor resource. </param>
        /// <param name="metricRules"> Set of rules for sending metrics for the Monitor resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Dynatrace.DynatraceTagRuleData"/> instance for mocking. </returns>
        public static DynatraceTagRuleData DynatraceTagRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DynatraceMonitorResourceLogRules logRules = null, DynatraceMonitorResourceMetricRules metricRules = null, DynatraceProvisioningState? provisioningState = null)
        {
            return new DynatraceTagRuleData(
                id,
                name,
                resourceType,
                systemData,
                logRules,
                metricRules,
                provisioningState,
                serializedAdditionalRawData: null);
        }
    }
}
