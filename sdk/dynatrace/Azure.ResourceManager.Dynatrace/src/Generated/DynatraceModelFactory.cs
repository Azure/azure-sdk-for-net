// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Dynatrace;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Dynatrace.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class DynatraceModelFactory
    {
        /// <summary> Initializes a new instance of DynatraceAccountCredentialsInfo. </summary>
        /// <param name="accountId"> Account Id of the account this environment is linked to. </param>
        /// <param name="apiKey"> API Key of the user account. </param>
        /// <param name="regionId"> Region in which the account is created. </param>
        /// <returns> A new <see cref="Models.DynatraceAccountCredentialsInfo"/> instance for mocking. </returns>
        public static DynatraceAccountCredentialsInfo DynatraceAccountCredentialsInfo(string accountId = null, string apiKey = null, string regionId = null)
        {
            return new DynatraceAccountCredentialsInfo(accountId, apiKey, regionId);
        }

        /// <summary> Initializes a new instance of DynatraceMonitoredResourceDetails. </summary>
        /// <param name="id"> The ARM id of the resource. </param>
        /// <param name="sendingMetricsStatus"> Flag indicating if resource is sending metrics to Dynatrace. </param>
        /// <param name="reasonForMetricsStatus"> Reason for why the resource is sending metrics (or why it is not sending). </param>
        /// <param name="sendingLogsStatus"> Flag indicating if resource is sending logs to Dynatrace. </param>
        /// <param name="reasonForLogsStatus"> Reason for why the resource is sending logs (or why it is not sending). </param>
        /// <returns> A new <see cref="Models.DynatraceMonitoredResourceDetails"/> instance for mocking. </returns>
        public static DynatraceMonitoredResourceDetails DynatraceMonitoredResourceDetails(ResourceIdentifier id = null, MetricsSendingStatus? sendingMetricsStatus = null, string reasonForMetricsStatus = null, LogsSendingStatus? sendingLogsStatus = null, string reasonForLogsStatus = null)
        {
            return new DynatraceMonitoredResourceDetails(id, sendingMetricsStatus, reasonForMetricsStatus, sendingLogsStatus, reasonForLogsStatus);
        }

        /// <summary> Initializes a new instance of DynatraceVmExtensionPayload. </summary>
        /// <param name="ingestionKey"> Ingestion key of the environment. </param>
        /// <param name="environmentId"> Id of the environment created. </param>
        /// <returns> A new <see cref="Models.DynatraceVmExtensionPayload"/> instance for mocking. </returns>
        public static DynatraceVmExtensionPayload DynatraceVmExtensionPayload(string ingestionKey = null, string environmentId = null)
        {
            return new DynatraceVmExtensionPayload(ingestionKey, environmentId);
        }

        /// <summary> Initializes a new instance of DynatraceMonitorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="monitoringStatus"> Status of the monitor. </param>
        /// <param name="marketplaceSubscriptionStatus"> Marketplace subscription status. </param>
        /// <param name="dynatraceEnvironmentProperties"> Properties of the Dynatrace environment. </param>
        /// <param name="userInfo"> User info. </param>
        /// <param name="planData"> Billing plan information. </param>
        /// <param name="liftrResourceCategory"> Liftr Resource category. </param>
        /// <param name="liftrResourcePreference"> The priority of the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Dynatrace.DynatraceMonitorData"/> instance for mocking. </returns>
        public static DynatraceMonitorData DynatraceMonitorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, DynatraceMonitoringStatus? monitoringStatus = null, DynatraceMonitorMarketplaceSubscriptionStatus? marketplaceSubscriptionStatus = null, DynatraceEnvironmentProperties dynatraceEnvironmentProperties = null, DynatraceMonitorUserInfo userInfo = null, DynatraceBillingPlanInfo planData = null, LiftrResourceCategory? liftrResourceCategory = null, int? liftrResourcePreference = null, DynatraceProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DynatraceMonitorData(id, name, resourceType, systemData, tags, location, identity, monitoringStatus, marketplaceSubscriptionStatus, dynatraceEnvironmentProperties, userInfo, planData, liftrResourceCategory, liftrResourcePreference, provisioningState);
        }

        /// <summary> Initializes a new instance of DynatraceEnvironmentProperties. </summary>
        /// <param name="userId"> User id. </param>
        /// <param name="accountInfo"> Dynatrace Account Information. </param>
        /// <param name="environmentInfo"> Dynatrace Environment Information. </param>
        /// <param name="singleSignOnProperties"> The details of a Dynatrace single sign-on. </param>
        /// <returns> A new <see cref="Models.DynatraceEnvironmentProperties"/> instance for mocking. </returns>
        public static DynatraceEnvironmentProperties DynatraceEnvironmentProperties(string userId = null, DynatraceAccountInfo accountInfo = null, DynatraceEnvironmentInfo environmentInfo = null, DynatraceSingleSignOnProperties singleSignOnProperties = null)
        {
            return new DynatraceEnvironmentProperties(userId, accountInfo, environmentInfo, singleSignOnProperties);
        }

        /// <summary> Initializes a new instance of DynatraceAccountInfo. </summary>
        /// <param name="accountId"> Account Id of the account this environment is linked to. </param>
        /// <param name="regionId"> Region in which the account is created. </param>
        /// <returns> A new <see cref="Models.DynatraceAccountInfo"/> instance for mocking. </returns>
        public static DynatraceAccountInfo DynatraceAccountInfo(string accountId = null, string regionId = null)
        {
            return new DynatraceAccountInfo(accountId, regionId);
        }

        /// <summary> Initializes a new instance of DynatraceEnvironmentInfo. </summary>
        /// <param name="environmentId"> Id of the environment created. </param>
        /// <param name="ingestionKey"> Ingestion key of the environment. </param>
        /// <param name="logsIngestionEndpoint"> Ingestion endpoint used for sending logs. </param>
        /// <param name="landingUri"> Landing URL for Dynatrace environment. </param>
        /// <returns> A new <see cref="Models.DynatraceEnvironmentInfo"/> instance for mocking. </returns>
        public static DynatraceEnvironmentInfo DynatraceEnvironmentInfo(string environmentId = null, string ingestionKey = null, Uri logsIngestionEndpoint = null, Uri landingUri = null)
        {
            return new DynatraceEnvironmentInfo(environmentId, ingestionKey, logsIngestionEndpoint, landingUri);
        }

        /// <summary> Initializes a new instance of DynatraceSingleSignOnProperties. </summary>
        /// <param name="singleSignOnState"> State of Single Sign On. </param>
        /// <param name="enterpriseAppId"> Version of the Dynatrace agent installed on the VM. </param>
        /// <param name="singleSignOnUri"> The login URL specific to this Dynatrace Environment. </param>
        /// <param name="aadDomains"> array of Aad(azure active directory) domains. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Models.DynatraceSingleSignOnProperties"/> instance for mocking. </returns>
        public static DynatraceSingleSignOnProperties DynatraceSingleSignOnProperties(DynatraceSingleSignOnState? singleSignOnState = null, Guid? enterpriseAppId = null, Uri singleSignOnUri = null, IEnumerable<string> aadDomains = null, DynatraceProvisioningState? provisioningState = null)
        {
            aadDomains ??= new List<string>();

            return new DynatraceSingleSignOnProperties(singleSignOnState, enterpriseAppId, singleSignOnUri, aadDomains?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of DynatraceMonitorUserInfo. </summary>
        /// <param name="firstName"> First Name of the user. </param>
        /// <param name="lastName"> Last Name of the user. </param>
        /// <param name="emailAddress"> Email of the user used by Dynatrace for contacting them if needed. </param>
        /// <param name="phoneNumber"> Phone number of the user used by Dynatrace for contacting them if needed. </param>
        /// <param name="country"> Country of the user. </param>
        /// <returns> A new <see cref="Models.DynatraceMonitorUserInfo"/> instance for mocking. </returns>
        public static DynatraceMonitorUserInfo DynatraceMonitorUserInfo(string firstName = null, string lastName = null, string emailAddress = null, string phoneNumber = null, string country = null)
        {
            return new DynatraceMonitorUserInfo(firstName, lastName, emailAddress, phoneNumber, country);
        }

        /// <summary> Initializes a new instance of DynatraceBillingPlanInfo. </summary>
        /// <param name="usageType"> different usage type like PAYG/COMMITTED. this could be enum. </param>
        /// <param name="billingCycle"> different billing cycles like MONTHLY/WEEKLY. this could be enum. </param>
        /// <param name="planDetails"> plan id as published by Dynatrace. </param>
        /// <param name="effectiveOn"> date when plan was applied. </param>
        /// <returns> A new <see cref="Models.DynatraceBillingPlanInfo"/> instance for mocking. </returns>
        public static DynatraceBillingPlanInfo DynatraceBillingPlanInfo(string usageType = null, string billingCycle = null, string planDetails = null, DateTimeOffset? effectiveOn = null)
        {
            return new DynatraceBillingPlanInfo(usageType, billingCycle, planDetails, effectiveOn);
        }

        /// <summary> Initializes a new instance of DynatraceTagRuleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="logRules"> Set of rules for sending logs for the Monitor resource. </param>
        /// <param name="metricRulesFilteringTags"> Set of rules for sending metrics for the Monitor resource. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Dynatrace.DynatraceTagRuleData"/> instance for mocking. </returns>
        public static DynatraceTagRuleData DynatraceTagRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DynatraceMonitorResourceLogRules logRules = null, IEnumerable<DynatraceMonitorResourceFilteringTag> metricRulesFilteringTags = null, DynatraceProvisioningState? provisioningState = null)
        {
            metricRulesFilteringTags ??= new List<DynatraceMonitorResourceFilteringTag>();

            return new DynatraceTagRuleData(id, name, resourceType, systemData, logRules, metricRulesFilteringTags != null ? new DynatraceMonitorResourceMetricRules(metricRulesFilteringTags?.ToList()) : null, provisioningState);
        }

        /// <summary> Initializes a new instance of DynatraceMonitorResourceLogRules. </summary>
        /// <param name="sendAadLogs"> Flag specifying if AAD logs should be sent for the Monitor resource. </param>
        /// <param name="sendSubscriptionLogs"> Flag specifying if subscription logs should be sent for the Monitor resource. </param>
        /// <param name="sendActivityLogs"> Flag specifying if activity logs from Azure resources should be sent for the Monitor resource. </param>
        /// <param name="filteringTags">
        /// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured.
        /// If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
        /// </param>
        /// <returns> A new <see cref="Models.DynatraceMonitorResourceLogRules"/> instance for mocking. </returns>
        public static DynatraceMonitorResourceLogRules DynatraceMonitorResourceLogRules(AadLogsSendingStatus? sendAadLogs = null, SubscriptionLogsSendingStatus? sendSubscriptionLogs = null, ActivityLogsSendingStatus? sendActivityLogs = null, IEnumerable<DynatraceMonitorResourceFilteringTag> filteringTags = null)
        {
            filteringTags ??= new List<DynatraceMonitorResourceFilteringTag>();

            return new DynatraceMonitorResourceLogRules(sendAadLogs, sendSubscriptionLogs, sendActivityLogs, filteringTags?.ToList());
        }

        /// <summary> Initializes a new instance of DynatraceMonitorResourceFilteringTag. </summary>
        /// <param name="name"> The name (also known as the key) of the tag. </param>
        /// <param name="value"> The value of the tag. </param>
        /// <param name="action"> Valid actions for a filtering tag. Exclusion takes priority over inclusion. </param>
        /// <returns> A new <see cref="Models.DynatraceMonitorResourceFilteringTag"/> instance for mocking. </returns>
        public static DynatraceMonitorResourceFilteringTag DynatraceMonitorResourceFilteringTag(string name = null, string value = null, DynatraceMonitorResourceTagAction? action = null)
        {
            return new DynatraceMonitorResourceFilteringTag(name, value, action);
        }

        /// <summary> Initializes a new instance of DynatraceSingleSignOnData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="singleSignOnState"> State of Single Sign On. </param>
        /// <param name="enterpriseAppId"> Version of the Dynatrace agent installed on the VM. </param>
        /// <param name="singleSignOnUri"> The login URL specific to this Dynatrace Environment. </param>
        /// <param name="aadDomains"> array of Aad(azure active directory) domains. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="Dynatrace.DynatraceSingleSignOnData"/> instance for mocking. </returns>
        public static DynatraceSingleSignOnData DynatraceSingleSignOnData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DynatraceSingleSignOnState? singleSignOnState = null, Guid? enterpriseAppId = null, Uri singleSignOnUri = null, IEnumerable<string> aadDomains = null, DynatraceProvisioningState? provisioningState = null)
        {
            aadDomains ??= new List<string>();

            return new DynatraceSingleSignOnData(id, name, resourceType, systemData, singleSignOnState, enterpriseAppId, singleSignOnUri, aadDomains?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of DynatraceMonitorVmInfo. </summary>
        /// <param name="resourceId"> Azure VM resource ID. </param>
        /// <param name="version"> Version of the Dynatrace agent installed on the VM. </param>
        /// <param name="monitoringType"> The monitoring mode of OneAgent. </param>
        /// <param name="autoUpdateSetting"> Update settings of OneAgent. </param>
        /// <param name="updateStatus"> The current update status of OneAgent. </param>
        /// <param name="availabilityState"> The availability state of OneAgent. </param>
        /// <param name="logModule"> Tells whether log modules are enabled or not. </param>
        /// <param name="hostGroup"> The name of the host group. </param>
        /// <param name="hostName"> The name of the host. </param>
        /// <returns> A new <see cref="Models.DynatraceMonitorVmInfo"/> instance for mocking. </returns>
        public static DynatraceMonitorVmInfo DynatraceMonitorVmInfo(ResourceIdentifier resourceId = null, string version = null, DynatraceOneAgentMonitoringType? monitoringType = null, DynatraceOneAgentAutoUpdateSetting? autoUpdateSetting = null, DynatraceOneAgentUpdateStatus? updateStatus = null, DynatraceOneAgentAvailabilityState? availabilityState = null, DynatraceLogModuleState? logModule = null, string hostGroup = null, string hostName = null)
        {
            return new DynatraceMonitorVmInfo(resourceId, version, monitoringType, autoUpdateSetting, updateStatus, availabilityState, logModule, hostGroup, hostName);
        }

        /// <summary> Initializes a new instance of DynatraceOneAgentEnabledAppServiceInfo. </summary>
        /// <param name="resourceId"> App service resource ID. </param>
        /// <param name="version"> Version of the Dynatrace agent installed on the App Service. </param>
        /// <param name="monitoringType"> The monitoring mode of OneAgent. </param>
        /// <param name="autoUpdateSetting"> Update settings of OneAgent. </param>
        /// <param name="updateStatus"> The current update status of OneAgent. </param>
        /// <param name="availabilityState"> The availability state of OneAgent. </param>
        /// <param name="logModule"> Tells whether log modules are enabled or not. </param>
        /// <param name="hostGroup"> The name of the host group. </param>
        /// <param name="hostName"> The name of the host. </param>
        /// <returns> A new <see cref="Models.DynatraceOneAgentEnabledAppServiceInfo"/> instance for mocking. </returns>
        public static DynatraceOneAgentEnabledAppServiceInfo DynatraceOneAgentEnabledAppServiceInfo(ResourceIdentifier resourceId = null, string version = null, DynatraceOneAgentMonitoringType? monitoringType = null, DynatraceOneAgentAutoUpdateSetting? autoUpdateSetting = null, DynatraceOneAgentUpdateStatus? updateStatus = null, DynatraceOneAgentAvailabilityState? availabilityState = null, DynatraceLogModuleState? logModule = null, string hostGroup = null, string hostName = null)
        {
            return new DynatraceOneAgentEnabledAppServiceInfo(resourceId, version, monitoringType, autoUpdateSetting, updateStatus, availabilityState, logModule, hostGroup, hostName);
        }

        /// <summary> Initializes a new instance of DynatraceSsoDetailsResult. </summary>
        /// <param name="isSsoEnabled"> Whether the SSO is enabled for this resource or not. </param>
        /// <param name="metadataUri"> URL for Azure AD metadata. </param>
        /// <param name="singleSignOnUri"> The login URL specific to this Dynatrace Environment. </param>
        /// <param name="aadDomains"> array of Aad(azure active directory) domains. </param>
        /// <param name="adminUsers"> Array of admin user emails. </param>
        /// <returns> A new <see cref="Models.DynatraceSsoDetailsResult"/> instance for mocking. </returns>
        public static DynatraceSsoDetailsResult DynatraceSsoDetailsResult(DynatraceSsoStatus? isSsoEnabled = null, Uri metadataUri = null, Uri singleSignOnUri = null, IEnumerable<string> aadDomains = null, IEnumerable<string> adminUsers = null)
        {
            aadDomains ??= new List<string>();
            adminUsers ??= new List<string>();

            return new DynatraceSsoDetailsResult(isSsoEnabled, metadataUri, singleSignOnUri, aadDomains?.ToList(), adminUsers?.ToList());
        }

        /// <summary> Initializes a new instance of LinkableEnvironmentResult. </summary>
        /// <param name="environmentId"> environment id for which user is an admin. </param>
        /// <param name="environmentName"> Name of the environment. </param>
        /// <param name="planData"> Billing plan information. </param>
        /// <returns> A new <see cref="Models.LinkableEnvironmentResult"/> instance for mocking. </returns>
        public static LinkableEnvironmentResult LinkableEnvironmentResult(string environmentId = null, string environmentName = null, DynatraceBillingPlanInfo planData = null)
        {
            return new LinkableEnvironmentResult(environmentId, environmentName, planData);
        }
    }
}
