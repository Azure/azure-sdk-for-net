// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Dynatrace.Models
{
    /// <summary> The availability state of OneAgent. </summary>
    public readonly partial struct AvailabilityState : IEquatable<AvailabilityState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AvailabilityState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AvailabilityState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CrashedValue = "CRASHED";
        private const string LostValue = "LOST";
        private const string MonitoredValue = "MONITORED";
        private const string PreMonitoredValue = "PRE_MONITORED";
        private const string ShutdownValue = "SHUTDOWN";
        private const string UnexpectedShutdownValue = "UNEXPECTED_SHUTDOWN";
        private const string UnknownValue = "UNKNOWN";
        private const string UnmonitoredValue = "UNMONITORED";

        /// <summary> CRASHED. </summary>
        public static AvailabilityState Crashed { get; } = new AvailabilityState(CrashedValue);
        /// <summary> LOST. </summary>
        public static AvailabilityState Lost { get; } = new AvailabilityState(LostValue);
        /// <summary> MONITORED. </summary>
        public static AvailabilityState Monitored { get; } = new AvailabilityState(MonitoredValue);
        /// <summary> PRE_MONITORED. </summary>
        public static AvailabilityState PreMonitored { get; } = new AvailabilityState(PreMonitoredValue);
        /// <summary> SHUTDOWN. </summary>
        public static AvailabilityState Shutdown { get; } = new AvailabilityState(ShutdownValue);
        /// <summary> UNEXPECTED_SHUTDOWN. </summary>
        public static AvailabilityState UnexpectedShutdown { get; } = new AvailabilityState(UnexpectedShutdownValue);
        /// <summary> UNKNOWN. </summary>
        public static AvailabilityState Unknown { get; } = new AvailabilityState(UnknownValue);
        /// <summary> UNMONITORED. </summary>
        public static AvailabilityState Unmonitored { get; } = new AvailabilityState(UnmonitoredValue);
        /// <summary> Determines if two <see cref="AvailabilityState"/> values are the same. </summary>
        public static bool operator ==(AvailabilityState left, AvailabilityState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AvailabilityState"/> values are not the same. </summary>
        public static bool operator !=(AvailabilityState left, AvailabilityState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AvailabilityState"/>. </summary>
        public static implicit operator AvailabilityState(string value) => new AvailabilityState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AvailabilityState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AvailabilityState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
