// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Dynatrace.Models
{
    /// <summary> The operation for the patch on the resource. </summary>
    public readonly partial struct SubscriptionListOperation : IEquatable<SubscriptionListOperation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SubscriptionListOperation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SubscriptionListOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddBeginValue = "AddBegin";
        private const string AddCompleteValue = "AddComplete";
        private const string DeleteBeginValue = "DeleteBegin";
        private const string DeleteCompleteValue = "DeleteComplete";
        private const string ActiveValue = "Active";

        /// <summary> AddBegin. </summary>
        public static SubscriptionListOperation AddBegin { get; } = new SubscriptionListOperation(AddBeginValue);
        /// <summary> AddComplete. </summary>
        public static SubscriptionListOperation AddComplete { get; } = new SubscriptionListOperation(AddCompleteValue);
        /// <summary> DeleteBegin. </summary>
        public static SubscriptionListOperation DeleteBegin { get; } = new SubscriptionListOperation(DeleteBeginValue);
        /// <summary> DeleteComplete. </summary>
        public static SubscriptionListOperation DeleteComplete { get; } = new SubscriptionListOperation(DeleteCompleteValue);
        /// <summary> Active. </summary>
        public static SubscriptionListOperation Active { get; } = new SubscriptionListOperation(ActiveValue);
        /// <summary> Determines if two <see cref="SubscriptionListOperation"/> values are the same. </summary>
        public static bool operator ==(SubscriptionListOperation left, SubscriptionListOperation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SubscriptionListOperation"/> values are not the same. </summary>
        public static bool operator !=(SubscriptionListOperation left, SubscriptionListOperation right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="SubscriptionListOperation"/>. </summary>
        public static implicit operator SubscriptionListOperation(string value) => new SubscriptionListOperation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SubscriptionListOperation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SubscriptionListOperation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
