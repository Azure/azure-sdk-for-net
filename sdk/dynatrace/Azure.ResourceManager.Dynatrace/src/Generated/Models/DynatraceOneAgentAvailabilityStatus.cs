// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Dynatrace.Models
{
    /// <summary> The availability state of OneAgent. </summary>
    public readonly partial struct DynatraceOneAgentAvailabilityStatus : IEquatable<DynatraceOneAgentAvailabilityStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DynatraceOneAgentAvailabilityStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DynatraceOneAgentAvailabilityStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CrashedValue = "CRASHED";
        private const string LostValue = "LOST";
        private const string MonitoredValue = "MONITORED";
        private const string PreMonitoredValue = "PRE_MONITORED";
        private const string ShutdownValue = "SHUTDOWN";
        private const string UnexpectedShutdownValue = "UNEXPECTED_SHUTDOWN";
        private const string UnknownValue = "UNKNOWN";
        private const string UnmonitoredValue = "UNMONITORED";

        /// <summary> CRASHED. </summary>
        public static DynatraceOneAgentAvailabilityStatus Crashed { get; } = new DynatraceOneAgentAvailabilityStatus(CrashedValue);
        /// <summary> LOST. </summary>
        public static DynatraceOneAgentAvailabilityStatus Lost { get; } = new DynatraceOneAgentAvailabilityStatus(LostValue);
        /// <summary> MONITORED. </summary>
        public static DynatraceOneAgentAvailabilityStatus Monitored { get; } = new DynatraceOneAgentAvailabilityStatus(MonitoredValue);
        /// <summary> PRE_MONITORED. </summary>
        public static DynatraceOneAgentAvailabilityStatus PreMonitored { get; } = new DynatraceOneAgentAvailabilityStatus(PreMonitoredValue);
        /// <summary> SHUTDOWN. </summary>
        public static DynatraceOneAgentAvailabilityStatus Shutdown { get; } = new DynatraceOneAgentAvailabilityStatus(ShutdownValue);
        /// <summary> UNEXPECTED_SHUTDOWN. </summary>
        public static DynatraceOneAgentAvailabilityStatus UnexpectedShutdown { get; } = new DynatraceOneAgentAvailabilityStatus(UnexpectedShutdownValue);
        /// <summary> UNKNOWN. </summary>
        public static DynatraceOneAgentAvailabilityStatus Unknown { get; } = new DynatraceOneAgentAvailabilityStatus(UnknownValue);
        /// <summary> UNMONITORED. </summary>
        public static DynatraceOneAgentAvailabilityStatus Unmonitored { get; } = new DynatraceOneAgentAvailabilityStatus(UnmonitoredValue);
        /// <summary> Determines if two <see cref="DynatraceOneAgentAvailabilityStatus"/> values are the same. </summary>
        public static bool operator ==(DynatraceOneAgentAvailabilityStatus left, DynatraceOneAgentAvailabilityStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DynatraceOneAgentAvailabilityStatus"/> values are not the same. </summary>
        public static bool operator !=(DynatraceOneAgentAvailabilityStatus left, DynatraceOneAgentAvailabilityStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DynatraceOneAgentAvailabilityStatus"/>. </summary>
        public static implicit operator DynatraceOneAgentAvailabilityStatus(string value) => new DynatraceOneAgentAvailabilityStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DynatraceOneAgentAvailabilityStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DynatraceOneAgentAvailabilityStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
