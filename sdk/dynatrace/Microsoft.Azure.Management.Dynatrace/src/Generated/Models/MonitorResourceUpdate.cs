// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Dynatrace.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The updatable properties of the MonitorResource.
    /// </summary>
    public partial class MonitorResourceUpdate
    {
        /// <summary>
        /// Initializes a new instance of the MonitorResourceUpdate class.
        /// </summary>
        public MonitorResourceUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MonitorResourceUpdate class.
        /// </summary>
        /// <param name="tags">Resource tags.</param>
        /// <param name="monitoringStatus">Status of the monitor. Possible
        /// values include: 'Enabled', 'Disabled'</param>
        /// <param name="marketplaceSubscriptionStatus">Marketplace
        /// subscription status. Possible values include: 'Active',
        /// 'Suspended'</param>
        /// <param name="dynatraceEnvironmentProperties">Properties of the
        /// Dynatrace environment.</param>
        /// <param name="userInfo">User info.</param>
        /// <param name="planData">Billing plan information.</param>
        public MonitorResourceUpdate(IDictionary<string, string> tags = default(IDictionary<string, string>), string monitoringStatus = default(string), string marketplaceSubscriptionStatus = default(string), DynatraceEnvironmentProperties dynatraceEnvironmentProperties = default(DynatraceEnvironmentProperties), UserInfo userInfo = default(UserInfo), PlanData planData = default(PlanData))
        {
            Tags = tags;
            MonitoringStatus = monitoringStatus;
            MarketplaceSubscriptionStatus = marketplaceSubscriptionStatus;
            DynatraceEnvironmentProperties = dynatraceEnvironmentProperties;
            UserInfo = userInfo;
            PlanData = planData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or sets status of the monitor. Possible values include:
        /// 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "monitoringStatus")]
        public string MonitoringStatus { get; set; }

        /// <summary>
        /// Gets or sets marketplace subscription status. Possible values
        /// include: 'Active', 'Suspended'
        /// </summary>
        [JsonProperty(PropertyName = "marketplaceSubscriptionStatus")]
        public string MarketplaceSubscriptionStatus { get; set; }

        /// <summary>
        /// Gets or sets properties of the Dynatrace environment.
        /// </summary>
        [JsonProperty(PropertyName = "dynatraceEnvironmentProperties")]
        public DynatraceEnvironmentProperties DynatraceEnvironmentProperties { get; set; }

        /// <summary>
        /// Gets or sets user info.
        /// </summary>
        [JsonProperty(PropertyName = "userInfo")]
        public UserInfo UserInfo { get; set; }

        /// <summary>
        /// Gets or sets billing plan information.
        /// </summary>
        [JsonProperty(PropertyName = "planData")]
        public PlanData PlanData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UserInfo != null)
            {
                UserInfo.Validate();
            }
        }
    }
}
