// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Dynatrace.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of the managed service identities assigned to this
    /// resource.
    /// </summary>
    public partial class IdentityProperties
    {
        /// <summary>
        /// Initializes a new instance of the IdentityProperties class.
        /// </summary>
        public IdentityProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdentityProperties class.
        /// </summary>
        /// <param name="type">The type of managed identity assigned to this
        /// resource. Possible values include: 'SystemAssigned',
        /// 'UserAssigned', 'SystemAndUserAssigned'</param>
        /// <param name="tenantId">The Active Directory tenant id of the
        /// principal.</param>
        /// <param name="principalId">The active directory identifier of this
        /// principal.</param>
        /// <param name="userAssignedIdentities">The identities assigned to
        /// this resource by the user.</param>
        public IdentityProperties(string type, string tenantId = default(string), string principalId = default(string), IDictionary<string, UserAssignedIdentity> userAssignedIdentities = default(IDictionary<string, UserAssignedIdentity>))
        {
            TenantId = tenantId;
            PrincipalId = principalId;
            Type = type;
            UserAssignedIdentities = userAssignedIdentities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the Active Directory tenant id of the principal.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets the active directory identifier of this principal.
        /// </summary>
        [JsonProperty(PropertyName = "principalId")]
        public string PrincipalId { get; private set; }

        /// <summary>
        /// Gets or sets the type of managed identity assigned to this
        /// resource. Possible values include: 'SystemAssigned',
        /// 'UserAssigned', 'SystemAndUserAssigned'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the identities assigned to this resource by the user.
        /// </summary>
        [JsonProperty(PropertyName = "userAssignedIdentities")]
        public IDictionary<string, UserAssignedIdentity> UserAssignedIdentities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (UserAssignedIdentities != null)
            {
                foreach (var valueElement in UserAssignedIdentities.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
        }
    }
}
