// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeFleet.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ComputeFleet.Samples
{
    public partial class Sample_FleetCollection
    {
        // Fleets_ListByResourceGroup
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_FleetsListByResourceGroup()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListByResourceGroup.json
            // this example is just showing the usage of "Fleets_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation and iterate over the result
            await foreach (FleetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Fleets_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_FleetsGet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            FleetResource result = await collection.GetAsync(fleetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_FleetsGet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            bool result = await collection.ExistsAsync(fleetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Fleets_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_FleetsGet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            NullableResponse<FleetResource> response = await collection.GetIfExistsAsync(fleetName);
            FleetResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Fleets_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_FleetsCreateOrUpdate()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate.json
            // this example is just showing the usage of "Fleets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            FleetData data = new FleetData(new AzureLocation("westus"))
            {
                Zones =
{
"zone1","zone2"
},
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key9851")] = new UserAssignedIdentity(),
},
                },
                Plan = new ArmPlan("jwgrcrnrtfoxn", "iozjbiqqckqm", "cgopbyvdyqikahwyxfpzwaqk")
                {
                    PromotionCode = "naglezezplcaruqogtxnuizslqnnbr",
                    Version = "wa",
                },
                SpotPriorityProfile = new SpotPriorityProfile()
                {
                    Capacity = 20,
                    MinCapacity = 10,
                    MaxPricePerVm = 0.00865,
                    EvictionPolicy = EvictionPolicy.Delete,
                    AllocationStrategy = SpotAllocationStrategy.PriceCapacityOptimized,
                    Maintain = true,
                },
                RegularPriorityProfile = new RegularPriorityProfile()
                {
                    Capacity = 20,
                    MinCapacity = 10,
                    AllocationStrategy = RegularPriorityAllocationStrategy.LowestPrice,
                },
                VmSizesProfile =
{
new VmSizeProfile("Standard_d1_v2")
{
Rank = 19225,
}
},
                ComputeProfile = new ComputeProfile(new BaseVirtualMachineProfile()
                {
                    OSProfile = new VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "o",
                        AdminUsername = "nrgzqciiaaxjrqldbmjbqkyhntp",
                        AdminPassword = "adfbrdxpv",
                        CustomData = "xjjib",
                        WindowsConfiguration = new WindowsConfiguration()
                        {
                            ProvisionVmAgent = true,
                            EnableAutomaticUpdates = true,
                            TimeZone = "hlyjiqcfksgrpjrct",
                            AdditionalUnattendContent =
{
new AdditionalUnattendContent()
{
PassName = AdditionalUnattendContentPassName.OobeSystem,
ComponentName = AdditionalUnattendContentComponentName.MicrosoftWindowsShellSetup,
SettingName = SettingName.AutoLogon,
Content = "bubmqbxjkj",
}
},
                            PatchSettings = new PatchSettings()
                            {
                                PatchMode = WindowsVmGuestPatchMode.Manual,
                                EnableHotpatching = true,
                                AssessmentMode = WindowsPatchAssessmentMode.ImageDefault,
                                AutomaticByPlatformSettings = new WindowsVmGuestPatchAutomaticByPlatformSettings()
                                {
                                    RebootSetting = WindowsVmGuestPatchAutomaticByPlatformRebootSetting.Unknown,
                                    BypassPlatformSafetyChecksOnUserSchedule = true,
                                },
                            },
                            WinRMListeners =
{
new WinRMListener()
{
Protocol = ProtocolType.Http,
CertificateUri = new Uri("phwesineizrl"),
}
},
                            EnableVmAgentPlatformUpdates = true,
                        },
                        LinuxConfiguration = new LinuxConfiguration()
                        {
                            DisablePasswordAuthentication = true,
                            SshPublicKeys =
{
new SshPublicKey()
{
Path = "kmqz",
KeyData = "kivgsubusvpprwqaqpjcmhsv",
}
},
                            ProvisionVmAgent = true,
                            PatchSettings = new LinuxPatchSettings()
                            {
                                PatchMode = LinuxVmGuestPatchMode.ImageDefault,
                                AssessmentMode = LinuxPatchAssessmentMode.ImageDefault,
                                AutomaticByPlatformSettings = new LinuxVmGuestPatchAutomaticByPlatformSettings()
                                {
                                    RebootSetting = LinuxVmGuestPatchAutomaticByPlatformRebootSetting.Unknown,
                                    BypassPlatformSafetyChecksOnUserSchedule = true,
                                },
                            },
                            EnableVmAgentPlatformUpdates = true,
                        },
                        Secrets =
{
new VaultSecretGroup()
{
SourceVaultId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"),
VaultCertificates =
{
new VaultCertificate()
{
CertificateUri = new Uri("tyldwkzafmnkvpo"),
CertificateStore = "nlxrwavpzhueffxsshlun",
}
},
}
},
                        AllowExtensionOperations = true,
                        RequireGuestProvisionSignal = true,
                    },
                    StorageProfile = new VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new ImageReference()
                        {
                            Id = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}/versions/{versionName}"),
                            Publisher = "mqxgwbiyjzmxavhbkd",
                            Offer = "isxgumkarlkomp",
                            Sku = "eojmppqcrnpmxirtp",
                            Version = "wvpcqefgtmqdgltiuz",
                            SharedGalleryImageId = "kmkgihoxwlawuuhcinfirktdwkmx",
                            CommunityGalleryImageId = "vlqe",
                        },
                        OSDisk = new VirtualMachineScaleSetOSDisk(DiskCreateOptionType.FromImage)
                        {
                            Name = "wfttw",
                            Caching = CachingType.None,
                            WriteAcceleratorEnabled = true,
                            DiffDiskSettings = new DiffDiskSettings()
                            {
                                Option = DiffDiskOption.Local,
                                Placement = DiffDiskPlacement.CacheDisk,
                            },
                            DiskSizeGB = 14,
                            OSType = OperatingSystemType.Windows,
                            ImageUri = new Uri("thqceubivdrjs"),
                            VhdContainers =
{
"tkzcwddtinkfpnfklatw"
},
                            ManagedDisk = new VirtualMachineScaleSetManagedDisk()
                            {
                                StorageAccountType = StorageAccountType.StandardLRS,
                                DiskEncryptionSetId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}"),
                                SecurityProfile = new VmDiskSecurityProfile()
                                {
                                    SecurityEncryptionType = SecurityEncryptionType.VmGuestStateOnly,
                                    DiskEncryptionSetId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}"),
                                },
                            },
                            DeleteOption = DiskDeleteOptionType.Delete,
                        },
                        DataDisks =
{
new VirtualMachineScaleSetDataDisk(14,DiskCreateOptionType.FromImage)
{
Name = "eogiykmdmeikswxmigjws",
Caching = CachingType.None,
WriteAcceleratorEnabled = true,
DiskSizeGB = 6,
ManagedDisk = new VirtualMachineScaleSetManagedDisk()
{
StorageAccountType = StorageAccountType.StandardLRS,
DiskEncryptionSetId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}"),
SecurityProfile = new VmDiskSecurityProfile()
{
SecurityEncryptionType = SecurityEncryptionType.VmGuestStateOnly,
DiskEncryptionSetId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}"),
},
},
DiskIopsReadWrite = 27,
DiskMBpsReadWrite = 2,
DeleteOption = DiskDeleteOptionType.Delete,
}
},
                        DiskControllerType = new DiskControllerType("uzb"),
                    },
                    NetworkProfile = new VirtualMachineScaleSetNetworkProfile()
                    {
                        HealthProbeId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}"),
                        NetworkInterfaceConfigurations =
{
new VirtualMachineScaleSetNetworkConfiguration("i")
{
Properties = new VirtualMachineScaleSetNetworkConfigurationProperties(new VirtualMachineScaleSetIPConfiguration[]
{
new VirtualMachineScaleSetIPConfiguration("oezqhkidfhyywlfzwuotilrpbqnjg")
{
Properties = new VirtualMachineScaleSetIPConfigurationProperties()
{
SubnetId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}"),
Primary = true,
PublicIPAddressConfiguration = new VirtualMachineScaleSetPublicIPAddressConfiguration("fvpqf")
{
Properties = new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
{
IdleTimeoutInMinutes = 9,
DnsSettings = new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings("ukrddzvmorpmfsczjwtbvp")
{
DomainNameLabelScope = DomainNameLabelScopeType.TenantReuse,
},
IPTags =
{
new VirtualMachineScaleSetIPTag()
{
IPTagType = "sddgsoemnzgqizale",
Tag = "wufmhrjsakbiaetyara",
}
},
PublicIPPrefixId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}"),
PublicIPAddressVersion = IPVersion.IPv4,
DeleteOption = DeleteOption.Delete,
},
Sku = new PublicIPAddressSku()
{
Name = PublicIPAddressSkuName.Basic,
Tier = PublicIPAddressSkuTier.Regional,
},
},
PrivateIPAddressVersion = IPVersion.IPv4,
ApplicationGatewayBackendAddressPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendAddressPools/{backendAddressPoolName}"),
}
},
ApplicationSecurityGroups =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationSecurityGroups/{applicationSecurityGroupName}"),
}
},
LoadBalancerBackendAddressPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}"),
}
},
LoadBalancerInboundNatPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatPools/{inboundNatPoolName}"),
}
},
},
}
})
{
Primary = true,
EnableAcceleratedNetworking = true,
DisableTcpStateTracking = true,
EnableFpga = true,
NetworkSecurityGroupId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}"),
DnsServers =
{
"nxmmfolhclsesu"
},
EnableIPForwarding = true,
DeleteOption = DeleteOption.Delete,
AuxiliaryMode = NetworkInterfaceAuxiliaryMode.None,
AuxiliarySku = NetworkInterfaceAuxiliarySku.None,
},
}
},
                        NetworkApiVersion = NetworkApiVersion.TwoThousandTwenty1101,
                    },
                    SecurityProfile = new SecurityProfile()
                    {
                        UefiSettings = new UefiSettings()
                        {
                            SecureBootEnabled = true,
                            VTpmEnabled = true,
                        },
                        EncryptionAtHost = true,
                        SecurityType = SecurityType.TrustedLaunch,
                        UserAssignedIdentityResourceId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{userAssignedIdentityName}"),
                        ProxyAgentSettings = new ProxyAgentSettings()
                        {
                            Enabled = true,
                            Mode = Mode.Audit,
                            KeyIncarnationId = 20,
                        },
                    },
                    BootDiagnostics = new BootDiagnostics()
                    {
                        Enabled = true,
                        StorageUri = new Uri("rzamfwghybpx"),
                    },
                    ExtensionProfile = new VirtualMachineScaleSetExtensionProfile()
                    {
                        Extensions =
{
new VirtualMachineScaleSetExtension()
{
Name = "bndxuxx",
Properties = new VirtualMachineScaleSetExtensionProperties()
{
ForceUpdateTag = "yhgxw",
Publisher = "kpxtirxjfprhs",
VirtualMachineScaleSetExtensionPropertiesType = "pgjilctjjwaa",
TypeHandlerVersion = "zevivcoilxmbwlrihhhibq",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
},
ProtectedSettings =
{
},
ProvisionAfterExtensions =
{
"nftzosroolbcwmpupujzqwqe"
},
SuppressFailures = true,
ProtectedSettingsFromKeyVault = new KeyVaultSecretReference(new Uri("vyhzfkqsqanacgzjthpjoe"),new WritableSubResource()
{
Id = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}"),
}),
},
}
},
                        ExtensionsTimeBudget = "mbhjahtdygwgyszdwjtvlvtgchdwil",
                    },
                    LicenseType = "v",
                    ScheduledEventsProfile = new ScheduledEventsProfile()
                    {
                        TerminateNotificationProfile = new TerminateNotificationProfile()
                        {
                            NotBeforeTimeout = "iljppmmw",
                            Enable = true,
                        },
                        OSImageNotificationProfile = new OSImageNotificationProfile()
                        {
                            NotBeforeTimeout = "olbpadmevekyczfokodtfprxti",
                            Enable = true,
                        },
                    },
                    UserData = "s",
                    CapacityReservationGroupId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/capacityReservationGroups/{capacityReservationGroupName}"),
                    GalleryApplications =
{
new VmGalleryApplication(new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{applicationName}/versions/{versionName}"))
{
Tags = "eyrqjbib",
Order = 5,
ConfigurationReference = "ulztmiavpojpbpbddgnuuiimxcpau",
TreatFailureAsDeploymentFailure = true,
EnableAutomaticUpgrade = true,
}
},
                    HardwareVmSizeProperties = new VmSizeProperties()
                    {
                        VCPUsAvailable = 16,
                        VCPUsPerCore = 23,
                    },
                    ServiceArtifactReferenceId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactsName}/vmArtifactsProfiles/{vmArtifactsProfileName}"),
                    SecurityPostureReference = new SecurityPostureReference()
                    {
                        Id = "/CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|{major.*}|latest",
                        ExcludeExtensions =
{
"{securityPostureVMExtensionName}"
},
                        IsOverridable = true,
                    },
                })
                {
                    ComputeApiVersion = "2023-07-01",
                    PlatformFaultDomainCount = 1,
                },
                Tags =
{
["key3518"] = "luvrnuvsgdpbuofdskkcoqhfh",
},
            };
            ArmOperation<FleetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, fleetName, data);
            FleetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_CreateOrUpdate_MinimumSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_FleetsCreateOrUpdateMinimumSet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate_MinimumSet.json
            // this example is just showing the usage of "Fleets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            FleetData data = new FleetData(new AzureLocation("eastus2euap"))
            {
                SpotPriorityProfile = new SpotPriorityProfile()
                {
                    Capacity = 2,
                    MinCapacity = 1,
                    EvictionPolicy = EvictionPolicy.Delete,
                    AllocationStrategy = SpotAllocationStrategy.PriceCapacityOptimized,
                    Maintain = true,
                },
                RegularPriorityProfile = new RegularPriorityProfile()
                {
                    Capacity = 2,
                    MinCapacity = 1,
                    AllocationStrategy = RegularPriorityAllocationStrategy.LowestPrice,
                },
                VmSizesProfile =
{
new VmSizeProfile("Standard_D2s_v3"),new VmSizeProfile("Standard_D4s_v3"),new VmSizeProfile("Standard_E2s_v3")
},
                ComputeProfile = new ComputeProfile(new BaseVirtualMachineProfile()
                {
                    OSProfile = new VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "prefix",
                        AdminUsername = "azureuser",
                        AdminPassword = "TestPassword$0",
                        LinuxConfiguration = new LinuxConfiguration()
                        {
                            DisablePasswordAuthentication = false,
                        },
                    },
                    StorageProfile = new VirtualMachineScaleSetStorageProfile()
                    {
                        ImageReference = new ImageReference()
                        {
                            Publisher = "canonical",
                            Offer = "0001-com-ubuntu-server-focal",
                            Sku = "20_04-lts-gen2",
                            Version = "latest",
                        },
                        OSDisk = new VirtualMachineScaleSetOSDisk(DiskCreateOptionType.FromImage)
                        {
                            Caching = CachingType.ReadWrite,
                            OSType = OperatingSystemType.Linux,
                            ManagedDisk = new VirtualMachineScaleSetManagedDisk()
                            {
                                StorageAccountType = StorageAccountType.StandardLRS,
                            },
                        },
                    },
                    NetworkProfile = new VirtualMachineScaleSetNetworkProfile()
                    {
                        NetworkInterfaceConfigurations =
{
new VirtualMachineScaleSetNetworkConfiguration("vmNameTest")
{
Properties = new VirtualMachineScaleSetNetworkConfigurationProperties(new VirtualMachineScaleSetIPConfiguration[]
{
new VirtualMachineScaleSetIPConfiguration("vmNameTest")
{
Properties = new VirtualMachineScaleSetIPConfigurationProperties()
{
SubnetId = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}"),
Primary = true,
LoadBalancerBackendAddressPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}"),
}
},
},
}
})
{
Primary = true,
EnableAcceleratedNetworking = false,
EnableIPForwarding = true,
},
}
},
                        NetworkApiVersion = new NetworkApiVersion("2022-07-01"),
                    },
                })
                {
                    ComputeApiVersion = "2023-09-01",
                    PlatformFaultDomainCount = 1,
                },
                Tags =
{
["key"] = "fleets-test",
},
            };
            ArmOperation<FleetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, fleetName, data);
            FleetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
