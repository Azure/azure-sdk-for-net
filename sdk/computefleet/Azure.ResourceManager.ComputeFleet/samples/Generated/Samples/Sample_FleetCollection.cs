// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeFleet.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ComputeFleet.Samples
{
    public partial class Sample_FleetCollection
    {
        // Fleets_ListByResourceGroup
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_FleetsListByResourceGroup()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListByResourceGroup.json
            // this example is just showing the usage of "Fleets_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation and iterate over the result
            await foreach (FleetResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Fleets_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_FleetsGet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            FleetResource result = await collection.GetAsync(fleetName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_FleetsGet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            bool result = await collection.ExistsAsync(fleetName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Fleets_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_FleetsGet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            NullableResponse<FleetResource> response = await collection.GetIfExistsAsync(fleetName);
            FleetResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // Fleets_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_FleetsCreateOrUpdate()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_CreateOrUpdate.json
            // this example is just showing the usage of "Fleets_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FleetResource
            FleetCollection collection = resourceGroupResource.GetFleets();

            // invoke the operation
            string fleetName = "testFleet";
            FleetData data = new FleetData(new AzureLocation("westus"))
            {
                Properties = new FleetProperties(new VmSizeProfile[]
            {
new VmSizeProfile("Standard_d1_v2")
{
Rank = 19225,
}
            }, new ComputeProfile(new VirtualMachineScaleSetVmProfile()
            {
                OSProfile = new VirtualMachineScaleSetOSProfile()
                {
                    ComputerNamePrefix = "o",
                    AdminUsername = "nrgzqciiaaxjrqldbmjbqkyhntp",
                    AdminPassword = "adfbrdxpv",
                    CustomData = "xjjib",
                    WindowsConfiguration = new WindowsConfiguration()
                    {
                        ProvisionVmAgent = true,
                        EnableAutomaticUpdates = true,
                        TimeZone = "hlyjiqcfksgrpjrct",
                        AdditionalUnattendContent =
            {
new AdditionalUnattendContent()
{
PassName = PassName.OobeSystem,
ComponentName = ComponentName.MicrosoftWindowsShellSetup,
SettingName = SettingName.AutoLogon,
Content = "bubmqbxjkj",
}
            },
                        PatchSettings = new PatchSettings()
                        {
                            PatchMode = WindowsVmGuestPatchMode.Manual,
                            EnableHotpatching = true,
                            AssessmentMode = WindowsPatchAssessmentMode.ImageDefault,
                            AutomaticByPlatformSettings = new WindowsVmGuestPatchAutomaticByPlatformSettings()
                            {
                                RebootSetting = WindowsVmGuestPatchAutomaticByPlatformRebootSetting.Unknown,
                                BypassPlatformSafetyChecksOnUserSchedule = true,
                            },
                        },
                        WinRMListeners =
            {
new WinRMListener()
{
Protocol = ProtocolType.Http,
CertificateUri = new Uri("phwesineizrl"),
}
            },
                        EnableVmAgentPlatformUpdates = true,
                    },
                    LinuxConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
            {
new SshPublicKey()
{
Path = "kmqz",
KeyData = "kivgsubusvpprwqaqpjcmhsv",
}
            },
                        ProvisionVmAgent = true,
                        PatchSettings = new LinuxPatchSettings()
                        {
                            PatchMode = LinuxVmGuestPatchMode.ImageDefault,
                            AssessmentMode = LinuxPatchAssessmentMode.ImageDefault,
                            AutomaticByPlatformSettings = new LinuxVmGuestPatchAutomaticByPlatformSettings()
                            {
                                RebootSetting = LinuxVmGuestPatchAutomaticByPlatformRebootSetting.Unknown,
                                BypassPlatformSafetyChecksOnUserSchedule = true,
                            },
                        },
                        EnableVmAgentPlatformUpdates = true,
                    },
                    Secrets =
            {
new VaultSecretGroup()
{
SourceVaultId = new ResourceIdentifier("groxwd"),
VaultCertificates =
{
new VaultCertificate()
{
CertificateUri = new Uri("tyldwkzafmnkvpo"),
CertificateStore = "nlxrwavpzhueffxsshlun",
}
},
}
            },
                    AllowExtensionOperations = true,
                    RequireGuestProvisionSignal = true,
                },
                StorageProfile = new VirtualMachineScaleSetStorageProfile()
                {
                    ImageReference = new ImageReference()
                    {
                        Publisher = "mqxgwbiyjzmxavhbkd",
                        Offer = "isxgumkarlkomp",
                        Sku = "eojmppqcrnpmxirtp",
                        Version = "wvpcqefgtmqdgltiuz",
                        SharedGalleryImageId = "kmkgihoxwlawuuhcinfirktdwkmx",
                        CommunityGalleryImageId = "vlqe",
                        Id = "aiunknwgksu",
                    },
                    OSDisk = new VirtualMachineScaleSetOSDisk(DiskCreateOptionType.FromImage)
                    {
                        Name = "wfttw",
                        Caching = CachingType.None,
                        WriteAcceleratorEnabled = true,
                        DiffDiskSettings = new DiffDiskSettings()
                        {
                            Option = DiffDiskOption.Local,
                            Placement = DiffDiskPlacement.CacheDisk,
                        },
                        DiskSizeGB = 14,
                        OSType = OperatingSystemType.Windows,
                        ImageUri = new Uri("thqceubivdrjs"),
                        VhdContainers =
            {
"tkzcwddtinkfpnfklatw"
            },
                        ManagedDisk = new VirtualMachineScaleSetManagedDiskContent()
                        {
                            StorageAccountType = StorageAccountType.StandardLRS,
                            DiskEncryptionSetId = new ResourceIdentifier("vmatqblzjalbatdepyzqmnd"),
                            SecurityProfile = new VmDiskSecurityProfile()
                            {
                                SecurityEncryptionType = SecurityEncryptionType.VmGuestStateOnly,
                                DiskEncryptionSetId = new ResourceIdentifier("vmatqblzjalbatdepyzqmnd"),
                            },
                        },
                        DeleteOption = DiskDeleteOptionType.Delete,
                    },
                    DataDisks =
            {
new VirtualMachineScaleSetDataDisk(14,DiskCreateOptionType.FromImage)
{
Name = "eogiykmdmeikswxmigjws",
Caching = CachingType.None,
WriteAcceleratorEnabled = true,
DiskSizeGB = 6,
ManagedDisk = new VirtualMachineScaleSetManagedDiskContent()
{
StorageAccountType = StorageAccountType.StandardLRS,
DiskEncryptionSetId = new ResourceIdentifier("vmatqblzjalbatdepyzqmnd"),
SecurityProfile = new VmDiskSecurityProfile()
{
SecurityEncryptionType = SecurityEncryptionType.VmGuestStateOnly,
DiskEncryptionSetId = new ResourceIdentifier("vmatqblzjalbatdepyzqmnd"),
},
},
DiskIopsReadWrite = 27,
DiskMBpsReadWrite = 2,
DeleteOption = DiskDeleteOptionType.Delete,
}
            },
                    DiskControllerType = "uzb",
                },
                NetworkProfile = new VirtualMachineScaleSetNetworkProfile()
                {
                    HealthProbeId = new ResourceIdentifier("cmkfcjhmrwxwqtac"),
                    NetworkInterfaceConfigurations =
            {
new VirtualMachineScaleSetNetworkConfiguration("i")
{
Properties = new VirtualMachineScaleSetNetworkConfigurationProperties(new VirtualMachineScaleSetIPConfiguration[]
{
new VirtualMachineScaleSetIPConfiguration("oezqhkidfhyywlfzwuotilrpbqnjg")
{
Properties = new VirtualMachineScaleSetIPConfigurationProperties()
{
SubnetId = new ResourceIdentifier("cmkfcjhmrwxwqtac"),
Primary = true,
PublicIPAddressConfiguration = new VirtualMachineScaleSetPublicIPAddressConfiguration("fvpqf")
{
Properties = new VirtualMachineScaleSetPublicIPAddressConfigurationProperties()
{
IdleTimeoutInMinutes = 9,
DnsSettings = new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings("ukrddzvmorpmfsczjwtbvp")
{
DomainNameLabelScope = DomainNameLabelScopeType.TenantReuse,
},
IPTags =
{
new VirtualMachineScaleSetIPTag()
{
IPTagType = "sddgsoemnzgqizale",
Tag = "wufmhrjsakbiaetyara",
}
},
PublicIPPrefixId = new ResourceIdentifier("groxwd"),
PublicIPAddressVersion = IPVersion.IPv4,
DeleteOption = DeleteOption.Delete,
},
Sku = new PublicIPAddressSku()
{
Name = PublicIPAddressSkuName.Basic,
Tier = PublicIPAddressSkuTier.Regional,
},
},
PrivateIPAddressVersion = IPVersion.IPv4,
ApplicationGatewayBackendAddressPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}
},
ApplicationSecurityGroups =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}
},
LoadBalancerBackendAddressPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}
},
LoadBalancerInboundNatPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}
},
},
}
})
{
Primary = true,
EnableAcceleratedNetworking = true,
DisableTcpStateTracking = true,
EnableFpga = true,
NetworkSecurityGroupId = new ResourceIdentifier("groxwd"),
DnsServers =
{
"nxmmfolhclsesu"
},
EnableIPForwarding = true,
DeleteOption = DeleteOption.Delete,
AuxiliaryMode = NetworkInterfaceAuxiliaryMode.None,
AuxiliarySku = NetworkInterfaceAuxiliarySku.None,
},
}
            },
                    NetworkApiVersion = NetworkApiVersion.TwoThousandTwenty1101,
                },
                SecurityProfile = new SecurityProfile()
                {
                    UefiSettings = new UefiSettings()
                    {
                        SecureBootEnabled = true,
                        VTpmEnabled = true,
                    },
                    EncryptionAtHost = true,
                    SecurityType = SecurityType.TrustedLaunch,
                    UserAssignedIdentityResourceId = "qoersmt",
                    ProxyAgentSettings = new ProxyAgentSettings()
                    {
                        Enabled = true,
                        Mode = Mode.Audit,
                        KeyIncarnationId = 20,
                    },
                },
                BootDiagnostics = new BootDiagnostics()
                {
                    Enabled = true,
                    StorageUri = new Uri("rzamfwghybpx"),
                },
                ExtensionProfile = new VirtualMachineScaleSetExtensionProfile()
                {
                    Extensions =
            {
new VirtualMachineScaleSetExtension()
{
Name = "bndxuxx",
Properties = new VirtualMachineScaleSetExtensionProperties()
{
ForceUpdateTag = "yhgxw",
Publisher = "kpxtirxjfprhs",
VirtualMachineScaleSetExtensionPropertiesType = "pgjilctjjwaa",
TypeHandlerVersion = "zevivcoilxmbwlrihhhibq",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
ProtectedSettings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
ProvisionAfterExtensions =
{
"nftzosroolbcwmpupujzqwqe"
},
SuppressFailures = true,
ProtectedSettingsFromKeyVault = new KeyVaultSecretReference(new Uri("vyhzfkqsqanacgzjthpjoe"),new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}),
},
}
            },
                    ExtensionsTimeBudget = "mbhjahtdygwgyszdwjtvlvtgchdwil",
                },
                LicenseType = "v",
                ScheduledEventsProfile = new ScheduledEventsProfile()
                {
                    TerminateNotificationProfile = new TerminateNotificationProfile()
                    {
                        NotBeforeTimeout = "iljppmmw",
                        Enable = true,
                    },
                    OSImageNotificationProfile = new OSImageNotificationProfile()
                    {
                        NotBeforeTimeout = "olbpadmevekyczfokodtfprxti",
                        Enable = true,
                    },
                },
                UserData = "s",
                CapacityReservationGroupId = new ResourceIdentifier("groxwd"),
                GalleryApplications =
            {
new VmGalleryApplication("lfxqiadouhmbovcd")
{
Tags = "eyrqjbib",
Order = 5,
ConfigurationReference = "ulztmiavpojpbpbddgnuuiimxcpau",
TreatFailureAsDeploymentFailure = true,
EnableAutomaticUpgrade = true,
}
            },
                HardwareVmSizeProperties = new VmSizeProperties()
                {
                    VCPUsAvailable = 16,
                    VCPUsPerCore = 23,
                },
                ServiceArtifactReferenceId = new ResourceIdentifier("qlkeeyskyr"),
                SecurityPostureReference = new SecurityPostureReference()
                {
                    Id = "mubredelfbshboaxrsxiajihahaa",
                    ExcludeExtensions =
            {
new VirtualMachineExtension(new AzureLocation("wrqxhbqaebwkzmcdmngyqmhogc"))
{
Properties = new VirtualMachineExtensionProperties()
{
ForceUpdateTag = "oriasdwawveilgusfrn",
Publisher = "rxoajzb",
VirtualMachineExtensionPropertiesType = "vhrtgbaqdkbrrqxsdiiaqxksmqukl",
TypeHandlerVersion = "bvzbiibps",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
ProtectedSettings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
InstanceView = new VirtualMachineExtensionInstanceView()
{
Name = "ip",
VirtualMachineExtensionInstanceViewType = "woadxvobquacooaujyg",
TypeHandlerVersion = "ftkkqxdqiofgsusvxekdcpua",
Substatuses =
{
new InstanceViewStatus()
{
Code = "kuehuahsdozupmjrtp",
Level = StatusLevelType.Info,
DisplayStatus = "pomenhgqjoelbxvsqwxxexqxv",
Message = "jxjjmlwbjylzvrislyyflhnmizhiu",
Time = DateTimeOffset.Parse("2024-04-29T21:51:44.042Z"),
}
},
Statuses =
{
new InstanceViewStatus()
{
Code = "kuehuahsdozupmjrtp",
Level = StatusLevelType.Info,
DisplayStatus = "pomenhgqjoelbxvsqwxxexqxv",
Message = "jxjjmlwbjylzvrislyyflhnmizhiu",
Time = DateTimeOffset.Parse("2024-04-29T21:51:44.042Z"),
}
},
},
SuppressFailures = true,
ProtectedSettingsFromKeyVault = new KeyVaultSecretReference(new Uri("vyhzfkqsqanacgzjthpjoe"),new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}),
ProvisionAfterExtensions =
{
"lwsfavklrgzuwmyxscskt"
},
},
Tags =
{
["key7356"] = "apuftleiygpnemfzryiop",
},
}
            },
                },
            })
            {
                ComputeApiVersion = "2023-07-01",
                PlatformFaultDomainCount = 1,
            })
                {
                    SpotPriorityProfile = new SpotPriorityProfile()
                    {
                        Capacity = 20,
                        MinCapacity = 10,
                        MaxPricePerVm = 0.00865,
                        EvictionPolicy = EvictionPolicy.Delete,
                        AllocationStrategy = SpotAllocationStrategy.PriceCapacityOptimized,
                        Maintain = true,
                    },
                    RegularPriorityProfile = new RegularPriorityProfile()
                    {
                        Capacity = 20,
                        MinCapacity = 10,
                        AllocationStrategy = RegularPriorityAllocationStrategy.LowestPrice,
                    },
                },
                Zones =
{
"zone1","zone2"
},
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("key9851")] = new UserAssignedIdentity(),
},
                },
                Tags =
{
["key3518"] = "luvrnuvsgdpbuofdskkcoqhfh",
},
            };
            ArmOperation<FleetResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, fleetName, data);
            FleetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
