// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ComputeFleet.Models;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ComputeFleet.Samples
{
    public partial class Sample_FleetResource
    {
        // Fleets_ListBySubscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetFleets_FleetsListBySubscription()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListBySubscription.json
            // this example is just showing the usage of "Fleets_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (FleetResource item in subscriptionResource.GetFleetsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FleetData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Fleets_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_FleetsGet()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Get.json
            // this example is just showing the usage of "Fleets_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            FleetResource result = await fleet.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_Update
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_FleetsUpdate()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Update.json
            // this example is just showing the usage of "Fleets_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            FleetPatch patch = new FleetPatch()
            {
                Tags =
{
},
                Identity = new ManagedServiceIdentityUpdate()
                {
                    IdentityType = ManagedServiceIdentityType.UserAssigned,
                    UserAssignedIdentities =
{
},
                },
                Plan = new ArmPlan("jwgrcrnrtfoxn", "iozjbiqqckqm", "cgopbyvdyqikahwyxfpzwaqk")
                {
                    PromotionCode = "naglezezplcaruqogtxnuizslqnnbr",
                    Version = "wa",
                },
                Properties = new FleetPropertiesUpdate()
                {
                    SpotPriorityProfile = new SpotPriorityProfile()
                    {
                        Capacity = 20,
                        MinCapacity = 10,
                        MaxPricePerVm = 0.00865,
                        EvictionPolicy = EvictionPolicy.Delete,
                        AllocationStrategy = SpotAllocationStrategy.PriceCapacityOptimized,
                        Maintain = true,
                    },
                    RegularPriorityProfile = new RegularPriorityProfile()
                    {
                        Capacity = 20,
                        MinCapacity = 10,
                        AllocationStrategy = RegularPriorityAllocationStrategy.LowestPrice,
                    },
                    VmSizesProfile =
{
new VmSizeProfile("Standard_d1_v2")
{
Rank = 19225,
}
},
                    ComputeProfile = new ComputeProfileUpdate()
                    {
                        BaseVirtualMachineProfile = new VirtualMachineScaleSetVmProfile()
                        {
                            OSProfile = new VirtualMachineScaleSetOSProfile()
                            {
                                ComputerNamePrefix = "o",
                                AdminUsername = "nrgzqciiaaxjrqldbmjbqkyhntp",
                                AdminPassword = "adfbrdxpv",
                                CustomData = "xjjib",
                                WindowsConfiguration = new WindowsConfiguration()
                                {
                                    ProvisionVmAgent = true,
                                    EnableAutomaticUpdates = true,
                                    TimeZone = "hlyjiqcfksgrpjrct",
                                    AdditionalUnattendContent =
{
new AdditionalUnattendContent()
{
PassName = PassName.OobeSystem,
ComponentName = ComponentName.MicrosoftWindowsShellSetup,
SettingName = SettingName.AutoLogon,
Content = "bubmqbxjkj",
}
},
                                    PatchSettings = new PatchSettings()
                                    {
                                        PatchMode = WindowsVmGuestPatchMode.Manual,
                                        EnableHotpatching = true,
                                        AssessmentMode = WindowsPatchAssessmentMode.ImageDefault,
                                        AutomaticByPlatformSettings = new WindowsVmGuestPatchAutomaticByPlatformSettings()
                                        {
                                            RebootSetting = WindowsVmGuestPatchAutomaticByPlatformRebootSetting.Unknown,
                                            BypassPlatformSafetyChecksOnUserSchedule = true,
                                        },
                                    },
                                    WinRMListeners =
{
new WinRMListener()
{
Protocol = ProtocolType.Http,
CertificateUri = new Uri("phwesineizrl"),
}
},
                                    EnableVmAgentPlatformUpdates = true,
                                },
                                LinuxConfiguration = new LinuxConfiguration()
                                {
                                    DisablePasswordAuthentication = true,
                                    SshPublicKeys =
{
new SshPublicKey()
{
Path = "kmqz",
KeyData = "kivgsubusvpprwqaqpjcmhsv",
}
},
                                    ProvisionVmAgent = true,
                                    PatchSettings = new LinuxPatchSettings()
                                    {
                                        PatchMode = LinuxVmGuestPatchMode.ImageDefault,
                                        AssessmentMode = LinuxPatchAssessmentMode.ImageDefault,
                                        AutomaticByPlatformSettings = new LinuxVmGuestPatchAutomaticByPlatformSettings()
                                        {
                                            RebootSetting = LinuxVmGuestPatchAutomaticByPlatformRebootSetting.Unknown,
                                            BypassPlatformSafetyChecksOnUserSchedule = true,
                                        },
                                    },
                                    EnableVmAgentPlatformUpdates = true,
                                },
                                Secrets =
{
new VaultSecretGroup()
{
SourceVaultId = new ResourceIdentifier("groxwd"),
VaultCertificates =
{
new VaultCertificate()
{
CertificateUri = new Uri("tyldwkzafmnkvpo"),
CertificateStore = "nlxrwavpzhueffxsshlun",
}
},
}
},
                                AllowExtensionOperations = true,
                                RequireGuestProvisionSignal = true,
                            },
                            StorageProfile = new VirtualMachineScaleSetStorageProfile()
                            {
                                ImageReference = new ImageReference()
                                {
                                    Publisher = "mqxgwbiyjzmxavhbkd",
                                    Offer = "isxgumkarlkomp",
                                    Sku = "eojmppqcrnpmxirtp",
                                    Version = "wvpcqefgtmqdgltiuz",
                                    SharedGalleryImageId = "kmkgihoxwlawuuhcinfirktdwkmx",
                                    CommunityGalleryImageId = "vlqe",
                                    Id = "aiunknwgksu",
                                },
                                OSDisk = new VirtualMachineScaleSetOSDisk(DiskCreateOptionType.FromImage)
                                {
                                    Name = "wfttw",
                                    Caching = CachingType.None,
                                    WriteAcceleratorEnabled = true,
                                    DiffDiskSettings = new DiffDiskSettings()
                                    {
                                        Option = DiffDiskOption.Local,
                                        Placement = DiffDiskPlacement.CacheDisk,
                                    },
                                    DiskSizeGB = 14,
                                    OSType = OperatingSystemType.Windows,
                                    ImageUri = new Uri("thqceubivdrjs"),
                                    VhdContainers =
{
"tkzcwddtinkfpnfklatw"
},
                                    ManagedDisk = new VirtualMachineScaleSetManagedDiskContent()
                                    {
                                        StorageAccountType = StorageAccountType.StandardLRS,
                                        DiskEncryptionSetId = new ResourceIdentifier("vmatqblzjalbatdepyzqmnd"),
                                        SecurityProfile = new VmDiskSecurityProfile()
                                        {
                                            SecurityEncryptionType = SecurityEncryptionType.VmGuestStateOnly,
                                            DiskEncryptionSetId = new ResourceIdentifier("vmatqblzjalbatdepyzqmnd"),
                                        },
                                    },
                                    DeleteOption = DiskDeleteOptionType.Delete,
                                },
                                DataDisks =
{
new VirtualMachineScaleSetDataDisk(14,DiskCreateOptionType.FromImage)
{
Name = "eogiykmdmeikswxmigjws",
Caching = CachingType.None,
WriteAcceleratorEnabled = true,
DiskSizeGB = 6,
ManagedDisk = new VirtualMachineScaleSetManagedDiskContent()
{
StorageAccountType = StorageAccountType.StandardLRS,
DiskEncryptionSetId = new ResourceIdentifier("vmatqblzjalbatdepyzqmnd"),
SecurityProfile = new VmDiskSecurityProfile()
{
SecurityEncryptionType = SecurityEncryptionType.VmGuestStateOnly,
DiskEncryptionSetId = new ResourceIdentifier("vmatqblzjalbatdepyzqmnd"),
},
},
DiskIopsReadWrite = 27,
DiskMBpsReadWrite = 2,
DeleteOption = DiskDeleteOptionType.Delete,
}
},
                                DiskControllerType = "uzb",
                            },
                            NetworkProfile = new VirtualMachineScaleSetNetworkProfile()
                            {
                                HealthProbeId = new ResourceIdentifier("cmkfcjhmrwxwqtac"),
                                NetworkInterfaceConfigurations =
{
new VirtualMachineScaleSetNetworkConfiguration("i")
{
Primary = true,
EnableAcceleratedNetworking = true,
DisableTcpStateTracking = true,
EnableFpga = true,
NetworkSecurityGroupId = new ResourceIdentifier("groxwd"),
DnsServers =
{
"nxmmfolhclsesu"
},
IPConfigurations =
{
new VirtualMachineScaleSetIPConfiguration("oezqhkidfhyywlfzwuotilrpbqnjg")
{
SubnetId = new ResourceIdentifier("cmkfcjhmrwxwqtac"),
Primary = true,
PublicIPAddressConfiguration = new VirtualMachineScaleSetPublicIPAddressConfiguration("fvpqf")
{
Sku = new PublicIPAddressSku()
{
Name = PublicIPAddressSkuName.Basic,
Tier = PublicIPAddressSkuTier.Regional,
},
IdleTimeoutInMinutes = 9,
DnsSettings = new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings("ukrddzvmorpmfsczjwtbvp")
{
DomainNameLabelScope = DomainNameLabelScopeType.TenantReuse,
},
IPTags =
{
new VirtualMachineScaleSetIPTag()
{
IPTagType = "sddgsoemnzgqizale",
Tag = "wufmhrjsakbiaetyara",
}
},
PublicIPPrefixId = new ResourceIdentifier("groxwd"),
PublicIPAddressVersion = IPVersion.IPv4,
DeleteOption = DeleteOption.Delete,
},
PrivateIPAddressVersion = IPVersion.IPv4,
ApplicationGatewayBackendAddressPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}
},
ApplicationSecurityGroups =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}
},
LoadBalancerBackendAddressPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}
},
LoadBalancerInboundNatPools =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}
},
}
},
EnableIPForwarding = true,
DeleteOption = DeleteOption.Delete,
AuxiliaryMode = NetworkInterfaceAuxiliaryMode.None,
AuxiliarySku = NetworkInterfaceAuxiliarySku.None,
}
},
                                NetworkApiVersion = NetworkApiVersion.TwoThousandTwenty1101,
                            },
                            SecurityProfile = new SecurityProfile()
                            {
                                UefiSettings = new UefiSettings()
                                {
                                    SecureBootEnabled = true,
                                    VTpmEnabled = true,
                                },
                                EncryptionAtHost = true,
                                SecurityType = SecurityType.TrustedLaunch,
                                UserAssignedIdentityResourceId = "qoersmt",
                                ProxyAgentSettings = new ProxyAgentSettings()
                                {
                                    Enabled = true,
                                    Mode = Mode.Audit,
                                    KeyIncarnationId = 20,
                                },
                            },
                            BootDiagnostics = new BootDiagnostics()
                            {
                                Enabled = true,
                                StorageUri = new Uri("rzamfwghybpx"),
                            },
                            ExtensionProfile = new VirtualMachineScaleSetExtensionProfile()
                            {
                                Extensions =
{
new VirtualMachineScaleSetExtension()
{
Name = "bndxuxx",
ForceUpdateTag = "yhgxw",
Publisher = "kpxtirxjfprhs",
TypePropertiesType = "pgjilctjjwaa",
TypeHandlerVersion = "zevivcoilxmbwlrihhhibq",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
ProtectedSettings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
ProvisionAfterExtensions =
{
"nftzosroolbcwmpupujzqwqe"
},
SuppressFailures = true,
ProtectedSettingsFromKeyVault = new KeyVaultSecretReference(new Uri("vyhzfkqsqanacgzjthpjoe"),new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}),
}
},
                                ExtensionsTimeBudget = "mbhjahtdygwgyszdwjtvlvtgchdwil",
                            },
                            LicenseType = "v",
                            ScheduledEventsProfile = new ScheduledEventsProfile()
                            {
                                TerminateNotificationProfile = new TerminateNotificationProfile()
                                {
                                    NotBeforeTimeout = "iljppmmw",
                                    Enable = true,
                                },
                                OSImageNotificationProfile = new OSImageNotificationProfile()
                                {
                                    NotBeforeTimeout = "olbpadmevekyczfokodtfprxti",
                                    Enable = true,
                                },
                            },
                            UserData = "s",
                            CapacityReservationGroupId = new ResourceIdentifier("groxwd"),
                            GalleryApplications =
{
new VmGalleryApplication("lfxqiadouhmbovcd")
{
Tags = "eyrqjbib",
Order = 5,
ConfigurationReference = "ulztmiavpojpbpbddgnuuiimxcpau",
TreatFailureAsDeploymentFailure = true,
EnableAutomaticUpgrade = true,
}
},
                            HardwareVmSizeProperties = new VmSizeProperties()
                            {
                                VCPUsAvailable = 16,
                                VCPUsPerCore = 23,
                            },
                            ServiceArtifactReferenceId = new ResourceIdentifier("qlkeeyskyr"),
                            SecurityPostureReference = new SecurityPostureReference()
                            {
                                Id = "mubredelfbshboaxrsxiajihahaa",
                                ExcludeExtensions =
{
new VirtualMachineExtension(new AzureLocation("wrqxhbqaebwkzmcdmngyqmhogc"))
{
ForceUpdateTag = "oriasdwawveilgusfrn",
Publisher = "rxoajzb",
TypePropertiesType = "vhrtgbaqdkbrrqxsdiiaqxksmqukl",
TypeHandlerVersion = "bvzbiibps",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
ProtectedSettings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
{
}),
InstanceView = new VirtualMachineExtensionInstanceView()
{
Name = "ip",
VirtualMachineExtensionInstanceViewType = "woadxvobquacooaujyg",
TypeHandlerVersion = "ftkkqxdqiofgsusvxekdcpua",
Substatuses =
{
new InstanceViewStatus()
{
Code = "kuehuahsdozupmjrtp",
Level = StatusLevelType.Info,
DisplayStatus = "pomenhgqjoelbxvsqwxxexqxv",
Message = "jxjjmlwbjylzvrislyyflhnmizhiu",
Time = DateTimeOffset.Parse("2024-04-29T21:51:44.042Z"),
}
},
Statuses =
{
new InstanceViewStatus()
{
Code = "kuehuahsdozupmjrtp",
Level = StatusLevelType.Info,
DisplayStatus = "pomenhgqjoelbxvsqwxxexqxv",
Message = "jxjjmlwbjylzvrislyyflhnmizhiu",
Time = DateTimeOffset.Parse("2024-04-29T21:51:44.042Z"),
}
},
},
SuppressFailures = true,
ProtectedSettingsFromKeyVault = new KeyVaultSecretReference(new Uri("vyhzfkqsqanacgzjthpjoe"),new WritableSubResource()
{
Id = new ResourceIdentifier("groxwd"),
}),
ProvisionAfterExtensions =
{
"lwsfavklrgzuwmyxscskt"
},
Tags =
{
},
}
},
                            },
                        },
                        ComputeApiVersion = "2023-07-01",
                        PlatformFaultDomainCount = 1,
                    },
                },
            };
            ArmOperation<FleetResource> lro = await fleet.UpdateAsync(WaitUntil.Completed, patch);
            FleetResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FleetData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Fleets_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_FleetsDelete()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_Delete.json
            // this example is just showing the usage of "Fleets_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            string fleetName = "testFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, fleetName);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation
            await fleet.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Fleets_ListVirtualMachineScaleSets
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetVirtualMachineScaleSets_FleetsListVirtualMachineScaleSets()
        {
            // Generated from example definition: specification/azurefleet/resource-manager/Microsoft.AzureFleet/preview/2024-05-01-preview/examples/Fleets_ListVirtualMachineScaleSets.json
            // this example is just showing the usage of "Fleets_ListVirtualMachineScaleSets" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this FleetResource created on azure
            // for more information of creating FleetResource, please refer to the document of FleetResource
            string subscriptionId = "1DC2F28C-A625-4B0E-9748-9885A3C9E9EB";
            string resourceGroupName = "rgazurefleet";
            string name = "myFleet";
            ResourceIdentifier fleetResourceId = FleetResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name);
            FleetResource fleet = client.GetFleetResource(fleetResourceId);

            // invoke the operation and iterate over the result
            await foreach (VirtualMachineScaleSet item in fleet.GetVirtualMachineScaleSetsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
