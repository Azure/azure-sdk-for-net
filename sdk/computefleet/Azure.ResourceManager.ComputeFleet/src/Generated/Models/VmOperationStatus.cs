// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> Virtual Machine operation status values. </summary>
    public readonly partial struct VmOperationStatus : IEquatable<VmOperationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VmOperationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VmOperationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatingValue = "Creating";
        private const string CanceledValue = "Canceled";
        private const string CancelFailedStatusUnknownValue = "CancelFailedStatusUnknown";
        private const string FailedValue = "Failed";
        private const string SucceededValue = "Succeeded";

        /// <summary> Indicates that the virtual machine is either in the process of being created or is scheduled to be created. </summary>
        public static VmOperationStatus Creating { get; } = new VmOperationStatus(CreatingValue);
        /// <summary> Indicates that the cancellation request was successful because the virtual machine had not been created yet. </summary>
        public static VmOperationStatus Canceled { get; } = new VmOperationStatus(CanceledValue);
        /// <summary> Indicates that the cancellation request could not be applied because the virtual machine had already been created. </summary>
        public static VmOperationStatus CancelFailedStatusUnknown { get; } = new VmOperationStatus(CancelFailedStatusUnknownValue);
        /// <summary> Indicates that the virtual machine operation failed. </summary>
        public static VmOperationStatus Failed { get; } = new VmOperationStatus(FailedValue);
        /// <summary> Indicates that the virtual machine operation completed successfully. </summary>
        public static VmOperationStatus Succeeded { get; } = new VmOperationStatus(SucceededValue);
        /// <summary> Determines if two <see cref="VmOperationStatus"/> values are the same. </summary>
        public static bool operator ==(VmOperationStatus left, VmOperationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VmOperationStatus"/> values are not the same. </summary>
        public static bool operator !=(VmOperationStatus left, VmOperationStatus right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VmOperationStatus"/>. </summary>
        public static implicit operator VmOperationStatus(string value) => new VmOperationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VmOperationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VmOperationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
