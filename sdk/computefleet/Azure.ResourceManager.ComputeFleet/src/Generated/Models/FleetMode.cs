// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> Modes for Compute Fleet. </summary>
    public readonly partial struct FleetMode : IEquatable<FleetMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FleetMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FleetMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ManagedValue = "Managed";
        private const string InstanceValue = "Instance";

        /// <summary> Default. Managed is the default mode for Compute Fleet where VMs are provisioned via VMSS. </summary>
        public static FleetMode Managed { get; } = new FleetMode(ManagedValue);
        /// <summary> Instance mode for Compute Fleet will directly provision VM instances. </summary>
        public static FleetMode Instance { get; } = new FleetMode(InstanceValue);
        /// <summary> Determines if two <see cref="FleetMode"/> values are the same. </summary>
        public static bool operator ==(FleetMode left, FleetMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FleetMode"/> values are not the same. </summary>
        public static bool operator !=(FleetMode left, FleetMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="FleetMode"/>. </summary>
        public static implicit operator FleetMode(string value) => new FleetMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FleetMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FleetMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
