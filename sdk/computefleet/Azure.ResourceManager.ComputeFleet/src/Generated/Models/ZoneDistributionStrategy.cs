// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> Distribution strategies for Compute Fleet zone allocation policy. </summary>
    public readonly partial struct ZoneDistributionStrategy : IEquatable<ZoneDistributionStrategy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ZoneDistributionStrategy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ZoneDistributionStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BestEffortSingleZoneValue = "BestEffortSingleZone";
        private const string PrioritizedValue = "Prioritized";

        /// <summary>
        /// Default. Compute Fleet allocates all Fleet capacity within a single zone based on best effort.
        /// If capacity is not available, Compute Fleet can allocate capacity in different zones.
        /// </summary>
        public static ZoneDistributionStrategy BestEffortSingleZone { get; } = new ZoneDistributionStrategy(BestEffortSingleZoneValue);
        /// <summary>
        /// Compute Fleet allocates capacity based on zone preferences.
        /// Higher priority zones are filled first before allocating to lower priority zones.
        /// </summary>
        public static ZoneDistributionStrategy Prioritized { get; } = new ZoneDistributionStrategy(PrioritizedValue);
        /// <summary> Determines if two <see cref="ZoneDistributionStrategy"/> values are the same. </summary>
        public static bool operator ==(ZoneDistributionStrategy left, ZoneDistributionStrategy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ZoneDistributionStrategy"/> values are not the same. </summary>
        public static bool operator !=(ZoneDistributionStrategy left, ZoneDistributionStrategy right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ZoneDistributionStrategy"/>. </summary>
        public static implicit operator ZoneDistributionStrategy(string value) => new ZoneDistributionStrategy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ZoneDistributionStrategy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ZoneDistributionStrategy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
