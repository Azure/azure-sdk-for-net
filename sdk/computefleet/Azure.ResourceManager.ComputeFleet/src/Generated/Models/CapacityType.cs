// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ComputeFleet.Models
{
    /// <summary> Capacity types for Compute Fleet. </summary>
    public readonly partial struct CapacityType : IEquatable<CapacityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CapacityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CapacityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VmValue = "VM";
        private const string VCpuValue = "VCpu";

        /// <summary> Default. VM is the default capacity type for Compute Fleet where Fleet capacity is provisioned in terms of VMs. </summary>
        public static CapacityType Vm { get; } = new CapacityType(VmValue);
        /// <summary>
        /// VCpu is the capacity type for Compute Fleet where Fleet capacity is provisioned in terms of VCpus.
        /// If VCpu capacity is not exactly divisible by VCpu count in VMSizes, Fleet capacity in VCpus will be overprovisioned by default.
        /// </summary>
        public static CapacityType VCpu { get; } = new CapacityType(VCpuValue);
        /// <summary> Determines if two <see cref="CapacityType"/> values are the same. </summary>
        public static bool operator ==(CapacityType left, CapacityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CapacityType"/> values are not the same. </summary>
        public static bool operator !=(CapacityType left, CapacityType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CapacityType"/>. </summary>
        public static implicit operator CapacityType(string value) => new CapacityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CapacityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CapacityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
