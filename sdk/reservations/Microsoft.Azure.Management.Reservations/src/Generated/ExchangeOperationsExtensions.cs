// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Reservations
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExchangeOperations.
    /// </summary>
    public static partial class ExchangeOperationsExtensions
    {
            /// <summary>
            /// Exchange Reservation(s)
            /// </summary>
            /// <remarks>
            /// Returns one or more `Reservations` in exchange for one or more
            /// `Reservation` purchases.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request containing the refunds and purchases that need to be executed.
            /// </param>
            public static ExchangeOperationResultResponse Post(this IExchangeOperations operations, ExchangeRequest body)
            {
                return operations.PostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exchange Reservation(s)
            /// </summary>
            /// <remarks>
            /// Returns one or more `Reservations` in exchange for one or more
            /// `Reservation` purchases.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request containing the refunds and purchases that need to be executed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExchangeOperationResultResponse> PostAsync(this IExchangeOperations operations, ExchangeRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exchange Reservation(s)
            /// </summary>
            /// <remarks>
            /// Returns one or more `Reservations` in exchange for one or more
            /// `Reservation` purchases.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request containing the refunds and purchases that need to be executed.
            /// </param>
            public static ExchangeOperationResultResponse BeginPost(this IExchangeOperations operations, ExchangeRequest body)
            {
                return operations.BeginPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exchange Reservation(s)
            /// </summary>
            /// <remarks>
            /// Returns one or more `Reservations` in exchange for one or more
            /// `Reservation` purchases.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request containing the refunds and purchases that need to be executed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExchangeOperationResultResponse> BeginPostAsync(this IExchangeOperations operations, ExchangeRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
