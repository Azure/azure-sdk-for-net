// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Reservations
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CalculateExchangeOperations.
    /// </summary>
    public static partial class CalculateExchangeOperationsExtensions
    {
            /// <summary>
            /// Calculates the refund amounts and price of the new purchases.
            /// </summary>
            /// <remarks>
            /// Calculates price for exchanging `Reservations` if there are no policy
            /// errors.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request containing purchases and refunds that need to be executed.
            /// </param>
            public static CalculateExchangeOperationResultResponse Post(this ICalculateExchangeOperations operations, CalculateExchangeRequest body)
            {
                return operations.PostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculates the refund amounts and price of the new purchases.
            /// </summary>
            /// <remarks>
            /// Calculates price for exchanging `Reservations` if there are no policy
            /// errors.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request containing purchases and refunds that need to be executed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CalculateExchangeOperationResultResponse> PostAsync(this ICalculateExchangeOperations operations, CalculateExchangeRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Calculates the refund amounts and price of the new purchases.
            /// </summary>
            /// <remarks>
            /// Calculates price for exchanging `Reservations` if there are no policy
            /// errors.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request containing purchases and refunds that need to be executed.
            /// </param>
            public static CalculateExchangeOperationResultResponse BeginPost(this ICalculateExchangeOperations operations, CalculateExchangeRequest body)
            {
                return operations.BeginPostAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculates the refund amounts and price of the new purchases.
            /// </summary>
            /// <remarks>
            /// Calculates price for exchanging `Reservations` if there are no policy
            /// errors.
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Request containing purchases and refunds that need to be executed.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CalculateExchangeOperationResultResponse> BeginPostAsync(this ICalculateExchangeOperations operations, CalculateExchangeRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPostWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
