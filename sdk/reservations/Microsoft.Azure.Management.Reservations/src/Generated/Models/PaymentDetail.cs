// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Reservations.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information about payment related to a reservation order.
    /// </summary>
    public partial class PaymentDetail
    {
        /// <summary>
        /// Initializes a new instance of the PaymentDetail class.
        /// </summary>
        public PaymentDetail()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PaymentDetail class.
        /// </summary>
        /// <param name="dueDate">Date when the payment needs to be
        /// done.</param>
        /// <param name="paymentDate">Date when the transaction is completed.
        /// Is null when it is scheduled.</param>
        /// <param name="pricingCurrencyTotal">Amount in pricing currency. Tax
        /// not included.</param>
        /// <param name="billingCurrencyTotal">Amount charged in Billing
        /// currency. Tax not included. Is null for future payments</param>
        /// <param name="billingAccount">Shows the Account that is charged for
        /// this payment.</param>
        /// <param name="status">Possible values include: 'Succeeded',
        /// 'Failed', 'Scheduled', 'Cancelled'</param>
        public PaymentDetail(System.DateTime? dueDate = default(System.DateTime?), System.DateTime? paymentDate = default(System.DateTime?), Price pricingCurrencyTotal = default(Price), Price billingCurrencyTotal = default(Price), string billingAccount = default(string), string status = default(string), ExtendedStatusInfo extendedStatusInfo = default(ExtendedStatusInfo))
        {
            DueDate = dueDate;
            PaymentDate = paymentDate;
            PricingCurrencyTotal = pricingCurrencyTotal;
            BillingCurrencyTotal = billingCurrencyTotal;
            BillingAccount = billingAccount;
            Status = status;
            ExtendedStatusInfo = extendedStatusInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets date when the payment needs to be done.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "dueDate")]
        public System.DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or sets date when the transaction is completed. Is null when
        /// it is scheduled.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "paymentDate")]
        public System.DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Gets or sets amount in pricing currency. Tax not included.
        /// </summary>
        [JsonProperty(PropertyName = "pricingCurrencyTotal")]
        public Price PricingCurrencyTotal { get; set; }

        /// <summary>
        /// Gets or sets amount charged in Billing currency. Tax not included.
        /// Is null for future payments
        /// </summary>
        [JsonProperty(PropertyName = "billingCurrencyTotal")]
        public Price BillingCurrencyTotal { get; set; }

        /// <summary>
        /// Gets or sets shows the Account that is charged for this payment.
        /// </summary>
        [JsonProperty(PropertyName = "billingAccount")]
        public string BillingAccount { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Succeeded', 'Failed',
        /// 'Scheduled', 'Cancelled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "extendedStatusInfo")]
        public ExtendedStatusInfo ExtendedStatusInfo { get; set; }

    }
}
