// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Reservations.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The properties of the reservations
    /// </summary>
    public partial class ReservationsProperties
    {
        /// <summary>
        /// Initializes a new instance of the ReservationsProperties class.
        /// </summary>
        public ReservationsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReservationsProperties class.
        /// </summary>
        /// <param name="reservedResourceType">The type of the resource that is
        /// being reserved. Possible values include: 'VirtualMachines',
        /// 'SqlDatabases', 'SuseLinux', 'CosmosDb', 'RedHat',
        /// 'SqlDataWarehouse', 'VMwareCloudSimple', 'RedHatOsa', 'Databricks',
        /// 'AppService', 'ManagedDisk', 'BlockBlob', 'RedisCache',
        /// 'AzureDataExplorer', 'MySql', 'MariaDb', 'PostgreSql',
        /// 'DedicatedHost', 'SapHana', 'SqlAzureHybridBenefit', 'AVS',
        /// 'DataFactory', 'NetAppStorage', 'AzureFiles', 'SqlEdge',
        /// 'VirtualMachineSoftware'</param>
        /// <param name="instanceFlexibility">Allows reservation discount to be
        /// applied across skus within the same Autofit group. Not all skus
        /// support instance size flexibility. Possible values include: 'On',
        /// 'Off'</param>
        /// <param name="displayName">Friendly name for user to easily identify
        /// the reservation</param>
        /// <param name="appliedScopes">The list of applied scopes</param>
        /// <param name="appliedScopeType">The applied scope type. Possible
        /// values include: 'Single', 'Shared'</param>
        /// <param name="archived">Indicates if the reservation is
        /// archived</param>
        /// <param name="capabilities">Capabilities of the reservation</param>
        /// <param name="quantity">Quantity of the SKUs that are part of the
        /// Reservation.</param>
        /// <param name="provisioningState">Current state of the reservation.
        /// Possible values include: 'Creating', 'PendingResourceHold',
        /// 'ConfirmedResourceHold', 'PendingBilling', 'ConfirmedBilling',
        /// 'Created', 'Succeeded', 'Cancelled', 'Expired', 'BillingFailed',
        /// 'Failed', 'Split', 'Merged'</param>
        /// <param name="effectiveDateTime">DateTime of the Reservation
        /// starting when this version is effective from.</param>
        /// <param name="benefitStartTime">This is the DateTime when the
        /// reservation benefit started.</param>
        /// <param name="lastUpdatedDateTime">DateTime of the last time the
        /// Reservation was updated.</param>
        /// <param name="expiryDate">This is the date when the Reservation will
        /// expire.</param>
        /// <param name="skuDescription">Description of the SKU in
        /// english.</param>
        /// <param name="extendedStatusInfo">The message giving detailed
        /// information about the status code.</param>
        /// <param name="billingPlan">The billing plan options available for
        /// this SKU. Possible values include: 'Upfront', 'Monthly'</param>
        /// <param name="displayProvisioningState">The provisioning state of
        /// the reservation for display, e.g. Succeeded</param>
        /// <param name="provisioningSubState">The provisioning state of the
        /// reservation, e.g. Succeeded</param>
        /// <param name="purchaseDate">This is the date when the Reservation
        /// was purchased.</param>
        /// <param name="renew">Setting this to true will automatically
        /// purchase a new reservation on the expiration date time.</param>
        /// <param name="renewSource">Reservation Id of the reservation from
        /// which this reservation is renewed. Format of the resource Id is
        /// /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.</param>
        /// <param name="renewDestination">Reservation Id of the reservation
        /// which is purchased because of renew. Format of the resource Id is
        /// /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.</param>
        /// <param name="term">Represent the term of Reservation. Possible
        /// values include: 'P1Y', 'P3Y', 'P5Y'</param>
        /// <param name="userFriendlyAppliedScopeType">The applied scope type
        /// of the reservation for display, e.g. Shared</param>
        /// <param name="userFriendlyRenewState">The renew state of the
        /// reservation for display, e.g. On</param>
        /// <param name="utilization">Reservation utilization</param>
        public ReservationsProperties(string reservedResourceType = default(string), string instanceFlexibility = default(string), string displayName = default(string), IList<string> appliedScopes = default(IList<string>), string appliedScopeType = default(string), bool? archived = default(bool?), string capabilities = default(string), int? quantity = default(int?), string provisioningState = default(string), System.DateTime? effectiveDateTime = default(System.DateTime?), System.DateTime? benefitStartTime = default(System.DateTime?), System.DateTime? lastUpdatedDateTime = default(System.DateTime?), System.DateTime? expiryDate = default(System.DateTime?), string skuDescription = default(string), ExtendedStatusInfo extendedStatusInfo = default(ExtendedStatusInfo), string billingPlan = default(string), string displayProvisioningState = default(string), string provisioningSubState = default(string), System.DateTime? purchaseDate = default(System.DateTime?), ReservationSplitProperties splitProperties = default(ReservationSplitProperties), ReservationMergeProperties mergeProperties = default(ReservationMergeProperties), string billingScopeId = default(string), bool? renew = default(bool?), string renewSource = default(string), string renewDestination = default(string), RenewPropertiesResponse renewProperties = default(RenewPropertiesResponse), string term = default(string), string userFriendlyAppliedScopeType = default(string), string userFriendlyRenewState = default(string), ReservationsPropertiesUtilization utilization = default(ReservationsPropertiesUtilization))
        {
            ReservedResourceType = reservedResourceType;
            InstanceFlexibility = instanceFlexibility;
            DisplayName = displayName;
            AppliedScopes = appliedScopes;
            AppliedScopeType = appliedScopeType;
            Archived = archived;
            Capabilities = capabilities;
            Quantity = quantity;
            ProvisioningState = provisioningState;
            EffectiveDateTime = effectiveDateTime;
            BenefitStartTime = benefitStartTime;
            LastUpdatedDateTime = lastUpdatedDateTime;
            ExpiryDate = expiryDate;
            SkuDescription = skuDescription;
            ExtendedStatusInfo = extendedStatusInfo;
            BillingPlan = billingPlan;
            DisplayProvisioningState = displayProvisioningState;
            ProvisioningSubState = provisioningSubState;
            PurchaseDate = purchaseDate;
            SplitProperties = splitProperties;
            MergeProperties = mergeProperties;
            BillingScopeId = billingScopeId;
            Renew = renew;
            RenewSource = renewSource;
            RenewDestination = renewDestination;
            RenewProperties = renewProperties;
            Term = term;
            UserFriendlyAppliedScopeType = userFriendlyAppliedScopeType;
            UserFriendlyRenewState = userFriendlyRenewState;
            Utilization = utilization;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of the resource that is being reserved.
        /// Possible values include: 'VirtualMachines', 'SqlDatabases',
        /// 'SuseLinux', 'CosmosDb', 'RedHat', 'SqlDataWarehouse',
        /// 'VMwareCloudSimple', 'RedHatOsa', 'Databricks', 'AppService',
        /// 'ManagedDisk', 'BlockBlob', 'RedisCache', 'AzureDataExplorer',
        /// 'MySql', 'MariaDb', 'PostgreSql', 'DedicatedHost', 'SapHana',
        /// 'SqlAzureHybridBenefit', 'AVS', 'DataFactory', 'NetAppStorage',
        /// 'AzureFiles', 'SqlEdge', 'VirtualMachineSoftware'
        /// </summary>
        [JsonProperty(PropertyName = "reservedResourceType")]
        public string ReservedResourceType { get; set; }

        /// <summary>
        /// Gets or sets allows reservation discount to be applied across skus
        /// within the same Autofit group. Not all skus support instance size
        /// flexibility. Possible values include: 'On', 'Off'
        /// </summary>
        [JsonProperty(PropertyName = "instanceFlexibility")]
        public string InstanceFlexibility { get; set; }

        /// <summary>
        /// Gets or sets friendly name for user to easily identify the
        /// reservation
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the list of applied scopes
        /// </summary>
        [JsonProperty(PropertyName = "appliedScopes")]
        public IList<string> AppliedScopes { get; set; }

        /// <summary>
        /// Gets or sets the applied scope type. Possible values include:
        /// 'Single', 'Shared'
        /// </summary>
        [JsonProperty(PropertyName = "appliedScopeType")]
        public string AppliedScopeType { get; set; }

        /// <summary>
        /// Gets or sets indicates if the reservation is archived
        /// </summary>
        [JsonProperty(PropertyName = "archived")]
        public bool? Archived { get; set; }

        /// <summary>
        /// Gets or sets capabilities of the reservation
        /// </summary>
        [JsonProperty(PropertyName = "capabilities")]
        public string Capabilities { get; set; }

        /// <summary>
        /// Gets or sets quantity of the SKUs that are part of the Reservation.
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or sets current state of the reservation. Possible values
        /// include: 'Creating', 'PendingResourceHold',
        /// 'ConfirmedResourceHold', 'PendingBilling', 'ConfirmedBilling',
        /// 'Created', 'Succeeded', 'Cancelled', 'Expired', 'BillingFailed',
        /// 'Failed', 'Split', 'Merged'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets dateTime of the Reservation starting when this version
        /// is effective from.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveDateTime")]
        public System.DateTime? EffectiveDateTime { get; set; }

        /// <summary>
        /// Gets or sets this is the DateTime when the reservation benefit
        /// started.
        /// </summary>
        [JsonProperty(PropertyName = "benefitStartTime")]
        public System.DateTime? BenefitStartTime { get; set; }

        /// <summary>
        /// Gets dateTime of the last time the Reservation was updated.
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdatedDateTime")]
        public System.DateTime? LastUpdatedDateTime { get; private set; }

        /// <summary>
        /// Gets or sets this is the date when the Reservation will expire.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "expiryDate")]
        public System.DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or sets description of the SKU in english.
        /// </summary>
        [JsonProperty(PropertyName = "skuDescription")]
        public string SkuDescription { get; set; }

        /// <summary>
        /// Gets or sets the message giving detailed information about the
        /// status code.
        /// </summary>
        [JsonProperty(PropertyName = "extendedStatusInfo")]
        public ExtendedStatusInfo ExtendedStatusInfo { get; set; }

        /// <summary>
        /// Gets or sets the billing plan options available for this SKU.
        /// Possible values include: 'Upfront', 'Monthly'
        /// </summary>
        [JsonProperty(PropertyName = "billingPlan")]
        public string BillingPlan { get; set; }

        /// <summary>
        /// Gets the provisioning state of the reservation for display, e.g.
        /// Succeeded
        /// </summary>
        [JsonProperty(PropertyName = "displayProvisioningState")]
        public string DisplayProvisioningState { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the reservation, e.g. Succeeded
        /// </summary>
        [JsonProperty(PropertyName = "provisioningSubState")]
        public string ProvisioningSubState { get; private set; }

        /// <summary>
        /// Gets or sets this is the date when the Reservation was purchased.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "purchaseDate")]
        public System.DateTime? PurchaseDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "splitProperties")]
        public ReservationSplitProperties SplitProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mergeProperties")]
        public ReservationMergeProperties MergeProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "billingScopeId")]
        public string BillingScopeId { get; set; }

        /// <summary>
        /// Gets or sets setting this to true will automatically purchase a new
        /// reservation on the expiration date time.
        /// </summary>
        [JsonProperty(PropertyName = "renew")]
        public bool? Renew { get; set; }

        /// <summary>
        /// Gets or sets reservation Id of the reservation from which this
        /// reservation is renewed. Format of the resource Id is
        /// /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
        /// </summary>
        [JsonProperty(PropertyName = "renewSource")]
        public string RenewSource { get; set; }

        /// <summary>
        /// Gets or sets reservation Id of the reservation which is purchased
        /// because of renew. Format of the resource Id is
        /// /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
        /// </summary>
        [JsonProperty(PropertyName = "renewDestination")]
        public string RenewDestination { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "renewProperties")]
        public RenewPropertiesResponse RenewProperties { get; set; }

        /// <summary>
        /// Gets or sets represent the term of Reservation. Possible values
        /// include: 'P1Y', 'P3Y', 'P5Y'
        /// </summary>
        [JsonProperty(PropertyName = "term")]
        public string Term { get; set; }

        /// <summary>
        /// Gets the applied scope type of the reservation for display, e.g.
        /// Shared
        /// </summary>
        [JsonProperty(PropertyName = "userFriendlyAppliedScopeType")]
        public string UserFriendlyAppliedScopeType { get; private set; }

        /// <summary>
        /// Gets the renew state of the reservation for display, e.g. On
        /// </summary>
        [JsonProperty(PropertyName = "userFriendlyRenewState")]
        public string UserFriendlyRenewState { get; private set; }

        /// <summary>
        /// Gets reservation utilization
        /// </summary>
        [JsonProperty(PropertyName = "utilization")]
        public ReservationsPropertiesUtilization Utilization { get; private set; }

    }
}
