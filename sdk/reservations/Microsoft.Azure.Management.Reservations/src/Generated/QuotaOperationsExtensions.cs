// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Reservations
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for QuotaOperations.
    /// </summary>
    public static partial class QuotaOperationsExtensions
    {
            /// <summary>
            /// Gets the current quota limit and usages for the resource provider for the
            /// specified location for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limit and usages for the specific resource
            /// for resource provider for the specified location. This response can be used
            /// to submit quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            public static CurrentQuotaLimitBase Get(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName)
            {
                return operations.GetAsync(subscriptionId, providerId, location, resourceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current quota limit and usages for the resource provider for the
            /// specified location for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limit and usages for the specific resource
            /// for resource provider for the specified location. This response can be used
            /// to submit quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CurrentQuotaLimitBase> GetAsync(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(subscriptionId, providerId, location, resourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information for the specific resource. This
            /// information consists of information regarding that specific resources. For
            /// the specific resource, if it requires an update to the quota, update the
            /// limit field in the response from the Get request to the new value of quota.
            /// Then, submit this updated JSON object to this quota request API. This will
            /// update the quota to the value specified. The location header in the
            /// response will be used to track the status of the quota request. Please
            /// check the provisioningState field in the response. The Patch operation can
            /// be used also to update the quota.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            public static object CreateOrUpdate(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CurrentQuotaLimitBase createQuotaRequest)
            {
                return operations.CreateOrUpdateAsync(subscriptionId, providerId, location, resourceName, createQuotaRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information for the specific resource. This
            /// information consists of information regarding that specific resources. For
            /// the specific resource, if it requires an update to the quota, update the
            /// limit field in the response from the Get request to the new value of quota.
            /// Then, submit this updated JSON object to this quota request API. This will
            /// update the quota to the value specified. The location header in the
            /// response will be used to track the status of the quota request. Please
            /// check the provisioningState field in the response. The Patch operation can
            /// be used also to update the quota.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateAsync(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CurrentQuotaLimitBase createQuotaRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(subscriptionId, providerId, location, resourceName, createQuotaRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information for the specific resource. This
            /// information consists of information regarding that specific resources. For
            /// the specific resource, if it requires an update to the quota, update the
            /// limit field in the response from the Get request to the new value of quota.
            /// Then, submit this updated JSON object to this quota request API. This will
            /// update the quota to the value specified. The location header in the
            /// response will be used to track the status of the quota request. Please
            /// check the provisioningState field in the response. The Put operation can be
            /// used also to update the quota.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            public static object Update(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CurrentQuotaLimitBase createQuotaRequest)
            {
                return operations.UpdateAsync(subscriptionId, providerId, location, resourceName, createQuotaRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information for the specific resource. This
            /// information consists of information regarding that specific resources. For
            /// the specific resource, if it requires an update to the quota, update the
            /// limit field in the response from the Get request to the new value of quota.
            /// Then, submit this updated JSON object to this quota request API. This will
            /// update the quota to the value specified. The location header in the
            /// response will be used to track the status of the quota request. Please
            /// check the provisioningState field in the response. The Put operation can be
            /// used also to update the quota.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAsync(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CurrentQuotaLimitBase createQuotaRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(subscriptionId, providerId, location, resourceName, createQuotaRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the current quota limit and usages for all the resources by the
            /// resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limits and usages for the resource provider
            /// for the specified location. This response can be used to submit
            /// quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            public static IPage<CurrentQuotaLimitBase> List(this IQuotaOperations operations, string subscriptionId, string providerId, string location)
            {
                return operations.ListAsync(subscriptionId, providerId, location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current quota limit and usages for all the resources by the
            /// resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limits and usages for the resource provider
            /// for the specified location. This response can be used to submit
            /// quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CurrentQuotaLimitBase>> ListAsync(this IQuotaOperations operations, string subscriptionId, string providerId, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(subscriptionId, providerId, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information for the specific resource. This
            /// information consists of information regarding that specific resources. For
            /// the specific resource, if it requires an update to the quota, update the
            /// limit field in the response from the Get request to the new value of quota.
            /// Then, submit this updated JSON object to this quota request API. This will
            /// update the quota to the value specified. The location header in the
            /// response will be used to track the status of the quota request. Please
            /// check the provisioningState field in the response. The Patch operation can
            /// be used also to update the quota.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            public static object BeginCreateOrUpdate(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CurrentQuotaLimitBase createQuotaRequest)
            {
                return operations.BeginCreateOrUpdateAsync(subscriptionId, providerId, location, resourceName, createQuotaRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information for the specific resource. This
            /// information consists of information regarding that specific resources. For
            /// the specific resource, if it requires an update to the quota, update the
            /// limit field in the response from the Get request to the new value of quota.
            /// Then, submit this updated JSON object to this quota request API. This will
            /// update the quota to the value specified. The location header in the
            /// response will be used to track the status of the quota request. Please
            /// check the provisioningState field in the response. The Patch operation can
            /// be used also to update the quota.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginCreateOrUpdateAsync(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CurrentQuotaLimitBase createQuotaRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(subscriptionId, providerId, location, resourceName, createQuotaRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information for the specific resource. This
            /// information consists of information regarding that specific resources. For
            /// the specific resource, if it requires an update to the quota, update the
            /// limit field in the response from the Get request to the new value of quota.
            /// Then, submit this updated JSON object to this quota request API. This will
            /// update the quota to the value specified. The location header in the
            /// response will be used to track the status of the quota request. Please
            /// check the provisioningState field in the response. The Put operation can be
            /// used also to update the quota.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            public static object BeginUpdate(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CurrentQuotaLimitBase createQuotaRequest)
            {
                return operations.BeginUpdateAsync(subscriptionId, providerId, location, resourceName, createQuotaRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submits a Quota Request for a resource provider at the specified location
            /// for the specific resource in the parameter.
            /// </summary>
            /// <remarks>
            /// Submits Quota change request for a resource provider for the specified
            /// location for the specific resource in the parameter. To use, first make a
            /// Get request to get quota information for the specific resource. This
            /// information consists of information regarding that specific resources. For
            /// the specific resource, if it requires an update to the quota, update the
            /// limit field in the response from the Get request to the new value of quota.
            /// Then, submit this updated JSON object to this quota request API. This will
            /// update the quota to the value specified. The location header in the
            /// response will be used to track the status of the quota request. Please
            /// check the provisioningState field in the response. The Put operation can be
            /// used also to update the quota.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Azure subscription id.
            /// </param>
            /// <param name='providerId'>
            /// Azure resource Provider id.
            /// </param>
            /// <param name='location'>
            /// Azure region.
            /// </param>
            /// <param name='resourceName'>
            /// The Resource name for the specific resource provider, such as SKU name for
            /// Microsoft.Compute, pool for Microsoft.Batch.
            /// </param>
            /// <param name='createQuotaRequest'>
            /// Quota requests payload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginUpdateAsync(this IQuotaOperations operations, string subscriptionId, string providerId, string location, string resourceName, CurrentQuotaLimitBase createQuotaRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(subscriptionId, providerId, location, resourceName, createQuotaRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the current quota limit and usages for all the resources by the
            /// resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limits and usages for the resource provider
            /// for the specified location. This response can be used to submit
            /// quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CurrentQuotaLimitBase> ListNext(this IQuotaOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the current quota limit and usages for all the resources by the
            /// resource provider at the specified location.
            /// </summary>
            /// <remarks>
            /// This API gets the current quota limits and usages for the resource provider
            /// for the specified location. This response can be used to submit
            /// quotaRequests.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CurrentQuotaLimitBase>> ListNextAsync(this IQuotaOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
