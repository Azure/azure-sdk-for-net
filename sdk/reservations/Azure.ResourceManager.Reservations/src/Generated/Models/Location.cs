// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Reservations.Models
{
    /// <summary> Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created. </summary>
    internal readonly partial struct Location : IEquatable<Location>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Location"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Location(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WestusValue = "westus";
        private const string EastusValue = "eastus";
        private const string Eastus2Value = "eastus2";
        private const string NorthcentralusValue = "northcentralus";
        private const string Westus2Value = "westus2";
        private const string SouthcentralusValue = "southcentralus";
        private const string CentralusValue = "centralus";
        private const string WesteuropeValue = "westeurope";
        private const string NortheuropeValue = "northeurope";
        private const string EastasiaValue = "eastasia";
        private const string SoutheastasiaValue = "southeastasia";
        private const string JapaneastValue = "japaneast";
        private const string JapanwestValue = "japanwest";
        private const string BrazilsouthValue = "brazilsouth";
        private const string AustraliaeastValue = "australiaeast";
        private const string AustraliasoutheastValue = "australiasoutheast";
        private const string SouthindiaValue = "southindia";
        private const string WestindiaValue = "westindia";
        private const string CentralindiaValue = "centralindia";
        private const string CanadacentralValue = "canadacentral";
        private const string CanadaeastValue = "canadaeast";
        private const string UksouthValue = "uksouth";
        private const string WestcentralusValue = "westcentralus";
        private const string UkwestValue = "ukwest";

        /// <summary> westus. </summary>
        public static Location Westus { get; } = new Location(WestusValue);
        /// <summary> eastus. </summary>
        public static Location Eastus { get; } = new Location(EastusValue);
        /// <summary> eastus2. </summary>
        public static Location Eastus2 { get; } = new Location(Eastus2Value);
        /// <summary> northcentralus. </summary>
        public static Location Northcentralus { get; } = new Location(NorthcentralusValue);
        /// <summary> westus2. </summary>
        public static Location Westus2 { get; } = new Location(Westus2Value);
        /// <summary> southcentralus. </summary>
        public static Location Southcentralus { get; } = new Location(SouthcentralusValue);
        /// <summary> centralus. </summary>
        public static Location Centralus { get; } = new Location(CentralusValue);
        /// <summary> westeurope. </summary>
        public static Location Westeurope { get; } = new Location(WesteuropeValue);
        /// <summary> northeurope. </summary>
        public static Location Northeurope { get; } = new Location(NortheuropeValue);
        /// <summary> eastasia. </summary>
        public static Location Eastasia { get; } = new Location(EastasiaValue);
        /// <summary> southeastasia. </summary>
        public static Location Southeastasia { get; } = new Location(SoutheastasiaValue);
        /// <summary> japaneast. </summary>
        public static Location Japaneast { get; } = new Location(JapaneastValue);
        /// <summary> japanwest. </summary>
        public static Location Japanwest { get; } = new Location(JapanwestValue);
        /// <summary> brazilsouth. </summary>
        public static Location Brazilsouth { get; } = new Location(BrazilsouthValue);
        /// <summary> australiaeast. </summary>
        public static Location Australiaeast { get; } = new Location(AustraliaeastValue);
        /// <summary> australiasoutheast. </summary>
        public static Location Australiasoutheast { get; } = new Location(AustraliasoutheastValue);
        /// <summary> southindia. </summary>
        public static Location Southindia { get; } = new Location(SouthindiaValue);
        /// <summary> westindia. </summary>
        public static Location Westindia { get; } = new Location(WestindiaValue);
        /// <summary> centralindia. </summary>
        public static Location Centralindia { get; } = new Location(CentralindiaValue);
        /// <summary> canadacentral. </summary>
        public static Location Canadacentral { get; } = new Location(CanadacentralValue);
        /// <summary> canadaeast. </summary>
        public static Location Canadaeast { get; } = new Location(CanadaeastValue);
        /// <summary> uksouth. </summary>
        public static Location Uksouth { get; } = new Location(UksouthValue);
        /// <summary> westcentralus. </summary>
        public static Location Westcentralus { get; } = new Location(WestcentralusValue);
        /// <summary> ukwest. </summary>
        public static Location Ukwest { get; } = new Location(UkwestValue);
        /// <summary> Determines if two <see cref="Location"/> values are the same. </summary>
        public static bool operator ==(Location left, Location right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Location"/> values are not the same. </summary>
        public static bool operator !=(Location left, Location right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Location"/>. </summary>
        public static implicit operator Location(string value) => new Location(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Location other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Location other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
