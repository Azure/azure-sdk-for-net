// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Reservations.Models
{
    /// <summary> The applied scope type. </summary>
    internal readonly partial struct UserFriendlyAppliedScopeType : IEquatable<UserFriendlyAppliedScopeType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UserFriendlyAppliedScopeType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UserFriendlyAppliedScopeType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string SharedValue = "Shared";
        private const string SingleValue = "Single";
        private const string ResourceGroupValue = "ResourceGroup";
        private const string ManagementGroupValue = "ManagementGroup";

        /// <summary> None. </summary>
        public static UserFriendlyAppliedScopeType None { get; } = new UserFriendlyAppliedScopeType(NoneValue);
        /// <summary> Shared. </summary>
        public static UserFriendlyAppliedScopeType Shared { get; } = new UserFriendlyAppliedScopeType(SharedValue);
        /// <summary> Single. </summary>
        public static UserFriendlyAppliedScopeType Single { get; } = new UserFriendlyAppliedScopeType(SingleValue);
        /// <summary> ResourceGroup. </summary>
        public static UserFriendlyAppliedScopeType ResourceGroup { get; } = new UserFriendlyAppliedScopeType(ResourceGroupValue);
        /// <summary> ManagementGroup. </summary>
        public static UserFriendlyAppliedScopeType ManagementGroup { get; } = new UserFriendlyAppliedScopeType(ManagementGroupValue);
        /// <summary> Determines if two <see cref="UserFriendlyAppliedScopeType"/> values are the same. </summary>
        public static bool operator ==(UserFriendlyAppliedScopeType left, UserFriendlyAppliedScopeType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UserFriendlyAppliedScopeType"/> values are not the same. </summary>
        public static bool operator !=(UserFriendlyAppliedScopeType left, UserFriendlyAppliedScopeType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UserFriendlyAppliedScopeType"/>. </summary>
        public static implicit operator UserFriendlyAppliedScopeType(string value) => new UserFriendlyAppliedScopeType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UserFriendlyAppliedScopeType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UserFriendlyAppliedScopeType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
