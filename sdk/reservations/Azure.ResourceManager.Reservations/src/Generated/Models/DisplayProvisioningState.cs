// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Reservations.Models
{
    /// <summary> Represent the current display state of the Reservation. </summary>
    internal readonly partial struct DisplayProvisioningState : IEquatable<DisplayProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DisplayProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DisplayProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string ExpiringValue = "Expiring";
        private const string ExpiredValue = "Expired";
        private const string PendingValue = "Pending";
        private const string ProcessingValue = "Processing";
        private const string CancelledValue = "Cancelled";
        private const string FailedValue = "Failed";

        /// <summary> Succeeded. </summary>
        public static DisplayProvisioningState Succeeded { get; } = new DisplayProvisioningState(SucceededValue);
        /// <summary> Expiring. </summary>
        public static DisplayProvisioningState Expiring { get; } = new DisplayProvisioningState(ExpiringValue);
        /// <summary> Expired. </summary>
        public static DisplayProvisioningState Expired { get; } = new DisplayProvisioningState(ExpiredValue);
        /// <summary> Pending. </summary>
        public static DisplayProvisioningState Pending { get; } = new DisplayProvisioningState(PendingValue);
        /// <summary> Processing. </summary>
        public static DisplayProvisioningState Processing { get; } = new DisplayProvisioningState(ProcessingValue);
        /// <summary> Cancelled. </summary>
        public static DisplayProvisioningState Cancelled { get; } = new DisplayProvisioningState(CancelledValue);
        /// <summary> Failed. </summary>
        public static DisplayProvisioningState Failed { get; } = new DisplayProvisioningState(FailedValue);
        /// <summary> Determines if two <see cref="DisplayProvisioningState"/> values are the same. </summary>
        public static bool operator ==(DisplayProvisioningState left, DisplayProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DisplayProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(DisplayProvisioningState left, DisplayProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DisplayProvisioningState"/>. </summary>
        public static implicit operator DisplayProvisioningState(string value) => new DisplayProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DisplayProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DisplayProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
