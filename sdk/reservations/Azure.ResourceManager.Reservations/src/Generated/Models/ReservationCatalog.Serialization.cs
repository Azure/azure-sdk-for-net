// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Reservations.Models
{
    public partial class ReservationCatalog
    {
        internal static ReservationCatalog DeserializeReservationCatalog(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> resourceType = default;
            Optional<string> name = default;
            Optional<IReadOnlyDictionary<string, IList<ReservationBillingPlan>>> billingPlans = default;
            Optional<IReadOnlyList<ReservationTerm>> terms = default;
            Optional<IReadOnlyList<AzureLocation>> locations = default;
            Optional<IReadOnlyList<SkuProperty>> skuProperties = default;
            Optional<ReservationCatalogMsrp> msrp = default;
            Optional<IReadOnlyList<SkuRestriction>> restrictions = default;
            Optional<string> tier = default;
            Optional<string> size = default;
            Optional<IReadOnlyList<SkuCapability>> capabilities = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceType"u8))
                {
                    resourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("billingPlans"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, IList<ReservationBillingPlan>> dictionary = new Dictionary<string, IList<ReservationBillingPlan>>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            List<ReservationBillingPlan> array = new List<ReservationBillingPlan>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(new ReservationBillingPlan(item.GetString()));
                            }
                            dictionary.Add(property0.Name, array);
                        }
                    }
                    billingPlans = dictionary;
                    continue;
                }
                if (property.NameEquals("terms"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReservationTerm> array = new List<ReservationTerm>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new ReservationTerm(item.GetString()));
                    }
                    terms = array;
                    continue;
                }
                if (property.NameEquals("locations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AzureLocation> array = new List<AzureLocation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AzureLocation(item.GetString()));
                    }
                    locations = array;
                    continue;
                }
                if (property.NameEquals("skuProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SkuProperty> array = new List<SkuProperty>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkuProperty.DeserializeSkuProperty(item));
                    }
                    skuProperties = array;
                    continue;
                }
                if (property.NameEquals("msrp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    msrp = ReservationCatalogMsrp.DeserializeReservationCatalogMsrp(property.Value);
                    continue;
                }
                if (property.NameEquals("restrictions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SkuRestriction> array = new List<SkuRestriction>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkuRestriction.DeserializeSkuRestriction(item));
                    }
                    restrictions = array;
                    continue;
                }
                if (property.NameEquals("tier"u8))
                {
                    tier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("size"u8))
                {
                    size = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("capabilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SkuCapability> array = new List<SkuCapability>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SkuCapability.DeserializeSkuCapability(item));
                    }
                    capabilities = array;
                    continue;
                }
            }
            return new ReservationCatalog(resourceType.Value, name.Value, Optional.ToDictionary(billingPlans), Optional.ToList(terms), Optional.ToList(locations), Optional.ToList(skuProperties), msrp.Value, Optional.ToList(restrictions), tier.Value, size.Value, Optional.ToList(capabilities));
        }
    }
}
