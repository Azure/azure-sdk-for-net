// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Reservations.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Reservations
{
    /// <summary>
    /// A Class representing a ReservationOrderResponse along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="ReservationOrderResponseResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetReservationOrderResponseResource method.
    /// Otherwise you can get one from its parent resource <see cref="TenantResource" /> using the GetReservationOrderResponse method.
    /// </summary>
    public partial class ReservationOrderResponseResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="ReservationOrderResponseResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string reservationOrderId)
        {
            var resourceId = $"/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _reservationOrderResponseReservationOrderClientDiagnostics;
        private readonly ReservationOrderRestOperations _reservationOrderResponseReservationOrderRestClient;
        private readonly ClientDiagnostics _reservationResponseReservationClientDiagnostics;
        private readonly ReservationRestOperations _reservationResponseReservationRestClient;
        private readonly ReservationOrderResponseData _data;

        /// <summary> Initializes a new instance of the <see cref="ReservationOrderResponseResource"/> class for mocking. </summary>
        protected ReservationOrderResponseResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "ReservationOrderResponseResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ReservationOrderResponseResource(ArmClient client, ReservationOrderResponseData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ReservationOrderResponseResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ReservationOrderResponseResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _reservationOrderResponseReservationOrderClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Reservations", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string reservationOrderResponseReservationOrderApiVersion);
            _reservationOrderResponseReservationOrderRestClient = new ReservationOrderRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, reservationOrderResponseReservationOrderApiVersion);
            _reservationResponseReservationClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Reservations", ReservationResponseResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ReservationResponseResource.ResourceType, out string reservationResponseReservationApiVersion);
            _reservationResponseReservationRestClient = new ReservationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, reservationResponseReservationApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Capacity/reservationOrders";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ReservationOrderResponseData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of ReservationResponseResources in the ReservationOrderResponse. </summary>
        /// <returns> An object representing collection of ReservationResponseResources and their operations over a ReservationResponseResource. </returns>
        public virtual ReservationResponseCollection GetReservationResponses()
        {
            return GetCachedClient(Client => new ReservationResponseCollection(Client, Id));
        }

        /// <summary>
        /// Get specific `Reservation` details.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
        /// Operation Id: Reservation_Get
        /// </summary>
        /// <param name="reservationId"> Id of the Reservation Item. </param>
        /// <param name="expand"> Supported value of this query is renewProperties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="reservationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="reservationId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<ReservationResponseResource>> GetReservationResponseAsync(string reservationId, string expand = null, CancellationToken cancellationToken = default)
        {
            return await GetReservationResponses().GetAsync(reservationId, expand, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get specific `Reservation` details.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
        /// Operation Id: Reservation_Get
        /// </summary>
        /// <param name="reservationId"> Id of the Reservation Item. </param>
        /// <param name="expand"> Supported value of this query is renewProperties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="reservationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="reservationId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<ReservationResponseResource> GetReservationResponse(string reservationId, string expand = null, CancellationToken cancellationToken = default)
        {
            return GetReservationResponses().Get(reservationId, expand, cancellationToken);
        }

        /// <summary>
        /// Get the details of the `ReservationOrder`.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}
        /// Operation Id: ReservationOrder_Get
        /// </summary>
        /// <param name="expand"> May be used to expand the planInformation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ReservationOrderResponseResource>> GetAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _reservationOrderResponseReservationOrderClientDiagnostics.CreateScope("ReservationOrderResponseResource.Get");
            scope.Start();
            try
            {
                var response = await _reservationOrderResponseReservationOrderRestClient.GetAsync(Id.Name, expand, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ReservationOrderResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the details of the `ReservationOrder`.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}
        /// Operation Id: ReservationOrder_Get
        /// </summary>
        /// <param name="expand"> May be used to expand the planInformation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ReservationOrderResponseResource> Get(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _reservationOrderResponseReservationOrderClientDiagnostics.CreateScope("ReservationOrderResponseResource.Get");
            scope.Start();
            try
            {
                var response = _reservationOrderResponseReservationOrderRestClient.Get(Id.Name, expand, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ReservationOrderResponseResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Purchase `ReservationOrder` and create resource under the specified URI.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}
        /// Operation Id: ReservationOrder_Purchase
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Information needed for calculate or purchase reservation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<ReservationOrderResponseResource>> UpdateAsync(WaitUntil waitUntil, PurchaseRequestContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _reservationOrderResponseReservationOrderClientDiagnostics.CreateScope("ReservationOrderResponseResource.Update");
            scope.Start();
            try
            {
                var response = await _reservationOrderResponseReservationOrderRestClient.PurchaseAsync(Id.Name, content, cancellationToken).ConfigureAwait(false);
                var operation = new ReservationsArmOperation<ReservationOrderResponseResource>(new ReservationOrderResponseOperationSource(Client), _reservationOrderResponseReservationOrderClientDiagnostics, Pipeline, _reservationOrderResponseReservationOrderRestClient.CreatePurchaseRequest(Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Purchase `ReservationOrder` and create resource under the specified URI.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}
        /// Operation Id: ReservationOrder_Purchase
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Information needed for calculate or purchase reservation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<ReservationOrderResponseResource> Update(WaitUntil waitUntil, PurchaseRequestContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _reservationOrderResponseReservationOrderClientDiagnostics.CreateScope("ReservationOrderResponseResource.Update");
            scope.Start();
            try
            {
                var response = _reservationOrderResponseReservationOrderRestClient.Purchase(Id.Name, content, cancellationToken);
                var operation = new ReservationsArmOperation<ReservationOrderResponseResource>(new ReservationOrderResponseOperationSource(Client), _reservationOrderResponseReservationOrderClientDiagnostics, Pipeline, _reservationOrderResponseReservationOrderRestClient.CreatePurchaseRequest(Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Split a `Reservation` into two `Reservation`s with specified quantity distribution.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split
        /// Operation Id: Reservation_Split
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Information needed to Split a reservation item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<IList<ReservationResponseData>>> SplitReservationAsync(WaitUntil waitUntil, SplitContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _reservationResponseReservationClientDiagnostics.CreateScope("ReservationOrderResponseResource.SplitReservation");
            scope.Start();
            try
            {
                var response = await _reservationResponseReservationRestClient.SplitAsync(Id.Name, content, cancellationToken).ConfigureAwait(false);
                var operation = new ReservationsArmOperation<IList<ReservationResponseData>>(new IListOperationSource(), _reservationResponseReservationClientDiagnostics, Pipeline, _reservationResponseReservationRestClient.CreateSplitRequest(Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Split a `Reservation` into two `Reservation`s with specified quantity distribution.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/split
        /// Operation Id: Reservation_Split
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Information needed to Split a reservation item. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<IList<ReservationResponseData>> SplitReservation(WaitUntil waitUntil, SplitContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _reservationResponseReservationClientDiagnostics.CreateScope("ReservationOrderResponseResource.SplitReservation");
            scope.Start();
            try
            {
                var response = _reservationResponseReservationRestClient.Split(Id.Name, content, cancellationToken);
                var operation = new ReservationsArmOperation<IList<ReservationResponseData>>(new IListOperationSource(), _reservationResponseReservationClientDiagnostics, Pipeline, _reservationResponseReservationRestClient.CreateSplitRequest(Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge
        /// Operation Id: Reservation_Merge
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Information needed for commercial request for a reservation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<IList<ReservationResponseData>>> MergeReservationAsync(WaitUntil waitUntil, MergeContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _reservationResponseReservationClientDiagnostics.CreateScope("ReservationOrderResponseResource.MergeReservation");
            scope.Start();
            try
            {
                var response = await _reservationResponseReservationRestClient.MergeAsync(Id.Name, content, cancellationToken).ConfigureAwait(false);
                var operation = new ReservationsArmOperation<IList<ReservationResponseData>>(new IListOperationSource(), _reservationResponseReservationClientDiagnostics, Pipeline, _reservationResponseReservationRestClient.CreateMergeRequest(Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Merge the specified `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have same properties.
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/merge
        /// Operation Id: Reservation_Merge
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Information needed for commercial request for a reservation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<IList<ReservationResponseData>> MergeReservation(WaitUntil waitUntil, MergeContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _reservationResponseReservationClientDiagnostics.CreateScope("ReservationOrderResponseResource.MergeReservation");
            scope.Start();
            try
            {
                var response = _reservationResponseReservationRestClient.Merge(Id.Name, content, cancellationToken);
                var operation = new ReservationsArmOperation<IList<ReservationResponseData>>(new IListOperationSource(), _reservationResponseReservationClientDiagnostics, Pipeline, _reservationResponseReservationRestClient.CreateMergeRequest(Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/changeDirectory
        /// Operation Id: ReservationOrder_ChangeDirectory
        /// </summary>
        /// <param name="content"> Information needed to change directory of reservation order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<ChangeDirectoryResponse>> ChangeDirectoryAsync(ChangeDirectoryContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _reservationOrderResponseReservationOrderClientDiagnostics.CreateScope("ReservationOrderResponseResource.ChangeDirectory");
            scope.Start();
            try
            {
                var response = await _reservationOrderResponseReservationOrderRestClient.ChangeDirectoryAsync(Id.Name, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id
        /// Request Path: /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/changeDirectory
        /// Operation Id: ReservationOrder_ChangeDirectory
        /// </summary>
        /// <param name="content"> Information needed to change directory of reservation order. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<ChangeDirectoryResponse> ChangeDirectory(ChangeDirectoryContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _reservationOrderResponseReservationOrderClientDiagnostics.CreateScope("ReservationOrderResponseResource.ChangeDirectory");
            scope.Start();
            try
            {
                var response = _reservationOrderResponseReservationOrderRestClient.ChangeDirectory(Id.Name, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
