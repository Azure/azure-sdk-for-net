// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Reservations.Models;

namespace Azure.ResourceManager.Reservations
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _reservationResponseReservationClientDiagnostics;
        private ReservationRestOperations _reservationResponseReservationRestClient;
        private ClientDiagnostics _reservationOrderResponseReservationOrderClientDiagnostics;
        private ReservationOrderRestOperations _reservationOrderResponseReservationOrderRestClient;
        private ClientDiagnostics _operationClientDiagnostics;
        private OperationRestOperations _operationRestClient;
        private ClientDiagnostics _calculateExchangeClientDiagnostics;
        private CalculateExchangeRestOperations _calculateExchangeRestClient;
        private ClientDiagnostics _exchangeClientDiagnostics;
        private ExchangeRestOperations _exchangeRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ReservationResponseReservationClientDiagnostics => _reservationResponseReservationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Reservations", ReservationResponseResource.ResourceType.Namespace, Diagnostics);
        private ReservationRestOperations ReservationResponseReservationRestClient => _reservationResponseReservationRestClient ??= new ReservationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReservationResponseResource.ResourceType));
        private ClientDiagnostics ReservationOrderResponseReservationOrderClientDiagnostics => _reservationOrderResponseReservationOrderClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Reservations", ReservationOrderResponseResource.ResourceType.Namespace, Diagnostics);
        private ReservationOrderRestOperations ReservationOrderResponseReservationOrderRestClient => _reservationOrderResponseReservationOrderRestClient ??= new ReservationOrderRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ReservationOrderResponseResource.ResourceType));
        private ClientDiagnostics OperationClientDiagnostics => _operationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Reservations", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private OperationRestOperations OperationRestClient => _operationRestClient ??= new OperationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics CalculateExchangeClientDiagnostics => _calculateExchangeClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Reservations", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private CalculateExchangeRestOperations CalculateExchangeRestClient => _calculateExchangeRestClient ??= new CalculateExchangeRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ExchangeClientDiagnostics => _exchangeClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Reservations", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private ExchangeRestOperations ExchangeRestClient => _exchangeRestClient ??= new ExchangeRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of ReservationOrderResponseResources in the TenantResource. </summary>
        /// <returns> An object representing collection of ReservationOrderResponseResources and their operations over a ReservationOrderResponseResource. </returns>
        public virtual ReservationOrderResponseCollection GetReservationOrderResponses()
        {
            return GetCachedClient(Client => new ReservationOrderResponseCollection(Client, Id));
        }

        /// <summary>
        /// List the reservations and the roll up counts of reservations group by provisioning states that the user has access to in the current tenant.
        /// Request Path: /providers/Microsoft.Capacity/reservations
        /// Operation Id: Reservation_ListAll
        /// </summary>
        /// <param name="filter"> May be used to filter by reservation properties. The filter supports &apos;eq&apos;, &apos;or&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, or &apos;not&apos;. Reservation properties include sku/name, properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate, provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType, userFriendlyRenewState}. </param>
        /// <param name="orderby"> May be used to sort order by reservation properties. </param>
        /// <param name="refreshSummary"> To indicate whether to refresh the roll up counts of the reservations group by provisioning states. </param>
        /// <param name="skiptoken"> The number of reservations to skip from the list before returning results. </param>
        /// <param name="selectedState"> The selected provisioning state. </param>
        /// <param name="take"> To number of reservations to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ReservationResponseResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ReservationResponseResource> GetReservationResponsesAsync(string filter = null, string orderby = null, string refreshSummary = null, float? skiptoken = null, string selectedState = null, float? take = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<ReservationResponseResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ReservationResponseReservationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetReservationResponses");
                scope.Start();
                try
                {
                    var response = await ReservationResponseReservationRestClient.ListAllAsync(filter, orderby, refreshSummary, skiptoken, selectedState, take, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ReservationResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ReservationResponseResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ReservationResponseReservationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetReservationResponses");
                scope.Start();
                try
                {
                    var response = await ReservationResponseReservationRestClient.ListAllNextPageAsync(nextLink, filter, orderby, refreshSummary, skiptoken, selectedState, take, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ReservationResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List the reservations and the roll up counts of reservations group by provisioning states that the user has access to in the current tenant.
        /// Request Path: /providers/Microsoft.Capacity/reservations
        /// Operation Id: Reservation_ListAll
        /// </summary>
        /// <param name="filter"> May be used to filter by reservation properties. The filter supports &apos;eq&apos;, &apos;or&apos;, and &apos;and&apos;. It does not currently support &apos;ne&apos;, &apos;gt&apos;, &apos;le&apos;, &apos;ge&apos;, or &apos;not&apos;. Reservation properties include sku/name, properties/{appliedScopeType, archived, displayName, displayProvisioningState, effectiveDateTime, expiryDate, provisioningState, quantity, renew, reservedResourceType, term, userFriendlyAppliedScopeType, userFriendlyRenewState}. </param>
        /// <param name="orderby"> May be used to sort order by reservation properties. </param>
        /// <param name="refreshSummary"> To indicate whether to refresh the roll up counts of the reservations group by provisioning states. </param>
        /// <param name="skiptoken"> The number of reservations to skip from the list before returning results. </param>
        /// <param name="selectedState"> The selected provisioning state. </param>
        /// <param name="take"> To number of reservations to return. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ReservationResponseResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ReservationResponseResource> GetReservationResponses(string filter = null, string orderby = null, string refreshSummary = null, float? skiptoken = null, string selectedState = null, float? take = null, CancellationToken cancellationToken = default)
        {
            Page<ReservationResponseResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ReservationResponseReservationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetReservationResponses");
                scope.Start();
                try
                {
                    var response = ReservationResponseReservationRestClient.ListAll(filter, orderby, refreshSummary, skiptoken, selectedState, take, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ReservationResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ReservationResponseResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ReservationResponseReservationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetReservationResponses");
                scope.Start();
                try
                {
                    var response = ReservationResponseReservationRestClient.ListAllNextPage(nextLink, filter, orderby, refreshSummary, skiptoken, selectedState, take, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ReservationResponseResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Calculate price for placing a `ReservationOrder`.
        /// Request Path: /providers/Microsoft.Capacity/calculatePrice
        /// Operation Id: ReservationOrder_Calculate
        /// </summary>
        /// <param name="content"> Information needed for calculate or purchase reservation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CalculatePriceResponse>> CalculateReservationOrderAsync(PurchaseRequestContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ReservationOrderResponseReservationOrderClientDiagnostics.CreateScope("TenantResourceExtensionClient.CalculateReservationOrder");
            scope.Start();
            try
            {
                var response = await ReservationOrderResponseReservationOrderRestClient.CalculateAsync(content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Calculate price for placing a `ReservationOrder`.
        /// Request Path: /providers/Microsoft.Capacity/calculatePrice
        /// Operation Id: ReservationOrder_Calculate
        /// </summary>
        /// <param name="content"> Information needed for calculate or purchase reservation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CalculatePriceResponse> CalculateReservationOrder(PurchaseRequestContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ReservationOrderResponseReservationOrderClientDiagnostics.CreateScope("TenantResourceExtensionClient.CalculateReservationOrder");
            scope.Start();
            try
            {
                var response = ReservationOrderResponseReservationOrderRestClient.Calculate(content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List all the operations.
        /// Request Path: /providers/Microsoft.Capacity/operations
        /// Operation Id: Operation_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="OperationResponse" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<OperationResponse> GetOperationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<OperationResponse>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OperationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperations");
                scope.Start();
                try
                {
                    var response = await OperationRestClient.ListAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<OperationResponse>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OperationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperations");
                scope.Start();
                try
                {
                    var response = await OperationRestClient.ListNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List all the operations.
        /// Request Path: /providers/Microsoft.Capacity/operations
        /// Operation Id: Operation_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="OperationResponse" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<OperationResponse> GetOperations(CancellationToken cancellationToken = default)
        {
            Page<OperationResponse> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = OperationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperations");
                scope.Start();
                try
                {
                    var response = OperationRestClient.List(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<OperationResponse> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = OperationClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetOperations");
                scope.Start();
                try
                {
                    var response = OperationRestClient.ListNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Calculates price for exchanging `Reservations` if there are no policy errors.
        /// 
        /// Request Path: /providers/Microsoft.Capacity/calculateExchange
        /// Operation Id: CalculateExchange_Post
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Request containing purchases and refunds that need to be executed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<CalculateExchangeOperationResultResponse>> PostCalculateExchangeAsync(WaitUntil waitUntil, CalculateExchangeContent content, CancellationToken cancellationToken = default)
        {
            using var scope = CalculateExchangeClientDiagnostics.CreateScope("TenantResourceExtensionClient.PostCalculateExchange");
            scope.Start();
            try
            {
                var response = await CalculateExchangeRestClient.PostAsync(content, cancellationToken).ConfigureAwait(false);
                var operation = new ReservationsArmOperation<CalculateExchangeOperationResultResponse>(new CalculateExchangeOperationResultResponseOperationSource(), CalculateExchangeClientDiagnostics, Pipeline, CalculateExchangeRestClient.CreatePostRequest(content).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Calculates price for exchanging `Reservations` if there are no policy errors.
        /// 
        /// Request Path: /providers/Microsoft.Capacity/calculateExchange
        /// Operation Id: CalculateExchange_Post
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Request containing purchases and refunds that need to be executed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<CalculateExchangeOperationResultResponse> PostCalculateExchange(WaitUntil waitUntil, CalculateExchangeContent content, CancellationToken cancellationToken = default)
        {
            using var scope = CalculateExchangeClientDiagnostics.CreateScope("TenantResourceExtensionClient.PostCalculateExchange");
            scope.Start();
            try
            {
                var response = CalculateExchangeRestClient.Post(content, cancellationToken);
                var operation = new ReservationsArmOperation<CalculateExchangeOperationResultResponse>(new CalculateExchangeOperationResultResponseOperationSource(), CalculateExchangeClientDiagnostics, Pipeline, CalculateExchangeRestClient.CreatePostRequest(content).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns one or more `Reservations` in exchange for one or more `Reservation` purchases.
        /// 
        /// Request Path: /providers/Microsoft.Capacity/exchange
        /// Operation Id: Exchange_Post
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Request containing the refunds and purchases that need to be executed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<ExchangeOperationResultResponse>> PostExchangeAsync(WaitUntil waitUntil, ExchangeContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ExchangeClientDiagnostics.CreateScope("TenantResourceExtensionClient.PostExchange");
            scope.Start();
            try
            {
                var response = await ExchangeRestClient.PostAsync(content, cancellationToken).ConfigureAwait(false);
                var operation = new ReservationsArmOperation<ExchangeOperationResultResponse>(new ExchangeOperationResultResponseOperationSource(), ExchangeClientDiagnostics, Pipeline, ExchangeRestClient.CreatePostRequest(content).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns one or more `Reservations` in exchange for one or more `Reservation` purchases.
        /// 
        /// Request Path: /providers/Microsoft.Capacity/exchange
        /// Operation Id: Exchange_Post
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Request containing the refunds and purchases that need to be executed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<ExchangeOperationResultResponse> PostExchange(WaitUntil waitUntil, ExchangeContent content, CancellationToken cancellationToken = default)
        {
            using var scope = ExchangeClientDiagnostics.CreateScope("TenantResourceExtensionClient.PostExchange");
            scope.Start();
            try
            {
                var response = ExchangeRestClient.Post(content, cancellationToken);
                var operation = new ReservationsArmOperation<ExchangeOperationResultResponse>(new ExchangeOperationResultResponseOperationSource(), ExchangeClientDiagnostics, Pipeline, ExchangeRestClient.CreatePostRequest(content).Request, response, OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
