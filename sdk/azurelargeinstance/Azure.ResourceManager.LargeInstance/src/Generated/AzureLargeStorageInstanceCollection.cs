// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.LargeInstance
{
    /// <summary>
    /// A class representing a collection of <see cref="AzureLargeStorageInstanceResource" /> and their operations.
    /// Each <see cref="AzureLargeStorageInstanceResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get an <see cref="AzureLargeStorageInstanceCollection" /> instance call the GetAzureLargeStorageInstances method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class AzureLargeStorageInstanceCollection : ArmCollection, IEnumerable<AzureLargeStorageInstanceResource>, IAsyncEnumerable<AzureLargeStorageInstanceResource>
    {
        private readonly ClientDiagnostics _azureLargeStorageInstanceClientDiagnostics;
        private readonly AzureLargeStorageInstanceRestOperations _azureLargeStorageInstanceRestClient;

        /// <summary> Initializes a new instance of the <see cref="AzureLargeStorageInstanceCollection"/> class for mocking. </summary>
        protected AzureLargeStorageInstanceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AzureLargeStorageInstanceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AzureLargeStorageInstanceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _azureLargeStorageInstanceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.LargeInstance", AzureLargeStorageInstanceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AzureLargeStorageInstanceResource.ResourceType, out string azureLargeStorageInstanceApiVersion);
            _azureLargeStorageInstanceRestClient = new AzureLargeStorageInstanceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, azureLargeStorageInstanceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an Azure Large Storage instance for the specified subscription, resource group, and instance name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances/{azureLargeStorageInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeStorageInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeStorageInstanceName"> Name of the AzureLargeStorageInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeStorageInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeStorageInstanceName"/> is null. </exception>
        public virtual async Task<Response<AzureLargeStorageInstanceResource>> GetAsync(string azureLargeStorageInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeStorageInstanceName, nameof(azureLargeStorageInstanceName));

            using var scope = _azureLargeStorageInstanceClientDiagnostics.CreateScope("AzureLargeStorageInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _azureLargeStorageInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, azureLargeStorageInstanceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AzureLargeStorageInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an Azure Large Storage instance for the specified subscription, resource group, and instance name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances/{azureLargeStorageInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeStorageInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeStorageInstanceName"> Name of the AzureLargeStorageInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeStorageInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeStorageInstanceName"/> is null. </exception>
        public virtual Response<AzureLargeStorageInstanceResource> Get(string azureLargeStorageInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeStorageInstanceName, nameof(azureLargeStorageInstanceName));

            using var scope = _azureLargeStorageInstanceClientDiagnostics.CreateScope("AzureLargeStorageInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = _azureLargeStorageInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, azureLargeStorageInstanceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AzureLargeStorageInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of AzureLargeStorageInstances in the specified subscription and resource group. The operations returns various properties of each Azure LargeStorage instance.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeStorageInstance_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AzureLargeStorageInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AzureLargeStorageInstanceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _azureLargeStorageInstanceRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _azureLargeStorageInstanceRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new AzureLargeStorageInstanceResource(Client, AzureLargeStorageInstanceData.DeserializeAzureLargeStorageInstanceData(e)), _azureLargeStorageInstanceClientDiagnostics, Pipeline, "AzureLargeStorageInstanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets a list of AzureLargeStorageInstances in the specified subscription and resource group. The operations returns various properties of each Azure LargeStorage instance.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeStorageInstance_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AzureLargeStorageInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AzureLargeStorageInstanceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _azureLargeStorageInstanceRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _azureLargeStorageInstanceRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new AzureLargeStorageInstanceResource(Client, AzureLargeStorageInstanceData.DeserializeAzureLargeStorageInstanceData(e)), _azureLargeStorageInstanceClientDiagnostics, Pipeline, "AzureLargeStorageInstanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances/{azureLargeStorageInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeStorageInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeStorageInstanceName"> Name of the AzureLargeStorageInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeStorageInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeStorageInstanceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string azureLargeStorageInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeStorageInstanceName, nameof(azureLargeStorageInstanceName));

            using var scope = _azureLargeStorageInstanceClientDiagnostics.CreateScope("AzureLargeStorageInstanceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _azureLargeStorageInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, azureLargeStorageInstanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances/{azureLargeStorageInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeStorageInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeStorageInstanceName"> Name of the AzureLargeStorageInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeStorageInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeStorageInstanceName"/> is null. </exception>
        public virtual Response<bool> Exists(string azureLargeStorageInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeStorageInstanceName, nameof(azureLargeStorageInstanceName));

            using var scope = _azureLargeStorageInstanceClientDiagnostics.CreateScope("AzureLargeStorageInstanceCollection.Exists");
            scope.Start();
            try
            {
                var response = _azureLargeStorageInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, azureLargeStorageInstanceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances/{azureLargeStorageInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeStorageInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeStorageInstanceName"> Name of the AzureLargeStorageInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeStorageInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeStorageInstanceName"/> is null. </exception>
        public virtual async Task<NullableResponse<AzureLargeStorageInstanceResource>> GetIfExistsAsync(string azureLargeStorageInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeStorageInstanceName, nameof(azureLargeStorageInstanceName));

            using var scope = _azureLargeStorageInstanceClientDiagnostics.CreateScope("AzureLargeStorageInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _azureLargeStorageInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, azureLargeStorageInstanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<AzureLargeStorageInstanceResource>(response.GetRawResponse());
                return Response.FromValue(new AzureLargeStorageInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeStorageInstances/{azureLargeStorageInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeStorageInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeStorageInstanceName"> Name of the AzureLargeStorageInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeStorageInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeStorageInstanceName"/> is null. </exception>
        public virtual NullableResponse<AzureLargeStorageInstanceResource> GetIfExists(string azureLargeStorageInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeStorageInstanceName, nameof(azureLargeStorageInstanceName));

            using var scope = _azureLargeStorageInstanceClientDiagnostics.CreateScope("AzureLargeStorageInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _azureLargeStorageInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, azureLargeStorageInstanceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<AzureLargeStorageInstanceResource>(response.GetRawResponse());
                return Response.FromValue(new AzureLargeStorageInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AzureLargeStorageInstanceResource> IEnumerable<AzureLargeStorageInstanceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AzureLargeStorageInstanceResource> IAsyncEnumerable<AzureLargeStorageInstanceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
