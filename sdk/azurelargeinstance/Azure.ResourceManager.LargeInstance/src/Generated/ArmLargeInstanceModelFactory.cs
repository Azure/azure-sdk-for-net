// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.LargeInstance;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.LargeInstance.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmLargeInstanceModelFactory
    {
        /// <summary> Initializes a new instance of AzureLargeInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="hardwareProfile"> Specifies the hardware settings for the Azure Large Instance. </param>
        /// <param name="storageProfile"> Specifies the storage settings for the Azure Large Instance disks. </param>
        /// <param name="osProfile"> Specifies the operating system settings for the Azure Large Instance. </param>
        /// <param name="networkProfile"> Specifies the network settings for the Azure Large Instance. </param>
        /// <param name="azureLargeInstanceId"> Specifies the Azure Large Instance unique ID. </param>
        /// <param name="powerState"> Resource power state. </param>
        /// <param name="proximityPlacementGroup"> Resource proximity placement group. </param>
        /// <param name="hwRevision"> Hardware revision of an Azure Large Instance. </param>
        /// <param name="partnerNodeId"> ARM ID of another AzureLargeInstance that will share a network with this AzureLargeInstance. </param>
        /// <param name="provisioningState"> State of provisioning of the AzureLargeInstance. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <returns> A new <see cref="LargeInstance.AzureLargeInstanceData"/> instance for mocking. </returns>
        public static AzureLargeInstanceData AzureLargeInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HardwareProfile hardwareProfile = null, StorageProfile storageProfile = null, OSProfile osProfile = null, NetworkProfile networkProfile = null, string azureLargeInstanceId = null, AzureLargeInstancePowerStateEnum? powerState = null, string proximityPlacementGroup = null, string hwRevision = null, string partnerNodeId = null, AzureLargeInstanceProvisioningStatesEnum? provisioningState = null, IReadOnlyDictionary<string, string> tags = null, AzureLocation location = default)
        {
            tags ??= new Dictionary<string, string>();

            return new AzureLargeInstanceData(id, name, resourceType, systemData, hardwareProfile, storageProfile, osProfile, networkProfile, azureLargeInstanceId, powerState, proximityPlacementGroup, hwRevision, partnerNodeId, provisioningState, tags, location);
        }

        /// <summary> Initializes a new instance of HardwareProfile. </summary>
        /// <param name="hardwareType"> Name of the hardware type (vendor and/or their product name). </param>
        /// <param name="azureLargeInstanceSize"> Specifies the Azure Large Instance SKU. </param>
        /// <returns> A new <see cref="Models.HardwareProfile"/> instance for mocking. </returns>
        public static HardwareProfile HardwareProfile(AzureLargeInstanceHardwareTypeNamesEnum? hardwareType = null, AzureLargeInstanceSizeNamesEnum? azureLargeInstanceSize = null)
        {
            return new HardwareProfile(hardwareType, azureLargeInstanceSize);
        }

        /// <summary> Initializes a new instance of StorageProfile. </summary>
        /// <param name="nfsIPAddress"> IP Address to connect to storage. </param>
        /// <param name="osDisks"> Specifies information about the operating system disk used by Azure Large Instance. </param>
        /// <returns> A new <see cref="Models.StorageProfile"/> instance for mocking. </returns>
        public static StorageProfile StorageProfile(string nfsIPAddress = null, IEnumerable<Disk> osDisks = null)
        {
            osDisks ??= new List<Disk>();

            return new StorageProfile(nfsIPAddress, osDisks?.ToList());
        }

        /// <summary> Initializes a new instance of Disk. </summary>
        /// <param name="name"> The disk name. </param>
        /// <param name="diskSizeGB"> Specifies the size of an empty data disk in gigabytes. </param>
        /// <param name="lun"> Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM. </param>
        /// <returns> A new <see cref="Models.Disk"/> instance for mocking. </returns>
        public static Disk Disk(string name = null, int? diskSizeGB = null, int? lun = null)
        {
            return new Disk(name, diskSizeGB, lun);
        }

        /// <summary> Initializes a new instance of OSProfile. </summary>
        /// <param name="computerName"> Specifies the host OS name of the Azure Large Instance. </param>
        /// <param name="osType"> This property allows you to specify the type of the OS. </param>
        /// <param name="version"> Specifies version of operating system. </param>
        /// <param name="sshPublicKey"> Specifies the SSH public key used to access the operating system. </param>
        /// <returns> A new <see cref="Models.OSProfile"/> instance for mocking. </returns>
        public static OSProfile OSProfile(string computerName = null, string osType = null, string version = null, string sshPublicKey = null)
        {
            return new OSProfile(computerName, osType, version, sshPublicKey);
        }

        /// <summary> Initializes a new instance of NetworkProfile. </summary>
        /// <param name="networkInterfaces"> Specifies the network interfaces for the Azure Large Instance. </param>
        /// <param name="circuitId"> Specifies the circuit id for connecting to express route. </param>
        /// <returns> A new <see cref="Models.NetworkProfile"/> instance for mocking. </returns>
        public static NetworkProfile NetworkProfile(IEnumerable<IPAddress> networkInterfaces = null, string circuitId = null)
        {
            networkInterfaces ??= new List<IPAddress>();

            return new NetworkProfile(networkInterfaces?.ToList(), circuitId);
        }

        /// <summary> Initializes a new instance of IPAddress. </summary>
        /// <param name="ipAddressValue"> Specifies the IP address of the network interface. </param>
        /// <returns> A new <see cref="Models.IPAddress"/> instance for mocking. </returns>
        public static IPAddress IPAddress(string ipAddressValue = null)
        {
            return new IPAddress(ipAddressValue);
        }

        /// <summary> Initializes a new instance of OperationStatusResult. </summary>
        /// <param name="id"> Fully qualified ID for the async operation. </param>
        /// <param name="resourceId"> Fully qualified ID of the resource against which the original async operation was started. </param>
        /// <param name="name"> Name of the async operation. </param>
        /// <param name="status"> Operation status. </param>
        /// <param name="percentComplete"> Percent of the operation that is complete. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="endOn"> The end time of the operation. </param>
        /// <param name="operations"> The operations list. </param>
        /// <param name="error"> If present, details of the operation error. </param>
        /// <returns> A new <see cref="Models.OperationStatusResult"/> instance for mocking. </returns>
        public static OperationStatusResult OperationStatusResult(ResourceIdentifier id = null, ResourceIdentifier resourceId = null, string name = null, string status = null, float? percentComplete = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<OperationStatusResult> operations = null, ResponseError error = null)
        {
            operations ??= new List<OperationStatusResult>();

            return new OperationStatusResult(id, resourceId, name, status, percentComplete, startOn, endOn, operations?.ToList(), error);
        }

        /// <summary> Initializes a new instance of AzureLargeStorageInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="azureLargeStorageInstanceUniqueIdentifier"> Specifies the AzureLargeStorageInstance unique ID. </param>
        /// <param name="storageProperties"> Specifies the storage properties for the AzureLargeStorage instance. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <returns> A new <see cref="LargeInstance.AzureLargeStorageInstanceData"/> instance for mocking. </returns>
        public static AzureLargeStorageInstanceData AzureLargeStorageInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string azureLargeStorageInstanceUniqueIdentifier = null, StorageProperties storageProperties = null, IReadOnlyDictionary<string, string> tags = null, AzureLocation location = default)
        {
            tags ??= new Dictionary<string, string>();

            return new AzureLargeStorageInstanceData(id, name, resourceType, systemData, azureLargeStorageInstanceUniqueIdentifier, storageProperties, tags, location);
        }

        /// <summary> Initializes a new instance of StorageProperties. </summary>
        /// <param name="provisioningState"> State of provisioning of the AzureLargeStorageInstance. </param>
        /// <param name="offeringType"> the offering type for which the resource is getting provisioned. </param>
        /// <param name="storageType"> the storage protocol for which the resource is getting provisioned. </param>
        /// <param name="generation"> the kind of storage instance. </param>
        /// <param name="hardwareType"> the hardware type of the storage instance. </param>
        /// <param name="workloadType"> the workload for which the resource is getting provisioned. </param>
        /// <param name="storageBillingProperties"> the billing related information for the resource. </param>
        /// <returns> A new <see cref="Models.StorageProperties"/> instance for mocking. </returns>
        public static StorageProperties StorageProperties(ProvisioningState? provisioningState = null, string offeringType = null, string storageType = null, string generation = null, string hardwareType = null, string workloadType = null, StorageBillingProperties storageBillingProperties = null)
        {
            return new StorageProperties(provisioningState, offeringType, storageType, generation, hardwareType, workloadType, storageBillingProperties);
        }

        /// <summary> Initializes a new instance of StorageBillingProperties. </summary>
        /// <param name="billingMode"> the billing mode for the storage instance. </param>
        /// <param name="sku"> the SKU type that is provisioned. </param>
        /// <returns> A new <see cref="Models.StorageBillingProperties"/> instance for mocking. </returns>
        public static StorageBillingProperties StorageBillingProperties(string billingMode = null, string sku = null)
        {
            return new StorageBillingProperties(billingMode, sku);
        }
    }
}
