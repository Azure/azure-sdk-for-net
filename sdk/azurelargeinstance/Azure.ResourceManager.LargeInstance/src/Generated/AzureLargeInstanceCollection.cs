// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.LargeInstance
{
    /// <summary>
    /// A class representing a collection of <see cref="AzureLargeInstanceResource" /> and their operations.
    /// Each <see cref="AzureLargeInstanceResource" /> in the collection will belong to the same instance of <see cref="ResourceGroupResource" />.
    /// To get an <see cref="AzureLargeInstanceCollection" /> instance call the GetAzureLargeInstances method from an instance of <see cref="ResourceGroupResource" />.
    /// </summary>
    public partial class AzureLargeInstanceCollection : ArmCollection, IEnumerable<AzureLargeInstanceResource>, IAsyncEnumerable<AzureLargeInstanceResource>
    {
        private readonly ClientDiagnostics _azureLargeInstanceClientDiagnostics;
        private readonly AzureLargeInstanceRestOperations _azureLargeInstanceRestClient;

        /// <summary> Initializes a new instance of the <see cref="AzureLargeInstanceCollection"/> class for mocking. </summary>
        protected AzureLargeInstanceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AzureLargeInstanceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AzureLargeInstanceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _azureLargeInstanceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.LargeInstance", AzureLargeInstanceResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AzureLargeInstanceResource.ResourceType, out string azureLargeInstanceApiVersion);
            _azureLargeInstanceRestClient = new AzureLargeInstanceRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, azureLargeInstanceApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceGroupResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceGroupResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an Azure Large Instance for the specified subscription, resource group, and instance name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeInstanceName"> Name of the AzureLargeInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeInstanceName"/> is null. </exception>
        public virtual async Task<Response<AzureLargeInstanceResource>> GetAsync(string azureLargeInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeInstanceName, nameof(azureLargeInstanceName));

            using var scope = _azureLargeInstanceClientDiagnostics.CreateScope("AzureLargeInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = await _azureLargeInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, azureLargeInstanceName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AzureLargeInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an Azure Large Instance for the specified subscription, resource group, and instance name.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeInstanceName"> Name of the AzureLargeInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeInstanceName"/> is null. </exception>
        public virtual Response<AzureLargeInstanceResource> Get(string azureLargeInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeInstanceName, nameof(azureLargeInstanceName));

            using var scope = _azureLargeInstanceClientDiagnostics.CreateScope("AzureLargeInstanceCollection.Get");
            scope.Start();
            try
            {
                var response = _azureLargeInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, azureLargeInstanceName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AzureLargeInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a list of Azure Large Instances in the specified subscription and resource group. The operations returns various properties of each Azure Large Instance.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeInstance_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AzureLargeInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AzureLargeInstanceResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _azureLargeInstanceRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _azureLargeInstanceRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new AzureLargeInstanceResource(Client, AzureLargeInstanceData.DeserializeAzureLargeInstanceData(e)), _azureLargeInstanceClientDiagnostics, Pipeline, "AzureLargeInstanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets a list of Azure Large Instances in the specified subscription and resource group. The operations returns various properties of each Azure Large Instance.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeInstance_ListByResourceGroup</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AzureLargeInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AzureLargeInstanceResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _azureLargeInstanceRestClient.CreateListByResourceGroupRequest(Id.SubscriptionId, Id.ResourceGroupName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _azureLargeInstanceRestClient.CreateListByResourceGroupNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new AzureLargeInstanceResource(Client, AzureLargeInstanceData.DeserializeAzureLargeInstanceData(e)), _azureLargeInstanceClientDiagnostics, Pipeline, "AzureLargeInstanceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeInstanceName"> Name of the AzureLargeInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeInstanceName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string azureLargeInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeInstanceName, nameof(azureLargeInstanceName));

            using var scope = _azureLargeInstanceClientDiagnostics.CreateScope("AzureLargeInstanceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _azureLargeInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, azureLargeInstanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeInstanceName"> Name of the AzureLargeInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeInstanceName"/> is null. </exception>
        public virtual Response<bool> Exists(string azureLargeInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeInstanceName, nameof(azureLargeInstanceName));

            using var scope = _azureLargeInstanceClientDiagnostics.CreateScope("AzureLargeInstanceCollection.Exists");
            scope.Start();
            try
            {
                var response = _azureLargeInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, azureLargeInstanceName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeInstanceName"> Name of the AzureLargeInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeInstanceName"/> is null. </exception>
        public virtual async Task<NullableResponse<AzureLargeInstanceResource>> GetIfExistsAsync(string azureLargeInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeInstanceName, nameof(azureLargeInstanceName));

            using var scope = _azureLargeInstanceClientDiagnostics.CreateScope("AzureLargeInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _azureLargeInstanceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, azureLargeInstanceName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<AzureLargeInstanceResource>(response.GetRawResponse());
                return Response.FromValue(new AzureLargeInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureLargeInstance/azureLargeInstances/{azureLargeInstanceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>AzureLargeInstance_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="azureLargeInstanceName"> Name of the AzureLargeInstance. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="azureLargeInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="azureLargeInstanceName"/> is null. </exception>
        public virtual NullableResponse<AzureLargeInstanceResource> GetIfExists(string azureLargeInstanceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(azureLargeInstanceName, nameof(azureLargeInstanceName));

            using var scope = _azureLargeInstanceClientDiagnostics.CreateScope("AzureLargeInstanceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _azureLargeInstanceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, azureLargeInstanceName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<AzureLargeInstanceResource>(response.GetRawResponse());
                return Response.FromValue(new AzureLargeInstanceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AzureLargeInstanceResource> IEnumerable<AzureLargeInstanceResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AzureLargeInstanceResource> IAsyncEnumerable<AzureLargeInstanceResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
