// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.LargeInstance;
using Azure.ResourceManager.LargeInstance.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.LargeInstance.Samples
{
    public partial class Sample_AzureLargeStorageInstanceResource
    {
        // List all AzureLargeStorageInstances in a subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAzureLargeStorageInstances_ListAllAzureLargeStorageInstancesInASubscription()
        {
            // Generated from example definition: specification/azurelargeinstance/resource-manager/Microsoft.AzureLargeInstance/preview/2023-07-20-preview/examples/AzureLargeStorageInstance_ListBySubscription.json
            // this example is just showing the usage of "AzureLargeStorageInstance_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "f0f4887f-d13c-4943-a8ba-d7da28d2a3fd";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (AzureLargeStorageInstanceResource item in subscriptionResource.GetAzureLargeStorageInstancesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AzureLargeStorageInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get an AzureLargeStorageStorage instance
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAnAzureLargeStorageStorageInstance()
        {
            // Generated from example definition: specification/azurelargeinstance/resource-manager/Microsoft.AzureLargeInstance/preview/2023-07-20-preview/examples/AzureLargeStorageInstance_Get.json
            // this example is just showing the usage of "AzureLargeStorageInstance_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AzureLargeStorageInstanceResource created on azure
            // for more information of creating AzureLargeStorageInstanceResource, please refer to the document of AzureLargeStorageInstanceResource
            string subscriptionId = "f0f4887f-d13c-4943-a8ba-d7da28d2a3fd";
            string resourceGroupName = "myResourceGroup";
            string azureLargeStorageInstanceName = "myAzureLargeStorageInstance";
            ResourceIdentifier azureLargeStorageInstanceResourceId = AzureLargeStorageInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureLargeStorageInstanceName);
            AzureLargeStorageInstanceResource azureLargeStorageInstance = client.GetAzureLargeStorageInstanceResource(azureLargeStorageInstanceResourceId);

            // invoke the operation
            AzureLargeStorageInstanceResource result = await azureLargeStorageInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AzureLargeStorageInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Tags field of an AzureLargeStorageStorage instance
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_DeleteTagsFieldOfAnAzureLargeStorageStorageInstance()
        {
            // Generated from example definition: specification/azurelargeinstance/resource-manager/Microsoft.AzureLargeInstance/preview/2023-07-20-preview/examples/AzureLargeStorageInstance_PatchTags_Delete.json
            // this example is just showing the usage of "AzureLargeStorageInstance_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AzureLargeStorageInstanceResource created on azure
            // for more information of creating AzureLargeStorageInstanceResource, please refer to the document of AzureLargeStorageInstanceResource
            string subscriptionId = "f0f4887f-d13c-4943-a8ba-d7da28d2a3fd";
            string resourceGroupName = "myResourceGroup";
            string azureLargeStorageInstanceName = "myALSInstance";
            ResourceIdentifier azureLargeStorageInstanceResourceId = AzureLargeStorageInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureLargeStorageInstanceName);
            AzureLargeStorageInstanceResource azureLargeStorageInstance = client.GetAzureLargeStorageInstanceResource(azureLargeStorageInstanceResourceId);

            // invoke the operation
            Tags tagsParameter = new Tags()
            {
                TagsValue =
{
},
            };
            AzureLargeStorageInstanceResource result = await azureLargeStorageInstance.UpdateAsync(tagsParameter);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AzureLargeStorageInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update Tags field of an AzureLargeStorageStorage instance
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateTagsFieldOfAnAzureLargeStorageStorageInstance()
        {
            // Generated from example definition: specification/azurelargeinstance/resource-manager/Microsoft.AzureLargeInstance/preview/2023-07-20-preview/examples/AzureLargeStorageInstance_PatchTags.json
            // this example is just showing the usage of "AzureLargeStorageInstance_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this AzureLargeStorageInstanceResource created on azure
            // for more information of creating AzureLargeStorageInstanceResource, please refer to the document of AzureLargeStorageInstanceResource
            string subscriptionId = "f0f4887f-d13c-4943-a8ba-d7da28d2a3fd";
            string resourceGroupName = "myResourceGroup";
            string azureLargeStorageInstanceName = "myALSInstance";
            ResourceIdentifier azureLargeStorageInstanceResourceId = AzureLargeStorageInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, azureLargeStorageInstanceName);
            AzureLargeStorageInstanceResource azureLargeStorageInstance = client.GetAzureLargeStorageInstanceResource(azureLargeStorageInstanceResourceId);

            // invoke the operation
            Tags tagsParameter = new Tags()
            {
                TagsValue =
{
["testkey"] = "testvalue",
},
            };
            AzureLargeStorageInstanceResource result = await azureLargeStorageInstance.UpdateAsync(tagsParameter);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AzureLargeStorageInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
