// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.RecoveryServices;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The backup storage config.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class BackupStorageConfig : Resource
    {
        /// <summary>
        /// Initializes a new instance of the BackupStorageConfig class.
        /// </summary>
        public BackupStorageConfig() { }

        /// <summary>
        /// Initializes a new instance of the BackupStorageConfig class.
        /// </summary>
        /// <param name="id">Resource Id represents the complete path to the
        /// resource.</param>
        /// <param name="name">Resource name associated with the
        /// resource.</param>
        /// <param name="type">Resource type represents the complete path of
        /// the form Namespace/ResourceType/ResourceType/...</param>
        /// <param name="eTag">Optional ETag.</param>
        /// <param name="storageModelType">Storage model type. Possible values
        /// include: 'Invalid', 'GeoRedundant', 'LocallyRedundant'</param>
        /// <param name="storageType">Storage type. Possible values include:
        /// 'Invalid', 'GeoRedundant', 'LocallyRedundant'</param>
        /// <param name="storageTypeState">Locked or Unlocked. Once a machine
        /// is registered against a resource, the storageTypeState is always
        /// Locked. Possible values include: 'Invalid', 'Locked',
        /// 'Unlocked'</param>
        public BackupStorageConfig(string id = default(string), string name = default(string), string type = default(string), string eTag = default(string), string storageModelType = default(string), string storageType = default(string), string storageTypeState = default(string))
            : base(id, name, type, eTag)
        {
            StorageModelType = storageModelType;
            StorageType = storageType;
            StorageTypeState = storageTypeState;
        }

        /// <summary>
        /// Gets or sets storage model type. Possible values include:
        /// 'Invalid', 'GeoRedundant', 'LocallyRedundant'
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageModelType")]
        public string StorageModelType { get; set; }

        /// <summary>
        /// Gets or sets storage type. Possible values include: 'Invalid',
        /// 'GeoRedundant', 'LocallyRedundant'
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageType")]
        public string StorageType { get; set; }

        /// <summary>
        /// Gets or sets locked or Unlocked. Once a machine is registered
        /// against a resource, the storageTypeState is always Locked. Possible
        /// values include: 'Invalid', 'Locked', 'Unlocked'
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageTypeState")]
        public string StorageTypeState { get; set; }

    }
}
