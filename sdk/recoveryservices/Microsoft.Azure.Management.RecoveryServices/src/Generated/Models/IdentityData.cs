// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.RecoveryServices.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Identity for the resource.
    /// </summary>
    public partial class IdentityData
    {
        /// <summary>
        /// Initializes a new instance of the IdentityData class.
        /// </summary>
        public IdentityData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdentityData class.
        /// </summary>
        /// <param name="type">The type of managed identity used. The type
        /// 'SystemAssigned, UserAssigned' includes both an implicitly created
        /// identity and a set of user-assigned identities. The type 'None'
        /// will remove any identities. Possible values include:
        /// 'SystemAssigned', 'None', 'UserAssigned', 'SystemAssigned,
        /// UserAssigned'</param>
        /// <param name="principalId">The principal ID of resource
        /// identity.</param>
        /// <param name="tenantId">The tenant ID of resource.</param>
        /// <param name="userAssignedIdentities">The list of user-assigned
        /// identities associated with the resource. The user-assigned identity
        /// dictionary keys will be ARM resource ids in the form:
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.</param>
        public IdentityData(string type, string principalId = default(string), string tenantId = default(string), IDictionary<string, UserIdentity> userAssignedIdentities = default(IDictionary<string, UserIdentity>))
        {
            PrincipalId = principalId;
            TenantId = tenantId;
            Type = type;
            UserAssignedIdentities = userAssignedIdentities;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the principal ID of resource identity.
        /// </summary>
        [JsonProperty(PropertyName = "principalId")]
        public string PrincipalId { get; private set; }

        /// <summary>
        /// Gets the tenant ID of resource.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets or sets the type of managed identity used. The type
        /// 'SystemAssigned, UserAssigned' includes both an implicitly created
        /// identity and a set of user-assigned identities. The type 'None'
        /// will remove any identities. Possible values include:
        /// 'SystemAssigned', 'None', 'UserAssigned', 'SystemAssigned,
        /// UserAssigned'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the list of user-assigned identities associated with
        /// the resource. The user-assigned identity dictionary keys will be
        /// ARM resource ids in the form:
        /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [JsonProperty(PropertyName = "userAssignedIdentities")]
        public IDictionary<string, UserIdentity> UserAssignedIdentities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
