// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.RecoveryServices.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.RecoveryServices.Samples
{
    public partial class Sample_RecoveryServicesVaultResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetRecoveryServicesResource()
        {
            // Generated from example definition: 2025-02-01/GETVault.json
            // this example is just showing the usage of "Vault_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "Default-RecoveryServices-ResourceGroup";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultResource result = await recoveryServicesVault.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteRecoveryServicesVault()
        {
            // Generated from example definition: 2025-02-01/DeleteVault.json
            // this example is just showing the usage of "Vault_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "Default-RecoveryServices-ResourceGroup";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            await recoveryServicesVault.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateResource()
        {
            // Generated from example definition: 2025-02-01/PATCHVault.json
            // this example is just showing the usage of "Vault_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultPatch patch = new RecoveryServicesVaultPatch(default)
            {
                Tags =
{
["PatchKey"] = "PatchKeyUpdated"
},
            };
            ArmOperation<RecoveryServicesVaultResource> lro = await recoveryServicesVault.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryServicesVaultResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateResourceWithCustomerManagedKeys()
        {
            // Generated from example definition: 2025-02-01/PATCHVault_WithCMK.json
            // this example is just showing the usage of "Vault_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultPatch patch = new RecoveryServicesVaultPatch(default)
            {
                Properties = new RecoveryServicesVaultProperties
                {
                    Encryption = new VaultPropertiesEncryption
                    {
                        KeyUri = new Uri("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
                        KekIdentity = new CmkKekIdentity
                        {
                            UserAssignedIdentity = new ResourceIdentifier("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"),
                        },
                        InfrastructureEncryption = InfrastructureEncryptionState.Enabled,
                    },
                },
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["PatchKey"] = "PatchKeyUpdated"
},
            };
            ArmOperation<RecoveryServicesVaultResource> lro = await recoveryServicesVault.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryServicesVaultResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateResourceWithCustomerManagedKeys3()
        {
            // Generated from example definition: 2025-02-01/PATCHVault_WithCMK3.json
            // this example is just showing the usage of "Vault_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultPatch patch = new RecoveryServicesVaultPatch(default)
            {
                Properties = new RecoveryServicesVaultProperties
                {
                    Encryption = new VaultPropertiesEncryption
                    {
                        KeyUri = new Uri("https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"),
                    },
                },
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["PatchKey"] = "PatchKeyUpdated"
},
            };
            ArmOperation<RecoveryServicesVaultResource> lro = await recoveryServicesVault.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryServicesVaultResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateVaultWithMonitoringSetting()
        {
            // Generated from example definition: 2025-02-01/PATCHVault_WithMonitoringSettings.json
            // this example is just showing the usage of "Vault_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultPatch patch = new RecoveryServicesVaultPatch(default)
            {
                Properties = new RecoveryServicesVaultProperties
                {
                    MonitoringSettings = new VaultMonitoringSettings
                    {
                        AzureMonitorAlertSettings = new AzureMonitorAlertSettings
                        {
                            AlertsForAllJobFailures = RecoveryServicesAlertsState.Enabled,
                            AlertsForAllReplicationIssues = RecoveryServicesAlertsState.Enabled,
                            AlertsForAllFailoverIssues = RecoveryServicesAlertsState.Disabled,
                        },
                        ClassicAlertSettings = new ClassicAlertSettings
                        {
                            AlertsForCriticalOperations = RecoveryServicesAlertsState.Disabled,
                            EmailNotificationsForSiteRecovery = RecoveryServicesAlertsState.Enabled,
                        },
                    },
                },
                Tags =
{
["PatchKey"] = "PatchKeyUpdated"
},
            };
            ArmOperation<RecoveryServicesVaultResource> lro = await recoveryServicesVault.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryServicesVaultResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateVaultWithRedundancySetting()
        {
            // Generated from example definition: 2025-02-01/PATCHVault_WithRedundancySettings.json
            // this example is just showing the usage of "Vault_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultPatch patch = new RecoveryServicesVaultPatch(default)
            {
                Properties = new RecoveryServicesVaultProperties
                {
                    RedundancySettings = new VaultPropertiesRedundancySettings
                    {
                        StandardTierStorageRedundancy = StandardTierStorageRedundancy.GeoRedundant,
                        CrossRegionRestore = CrossRegionRestore.Enabled,
                    },
                },
            };
            ArmOperation<RecoveryServicesVaultResource> lro = await recoveryServicesVault.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryServicesVaultResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateVaultWithSourceScanConfiguration()
        {
            // Generated from example definition: 2025-02-01/PATCHVault_WithSourceScanConfiguration.json
            // this example is just showing the usage of "Vault_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultPatch patch = new RecoveryServicesVaultPatch(default)
            {
                Properties = new RecoveryServicesVaultProperties
                {
                    SecuritySettings = new RecoveryServicesSecuritySettings(),
                },
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["PatchKey"] = "PatchKeyUpdated"
},
            };
            ArmOperation<RecoveryServicesVaultResource> lro = await recoveryServicesVault.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryServicesVaultResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateResourceWithUserAssignedIdentity()
        {
            // Generated from example definition: 2025-02-01/PATCHVault_WithUserAssignedIdentity.json
            // this example is just showing the usage of "Vault_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultPatch patch = new RecoveryServicesVaultPatch(default)
            {
                Identity = new ManagedServiceIdentity("UserAssigned")
                {
                    UserAssignedIdentities =
{
[new ResourceIdentifier("/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi")] = new UserAssignedIdentity()
},
                },
                Tags =
{
["PatchKey"] = "PatchKeyUpdated"
},
            };
            ArmOperation<RecoveryServicesVaultResource> lro = await recoveryServicesVault.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryServicesVaultResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateResourceWithCustomerManagedKeys2()
        {
            // Generated from example definition: 2025-02-01/PatchVault_WithCMK2.json
            // this example is just showing the usage of "Vault_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            RecoveryServicesVaultPatch patch = new RecoveryServicesVaultPatch(default)
            {
                Properties = new RecoveryServicesVaultProperties
                {
                    Encryption = new VaultPropertiesEncryption
                    {
                        KekIdentity = new CmkKekIdentity
                        {
                            UseSystemAssignedIdentity = true,
                        },
                    },
                },
                Identity = new ManagedServiceIdentity("SystemAssigned"),
                Tags =
{
["PatchKey"] = "PatchKeyUpdated"
},
            };
            ArmOperation<RecoveryServicesVaultResource> lro = await recoveryServicesVault.UpdateAsync(WaitUntil.Completed, patch);
            RecoveryServicesVaultResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetOperationStatusRecoveryServicesClient_GetOperationStatus()
        {
            // Generated from example definition: 2025-02-01/GetOperationStatus.json
            // this example is just showing the usage of "Vault_GetOperationStatus" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            string operationId = "YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA==";
            OperationResource result = await recoveryServicesVault.GetOperationStatusRecoveryServicesClientAsync(operationId);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetOperationResultRecoveryServicesClient_GetOperationResult()
        {
            // Generated from example definition: 2025-02-01/GetOperationResult.json
            // this example is just showing the usage of "Vault_GetOperationResult" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this RecoveryServicesVaultResource created on azure
            // for more information of creating RecoveryServicesVaultResource, please refer to the document of RecoveryServicesVaultResource
            string subscriptionId = "77777777-b0c6-47a2-b37c-d8e65a629c18";
            string resourceGroupName = "HelloWorld";
            string vaultName = "swaggerExample";
            ResourceIdentifier recoveryServicesVaultResourceId = RecoveryServicesVaultResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, vaultName);
            RecoveryServicesVaultResource recoveryServicesVault = client.GetRecoveryServicesVaultResource(recoveryServicesVaultResourceId);

            // invoke the operation
            string operationId = "YWUzNDFkMzQtZmM5OS00MmUyLWEzNDMtZGJkMDIxZjlmZjgzOzdmYzBiMzhmLTc2NmItNDM5NS05OWQ1LTVmOGEzNzg4MWQzNA==";
            RecoveryServicesVaultResource result = await recoveryServicesVault.GetOperationResultRecoveryServicesClientAsync(operationId);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoveryServicesVaultData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
