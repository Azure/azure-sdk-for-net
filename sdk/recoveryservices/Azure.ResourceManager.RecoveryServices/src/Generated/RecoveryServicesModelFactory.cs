// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.RecoveryServices;

namespace Azure.ResourceManager.RecoveryServices.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class RecoveryServicesModelFactory
    {
        /// <summary> Initializes a new instance of VaultCertificateResponse. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Certificate details representing the Vault credentials.
        /// Please note <see cref="ResourceCertificateDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ResourceCertificateAndAcsDetails"/> and <see cref="ResourceCertificateAndAadDetails"/>.
        /// </param>
        /// <returns> A new <see cref="Models.VaultCertificateResponse"/> instance for mocking. </returns>
        public static VaultCertificateResponse VaultCertificateResponse(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceCertificateDetails properties = null)
        {
            return new VaultCertificateResponse(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of ResourceCertificateDetails. </summary>
        /// <param name="authType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <param name="certificate"> The base64 encoded certificate raw data string. </param>
        /// <param name="friendlyName"> Certificate friendly name. </param>
        /// <param name="issuer"> Certificate issuer. </param>
        /// <param name="resourceId"> Resource ID of the vault. </param>
        /// <param name="subject"> Certificate Subject Name. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <param name="validFrom"> Certificate Validity start Date time. </param>
        /// <param name="validTo"> Certificate Validity End Date time. </param>
        /// <returns> A new <see cref="Models.ResourceCertificateDetails"/> instance for mocking. </returns>
        public static ResourceCertificateDetails ResourceCertificateDetails(string authType = null, byte[] certificate = null, string friendlyName = null, string issuer = null, long? resourceId = null, string subject = null, string thumbprint = null, DateTimeOffset? validFrom = null, DateTimeOffset? validTo = null)
        {
            return new UnknownResourceCertificateDetails(authType, certificate, friendlyName, issuer, resourceId, subject, thumbprint, validFrom, validTo);
        }

        /// <summary> Initializes a new instance of ReplicationUsage. </summary>
        /// <param name="monitoringSummary"> Summary of the replication monitoring data for this vault. </param>
        /// <param name="jobsSummary"> Summary of the replication jobs data for this vault. </param>
        /// <param name="protectedItemCount"> Number of replication protected items for this vault. </param>
        /// <param name="recoveryPlanCount"> Number of replication recovery plans for this vault. </param>
        /// <param name="registeredServersCount"> Number of servers registered to this vault. </param>
        /// <param name="recoveryServicesProviderAuthType"> The authentication type of recovery service providers in the vault. </param>
        /// <returns> A new <see cref="Models.ReplicationUsage"/> instance for mocking. </returns>
        public static ReplicationUsage ReplicationUsage(MonitoringSummary monitoringSummary = null, JobsSummary jobsSummary = null, int? protectedItemCount = null, int? recoveryPlanCount = null, int? registeredServersCount = null, int? recoveryServicesProviderAuthType = null)
        {
            return new ReplicationUsage(monitoringSummary, jobsSummary, protectedItemCount, recoveryPlanCount, registeredServersCount, recoveryServicesProviderAuthType);
        }

        /// <summary> Initializes a new instance of MonitoringSummary. </summary>
        /// <param name="unHealthyVmCount"> Count of unhealthy VMs. </param>
        /// <param name="unHealthyProviderCount"> Count of unhealthy replication providers. </param>
        /// <param name="eventsCount"> Count of all critical warnings. </param>
        /// <param name="deprecatedProviderCount"> Count of all deprecated recovery service providers. </param>
        /// <param name="supportedProviderCount"> Count of all the supported recovery service providers. </param>
        /// <param name="unsupportedProviderCount"> Count of all the unsupported recovery service providers. </param>
        /// <returns> A new <see cref="Models.MonitoringSummary"/> instance for mocking. </returns>
        public static MonitoringSummary MonitoringSummary(int? unHealthyVmCount = null, int? unHealthyProviderCount = null, int? eventsCount = null, int? deprecatedProviderCount = null, int? supportedProviderCount = null, int? unsupportedProviderCount = null)
        {
            return new MonitoringSummary(unHealthyVmCount, unHealthyProviderCount, eventsCount, deprecatedProviderCount, supportedProviderCount, unsupportedProviderCount);
        }

        /// <summary> Initializes a new instance of JobsSummary. </summary>
        /// <param name="failedJobs"> Count of failed jobs. </param>
        /// <param name="suspendedJobs"> Count of suspended jobs. </param>
        /// <param name="inProgressJobs"> Count of in-progress jobs. </param>
        /// <returns> A new <see cref="Models.JobsSummary"/> instance for mocking. </returns>
        public static JobsSummary JobsSummary(int? failedJobs = null, int? suspendedJobs = null, int? inProgressJobs = null)
        {
            return new JobsSummary(failedJobs, suspendedJobs, inProgressJobs);
        }

        /// <summary> Initializes a new instance of RecoveryServicesPrivateLinkResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> e.g. f9ad6492-33d4-4690-9999-6bfd52a0d081 (Backup) or f9ad6492-33d4-4690-9999-6bfd52a0d082 (SiteRecovery). </param>
        /// <param name="requiredMembers"> [backup-ecs1, backup-prot1, backup-prot1b, backup-prot1c, backup-id1]. </param>
        /// <param name="requiredZoneNames"> The private link resource Private link DNS zone name. </param>
        /// <returns> A new <see cref="RecoveryServices.RecoveryServicesPrivateLinkResourceData"/> instance for mocking. </returns>
        public static RecoveryServicesPrivateLinkResourceData RecoveryServicesPrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new RecoveryServicesPrivateLinkResourceData(id, name, resourceType, systemData, groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of CheckNameAvailabilityResult. </summary>
        /// <param name="nameAvailable"></param>
        /// <param name="reason"></param>
        /// <param name="message"></param>
        /// <returns> A new <see cref="Models.CheckNameAvailabilityResult"/> instance for mocking. </returns>
        public static CheckNameAvailabilityResult CheckNameAvailabilityResult(bool? nameAvailable = null, string reason = null, string message = null)
        {
            return new CheckNameAvailabilityResult(nameAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of VaultData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="properties"> Properties of the vault. </param>
        /// <param name="sku"> Identifies the unique system identifier for each Azure resource. </param>
        /// <param name="etag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServices.VaultData"/> instance for mocking. </returns>
        public static VaultData VaultData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, VaultProperties properties = null, RecoveryServicesSku sku = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VaultData(id, name, resourceType, systemData, tags, location, identity, properties, sku, etag);
        }

        /// <summary> Initializes a new instance of VaultProperties. </summary>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="upgradeDetails"> Details for upgrading vault. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connection. </param>
        /// <param name="privateEndpointStateForBackup"> Private endpoint state for backup. </param>
        /// <param name="privateEndpointStateForSiteRecovery"> Private endpoint state for site recovery. </param>
        /// <param name="encryption"> Customer Managed Key details of the resource. </param>
        /// <param name="moveDetails"> The details of the latest move operation performed on the Azure Resource. </param>
        /// <param name="moveState"> The State of the Resource after the move operation. </param>
        /// <param name="backupStorageVersion"> Backup storage version. </param>
        /// <param name="monitoringSettings"> Monitoring Settings of the vault. </param>
        /// <param name="redundancySettings"> The redundancy Settings of a Vault. </param>
        /// <param name="immutabilityState"> Security Settings of the vault. </param>
        /// <returns> A new <see cref="Models.VaultProperties"/> instance for mocking. </returns>
        public static VaultProperties VaultProperties(string provisioningState = null, UpgradeDetails upgradeDetails = null, IEnumerable<PrivateEndpointConnectionVaultProperties> privateEndpointConnections = null, VaultPrivateEndpointState? privateEndpointStateForBackup = null, VaultPrivateEndpointState? privateEndpointStateForSiteRecovery = null, VaultPropertiesEncryption encryption = null, VaultPropertiesMoveDetails moveDetails = null, ResourceMoveState? moveState = null, BackupStorageVersion? backupStorageVersion = null, MonitoringSettings monitoringSettings = null, VaultPropertiesRedundancySettings redundancySettings = null, ImmutabilityState? immutabilityState = null)
        {
            privateEndpointConnections ??= new List<PrivateEndpointConnectionVaultProperties>();

            return new VaultProperties(provisioningState, upgradeDetails, privateEndpointConnections?.ToList(), privateEndpointStateForBackup, privateEndpointStateForSiteRecovery, encryption, moveDetails, moveState, backupStorageVersion, monitoringSettings, redundancySettings, immutabilityState != null ? new SecuritySettings(new ImmutabilitySettings(immutabilityState)) : null);
        }

        /// <summary> Initializes a new instance of UpgradeDetails. </summary>
        /// <param name="operationId"> ID of the vault upgrade operation. </param>
        /// <param name="startTimeUtc"> UTC time at which the upgrade operation has started. </param>
        /// <param name="lastUpdatedTimeUtc"> UTC time at which the upgrade operation status was last updated. </param>
        /// <param name="endTimeUtc"> UTC time at which the upgrade operation has ended. </param>
        /// <param name="status"> Status of the vault upgrade operation. </param>
        /// <param name="message"> Message to the user containing information about the upgrade operation. </param>
        /// <param name="triggerType"> The way the vault upgrade was triggered. </param>
        /// <param name="upgradedResourceId"> Resource ID of the upgraded vault. </param>
        /// <param name="previousResourceId"> Resource ID of the vault before the upgrade. </param>
        /// <returns> A new <see cref="Models.UpgradeDetails"/> instance for mocking. </returns>
        public static UpgradeDetails UpgradeDetails(string operationId = null, DateTimeOffset? startTimeUtc = null, DateTimeOffset? lastUpdatedTimeUtc = null, DateTimeOffset? endTimeUtc = null, VaultUpgradeState? status = null, string message = null, TriggerType? triggerType = null, string upgradedResourceId = null, string previousResourceId = null)
        {
            return new UpgradeDetails(operationId, startTimeUtc, lastUpdatedTimeUtc, endTimeUtc, status, message, triggerType, upgradedResourceId, previousResourceId);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionVaultProperties. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Private Endpoint Connection Response Properties. </param>
        /// <param name="location"> The location of the private Endpoint connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionVaultProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionVaultProperties PrivateEndpointConnectionVaultProperties(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RecoveryServicesPrivateEndpointConnection properties = null, AzureLocation? location = null)
        {
            return new PrivateEndpointConnectionVaultProperties(id, name, resourceType, systemData, properties, location);
        }

        /// <summary> Initializes a new instance of RecoveryServicesPrivateEndpointConnection. </summary>
        /// <param name="provisioningState"> Gets or sets provisioning state of the private endpoint connection. </param>
        /// <param name="privateEndpointId"> The Private Endpoint network resource that is linked to the Private Endpoint connection. </param>
        /// <param name="privateLinkServiceConnectionState"> Gets or sets private link service connection state. </param>
        /// <returns> A new <see cref="Models.RecoveryServicesPrivateEndpointConnection"/> instance for mocking. </returns>
        public static RecoveryServicesPrivateEndpointConnection RecoveryServicesPrivateEndpointConnection(ProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, RecoveryServicesPrivateLinkServiceConnectionState privateLinkServiceConnectionState = null)
        {
            return new RecoveryServicesPrivateEndpointConnection(provisioningState, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, privateLinkServiceConnectionState);
        }

        /// <summary> Initializes a new instance of RecoveryServicesPrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> Gets or sets the status. </param>
        /// <param name="description"> Gets or sets description. </param>
        /// <param name="actionsRequired"> Gets or sets actions required. </param>
        /// <returns> A new <see cref="Models.RecoveryServicesPrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static RecoveryServicesPrivateLinkServiceConnectionState RecoveryServicesPrivateLinkServiceConnectionState(PrivateEndpointConnectionStatus? status = null, string description = null, string actionsRequired = null)
        {
            return new RecoveryServicesPrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of VaultPropertiesEncryption. </summary>
        /// <param name="keyUri"> The properties of the Key Vault which hosts CMK. </param>
        /// <param name="kekIdentity"> The details of the identity used for CMK. </param>
        /// <param name="infrastructureEncryption"> Enabling/Disabling the Double Encryption state. </param>
        /// <returns> A new <see cref="Models.VaultPropertiesEncryption"/> instance for mocking. </returns>
        public static VaultPropertiesEncryption VaultPropertiesEncryption(Uri keyUri = null, CmkKekIdentity kekIdentity = null, InfrastructureEncryptionState? infrastructureEncryption = null)
        {
            return new VaultPropertiesEncryption(keyUri != null ? new CmkKeyVaultProperties(keyUri) : null, kekIdentity, infrastructureEncryption);
        }

        /// <summary> Initializes a new instance of CmkKekIdentity. </summary>
        /// <param name="useSystemAssignedIdentity"> Indicate that system assigned identity should be used. Mutually exclusive with &apos;userAssignedIdentity&apos; field. </param>
        /// <param name="userAssignedIdentity"> The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned. </param>
        /// <returns> A new <see cref="Models.CmkKekIdentity"/> instance for mocking. </returns>
        public static CmkKekIdentity CmkKekIdentity(bool? useSystemAssignedIdentity = null, string userAssignedIdentity = null)
        {
            return new CmkKekIdentity(useSystemAssignedIdentity, userAssignedIdentity);
        }

        /// <summary> Initializes a new instance of VaultPropertiesMoveDetails. </summary>
        /// <param name="operationId"> OperationId of the Resource Move Operation. </param>
        /// <param name="startTimeUtc"> Start Time of the Resource Move Operation. </param>
        /// <param name="completionTimeUtc"> End Time of the Resource Move Operation. </param>
        /// <param name="sourceResourceId"> Source Resource of the Resource Move Operation. </param>
        /// <param name="targetResourceId"> Target Resource of the Resource Move Operation. </param>
        /// <returns> A new <see cref="Models.VaultPropertiesMoveDetails"/> instance for mocking. </returns>
        public static VaultPropertiesMoveDetails VaultPropertiesMoveDetails(string operationId = null, DateTimeOffset? startTimeUtc = null, DateTimeOffset? completionTimeUtc = null, string sourceResourceId = null, string targetResourceId = null)
        {
            return new VaultPropertiesMoveDetails(operationId, startTimeUtc, completionTimeUtc, sourceResourceId, targetResourceId);
        }

        /// <summary> Initializes a new instance of MonitoringSettings. </summary>
        /// <param name="azureMonitorAlertAlertsForAllJobFailures"> Settings for Azure Monitor based alerts. </param>
        /// <param name="classicAlertAlertsForCriticalOperations"> Settings for classic alerts. </param>
        /// <returns> A new <see cref="Models.MonitoringSettings"/> instance for mocking. </returns>
        public static MonitoringSettings MonitoringSettings(AlertsState? azureMonitorAlertAlertsForAllJobFailures = null, AlertsState? classicAlertAlertsForCriticalOperations = null)
        {
            return new MonitoringSettings(azureMonitorAlertAlertsForAllJobFailures != null ? new AzureMonitorAlertSettings(azureMonitorAlertAlertsForAllJobFailures) : null, classicAlertAlertsForCriticalOperations != null ? new ClassicAlertSettings(classicAlertAlertsForCriticalOperations) : null);
        }

        /// <summary> Initializes a new instance of VaultPropertiesRedundancySettings. </summary>
        /// <param name="standardTierStorageRedundancy"> The storage redundancy setting of a vault. </param>
        /// <param name="crossRegionRestore"> Flag to show if Cross Region Restore is enabled on the Vault or not. </param>
        /// <returns> A new <see cref="Models.VaultPropertiesRedundancySettings"/> instance for mocking. </returns>
        public static VaultPropertiesRedundancySettings VaultPropertiesRedundancySettings(StandardTierStorageRedundancy? standardTierStorageRedundancy = null, CrossRegionRestore? crossRegionRestore = null)
        {
            return new VaultPropertiesRedundancySettings(standardTierStorageRedundancy, crossRegionRestore);
        }

        /// <summary> Initializes a new instance of RecoveryServicesSku. </summary>
        /// <param name="name"> Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig. </param>
        /// <param name="tier"> The Sku tier. </param>
        /// <param name="family"> The sku family. </param>
        /// <param name="size"> The sku size. </param>
        /// <param name="capacity"> The sku capacity. </param>
        /// <returns> A new <see cref="Models.RecoveryServicesSku"/> instance for mocking. </returns>
        public static RecoveryServicesSku RecoveryServicesSku(RecoveryServicesSkuName name = default, string tier = null, string family = null, string size = null, string capacity = null)
        {
            return new RecoveryServicesSku(name, tier, family, size, capacity);
        }

        /// <summary> Initializes a new instance of VaultPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Properties of the vault. </param>
        /// <param name="sku"> Identifies the unique system identifier for each Azure resource. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="etag"> Optional ETag. </param>
        /// <returns> A new <see cref="Models.VaultPatch"/> instance for mocking. </returns>
        public static VaultPatch VaultPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VaultProperties properties = null, RecoveryServicesSku sku = null, ManagedServiceIdentity identity = null, ETag? etag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VaultPatch(id, name, resourceType, systemData, tags, location, properties, sku, identity, etag);
        }

        /// <summary> Initializes a new instance of VaultExtendedInfoResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="integrityKey"> Integrity key. </param>
        /// <param name="encryptionKey"> Encryption key. </param>
        /// <param name="encryptionKeyThumbprint"> Encryption key thumbprint. </param>
        /// <param name="algorithm"> Algorithm for Vault ExtendedInfo. </param>
        /// <param name="etag"> Optional ETag. </param>
        /// <returns> A new <see cref="RecoveryServices.VaultExtendedInfoResourceData"/> instance for mocking. </returns>
        public static VaultExtendedInfoResourceData VaultExtendedInfoResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string integrityKey = null, string encryptionKey = null, string encryptionKeyThumbprint = null, string algorithm = null, ETag? etag = null)
        {
            return new VaultExtendedInfoResourceData(id, name, resourceType, systemData, integrityKey, encryptionKey, encryptionKeyThumbprint, algorithm, etag);
        }

        /// <summary> Initializes a new instance of VaultUsage. </summary>
        /// <param name="unit"> Unit of the usage. </param>
        /// <param name="quotaPeriod"> Quota period of usage. </param>
        /// <param name="nextResetOn"> Next reset time of usage. </param>
        /// <param name="currentValue"> Current value of usage. </param>
        /// <param name="limit"> Limit of usage. </param>
        /// <param name="name"> Name of usage. </param>
        /// <returns> A new <see cref="Models.VaultUsage"/> instance for mocking. </returns>
        public static VaultUsage VaultUsage(UsagesUnit? unit = null, string quotaPeriod = null, DateTimeOffset? nextResetOn = null, long? currentValue = null, long? limit = null, NameInfo name = null)
        {
            return new VaultUsage(unit, quotaPeriod, nextResetOn, currentValue, limit, name);
        }

        /// <summary> Initializes a new instance of NameInfo. </summary>
        /// <param name="value"> Value of usage. </param>
        /// <param name="localizedValue"> Localized value of usage. </param>
        /// <returns> A new <see cref="Models.NameInfo"/> instance for mocking. </returns>
        public static NameInfo NameInfo(string value = null, string localizedValue = null)
        {
            return new NameInfo(value, localizedValue);
        }

        /// <summary> Initializes a new instance of ResourceCertificateAndAadDetails. </summary>
        /// <param name="certificate"> The base64 encoded certificate raw data string. </param>
        /// <param name="friendlyName"> Certificate friendly name. </param>
        /// <param name="issuer"> Certificate issuer. </param>
        /// <param name="resourceId"> Resource ID of the vault. </param>
        /// <param name="subject"> Certificate Subject Name. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <param name="validFrom"> Certificate Validity start Date time. </param>
        /// <param name="validTo"> Certificate Validity End Date time. </param>
        /// <param name="aadAuthority"> AAD tenant authority. </param>
        /// <param name="aadTenantId"> AAD tenant Id. </param>
        /// <param name="servicePrincipalClientId"> AAD service principal clientId. </param>
        /// <param name="servicePrincipalObjectId"> AAD service principal ObjectId. </param>
        /// <param name="azureManagementEndpointAudience"> Azure Management Endpoint Audience. </param>
        /// <param name="serviceResourceId"> Service Resource Id. </param>
        /// <param name="aadAudience"> AAD audience for the resource. </param>
        /// <returns> A new <see cref="Models.ResourceCertificateAndAadDetails"/> instance for mocking. </returns>
        public static ResourceCertificateAndAadDetails ResourceCertificateAndAadDetails(byte[] certificate = null, string friendlyName = null, string issuer = null, long? resourceId = null, string subject = null, string thumbprint = null, DateTimeOffset? validFrom = null, DateTimeOffset? validTo = null, string aadAuthority = null, string aadTenantId = null, string servicePrincipalClientId = null, string servicePrincipalObjectId = null, string azureManagementEndpointAudience = null, string serviceResourceId = null, string aadAudience = null)
        {
            return new ResourceCertificateAndAadDetails("AzureActiveDirectory", certificate, friendlyName, issuer, resourceId, subject, thumbprint, validFrom, validTo, aadAuthority, aadTenantId, servicePrincipalClientId, servicePrincipalObjectId, azureManagementEndpointAudience, serviceResourceId, aadAudience);
        }

        /// <summary> Initializes a new instance of ResourceCertificateAndAcsDetails. </summary>
        /// <param name="certificate"> The base64 encoded certificate raw data string. </param>
        /// <param name="friendlyName"> Certificate friendly name. </param>
        /// <param name="issuer"> Certificate issuer. </param>
        /// <param name="resourceId"> Resource ID of the vault. </param>
        /// <param name="subject"> Certificate Subject Name. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <param name="validFrom"> Certificate Validity start Date time. </param>
        /// <param name="validTo"> Certificate Validity End Date time. </param>
        /// <param name="globalAcsNamespace"> ACS namespace name - tenant for our service. </param>
        /// <param name="globalAcsHostName"> Acs mgmt host name to connect to. </param>
        /// <param name="globalAcsRPRealm"> Global ACS namespace RP realm. </param>
        /// <returns> A new <see cref="Models.ResourceCertificateAndAcsDetails"/> instance for mocking. </returns>
        public static ResourceCertificateAndAcsDetails ResourceCertificateAndAcsDetails(byte[] certificate = null, string friendlyName = null, string issuer = null, long? resourceId = null, string subject = null, string thumbprint = null, DateTimeOffset? validFrom = null, DateTimeOffset? validTo = null, string globalAcsNamespace = null, string globalAcsHostName = null, string globalAcsRPRealm = null)
        {
            return new ResourceCertificateAndAcsDetails("AccessControlService", certificate, friendlyName, issuer, resourceId, subject, thumbprint, validFrom, validTo, globalAcsNamespace, globalAcsHostName, globalAcsRPRealm);
        }
    }
}
