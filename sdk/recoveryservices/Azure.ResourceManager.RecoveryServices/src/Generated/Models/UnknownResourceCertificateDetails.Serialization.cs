// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.RecoveryServices.Models
{
    internal partial class UnknownResourceCertificateDetails : IUtf8JsonSerializable, IModelJsonSerializable<ResourceCertificateDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<ResourceCertificateDetails>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<ResourceCertificateDetails>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ResourceCertificateDetails>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("authType"u8);
            writer.WriteStringValue(AuthType);
            if (Optional.IsDefined(Certificate))
            {
                writer.WritePropertyName("certificate"u8);
                writer.WriteBase64StringValue(Certificate, "D");
            }
            if (Optional.IsDefined(FriendlyName))
            {
                writer.WritePropertyName("friendlyName"u8);
                writer.WriteStringValue(FriendlyName);
            }
            if (Optional.IsDefined(Issuer))
            {
                writer.WritePropertyName("issuer"u8);
                writer.WriteStringValue(Issuer);
            }
            if (Optional.IsDefined(ResourceId))
            {
                writer.WritePropertyName("resourceId"u8);
                writer.WriteNumberValue(ResourceId.Value);
            }
            if (Optional.IsDefined(Subject))
            {
                writer.WritePropertyName("subject"u8);
                writer.WriteStringValue(Subject);
            }
            if (Optional.IsDefined(Thumbprint))
            {
                writer.WritePropertyName("thumbprint"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(Thumbprint);
#else
                JsonSerializer.Serialize(writer, JsonDocument.Parse(Thumbprint.ToString()).RootElement);
#endif
            }
            if (Optional.IsDefined(ValidStartOn))
            {
                writer.WritePropertyName("validFrom"u8);
                writer.WriteStringValue(ValidStartOn.Value, "O");
            }
            if (Optional.IsDefined(ValidEndOn))
            {
                writer.WritePropertyName("validTo"u8);
                writer.WriteStringValue(ValidEndOn.Value, "O");
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static ResourceCertificateDetails DeserializeUnknownResourceCertificateDetails(JsonElement element, ModelSerializerOptions options = default) => DeserializeResourceCertificateDetails(element, options);

        ResourceCertificateDetails IModelJsonSerializable<ResourceCertificateDetails>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ResourceCertificateDetails>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeUnknownResourceCertificateDetails(doc.RootElement, options);
        }

        BinaryData IModelSerializable<ResourceCertificateDetails>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ResourceCertificateDetails>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        ResourceCertificateDetails IModelSerializable<ResourceCertificateDetails>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<ResourceCertificateDetails>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeResourceCertificateDetails(doc.RootElement, options);
        }
    }
}
