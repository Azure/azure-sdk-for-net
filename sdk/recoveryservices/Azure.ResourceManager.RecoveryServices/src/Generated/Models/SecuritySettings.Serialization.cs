// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServices.Models
{
    public partial class SecuritySettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ImmutabilitySettings))
            {
                writer.WritePropertyName("immutabilitySettings"u8);
                writer.WriteObjectValue(ImmutabilitySettings);
            }
            if (Optional.IsDefined(SoftDeleteSettings))
            {
                writer.WritePropertyName("softDeleteSettings"u8);
                writer.WriteObjectValue(SoftDeleteSettings);
            }
            writer.WriteEndObject();
        }

        internal static SecuritySettings DeserializeSecuritySettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ImmutabilitySettings> immutabilitySettings = default;
            Optional<SoftDeleteSettings> softDeleteSettings = default;
            Optional<MultiUserAuthorization> multiUserAuthorization = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("immutabilitySettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    immutabilitySettings = ImmutabilitySettings.DeserializeImmutabilitySettings(property.Value);
                    continue;
                }
                if (property.NameEquals("softDeleteSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    softDeleteSettings = SoftDeleteSettings.DeserializeSoftDeleteSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("multiUserAuthorization"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    multiUserAuthorization = new MultiUserAuthorization(property.Value.GetString());
                    continue;
                }
            }
            return new SecuritySettings(immutabilitySettings.Value, softDeleteSettings.Value, Optional.ToNullable(multiUserAuthorization));
        }
    }
}
