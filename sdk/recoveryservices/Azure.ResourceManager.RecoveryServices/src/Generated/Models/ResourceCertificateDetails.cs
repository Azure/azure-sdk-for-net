// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.RecoveryServices.Models
{
    /// <summary>
    /// Certificate details representing the Vault credentials.
    /// Please note <see cref="ResourceCertificateDetails"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="ResourceCertificateAndAcsDetails"/> and <see cref="ResourceCertificateAndAadDetails"/>.
    /// </summary>
    public abstract partial class ResourceCertificateDetails
    {
        /// <summary> Initializes a new instance of ResourceCertificateDetails. </summary>
        protected ResourceCertificateDetails()
        {
        }

        /// <summary> Initializes a new instance of ResourceCertificateDetails. </summary>
        /// <param name="authType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <param name="certificate"> The base64 encoded certificate raw data string. </param>
        /// <param name="friendlyName"> Certificate friendly name. </param>
        /// <param name="issuer"> Certificate issuer. </param>
        /// <param name="resourceId"> Resource ID of the vault. </param>
        /// <param name="subject"> Certificate Subject Name. </param>
        /// <param name="thumbprint"> Certificate thumbprint. </param>
        /// <param name="validFrom"> Certificate Validity start Date time. </param>
        /// <param name="validTo"> Certificate Validity End Date time. </param>
        internal ResourceCertificateDetails(string authType, byte[] certificate, string friendlyName, string issuer, long? resourceId, string subject, string thumbprint, DateTimeOffset? validFrom, DateTimeOffset? validTo)
        {
            AuthType = authType;
            Certificate = certificate;
            FriendlyName = friendlyName;
            Issuer = issuer;
            ResourceId = resourceId;
            Subject = subject;
            Thumbprint = thumbprint;
            ValidFrom = validFrom;
            ValidTo = validTo;
        }

        /// <summary> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </summary>
        internal string AuthType { get; set; }
        /// <summary> The base64 encoded certificate raw data string. </summary>
        public byte[] Certificate { get; }
        /// <summary> Certificate friendly name. </summary>
        public string FriendlyName { get; }
        /// <summary> Certificate issuer. </summary>
        public string Issuer { get; }
        /// <summary> Resource ID of the vault. </summary>
        public long? ResourceId { get; }
        /// <summary> Certificate Subject Name. </summary>
        public string Subject { get; }
        /// <summary> Certificate thumbprint. </summary>
        public string Thumbprint { get; }
        /// <summary> Certificate Validity start Date time. </summary>
        public DateTimeOffset? ValidFrom { get; }
        /// <summary> Certificate Validity End Date time. </summary>
        public DateTimeOffset? ValidTo { get; }
    }
}
