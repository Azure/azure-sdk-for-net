// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServices.Models
{
    /// <summary> Security levels of Recovery Services Vault for business continuity and disaster recovery. </summary>
    public readonly partial struct BCDRSecurityLevel : IEquatable<BCDRSecurityLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BCDRSecurityLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BCDRSecurityLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PoorValue = "Poor";
        private const string FairValue = "Fair";
        private const string GoodValue = "Good";
        private const string ExcellentValue = "Excellent";

        /// <summary> Poor. </summary>
        public static BCDRSecurityLevel Poor { get; } = new BCDRSecurityLevel(PoorValue);
        /// <summary> Fair. </summary>
        public static BCDRSecurityLevel Fair { get; } = new BCDRSecurityLevel(FairValue);
        /// <summary> Good. </summary>
        public static BCDRSecurityLevel Good { get; } = new BCDRSecurityLevel(GoodValue);
        /// <summary> Excellent. </summary>
        public static BCDRSecurityLevel Excellent { get; } = new BCDRSecurityLevel(ExcellentValue);
        /// <summary> Determines if two <see cref="BCDRSecurityLevel"/> values are the same. </summary>
        public static bool operator ==(BCDRSecurityLevel left, BCDRSecurityLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BCDRSecurityLevel"/> values are not the same. </summary>
        public static bool operator !=(BCDRSecurityLevel left, BCDRSecurityLevel right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BCDRSecurityLevel"/>. </summary>
        public static implicit operator BCDRSecurityLevel(string value) => new BCDRSecurityLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BCDRSecurityLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BCDRSecurityLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
