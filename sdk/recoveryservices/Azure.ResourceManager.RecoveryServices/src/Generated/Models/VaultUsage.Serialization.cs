// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServices.Models
{
    public partial class VaultUsage
    {
        internal static VaultUsage DeserializeVaultUsage(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<VaultUsageUnit> unit = default;
            Core.Optional<string> quotaPeriod = default;
            Core.Optional<DateTimeOffset> nextResetTime = default;
            Core.Optional<long> currentValue = default;
            Core.Optional<long> limit = default;
            Core.Optional<VaultUsageNameInfo> name = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("unit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unit = new VaultUsageUnit(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("quotaPeriod"u8))
                {
                    quotaPeriod = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nextResetTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nextResetTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentValue = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("limit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    limit = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    name = VaultUsageNameInfo.DeserializeVaultUsageNameInfo(property.Value);
                    continue;
                }
            }
            return new VaultUsage(Core.Optional.ToNullable(unit), quotaPeriod.Value, Core.Optional.ToNullable(nextResetTime), Core.Optional.ToNullable(currentValue), Core.Optional.ToNullable(limit), name.Value);
        }
    }
}
