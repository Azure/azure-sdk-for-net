// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServices.Models
{
    /// <summary> Specifies the authentication type. </summary>
    public readonly partial struct AuthType : IEquatable<AuthType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AuthType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "Invalid";
        private const string ACSValue = "ACS";
        private const string AADValue = "AAD";
        private const string AccessControlServiceValue = "AccessControlService";
        private const string AzureActiveDirectoryValue = "AzureActiveDirectory";

        /// <summary> Invalid. </summary>
        public static AuthType Invalid { get; } = new AuthType(InvalidValue);
        /// <summary> ACS. </summary>
        public static AuthType ACS { get; } = new AuthType(ACSValue);
        /// <summary> AAD. </summary>
        public static AuthType AAD { get; } = new AuthType(AADValue);
        /// <summary> AccessControlService. </summary>
        public static AuthType AccessControlService { get; } = new AuthType(AccessControlServiceValue);
        /// <summary> AzureActiveDirectory. </summary>
        public static AuthType AzureActiveDirectory { get; } = new AuthType(AzureActiveDirectoryValue);
        /// <summary> Determines if two <see cref="AuthType"/> values are the same. </summary>
        public static bool operator ==(AuthType left, AuthType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AuthType"/> values are not the same. </summary>
        public static bool operator !=(AuthType left, AuthType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AuthType"/>. </summary>
        public static implicit operator AuthType(string value) => new AuthType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AuthType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AuthType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
