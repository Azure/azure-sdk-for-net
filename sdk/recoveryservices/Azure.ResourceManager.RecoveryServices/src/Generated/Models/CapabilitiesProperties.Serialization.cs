// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.RecoveryServices.Models
{
    internal partial class CapabilitiesProperties : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(DnsZones))
            {
                writer.WritePropertyName("dnsZones"u8);
                writer.WriteStartArray();
                foreach (var item in DnsZones)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static CapabilitiesProperties DeserializeCapabilitiesProperties(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IList<DnsZone>> dnsZones = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dnsZones"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DnsZone> array = new List<DnsZone>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DnsZone.DeserializeDnsZone(item));
                    }
                    dnsZones = array;
                    continue;
                }
            }
            return new CapabilitiesProperties(Optional.ToList(dnsZones));
        }
    }
}
