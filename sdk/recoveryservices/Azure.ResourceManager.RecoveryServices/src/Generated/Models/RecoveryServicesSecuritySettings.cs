// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.ResourceManager.RecoveryServices.Models
{
    /// <summary> Security Settings of the vault. </summary>
    public partial class RecoveryServicesSecuritySettings
    {
        /// <summary> Initializes a new instance of <see cref="RecoveryServicesSecuritySettings"/>. </summary>
        public RecoveryServicesSecuritySettings()
        {
        }

        /// <summary> Initializes a new instance of <see cref="RecoveryServicesSecuritySettings"/>. </summary>
        /// <param name="immutabilitySettings"> Immutability Settings of a vault. </param>
        /// <param name="softDeleteSettings"> Soft delete Settings of a vault. </param>
        /// <param name="multiUserAuthorization"> MUA Settings of a vault. </param>
        internal RecoveryServicesSecuritySettings(ImmutabilitySettings immutabilitySettings, RecoveryServicesSoftDeleteSettings softDeleteSettings, MultiUserAuthorization? multiUserAuthorization)
        {
            ImmutabilitySettings = immutabilitySettings;
            SoftDeleteSettings = softDeleteSettings;
            MultiUserAuthorization = multiUserAuthorization;
        }

        /// <summary> Immutability Settings of a vault. </summary>
        internal ImmutabilitySettings ImmutabilitySettings { get; set; }
        /// <summary> Gets or sets the immutability state. </summary>
        public ImmutabilityState? ImmutabilityState
        {
            get => ImmutabilitySettings is null ? default : ImmutabilitySettings.State;
            set
            {
                if (ImmutabilitySettings is null)
                    ImmutabilitySettings = new ImmutabilitySettings();
                ImmutabilitySettings.State = value;
            }
        }

        /// <summary> Soft delete Settings of a vault. </summary>
        public RecoveryServicesSoftDeleteSettings SoftDeleteSettings { get; set; }
        /// <summary> MUA Settings of a vault. </summary>
        public MultiUserAuthorization? MultiUserAuthorization { get; }
    }
}
