// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CloudHealth.Models
{
    /// <summary> Type of impact an entity has on health state propagation. </summary>
    public readonly partial struct EntityImpact : IEquatable<EntityImpact>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EntityImpact"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EntityImpact(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardValue = "Standard";
        private const string LimitedValue = "Limited";
        private const string SuppressedValue = "Suppressed";

        /// <summary> Standard impact. </summary>
        public static EntityImpact Standard { get; } = new EntityImpact(StandardValue);
        /// <summary> Limited impact. </summary>
        public static EntityImpact Limited { get; } = new EntityImpact(LimitedValue);
        /// <summary> Suppressed impact. </summary>
        public static EntityImpact Suppressed { get; } = new EntityImpact(SuppressedValue);
        /// <summary> Determines if two <see cref="EntityImpact"/> values are the same. </summary>
        public static bool operator ==(EntityImpact left, EntityImpact right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EntityImpact"/> values are not the same. </summary>
        public static bool operator !=(EntityImpact left, EntityImpact right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EntityImpact"/>. </summary>
        public static implicit operator EntityImpact(string value) => new EntityImpact(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EntityImpact other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EntityImpact other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
