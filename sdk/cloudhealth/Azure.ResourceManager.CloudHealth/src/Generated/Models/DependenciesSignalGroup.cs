// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CloudHealth.Models
{
    /// <summary> Properties for dependent entities, i.e. child entities. </summary>
    public partial class DependenciesSignalGroup
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DependenciesSignalGroup"/>. </summary>
        /// <param name="aggregationType"> Aggregation type for child dependencies. </param>
        public DependenciesSignalGroup(DependenciesAggregationType aggregationType)
        {
            AggregationType = aggregationType;
        }

        /// <summary> Initializes a new instance of <see cref="DependenciesSignalGroup"/>. </summary>
        /// <param name="aggregationType"> Aggregation type for child dependencies. </param>
        /// <param name="degradedThreshold"> Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'. </param>
        /// <param name="unhealthyThreshold"> Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DependenciesSignalGroup(DependenciesAggregationType aggregationType, string degradedThreshold, string unhealthyThreshold, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AggregationType = aggregationType;
            DegradedThreshold = degradedThreshold;
            UnhealthyThreshold = unhealthyThreshold;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="DependenciesSignalGroup"/> for deserialization. </summary>
        internal DependenciesSignalGroup()
        {
        }

        /// <summary> Aggregation type for child dependencies. </summary>
        public DependenciesAggregationType AggregationType { get; set; }
        /// <summary> Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'. </summary>
        public string DegradedThreshold { get; set; }
        /// <summary> Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'. </summary>
        public string UnhealthyThreshold { get; set; }
    }
}
