// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CloudHealth.Models
{
    /// <summary> Health state of an entity. </summary>
    public readonly partial struct EntityHealthState : IEquatable<EntityHealthState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EntityHealthState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EntityHealthState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HealthyValue = "Healthy";
        private const string DegradedValue = "Degraded";
        private const string ErrorValue = "Error";
        private const string UnknownValue = "Unknown";
        private const string DeletedValue = "Deleted";

        /// <summary> Healthy status. </summary>
        public static EntityHealthState Healthy { get; } = new EntityHealthState(HealthyValue);
        /// <summary> Degraded status. </summary>
        public static EntityHealthState Degraded { get; } = new EntityHealthState(DegradedValue);
        /// <summary> Error status (Unhealthy). </summary>
        public static EntityHealthState Error { get; } = new EntityHealthState(ErrorValue);
        /// <summary> Unknown status. </summary>
        public static EntityHealthState Unknown { get; } = new EntityHealthState(UnknownValue);
        /// <summary> Deleted status. </summary>
        public static EntityHealthState Deleted { get; } = new EntityHealthState(DeletedValue);
        /// <summary> Determines if two <see cref="EntityHealthState"/> values are the same. </summary>
        public static bool operator ==(EntityHealthState left, EntityHealthState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EntityHealthState"/> values are not the same. </summary>
        public static bool operator !=(EntityHealthState left, EntityHealthState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EntityHealthState"/>. </summary>
        public static implicit operator EntityHealthState(string value) => new EntityHealthState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EntityHealthState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EntityHealthState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
