// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CloudHealth.Models
{
    /// <summary> Aggregation type for child dependencies. </summary>
    public readonly partial struct DependenciesAggregationType : IEquatable<DependenciesAggregationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DependenciesAggregationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DependenciesAggregationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WorstOfValue = "WorstOf";
        private const string ThresholdsValue = "Thresholds";

        /// <summary> Default behavior: Worst child health state is propagated. </summary>
        public static DependenciesAggregationType WorstOf { get; } = new DependenciesAggregationType(WorstOfValue);
        /// <summary> Based on configurable thresholds. </summary>
        public static DependenciesAggregationType Thresholds { get; } = new DependenciesAggregationType(ThresholdsValue);
        /// <summary> Determines if two <see cref="DependenciesAggregationType"/> values are the same. </summary>
        public static bool operator ==(DependenciesAggregationType left, DependenciesAggregationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DependenciesAggregationType"/> values are not the same. </summary>
        public static bool operator !=(DependenciesAggregationType left, DependenciesAggregationType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DependenciesAggregationType"/>. </summary>
        public static implicit operator DependenciesAggregationType(string value) => new DependenciesAggregationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DependenciesAggregationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DependenciesAggregationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
