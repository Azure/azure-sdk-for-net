// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CloudHealth.Models
{
    public partial class HealthModelDiscoveryRuleProperties : IUtf8JsonSerializable, IJsonModel<HealthModelDiscoveryRuleProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HealthModelDiscoveryRuleProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<HealthModelDiscoveryRuleProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HealthModelDiscoveryRuleProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HealthModelDiscoveryRuleProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            writer.WritePropertyName("resourceGraphQuery"u8);
            writer.WriteStringValue(ResourceGraphQuery);
            writer.WritePropertyName("authenticationSetting"u8);
            writer.WriteStringValue(AuthenticationSetting);
            writer.WritePropertyName("discoverRelationships"u8);
            writer.WriteStringValue(DiscoverRelationships.ToString());
            writer.WritePropertyName("addRecommendedSignals"u8);
            writer.WriteStringValue(AddRecommendedSignals.ToString());
            if (options.Format != "W" && Optional.IsDefined(DeletedOn))
            {
                writer.WritePropertyName("deletionDate"u8);
                writer.WriteStringValue(DeletedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ErrorMessage))
            {
                writer.WritePropertyName("errorMessage"u8);
                writer.WriteStringValue(ErrorMessage);
            }
            if (options.Format != "W" && Optional.IsDefined(NumberOfDiscoveredEntities))
            {
                writer.WritePropertyName("numberOfDiscoveredEntities"u8);
                writer.WriteNumberValue(NumberOfDiscoveredEntities.Value);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("entityName"u8);
                writer.WriteStringValue(EntityName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        HealthModelDiscoveryRuleProperties IJsonModel<HealthModelDiscoveryRuleProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HealthModelDiscoveryRuleProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HealthModelDiscoveryRuleProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHealthModelDiscoveryRuleProperties(document.RootElement, options);
        }

        internal static HealthModelDiscoveryRuleProperties DeserializeHealthModelDiscoveryRuleProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            HealthModelProvisioningState? provisioningState = default;
            string displayName = default;
            string resourceGraphQuery = default;
            string authenticationSetting = default;
            DiscoveryRuleRelationshipDiscoveryBehavior discoverRelationships = default;
            DiscoveryRuleRecommendedSignalsBehavior addRecommendedSignals = default;
            DateTimeOffset? deletionDate = default;
            string errorMessage = default;
            int? numberOfDiscoveredEntities = default;
            string entityName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new HealthModelProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceGraphQuery"u8))
                {
                    resourceGraphQuery = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authenticationSetting"u8))
                {
                    authenticationSetting = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("discoverRelationships"u8))
                {
                    discoverRelationships = new DiscoveryRuleRelationshipDiscoveryBehavior(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("addRecommendedSignals"u8))
                {
                    addRecommendedSignals = new DiscoveryRuleRecommendedSignalsBehavior(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deletionDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deletionDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("errorMessage"u8))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numberOfDiscoveredEntities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfDiscoveredEntities = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("entityName"u8))
                {
                    entityName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new HealthModelDiscoveryRuleProperties(
                provisioningState,
                displayName,
                resourceGraphQuery,
                authenticationSetting,
                discoverRelationships,
                addRecommendedSignals,
                deletionDate,
                errorMessage,
                numberOfDiscoveredEntities,
                entityName,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<HealthModelDiscoveryRuleProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HealthModelDiscoveryRuleProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerCloudHealthContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HealthModelDiscoveryRuleProperties)} does not support writing '{options.Format}' format.");
            }
        }

        HealthModelDiscoveryRuleProperties IPersistableModel<HealthModelDiscoveryRuleProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HealthModelDiscoveryRuleProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeHealthModelDiscoveryRuleProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HealthModelDiscoveryRuleProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<HealthModelDiscoveryRuleProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
