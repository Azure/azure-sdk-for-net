// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CloudHealth.Models
{
    /// <summary> Relationship properties. </summary>
    public partial class HealthModelRelationshipProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HealthModelRelationshipProperties"/>. </summary>
        /// <param name="parentEntityName"> Resource name of the parent entity. </param>
        /// <param name="childEntityName"> Resource name of the child entity. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parentEntityName"/> or <paramref name="childEntityName"/> is null. </exception>
        public HealthModelRelationshipProperties(string parentEntityName, string childEntityName)
        {
            Argument.AssertNotNull(parentEntityName, nameof(parentEntityName));
            Argument.AssertNotNull(childEntityName, nameof(childEntityName));

            ParentEntityName = parentEntityName;
            ChildEntityName = childEntityName;
            Labels = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="HealthModelRelationshipProperties"/>. </summary>
        /// <param name="provisioningState"> The status of the last operation. </param>
        /// <param name="displayName"> Display name. </param>
        /// <param name="parentEntityName"> Resource name of the parent entity. </param>
        /// <param name="childEntityName"> Resource name of the child entity. </param>
        /// <param name="labels"> Optional set of labels (key-value pairs). </param>
        /// <param name="discoveredBy"> Discovered by which discovery rule. If set, the relationship cannot be deleted manually. </param>
        /// <param name="deletedOn"> Date when the relationship was (soft-)deleted. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HealthModelRelationshipProperties(HealthModelProvisioningState? provisioningState, string displayName, string parentEntityName, string childEntityName, IDictionary<string, string> labels, string discoveredBy, DateTimeOffset? deletedOn, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ProvisioningState = provisioningState;
            DisplayName = displayName;
            ParentEntityName = parentEntityName;
            ChildEntityName = childEntityName;
            Labels = labels;
            DiscoveredBy = discoveredBy;
            DeletedOn = deletedOn;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="HealthModelRelationshipProperties"/> for deserialization. </summary>
        internal HealthModelRelationshipProperties()
        {
        }

        /// <summary> The status of the last operation. </summary>
        public HealthModelProvisioningState? ProvisioningState { get; }
        /// <summary> Display name. </summary>
        public string DisplayName { get; set; }
        /// <summary> Resource name of the parent entity. </summary>
        public string ParentEntityName { get; set; }
        /// <summary> Resource name of the child entity. </summary>
        public string ChildEntityName { get; set; }
        /// <summary> Optional set of labels (key-value pairs). </summary>
        public IDictionary<string, string> Labels { get; }
        /// <summary> Discovered by which discovery rule. If set, the relationship cannot be deleted manually. </summary>
        public string DiscoveredBy { get; }
        /// <summary> Date when the relationship was (soft-)deleted. </summary>
        public DateTimeOffset? DeletedOn { get; }
    }
}
