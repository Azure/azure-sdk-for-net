// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CloudHealth.Models
{
    [PersistableModelProxy(typeof(UnknownSignalDefinitionProperties))]
    public partial class SignalDefinitionProperties : IUtf8JsonSerializable, IJsonModel<SignalDefinitionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SignalDefinitionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<SignalDefinitionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SignalDefinitionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SignalDefinitionProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            writer.WritePropertyName("signalKind"u8);
            writer.WriteStringValue(SignalKind.ToString());
            if (Optional.IsDefined(RefreshInterval))
            {
                writer.WritePropertyName("refreshInterval"u8);
                writer.WriteStringValue(RefreshInterval.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Labels))
            {
                writer.WritePropertyName("labels"u8);
                writer.WriteStartObject();
                foreach (var item in Labels)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(DataUnit))
            {
                writer.WritePropertyName("dataUnit"u8);
                writer.WriteStringValue(DataUnit);
            }
            writer.WritePropertyName("evaluationRules"u8);
            writer.WriteObjectValue(EvaluationRules, options);
            if (options.Format != "W" && Optional.IsDefined(DeletedOn))
            {
                writer.WritePropertyName("deletionDate"u8);
                writer.WriteStringValue(DeletedOn.Value, "O");
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        SignalDefinitionProperties IJsonModel<SignalDefinitionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SignalDefinitionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SignalDefinitionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSignalDefinitionProperties(document.RootElement, options);
        }

        internal static SignalDefinitionProperties DeserializeSignalDefinitionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("signalKind", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AzureResourceMetric": return ResourceMetricSignalDefinitionProperties.DeserializeResourceMetricSignalDefinitionProperties(element, options);
                    case "LogAnalyticsQuery": return LogAnalyticsQuerySignalDefinitionProperties.DeserializeLogAnalyticsQuerySignalDefinitionProperties(element, options);
                    case "PrometheusMetricsQuery": return PrometheusMetricsSignalDefinitionProperties.DeserializePrometheusMetricsSignalDefinitionProperties(element, options);
                }
            }
            return UnknownSignalDefinitionProperties.DeserializeUnknownSignalDefinitionProperties(element, options);
        }

        BinaryData IPersistableModel<SignalDefinitionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SignalDefinitionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerCloudHealthContext.Default);
                default:
                    throw new FormatException($"The model {nameof(SignalDefinitionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        SignalDefinitionProperties IPersistableModel<SignalDefinitionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SignalDefinitionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeSignalDefinitionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SignalDefinitionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<SignalDefinitionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
