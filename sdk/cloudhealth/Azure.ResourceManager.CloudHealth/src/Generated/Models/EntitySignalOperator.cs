// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CloudHealth.Models
{
    /// <summary> Signal operator. </summary>
    public readonly partial struct EntitySignalOperator : IEquatable<EntitySignalOperator>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EntitySignalOperator"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EntitySignalOperator(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LowerThanValue = "LowerThan";
        private const string LowerOrEqualsValue = "LowerOrEquals";
        private const string GreaterThanValue = "GreaterThan";
        private const string GreaterOrEqualsValue = "GreaterOrEquals";
        private const string EqualsValueValue = "Equals";

        /// <summary> Lower than. </summary>
        public static EntitySignalOperator LowerThan { get; } = new EntitySignalOperator(LowerThanValue);
        /// <summary> Lower than or equal to. </summary>
        public static EntitySignalOperator LowerOrEquals { get; } = new EntitySignalOperator(LowerOrEqualsValue);
        /// <summary> Greater than. </summary>
        public static EntitySignalOperator GreaterThan { get; } = new EntitySignalOperator(GreaterThanValue);
        /// <summary> Greater than or equal to. </summary>
        public static EntitySignalOperator GreaterOrEquals { get; } = new EntitySignalOperator(GreaterOrEqualsValue);
        /// <summary> Equal to. </summary>
        public static EntitySignalOperator EqualsValue { get; } = new EntitySignalOperator(EqualsValueValue);
        /// <summary> Determines if two <see cref="EntitySignalOperator"/> values are the same. </summary>
        public static bool operator ==(EntitySignalOperator left, EntitySignalOperator right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EntitySignalOperator"/> values are not the same. </summary>
        public static bool operator !=(EntitySignalOperator left, EntitySignalOperator right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="EntitySignalOperator"/>. </summary>
        public static implicit operator EntitySignalOperator(string value) => new EntitySignalOperator(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EntitySignalOperator other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EntitySignalOperator other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
