// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.CloudHealth.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.CloudHealth
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.CloudHealth. </summary>
    public static partial class CloudHealthExtensions
    {
        private static MockableCloudHealthArmClient GetMockableCloudHealthArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableCloudHealthArmClient(client0));
        }

        private static MockableCloudHealthResourceGroupResource GetMockableCloudHealthResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableCloudHealthResourceGroupResource(client, resource.Id));
        }

        private static MockableCloudHealthSubscriptionResource GetMockableCloudHealthSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableCloudHealthSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing a <see cref="HealthModelResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HealthModelResource.CreateResourceIdentifier" /> to create a <see cref="HealthModelResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthArmClient.GetHealthModelResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HealthModelResource"/> object. </returns>
        public static HealthModelResource GetHealthModelResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableCloudHealthArmClient(client).GetHealthModelResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SignalDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SignalDefinitionResource.CreateResourceIdentifier" /> to create a <see cref="SignalDefinitionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthArmClient.GetSignalDefinitionResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="SignalDefinitionResource"/> object. </returns>
        public static SignalDefinitionResource GetSignalDefinitionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableCloudHealthArmClient(client).GetSignalDefinitionResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="AuthenticationSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AuthenticationSettingResource.CreateResourceIdentifier" /> to create an <see cref="AuthenticationSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthArmClient.GetAuthenticationSettingResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="AuthenticationSettingResource"/> object. </returns>
        public static AuthenticationSettingResource GetAuthenticationSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableCloudHealthArmClient(client).GetAuthenticationSettingResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EntityResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EntityResource.CreateResourceIdentifier" /> to create an <see cref="EntityResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthArmClient.GetEntityResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="EntityResource"/> object. </returns>
        public static EntityResource GetEntityResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableCloudHealthArmClient(client).GetEntityResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="RelationshipResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RelationshipResource.CreateResourceIdentifier" /> to create a <see cref="RelationshipResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthArmClient.GetRelationshipResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="RelationshipResource"/> object. </returns>
        public static RelationshipResource GetRelationshipResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableCloudHealthArmClient(client).GetRelationshipResource(id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DiscoveryRuleResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DiscoveryRuleResource.CreateResourceIdentifier" /> to create a <see cref="DiscoveryRuleResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthArmClient.GetDiscoveryRuleResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="DiscoveryRuleResource"/> object. </returns>
        public static DiscoveryRuleResource GetDiscoveryRuleResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableCloudHealthArmClient(client).GetDiscoveryRuleResource(id);
        }

        /// <summary>
        /// Gets a collection of HealthModelResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthResourceGroupResource.GetHealthModels()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of HealthModelResources and their operations over a HealthModelResource. </returns>
        public static HealthModelCollection GetHealthModels(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableCloudHealthResourceGroupResource(resourceGroupResource).GetHealthModels();
        }

        /// <summary>
        /// Get a HealthModel
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthModel_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthModelResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthResourceGroupResource.GetHealthModelAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="healthModelName"> Name of health model resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="healthModelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="healthModelName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HealthModelResource>> GetHealthModelAsync(this ResourceGroupResource resourceGroupResource, string healthModelName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableCloudHealthResourceGroupResource(resourceGroupResource).GetHealthModelAsync(healthModelName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a HealthModel
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CloudHealth/healthmodels/{healthModelName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthModel_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthModelResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthResourceGroupResource.GetHealthModel(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="healthModelName"> Name of health model resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="healthModelName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="healthModelName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<HealthModelResource> GetHealthModel(this ResourceGroupResource resourceGroupResource, string healthModelName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableCloudHealthResourceGroupResource(resourceGroupResource).GetHealthModel(healthModelName, cancellationToken);
        }

        /// <summary>
        /// List HealthModel resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CloudHealth/healthmodels</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthModel_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthModelResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthSubscriptionResource.GetHealthModels(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="HealthModelResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HealthModelResource> GetHealthModelsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableCloudHealthSubscriptionResource(subscriptionResource).GetHealthModelsAsync(cancellationToken);
        }

        /// <summary>
        /// List HealthModel resources by subscription ID
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.CloudHealth/healthmodels</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HealthModel_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-05-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="HealthModelResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableCloudHealthSubscriptionResource.GetHealthModels(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HealthModelResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HealthModelResource> GetHealthModels(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableCloudHealthSubscriptionResource(subscriptionResource).GetHealthModels(cancellationToken);
        }
    }
}
