// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SparkJob
    {
        /// <summary>
        /// Initializes a new instance of the SparkJob class.
        /// </summary>
        public SparkJob()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SparkJob class.
        /// </summary>
        public SparkJob(string state = default(string), string name = default(string), string submitter = default(string), string compute = default(string), string sparkApplicationId = default(string), string livyId = default(string), IList<string> timing = default(IList<string>), string sparkJobDefinition = default(string), IList<SparkJob> pipeline = default(IList<SparkJob>), string jobType = default(string), System.DateTimeOffset? submitTime = default(System.DateTimeOffset?), System.DateTimeOffset? endTime = default(System.DateTimeOffset?), string queuedDuration = default(string), string runningDuration = default(string), string totalDuration = default(string))
        {
            State = state;
            Name = name;
            Submitter = submitter;
            Compute = compute;
            SparkApplicationId = sparkApplicationId;
            LivyId = livyId;
            Timing = timing;
            SparkJobDefinition = sparkJobDefinition;
            Pipeline = pipeline;
            JobType = jobType;
            SubmitTime = submitTime;
            EndTime = endTime;
            QueuedDuration = queuedDuration;
            RunningDuration = runningDuration;
            TotalDuration = totalDuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "submitter")]
        public string Submitter { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "compute")]
        public string Compute { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sparkApplicationId")]
        public string SparkApplicationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "livyId")]
        public string LivyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "timing")]
        public IList<string> Timing { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sparkJobDefinition")]
        public string SparkJobDefinition { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pipeline")]
        public IList<SparkJob> Pipeline { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobType")]
        public string JobType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "submitTime")]
        public System.DateTimeOffset? SubmitTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public System.DateTimeOffset? EndTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "queuedDuration")]
        public string QueuedDuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "runningDuration")]
        public string RunningDuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "totalDuration")]
        public string TotalDuration { get; set; }

    }
}
