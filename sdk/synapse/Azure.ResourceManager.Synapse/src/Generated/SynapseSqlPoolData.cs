// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    /// <summary> A class representing the SynapseSqlPool data model. </summary>
    public partial class SynapseSqlPoolData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of SynapseSqlPoolData. </summary>
        /// <param name="location"> The location. </param>
        public SynapseSqlPoolData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of SynapseSqlPoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku">
        /// SQL pool SKU
        /// Serialized Name: SqlPool.sku
        /// </param>
        /// <param name="maxSizeBytes">
        /// Maximum size in bytes
        /// Serialized Name: SqlPool.properties.maxSizeBytes
        /// </param>
        /// <param name="collation">
        /// Collation mode
        /// Serialized Name: SqlPool.properties.collation
        /// </param>
        /// <param name="sourceDatabaseId">
        /// Source database to create from
        /// Serialized Name: SqlPool.properties.sourceDatabaseId
        /// </param>
        /// <param name="recoverableDatabaseId">
        /// Backup database to restore from
        /// Serialized Name: SqlPool.properties.recoverableDatabaseId
        /// </param>
        /// <param name="provisioningState">
        /// Resource state
        /// Serialized Name: SqlPool.properties.provisioningState
        /// </param>
        /// <param name="status">
        /// Resource status
        /// Serialized Name: SqlPool.properties.status
        /// </param>
        /// <param name="restorePointInTime">
        /// Snapshot time to restore
        /// Serialized Name: SqlPool.properties.restorePointInTime
        /// </param>
        /// <param name="createMode">
        /// Specifies the mode of sql pool creation.
        /// 
        /// Default: regular sql pool creation.
        /// 
        /// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
        /// 
        /// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
        /// 
        /// Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool&apos;s original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
        /// Serialized Name: SqlPool.properties.createMode
        /// </param>
        /// <param name="createdOn">
        /// Date the SQL pool was created
        /// Serialized Name: SqlPool.properties.creationDate
        /// </param>
        /// <param name="storageAccountType">
        /// The storage account type used to store backups for this sql pool.
        /// Serialized Name: SqlPool.properties.storageAccountType
        /// </param>
        /// <param name="sourceDatabaseDeletionOn">
        /// Specifies the time that the sql pool was deleted
        /// Serialized Name: SqlPool.properties.sourceDatabaseDeletionDate
        /// </param>
        internal SynapseSqlPoolData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, SynapseSku sku, long? maxSizeBytes, string collation, string sourceDatabaseId, string recoverableDatabaseId, string provisioningState, string status, DateTimeOffset? restorePointInTime, SqlPoolCreateMode? createMode, DateTimeOffset? createdOn, SqlPoolStorageAccountType? storageAccountType, DateTimeOffset? sourceDatabaseDeletionOn) : base(id, name, resourceType, systemData, tags, location)
        {
            Sku = sku;
            MaxSizeBytes = maxSizeBytes;
            Collation = collation;
            SourceDatabaseId = sourceDatabaseId;
            RecoverableDatabaseId = recoverableDatabaseId;
            ProvisioningState = provisioningState;
            Status = status;
            RestorePointInTime = restorePointInTime;
            CreateMode = createMode;
            CreatedOn = createdOn;
            StorageAccountType = storageAccountType;
            SourceDatabaseDeletionOn = sourceDatabaseDeletionOn;
        }

        /// <summary>
        /// SQL pool SKU
        /// Serialized Name: SqlPool.sku
        /// </summary>
        public SynapseSku Sku { get; set; }
        /// <summary>
        /// Maximum size in bytes
        /// Serialized Name: SqlPool.properties.maxSizeBytes
        /// </summary>
        public long? MaxSizeBytes { get; set; }
        /// <summary>
        /// Collation mode
        /// Serialized Name: SqlPool.properties.collation
        /// </summary>
        public string Collation { get; set; }
        /// <summary>
        /// Source database to create from
        /// Serialized Name: SqlPool.properties.sourceDatabaseId
        /// </summary>
        public string SourceDatabaseId { get; set; }
        /// <summary>
        /// Backup database to restore from
        /// Serialized Name: SqlPool.properties.recoverableDatabaseId
        /// </summary>
        public string RecoverableDatabaseId { get; set; }
        /// <summary>
        /// Resource state
        /// Serialized Name: SqlPool.properties.provisioningState
        /// </summary>
        public string ProvisioningState { get; set; }
        /// <summary>
        /// Resource status
        /// Serialized Name: SqlPool.properties.status
        /// </summary>
        public string Status { get; }
        /// <summary>
        /// Snapshot time to restore
        /// Serialized Name: SqlPool.properties.restorePointInTime
        /// </summary>
        public DateTimeOffset? RestorePointInTime { get; set; }
        /// <summary>
        /// Specifies the mode of sql pool creation.
        /// 
        /// Default: regular sql pool creation.
        /// 
        /// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
        /// 
        /// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
        /// 
        /// Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool&apos;s original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
        /// Serialized Name: SqlPool.properties.createMode
        /// </summary>
        public SqlPoolCreateMode? CreateMode { get; set; }
        /// <summary>
        /// Date the SQL pool was created
        /// Serialized Name: SqlPool.properties.creationDate
        /// </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary>
        /// The storage account type used to store backups for this sql pool.
        /// Serialized Name: SqlPool.properties.storageAccountType
        /// </summary>
        public SqlPoolStorageAccountType? StorageAccountType { get; set; }
        /// <summary>
        /// Specifies the time that the sql pool was deleted
        /// Serialized Name: SqlPool.properties.sourceDatabaseDeletionDate
        /// </summary>
        public DateTimeOffset? SourceDatabaseDeletionOn { get; set; }
    }
}
