// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    /// <summary>
    /// A Class representing a Workspace along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier" /> you can construct a <see cref="WorkspaceResource" />
    /// from an instance of <see cref="ArmClient" /> using the GetWorkspaceResource method.
    /// Otherwise you can get one from its parent resource <see cref="ResourceGroupResource" /> using the GetWorkspace method.
    /// </summary>
    public partial class WorkspaceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="WorkspaceResource"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workspaceName)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _workspaceClientDiagnostics;
        private readonly WorkspacesRestOperations _workspaceRestClient;
        private readonly ClientDiagnostics _ipFirewallRuleInfoIPFirewallRulesClientDiagnostics;
        private readonly IpFirewallRulesRestOperations _ipFirewallRuleInfoIPFirewallRulesRestClient;
        private readonly ClientDiagnostics _workspaceManagedSqlServerUsagesClientDiagnostics;
        private readonly WorkspaceManagedSqlServerUsagesRestOperations _workspaceManagedSqlServerUsagesRestClient;
        private readonly WorkspaceData _data;

        /// <summary> Initializes a new instance of the <see cref="WorkspaceResource"/> class for mocking. </summary>
        protected WorkspaceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "WorkspaceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal WorkspaceResource(ArmClient client, WorkspaceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="WorkspaceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal WorkspaceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _workspaceClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Synapse", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string workspaceApiVersion);
            _workspaceRestClient = new WorkspacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, workspaceApiVersion);
            _ipFirewallRuleInfoIPFirewallRulesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Synapse", IPFirewallRuleInfoResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(IPFirewallRuleInfoResource.ResourceType, out string ipFirewallRuleInfoIPFirewallRulesApiVersion);
            _ipFirewallRuleInfoIPFirewallRulesRestClient = new IpFirewallRulesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, ipFirewallRuleInfoIPFirewallRulesApiVersion);
            _workspaceManagedSqlServerUsagesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Synapse", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _workspaceManagedSqlServerUsagesRestClient = new WorkspaceManagedSqlServerUsagesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Synapse/workspaces";

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual WorkspaceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary> Gets a collection of AzureADOnlyAuthenticationResources in the Workspace. </summary>
        /// <returns> An object representing collection of AzureADOnlyAuthenticationResources and their operations over a AzureADOnlyAuthenticationResource. </returns>
        public virtual AzureADOnlyAuthenticationCollection GetAzureADOnlyAuthentications()
        {
            return GetCachedClient(Client => new AzureADOnlyAuthenticationCollection(Client, Id));
        }

        /// <summary>
        /// Gets a Azure Active Directory only authentication property
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/azureADOnlyAuthentications/{azureADOnlyAuthenticationName}
        /// Operation Id: AzureADOnlyAuthentications_Get
        /// </summary>
        /// <param name="azureADOnlyAuthenticationName"> name of the property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<AzureADOnlyAuthenticationResource>> GetAzureADOnlyAuthenticationAsync(AzureADOnlyAuthenticationName azureADOnlyAuthenticationName, CancellationToken cancellationToken = default)
        {
            return await GetAzureADOnlyAuthentications().GetAsync(azureADOnlyAuthenticationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a Azure Active Directory only authentication property
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/azureADOnlyAuthentications/{azureADOnlyAuthenticationName}
        /// Operation Id: AzureADOnlyAuthentications_Get
        /// </summary>
        /// <param name="azureADOnlyAuthenticationName"> name of the property. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<AzureADOnlyAuthenticationResource> GetAzureADOnlyAuthentication(AzureADOnlyAuthenticationName azureADOnlyAuthenticationName, CancellationToken cancellationToken = default)
        {
            return GetAzureADOnlyAuthentications().Get(azureADOnlyAuthenticationName, cancellationToken);
        }

        /// <summary> Gets a collection of IPFirewallRuleInfoResources in the Workspace. </summary>
        /// <returns> An object representing collection of IPFirewallRuleInfoResources and their operations over a IPFirewallRuleInfoResource. </returns>
        public virtual IPFirewallRuleInfoCollection GetIPFirewallRuleInfos()
        {
            return GetCachedClient(Client => new IPFirewallRuleInfoCollection(Client, Id));
        }

        /// <summary>
        /// Get a firewall rule
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/firewallRules/{ruleName}
        /// Operation Id: IpFirewallRules_Get
        /// </summary>
        /// <param name="ruleName"> The IP firewall rule name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<IPFirewallRuleInfoResource>> GetIPFirewallRuleInfoAsync(string ruleName, CancellationToken cancellationToken = default)
        {
            return await GetIPFirewallRuleInfos().GetAsync(ruleName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a firewall rule
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/firewallRules/{ruleName}
        /// Operation Id: IpFirewallRules_Get
        /// </summary>
        /// <param name="ruleName"> The IP firewall rule name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="ruleName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="ruleName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<IPFirewallRuleInfoResource> GetIPFirewallRuleInfo(string ruleName, CancellationToken cancellationToken = default)
        {
            return GetIPFirewallRuleInfos().Get(ruleName, cancellationToken);
        }

        /// <summary> Gets a collection of KeyResources in the Workspace. </summary>
        /// <returns> An object representing collection of KeyResources and their operations over a KeyResource. </returns>
        public virtual KeyCollection GetKeys()
        {
            return GetCachedClient(Client => new KeyCollection(Client, Id));
        }

        /// <summary>
        /// Gets a workspace key
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/keys/{keyName}
        /// Operation Id: Keys_Get
        /// </summary>
        /// <param name="keyName"> The name of the workspace key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<KeyResource>> GetKeyAsync(string keyName, CancellationToken cancellationToken = default)
        {
            return await GetKeys().GetAsync(keyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a workspace key
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/keys/{keyName}
        /// Operation Id: Keys_Get
        /// </summary>
        /// <param name="keyName"> The name of the workspace key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="keyName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="keyName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<KeyResource> GetKey(string keyName, CancellationToken cancellationToken = default)
        {
            return GetKeys().Get(keyName, cancellationToken);
        }

        /// <summary> Gets a collection of SynapsePrivateEndpointConnectionResources in the Workspace. </summary>
        /// <returns> An object representing collection of SynapsePrivateEndpointConnectionResources and their operations over a SynapsePrivateEndpointConnectionResource. </returns>
        public virtual SynapsePrivateEndpointConnectionCollection GetSynapsePrivateEndpointConnections()
        {
            return GetCachedClient(Client => new SynapsePrivateEndpointConnectionCollection(Client, Id));
        }

        /// <summary>
        /// Gets a private endpoint connection.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/privateEndpointConnections/{privateEndpointConnectionName}
        /// Operation Id: PrivateEndpointConnections_Get
        /// </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SynapsePrivateEndpointConnectionResource>> GetSynapsePrivateEndpointConnectionAsync(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return await GetSynapsePrivateEndpointConnections().GetAsync(privateEndpointConnectionName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a private endpoint connection.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/privateEndpointConnections/{privateEndpointConnectionName}
        /// Operation Id: PrivateEndpointConnections_Get
        /// </summary>
        /// <param name="privateEndpointConnectionName"> The name of the private endpoint connection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateEndpointConnectionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateEndpointConnectionName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SynapsePrivateEndpointConnectionResource> GetSynapsePrivateEndpointConnection(string privateEndpointConnectionName, CancellationToken cancellationToken = default)
        {
            return GetSynapsePrivateEndpointConnections().Get(privateEndpointConnectionName, cancellationToken);
        }

        /// <summary> Gets a collection of WorkspacePrivateLinkResources in the Workspace. </summary>
        /// <returns> An object representing collection of WorkspacePrivateLinkResources and their operations over a WorkspacePrivateLinkResource. </returns>
        public virtual WorkspacePrivateLinkResourceCollection GetWorkspacePrivateLinkResources()
        {
            return GetCachedClient(Client => new WorkspacePrivateLinkResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get private link resource in workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/privateLinkResources/{privateLinkResourceName}
        /// Operation Id: PrivateLinkResources_Get
        /// </summary>
        /// <param name="privateLinkResourceName"> The name of the private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateLinkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateLinkResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<WorkspacePrivateLinkResource>> GetWorkspacePrivateLinkResourceAsync(string privateLinkResourceName, CancellationToken cancellationToken = default)
        {
            return await GetWorkspacePrivateLinkResources().GetAsync(privateLinkResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get private link resource in workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/privateLinkResources/{privateLinkResourceName}
        /// Operation Id: PrivateLinkResources_Get
        /// </summary>
        /// <param name="privateLinkResourceName"> The name of the private link resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="privateLinkResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="privateLinkResourceName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<WorkspacePrivateLinkResource> GetWorkspacePrivateLinkResource(string privateLinkResourceName, CancellationToken cancellationToken = default)
        {
            return GetWorkspacePrivateLinkResources().Get(privateLinkResourceName, cancellationToken);
        }

        /// <summary> Gets a collection of SqlPoolResources in the Workspace. </summary>
        /// <returns> An object representing collection of SqlPoolResources and their operations over a SqlPoolResource. </returns>
        public virtual SqlPoolCollection GetSqlPools()
        {
            return GetCachedClient(Client => new SqlPoolCollection(Client, Id));
        }

        /// <summary>
        /// Get SQL pool properties
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
        /// Operation Id: SqlPools_Get
        /// </summary>
        /// <param name="sqlPoolName"> SQL pool name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SqlPoolResource>> GetSqlPoolAsync(string sqlPoolName, CancellationToken cancellationToken = default)
        {
            return await GetSqlPools().GetAsync(sqlPoolName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get SQL pool properties
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
        /// Operation Id: SqlPools_Get
        /// </summary>
        /// <param name="sqlPoolName"> SQL pool name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SqlPoolResource> GetSqlPool(string sqlPoolName, CancellationToken cancellationToken = default)
        {
            return GetSqlPools().Get(sqlPoolName, cancellationToken);
        }

        /// <summary> Gets a collection of ServerBlobAuditingPolicyResources in the Workspace. </summary>
        /// <returns> An object representing collection of ServerBlobAuditingPolicyResources and their operations over a ServerBlobAuditingPolicyResource. </returns>
        public virtual ServerBlobAuditingPolicyCollection GetServerBlobAuditingPolicies()
        {
            return GetCachedClient(Client => new ServerBlobAuditingPolicyCollection(Client, Id));
        }

        /// <summary>
        /// Get a workspace managed sql server&apos;s blob auditing policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/auditingSettings/{blobAuditingPolicyName}
        /// Operation Id: WorkspaceManagedSqlServerBlobAuditingPolicies_Get
        /// </summary>
        /// <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServerBlobAuditingPolicyResource>> GetServerBlobAuditingPolicyAsync(BlobAuditingPolicyName blobAuditingPolicyName, CancellationToken cancellationToken = default)
        {
            return await GetServerBlobAuditingPolicies().GetAsync(blobAuditingPolicyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a workspace managed sql server&apos;s blob auditing policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/auditingSettings/{blobAuditingPolicyName}
        /// Operation Id: WorkspaceManagedSqlServerBlobAuditingPolicies_Get
        /// </summary>
        /// <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<ServerBlobAuditingPolicyResource> GetServerBlobAuditingPolicy(BlobAuditingPolicyName blobAuditingPolicyName, CancellationToken cancellationToken = default)
        {
            return GetServerBlobAuditingPolicies().Get(blobAuditingPolicyName, cancellationToken);
        }

        /// <summary> Gets a collection of ExtendedServerBlobAuditingPolicyResources in the Workspace. </summary>
        /// <returns> An object representing collection of ExtendedServerBlobAuditingPolicyResources and their operations over a ExtendedServerBlobAuditingPolicyResource. </returns>
        public virtual ExtendedServerBlobAuditingPolicyCollection GetExtendedServerBlobAuditingPolicies()
        {
            return GetCachedClient(Client => new ExtendedServerBlobAuditingPolicyCollection(Client, Id));
        }

        /// <summary>
        /// Get a workspace SQL server&apos;s extended blob auditing policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/extendedAuditingSettings/{blobAuditingPolicyName}
        /// Operation Id: WorkspaceManagedSqlServerExtendedBlobAuditingPolicies_Get
        /// </summary>
        /// <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<ExtendedServerBlobAuditingPolicyResource>> GetExtendedServerBlobAuditingPolicyAsync(BlobAuditingPolicyName blobAuditingPolicyName, CancellationToken cancellationToken = default)
        {
            return await GetExtendedServerBlobAuditingPolicies().GetAsync(blobAuditingPolicyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a workspace SQL server&apos;s extended blob auditing policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/extendedAuditingSettings/{blobAuditingPolicyName}
        /// Operation Id: WorkspaceManagedSqlServerExtendedBlobAuditingPolicies_Get
        /// </summary>
        /// <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<ExtendedServerBlobAuditingPolicyResource> GetExtendedServerBlobAuditingPolicy(BlobAuditingPolicyName blobAuditingPolicyName, CancellationToken cancellationToken = default)
        {
            return GetExtendedServerBlobAuditingPolicies().Get(blobAuditingPolicyName, cancellationToken);
        }

        /// <summary> Gets a collection of ServerSecurityAlertPolicyResources in the Workspace. </summary>
        /// <returns> An object representing collection of ServerSecurityAlertPolicyResources and their operations over a ServerSecurityAlertPolicyResource. </returns>
        public virtual ServerSecurityAlertPolicyCollection GetServerSecurityAlertPolicies()
        {
            return GetCachedClient(Client => new ServerSecurityAlertPolicyCollection(Client, Id));
        }

        /// <summary>
        /// Get a workspace managed sql server&apos;s security alert policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/securityAlertPolicies/{securityAlertPolicyName}
        /// Operation Id: WorkspaceManagedSqlServerSecurityAlertPolicy_Get
        /// </summary>
        /// <param name="securityAlertPolicyName"> The name of the security alert policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServerSecurityAlertPolicyResource>> GetServerSecurityAlertPolicyAsync(SqlServerSecurityAlertPolicyName securityAlertPolicyName, CancellationToken cancellationToken = default)
        {
            return await GetServerSecurityAlertPolicies().GetAsync(securityAlertPolicyName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a workspace managed sql server&apos;s security alert policy.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/securityAlertPolicies/{securityAlertPolicyName}
        /// Operation Id: WorkspaceManagedSqlServerSecurityAlertPolicy_Get
        /// </summary>
        /// <param name="securityAlertPolicyName"> The name of the security alert policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<ServerSecurityAlertPolicyResource> GetServerSecurityAlertPolicy(SqlServerSecurityAlertPolicyName securityAlertPolicyName, CancellationToken cancellationToken = default)
        {
            return GetServerSecurityAlertPolicies().Get(securityAlertPolicyName, cancellationToken);
        }

        /// <summary> Gets a collection of ServerVulnerabilityAssessmentResources in the Workspace. </summary>
        /// <returns> An object representing collection of ServerVulnerabilityAssessmentResources and their operations over a ServerVulnerabilityAssessmentResource. </returns>
        public virtual ServerVulnerabilityAssessmentCollection GetServerVulnerabilityAssessments()
        {
            return GetCachedClient(Client => new ServerVulnerabilityAssessmentCollection(Client, Id));
        }

        /// <summary>
        /// Get workspace managed sql server&apos;s vulnerability assessment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
        /// Operation Id: WorkspaceManagedSqlServerVulnerabilityAssessments_Get
        /// </summary>
        /// <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<ServerVulnerabilityAssessmentResource>> GetServerVulnerabilityAssessmentAsync(VulnerabilityAssessmentName vulnerabilityAssessmentName, CancellationToken cancellationToken = default)
        {
            return await GetServerVulnerabilityAssessments().GetAsync(vulnerabilityAssessmentName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get workspace managed sql server&apos;s vulnerability assessment.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
        /// Operation Id: WorkspaceManagedSqlServerVulnerabilityAssessments_Get
        /// </summary>
        /// <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<ServerVulnerabilityAssessmentResource> GetServerVulnerabilityAssessment(VulnerabilityAssessmentName vulnerabilityAssessmentName, CancellationToken cancellationToken = default)
        {
            return GetServerVulnerabilityAssessments().Get(vulnerabilityAssessmentName, cancellationToken);
        }

        /// <summary> Gets a collection of EncryptionProtectorResources in the Workspace. </summary>
        /// <returns> An object representing collection of EncryptionProtectorResources and their operations over a EncryptionProtectorResource. </returns>
        public virtual EncryptionProtectorCollection GetEncryptionProtectors()
        {
            return GetCachedClient(Client => new EncryptionProtectorCollection(Client, Id));
        }

        /// <summary>
        /// Get workspace managed sql server&apos;s encryption protector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/encryptionProtector/{encryptionProtectorName}
        /// Operation Id: WorkspaceManagedSqlServerEncryptionProtector_Get
        /// </summary>
        /// <param name="encryptionProtectorName"> The name of the encryption protector. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual async Task<Response<EncryptionProtectorResource>> GetEncryptionProtectorAsync(EncryptionProtectorName encryptionProtectorName, CancellationToken cancellationToken = default)
        {
            return await GetEncryptionProtectors().GetAsync(encryptionProtectorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get workspace managed sql server&apos;s encryption protector.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/encryptionProtector/{encryptionProtectorName}
        /// Operation Id: WorkspaceManagedSqlServerEncryptionProtector_Get
        /// </summary>
        /// <param name="encryptionProtectorName"> The name of the encryption protector. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public virtual Response<EncryptionProtectorResource> GetEncryptionProtector(EncryptionProtectorName encryptionProtectorName, CancellationToken cancellationToken = default)
        {
            return GetEncryptionProtectors().Get(encryptionProtectorName, cancellationToken);
        }

        /// <summary> Gets a collection of RecoverableSqlPoolResources in the Workspace. </summary>
        /// <returns> An object representing collection of RecoverableSqlPoolResources and their operations over a RecoverableSqlPoolResource. </returns>
        public virtual RecoverableSqlPoolCollection GetRecoverableSqlPools()
        {
            return GetCachedClient(Client => new RecoverableSqlPoolCollection(Client, Id));
        }

        /// <summary>
        /// Get recoverable sql pools for workspace managed sql server.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/recoverableSqlPools/{sqlPoolName}
        /// Operation Id: WorkspaceManagedSqlServerRecoverableSqlPools_Get
        /// </summary>
        /// <param name="sqlPoolName"> The name of the sql pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<RecoverableSqlPoolResource>> GetRecoverableSqlPoolAsync(string sqlPoolName, CancellationToken cancellationToken = default)
        {
            return await GetRecoverableSqlPools().GetAsync(sqlPoolName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get recoverable sql pools for workspace managed sql server.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/recoverableSqlPools/{sqlPoolName}
        /// Operation Id: WorkspaceManagedSqlServerRecoverableSqlPools_Get
        /// </summary>
        /// <param name="sqlPoolName"> The name of the sql pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sqlPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sqlPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<RecoverableSqlPoolResource> GetRecoverableSqlPool(string sqlPoolName, CancellationToken cancellationToken = default)
        {
            return GetRecoverableSqlPools().Get(sqlPoolName, cancellationToken);
        }

        /// <summary> Gets a collection of DedicatedSQLminimalTlsSettingResources in the Workspace. </summary>
        /// <returns> An object representing collection of DedicatedSQLminimalTlsSettingResources and their operations over a DedicatedSQLminimalTlsSettingResource. </returns>
        public virtual DedicatedSQLminimalTlsSettingCollection GetDedicatedSQLminimalTlsSettings()
        {
            return GetCachedClient(Client => new DedicatedSQLminimalTlsSettingCollection(Client, Id));
        }

        /// <summary>
        /// Get workspace managed sql server&apos;s minimal tls settings.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/dedicatedSQLminimalTlsSettings/{dedicatedSQLminimalTlsSettingsName}
        /// Operation Id: WorkspaceManagedSqlServerDedicatedSQLMinimalTlsSettings_Get
        /// </summary>
        /// <param name="dedicatedSQLminimalTlsSettingsName"> The name of the dedicated sql minimal tls settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dedicatedSQLminimalTlsSettingsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dedicatedSQLminimalTlsSettingsName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<DedicatedSQLminimalTlsSettingResource>> GetDedicatedSQLminimalTlsSettingAsync(string dedicatedSQLminimalTlsSettingsName, CancellationToken cancellationToken = default)
        {
            return await GetDedicatedSQLminimalTlsSettings().GetAsync(dedicatedSQLminimalTlsSettingsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get workspace managed sql server&apos;s minimal tls settings.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/dedicatedSQLminimalTlsSettings/{dedicatedSQLminimalTlsSettingsName}
        /// Operation Id: WorkspaceManagedSqlServerDedicatedSQLMinimalTlsSettings_Get
        /// </summary>
        /// <param name="dedicatedSQLminimalTlsSettingsName"> The name of the dedicated sql minimal tls settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="dedicatedSQLminimalTlsSettingsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="dedicatedSQLminimalTlsSettingsName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<DedicatedSQLminimalTlsSettingResource> GetDedicatedSQLminimalTlsSetting(string dedicatedSQLminimalTlsSettingsName, CancellationToken cancellationToken = default)
        {
            return GetDedicatedSQLminimalTlsSettings().Get(dedicatedSQLminimalTlsSettingsName, cancellationToken);
        }

        /// <summary> Gets an object representing a WorkspaceAdministratorResource along with the instance operations that can be performed on it in the Workspace. </summary>
        /// <returns> Returns a <see cref="WorkspaceAdministratorResource" /> object. </returns>
        public virtual WorkspaceAdministratorResource GetWorkspaceAdministrator()
        {
            return new WorkspaceAdministratorResource(Client, new ResourceIdentifier(Id.ToString() + "/administrators/activeDirectory"));
        }

        /// <summary> Gets an object representing a WorkspaceSqlAdministratorResource along with the instance operations that can be performed on it in the Workspace. </summary>
        /// <returns> Returns a <see cref="WorkspaceSqlAdministratorResource" /> object. </returns>
        public virtual WorkspaceSqlAdministratorResource GetWorkspaceSqlAdministrator()
        {
            return new WorkspaceSqlAdministratorResource(Client, new ResourceIdentifier(Id.ToString() + "/sqlAdministrators/activeDirectory"));
        }

        /// <summary> Gets an object representing a ManagedIdentitySqlControlSettingsModelResource along with the instance operations that can be performed on it in the Workspace. </summary>
        /// <returns> Returns a <see cref="ManagedIdentitySqlControlSettingsModelResource" /> object. </returns>
        public virtual ManagedIdentitySqlControlSettingsModelResource GetManagedIdentitySqlControlSettingsModel()
        {
            return new ManagedIdentitySqlControlSettingsModelResource(Client, new ResourceIdentifier(Id.ToString() + "/managedIdentitySqlControlSettings/default"));
        }

        /// <summary> Gets a collection of RestorableDroppedSqlPoolResources in the Workspace. </summary>
        /// <returns> An object representing collection of RestorableDroppedSqlPoolResources and their operations over a RestorableDroppedSqlPoolResource. </returns>
        public virtual RestorableDroppedSqlPoolCollection GetRestorableDroppedSqlPools()
        {
            return GetCachedClient(Client => new RestorableDroppedSqlPoolCollection(Client, Id));
        }

        /// <summary>
        /// Gets a deleted sql pool that can be restored
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/restorableDroppedSqlPools/{restorableDroppedSqlPoolId}
        /// Operation Id: RestorableDroppedSqlPools_Get
        /// </summary>
        /// <param name="restorableDroppedSqlPoolId"> The id of the deleted Sql Pool in the form of sqlPoolName,deletionTimeInFileTimeFormat. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="restorableDroppedSqlPoolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="restorableDroppedSqlPoolId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<RestorableDroppedSqlPoolResource>> GetRestorableDroppedSqlPoolAsync(string restorableDroppedSqlPoolId, CancellationToken cancellationToken = default)
        {
            return await GetRestorableDroppedSqlPools().GetAsync(restorableDroppedSqlPoolId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a deleted sql pool that can be restored
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/restorableDroppedSqlPools/{restorableDroppedSqlPoolId}
        /// Operation Id: RestorableDroppedSqlPools_Get
        /// </summary>
        /// <param name="restorableDroppedSqlPoolId"> The id of the deleted Sql Pool in the form of sqlPoolName,deletionTimeInFileTimeFormat. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="restorableDroppedSqlPoolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="restorableDroppedSqlPoolId"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<RestorableDroppedSqlPoolResource> GetRestorableDroppedSqlPool(string restorableDroppedSqlPoolId, CancellationToken cancellationToken = default)
        {
            return GetRestorableDroppedSqlPools().Get(restorableDroppedSqlPoolId, cancellationToken);
        }

        /// <summary> Gets a collection of BigDataPoolResourceInfoResources in the Workspace. </summary>
        /// <returns> An object representing collection of BigDataPoolResourceInfoResources and their operations over a BigDataPoolResourceInfoResource. </returns>
        public virtual BigDataPoolResourceInfoCollection GetBigDataPoolResourceInfos()
        {
            return GetCachedClient(Client => new BigDataPoolResourceInfoCollection(Client, Id));
        }

        /// <summary>
        /// Get a Big Data pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools/{bigDataPoolName}
        /// Operation Id: BigDataPools_Get
        /// </summary>
        /// <param name="bigDataPoolName"> Big Data pool name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="bigDataPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="bigDataPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<BigDataPoolResourceInfoResource>> GetBigDataPoolResourceInfoAsync(string bigDataPoolName, CancellationToken cancellationToken = default)
        {
            return await GetBigDataPoolResourceInfos().GetAsync(bigDataPoolName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Big Data pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/bigDataPools/{bigDataPoolName}
        /// Operation Id: BigDataPools_Get
        /// </summary>
        /// <param name="bigDataPoolName"> Big Data pool name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="bigDataPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="bigDataPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<BigDataPoolResourceInfoResource> GetBigDataPoolResourceInfo(string bigDataPoolName, CancellationToken cancellationToken = default)
        {
            return GetBigDataPoolResourceInfos().Get(bigDataPoolName, cancellationToken);
        }

        /// <summary> Gets a collection of LibraryResources in the Workspace. </summary>
        /// <returns> An object representing collection of LibraryResources and their operations over a LibraryResource. </returns>
        public virtual LibraryResourceCollection GetLibraryResources()
        {
            return GetCachedClient(Client => new LibraryResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get library by name in a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/libraries/{libraryName}
        /// Operation Id: Library_Get
        /// </summary>
        /// <param name="libraryName"> Library name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="libraryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="libraryName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<LibraryResource>> GetLibraryResourceAsync(string libraryName, CancellationToken cancellationToken = default)
        {
            return await GetLibraryResources().GetAsync(libraryName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get library by name in a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/libraries/{libraryName}
        /// Operation Id: Library_Get
        /// </summary>
        /// <param name="libraryName"> Library name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="libraryName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="libraryName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<LibraryResource> GetLibraryResource(string libraryName, CancellationToken cancellationToken = default)
        {
            return GetLibraryResources().Get(libraryName, cancellationToken);
        }

        /// <summary> Gets a collection of IntegrationRuntimeResources in the Workspace. </summary>
        /// <returns> An object representing collection of IntegrationRuntimeResources and their operations over a IntegrationRuntimeResource. </returns>
        public virtual IntegrationRuntimeResourceCollection GetIntegrationRuntimeResources()
        {
            return GetCachedClient(Client => new IntegrationRuntimeResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get an integration runtime
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/integrationRuntimes/{integrationRuntimeName}
        /// Operation Id: IntegrationRuntimes_Get
        /// </summary>
        /// <param name="integrationRuntimeName"> Integration runtime name. </param>
        /// <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="integrationRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<IntegrationRuntimeResource>> GetIntegrationRuntimeResourceAsync(string integrationRuntimeName, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            return await GetIntegrationRuntimeResources().GetAsync(integrationRuntimeName, ifNoneMatch, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an integration runtime
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/integrationRuntimes/{integrationRuntimeName}
        /// Operation Id: IntegrationRuntimes_Get
        /// </summary>
        /// <param name="integrationRuntimeName"> Integration runtime name. </param>
        /// <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="integrationRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="integrationRuntimeName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<IntegrationRuntimeResource> GetIntegrationRuntimeResource(string integrationRuntimeName, string ifNoneMatch = null, CancellationToken cancellationToken = default)
        {
            return GetIntegrationRuntimeResources().Get(integrationRuntimeName, ifNoneMatch, cancellationToken);
        }

        /// <summary> Gets a collection of SparkConfigurationResources in the Workspace. </summary>
        /// <returns> An object representing collection of SparkConfigurationResources and their operations over a SparkConfigurationResource. </returns>
        public virtual SparkConfigurationResourceCollection GetSparkConfigurationResources()
        {
            return GetCachedClient(Client => new SparkConfigurationResourceCollection(Client, Id));
        }

        /// <summary>
        /// Get SparkConfiguration by name in a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sparkconfigurations/{sparkConfigurationName}
        /// Operation Id: SparkConfiguration_Get
        /// </summary>
        /// <param name="sparkConfigurationName"> SparkConfiguration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sparkConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sparkConfigurationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<SparkConfigurationResource>> GetSparkConfigurationResourceAsync(string sparkConfigurationName, CancellationToken cancellationToken = default)
        {
            return await GetSparkConfigurationResources().GetAsync(sparkConfigurationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get SparkConfiguration by name in a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sparkconfigurations/{sparkConfigurationName}
        /// Operation Id: SparkConfiguration_Get
        /// </summary>
        /// <param name="sparkConfigurationName"> SparkConfiguration name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sparkConfigurationName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sparkConfigurationName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<SparkConfigurationResource> GetSparkConfigurationResource(string sparkConfigurationName, CancellationToken cancellationToken = default)
        {
            return GetSparkConfigurationResources().Get(sparkConfigurationName, cancellationToken);
        }

        /// <summary> Gets a collection of KustoPoolResources in the Workspace. </summary>
        /// <returns> An object representing collection of KustoPoolResources and their operations over a KustoPoolResource. </returns>
        public virtual KustoPoolCollection GetKustoPools()
        {
            return GetCachedClient(Client => new KustoPoolCollection(Client, Id));
        }

        /// <summary>
        /// Gets a Kusto pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}
        /// Operation Id: KustoPools_Get
        /// </summary>
        /// <param name="kustoPoolName"> The name of the Kusto pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="kustoPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="kustoPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<KustoPoolResource>> GetKustoPoolAsync(string kustoPoolName, CancellationToken cancellationToken = default)
        {
            return await GetKustoPools().GetAsync(kustoPoolName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets a Kusto pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}
        /// Operation Id: KustoPools_Get
        /// </summary>
        /// <param name="kustoPoolName"> The name of the Kusto pool. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="kustoPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="kustoPoolName"/> is null. </exception>
        [ForwardsClientCalls]
        public virtual Response<KustoPoolResource> GetKustoPool(string kustoPoolName, CancellationToken cancellationToken = default)
        {
            return GetKustoPools().Get(kustoPoolName, cancellationToken);
        }

        /// <summary>
        /// Gets a workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<WorkspaceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Get");
            scope.Start();
            try
            {
                var response = await _workspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<WorkspaceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Get");
            scope.Start();
            try
            {
                var response = _workspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new WorkspaceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<WorkspaceResource>> DeleteAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Delete");
            scope.Start();
            try
            {
                var response = await _workspaceRestClient.DeleteAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new SynapseArmOperation<WorkspaceResource>(new WorkspaceOperationSource(Client), _workspaceClientDiagnostics, Pipeline, _workspaceRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deletes a workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Delete
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<WorkspaceResource> Delete(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Delete");
            scope.Start();
            try
            {
                var response = _workspaceRestClient.Delete(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                var operation = new SynapseArmOperation<WorkspaceResource>(new WorkspaceOperationSource(Client), _workspaceClientDiagnostics, Pipeline, _workspaceRestClient.CreateDeleteRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates a workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Update
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> Workspace patch request properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual async Task<ArmOperation<WorkspaceResource>> UpdateAsync(WaitUntil waitUntil, WorkspacePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Update");
            scope.Start();
            try
            {
                var response = await _workspaceRestClient.UpdateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken).ConfigureAwait(false);
                var operation = new SynapseArmOperation<WorkspaceResource>(new WorkspaceOperationSource(Client), _workspaceClientDiagnostics, Pipeline, _workspaceRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Updates a workspace
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Update
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="patch"> Workspace patch request properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="patch"/> is null. </exception>
        public virtual ArmOperation<WorkspaceResource> Update(WaitUntil waitUntil, WorkspacePatch patch, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(patch, nameof(patch));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.Update");
            scope.Start();
            try
            {
                var response = _workspaceRestClient.Update(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch, cancellationToken);
                var operation = new SynapseArmOperation<WorkspaceResource>(new WorkspaceOperationSource(Client), _workspaceClientDiagnostics, Pipeline, _workspaceRestClient.CreateUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, patch).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replaces firewall rules
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/replaceAllIpFirewallRules
        /// Operation Id: IpFirewallRules_ReplaceAll
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Replace all IP firewall rules request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<ArmOperation<ReplaceAllFirewallRulesOperationResponse>> ReplaceAllIpFirewallRuleAsync(WaitUntil waitUntil, ReplaceAllIPFirewallRulesContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _ipFirewallRuleInfoIPFirewallRulesClientDiagnostics.CreateScope("WorkspaceResource.ReplaceAllIpFirewallRule");
            scope.Start();
            try
            {
                var response = await _ipFirewallRuleInfoIPFirewallRulesRestClient.ReplaceAllAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken).ConfigureAwait(false);
                var operation = new SynapseArmOperation<ReplaceAllFirewallRulesOperationResponse>(new ReplaceAllFirewallRulesOperationResponseOperationSource(), _ipFirewallRuleInfoIPFirewallRulesClientDiagnostics, Pipeline, _ipFirewallRuleInfoIPFirewallRulesRestClient.CreateReplaceAllRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replaces firewall rules
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/replaceAllIpFirewallRules
        /// Operation Id: IpFirewallRules_ReplaceAll
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="content"> Replace all IP firewall rules request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual ArmOperation<ReplaceAllFirewallRulesOperationResponse> ReplaceAllIpFirewallRule(WaitUntil waitUntil, ReplaceAllIPFirewallRulesContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = _ipFirewallRuleInfoIPFirewallRulesClientDiagnostics.CreateScope("WorkspaceResource.ReplaceAllIpFirewallRule");
            scope.Start();
            try
            {
                var response = _ipFirewallRuleInfoIPFirewallRulesRestClient.ReplaceAll(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content, cancellationToken);
                var operation = new SynapseArmOperation<ReplaceAllFirewallRulesOperationResponse>(new ReplaceAllFirewallRulesOperationResponseOperationSource(), _ipFirewallRuleInfoIPFirewallRulesClientDiagnostics, Pipeline, _ipFirewallRuleInfoIPFirewallRulesRestClient.CreateReplaceAllRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, content).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get list of server usages metric for workspace managed sql server.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlUsages
        /// Operation Id: WorkspaceManagedSqlServerUsages_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ServerUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ServerUsage> GetWorkspaceManagedSqlServerUsagesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ServerUsage>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _workspaceManagedSqlServerUsagesClientDiagnostics.CreateScope("WorkspaceResource.GetWorkspaceManagedSqlServerUsages");
                scope.Start();
                try
                {
                    var response = await _workspaceManagedSqlServerUsagesRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ServerUsage>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _workspaceManagedSqlServerUsagesClientDiagnostics.CreateScope("WorkspaceResource.GetWorkspaceManagedSqlServerUsages");
                scope.Start();
                try
                {
                    var response = await _workspaceManagedSqlServerUsagesRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get list of server usages metric for workspace managed sql server.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlUsages
        /// Operation Id: WorkspaceManagedSqlServerUsages_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ServerUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ServerUsage> GetWorkspaceManagedSqlServerUsages(CancellationToken cancellationToken = default)
        {
            Page<ServerUsage> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _workspaceManagedSqlServerUsagesClientDiagnostics.CreateScope("WorkspaceResource.GetWorkspaceManagedSqlServerUsages");
                scope.Start();
                try
                {
                    var response = _workspaceManagedSqlServerUsagesRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ServerUsage> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _workspaceManagedSqlServerUsagesClientDiagnostics.CreateScope("WorkspaceResource.GetWorkspaceManagedSqlServerUsages");
                scope.Start();
                try
                {
                    var response = _workspaceManagedSqlServerUsagesRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual async Task<Response<WorkspaceResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.AddTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues[key] = value;
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _workspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new WorkspacePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Add a tag to the current resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        public virtual Response<WorkspaceResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));
            Argument.AssertNotNull(value, nameof(value));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.AddTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues[key] = value;
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _workspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new WorkspacePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags[key] = value;
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual async Task<Response<WorkspaceResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.SetTags");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    await GetTagResource().DeleteAsync(WaitUntil.Completed, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _workspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new WorkspacePatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Replace the tags on the resource with the given set.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        public virtual Response<WorkspaceResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tags, nameof(tags));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.SetTags");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    GetTagResource().Delete(WaitUntil.Completed, cancellationToken: cancellationToken);
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.ReplaceWith(tags);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _workspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new WorkspacePatch();
                    patch.Tags.ReplaceWith(tags);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual async Task<Response<WorkspaceResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.RemoveTag");
            scope.Start();
            try
            {
                if (await CanUseTagResourceAsync(cancellationToken: cancellationToken).ConfigureAwait(false))
                {
                    var originalTags = await GetTagResource().GetAsync(cancellationToken).ConfigureAwait(false);
                    originalTags.Value.Data.TagValues.Remove(key);
                    await GetTagResource().CreateOrUpdateAsync(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken).ConfigureAwait(false);
                    var originalResponse = await _workspaceRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = (await GetAsync(cancellationToken: cancellationToken).ConfigureAwait(false)).Value.Data;
                    var patch = new WorkspacePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = await UpdateAsync(WaitUntil.Completed, patch, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Removes a tag by key from the resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        public virtual Response<WorkspaceResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(key, nameof(key));

            using var scope = _workspaceClientDiagnostics.CreateScope("WorkspaceResource.RemoveTag");
            scope.Start();
            try
            {
                if (CanUseTagResource(cancellationToken: cancellationToken))
                {
                    var originalTags = GetTagResource().Get(cancellationToken);
                    originalTags.Value.Data.TagValues.Remove(key);
                    GetTagResource().CreateOrUpdate(WaitUntil.Completed, originalTags.Value.Data, cancellationToken: cancellationToken);
                    var originalResponse = _workspaceRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, cancellationToken);
                    return Response.FromValue(new WorkspaceResource(Client, originalResponse.Value), originalResponse.GetRawResponse());
                }
                else
                {
                    var current = Get(cancellationToken: cancellationToken).Value.Data;
                    var patch = new WorkspacePatch();
                    foreach (var tag in current.Tags)
                    {
                        patch.Tags.Add(tag);
                    }
                    patch.Tags.Remove(key);
                    var result = Update(WaitUntil.Completed, patch, cancellationToken: cancellationToken);
                    return Response.FromValue(result.Value, result.GetRawResponse());
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
