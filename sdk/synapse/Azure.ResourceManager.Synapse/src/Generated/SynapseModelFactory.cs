// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;
using Azure.ResourceManager.Synapse;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class SynapseModelFactory
    {
        /// <summary> Initializes a new instance of AzureADOnlyAuthenticationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="azureADOnlyAuthentication"> Azure Active Directory only Authentication enabled. </param>
        /// <param name="state"> property configuration state. </param>
        /// <param name="createdOn"> property configuration date. </param>
        /// <returns> A new <see cref="Synapse.AzureADOnlyAuthenticationData"/> instance for mocking. </returns>
        public static AzureADOnlyAuthenticationData AzureADOnlyAuthenticationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? azureADOnlyAuthentication = null, StateValue? state = null, DateTimeOffset? createdOn = null)
        {
            return new AzureADOnlyAuthenticationData(id, name, resourceType, systemData, azureADOnlyAuthentication, state, createdOn);
        }

        /// <summary> Initializes a new instance of IPFirewallRuleInfoData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="endIPAddress"> The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. </param>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="startIPAddress"> The start IP address of the firewall rule. Must be IPv4 format. </param>
        /// <returns> A new <see cref="Synapse.IPFirewallRuleInfoData"/> instance for mocking. </returns>
        public static IPFirewallRuleInfoData IPFirewallRuleInfoData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string endIPAddress = null, ProvisioningState? provisioningState = null, string startIPAddress = null)
        {
            return new IPFirewallRuleInfoData(id, name, resourceType, systemData, endIPAddress, provisioningState, startIPAddress);
        }

        /// <summary> Initializes a new instance of ReplaceAllFirewallRulesOperationResponse. </summary>
        /// <param name="operationId"> The operation ID. </param>
        /// <returns> A new <see cref="Models.ReplaceAllFirewallRulesOperationResponse"/> instance for mocking. </returns>
        public static ReplaceAllFirewallRulesOperationResponse ReplaceAllFirewallRulesOperationResponse(string operationId = null)
        {
            return new ReplaceAllFirewallRulesOperationResponse(operationId);
        }

        /// <summary> Initializes a new instance of KeyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isActiveCMK"> Used to activate the workspace after a customer managed key is provided. </param>
        /// <param name="keyVaultUri"> The Key Vault Url of the workspace key. </param>
        /// <returns> A new <see cref="Synapse.KeyData"/> instance for mocking. </returns>
        public static KeyData KeyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isActiveCMK = null, Uri keyVaultUri = null)
        {
            return new KeyData(id, name, resourceType, systemData, isActiveCMK, keyVaultUri);
        }

        /// <summary> Initializes a new instance of SynapsePrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="privateEndpointId"> The private endpoint which the connection belongs to. </param>
        /// <param name="connectionState"> Connection state of the private endpoint connection. </param>
        /// <param name="provisioningState"> Provisioning state of the private endpoint connection. </param>
        /// <returns> A new <see cref="Synapse.SynapsePrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static SynapsePrivateEndpointConnectionData SynapsePrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier privateEndpointId = null, SynapsePrivateLinkServiceConnectionState connectionState = null, string provisioningState = null)
        {
            return new SynapsePrivateEndpointConnectionData(id, name, resourceType, systemData, ResourceManagerModelFactory.SubResource(privateEndpointId), connectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionProperties. </summary>
        /// <param name="privateEndpointId"> The private endpoint which the connection belongs to. </param>
        /// <param name="connectionState"> Connection state of the private endpoint connection. </param>
        /// <param name="provisioningState"> Provisioning state of the private endpoint connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionProperties"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionProperties PrivateEndpointConnectionProperties(ResourceIdentifier privateEndpointId = null, SynapsePrivateLinkServiceConnectionState connectionState = null, string provisioningState = null)
        {
            return new PrivateEndpointConnectionProperties(ResourceManagerModelFactory.SubResource(privateEndpointId), connectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of SynapsePrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> The private link service connection status. </param>
        /// <param name="description"> The private link service connection description. </param>
        /// <param name="actionsRequired"> The actions required for private link service connection. </param>
        /// <returns> A new <see cref="Models.SynapsePrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static SynapsePrivateLinkServiceConnectionState SynapsePrivateLinkServiceConnectionState(string status = null, string description = null, string actionsRequired = null)
        {
            return new SynapsePrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of SynapsePrivateLinkResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The private link resource properties. </param>
        /// <returns> A new <see cref="Synapse.SynapsePrivateLinkResourceData"/> instance for mocking. </returns>
        public static SynapsePrivateLinkResourceData SynapsePrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SynapsePrivateLinkResourceProperties properties = null)
        {
            return new SynapsePrivateLinkResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of SynapsePrivateLinkResourceProperties. </summary>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> Required DNS zone names of the the private link resource. </param>
        /// <returns> A new <see cref="Models.SynapsePrivateLinkResourceProperties"/> instance for mocking. </returns>
        public static SynapsePrivateLinkResourceProperties SynapsePrivateLinkResourceProperties(string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new SynapsePrivateLinkResourceProperties(groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of PrivateLinkHubData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> PrivateLinkHub provisioning state. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections. </param>
        /// <returns> A new <see cref="Synapse.PrivateLinkHubData"/> instance for mocking. </returns>
        public static PrivateLinkHubData PrivateLinkHubData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string provisioningState = null, IEnumerable<PrivateEndpointConnectionForPrivateLinkHubBasic> privateEndpointConnections = null)
        {
            tags ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<PrivateEndpointConnectionForPrivateLinkHubBasic>();

            return new PrivateLinkHubData(id, name, resourceType, systemData, tags, location, provisioningState, privateEndpointConnections?.ToList());
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionForPrivateLinkHubBasic. </summary>
        /// <param name="id"></param>
        /// <param name="properties"> Properties of a private endpoint connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnectionForPrivateLinkHubBasic"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionForPrivateLinkHubBasic PrivateEndpointConnectionForPrivateLinkHubBasic(string id = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new PrivateEndpointConnectionForPrivateLinkHubBasic(id, properties);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnectionForPrivateLinkHubData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of a private endpoint connection. </param>
        /// <returns> A new <see cref="Synapse.PrivateEndpointConnectionForPrivateLinkHubData"/> instance for mocking. </returns>
        public static PrivateEndpointConnectionForPrivateLinkHubData PrivateEndpointConnectionForPrivateLinkHubData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, PrivateEndpointConnectionProperties properties = null)
        {
            return new PrivateEndpointConnectionForPrivateLinkHubData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of SqlPoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> SQL pool SKU. </param>
        /// <param name="maxSizeBytes"> Maximum size in bytes. </param>
        /// <param name="collation"> Collation mode. </param>
        /// <param name="sourceDatabaseId"> Source database to create from. </param>
        /// <param name="recoverableDatabaseId"> Backup database to restore from. </param>
        /// <param name="provisioningState"> Resource state. </param>
        /// <param name="status"> Resource status. </param>
        /// <param name="restorePointInTime"> Snapshot time to restore. </param>
        /// <param name="createMode">
        /// Specifies the mode of sql pool creation.
        /// 
        /// Default: regular sql pool creation.
        /// 
        /// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
        /// 
        /// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
        /// 
        /// Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool&apos;s original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
        /// </param>
        /// <param name="createdOn"> Date the SQL pool was created. </param>
        /// <param name="storageAccountType"> The storage account type used to store backups for this sql pool. </param>
        /// <param name="sourceDatabaseDeletionOn"> Specifies the time that the sql pool was deleted. </param>
        /// <returns> A new <see cref="Synapse.SqlPoolData"/> instance for mocking. </returns>
        public static SqlPoolData SqlPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, SynapseSku sku = null, long? maxSizeBytes = null, string collation = null, string sourceDatabaseId = null, string recoverableDatabaseId = null, string provisioningState = null, string status = null, DateTimeOffset? restorePointInTime = null, CreateMode? createMode = null, DateTimeOffset? createdOn = null, StorageAccountType? storageAccountType = null, DateTimeOffset? sourceDatabaseDeletionOn = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SqlPoolData(id, name, resourceType, systemData, tags, location, sku, maxSizeBytes, collation, sourceDatabaseId, recoverableDatabaseId, provisioningState, status, restorePointInTime, createMode, createdOn, storageAccountType, sourceDatabaseDeletionOn);
        }

        /// <summary> Initializes a new instance of SynapseSku. </summary>
        /// <param name="tier"> The service tier. </param>
        /// <param name="name"> The SKU name. </param>
        /// <param name="capacity"> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </param>
        /// <returns> A new <see cref="Models.SynapseSku"/> instance for mocking. </returns>
        public static SynapseSku SynapseSku(string tier = null, string name = null, int? capacity = null)
        {
            return new SynapseSku(tier, name, capacity);
        }

        /// <summary> Initializes a new instance of MetadataSyncConfigData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="enabled"> Indicates whether the metadata sync is enabled or disabled. </param>
        /// <param name="syncIntervalInMinutes"> The Sync Interval in minutes. </param>
        /// <returns> A new <see cref="Synapse.MetadataSyncConfigData"/> instance for mocking. </returns>
        public static MetadataSyncConfigData MetadataSyncConfigData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? enabled = null, int? syncIntervalInMinutes = null)
        {
            return new MetadataSyncConfigData(id, name, resourceType, systemData, enabled, syncIntervalInMinutes);
        }

        /// <summary> Initializes a new instance of GeoBackupPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kind"> Kind of geo backup policy.  This is metadata used for the Azure portal experience. </param>
        /// <param name="location"> Backup policy location. </param>
        /// <param name="state"> The state of the geo backup policy. </param>
        /// <param name="storageType"> The storage type of the geo backup policy. </param>
        /// <returns> A new <see cref="Synapse.GeoBackupPolicyData"/> instance for mocking. </returns>
        public static GeoBackupPolicyData GeoBackupPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string kind = null, AzureLocation? location = null, GeoBackupPolicyState state = default, string storageType = null)
        {
            return new GeoBackupPolicyData(id, name, resourceType, systemData, kind, location, state, storageType);
        }

        /// <summary> Initializes a new instance of DataWarehouseUserActivityData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="activeQueriesCount"> Count of running and suspended queries. </param>
        /// <returns> A new <see cref="Synapse.DataWarehouseUserActivityData"/> instance for mocking. </returns>
        public static DataWarehouseUserActivityData DataWarehouseUserActivityData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? activeQueriesCount = null)
        {
            return new DataWarehouseUserActivityData(id, name, resourceType, systemData, activeQueriesCount);
        }

        /// <summary> Initializes a new instance of RestorePointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="restorePointType"> The type of restore point. </param>
        /// <param name="earliestRestoreOn"> The earliest time to which this database can be restored. </param>
        /// <param name="restorePointCreationOn"> The time the backup was taken. </param>
        /// <param name="restorePointLabel"> The label of restore point for backup request by user. </param>
        /// <returns> A new <see cref="Synapse.RestorePointData"/> instance for mocking. </returns>
        public static RestorePointData RestorePointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, RestorePointType? restorePointType = null, DateTimeOffset? earliestRestoreOn = null, DateTimeOffset? restorePointCreationOn = null, string restorePointLabel = null)
        {
            return new RestorePointData(id, name, resourceType, systemData, location, restorePointType, earliestRestoreOn, restorePointCreationOn, restorePointLabel);
        }

        /// <summary> Initializes a new instance of ReplicationLinkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Location of the workspace that contains this firewall rule. </param>
        /// <param name="isTerminationAllowed"> Legacy value indicating whether termination is allowed.  Currently always returns true. </param>
        /// <param name="replicationMode"> Replication mode of this replication link. </param>
        /// <param name="partnerServer"> The name of the workspace hosting the partner Sql pool. </param>
        /// <param name="partnerDatabase"> The name of the partner Sql pool. </param>
        /// <param name="partnerLocation"> The Azure Region of the partner Sql pool. </param>
        /// <param name="role"> The role of the Sql pool in the replication link. </param>
        /// <param name="partnerRole"> The role of the partner Sql pool in the replication link. </param>
        /// <param name="startOn"> The start time for the replication link. </param>
        /// <param name="percentComplete"> The percentage of seeding complete for the replication link. </param>
        /// <param name="replicationState"> The replication state for the replication link. </param>
        /// <returns> A new <see cref="Synapse.ReplicationLinkData"/> instance for mocking. </returns>
        public static ReplicationLinkData ReplicationLinkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, bool? isTerminationAllowed = null, string replicationMode = null, string partnerServer = null, string partnerDatabase = null, string partnerLocation = null, ReplicationRole? role = null, ReplicationRole? partnerRole = null, DateTimeOffset? startOn = null, int? percentComplete = null, ReplicationState? replicationState = null)
        {
            return new ReplicationLinkData(id, name, resourceType, systemData, location, isTerminationAllowed, replicationMode, partnerServer, partnerDatabase, partnerLocation, role, partnerRole, startOn, percentComplete, replicationState);
        }

        /// <summary> Initializes a new instance of MaintenanceWindowData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="timeRanges"></param>
        /// <returns> A new <see cref="Synapse.MaintenanceWindowData"/> instance for mocking. </returns>
        public static MaintenanceWindowData MaintenanceWindowData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<MaintenanceWindowTimeRange> timeRanges = null)
        {
            timeRanges ??= new List<MaintenanceWindowTimeRange>();

            return new MaintenanceWindowData(id, name, resourceType, systemData, timeRanges?.ToList());
        }

        /// <summary> Initializes a new instance of MaintenanceWindowTimeRange. </summary>
        /// <param name="dayOfWeek"> Day of maintenance window. </param>
        /// <param name="startTime"> Start time minutes offset from 12am. </param>
        /// <param name="duration"> Duration of maintenance window in minutes. </param>
        /// <returns> A new <see cref="Models.MaintenanceWindowTimeRange"/> instance for mocking. </returns>
        public static MaintenanceWindowTimeRange MaintenanceWindowTimeRange(DayOfWeek? dayOfWeek = null, string startTime = null, TimeSpan? duration = null)
        {
            return new MaintenanceWindowTimeRange(dayOfWeek, startTime, duration);
        }

        /// <summary> Initializes a new instance of MaintenanceWindowOptionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="isEnabled"> Whether maintenance windows are enabled for the database. </param>
        /// <param name="maintenanceWindowCycles"> Available maintenance cycles e.g. {Saturday, 0, 48*60}, {Wednesday, 0, 24*60}. </param>
        /// <param name="minDurationInMinutes"> Minimum duration of maintenance window. </param>
        /// <param name="defaultDurationInMinutes"> Default duration for maintenance window. </param>
        /// <param name="minCycles"> Minimum number of maintenance windows cycles to be set on the database. </param>
        /// <param name="timeGranularityInMinutes"> Time granularity in minutes for maintenance windows. </param>
        /// <param name="allowMultipleMaintenanceWindowsPerCycle"> Whether we allow multiple maintenance windows per cycle. </param>
        /// <returns> A new <see cref="Synapse.MaintenanceWindowOptionData"/> instance for mocking. </returns>
        public static MaintenanceWindowOptionData MaintenanceWindowOptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, bool? isEnabled = null, IEnumerable<MaintenanceWindowTimeRange> maintenanceWindowCycles = null, int? minDurationInMinutes = null, int? defaultDurationInMinutes = null, int? minCycles = null, int? timeGranularityInMinutes = null, bool? allowMultipleMaintenanceWindowsPerCycle = null)
        {
            maintenanceWindowCycles ??= new List<MaintenanceWindowTimeRange>();

            return new MaintenanceWindowOptionData(id, name, resourceType, systemData, isEnabled, maintenanceWindowCycles?.ToList(), minDurationInMinutes, defaultDurationInMinutes, minCycles, timeGranularityInMinutes, allowMultipleMaintenanceWindowsPerCycle);
        }

        /// <summary> Initializes a new instance of TransparentDataEncryptionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="status"> The status of the database transparent data encryption. </param>
        /// <returns> A new <see cref="Synapse.TransparentDataEncryptionData"/> instance for mocking. </returns>
        public static TransparentDataEncryptionData TransparentDataEncryptionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, TransparentDataEncryptionStatus? status = null)
        {
            return new TransparentDataEncryptionData(id, name, resourceType, systemData, location, status);
        }

        /// <summary> Initializes a new instance of SqlPoolBlobAuditingPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kind"> Resource kind. </param>
        /// <param name="state"> Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required. </param>
        /// <param name="storageEndpoint"> Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required. </param>
        /// <param name="storageAccountAccessKey"> Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required. </param>
        /// <param name="retentionDays"> Specifies the number of days to keep in the audit logs in the storage account. </param>
        /// <param name="auditActionsAndGroups">
        /// Specifies the Actions-Groups and Actions to audit.
        /// 
        /// The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
        /// 
        /// BATCH_COMPLETED_GROUP,
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
        /// FAILED_DATABASE_AUTHENTICATION_GROUP.
        /// 
        /// This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
        /// 
        /// The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
        /// 
        /// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
        /// BACKUP_RESTORE_GROUP
        /// DATABASE_LOGOUT_GROUP
        /// DATABASE_OBJECT_CHANGE_GROUP
        /// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
        /// DATABASE_OPERATION_GROUP
        /// DATABASE_PERMISSION_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
        /// DATABASE_ROLE_MEMBER_CHANGE_GROUP
        /// FAILED_DATABASE_AUTHENTICATION_GROUP
        /// SCHEMA_OBJECT_ACCESS_GROUP
        /// SCHEMA_OBJECT_CHANGE_GROUP
        /// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        /// USER_CHANGE_PASSWORD_GROUP
        /// BATCH_STARTED_GROUP
        /// BATCH_COMPLETED_GROUP
        /// 
        /// These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
        /// 
        /// For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
        /// 
        /// For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
        /// SELECT
        /// UPDATE
        /// INSERT
        /// DELETE
        /// EXECUTE
        /// RECEIVE
        /// REFERENCES
        /// 
        /// The general form for defining an action to be audited is:
        /// {action} ON {object} BY {principal}
        /// 
        /// Note that &lt;object&gt; in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
        /// 
        /// For example:
        /// SELECT on dbo.myTable by public
        /// SELECT on DATABASE::myDatabase by public
        /// SELECT on SCHEMA::mySchema by public
        /// 
        /// For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
        /// </param>
        /// <param name="storageAccountSubscriptionId"> Specifies the blob storage subscription Id. </param>
        /// <param name="isStorageSecondaryKeyInUse"> Specifies whether storageAccountAccessKey value is the storage&apos;s secondary key. </param>
        /// <param name="isAzureMonitorTargetEnabled">
        /// Specifies whether audit events are sent to Azure Monitor. 
        /// In order to send the events to Azure Monitor, specify &apos;state&apos; as &apos;Enabled&apos; and &apos;isAzureMonitorTargetEnabled&apos; as true.
        /// 
        /// When using REST API to configure auditing, Diagnostic Settings with &apos;SQLSecurityAuditEvents&apos; diagnostic logs category on the database should be also created.
        /// Note that for server level audit you should use the &apos;master&apos; database as {databaseName}.
        /// 
        /// Diagnostic Settings URI format:
        /// PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// 
        /// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// 
        /// </param>
        /// <returns> A new <see cref="Synapse.SqlPoolBlobAuditingPolicyData"/> instance for mocking. </returns>
        public static SqlPoolBlobAuditingPolicyData SqlPoolBlobAuditingPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string kind = null, BlobAuditingPolicyState? state = null, string storageEndpoint = null, string storageAccountAccessKey = null, int? retentionDays = null, IEnumerable<string> auditActionsAndGroups = null, Guid? storageAccountSubscriptionId = null, bool? isStorageSecondaryKeyInUse = null, bool? isAzureMonitorTargetEnabled = null)
        {
            auditActionsAndGroups ??= new List<string>();

            return new SqlPoolBlobAuditingPolicyData(id, name, resourceType, systemData, kind, state, storageEndpoint, storageAccountAccessKey, retentionDays, auditActionsAndGroups?.ToList(), storageAccountSubscriptionId, isStorageSecondaryKeyInUse, isAzureMonitorTargetEnabled);
        }

        /// <summary> Initializes a new instance of SqlPoolOperation. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="databaseName"> The name of the Sql pool the operation is being performed on. </param>
        /// <param name="operation"> The name of operation. </param>
        /// <param name="operationFriendlyName"> The friendly name of operation. </param>
        /// <param name="percentComplete"> The percentage of the operation completed. </param>
        /// <param name="serverName"> The name of the server. </param>
        /// <param name="startOn"> The operation start time. </param>
        /// <param name="state"> The operation state. </param>
        /// <param name="errorCode"> The operation error code. </param>
        /// <param name="errorDescription"> The operation error description. </param>
        /// <param name="errorSeverity"> The operation error severity. </param>
        /// <param name="isUserError"> Whether or not the error is a user error. </param>
        /// <param name="estimatedCompletionOn"> The estimated completion time of the operation. </param>
        /// <param name="description"> The operation description. </param>
        /// <param name="isCancellable"> Whether the operation can be cancelled. </param>
        /// <returns> A new <see cref="Models.SqlPoolOperation"/> instance for mocking. </returns>
        public static SqlPoolOperation SqlPoolOperation(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string databaseName = null, string operation = null, string operationFriendlyName = null, int? percentComplete = null, string serverName = null, DateTimeOffset? startOn = null, ManagementOperationState? state = null, int? errorCode = null, string errorDescription = null, int? errorSeverity = null, bool? isUserError = null, DateTimeOffset? estimatedCompletionOn = null, string description = null, bool? isCancellable = null)
        {
            return new SqlPoolOperation(id, name, resourceType, systemData, databaseName, operation, operationFriendlyName, percentComplete, serverName, startOn, state, errorCode, errorDescription, errorSeverity, isUserError, estimatedCompletionOn, description, isCancellable);
        }

        /// <summary> Initializes a new instance of SqlPoolUsage. </summary>
        /// <param name="name"> The name of the usage metric. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="displayName"> The usage metric display name. </param>
        /// <param name="currentValue"> The current value of the usage metric. </param>
        /// <param name="limit"> The current limit of the usage metric. </param>
        /// <param name="unit"> The units of the usage metric. </param>
        /// <param name="nextResetOn"> The next reset time for the usage metric (ISO8601 format). </param>
        /// <returns> A new <see cref="Models.SqlPoolUsage"/> instance for mocking. </returns>
        public static SqlPoolUsage SqlPoolUsage(string name = null, string resourceName = null, string displayName = null, double? currentValue = null, double? limit = null, string unit = null, DateTimeOffset? nextResetOn = null)
        {
            return new SqlPoolUsage(name, resourceName, displayName, currentValue, limit, unit, nextResetOn);
        }

        /// <summary> Initializes a new instance of SensitivityLabelData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="managedBy"> managed by. </param>
        /// <param name="schemaName"> The schema name. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="columnName"> The column name. </param>
        /// <param name="labelName"> The label name. </param>
        /// <param name="labelId"> The label ID. </param>
        /// <param name="informationType"> The information type. </param>
        /// <param name="informationTypeId"> The information type ID. </param>
        /// <param name="isDisabled"> Is sensitivity recommendation disabled. Applicable for recommended sensitivity label only. Specifies whether the sensitivity recommendation on this column is disabled (dismissed) or not. </param>
        /// <param name="rank"></param>
        /// <returns> A new <see cref="Synapse.SensitivityLabelData"/> instance for mocking. </returns>
        public static SensitivityLabelData SensitivityLabelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string managedBy = null, string schemaName = null, string tableName = null, string columnName = null, string labelName = null, string labelId = null, string informationType = null, string informationTypeId = null, bool? isDisabled = null, SensitivityLabelRank? rank = null)
        {
            return new SensitivityLabelData(id, name, resourceType, systemData, managedBy, schemaName, tableName, columnName, labelName, labelId, informationType, informationTypeId, isDisabled, rank);
        }

        /// <summary> Initializes a new instance of SensitivityLabelUpdate. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="op"></param>
        /// <param name="schema"> Schema name of the column to update. </param>
        /// <param name="table"> Table name of the column to update. </param>
        /// <param name="column"> Column name to update. </param>
        /// <param name="sensitivityLabel"> The sensitivity label information to apply on a column. </param>
        /// <returns> A new <see cref="Models.SensitivityLabelUpdate"/> instance for mocking. </returns>
        public static SensitivityLabelUpdate SensitivityLabelUpdate(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SensitivityLabelUpdateKind? op = null, string schema = null, string table = null, string column = null, SensitivityLabelData sensitivityLabel = null)
        {
            return new SensitivityLabelUpdate(id, name, resourceType, systemData, op, schema, table, column, sensitivityLabel);
        }

        /// <summary> Initializes a new instance of RecommendedSensitivityLabelUpdate. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="op"></param>
        /// <param name="schema"> Schema name of the column to update. </param>
        /// <param name="table"> Table name of the column to update. </param>
        /// <param name="column"> Column name to update. </param>
        /// <returns> A new <see cref="Models.RecommendedSensitivityLabelUpdate"/> instance for mocking. </returns>
        public static RecommendedSensitivityLabelUpdate RecommendedSensitivityLabelUpdate(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, RecommendedSensitivityLabelUpdateKind? op = null, string schema = null, string table = null, string column = null)
        {
            return new RecommendedSensitivityLabelUpdate(id, name, resourceType, systemData, op, schema, table, column);
        }

        /// <summary> Initializes a new instance of SqlPoolSchemaData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <returns> A new <see cref="Synapse.SqlPoolSchemaData"/> instance for mocking. </returns>
        public static SqlPoolSchemaData SqlPoolSchemaData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null)
        {
            return new SqlPoolSchemaData(id, name, resourceType, systemData);
        }

        /// <summary> Initializes a new instance of SqlPoolTableData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <returns> A new <see cref="Synapse.SqlPoolTableData"/> instance for mocking. </returns>
        public static SqlPoolTableData SqlPoolTableData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null)
        {
            return new SqlPoolTableData(id, name, resourceType, systemData);
        }

        /// <summary> Initializes a new instance of SqlPoolColumnData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="columnType"> The column data type. </param>
        /// <param name="isComputed"> Indicates whether column value is computed or not. </param>
        /// <returns> A new <see cref="Synapse.SqlPoolColumnData"/> instance for mocking. </returns>
        public static SqlPoolColumnData SqlPoolColumnData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ColumnDataType? columnType = null, bool? isComputed = null)
        {
            return new SqlPoolColumnData(id, name, resourceType, systemData, columnType, isComputed);
        }

        /// <summary> Initializes a new instance of SqlPoolConnectionPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kind"> Resource kind. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="securityEnabledAccess"> The state of security access. </param>
        /// <param name="proxyDnsName"> The fully qualified host name of the auditing proxy. </param>
        /// <param name="proxyPort"> The port number of the auditing proxy. </param>
        /// <param name="visibility"> The visibility of the auditing proxy. </param>
        /// <param name="useServerDefault"> Whether server default is enabled or disabled. </param>
        /// <param name="redirectionState"> The state of proxy redirection. </param>
        /// <param name="state"> The connection policy state. </param>
        /// <returns> A new <see cref="Synapse.SqlPoolConnectionPolicyData"/> instance for mocking. </returns>
        public static SqlPoolConnectionPolicyData SqlPoolConnectionPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string kind = null, AzureLocation? location = null, string securityEnabledAccess = null, string proxyDnsName = null, string proxyPort = null, string visibility = null, string useServerDefault = null, string redirectionState = null, string state = null)
        {
            return new SqlPoolConnectionPolicyData(id, name, resourceType, systemData, kind, location, securityEnabledAccess, proxyDnsName, proxyPort, visibility, useServerDefault, redirectionState, state);
        }

        /// <summary> Initializes a new instance of SqlPoolVulnerabilityAssessmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="storageContainerPath"> A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn&apos;t set. </param>
        /// <param name="storageContainerSasKey"> A shared access signature (SAS Key) that has write access to the blob container specified in &apos;storageContainerPath&apos; parameter. If &apos;storageAccountAccessKey&apos; isn&apos;t specified, StorageContainerSasKey is required. </param>
        /// <param name="storageAccountAccessKey"> Specifies the identifier key of the storage account for vulnerability assessment scan results. If &apos;StorageContainerSasKey&apos; isn&apos;t specified, storageAccountAccessKey is required. </param>
        /// <param name="recurringScans"> The recurring scans settings. </param>
        /// <returns> A new <see cref="Synapse.SqlPoolVulnerabilityAssessmentData"/> instance for mocking. </returns>
        public static SqlPoolVulnerabilityAssessmentData SqlPoolVulnerabilityAssessmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string storageContainerPath = null, string storageContainerSasKey = null, string storageAccountAccessKey = null, VulnerabilityAssessmentRecurringScansProperties recurringScans = null)
        {
            return new SqlPoolVulnerabilityAssessmentData(id, name, resourceType, systemData, storageContainerPath, storageContainerSasKey, storageAccountAccessKey, recurringScans);
        }

        /// <summary> Initializes a new instance of VulnerabilityAssessmentRecurringScansProperties. </summary>
        /// <param name="isEnabled"> Recurring scans state. </param>
        /// <param name="emailSubscriptionAdmins"> Specifies that the schedule scan notification will be is sent to the subscription administrators. </param>
        /// <param name="emails"> Specifies an array of e-mail addresses to which the scan notification is sent. </param>
        /// <returns> A new <see cref="Models.VulnerabilityAssessmentRecurringScansProperties"/> instance for mocking. </returns>
        public static VulnerabilityAssessmentRecurringScansProperties VulnerabilityAssessmentRecurringScansProperties(bool? isEnabled = null, bool? emailSubscriptionAdmins = null, IEnumerable<string> emails = null)
        {
            emails ??= new List<string>();

            return new VulnerabilityAssessmentRecurringScansProperties(isEnabled, emailSubscriptionAdmins, emails?.ToList());
        }

        /// <summary> Initializes a new instance of VulnerabilityAssessmentScanRecordData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="scanId"> The scan ID. </param>
        /// <param name="triggerType"> The scan trigger type. </param>
        /// <param name="state"> The scan status. </param>
        /// <param name="startOn"> The scan start time (UTC). </param>
        /// <param name="endOn"> The scan end time (UTC). </param>
        /// <param name="errors"> The scan errors. </param>
        /// <param name="storageContainerPath"> The scan results storage container path. </param>
        /// <param name="numberOfFailedSecurityChecks"> The number of failed security checks. </param>
        /// <returns> A new <see cref="Synapse.VulnerabilityAssessmentScanRecordData"/> instance for mocking. </returns>
        public static VulnerabilityAssessmentScanRecordData VulnerabilityAssessmentScanRecordData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string scanId = null, VulnerabilityAssessmentScanTriggerType? triggerType = null, VulnerabilityAssessmentScanState? state = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, IEnumerable<VulnerabilityAssessmentScanError> errors = null, string storageContainerPath = null, int? numberOfFailedSecurityChecks = null)
        {
            errors ??= new List<VulnerabilityAssessmentScanError>();

            return new VulnerabilityAssessmentScanRecordData(id, name, resourceType, systemData, scanId, triggerType, state, startOn, endOn, errors?.ToList(), storageContainerPath, numberOfFailedSecurityChecks);
        }

        /// <summary> Initializes a new instance of VulnerabilityAssessmentScanError. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <returns> A new <see cref="Models.VulnerabilityAssessmentScanError"/> instance for mocking. </returns>
        public static VulnerabilityAssessmentScanError VulnerabilityAssessmentScanError(string code = null, string message = null)
        {
            return new VulnerabilityAssessmentScanError(code, message);
        }

        /// <summary> Initializes a new instance of SqlPoolVulnerabilityAssessmentScansExport. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="exportedReportLocation"> Location of the exported report (e.g. https://myStorage.blob.core.windows.net/VaScans/scans/serverName/databaseName/scan_scanId.xlsx). </param>
        /// <returns> A new <see cref="Models.SqlPoolVulnerabilityAssessmentScansExport"/> instance for mocking. </returns>
        public static SqlPoolVulnerabilityAssessmentScansExport SqlPoolVulnerabilityAssessmentScansExport(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string exportedReportLocation = null)
        {
            return new SqlPoolVulnerabilityAssessmentScansExport(id, name, resourceType, systemData, exportedReportLocation);
        }

        /// <summary> Initializes a new instance of SqlPoolSecurityAlertPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="state"> Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific Sql pool. </param>
        /// <param name="disabledAlerts"> Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action. </param>
        /// <param name="emailAddresses"> Specifies an array of e-mail addresses to which the alert is sent. </param>
        /// <param name="emailAccountAdmins"> Specifies that the alert is sent to the account administrators. </param>
        /// <param name="storageEndpoint"> Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. </param>
        /// <param name="storageAccountAccessKey"> Specifies the identifier key of the Threat Detection audit storage account. </param>
        /// <param name="retentionDays"> Specifies the number of days to keep in the Threat Detection audit logs. </param>
        /// <param name="createdOn"> Specifies the UTC creation time of the policy. </param>
        /// <returns> A new <see cref="Synapse.SqlPoolSecurityAlertPolicyData"/> instance for mocking. </returns>
        public static SqlPoolSecurityAlertPolicyData SqlPoolSecurityAlertPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SecurityAlertPolicyState? state = null, IEnumerable<string> disabledAlerts = null, IEnumerable<string> emailAddresses = null, bool? emailAccountAdmins = null, string storageEndpoint = null, string storageAccountAccessKey = null, int? retentionDays = null, DateTimeOffset? createdOn = null)
        {
            disabledAlerts ??= new List<string>();
            emailAddresses ??= new List<string>();

            return new SqlPoolSecurityAlertPolicyData(id, name, resourceType, systemData, state, disabledAlerts?.ToList(), emailAddresses?.ToList(), emailAccountAdmins, storageEndpoint, storageAccountAccessKey, retentionDays, createdOn);
        }

        /// <summary> Initializes a new instance of SqlPoolVulnerabilityAssessmentRuleBaselineData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="baselineResults"> The rule baseline result. </param>
        /// <returns> A new <see cref="Synapse.SqlPoolVulnerabilityAssessmentRuleBaselineData"/> instance for mocking. </returns>
        public static SqlPoolVulnerabilityAssessmentRuleBaselineData SqlPoolVulnerabilityAssessmentRuleBaselineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<SqlPoolVulnerabilityAssessmentRuleBaselineItem> baselineResults = null)
        {
            baselineResults ??= new List<SqlPoolVulnerabilityAssessmentRuleBaselineItem>();

            return new SqlPoolVulnerabilityAssessmentRuleBaselineData(id, name, resourceType, systemData, baselineResults?.ToList());
        }

        /// <summary> Initializes a new instance of ExtendedSqlPoolBlobAuditingPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="predicateExpression"> Specifies condition of where clause when creating an audit. </param>
        /// <param name="state"> Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required. </param>
        /// <param name="storageEndpoint"> Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required. </param>
        /// <param name="storageAccountAccessKey">
        /// Specifies the identifier key of the auditing storage account. 
        /// If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
        /// Prerequisites for using managed identity authentication:
        /// 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
        /// 2. Grant SQL Server identity access to the storage account by adding &apos;Storage Blob Data Contributor&apos; RBAC role to the server identity.
        /// For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
        /// </param>
        /// <param name="retentionDays"> Specifies the number of days to keep in the audit logs in the storage account. </param>
        /// <param name="auditActionsAndGroups">
        /// Specifies the Actions-Groups and Actions to audit.
        /// 
        /// The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
        /// 
        /// BATCH_COMPLETED_GROUP,
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
        /// FAILED_DATABASE_AUTHENTICATION_GROUP.
        /// 
        /// This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
        /// 
        /// The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
        /// 
        /// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
        /// BACKUP_RESTORE_GROUP
        /// DATABASE_LOGOUT_GROUP
        /// DATABASE_OBJECT_CHANGE_GROUP
        /// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
        /// DATABASE_OPERATION_GROUP
        /// DATABASE_PERMISSION_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
        /// DATABASE_ROLE_MEMBER_CHANGE_GROUP
        /// FAILED_DATABASE_AUTHENTICATION_GROUP
        /// SCHEMA_OBJECT_ACCESS_GROUP
        /// SCHEMA_OBJECT_CHANGE_GROUP
        /// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        /// USER_CHANGE_PASSWORD_GROUP
        /// BATCH_STARTED_GROUP
        /// BATCH_COMPLETED_GROUP
        /// 
        /// These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
        /// 
        /// For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
        /// 
        /// For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
        /// SELECT
        /// UPDATE
        /// INSERT
        /// DELETE
        /// EXECUTE
        /// RECEIVE
        /// REFERENCES
        /// 
        /// The general form for defining an action to be audited is:
        /// {action} ON {object} BY {principal}
        /// 
        /// Note that &lt;object&gt; in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
        /// 
        /// For example:
        /// SELECT on dbo.myTable by public
        /// SELECT on DATABASE::myDatabase by public
        /// SELECT on SCHEMA::mySchema by public
        /// 
        /// For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
        /// </param>
        /// <param name="storageAccountSubscriptionId"> Specifies the blob storage subscription Id. </param>
        /// <param name="isStorageSecondaryKeyInUse"> Specifies whether storageAccountAccessKey value is the storage&apos;s secondary key. </param>
        /// <param name="isAzureMonitorTargetEnabled">
        /// Specifies whether audit events are sent to Azure Monitor. 
        /// In order to send the events to Azure Monitor, specify &apos;state&apos; as &apos;Enabled&apos; and &apos;isAzureMonitorTargetEnabled&apos; as true.
        /// 
        /// When using REST API to configure auditing, Diagnostic Settings with &apos;SQLSecurityAuditEvents&apos; diagnostic logs category on the database should be also created.
        /// Note that for server level audit you should use the &apos;master&apos; database as {databaseName}.
        /// 
        /// Diagnostic Settings URI format:
        /// PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// 
        /// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// 
        /// </param>
        /// <param name="queueDelayMs">
        /// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
        /// The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
        /// </param>
        /// <returns> A new <see cref="Synapse.ExtendedSqlPoolBlobAuditingPolicyData"/> instance for mocking. </returns>
        public static ExtendedSqlPoolBlobAuditingPolicyData ExtendedSqlPoolBlobAuditingPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string predicateExpression = null, BlobAuditingPolicyState? state = null, string storageEndpoint = null, string storageAccountAccessKey = null, int? retentionDays = null, IEnumerable<string> auditActionsAndGroups = null, Guid? storageAccountSubscriptionId = null, bool? isStorageSecondaryKeyInUse = null, bool? isAzureMonitorTargetEnabled = null, int? queueDelayMs = null)
        {
            auditActionsAndGroups ??= new List<string>();

            return new ExtendedSqlPoolBlobAuditingPolicyData(id, name, resourceType, systemData, predicateExpression, state, storageEndpoint, storageAccountAccessKey, retentionDays, auditActionsAndGroups?.ToList(), storageAccountSubscriptionId, isStorageSecondaryKeyInUse, isAzureMonitorTargetEnabled, queueDelayMs);
        }

        /// <summary> Initializes a new instance of DataMaskingPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The location of the data masking policy. </param>
        /// <param name="kind"> The kind of data masking policy. Metadata, used for Azure portal. </param>
        /// <param name="managedBy"> Fully qualified resource ID of the sql pool. </param>
        /// <param name="dataMaskingState"> The state of the data masking policy. </param>
        /// <param name="exemptPrincipals"> The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries. </param>
        /// <param name="applicationPrincipals"> The list of the application principals. This is a legacy parameter and is no longer used. </param>
        /// <param name="maskingLevel"> The masking level. This is a legacy parameter and is no longer used. </param>
        /// <returns> A new <see cref="Synapse.DataMaskingPolicyData"/> instance for mocking. </returns>
        public static DataMaskingPolicyData DataMaskingPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string kind = null, string managedBy = null, DataMaskingState? dataMaskingState = null, string exemptPrincipals = null, string applicationPrincipals = null, string maskingLevel = null)
        {
            return new DataMaskingPolicyData(id, name, resourceType, systemData, location, kind, managedBy, dataMaskingState, exemptPrincipals, applicationPrincipals, maskingLevel);
        }

        /// <summary> Initializes a new instance of DataMaskingRuleData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The location of the data masking rule. </param>
        /// <param name="kind"> The kind of Data Masking Rule. Metadata, used for Azure portal. </param>
        /// <param name="idPropertiesId"> The rule Id. </param>
        /// <param name="aliasName"> The alias name. This is a legacy parameter and is no longer used. </param>
        /// <param name="ruleState"> The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn&apos;t already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState. </param>
        /// <param name="schemaName"> The schema name on which the data masking rule is applied. </param>
        /// <param name="tableName"> The table name on which the data masking rule is applied. </param>
        /// <param name="columnName"> The column name on which the data masking rule is applied. </param>
        /// <param name="maskingFunction"> The masking function that is used for the data masking rule. </param>
        /// <param name="numberFrom"> The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored. </param>
        /// <param name="numberTo"> The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored. </param>
        /// <param name="prefixSize"> If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored. </param>
        /// <param name="suffixSize"> If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored. </param>
        /// <param name="replacementString"> If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored. </param>
        /// <returns> A new <see cref="Synapse.DataMaskingRuleData"/> instance for mocking. </returns>
        public static DataMaskingRuleData DataMaskingRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string kind = null, string idPropertiesId = null, string aliasName = null, DataMaskingRuleState? ruleState = null, string schemaName = null, string tableName = null, string columnName = null, DataMaskingFunction? maskingFunction = null, string numberFrom = null, string numberTo = null, string prefixSize = null, string suffixSize = null, string replacementString = null)
        {
            return new DataMaskingRuleData(id, name, resourceType, systemData, location, kind, idPropertiesId, aliasName, ruleState, schemaName, tableName, columnName, maskingFunction, numberFrom, numberTo, prefixSize, suffixSize, replacementString);
        }

        /// <summary> Initializes a new instance of WorkloadGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="minResourcePercent"> The workload group minimum percentage resource. </param>
        /// <param name="maxResourcePercent"> The workload group cap percentage resource. </param>
        /// <param name="minResourcePercentPerRequest"> The workload group request minimum grant percentage. </param>
        /// <param name="maxResourcePercentPerRequest"> The workload group request maximum grant percentage. </param>
        /// <param name="importance"> The workload group importance level. </param>
        /// <param name="queryExecutionTimeout"> The workload group query execution timeout. </param>
        /// <returns> A new <see cref="Synapse.WorkloadGroupData"/> instance for mocking. </returns>
        public static WorkloadGroupData WorkloadGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, int? minResourcePercent = null, int? maxResourcePercent = null, double? minResourcePercentPerRequest = null, double? maxResourcePercentPerRequest = null, string importance = null, int? queryExecutionTimeout = null)
        {
            return new WorkloadGroupData(id, name, resourceType, systemData, minResourcePercent, maxResourcePercent, minResourcePercentPerRequest, maxResourcePercentPerRequest, importance, queryExecutionTimeout);
        }

        /// <summary> Initializes a new instance of WorkloadClassifierData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="memberName"> The workload classifier member name. </param>
        /// <param name="label"> The workload classifier label. </param>
        /// <param name="context"> The workload classifier context. </param>
        /// <param name="startTime"> The workload classifier start time for classification. </param>
        /// <param name="endTime"> The workload classifier end time for classification. </param>
        /// <param name="importance"> The workload classifier importance. </param>
        /// <returns> A new <see cref="Synapse.WorkloadClassifierData"/> instance for mocking. </returns>
        public static WorkloadClassifierData WorkloadClassifierData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string memberName = null, string label = null, string context = null, string startTime = null, string endTime = null, string importance = null)
        {
            return new WorkloadClassifierData(id, name, resourceType, systemData, memberName, label, context, startTime, endTime, importance);
        }

        /// <summary> Initializes a new instance of ServerBlobAuditingPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="state"> Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required. </param>
        /// <param name="storageEndpoint"> Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required. </param>
        /// <param name="storageAccountAccessKey">
        /// Specifies the identifier key of the auditing storage account. 
        /// If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
        /// Prerequisites for using managed identity authentication:
        /// 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
        /// 2. Grant SQL Server identity access to the storage account by adding &apos;Storage Blob Data Contributor&apos; RBAC role to the server identity.
        /// For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
        /// </param>
        /// <param name="retentionDays"> Specifies the number of days to keep in the audit logs in the storage account. </param>
        /// <param name="auditActionsAndGroups">
        /// Specifies the Actions-Groups and Actions to audit.
        /// 
        /// The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
        /// 
        /// BATCH_COMPLETED_GROUP,
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
        /// FAILED_DATABASE_AUTHENTICATION_GROUP.
        /// 
        /// This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
        /// 
        /// The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
        /// 
        /// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
        /// BACKUP_RESTORE_GROUP
        /// DATABASE_LOGOUT_GROUP
        /// DATABASE_OBJECT_CHANGE_GROUP
        /// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
        /// DATABASE_OPERATION_GROUP
        /// DATABASE_PERMISSION_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
        /// DATABASE_ROLE_MEMBER_CHANGE_GROUP
        /// FAILED_DATABASE_AUTHENTICATION_GROUP
        /// SCHEMA_OBJECT_ACCESS_GROUP
        /// SCHEMA_OBJECT_CHANGE_GROUP
        /// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        /// USER_CHANGE_PASSWORD_GROUP
        /// BATCH_STARTED_GROUP
        /// BATCH_COMPLETED_GROUP
        /// 
        /// These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
        /// 
        /// For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
        /// 
        /// For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
        /// SELECT
        /// UPDATE
        /// INSERT
        /// DELETE
        /// EXECUTE
        /// RECEIVE
        /// REFERENCES
        /// 
        /// The general form for defining an action to be audited is:
        /// {action} ON {object} BY {principal}
        /// 
        /// Note that &lt;object&gt; in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
        /// 
        /// For example:
        /// SELECT on dbo.myTable by public
        /// SELECT on DATABASE::myDatabase by public
        /// SELECT on SCHEMA::mySchema by public
        /// 
        /// For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
        /// </param>
        /// <param name="storageAccountSubscriptionId"> Specifies the blob storage subscription Id. </param>
        /// <param name="isStorageSecondaryKeyInUse"> Specifies whether storageAccountAccessKey value is the storage&apos;s secondary key. </param>
        /// <param name="isAzureMonitorTargetEnabled">
        /// Specifies whether audit events are sent to Azure Monitor. 
        /// In order to send the events to Azure Monitor, specify &apos;state&apos; as &apos;Enabled&apos; and &apos;isAzureMonitorTargetEnabled&apos; as true.
        /// 
        /// When using REST API to configure auditing, Diagnostic Settings with &apos;SQLSecurityAuditEvents&apos; diagnostic logs category on the database should be also created.
        /// Note that for server level audit you should use the &apos;master&apos; database as {databaseName}.
        /// 
        /// Diagnostic Settings URI format:
        /// PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// 
        /// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// 
        /// </param>
        /// <param name="queueDelayMs">
        /// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
        /// The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
        /// </param>
        /// <param name="isDevopsAuditEnabled">
        /// Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure Monitor.
        /// In order to send the events to Azure Monitor, specify &apos;State&apos; as &apos;Enabled&apos;, &apos;IsAzureMonitorTargetEnabled&apos; as true and &apos;IsDevopsAuditEnabled&apos; as true
        /// 
        /// When using REST API to configure auditing, Diagnostic Settings with &apos;DevOpsOperationsAudit&apos; diagnostic logs category on the master database should also be created.
        /// 
        /// Diagnostic Settings URI format:
        /// PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// 
        /// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// 
        /// </param>
        /// <returns> A new <see cref="Synapse.ServerBlobAuditingPolicyData"/> instance for mocking. </returns>
        public static ServerBlobAuditingPolicyData ServerBlobAuditingPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BlobAuditingPolicyState? state = null, string storageEndpoint = null, string storageAccountAccessKey = null, int? retentionDays = null, IEnumerable<string> auditActionsAndGroups = null, Guid? storageAccountSubscriptionId = null, bool? isStorageSecondaryKeyInUse = null, bool? isAzureMonitorTargetEnabled = null, int? queueDelayMs = null, bool? isDevopsAuditEnabled = null)
        {
            auditActionsAndGroups ??= new List<string>();

            return new ServerBlobAuditingPolicyData(id, name, resourceType, systemData, state, storageEndpoint, storageAccountAccessKey, retentionDays, auditActionsAndGroups?.ToList(), storageAccountSubscriptionId, isStorageSecondaryKeyInUse, isAzureMonitorTargetEnabled, queueDelayMs, isDevopsAuditEnabled);
        }

        /// <summary> Initializes a new instance of ExtendedServerBlobAuditingPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="predicateExpression"> Specifies condition of where clause when creating an audit. </param>
        /// <param name="state"> Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required. </param>
        /// <param name="storageEndpoint"> Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required. </param>
        /// <param name="storageAccountAccessKey">
        /// Specifies the identifier key of the auditing storage account. 
        /// If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
        /// Prerequisites for using managed identity authentication:
        /// 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
        /// 2. Grant SQL Server identity access to the storage account by adding &apos;Storage Blob Data Contributor&apos; RBAC role to the server identity.
        /// For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
        /// </param>
        /// <param name="retentionDays"> Specifies the number of days to keep in the audit logs in the storage account. </param>
        /// <param name="auditActionsAndGroups">
        /// Specifies the Actions-Groups and Actions to audit.
        /// 
        /// The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
        /// 
        /// BATCH_COMPLETED_GROUP,
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
        /// FAILED_DATABASE_AUTHENTICATION_GROUP.
        /// 
        /// This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
        /// 
        /// The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
        /// 
        /// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
        /// BACKUP_RESTORE_GROUP
        /// DATABASE_LOGOUT_GROUP
        /// DATABASE_OBJECT_CHANGE_GROUP
        /// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
        /// DATABASE_OPERATION_GROUP
        /// DATABASE_PERMISSION_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
        /// DATABASE_ROLE_MEMBER_CHANGE_GROUP
        /// FAILED_DATABASE_AUTHENTICATION_GROUP
        /// SCHEMA_OBJECT_ACCESS_GROUP
        /// SCHEMA_OBJECT_CHANGE_GROUP
        /// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        /// USER_CHANGE_PASSWORD_GROUP
        /// BATCH_STARTED_GROUP
        /// BATCH_COMPLETED_GROUP
        /// 
        /// These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
        /// 
        /// For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
        /// 
        /// For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
        /// SELECT
        /// UPDATE
        /// INSERT
        /// DELETE
        /// EXECUTE
        /// RECEIVE
        /// REFERENCES
        /// 
        /// The general form for defining an action to be audited is:
        /// {action} ON {object} BY {principal}
        /// 
        /// Note that &lt;object&gt; in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
        /// 
        /// For example:
        /// SELECT on dbo.myTable by public
        /// SELECT on DATABASE::myDatabase by public
        /// SELECT on SCHEMA::mySchema by public
        /// 
        /// For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
        /// </param>
        /// <param name="storageAccountSubscriptionId"> Specifies the blob storage subscription Id. </param>
        /// <param name="isStorageSecondaryKeyInUse"> Specifies whether storageAccountAccessKey value is the storage&apos;s secondary key. </param>
        /// <param name="isAzureMonitorTargetEnabled">
        /// Specifies whether audit events are sent to Azure Monitor. 
        /// In order to send the events to Azure Monitor, specify &apos;state&apos; as &apos;Enabled&apos; and &apos;isAzureMonitorTargetEnabled&apos; as true.
        /// 
        /// When using REST API to configure auditing, Diagnostic Settings with &apos;SQLSecurityAuditEvents&apos; diagnostic logs category on the database should be also created.
        /// Note that for server level audit you should use the &apos;master&apos; database as {databaseName}.
        /// 
        /// Diagnostic Settings URI format:
        /// PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// 
        /// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// 
        /// </param>
        /// <param name="queueDelayMs">
        /// Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
        /// The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
        /// </param>
        /// <param name="isDevopsAuditEnabled">
        /// Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure Monitor.
        /// In order to send the events to Azure Monitor, specify &apos;State&apos; as &apos;Enabled&apos;, &apos;IsAzureMonitorTargetEnabled&apos; as true and &apos;IsDevopsAuditEnabled&apos; as true
        /// 
        /// When using REST API to configure auditing, Diagnostic Settings with &apos;DevOpsOperationsAudit&apos; diagnostic logs category on the master database should also be created.
        /// 
        /// Diagnostic Settings URI format:
        /// PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// 
        /// For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// 
        /// </param>
        /// <returns> A new <see cref="Synapse.ExtendedServerBlobAuditingPolicyData"/> instance for mocking. </returns>
        public static ExtendedServerBlobAuditingPolicyData ExtendedServerBlobAuditingPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string predicateExpression = null, BlobAuditingPolicyState? state = null, string storageEndpoint = null, string storageAccountAccessKey = null, int? retentionDays = null, IEnumerable<string> auditActionsAndGroups = null, Guid? storageAccountSubscriptionId = null, bool? isStorageSecondaryKeyInUse = null, bool? isAzureMonitorTargetEnabled = null, int? queueDelayMs = null, bool? isDevopsAuditEnabled = null)
        {
            auditActionsAndGroups ??= new List<string>();

            return new ExtendedServerBlobAuditingPolicyData(id, name, resourceType, systemData, predicateExpression, state, storageEndpoint, storageAccountAccessKey, retentionDays, auditActionsAndGroups?.ToList(), storageAccountSubscriptionId, isStorageSecondaryKeyInUse, isAzureMonitorTargetEnabled, queueDelayMs, isDevopsAuditEnabled);
        }

        /// <summary> Initializes a new instance of ServerSecurityAlertPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="state"> Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific server. </param>
        /// <param name="disabledAlerts"> Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action. </param>
        /// <param name="emailAddresses"> Specifies an array of e-mail addresses to which the alert is sent. </param>
        /// <param name="emailAccountAdmins"> Specifies that the alert is sent to the account administrators. </param>
        /// <param name="storageEndpoint"> Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. </param>
        /// <param name="storageAccountAccessKey"> Specifies the identifier key of the Threat Detection audit storage account. </param>
        /// <param name="retentionDays"> Specifies the number of days to keep in the Threat Detection audit logs. </param>
        /// <param name="createdOn"> Specifies the UTC creation time of the policy. </param>
        /// <returns> A new <see cref="Synapse.ServerSecurityAlertPolicyData"/> instance for mocking. </returns>
        public static ServerSecurityAlertPolicyData ServerSecurityAlertPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SecurityAlertPolicyState? state = null, IEnumerable<string> disabledAlerts = null, IEnumerable<string> emailAddresses = null, bool? emailAccountAdmins = null, string storageEndpoint = null, string storageAccountAccessKey = null, int? retentionDays = null, DateTimeOffset? createdOn = null)
        {
            disabledAlerts ??= new List<string>();
            emailAddresses ??= new List<string>();

            return new ServerSecurityAlertPolicyData(id, name, resourceType, systemData, state, disabledAlerts?.ToList(), emailAddresses?.ToList(), emailAccountAdmins, storageEndpoint, storageAccountAccessKey, retentionDays, createdOn);
        }

        /// <summary> Initializes a new instance of ServerVulnerabilityAssessmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="storageContainerPath"> A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/). </param>
        /// <param name="storageContainerSasKey"> A shared access signature (SAS Key) that has read and write access to the blob container specified in &apos;storageContainerPath&apos; parameter. If &apos;storageAccountAccessKey&apos; isn&apos;t specified, StorageContainerSasKey is required. </param>
        /// <param name="storageAccountAccessKey"> Specifies the identifier key of the storage account for vulnerability assessment scan results. If &apos;StorageContainerSasKey&apos; isn&apos;t specified, storageAccountAccessKey is required. </param>
        /// <param name="recurringScans"> The recurring scans settings. </param>
        /// <returns> A new <see cref="Synapse.ServerVulnerabilityAssessmentData"/> instance for mocking. </returns>
        public static ServerVulnerabilityAssessmentData ServerVulnerabilityAssessmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string storageContainerPath = null, string storageContainerSasKey = null, string storageAccountAccessKey = null, VulnerabilityAssessmentRecurringScansProperties recurringScans = null)
        {
            return new ServerVulnerabilityAssessmentData(id, name, resourceType, systemData, storageContainerPath, storageContainerSasKey, storageAccountAccessKey, recurringScans);
        }

        /// <summary> Initializes a new instance of EncryptionProtectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="kind"> Kind of encryption protector. This is metadata used for the Azure portal experience. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="subregion"> Subregion of the encryption protector. </param>
        /// <param name="serverKeyName"> The name of the server key. </param>
        /// <param name="serverKeyType"> The encryption protector type like &apos;ServiceManaged&apos;, &apos;AzureKeyVault&apos;. </param>
        /// <param name="uri"> The URI of the server key. </param>
        /// <param name="thumbprint"> Thumbprint of the server key. </param>
        /// <returns> A new <see cref="Synapse.EncryptionProtectorData"/> instance for mocking. </returns>
        public static EncryptionProtectorData EncryptionProtectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string kind = null, AzureLocation? location = null, string subregion = null, string serverKeyName = null, ServerKeyType? serverKeyType = null, Uri uri = null, string thumbprint = null)
        {
            return new EncryptionProtectorData(id, name, resourceType, systemData, kind, location, subregion, serverKeyName, serverKeyType, uri, thumbprint);
        }

        /// <summary> Initializes a new instance of ServerUsage. </summary>
        /// <param name="name"> Name of the server usage metric. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <param name="displayName"> The metric display name. </param>
        /// <param name="currentValue"> The current value of the metric. </param>
        /// <param name="limit"> The current limit of the metric. </param>
        /// <param name="unit"> The units of the metric. </param>
        /// <param name="nextResetOn"> The next reset time for the metric (ISO8601 format). </param>
        /// <returns> A new <see cref="Models.ServerUsage"/> instance for mocking. </returns>
        public static ServerUsage ServerUsage(string name = null, string resourceName = null, string displayName = null, double? currentValue = null, double? limit = null, string unit = null, DateTimeOffset? nextResetOn = null)
        {
            return new ServerUsage(name, resourceName, displayName, currentValue, limit, unit, nextResetOn);
        }

        /// <summary> Initializes a new instance of RecoverableSqlPoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="edition"> The edition of the database. </param>
        /// <param name="serviceLevelObjective"> The service level objective name of the database. </param>
        /// <param name="elasticPoolName"> The elastic pool name of the database. </param>
        /// <param name="lastAvailableBackupOn"> The last available backup date of the database (ISO8601 format). </param>
        /// <returns> A new <see cref="Synapse.RecoverableSqlPoolData"/> instance for mocking. </returns>
        public static RecoverableSqlPoolData RecoverableSqlPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string edition = null, string serviceLevelObjective = null, string elasticPoolName = null, DateTimeOffset? lastAvailableBackupOn = null)
        {
            return new RecoverableSqlPoolData(id, name, resourceType, systemData, edition, serviceLevelObjective, elasticPoolName, lastAvailableBackupOn);
        }

        /// <summary> Initializes a new instance of DedicatedSQLminimalTlsSettingData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="minimalTlsVersion"> The minimal tls version of the sql server. </param>
        /// <returns> A new <see cref="Synapse.DedicatedSQLminimalTlsSettingData"/> instance for mocking. </returns>
        public static DedicatedSQLminimalTlsSettingData DedicatedSQLminimalTlsSettingData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string minimalTlsVersion = null)
        {
            return new DedicatedSQLminimalTlsSettingData(id, name, resourceType, systemData, location, minimalTlsVersion);
        }

        /// <summary> Initializes a new instance of WorkspaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity of the workspace. Current supported identity types: None, SystemAssigned, SystemAssigned,UserAssigned. </param>
        /// <param name="defaultDataLakeStorage"> Workspace default data lake storage account details. </param>
        /// <param name="sqlAdministratorLoginPassword"> SQL administrator login password. </param>
        /// <param name="managedResourceGroupName"> Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and &apos;-&apos;, &apos;_&apos;, &apos;(&apos;, &apos;)&apos; and&apos;.&apos;. Note that the name cannot end with &apos;.&apos;. </param>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="sqlAdministratorLogin"> Login for workspace SQL active directory administrator. </param>
        /// <param name="virtualNetworkComputeSubnetId"> Virtual Network profile. </param>
        /// <param name="connectivityEndpoints"> Connectivity endpoints. </param>
        /// <param name="managedVirtualNetwork"> Setting this to &apos;default&apos; will ensure that all compute for this workspace is in a virtual network managed on behalf of the user. </param>
        /// <param name="privateEndpointConnections"> Private endpoint connections to the workspace. </param>
        /// <param name="encryption"> The encryption details of the workspace. </param>
        /// <param name="workspaceUID"> The workspace unique identifier. </param>
        /// <param name="extraProperties"> Workspace level configs and feature flags. </param>
        /// <param name="managedVirtualNetworkSettings"> Managed Virtual Network Settings. </param>
        /// <param name="workspaceRepositoryConfiguration"> Git integration settings. </param>
        /// <param name="purviewResourceId"> Purview Configuration. </param>
        /// <param name="adlaResourceId"> The ADLA resource ID. </param>
        /// <param name="publicNetworkAccess"> Enable or Disable public network access to workspace. </param>
        /// <param name="initialWorkspaceAdminObjectId"> Initial workspace AAD admin properties for a CSP subscription. </param>
        /// <param name="settings"> Workspace settings. </param>
        /// <param name="azureADOnlyAuthentication"> Enable or Disable AzureADOnlyAuthentication on All Workspace subresource. </param>
        /// <param name="trustedServiceBypassEnabled"> Is trustedServiceBypassEnabled for the workspace. </param>
        /// <returns> A new <see cref="Synapse.WorkspaceData"/> instance for mocking. </returns>
        public static WorkspaceData WorkspaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, DataLakeStorageAccountDetails defaultDataLakeStorage = null, string sqlAdministratorLoginPassword = null, string managedResourceGroupName = null, string provisioningState = null, string sqlAdministratorLogin = null, string virtualNetworkComputeSubnetId = null, IDictionary<string, string> connectivityEndpoints = null, string managedVirtualNetwork = null, IEnumerable<SynapsePrivateEndpointConnectionData> privateEndpointConnections = null, EncryptionDetails encryption = null, Guid? workspaceUID = null, IReadOnlyDictionary<string, BinaryData> extraProperties = null, ManagedVirtualNetworkSettings managedVirtualNetworkSettings = null, WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration = null, string purviewResourceId = null, string adlaResourceId = null, WorkspacePublicNetworkAccess? publicNetworkAccess = null, string initialWorkspaceAdminObjectId = null, IReadOnlyDictionary<string, BinaryData> settings = null, bool? azureADOnlyAuthentication = null, bool? trustedServiceBypassEnabled = null)
        {
            tags ??= new Dictionary<string, string>();
            connectivityEndpoints ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<SynapsePrivateEndpointConnectionData>();
            extraProperties ??= new Dictionary<string, BinaryData>();
            settings ??= new Dictionary<string, BinaryData>();

            return new WorkspaceData(id, name, resourceType, systemData, tags, location, identity, defaultDataLakeStorage, sqlAdministratorLoginPassword, managedResourceGroupName, provisioningState, sqlAdministratorLogin, new VirtualNetworkProfile(virtualNetworkComputeSubnetId), connectivityEndpoints, managedVirtualNetwork, privateEndpointConnections?.ToList(), encryption, workspaceUID, extraProperties, managedVirtualNetworkSettings, workspaceRepositoryConfiguration, new PurviewConfiguration(purviewResourceId), adlaResourceId, publicNetworkAccess, new CspWorkspaceAdminProperties(initialWorkspaceAdminObjectId), settings, azureADOnlyAuthentication, trustedServiceBypassEnabled);
        }

        /// <summary> Initializes a new instance of DataLakeStorageAccountDetails. </summary>
        /// <param name="accountUri"> Account URL. </param>
        /// <param name="filesystem"> Filesystem name. </param>
        /// <param name="resourceId"> ARM resource Id of this storage account. </param>
        /// <param name="createManagedPrivateEndpoint"> Create managed private endpoint to this storage account or not. </param>
        /// <returns> A new <see cref="Models.DataLakeStorageAccountDetails"/> instance for mocking. </returns>
        public static DataLakeStorageAccountDetails DataLakeStorageAccountDetails(Uri accountUri = null, string filesystem = null, string resourceId = null, bool? createManagedPrivateEndpoint = null)
        {
            return new DataLakeStorageAccountDetails(accountUri, filesystem, resourceId, createManagedPrivateEndpoint);
        }

        /// <summary> Initializes a new instance of EncryptionDetails. </summary>
        /// <param name="doubleEncryptionEnabled"> Double Encryption enabled. </param>
        /// <param name="cmk"> Customer Managed Key Details. </param>
        /// <returns> A new <see cref="Models.EncryptionDetails"/> instance for mocking. </returns>
        public static EncryptionDetails EncryptionDetails(bool? doubleEncryptionEnabled = null, CustomerManagedKeyDetails cmk = null)
        {
            return new EncryptionDetails(doubleEncryptionEnabled, cmk);
        }

        /// <summary> Initializes a new instance of CustomerManagedKeyDetails. </summary>
        /// <param name="status"> The customer managed key status on the workspace. </param>
        /// <param name="key"> The key object of the workspace. </param>
        /// <param name="kekIdentity"> Key encryption key. </param>
        /// <returns> A new <see cref="Models.CustomerManagedKeyDetails"/> instance for mocking. </returns>
        public static CustomerManagedKeyDetails CustomerManagedKeyDetails(string status = null, WorkspaceKeyDetails key = null, KekIdentityProperties kekIdentity = null)
        {
            return new CustomerManagedKeyDetails(status, key, kekIdentity);
        }

        /// <summary> Initializes a new instance of WorkspaceKeyDetails. </summary>
        /// <param name="name"> Workspace Key sub-resource name. </param>
        /// <param name="keyVaultUri"> Workspace Key sub-resource key vault url. </param>
        /// <returns> A new <see cref="Models.WorkspaceKeyDetails"/> instance for mocking. </returns>
        public static WorkspaceKeyDetails WorkspaceKeyDetails(string name = null, Uri keyVaultUri = null)
        {
            return new WorkspaceKeyDetails(name, keyVaultUri);
        }

        /// <summary> Initializes a new instance of KekIdentityProperties. </summary>
        /// <param name="userAssignedIdentity"> User assigned identity resource Id. </param>
        /// <param name="useSystemAssignedIdentity"> Boolean specifying whether to use system assigned identity or not. </param>
        /// <returns> A new <see cref="Models.KekIdentityProperties"/> instance for mocking. </returns>
        public static KekIdentityProperties KekIdentityProperties(string userAssignedIdentity = null, BinaryData useSystemAssignedIdentity = null)
        {
            return new KekIdentityProperties(userAssignedIdentity, useSystemAssignedIdentity);
        }

        /// <summary> Initializes a new instance of ManagedVirtualNetworkSettings. </summary>
        /// <param name="preventDataExfiltration"> Prevent Data Exfiltration. </param>
        /// <param name="linkedAccessCheckOnTargetResource"> Linked Access Check On Target Resource. </param>
        /// <param name="allowedAadTenantIdsForLinking"> Allowed Aad Tenant Ids For Linking. </param>
        /// <returns> A new <see cref="Models.ManagedVirtualNetworkSettings"/> instance for mocking. </returns>
        public static ManagedVirtualNetworkSettings ManagedVirtualNetworkSettings(bool? preventDataExfiltration = null, bool? linkedAccessCheckOnTargetResource = null, IEnumerable<string> allowedAadTenantIdsForLinking = null)
        {
            allowedAadTenantIdsForLinking ??= new List<string>();

            return new ManagedVirtualNetworkSettings(preventDataExfiltration, linkedAccessCheckOnTargetResource, allowedAadTenantIdsForLinking?.ToList());
        }

        /// <summary> Initializes a new instance of WorkspaceRepositoryConfiguration. </summary>
        /// <param name="workspaceRepositoryConfigurationType"> Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration. </param>
        /// <param name="hostName"> GitHub Enterprise host name. For example: https://github.mydomain.com. </param>
        /// <param name="accountName"> Account name. </param>
        /// <param name="projectName"> VSTS project name. </param>
        /// <param name="repositoryName"> Repository name. </param>
        /// <param name="collaborationBranch"> Collaboration branch. </param>
        /// <param name="rootFolder"> Root folder to use in the repository. </param>
        /// <param name="lastCommitId"> The last commit ID. </param>
        /// <param name="tenantId"> The VSTS tenant ID. </param>
        /// <returns> A new <see cref="Models.WorkspaceRepositoryConfiguration"/> instance for mocking. </returns>
        public static WorkspaceRepositoryConfiguration WorkspaceRepositoryConfiguration(string workspaceRepositoryConfigurationType = null, string hostName = null, string accountName = null, string projectName = null, string repositoryName = null, string collaborationBranch = null, string rootFolder = null, string lastCommitId = null, Guid? tenantId = null)
        {
            return new WorkspaceRepositoryConfiguration(workspaceRepositoryConfigurationType, hostName, accountName, projectName, repositoryName, collaborationBranch, rootFolder, lastCommitId, tenantId);
        }

        /// <summary> Initializes a new instance of WorkspaceAadAdminInfoData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tenantId"> Tenant ID of the workspace active directory administrator. </param>
        /// <param name="login"> Login of the workspace active directory administrator. </param>
        /// <param name="administratorType"> Workspace active directory administrator type. </param>
        /// <param name="sid"> Object ID of the workspace active directory administrator. </param>
        /// <returns> A new <see cref="Synapse.WorkspaceAadAdminInfoData"/> instance for mocking. </returns>
        public static WorkspaceAadAdminInfoData WorkspaceAadAdminInfoData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Guid? tenantId = null, string login = null, string administratorType = null, string sid = null)
        {
            return new WorkspaceAadAdminInfoData(id, name, resourceType, systemData, tenantId, login, administratorType, sid);
        }

        /// <summary> Initializes a new instance of ManagedIdentitySqlControlSettingsModelData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="grantSqlControlToManagedIdentity"> Grant sql control to managed identity. </param>
        /// <returns> A new <see cref="Synapse.ManagedIdentitySqlControlSettingsModelData"/> instance for mocking. </returns>
        public static ManagedIdentitySqlControlSettingsModelData ManagedIdentitySqlControlSettingsModelData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity grantSqlControlToManagedIdentity = null)
        {
            return new ManagedIdentitySqlControlSettingsModelData(id, name, resourceType, systemData, grantSqlControlToManagedIdentity);
        }

        /// <summary> Initializes a new instance of ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity. </summary>
        /// <param name="desiredState"> Desired state. </param>
        /// <param name="actualState"> Actual state. </param>
        /// <returns> A new <see cref="Models.ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity"/> instance for mocking. </returns>
        public static ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity(DesiredState? desiredState = null, ActualState? actualState = null)
        {
            return new ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity(desiredState, actualState);
        }

        /// <summary> Initializes a new instance of RestorableDroppedSqlPoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="databaseName"> The name of the database. </param>
        /// <param name="edition"> The edition of the database. </param>
        /// <param name="maxSizeBytes"> The max size in bytes of the database. </param>
        /// <param name="serviceLevelObjective"> The service level objective name of the database. </param>
        /// <param name="elasticPoolName"> The elastic pool name of the database. </param>
        /// <param name="createdOn"> The creation date of the database (ISO8601 format). </param>
        /// <param name="deletedOn"> The deletion date of the database (ISO8601 format). </param>
        /// <param name="earliestRestoreOn"> The earliest restore date of the database (ISO8601 format). </param>
        /// <returns> A new <see cref="Synapse.RestorableDroppedSqlPoolData"/> instance for mocking. </returns>
        public static RestorableDroppedSqlPoolData RestorableDroppedSqlPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string databaseName = null, string edition = null, string maxSizeBytes = null, string serviceLevelObjective = null, string elasticPoolName = null, DateTimeOffset? createdOn = null, DateTimeOffset? deletedOn = null, DateTimeOffset? earliestRestoreOn = null)
        {
            return new RestorableDroppedSqlPoolData(id, name, resourceType, systemData, location, databaseName, edition, maxSizeBytes, serviceLevelObjective, elasticPoolName, createdOn, deletedOn, earliestRestoreOn);
        }

        /// <summary> Initializes a new instance of BigDataPoolResourceInfoData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The state of the Big Data pool. </param>
        /// <param name="autoScale"> Auto-scaling properties. </param>
        /// <param name="createdOn"> The time when the Big Data pool was created. </param>
        /// <param name="autoPause"> Auto-pausing properties. </param>
        /// <param name="isComputeIsolationEnabled"> Whether compute isolation is required or not. </param>
        /// <param name="isAutotuneEnabled"> Whether autotune is required or not. </param>
        /// <param name="sessionLevelPackagesEnabled"> Whether session level packages enabled. </param>
        /// <param name="cacheSize"> The cache size. </param>
        /// <param name="dynamicExecutorAllocation"> Dynamic Executor Allocation. </param>
        /// <param name="sparkEventsFolder"> The Spark events folder. </param>
        /// <param name="nodeCount"> The number of nodes in the Big Data pool. </param>
        /// <param name="libraryRequirements"> Library version requirements. </param>
        /// <param name="customLibraries"> List of custom libraries/packages associated with the spark pool. </param>
        /// <param name="sparkConfigProperties"> Spark configuration file to specify additional properties. </param>
        /// <param name="sparkVersion"> The Apache Spark version. </param>
        /// <param name="defaultSparkLogFolder"> The default folder where Spark logs will be written. </param>
        /// <param name="nodeSize"> The level of compute power that each node in the Big Data pool has. </param>
        /// <param name="nodeSizeFamily"> The kind of nodes that the Big Data pool provides. </param>
        /// <param name="lastSucceededTimestamp"> The time when the Big Data pool was updated successfully. </param>
        /// <returns> A new <see cref="Synapse.BigDataPoolResourceInfoData"/> instance for mocking. </returns>
        public static BigDataPoolResourceInfoData BigDataPoolResourceInfoData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string provisioningState = null, AutoScaleProperties autoScale = null, DateTimeOffset? createdOn = null, AutoPauseProperties autoPause = null, bool? isComputeIsolationEnabled = null, bool? isAutotuneEnabled = null, bool? sessionLevelPackagesEnabled = null, int? cacheSize = null, DynamicExecutorAllocation dynamicExecutorAllocation = null, string sparkEventsFolder = null, int? nodeCount = null, LibraryRequirements libraryRequirements = null, IEnumerable<LibraryInfo> customLibraries = null, SparkConfigProperties sparkConfigProperties = null, string sparkVersion = null, string defaultSparkLogFolder = null, NodeSize? nodeSize = null, NodeSizeFamily? nodeSizeFamily = null, DateTimeOffset? lastSucceededTimestamp = null)
        {
            tags ??= new Dictionary<string, string>();
            customLibraries ??= new List<LibraryInfo>();

            return new BigDataPoolResourceInfoData(id, name, resourceType, systemData, tags, location, provisioningState, autoScale, createdOn, autoPause, isComputeIsolationEnabled, isAutotuneEnabled, sessionLevelPackagesEnabled, cacheSize, dynamicExecutorAllocation, sparkEventsFolder, nodeCount, libraryRequirements, customLibraries?.ToList(), sparkConfigProperties, sparkVersion, defaultSparkLogFolder, nodeSize, nodeSizeFamily, lastSucceededTimestamp);
        }

        /// <summary> Initializes a new instance of AutoScaleProperties. </summary>
        /// <param name="minNodeCount"> The minimum number of nodes the Big Data pool can support. </param>
        /// <param name="enabled"> Whether automatic scaling is enabled for the Big Data pool. </param>
        /// <param name="maxNodeCount"> The maximum number of nodes the Big Data pool can support. </param>
        /// <returns> A new <see cref="Models.AutoScaleProperties"/> instance for mocking. </returns>
        public static AutoScaleProperties AutoScaleProperties(int? minNodeCount = null, bool? enabled = null, int? maxNodeCount = null)
        {
            return new AutoScaleProperties(minNodeCount, enabled, maxNodeCount);
        }

        /// <summary> Initializes a new instance of AutoPauseProperties. </summary>
        /// <param name="delayInMinutes"> Number of minutes of idle time before the Big Data pool is automatically paused. </param>
        /// <param name="enabled"> Whether auto-pausing is enabled for the Big Data pool. </param>
        /// <returns> A new <see cref="Models.AutoPauseProperties"/> instance for mocking. </returns>
        public static AutoPauseProperties AutoPauseProperties(int? delayInMinutes = null, bool? enabled = null)
        {
            return new AutoPauseProperties(delayInMinutes, enabled);
        }

        /// <summary> Initializes a new instance of DynamicExecutorAllocation. </summary>
        /// <param name="enabled"> Indicates whether Dynamic Executor Allocation is enabled or not. </param>
        /// <param name="minExecutors"> The minimum number of executors alloted. </param>
        /// <param name="maxExecutors"> The maximum number of executors alloted. </param>
        /// <returns> A new <see cref="Models.DynamicExecutorAllocation"/> instance for mocking. </returns>
        public static DynamicExecutorAllocation DynamicExecutorAllocation(bool? enabled = null, int? minExecutors = null, int? maxExecutors = null)
        {
            return new DynamicExecutorAllocation(enabled, minExecutors, maxExecutors);
        }

        /// <summary> Initializes a new instance of LibraryRequirements. </summary>
        /// <param name="time"> The last update time of the library requirements file. </param>
        /// <param name="content"> The library requirements. </param>
        /// <param name="filename"> The filename of the library requirements file. </param>
        /// <returns> A new <see cref="Models.LibraryRequirements"/> instance for mocking. </returns>
        public static LibraryRequirements LibraryRequirements(DateTimeOffset? time = null, string content = null, string filename = null)
        {
            return new LibraryRequirements(time, content, filename);
        }

        /// <summary> Initializes a new instance of LibraryInfo. </summary>
        /// <param name="name"> Name of the library. </param>
        /// <param name="path"> Storage blob path of library. </param>
        /// <param name="containerName"> Storage blob container name. </param>
        /// <param name="uploadedTimestamp"> The last update time of the library. </param>
        /// <param name="libraryInfoType"> Type of the library. </param>
        /// <param name="provisioningStatus"> Provisioning status of the library/package. </param>
        /// <param name="creatorId"> Creator Id of the library/package. </param>
        /// <returns> A new <see cref="Models.LibraryInfo"/> instance for mocking. </returns>
        public static LibraryInfo LibraryInfo(string name = null, string path = null, string containerName = null, DateTimeOffset? uploadedTimestamp = null, string libraryInfoType = null, string provisioningStatus = null, string creatorId = null)
        {
            return new LibraryInfo(name, path, containerName, uploadedTimestamp, libraryInfoType, provisioningStatus, creatorId);
        }

        /// <summary> Initializes a new instance of SparkConfigProperties. </summary>
        /// <param name="time"> The last update time of the spark config properties file. </param>
        /// <param name="content"> The spark config properties. </param>
        /// <param name="filename"> The filename of the spark config properties file. </param>
        /// <param name="configurationType"> The type of the spark config properties file. </param>
        /// <returns> A new <see cref="Models.SparkConfigProperties"/> instance for mocking. </returns>
        public static SparkConfigProperties SparkConfigProperties(DateTimeOffset? time = null, string content = null, string filename = null, ConfigurationType? configurationType = null)
        {
            return new SparkConfigProperties(time, content, filename, configurationType);
        }

        /// <summary> Initializes a new instance of LibraryResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="namePropertiesName"> Name of the library. </param>
        /// <param name="path"> Storage blob path of library. </param>
        /// <param name="containerName"> Storage blob container name. </param>
        /// <param name="uploadedTimestamp"> The last update time of the library. </param>
        /// <param name="typePropertiesType"> Type of the library. </param>
        /// <param name="provisioningStatus"> Provisioning status of the library/package. </param>
        /// <param name="creatorId"> Creator Id of the library/package. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="Synapse.LibraryResourceData"/> instance for mocking. </returns>
        public static LibraryResourceData LibraryResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string namePropertiesName = null, string path = null, string containerName = null, DateTimeOffset? uploadedTimestamp = null, string typePropertiesType = null, string provisioningStatus = null, string creatorId = null, ETag? etag = null)
        {
            return new LibraryResourceData(id, name, resourceType, systemData, namePropertiesName, path, containerName, uploadedTimestamp, typePropertiesType, provisioningStatus, creatorId, etag);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Integration runtime properties.
        /// Please note <see cref="IntegrationRuntime"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ManagedIntegrationRuntime"/> and <see cref="SelfHostedIntegrationRuntime"/>.
        /// </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="Synapse.IntegrationRuntimeResourceData"/> instance for mocking. </returns>
        public static IntegrationRuntimeResourceData IntegrationRuntimeResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IntegrationRuntime properties = null, ETag? etag = null)
        {
            return new IntegrationRuntimeResourceData(id, name, resourceType, systemData, properties, etag);
        }

        /// <summary> Initializes a new instance of IntegrationRuntime. </summary>
        /// <param name="runtimeType"> Type of integration runtime. </param>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntime"/> instance for mocking. </returns>
        public static IntegrationRuntime IntegrationRuntime(string runtimeType = null, string description = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownIntegrationRuntime(runtimeType, description, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeNodeIPAddress. </summary>
        /// <param name="ipAddress"> The IP address of self-hosted integration runtime node. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeNodeIPAddress"/> instance for mocking. </returns>
        public static IntegrationRuntimeNodeIPAddress IntegrationRuntimeNodeIPAddress(string ipAddress = null)
        {
            return new IntegrationRuntimeNodeIPAddress(ipAddress);
        }

        /// <summary> Initializes a new instance of SsisObjectMetadata. </summary>
        /// <param name="metadataType"> Type of metadata. </param>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <returns> A new <see cref="Models.SsisObjectMetadata"/> instance for mocking. </returns>
        public static SsisObjectMetadata SsisObjectMetadata(string metadataType = null, long? id = null, string name = null, string description = null)
        {
            return new UnknownSsisObjectMetadata(metadataType, id, name, description);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntimeNode. </summary>
        /// <param name="nodeName"> Name of the integration runtime node. </param>
        /// <param name="machineName"> Machine name of the integration runtime node. </param>
        /// <param name="hostServiceUri"> URI for the host machine of the integration runtime. </param>
        /// <param name="status"> Status of the integration runtime node. </param>
        /// <param name="capabilities"> The integration runtime capabilities dictionary. </param>
        /// <param name="versionStatus"> Status of the integration runtime node version. </param>
        /// <param name="version"> Version of the integration runtime node. </param>
        /// <param name="registerOn"> The time at which the integration runtime node was registered in ISO8601 format. </param>
        /// <param name="lastConnectOn"> The most recent time at which the integration runtime was connected in ISO8601 format. </param>
        /// <param name="expiryOn"> The time at which the integration runtime will expire in ISO8601 format. </param>
        /// <param name="lastStartOn"> The time the node last started up. </param>
        /// <param name="lastStopOn"> The integration runtime node last stop time. </param>
        /// <param name="lastUpdateResult"> The result of the last integration runtime node update. </param>
        /// <param name="lastStartUpdateOn"> The last time for the integration runtime node update start. </param>
        /// <param name="lastEndUpdateOn"> The last time for the integration runtime node update end. </param>
        /// <param name="isActiveDispatcher"> Indicates whether this node is the active dispatcher for integration runtime requests. </param>
        /// <param name="concurrentJobsLimit"> Maximum concurrent jobs on the integration runtime node. </param>
        /// <param name="maxConcurrentJobs"> The maximum concurrent jobs in this integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntimeNode"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntimeNode SelfHostedIntegrationRuntimeNode(string nodeName = null, string machineName = null, Uri hostServiceUri = null, SelfHostedIntegrationRuntimeNodeStatus? status = null, IReadOnlyDictionary<string, string> capabilities = null, string versionStatus = null, string version = null, DateTimeOffset? registerOn = null, DateTimeOffset? lastConnectOn = null, DateTimeOffset? expiryOn = null, DateTimeOffset? lastStartOn = null, DateTimeOffset? lastStopOn = null, IntegrationRuntimeUpdateResult? lastUpdateResult = null, DateTimeOffset? lastStartUpdateOn = null, DateTimeOffset? lastEndUpdateOn = null, bool? isActiveDispatcher = null, int? concurrentJobsLimit = null, int? maxConcurrentJobs = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            capabilities ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SelfHostedIntegrationRuntimeNode(nodeName, machineName, hostServiceUri, status, capabilities, versionStatus, version, registerOn, lastConnectOn, expiryOn, lastStartOn, lastStopOn, lastUpdateResult, lastStartUpdateOn, lastEndUpdateOn, isActiveDispatcher, concurrentJobsLimit, maxConcurrentJobs, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeConnectionInfo. </summary>
        /// <param name="serviceToken"> The token generated in service. Callers use this token to authenticate to integration runtime. </param>
        /// <param name="identityCertThumbprint"> The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation. </param>
        /// <param name="hostServiceUri"> The on-premises integration runtime host URL. </param>
        /// <param name="version"> The integration runtime version. </param>
        /// <param name="publicKey"> The public key for encrypting a credential when transferring the credential to the integration runtime. </param>
        /// <param name="isIdentityCertExprired"> Whether the identity certificate is expired. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeConnectionInfo"/> instance for mocking. </returns>
        public static IntegrationRuntimeConnectionInfo IntegrationRuntimeConnectionInfo(string serviceToken = null, string identityCertThumbprint = null, Uri hostServiceUri = null, string version = null, string publicKey = null, bool? isIdentityCertExprired = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeConnectionInfo(serviceToken, identityCertThumbprint, hostServiceUri, version, publicKey, isIdentityCertExprired, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeStatusResponse. </summary>
        /// <param name="name"> The integration runtime name. </param>
        /// <param name="properties">
        /// Integration runtime properties.
        /// Please note <see cref="IntegrationRuntimeStatus"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ManagedIntegrationRuntimeStatus"/> and <see cref="SelfHostedIntegrationRuntimeStatus"/>.
        /// </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeStatusResponse"/> instance for mocking. </returns>
        public static IntegrationRuntimeStatusResponse IntegrationRuntimeStatusResponse(string name = null, IntegrationRuntimeStatus properties = null)
        {
            return new IntegrationRuntimeStatusResponse(name, properties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeStatus. </summary>
        /// <param name="runtimeType"> Type of integration runtime. </param>
        /// <param name="dataFactoryName"> The workspace name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static IntegrationRuntimeStatus IntegrationRuntimeStatus(string runtimeType = null, string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownIntegrationRuntimeStatus(runtimeType, dataFactoryName, state, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeAuthKeys. </summary>
        /// <param name="authKey1"> The primary integration runtime authentication key. </param>
        /// <param name="authKey2"> The secondary integration runtime authentication key. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeAuthKeys"/> instance for mocking. </returns>
        public static IntegrationRuntimeAuthKeys IntegrationRuntimeAuthKeys(string authKey1 = null, string authKey2 = null)
        {
            return new IntegrationRuntimeAuthKeys(authKey1, authKey2);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeMonitoringData. </summary>
        /// <param name="name"> Integration runtime name. </param>
        /// <param name="nodes"> Integration runtime node monitoring data. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeMonitoringData"/> instance for mocking. </returns>
        public static IntegrationRuntimeMonitoringData IntegrationRuntimeMonitoringData(string name = null, IEnumerable<IntegrationRuntimeNodeMonitoringData> nodes = null)
        {
            nodes ??= new List<IntegrationRuntimeNodeMonitoringData>();

            return new IntegrationRuntimeMonitoringData(name, nodes?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeNodeMonitoringData. </summary>
        /// <param name="nodeName"> Name of the integration runtime node. </param>
        /// <param name="availableMemoryInMB"> Available memory (MB) on the integration runtime node. </param>
        /// <param name="cpuUtilization"> CPU percentage on the integration runtime node. </param>
        /// <param name="concurrentJobsLimit"> Maximum concurrent jobs on the integration runtime node. </param>
        /// <param name="concurrentJobsRunning"> The number of jobs currently running on the integration runtime node. </param>
        /// <param name="maxConcurrentJobs"> The maximum concurrent jobs in this integration runtime. </param>
        /// <param name="sentBytes"> Sent bytes on the integration runtime node. </param>
        /// <param name="receivedBytes"> Received bytes on the integration runtime node. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeNodeMonitoringData"/> instance for mocking. </returns>
        public static IntegrationRuntimeNodeMonitoringData IntegrationRuntimeNodeMonitoringData(string nodeName = null, int? availableMemoryInMB = null, int? cpuUtilization = null, int? concurrentJobsLimit = null, int? concurrentJobsRunning = null, int? maxConcurrentJobs = null, float? sentBytes = null, float? receivedBytes = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeNodeMonitoringData(nodeName, availableMemoryInMB, cpuUtilization, concurrentJobsLimit, concurrentJobsRunning, maxConcurrentJobs, sentBytes, receivedBytes, additionalProperties);
        }

        /// <summary> Initializes a new instance of SsisObjectMetadataStatusResponse. </summary>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="name"> The operation name. </param>
        /// <param name="properties"> The operation properties. </param>
        /// <param name="error"> The operation error message. </param>
        /// <returns> A new <see cref="Models.SsisObjectMetadataStatusResponse"/> instance for mocking. </returns>
        public static SsisObjectMetadataStatusResponse SsisObjectMetadataStatusResponse(string status = null, string name = null, string properties = null, string error = null)
        {
            return new SsisObjectMetadataStatusResponse(status, name, properties, error);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint. </summary>
        /// <param name="category"> The category of outbound network dependency. </param>
        /// <param name="endpoints"> The endpoints for outbound network dependency. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint(string category = null, IEnumerable<IntegrationRuntimeOutboundNetworkDependenciesEndpoint> endpoints = null)
        {
            endpoints ??= new List<IntegrationRuntimeOutboundNetworkDependenciesEndpoint>();

            return new IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint(category, endpoints?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesEndpoint. </summary>
        /// <param name="domainName"> The domain name of endpoint. </param>
        /// <param name="endpointDetails"> The details of endpoint. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesEndpoint"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesEndpoint IntegrationRuntimeOutboundNetworkDependenciesEndpoint(string domainName = null, IEnumerable<IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails> endpointDetails = null)
        {
            endpointDetails ??= new List<IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails>();

            return new IntegrationRuntimeOutboundNetworkDependenciesEndpoint(domainName, endpointDetails?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails. </summary>
        /// <param name="port"> The port of endpoint. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails"/> instance for mocking. </returns>
        public static IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails(int? port = null)
        {
            return new IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails(port);
        }

        /// <summary> Initializes a new instance of SparkConfigurationResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Description about the SparkConfiguration. </param>
        /// <param name="configs"> SparkConfiguration configs. </param>
        /// <param name="annotations"> Annotations for SparkConfiguration. </param>
        /// <param name="notes"> additional Notes. </param>
        /// <param name="createdBy"> The identity that created the resource. </param>
        /// <param name="created"> The timestamp of resource creation. </param>
        /// <param name="configMergeRule"> SparkConfiguration merge configs. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="Synapse.SparkConfigurationResourceData"/> instance for mocking. </returns>
        public static SparkConfigurationResourceData SparkConfigurationResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string description = null, IDictionary<string, string> configs = null, IEnumerable<string> annotations = null, string notes = null, string createdBy = null, DateTimeOffset? created = null, IDictionary<string, string> configMergeRule = null, ETag? etag = null)
        {
            configs ??= new Dictionary<string, string>();
            annotations ??= new List<string>();
            configMergeRule ??= new Dictionary<string, string>();

            return new SparkConfigurationResourceData(id, name, resourceType, systemData, description, configs, annotations?.ToList(), notes, createdBy, created, configMergeRule, etag);
        }

        /// <summary> Initializes a new instance of Operation. </summary>
        /// <param name="name"> This is of the format {provider}/{resource}/{operation}. </param>
        /// <param name="display"> The object that describes the operation. </param>
        /// <param name="origin"> The intended executor of the operation. </param>
        /// <param name="properties"> Properties of the operation. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, OperationDisplay display = null, string origin = null, BinaryData properties = null)
        {
            return new Operation(name, display, origin, properties);
        }

        /// <summary> Initializes a new instance of OperationDisplay. </summary>
        /// <param name="provider"> Friendly name of the resource provider. </param>
        /// <param name="operation"> For example: read, write, delete. </param>
        /// <param name="resource"> The resource type on which the operation is performed. </param>
        /// <param name="description"> The friendly name of the operation. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string operation = null, string resource = null, string description = null)
        {
            return new OperationDisplay(provider, operation, resource, description);
        }

        /// <summary> Initializes a new instance of SkuDescription. </summary>
        /// <param name="resourceType"> The resource type. </param>
        /// <param name="name"> The name of the SKU. </param>
        /// <param name="size"> The size of the SKU. </param>
        /// <param name="locations"> The set of locations that the SKU is available. </param>
        /// <param name="locationInfo"> Locations and zones. </param>
        /// <param name="restrictions"> The restrictions because of which SKU cannot be used. </param>
        /// <returns> A new <see cref="Models.SkuDescription"/> instance for mocking. </returns>
        public static SkuDescription SkuDescription(string resourceType = null, string name = null, string size = null, IEnumerable<string> locations = null, IEnumerable<SkuLocationInfoItem> locationInfo = null, IEnumerable<BinaryData> restrictions = null)
        {
            locations ??= new List<string>();
            locationInfo ??= new List<SkuLocationInfoItem>();
            restrictions ??= new List<BinaryData>();

            return new SkuDescription(resourceType, name, size, locations?.ToList(), locationInfo?.ToList(), restrictions?.ToList());
        }

        /// <summary> Initializes a new instance of SkuLocationInfoItem. </summary>
        /// <param name="location"> The available location of the SKU. </param>
        /// <param name="zones"> The available zone of the SKU. </param>
        /// <returns> A new <see cref="Models.SkuLocationInfoItem"/> instance for mocking. </returns>
        public static SkuLocationInfoItem SkuLocationInfoItem(AzureLocation location = default, IEnumerable<string> zones = null)
        {
            zones ??= new List<string>();

            return new SkuLocationInfoItem(location, zones?.ToList());
        }

        /// <summary> Initializes a new instance of CheckNameResult. </summary>
        /// <param name="nameAvailable"> Specifies a Boolean value that indicates if the name is available. </param>
        /// <param name="name"> The name that was checked. </param>
        /// <param name="message"> Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated. </param>
        /// <param name="reason"> Message providing the reason why the given name is invalid. </param>
        /// <returns> A new <see cref="Models.CheckNameResult"/> instance for mocking. </returns>
        public static CheckNameResult CheckNameResult(bool? nameAvailable = null, string name = null, string message = null, Reason? reason = null)
        {
            return new CheckNameResult(nameAvailable, name, message, reason);
        }

        /// <summary> Initializes a new instance of KustoPoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> The SKU of the kusto pool. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="state"> The state of the resource. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="uri"> The Kusto Pool URI. </param>
        /// <param name="dataIngestionUri"> The Kusto Pool data ingestion URI. </param>
        /// <param name="stateReason"> The reason for the Kusto Pool&apos;s current state. </param>
        /// <param name="optimizedAutoscale"> Optimized auto scale definition. </param>
        /// <param name="enableStreamingIngest"> A boolean value that indicates if the streaming ingest is enabled. </param>
        /// <param name="enablePurge"> A boolean value that indicates if the purge operations are enabled. </param>
        /// <param name="languageExtensionsValue"> List of the Kusto Pool&apos;s language extensions. </param>
        /// <param name="workspaceUID"> The workspace unique identifier. </param>
        /// <returns> A new <see cref="Synapse.KustoPoolData"/> instance for mocking. </returns>
        public static KustoPoolData KustoPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, AzureSku sku = null, ETag? etag = null, State? state = null, ResourceProvisioningState? provisioningState = null, Uri uri = null, Uri dataIngestionUri = null, string stateReason = null, OptimizedAutoscale optimizedAutoscale = null, bool? enableStreamingIngest = null, bool? enablePurge = null, IEnumerable<LanguageExtension> languageExtensionsValue = null, string workspaceUID = null)
        {
            tags ??= new Dictionary<string, string>();
            languageExtensionsValue ??= new List<LanguageExtension>();

            return new KustoPoolData(id, name, resourceType, systemData, tags, location, sku, etag, state, provisioningState, uri, dataIngestionUri, stateReason, optimizedAutoscale, enableStreamingIngest, enablePurge, new LanguageExtensionsList(languageExtensionsValue?.ToList()), workspaceUID);
        }

        /// <summary> Initializes a new instance of AzureSku. </summary>
        /// <param name="name"> SKU name. </param>
        /// <param name="capacity"> The number of instances of the cluster. </param>
        /// <param name="size"> SKU size. </param>
        /// <returns> A new <see cref="Models.AzureSku"/> instance for mocking. </returns>
        public static AzureSku AzureSku(SynapseSkuName name = default, int? capacity = null, SkuSize size = default)
        {
            return new AzureSku(name, capacity, size);
        }

        /// <summary> Initializes a new instance of LanguageExtensionsList. </summary>
        /// <param name="value"> The list of language extensions. </param>
        /// <returns> A new <see cref="Models.LanguageExtensionsList"/> instance for mocking. </returns>
        public static LanguageExtensionsList LanguageExtensionsList(IEnumerable<LanguageExtension> value = null)
        {
            value ??= new List<LanguageExtension>();

            return new LanguageExtensionsList(value?.ToList());
        }

        /// <summary> Initializes a new instance of LanguageExtension. </summary>
        /// <param name="languageExtensionName"> The language extension name. </param>
        /// <returns> A new <see cref="Models.LanguageExtension"/> instance for mocking. </returns>
        public static LanguageExtension LanguageExtension(LanguageExtensionName? languageExtensionName = null)
        {
            return new LanguageExtension(languageExtensionName);
        }

        /// <summary> Initializes a new instance of KustoPoolPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="sku"> The SKU of the kusto pool. </param>
        /// <param name="state"> The state of the resource. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="uri"> The Kusto Pool URI. </param>
        /// <param name="dataIngestionUri"> The Kusto Pool data ingestion URI. </param>
        /// <param name="stateReason"> The reason for the Kusto Pool&apos;s current state. </param>
        /// <param name="optimizedAutoscale"> Optimized auto scale definition. </param>
        /// <param name="enableStreamingIngest"> A boolean value that indicates if the streaming ingest is enabled. </param>
        /// <param name="enablePurge"> A boolean value that indicates if the purge operations are enabled. </param>
        /// <param name="languageExtensionsValue"> List of the Kusto Pool&apos;s language extensions. </param>
        /// <param name="workspaceUID"> The workspace unique identifier. </param>
        /// <returns> A new <see cref="Models.KustoPoolPatch"/> instance for mocking. </returns>
        public static KustoPoolPatch KustoPoolPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureSku sku = null, State? state = null, ResourceProvisioningState? provisioningState = null, Uri uri = null, Uri dataIngestionUri = null, string stateReason = null, OptimizedAutoscale optimizedAutoscale = null, bool? enableStreamingIngest = null, bool? enablePurge = null, IEnumerable<LanguageExtension> languageExtensionsValue = null, string workspaceUID = null)
        {
            tags ??= new Dictionary<string, string>();
            languageExtensionsValue ??= new List<LanguageExtension>();

            return new KustoPoolPatch(id, name, resourceType, systemData, tags, sku, state, provisioningState, uri, dataIngestionUri, stateReason, optimizedAutoscale, enableStreamingIngest, enablePurge, new LanguageExtensionsList(languageExtensionsValue?.ToList()), workspaceUID);
        }

        /// <summary> Initializes a new instance of AzureResourceSku. </summary>
        /// <param name="resourceType"> Resource Namespace and Type. </param>
        /// <param name="sku"> The SKU details. </param>
        /// <param name="capacity"> The number of instances of the cluster. </param>
        /// <returns> A new <see cref="Models.AzureResourceSku"/> instance for mocking. </returns>
        public static AzureResourceSku AzureResourceSku(string resourceType = null, AzureSku sku = null, AzureCapacity capacity = null)
        {
            return new AzureResourceSku(resourceType, sku, capacity);
        }

        /// <summary> Initializes a new instance of AzureCapacity. </summary>
        /// <param name="scaleType"> Scale type. </param>
        /// <param name="minimum"> Minimum allowed capacity. </param>
        /// <param name="maximum"> Maximum allowed capacity. </param>
        /// <param name="default"> The default capacity that would be used. </param>
        /// <returns> A new <see cref="Models.AzureCapacity"/> instance for mocking. </returns>
        public static AzureCapacity AzureCapacity(AzureScaleType scaleType = default, int minimum = default, int maximum = default, int @default = default)
        {
            return new AzureCapacity(scaleType, minimum, maximum, @default);
        }

        /// <summary> Initializes a new instance of FollowerDatabaseDefinition. </summary>
        /// <param name="kustoPoolResourceId"> Resource id of the cluster that follows a database owned by this cluster. </param>
        /// <param name="attachedDatabaseConfigurationName"> Resource name of the attached database configuration in the follower cluster. </param>
        /// <param name="databaseName"> The database name owned by this cluster that was followed. * in case following all databases. </param>
        /// <returns> A new <see cref="Models.FollowerDatabaseDefinition"/> instance for mocking. </returns>
        public static FollowerDatabaseDefinition FollowerDatabaseDefinition(string kustoPoolResourceId = null, string attachedDatabaseConfigurationName = null, string databaseName = null)
        {
            return new FollowerDatabaseDefinition(kustoPoolResourceId, attachedDatabaseConfigurationName, databaseName);
        }

        /// <summary> Initializes a new instance of AttachedDatabaseConfigurationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="databaseName"> The name of the database which you would like to attach, use * if you want to follow all current and future databases. </param>
        /// <param name="kustoPoolResourceId"> The resource id of the kusto pool where the databases you would like to attach reside. </param>
        /// <param name="attachedDatabaseNames"> The list of databases from the clusterResourceId which are currently attached to the kusto pool. </param>
        /// <param name="defaultPrincipalsModificationKind"> The default principals modification kind. </param>
        /// <param name="tableLevelSharingProperties"> Table level sharing specifications. </param>
        /// <returns> A new <see cref="Synapse.AttachedDatabaseConfigurationData"/> instance for mocking. </returns>
        public static AttachedDatabaseConfigurationData AttachedDatabaseConfigurationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, ResourceProvisioningState? provisioningState = null, string databaseName = null, string kustoPoolResourceId = null, IEnumerable<string> attachedDatabaseNames = null, DefaultPrincipalsModificationKind? defaultPrincipalsModificationKind = null, TableLevelSharingProperties tableLevelSharingProperties = null)
        {
            attachedDatabaseNames ??= new List<string>();

            return new AttachedDatabaseConfigurationData(id, name, resourceType, systemData, location, provisioningState, databaseName, kustoPoolResourceId, attachedDatabaseNames?.ToList(), defaultPrincipalsModificationKind, tableLevelSharingProperties);
        }

        /// <summary> Initializes a new instance of TableLevelSharingProperties. </summary>
        /// <param name="tablesToInclude"> List of tables to include in the follower database. </param>
        /// <param name="tablesToExclude"> List of tables to exclude from the follower database. </param>
        /// <param name="externalTablesToInclude"> List of external tables to include in the follower database. </param>
        /// <param name="externalTablesToExclude"> List of external tables exclude from the follower database. </param>
        /// <param name="materializedViewsToInclude"> List of materialized views to include in the follower database. </param>
        /// <param name="materializedViewsToExclude"> List of materialized views exclude from the follower database. </param>
        /// <returns> A new <see cref="Models.TableLevelSharingProperties"/> instance for mocking. </returns>
        public static TableLevelSharingProperties TableLevelSharingProperties(IEnumerable<string> tablesToInclude = null, IEnumerable<string> tablesToExclude = null, IEnumerable<string> externalTablesToInclude = null, IEnumerable<string> externalTablesToExclude = null, IEnumerable<string> materializedViewsToInclude = null, IEnumerable<string> materializedViewsToExclude = null)
        {
            tablesToInclude ??= new List<string>();
            tablesToExclude ??= new List<string>();
            externalTablesToInclude ??= new List<string>();
            externalTablesToExclude ??= new List<string>();
            materializedViewsToInclude ??= new List<string>();
            materializedViewsToExclude ??= new List<string>();

            return new TableLevelSharingProperties(tablesToInclude?.ToList(), tablesToExclude?.ToList(), externalTablesToInclude?.ToList(), externalTablesToExclude?.ToList(), materializedViewsToInclude?.ToList(), materializedViewsToExclude?.ToList());
        }

        /// <summary> Initializes a new instance of DatabaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="kind"> Kind of the database. </param>
        /// <returns> A new <see cref="Synapse.DatabaseData"/> instance for mocking. </returns>
        public static DatabaseData DatabaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string kind = null)
        {
            return new Models.UnknownDatabase(id, name, resourceType, systemData, location, kind);
        }

        /// <summary> Initializes a new instance of DataConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="kind"> Kind of the endpoint for the data connection. </param>
        /// <returns> A new <see cref="Synapse.DataConnectionData"/> instance for mocking. </returns>
        public static DataConnectionData DataConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string kind = null)
        {
            return new Models.UnknownDataConnection(id, name, resourceType, systemData, location, kind);
        }

        /// <summary> Initializes a new instance of DataConnectionValidationListResult. </summary>
        /// <param name="value"> The list of Kusto data connection validation errors. </param>
        /// <returns> A new <see cref="Models.DataConnectionValidationListResult"/> instance for mocking. </returns>
        public static DataConnectionValidationListResult DataConnectionValidationListResult(IEnumerable<DataConnectionValidationResult> value = null)
        {
            value ??= new List<DataConnectionValidationResult>();

            return new DataConnectionValidationListResult(value?.ToList());
        }

        /// <summary> Initializes a new instance of DataConnectionValidationResult. </summary>
        /// <param name="errorMessage"> A message which indicates a problem in data connection validation. </param>
        /// <returns> A new <see cref="Models.DataConnectionValidationResult"/> instance for mocking. </returns>
        public static DataConnectionValidationResult DataConnectionValidationResult(string errorMessage = null)
        {
            return new DataConnectionValidationResult(errorMessage);
        }

        /// <summary> Initializes a new instance of ClusterPrincipalAssignmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="principalId"> The principal ID assigned to the cluster principal. It can be a user email, application ID, or security group name. </param>
        /// <param name="role"> Cluster principal role. </param>
        /// <param name="tenantId"> The tenant id of the principal. </param>
        /// <param name="principalType"> Principal type. </param>
        /// <param name="tenantName"> The tenant name of the principal. </param>
        /// <param name="principalName"> The principal name. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="aadObjectId"> The service principal object id in AAD (Azure active directory). </param>
        /// <returns> A new <see cref="Synapse.ClusterPrincipalAssignmentData"/> instance for mocking. </returns>
        public static ClusterPrincipalAssignmentData ClusterPrincipalAssignmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string principalId = null, ClusterPrincipalRole? role = null, Guid? tenantId = null, PrincipalType? principalType = null, string tenantName = null, string principalName = null, ResourceProvisioningState? provisioningState = null, string aadObjectId = null)
        {
            return new ClusterPrincipalAssignmentData(id, name, resourceType, systemData, principalId, role, tenantId, principalType, tenantName, principalName, provisioningState, aadObjectId);
        }

        /// <summary> Initializes a new instance of DatabasePrincipalAssignmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="principalId"> The principal ID assigned to the database principal. It can be a user email, application ID, or security group name. </param>
        /// <param name="role"> Database principal role. </param>
        /// <param name="tenantId"> The tenant id of the principal. </param>
        /// <param name="principalType"> Principal type. </param>
        /// <param name="tenantName"> The tenant name of the principal. </param>
        /// <param name="principalName"> The principal name. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="aadObjectId"> The service principal object id in AAD (Azure active directory). </param>
        /// <returns> A new <see cref="Synapse.DatabasePrincipalAssignmentData"/> instance for mocking. </returns>
        public static DatabasePrincipalAssignmentData DatabasePrincipalAssignmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string principalId = null, DatabasePrincipalRole? role = null, Guid? tenantId = null, PrincipalType? principalType = null, string tenantName = null, string principalName = null, ResourceProvisioningState? provisioningState = null, string aadObjectId = null)
        {
            return new DatabasePrincipalAssignmentData(id, name, resourceType, systemData, principalId, role, tenantId, principalType, tenantName, principalName, provisioningState, aadObjectId);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntime. </summary>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="state"> Integration runtime state, only valid for managed dedicated integration runtime. </param>
        /// <param name="referenceName"> The reference name of the managed virtual network. </param>
        /// <param name="typeManagedVirtualNetworkType"> The type of the managed virtual network. </param>
        /// <param name="id"> The id of the managed virtual network. </param>
        /// <param name="computeProperties"> The compute resource for managed integration runtime. </param>
        /// <param name="ssisProperties"> SSIS properties for managed integration runtime. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntime"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntime ManagedIntegrationRuntime(string description = null, IDictionary<string, BinaryData> additionalProperties = null, IntegrationRuntimeState? state = null, string referenceName = null, string typeManagedVirtualNetworkType = null, string id = null, IntegrationRuntimeComputeProperties computeProperties = null, IntegrationRuntimeSsisProperties ssisProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntime("Managed", description, additionalProperties, state, referenceName, typeManagedVirtualNetworkType, id, computeProperties, ssisProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeComputeProperties. </summary>
        /// <param name="location"> The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities. </param>
        /// <param name="nodeSize"> The node size requirement to managed integration runtime. </param>
        /// <param name="numberOfNodes"> The required number of nodes for managed integration runtime. </param>
        /// <param name="maxParallelExecutionsPerNode"> Maximum parallel executions count per node for managed integration runtime. </param>
        /// <param name="dataFlowProperties"> Data flow properties for managed integration runtime. </param>
        /// <param name="vNetProperties"> VNet properties for managed integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeComputeProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeComputeProperties IntegrationRuntimeComputeProperties(AzureLocation? location = null, string nodeSize = null, int? numberOfNodes = null, int? maxParallelExecutionsPerNode = null, IntegrationRuntimeDataFlowProperties dataFlowProperties = null, IntegrationRuntimeVNetProperties vNetProperties = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeComputeProperties(location, nodeSize, numberOfNodes, maxParallelExecutionsPerNode, dataFlowProperties, vNetProperties, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeDataFlowProperties. </summary>
        /// <param name="computeType"> Compute type of the cluster which will execute data flow job. </param>
        /// <param name="coreCount"> Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. </param>
        /// <param name="timeToLive"> Time to live (in minutes) setting of the cluster which will execute data flow job. </param>
        /// <param name="cleanup"> Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeDataFlowProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeDataFlowProperties IntegrationRuntimeDataFlowProperties(DataFlowComputeType? computeType = null, int? coreCount = null, int? timeToLive = null, bool? cleanup = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeDataFlowProperties(computeType, coreCount, timeToLive, cleanup, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeVNetProperties. </summary>
        /// <param name="vNetId"> The ID of the VNet that this integration runtime will join. </param>
        /// <param name="subnet"> The name of the subnet this integration runtime will join. </param>
        /// <param name="publicIPs"> Resource IDs of the public IP addresses that this integration runtime will use. </param>
        /// <param name="subnetId"> The ID of subnet, to which this Azure-SSIS integration runtime will be joined. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeVNetProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeVNetProperties IntegrationRuntimeVNetProperties(string vNetId = null, string subnet = null, IEnumerable<string> publicIPs = null, string subnetId = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            publicIPs ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeVNetProperties(vNetId, subnet, publicIPs?.ToList(), subnetId, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeSsisProperties. </summary>
        /// <param name="catalogInfo"> Catalog information for managed dedicated integration runtime. </param>
        /// <param name="licenseType"> License type for bringing your own license scenario. </param>
        /// <param name="customSetupScriptProperties"> Custom setup script properties for a managed dedicated integration runtime. </param>
        /// <param name="dataProxyProperties"> Data proxy properties for a managed dedicated integration runtime. </param>
        /// <param name="edition"> The edition for the SSIS Integration Runtime. </param>
        /// <param name="expressCustomSetupProperties">
        /// Custom setup without script properties for a SSIS integration runtime.
        /// Please note <see cref="CustomSetupBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="CmdkeySetup"/>, <see cref="ComponentSetup"/> and <see cref="EnvironmentVariableSetup"/>.
        /// </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeSsisProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeSsisProperties IntegrationRuntimeSsisProperties(IntegrationRuntimeSsisCatalogInfo catalogInfo = null, IntegrationRuntimeLicenseType? licenseType = null, IntegrationRuntimeCustomSetupScriptProperties customSetupScriptProperties = null, IntegrationRuntimeDataProxyProperties dataProxyProperties = null, IntegrationRuntimeEdition? edition = null, IEnumerable<CustomSetupBase> expressCustomSetupProperties = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            expressCustomSetupProperties ??= new List<CustomSetupBase>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeSsisProperties(catalogInfo, licenseType, customSetupScriptProperties, dataProxyProperties, edition, expressCustomSetupProperties?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeSsisCatalogInfo. </summary>
        /// <param name="catalogServerEndpoint"> The catalog database server URL. </param>
        /// <param name="catalogAdminUserName"> The administrator user name of catalog database. </param>
        /// <param name="catalogAdminPassword"> The password of the administrator user account of the catalog database. </param>
        /// <param name="catalogPricingTier"> The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeSsisCatalogInfo"/> instance for mocking. </returns>
        public static IntegrationRuntimeSsisCatalogInfo IntegrationRuntimeSsisCatalogInfo(string catalogServerEndpoint = null, string catalogAdminUserName = null, SecureString catalogAdminPassword = null, IntegrationRuntimeSsisCatalogPricingTier? catalogPricingTier = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new IntegrationRuntimeSsisCatalogInfo(catalogServerEndpoint, catalogAdminUserName, catalogAdminPassword, catalogPricingTier, additionalProperties);
        }

        /// <summary> Initializes a new instance of SecureString. </summary>
        /// <param name="value"> Value of secure string. </param>
        /// <returns> A new <see cref="Models.SecureString"/> instance for mocking. </returns>
        public static SecureString SecureString(string value = null)
        {
            return new SecureString("SecureString", value);
        }

        /// <summary> Initializes a new instance of SecretBase. </summary>
        /// <param name="secretBaseType"> Type of the secret. </param>
        /// <returns> A new <see cref="Models.SecretBase"/> instance for mocking. </returns>
        public static SecretBase SecretBase(string secretBaseType = null)
        {
            return new UnknownSecretBase(secretBaseType);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeCustomSetupScriptProperties. </summary>
        /// <param name="blobContainerUri"> The URI of the Azure blob container that contains the custom setup script. </param>
        /// <param name="sasToken"> The SAS token of the Azure blob container. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeCustomSetupScriptProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeCustomSetupScriptProperties IntegrationRuntimeCustomSetupScriptProperties(Uri blobContainerUri = null, SecureString sasToken = null)
        {
            return new IntegrationRuntimeCustomSetupScriptProperties(blobContainerUri, sasToken);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeDataProxyProperties. </summary>
        /// <param name="connectVia"> The self-hosted integration runtime reference. </param>
        /// <param name="stagingLinkedService"> The staging linked service reference. </param>
        /// <param name="path"> The path to contain the staged data in the Blob storage. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeDataProxyProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeDataProxyProperties IntegrationRuntimeDataProxyProperties(EntityReference connectVia = null, EntityReference stagingLinkedService = null, string path = null)
        {
            return new IntegrationRuntimeDataProxyProperties(connectVia, stagingLinkedService, path);
        }

        /// <summary> Initializes a new instance of EntityReference. </summary>
        /// <param name="integrationRuntimeEntityReferenceType"> The type of this referenced entity. </param>
        /// <param name="referenceName"> The name of this referenced entity. </param>
        /// <returns> A new <see cref="Models.EntityReference"/> instance for mocking. </returns>
        public static EntityReference EntityReference(IntegrationRuntimeEntityReferenceType? integrationRuntimeEntityReferenceType = null, string referenceName = null)
        {
            return new EntityReference(integrationRuntimeEntityReferenceType, referenceName);
        }

        /// <summary> Initializes a new instance of CustomSetupBase. </summary>
        /// <param name="customSetupBaseType"> The type of custom setup. </param>
        /// <returns> A new <see cref="Models.CustomSetupBase"/> instance for mocking. </returns>
        public static CustomSetupBase CustomSetupBase(string customSetupBaseType = null)
        {
            return new UnknownCustomSetupBase(customSetupBaseType);
        }

        /// <summary> Initializes a new instance of CmdkeySetup. </summary>
        /// <param name="targetName"> The server name of data source access. </param>
        /// <param name="userName"> The user name of data source access. </param>
        /// <param name="password">
        /// The password of data source access.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecureString"/>.
        /// </param>
        /// <returns> A new <see cref="Models.CmdkeySetup"/> instance for mocking. </returns>
        public static CmdkeySetup CmdkeySetup(BinaryData targetName = null, BinaryData userName = null, SecretBase password = null)
        {
            return new CmdkeySetup("CmdkeySetup", targetName, userName, password);
        }

        /// <summary> Initializes a new instance of EnvironmentVariableSetup. </summary>
        /// <param name="variableName"> The name of the environment variable. </param>
        /// <param name="variableValue"> The value of the environment variable. </param>
        /// <returns> A new <see cref="Models.EnvironmentVariableSetup"/> instance for mocking. </returns>
        public static EnvironmentVariableSetup EnvironmentVariableSetup(string variableName = null, string variableValue = null)
        {
            return new EnvironmentVariableSetup("EnvironmentVariableSetup", variableName, variableValue);
        }

        /// <summary> Initializes a new instance of ComponentSetup. </summary>
        /// <param name="componentName"> The name of the 3rd party component. </param>
        /// <param name="licenseKey">
        /// The license key to activate the component.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecureString"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ComponentSetup"/> instance for mocking. </returns>
        public static ComponentSetup ComponentSetup(string componentName = null, SecretBase licenseKey = null)
        {
            return new ComponentSetup("ComponentSetup", componentName, licenseKey);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntime. </summary>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedInfo">
        /// Linked integration runtime type from data factory
        /// Please note <see cref="LinkedIntegrationRuntimeType"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LinkedIntegrationRuntimeKeyAuthorization"/> and <see cref="LinkedIntegrationRuntimeRbacAuthorization"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntime"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntime SelfHostedIntegrationRuntime(string description = null, IDictionary<string, BinaryData> additionalProperties = null, LinkedIntegrationRuntimeType linkedInfo = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new SelfHostedIntegrationRuntime("SelfHosted", description, additionalProperties, linkedInfo);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeType. </summary>
        /// <param name="authorizationType"> The authorization type for integration runtime sharing. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeType"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeType LinkedIntegrationRuntimeType(string authorizationType = null)
        {
            return new UnknownLinkedIntegrationRuntimeType(authorizationType);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeKeyAuthorization. </summary>
        /// <param name="key"> The key used for authorization. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeKeyAuthorization"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeKeyAuthorization LinkedIntegrationRuntimeKeyAuthorization(SecureString key = null)
        {
            return new LinkedIntegrationRuntimeKeyAuthorization("Key", key);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeRbacAuthorization. </summary>
        /// <param name="resourceId"> The resource identifier of the integration runtime to be shared. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeRbacAuthorization"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeRbacAuthorization LinkedIntegrationRuntimeRbacAuthorization(string resourceId = null)
        {
            return new LinkedIntegrationRuntimeRbacAuthorization("RBAC", resourceId);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeStatus. </summary>
        /// <param name="dataFactoryName"> The workspace name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="createOn"> The time at which the integration runtime was created, in ISO8601 format. </param>
        /// <param name="nodes"> The list of nodes for managed integration runtime. </param>
        /// <param name="otherErrors"> The errors that occurred on this integration runtime. </param>
        /// <param name="lastOperation"> The last operation result that occurred on this integration runtime. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeStatus ManagedIntegrationRuntimeStatus(string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null, DateTimeOffset? createOn = null, IEnumerable<ManagedIntegrationRuntimeNode> nodes = null, IEnumerable<ManagedIntegrationRuntimeError> otherErrors = null, ManagedIntegrationRuntimeOperationResult lastOperation = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            nodes ??= new List<ManagedIntegrationRuntimeNode>();
            otherErrors ??= new List<ManagedIntegrationRuntimeError>();

            return new ManagedIntegrationRuntimeStatus("Managed", dataFactoryName, state, additionalProperties, createOn, nodes?.ToList(), otherErrors?.ToList(), lastOperation);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeNode. </summary>
        /// <param name="nodeId"> The managed integration runtime node id. </param>
        /// <param name="status"> The managed integration runtime node status. </param>
        /// <param name="errors"> The errors that occurred on this integration runtime node. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeNode"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeNode ManagedIntegrationRuntimeNode(string nodeId = null, ManagedIntegrationRuntimeNodeStatus? status = null, IEnumerable<ManagedIntegrationRuntimeError> errors = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            errors ??= new List<ManagedIntegrationRuntimeError>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeNode(nodeId, status, errors?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeError. </summary>
        /// <param name="time"> The time when the error occurred. </param>
        /// <param name="code"> Error code. </param>
        /// <param name="parameters"> Managed integration runtime error parameters. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeError"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeError ManagedIntegrationRuntimeError(DateTimeOffset? time = null, string code = null, IEnumerable<string> parameters = null, string message = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeError(time, code, parameters?.ToList(), message, additionalProperties);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntimeOperationResult. </summary>
        /// <param name="managedIntegrationRuntimeOperationResultType"> The operation type. Could be start or stop. </param>
        /// <param name="startOn"> The start time of the operation. </param>
        /// <param name="result"> The operation result. </param>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="parameters"> Managed integration runtime error parameters. </param>
        /// <param name="activityId"> The activity id for the operation request. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntimeOperationResult"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntimeOperationResult ManagedIntegrationRuntimeOperationResult(string managedIntegrationRuntimeOperationResultType = null, DateTimeOffset? startOn = null, string result = null, string errorCode = null, IEnumerable<string> parameters = null, string activityId = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            parameters ??= new List<string>();
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ManagedIntegrationRuntimeOperationResult(managedIntegrationRuntimeOperationResultType, startOn, result, errorCode, parameters?.ToList(), activityId, additionalProperties);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntimeStatus. </summary>
        /// <param name="dataFactoryName"> The workspace name which the integration runtime belong to. </param>
        /// <param name="state"> The state of integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="createOn"> The time at which the integration runtime was created, in ISO8601 format. </param>
        /// <param name="taskQueueId"> The task queue id of the integration runtime. </param>
        /// <param name="nodeCommunicationChannelEncryptionMode"> The node communication Channel encryption mode. </param>
        /// <param name="internalChannelEncryption"> It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist). </param>
        /// <param name="version"> Version of the integration runtime. </param>
        /// <param name="nodes"> The list of nodes for this integration runtime. </param>
        /// <param name="scheduledUpdateOn"> The date at which the integration runtime will be scheduled to update, in ISO8601 format. </param>
        /// <param name="updateDelayOffset"> The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours. </param>
        /// <param name="localTimeZoneOffset"> The local time zone offset in hours. </param>
        /// <param name="capabilities"> Object with additional information about integration runtime capabilities. </param>
        /// <param name="serviceUrls"> The URLs for the services used in integration runtime backend service. </param>
        /// <param name="autoUpdate"> Whether Self-hosted integration runtime auto update has been turned on. </param>
        /// <param name="versionStatus"> Status of the integration runtime version. </param>
        /// <param name="links"> The list of linked integration runtimes that are created to share with this integration runtime. </param>
        /// <param name="pushedVersion"> The version that the integration runtime is going to update to. </param>
        /// <param name="latestVersion"> The latest version on download center. </param>
        /// <param name="autoUpdateETA"> The estimated time when the self-hosted integration runtime will be updated. </param>
        /// <param name="serviceRegion"> The service region of the integration runtime. </param>
        /// <param name="newerVersions"> The newer versions on download center. </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntimeStatus"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntimeStatus SelfHostedIntegrationRuntimeStatus(string dataFactoryName = null, IntegrationRuntimeState? state = null, IReadOnlyDictionary<string, BinaryData> additionalProperties = null, DateTimeOffset? createOn = null, string taskQueueId = null, string nodeCommunicationChannelEncryptionMode = null, IntegrationRuntimeInternalChannelEncryptionMode? internalChannelEncryption = null, string version = null, IEnumerable<SelfHostedIntegrationRuntimeNode> nodes = null, DateTimeOffset? scheduledUpdateOn = null, string updateDelayOffset = null, string localTimeZoneOffset = null, IReadOnlyDictionary<string, string> capabilities = null, IEnumerable<string> serviceUrls = null, IntegrationRuntimeAutoUpdate? autoUpdate = null, string versionStatus = null, IEnumerable<LinkedIntegrationRuntime> links = null, string pushedVersion = null, string latestVersion = null, DateTimeOffset? autoUpdateETA = null, string serviceRegion = null, IEnumerable<string> newerVersions = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            nodes ??= new List<SelfHostedIntegrationRuntimeNode>();
            capabilities ??= new Dictionary<string, string>();
            serviceUrls ??= new List<string>();
            links ??= new List<LinkedIntegrationRuntime>();
            newerVersions ??= new List<string>();

            return new SelfHostedIntegrationRuntimeStatus("SelfHosted", dataFactoryName, state, additionalProperties, createOn, taskQueueId, nodeCommunicationChannelEncryptionMode, internalChannelEncryption, version, nodes?.ToList(), scheduledUpdateOn, updateDelayOffset, localTimeZoneOffset, capabilities, serviceUrls?.ToList(), autoUpdate, versionStatus, links?.ToList(), pushedVersion, latestVersion, autoUpdateETA, serviceRegion, newerVersions?.ToList());
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntime. </summary>
        /// <param name="name"> The name of the linked integration runtime. </param>
        /// <param name="subscriptionId"> The subscription ID for which the linked integration runtime belong to. </param>
        /// <param name="dataFactoryName"> The name of the workspace for which the linked integration runtime belong to. </param>
        /// <param name="dataFactoryLocation"> The location of the workspace for which the linked integration runtime belong to. </param>
        /// <param name="createOn"> The creating time of the linked integration runtime. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntime"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntime LinkedIntegrationRuntime(string name = null, string subscriptionId = null, string dataFactoryName = null, string dataFactoryLocation = null, DateTimeOffset? createOn = null)
        {
            return new LinkedIntegrationRuntime(name, subscriptionId, dataFactoryName, dataFactoryLocation, createOn);
        }

        /// <summary> Initializes a new instance of SsisFolder. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <returns> A new <see cref="Models.SsisFolder"/> instance for mocking. </returns>
        public static SsisFolder SsisFolder(long? id = null, string name = null, string description = null)
        {
            return new SsisFolder("Folder", id, name, description);
        }

        /// <summary> Initializes a new instance of SsisProject. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains project. </param>
        /// <param name="version"> Project version. </param>
        /// <param name="environmentRefs"> Environment reference in project. </param>
        /// <param name="parameters"> Parameters in project. </param>
        /// <returns> A new <see cref="Models.SsisProject"/> instance for mocking. </returns>
        public static SsisProject SsisProject(long? id = null, string name = null, string description = null, long? folderId = null, long? version = null, IEnumerable<SsisEnvironmentReference> environmentRefs = null, IEnumerable<SsisParameter> parameters = null)
        {
            environmentRefs ??= new List<SsisEnvironmentReference>();
            parameters ??= new List<SsisParameter>();

            return new SsisProject("Project", id, name, description, folderId, version, environmentRefs?.ToList(), parameters?.ToList());
        }

        /// <summary> Initializes a new instance of SsisEnvironmentReference. </summary>
        /// <param name="id"> Environment reference id. </param>
        /// <param name="environmentFolderName"> Environment folder name. </param>
        /// <param name="environmentName"> Environment name. </param>
        /// <param name="referenceType"> Reference type. </param>
        /// <returns> A new <see cref="Models.SsisEnvironmentReference"/> instance for mocking. </returns>
        public static SsisEnvironmentReference SsisEnvironmentReference(long? id = null, string environmentFolderName = null, string environmentName = null, string referenceType = null)
        {
            return new SsisEnvironmentReference(id, environmentFolderName, environmentName, referenceType);
        }

        /// <summary> Initializes a new instance of SsisParameter. </summary>
        /// <param name="id"> Parameter id. </param>
        /// <param name="name"> Parameter name. </param>
        /// <param name="description"> Parameter description. </param>
        /// <param name="dataType"> Parameter type. </param>
        /// <param name="required"> Whether parameter is required. </param>
        /// <param name="sensitive"> Whether parameter is sensitive. </param>
        /// <param name="designDefaultValue"> Design default value of parameter. </param>
        /// <param name="defaultValue"> Default value of parameter. </param>
        /// <param name="sensitiveDefaultValue"> Default sensitive value of parameter. </param>
        /// <param name="valueType"> Parameter value type. </param>
        /// <param name="valueSet"> Parameter value set. </param>
        /// <param name="variable"> Parameter reference variable. </param>
        /// <returns> A new <see cref="Models.SsisParameter"/> instance for mocking. </returns>
        public static SsisParameter SsisParameter(long? id = null, string name = null, string description = null, string dataType = null, bool? required = null, bool? sensitive = null, string designDefaultValue = null, string defaultValue = null, string sensitiveDefaultValue = null, string valueType = null, bool? valueSet = null, string variable = null)
        {
            return new SsisParameter(id, name, description, dataType, required, sensitive, designDefaultValue, defaultValue, sensitiveDefaultValue, valueType, valueSet, variable);
        }

        /// <summary> Initializes a new instance of SsisPackage. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains package. </param>
        /// <param name="projectVersion"> Project version which contains package. </param>
        /// <param name="projectId"> Project id which contains package. </param>
        /// <param name="parameters"> Parameters in package. </param>
        /// <returns> A new <see cref="Models.SsisPackage"/> instance for mocking. </returns>
        public static SsisPackage SsisPackage(long? id = null, string name = null, string description = null, long? folderId = null, long? projectVersion = null, long? projectId = null, IEnumerable<SsisParameter> parameters = null)
        {
            parameters ??= new List<SsisParameter>();

            return new SsisPackage("Package", id, name, description, folderId, projectVersion, projectId, parameters?.ToList());
        }

        /// <summary> Initializes a new instance of SsisEnvironment. </summary>
        /// <param name="id"> Metadata id. </param>
        /// <param name="name"> Metadata name. </param>
        /// <param name="description"> Metadata description. </param>
        /// <param name="folderId"> Folder id which contains environment. </param>
        /// <param name="variables"> Variable in environment. </param>
        /// <returns> A new <see cref="Models.SsisEnvironment"/> instance for mocking. </returns>
        public static SsisEnvironment SsisEnvironment(long? id = null, string name = null, string description = null, long? folderId = null, IEnumerable<SsisVariable> variables = null)
        {
            variables ??= new List<SsisVariable>();

            return new SsisEnvironment("Environment", id, name, description, folderId, variables?.ToList());
        }

        /// <summary> Initializes a new instance of SsisVariable. </summary>
        /// <param name="id"> Variable id. </param>
        /// <param name="name"> Variable name. </param>
        /// <param name="description"> Variable description. </param>
        /// <param name="dataType"> Variable type. </param>
        /// <param name="sensitive"> Whether variable is sensitive. </param>
        /// <param name="value"> Variable value. </param>
        /// <param name="sensitiveValue"> Variable sensitive value. </param>
        /// <returns> A new <see cref="Models.SsisVariable"/> instance for mocking. </returns>
        public static SsisVariable SsisVariable(long? id = null, string name = null, string description = null, string dataType = null, bool? sensitive = null, string value = null, string sensitiveValue = null)
        {
            return new SsisVariable(id, name, description, dataType, sensitive, value, sensitiveValue);
        }

        /// <summary> Initializes a new instance of ReadWriteDatabase. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="softDeletePeriod"> The time the data should be kept before it stops being accessible to queries in TimeSpan. </param>
        /// <param name="hotCachePeriod"> The time the data should be kept in cache for fast queries in TimeSpan. </param>
        /// <param name="statisticsSize"> The statistics of the database. </param>
        /// <param name="isFollowed"> Indicates whether the database is followed. </param>
        /// <returns> A new <see cref="Models.ReadWriteDatabase"/> instance for mocking. </returns>
        public static ReadWriteDatabase ReadWriteDatabase(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, ResourceProvisioningState? provisioningState = null, TimeSpan? softDeletePeriod = null, TimeSpan? hotCachePeriod = null, float? statisticsSize = null, bool? isFollowed = null)
        {
            return new ReadWriteDatabase(id, name, resourceType, systemData, location, "ReadWrite", provisioningState, softDeletePeriod, hotCachePeriod, new DatabaseStatistics(statisticsSize), isFollowed);
        }

        /// <summary> Initializes a new instance of ReadOnlyFollowingDatabase. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="softDeletePeriod"> The time the data should be kept before it stops being accessible to queries in TimeSpan. </param>
        /// <param name="hotCachePeriod"> The time the data should be kept in cache for fast queries in TimeSpan. </param>
        /// <param name="statisticsSize"> The statistics of the database. </param>
        /// <param name="leaderClusterResourceId"> The name of the leader cluster. </param>
        /// <param name="attachedDatabaseConfigurationName"> The name of the attached database configuration cluster. </param>
        /// <param name="principalsModificationKind"> The principals modification kind of the database. </param>
        /// <returns> A new <see cref="Models.ReadOnlyFollowingDatabase"/> instance for mocking. </returns>
        public static ReadOnlyFollowingDatabase ReadOnlyFollowingDatabase(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, ResourceProvisioningState? provisioningState = null, TimeSpan? softDeletePeriod = null, TimeSpan? hotCachePeriod = null, float? statisticsSize = null, string leaderClusterResourceId = null, string attachedDatabaseConfigurationName = null, PrincipalsModificationKind? principalsModificationKind = null)
        {
            return new ReadOnlyFollowingDatabase(id, name, resourceType, systemData, location, "ReadOnlyFollowing", provisioningState, softDeletePeriod, hotCachePeriod, new DatabaseStatistics(statisticsSize), leaderClusterResourceId, attachedDatabaseConfigurationName, principalsModificationKind);
        }

        /// <summary> Initializes a new instance of EventHubDataConnection. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="eventHubResourceId"> The resource ID of the event hub to be used to create a data connection. </param>
        /// <param name="consumerGroup"> The event hub consumer group. </param>
        /// <param name="tableName"> The table where the data should be ingested. Optionally the table information can be added to each message. </param>
        /// <param name="mappingRuleName"> The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message. </param>
        /// <param name="dataFormat"> The data format of the message. Optionally the data format can be added to each message. </param>
        /// <param name="eventSystemProperties"> System properties of the event hub. </param>
        /// <param name="compression"> The event hub messages compression type. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="managedIdentityResourceId"> The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub. </param>
        /// <returns> A new <see cref="Models.EventHubDataConnection"/> instance for mocking. </returns>
        public static EventHubDataConnection EventHubDataConnection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string eventHubResourceId = null, string consumerGroup = null, string tableName = null, string mappingRuleName = null, EventHubDataFormat? dataFormat = null, IEnumerable<string> eventSystemProperties = null, Compression? compression = null, ResourceProvisioningState? provisioningState = null, string managedIdentityResourceId = null)
        {
            eventSystemProperties ??= new List<string>();

            return new EventHubDataConnection(id, name, resourceType, systemData, location, "EventHub", eventHubResourceId, consumerGroup, tableName, mappingRuleName, dataFormat, eventSystemProperties?.ToList(), compression, provisioningState, managedIdentityResourceId);
        }

        /// <summary> Initializes a new instance of IotHubDataConnection. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="iotHubResourceId"> The resource ID of the Iot hub to be used to create a data connection. </param>
        /// <param name="consumerGroup"> The iot hub consumer group. </param>
        /// <param name="tableName"> The table where the data should be ingested. Optionally the table information can be added to each message. </param>
        /// <param name="mappingRuleName"> The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message. </param>
        /// <param name="dataFormat"> The data format of the message. Optionally the data format can be added to each message. </param>
        /// <param name="eventSystemProperties"> System properties of the iot hub. </param>
        /// <param name="sharedAccessPolicyName"> The name of the share access policy. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <returns> A new <see cref="Models.IotHubDataConnection"/> instance for mocking. </returns>
        public static IotHubDataConnection IotHubDataConnection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string iotHubResourceId = null, string consumerGroup = null, string tableName = null, string mappingRuleName = null, IotHubDataFormat? dataFormat = null, IEnumerable<string> eventSystemProperties = null, string sharedAccessPolicyName = null, ResourceProvisioningState? provisioningState = null)
        {
            eventSystemProperties ??= new List<string>();

            return new IotHubDataConnection(id, name, resourceType, systemData, location, "IotHub", iotHubResourceId, consumerGroup, tableName, mappingRuleName, dataFormat, eventSystemProperties?.ToList(), sharedAccessPolicyName, provisioningState);
        }

        /// <summary> Initializes a new instance of EventGridDataConnection. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="storageAccountResourceId"> The resource ID of the storage account where the data resides. </param>
        /// <param name="eventHubResourceId"> The resource ID where the event grid is configured to send events. </param>
        /// <param name="consumerGroup"> The event hub consumer group. </param>
        /// <param name="tableName"> The table where the data should be ingested. Optionally the table information can be added to each message. </param>
        /// <param name="mappingRuleName"> The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message. </param>
        /// <param name="dataFormat"> The data format of the message. Optionally the data format can be added to each message. </param>
        /// <param name="ignoreFirstRecord"> A Boolean value that, if set to true, indicates that ingestion should ignore the first record of every file. </param>
        /// <param name="blobStorageEventType"> The name of blob storage event type to process. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <returns> A new <see cref="Models.EventGridDataConnection"/> instance for mocking. </returns>
        public static EventGridDataConnection EventGridDataConnection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string storageAccountResourceId = null, string eventHubResourceId = null, string consumerGroup = null, string tableName = null, string mappingRuleName = null, EventGridDataFormat? dataFormat = null, bool? ignoreFirstRecord = null, BlobStorageEventType? blobStorageEventType = null, ResourceProvisioningState? provisioningState = null)
        {
            return new EventGridDataConnection(id, name, resourceType, systemData, location, "EventGrid", storageAccountResourceId, eventHubResourceId, consumerGroup, tableName, mappingRuleName, dataFormat, ignoreFirstRecord, blobStorageEventType, provisioningState);
        }
    }
}
