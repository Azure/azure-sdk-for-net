// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _privateLinkHubClientDiagnostics;
        private PrivateLinkHubsRestOperations _privateLinkHubRestClient;
        private ClientDiagnostics _workspaceClientDiagnostics;
        private WorkspacesRestOperations _workspaceRestClient;
        private ClientDiagnostics _kustoPoolClientDiagnostics;
        private KustoPoolsRestOperations _kustoPoolRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics PrivateLinkHubClientDiagnostics => _privateLinkHubClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Synapse", PrivateLinkHubResource.ResourceType.Namespace, Diagnostics);
        private PrivateLinkHubsRestOperations PrivateLinkHubRestClient => _privateLinkHubRestClient ??= new PrivateLinkHubsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(PrivateLinkHubResource.ResourceType));
        private ClientDiagnostics WorkspaceClientDiagnostics => _workspaceClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Synapse", WorkspaceResource.ResourceType.Namespace, Diagnostics);
        private WorkspacesRestOperations WorkspaceRestClient => _workspaceRestClient ??= new WorkspacesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(WorkspaceResource.ResourceType));
        private ClientDiagnostics KustoPoolClientDiagnostics => _kustoPoolClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Synapse", KustoPoolResource.ResourceType.Namespace, Diagnostics);
        private KustoPoolsRestOperations KustoPoolRestClient => _kustoPoolRestClient ??= new KustoPoolsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(KustoPoolResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Returns a list of privateLinkHubs in a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Synapse/privateLinkHubs
        /// Operation Id: PrivateLinkHubs_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PrivateLinkHubResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PrivateLinkHubResource> GetPrivateLinkHubsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PrivateLinkHubResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateLinkHubClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPrivateLinkHubs");
                scope.Start();
                try
                {
                    var response = await PrivateLinkHubRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateLinkHubResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PrivateLinkHubResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateLinkHubClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPrivateLinkHubs");
                scope.Start();
                try
                {
                    var response = await PrivateLinkHubRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateLinkHubResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns a list of privateLinkHubs in a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Synapse/privateLinkHubs
        /// Operation Id: PrivateLinkHubs_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PrivateLinkHubResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PrivateLinkHubResource> GetPrivateLinkHubs(CancellationToken cancellationToken = default)
        {
            Page<PrivateLinkHubResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = PrivateLinkHubClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPrivateLinkHubs");
                scope.Start();
                try
                {
                    var response = PrivateLinkHubRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateLinkHubResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PrivateLinkHubResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = PrivateLinkHubClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetPrivateLinkHubs");
                scope.Start();
                try
                {
                    var response = PrivateLinkHubRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PrivateLinkHubResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns a list of workspaces in a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Synapse/workspaces
        /// Operation Id: Workspaces_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="WorkspaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<WorkspaceResource> GetWorkspacesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<WorkspaceResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = WorkspaceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWorkspaces");
                scope.Start();
                try
                {
                    var response = await WorkspaceRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkspaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<WorkspaceResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = WorkspaceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWorkspaces");
                scope.Start();
                try
                {
                    var response = await WorkspaceRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkspaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns a list of workspaces in a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Synapse/workspaces
        /// Operation Id: Workspaces_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="WorkspaceResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<WorkspaceResource> GetWorkspaces(CancellationToken cancellationToken = default)
        {
            Page<WorkspaceResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = WorkspaceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWorkspaces");
                scope.Start();
                try
                {
                    var response = WorkspaceRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkspaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<WorkspaceResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = WorkspaceClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetWorkspaces");
                scope.Start();
                try
                {
                    var response = WorkspaceRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new WorkspaceResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists eligible SKUs for Kusto Pool resource.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Synapse/skus
        /// Operation Id: KustoPools_ListSkus
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SkuDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SkuDescription> GetSkusKustoPoolsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<SkuDescription>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = KustoPoolClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkusKustoPools");
                scope.Start();
                try
                {
                    var response = await KustoPoolRestClient.ListSkusAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Lists eligible SKUs for Kusto Pool resource.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Synapse/skus
        /// Operation Id: KustoPools_ListSkus
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SkuDescription" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SkuDescription> GetSkusKustoPools(CancellationToken cancellationToken = default)
        {
            Page<SkuDescription> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = KustoPoolClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetSkusKustoPools");
                scope.Start();
                try
                {
                    var response = KustoPoolRestClient.ListSkus(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Checks that the kusto pool name is valid and is not already in use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Synapse/locations/{location}/kustoPoolCheckNameAvailability
        /// Operation Id: KustoPools_CheckNameAvailability
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> The name of the cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CheckNameResult>> CheckNameAvailabilityKustoPoolAsync(AzureLocation location, KustoPoolCheckNameContent content, CancellationToken cancellationToken = default)
        {
            using var scope = KustoPoolClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityKustoPool");
            scope.Start();
            try
            {
                var response = await KustoPoolRestClient.CheckNameAvailabilityAsync(Id.SubscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks that the kusto pool name is valid and is not already in use.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Synapse/locations/{location}/kustoPoolCheckNameAvailability
        /// Operation Id: KustoPools_CheckNameAvailability
        /// </summary>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> The name of the cluster. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckNameResult> CheckNameAvailabilityKustoPool(AzureLocation location, KustoPoolCheckNameContent content, CancellationToken cancellationToken = default)
        {
            using var scope = KustoPoolClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckNameAvailabilityKustoPool");
            scope.Start();
            try
            {
                var response = KustoPoolRestClient.CheckNameAvailability(Id.SubscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
