// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    /// <summary> A class to add extension methods to TenantResource. </summary>
    internal partial class TenantResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _kustoOperationsClientDiagnostics;
        private KustoRestOperations _kustoOperationsRestClient;

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class for mocking. </summary>
        protected TenantResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="TenantResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal TenantResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics KustoOperationsClientDiagnostics => _kustoOperationsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Synapse", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private KustoRestOperations KustoOperationsRestClient => _kustoOperationsRestClient ??= new KustoRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Lists available operations for the Kusto sub-resources inside Microsoft.Synapse provider.
        /// Request Path: /providers/Microsoft.Synapse/kustooperations
        /// Operation Id: KustoOperations_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.Operation" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Models.Operation> GetKustoOperationsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Models.Operation>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = KustoOperationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKustoOperations");
                scope.Start();
                try
                {
                    var response = await KustoOperationsRestClient.ListAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Models.Operation>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = KustoOperationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKustoOperations");
                scope.Start();
                try
                {
                    var response = await KustoOperationsRestClient.ListNextPageAsync(nextLink, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists available operations for the Kusto sub-resources inside Microsoft.Synapse provider.
        /// Request Path: /providers/Microsoft.Synapse/kustooperations
        /// Operation Id: KustoOperations_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.Operation" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Models.Operation> GetKustoOperations(CancellationToken cancellationToken = default)
        {
            Page<Models.Operation> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = KustoOperationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKustoOperations");
                scope.Start();
                try
                {
                    var response = KustoOperationsRestClient.List(cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Models.Operation> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = KustoOperationsClientDiagnostics.CreateScope("TenantResourceExtensionClient.GetKustoOperations");
                scope.Start();
                try
                {
                    var response = KustoOperationsRestClient.ListNextPage(nextLink, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
