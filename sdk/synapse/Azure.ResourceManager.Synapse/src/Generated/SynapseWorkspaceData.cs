// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    /// <summary> A class representing the SynapseWorkspace data model. </summary>
    public partial class SynapseWorkspaceData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of SynapseWorkspaceData. </summary>
        /// <param name="location"> The location. </param>
        public SynapseWorkspaceData(AzureLocation location) : base(location)
        {
            ConnectivityEndpoints = new ChangeTrackingDictionary<string, string>();
            PrivateEndpointConnections = new ChangeTrackingList<SynapsePrivateEndpointConnectionData>();
            ExtraProperties = new ChangeTrackingDictionary<string, BinaryData>();
            Settings = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of SynapseWorkspaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity">
        /// Identity of the workspace
        /// Serialized Name: Workspace.identity. Current supported identity types: None, SystemAssigned, SystemAssigned,UserAssigned
        /// </param>
        /// <param name="defaultDataLakeStorage">
        /// Workspace default data lake storage account details
        /// Serialized Name: Workspace.properties.defaultDataLakeStorage
        /// </param>
        /// <param name="sqlAdministratorLoginPassword">
        /// SQL administrator login password
        /// Serialized Name: Workspace.properties.sqlAdministratorLoginPassword
        /// </param>
        /// <param name="managedResourceGroupName">
        /// Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and &apos;-&apos;, &apos;_&apos;, &apos;(&apos;, &apos;)&apos; and&apos;.&apos;. Note that the name cannot end with &apos;.&apos;
        /// Serialized Name: Workspace.properties.managedResourceGroupName
        /// </param>
        /// <param name="provisioningState">
        /// Resource provisioning state
        /// Serialized Name: Workspace.properties.provisioningState
        /// </param>
        /// <param name="sqlAdministratorLogin">
        /// Login for workspace SQL active directory administrator
        /// Serialized Name: Workspace.properties.sqlAdministratorLogin
        /// </param>
        /// <param name="virtualNetworkProfile">
        /// Virtual Network profile
        /// Serialized Name: Workspace.properties.virtualNetworkProfile
        /// </param>
        /// <param name="connectivityEndpoints">
        /// Connectivity endpoints
        /// Serialized Name: Workspace.properties.connectivityEndpoints
        /// </param>
        /// <param name="managedVirtualNetwork">
        /// Setting this to &apos;default&apos; will ensure that all compute for this workspace is in a virtual network managed on behalf of the user.
        /// Serialized Name: Workspace.properties.managedVirtualNetwork
        /// </param>
        /// <param name="privateEndpointConnections">
        /// Private endpoint connections to the workspace
        /// Serialized Name: Workspace.properties.privateEndpointConnections
        /// </param>
        /// <param name="encryption">
        /// The encryption details of the workspace
        /// Serialized Name: Workspace.properties.encryption
        /// </param>
        /// <param name="workspaceUID">
        /// The workspace unique identifier
        /// Serialized Name: Workspace.properties.workspaceUID
        /// </param>
        /// <param name="extraProperties">
        /// Workspace level configs and feature flags
        /// Serialized Name: Workspace.properties.extraProperties
        /// </param>
        /// <param name="managedVirtualNetworkSettings">
        /// Managed Virtual Network Settings
        /// Serialized Name: Workspace.properties.managedVirtualNetworkSettings
        /// </param>
        /// <param name="workspaceRepositoryConfiguration">
        /// Git integration settings
        /// Serialized Name: Workspace.properties.workspaceRepositoryConfiguration
        /// </param>
        /// <param name="purviewConfiguration">
        /// Purview Configuration
        /// Serialized Name: Workspace.properties.purviewConfiguration
        /// </param>
        /// <param name="adlaResourceId">
        /// The ADLA resource ID.
        /// Serialized Name: Workspace.properties.adlaResourceId
        /// </param>
        /// <param name="publicNetworkAccess">
        /// Enable or Disable public network access to workspace
        /// Serialized Name: Workspace.properties.publicNetworkAccess
        /// </param>
        /// <param name="cspWorkspaceAdminProperties">
        /// Initial workspace AAD admin properties for a CSP subscription
        /// Serialized Name: Workspace.properties.cspWorkspaceAdminProperties
        /// </param>
        /// <param name="settings">
        /// Workspace settings
        /// Serialized Name: Workspace.properties.settings
        /// </param>
        /// <param name="azureADOnlyAuthentication">
        /// Enable or Disable AzureADOnlyAuthentication on All Workspace subresource
        /// Serialized Name: Workspace.properties.azureADOnlyAuthentication
        /// </param>
        /// <param name="trustedServiceBypassEnabled">
        /// Is trustedServiceBypassEnabled for the workspace
        /// Serialized Name: Workspace.properties.trustedServiceBypassEnabled
        /// </param>
        internal SynapseWorkspaceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ManagedServiceIdentity identity, SynapseDataLakeStorageAccountDetails defaultDataLakeStorage, string sqlAdministratorLoginPassword, string managedResourceGroupName, string provisioningState, string sqlAdministratorLogin, VirtualNetworkProfile virtualNetworkProfile, IDictionary<string, string> connectivityEndpoints, string managedVirtualNetwork, IList<SynapsePrivateEndpointConnectionData> privateEndpointConnections, SynapseEncryptionDetails encryption, Guid? workspaceUID, IReadOnlyDictionary<string, BinaryData> extraProperties, SynapseManagedVirtualNetworkSettings managedVirtualNetworkSettings, SynapseWorkspaceRepositoryConfiguration workspaceRepositoryConfiguration, PurviewConfiguration purviewConfiguration, string adlaResourceId, WorkspacePublicNetworkAccess? publicNetworkAccess, CspWorkspaceAdminProperties cspWorkspaceAdminProperties, IReadOnlyDictionary<string, BinaryData> settings, bool? azureADOnlyAuthentication, bool? trustedServiceBypassEnabled) : base(id, name, resourceType, systemData, tags, location)
        {
            Identity = identity;
            DefaultDataLakeStorage = defaultDataLakeStorage;
            SqlAdministratorLoginPassword = sqlAdministratorLoginPassword;
            ManagedResourceGroupName = managedResourceGroupName;
            ProvisioningState = provisioningState;
            SqlAdministratorLogin = sqlAdministratorLogin;
            VirtualNetworkProfile = virtualNetworkProfile;
            ConnectivityEndpoints = connectivityEndpoints;
            ManagedVirtualNetwork = managedVirtualNetwork;
            PrivateEndpointConnections = privateEndpointConnections;
            Encryption = encryption;
            WorkspaceUID = workspaceUID;
            ExtraProperties = extraProperties;
            ManagedVirtualNetworkSettings = managedVirtualNetworkSettings;
            WorkspaceRepositoryConfiguration = workspaceRepositoryConfiguration;
            PurviewConfiguration = purviewConfiguration;
            AdlaResourceId = adlaResourceId;
            PublicNetworkAccess = publicNetworkAccess;
            CspWorkspaceAdminProperties = cspWorkspaceAdminProperties;
            Settings = settings;
            AzureADOnlyAuthentication = azureADOnlyAuthentication;
            TrustedServiceBypassEnabled = trustedServiceBypassEnabled;
        }

        /// <summary>
        /// Identity of the workspace
        /// Serialized Name: Workspace.identity. Current supported identity types: None, SystemAssigned, SystemAssigned,UserAssigned
        /// </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// Workspace default data lake storage account details
        /// Serialized Name: Workspace.properties.defaultDataLakeStorage
        /// </summary>
        public SynapseDataLakeStorageAccountDetails DefaultDataLakeStorage { get; set; }
        /// <summary>
        /// SQL administrator login password
        /// Serialized Name: Workspace.properties.sqlAdministratorLoginPassword
        /// </summary>
        public string SqlAdministratorLoginPassword { get; set; }
        /// <summary>
        /// Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and &apos;-&apos;, &apos;_&apos;, &apos;(&apos;, &apos;)&apos; and&apos;.&apos;. Note that the name cannot end with &apos;.&apos;
        /// Serialized Name: Workspace.properties.managedResourceGroupName
        /// </summary>
        public string ManagedResourceGroupName { get; set; }
        /// <summary>
        /// Resource provisioning state
        /// Serialized Name: Workspace.properties.provisioningState
        /// </summary>
        public string ProvisioningState { get; }
        /// <summary>
        /// Login for workspace SQL active directory administrator
        /// Serialized Name: Workspace.properties.sqlAdministratorLogin
        /// </summary>
        public string SqlAdministratorLogin { get; set; }
        /// <summary>
        /// Virtual Network profile
        /// Serialized Name: Workspace.properties.virtualNetworkProfile
        /// </summary>
        internal VirtualNetworkProfile VirtualNetworkProfile { get; set; }
        /// <summary>
        /// Subnet ID used for computes in workspace
        /// Serialized Name: VirtualNetworkProfile.computeSubnetId
        /// </summary>
        public string VirtualNetworkComputeSubnetId
        {
            get => VirtualNetworkProfile is null ? default : VirtualNetworkProfile.ComputeSubnetId;
            set
            {
                if (VirtualNetworkProfile is null)
                    VirtualNetworkProfile = new VirtualNetworkProfile();
                VirtualNetworkProfile.ComputeSubnetId = value;
            }
        }

        /// <summary>
        /// Connectivity endpoints
        /// Serialized Name: Workspace.properties.connectivityEndpoints
        /// </summary>
        public IDictionary<string, string> ConnectivityEndpoints { get; }
        /// <summary>
        /// Setting this to &apos;default&apos; will ensure that all compute for this workspace is in a virtual network managed on behalf of the user.
        /// Serialized Name: Workspace.properties.managedVirtualNetwork
        /// </summary>
        public string ManagedVirtualNetwork { get; set; }
        /// <summary>
        /// Private endpoint connections to the workspace
        /// Serialized Name: Workspace.properties.privateEndpointConnections
        /// </summary>
        public IList<SynapsePrivateEndpointConnectionData> PrivateEndpointConnections { get; }
        /// <summary>
        /// The encryption details of the workspace
        /// Serialized Name: Workspace.properties.encryption
        /// </summary>
        public SynapseEncryptionDetails Encryption { get; set; }
        /// <summary>
        /// The workspace unique identifier
        /// Serialized Name: Workspace.properties.workspaceUID
        /// </summary>
        public Guid? WorkspaceUID { get; }
        /// <summary>
        /// Workspace level configs and feature flags
        /// Serialized Name: Workspace.properties.extraProperties
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> ExtraProperties { get; }
        /// <summary>
        /// Managed Virtual Network Settings
        /// Serialized Name: Workspace.properties.managedVirtualNetworkSettings
        /// </summary>
        public SynapseManagedVirtualNetworkSettings ManagedVirtualNetworkSettings { get; set; }
        /// <summary>
        /// Git integration settings
        /// Serialized Name: Workspace.properties.workspaceRepositoryConfiguration
        /// </summary>
        public SynapseWorkspaceRepositoryConfiguration WorkspaceRepositoryConfiguration { get; set; }
        /// <summary>
        /// Purview Configuration
        /// Serialized Name: Workspace.properties.purviewConfiguration
        /// </summary>
        internal PurviewConfiguration PurviewConfiguration { get; set; }
        /// <summary>
        /// Purview Resource ID
        /// Serialized Name: PurviewConfiguration.purviewResourceId
        /// </summary>
        public string PurviewResourceId
        {
            get => PurviewConfiguration is null ? default : PurviewConfiguration.PurviewResourceId;
            set
            {
                if (PurviewConfiguration is null)
                    PurviewConfiguration = new PurviewConfiguration();
                PurviewConfiguration.PurviewResourceId = value;
            }
        }

        /// <summary>
        /// The ADLA resource ID.
        /// Serialized Name: Workspace.properties.adlaResourceId
        /// </summary>
        public string AdlaResourceId { get; }
        /// <summary>
        /// Enable or Disable public network access to workspace
        /// Serialized Name: Workspace.properties.publicNetworkAccess
        /// </summary>
        public WorkspacePublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary>
        /// Initial workspace AAD admin properties for a CSP subscription
        /// Serialized Name: Workspace.properties.cspWorkspaceAdminProperties
        /// </summary>
        internal CspWorkspaceAdminProperties CspWorkspaceAdminProperties { get; set; }
        /// <summary>
        /// AAD object ID of initial workspace admin
        /// Serialized Name: CspWorkspaceAdminProperties.initialWorkspaceAdminObjectId
        /// </summary>
        public string InitialWorkspaceAdminObjectId
        {
            get => CspWorkspaceAdminProperties is null ? default : CspWorkspaceAdminProperties.InitialWorkspaceAdminObjectId;
            set
            {
                if (CspWorkspaceAdminProperties is null)
                    CspWorkspaceAdminProperties = new CspWorkspaceAdminProperties();
                CspWorkspaceAdminProperties.InitialWorkspaceAdminObjectId = value;
            }
        }

        /// <summary>
        /// Workspace settings
        /// Serialized Name: Workspace.properties.settings
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formated json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public IReadOnlyDictionary<string, BinaryData> Settings { get; }
        /// <summary>
        /// Enable or Disable AzureADOnlyAuthentication on All Workspace subresource
        /// Serialized Name: Workspace.properties.azureADOnlyAuthentication
        /// </summary>
        public bool? AzureADOnlyAuthentication { get; set; }
        /// <summary>
        /// Is trustedServiceBypassEnabled for the workspace
        /// Serialized Name: Workspace.properties.trustedServiceBypassEnabled
        /// </summary>
        public bool? TrustedServiceBypassEnabled { get; set; }
    }
}
