// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Synapse;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary>
    /// Class representing an event hub data connection.
    /// Serialized Name: EventHubDataConnection
    /// </summary>
    public partial class SynapseEventHubDataConnection : SynapseDataConnectionData
    {
        /// <summary> Initializes a new instance of SynapseEventHubDataConnection. </summary>
        public SynapseEventHubDataConnection()
        {
            EventSystemProperties = new ChangeTrackingList<string>();
            Kind = SynapseDataConnectionKind.EventHub;
        }

        /// <summary> Initializes a new instance of SynapseEventHubDataConnection. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location">
        /// Resource location.
        /// Serialized Name: DataConnection.location
        /// </param>
        /// <param name="kind">
        /// Kind of the endpoint for the data connection
        /// Serialized Name: DataConnection.kind
        /// </param>
        /// <param name="eventHubResourceId">
        /// The resource ID of the event hub to be used to create a data connection.
        /// Serialized Name: EventHubDataConnection.properties.eventHubResourceId
        /// </param>
        /// <param name="consumerGroup">
        /// The event hub consumer group.
        /// Serialized Name: EventHubDataConnection.properties.consumerGroup
        /// </param>
        /// <param name="tableName">
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// Serialized Name: EventHubDataConnection.properties.tableName
        /// </param>
        /// <param name="mappingRuleName">
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// Serialized Name: EventHubDataConnection.properties.mappingRuleName
        /// </param>
        /// <param name="dataFormat">
        /// The data format of the message. Optionally the data format can be added to each message.
        /// Serialized Name: EventHubDataConnection.properties.dataFormat
        /// </param>
        /// <param name="eventSystemProperties">
        /// System properties of the event hub
        /// Serialized Name: EventHubDataConnection.properties.eventSystemProperties
        /// </param>
        /// <param name="compression">
        /// The event hub messages compression type
        /// Serialized Name: EventHubDataConnection.properties.compression
        /// </param>
        /// <param name="provisioningState">
        /// The provisioned state of the resource.
        /// Serialized Name: EventHubDataConnection.properties.provisioningState
        /// </param>
        /// <param name="managedIdentityResourceId">
        /// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
        /// Serialized Name: EventHubDataConnection.properties.managedIdentityResourceId
        /// </param>
        internal SynapseEventHubDataConnection(ResourceIdentifier id, string name, Core.ResourceType resourceType, SystemData systemData, AzureLocation? location, SynapseDataConnectionKind kind, string eventHubResourceId, string consumerGroup, string tableName, string mappingRuleName, SynapseEventHubDataFormat? dataFormat, IList<string> eventSystemProperties, KustoPoolCompressionType? compression, ResourceProvisioningState? provisioningState, string managedIdentityResourceId) : base(id, name, resourceType, systemData, location, kind)
        {
            EventHubResourceId = eventHubResourceId;
            ConsumerGroup = consumerGroup;
            TableName = tableName;
            MappingRuleName = mappingRuleName;
            DataFormat = dataFormat;
            EventSystemProperties = eventSystemProperties;
            Compression = compression;
            ProvisioningState = provisioningState;
            ManagedIdentityResourceId = managedIdentityResourceId;
            Kind = kind;
        }

        /// <summary>
        /// The resource ID of the event hub to be used to create a data connection.
        /// Serialized Name: EventHubDataConnection.properties.eventHubResourceId
        /// </summary>
        public string EventHubResourceId { get; set; }
        /// <summary>
        /// The event hub consumer group.
        /// Serialized Name: EventHubDataConnection.properties.consumerGroup
        /// </summary>
        public string ConsumerGroup { get; set; }
        /// <summary>
        /// The table where the data should be ingested. Optionally the table information can be added to each message.
        /// Serialized Name: EventHubDataConnection.properties.tableName
        /// </summary>
        public string TableName { get; set; }
        /// <summary>
        /// The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
        /// Serialized Name: EventHubDataConnection.properties.mappingRuleName
        /// </summary>
        public string MappingRuleName { get; set; }
        /// <summary>
        /// The data format of the message. Optionally the data format can be added to each message.
        /// Serialized Name: EventHubDataConnection.properties.dataFormat
        /// </summary>
        public SynapseEventHubDataFormat? DataFormat { get; set; }
        /// <summary>
        /// System properties of the event hub
        /// Serialized Name: EventHubDataConnection.properties.eventSystemProperties
        /// </summary>
        public IList<string> EventSystemProperties { get; }
        /// <summary>
        /// The event hub messages compression type
        /// Serialized Name: EventHubDataConnection.properties.compression
        /// </summary>
        public KustoPoolCompressionType? Compression { get; set; }
        /// <summary>
        /// The provisioned state of the resource.
        /// Serialized Name: EventHubDataConnection.properties.provisioningState
        /// </summary>
        public ResourceProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub.
        /// Serialized Name: EventHubDataConnection.properties.managedIdentityResourceId
        /// </summary>
        public string ManagedIdentityResourceId { get; set; }
    }
}
