// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary>
    /// A SQL Analytics pool patch info
    /// Serialized Name: SqlPoolPatchInfo
    /// </summary>
    public partial class SynapseSqlPoolPatch
    {
        /// <summary> Initializes a new instance of SynapseSqlPoolPatch. </summary>
        public SynapseSqlPoolPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary>
        /// Resource tags.
        /// Serialized Name: SqlPoolPatchInfo.tags
        /// </summary>
        public IDictionary<string, string> Tags { get; }
        /// <summary>
        /// The geo-location where the resource lives
        /// Serialized Name: SqlPoolPatchInfo.location
        /// </summary>
        public AzureLocation? Location { get; set; }
        /// <summary>
        /// SQL pool SKU
        /// Serialized Name: SqlPoolPatchInfo.sku
        /// </summary>
        public SynapseSku Sku { get; set; }
        /// <summary>
        /// Maximum size in bytes
        /// Serialized Name: SqlPoolPatchInfo.properties.maxSizeBytes
        /// </summary>
        public long? MaxSizeBytes { get; set; }
        /// <summary>
        /// Collation mode
        /// Serialized Name: SqlPoolPatchInfo.properties.collation
        /// </summary>
        public string Collation { get; set; }
        /// <summary>
        /// Source database to create from
        /// Serialized Name: SqlPoolPatchInfo.properties.sourceDatabaseId
        /// </summary>
        public string SourceDatabaseId { get; set; }
        /// <summary>
        /// Backup database to restore from
        /// Serialized Name: SqlPoolPatchInfo.properties.recoverableDatabaseId
        /// </summary>
        public string RecoverableDatabaseId { get; set; }
        /// <summary>
        /// Resource state
        /// Serialized Name: SqlPoolPatchInfo.properties.provisioningState
        /// </summary>
        public string ProvisioningState { get; set; }
        /// <summary>
        /// Resource status
        /// Serialized Name: SqlPoolPatchInfo.properties.status
        /// </summary>
        public string Status { get; }
        /// <summary>
        /// Snapshot time to restore
        /// Serialized Name: SqlPoolPatchInfo.properties.restorePointInTime
        /// </summary>
        public DateTimeOffset? RestorePointInTime { get; set; }
        /// <summary>
        /// Specifies the mode of sql pool creation.
        /// 
        /// Default: regular sql pool creation.
        /// 
        /// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
        /// 
        /// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
        /// 
        /// Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool&apos;s original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
        /// Serialized Name: SqlPoolPatchInfo.properties.createMode
        /// </summary>
        public CreateMode? CreateMode { get; set; }
        /// <summary>
        /// Date the SQL pool was created
        /// Serialized Name: SqlPoolPatchInfo.properties.creationDate
        /// </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary>
        /// The storage account type used to store backups for this sql pool.
        /// Serialized Name: SqlPoolPatchInfo.properties.storageAccountType
        /// </summary>
        public StorageAccountType? StorageAccountType { get; set; }
        /// <summary>
        /// Specifies the time that the sql pool was deleted
        /// Serialized Name: SqlPoolPatchInfo.properties.sourceDatabaseDeletionDate
        /// </summary>
        public DateTimeOffset? SourceDatabaseDeletionOn { get; set; }
    }
}
