// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary> property configuration state. </summary>
    public readonly partial struct StateValue : IEquatable<StateValue>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StateValue"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StateValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConsistentValue = "Consistent";
        private const string InConsistentValue = "InConsistent";
        private const string UpdatingValue = "Updating";

        /// <summary> Consistent. </summary>
        public static StateValue Consistent { get; } = new StateValue(ConsistentValue);
        /// <summary> InConsistent. </summary>
        public static StateValue InConsistent { get; } = new StateValue(InConsistentValue);
        /// <summary> Updating. </summary>
        public static StateValue Updating { get; } = new StateValue(UpdatingValue);
        /// <summary> Determines if two <see cref="StateValue"/> values are the same. </summary>
        public static bool operator ==(StateValue left, StateValue right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StateValue"/> values are not the same. </summary>
        public static bool operator !=(StateValue left, StateValue right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StateValue"/>. </summary>
        public static implicit operator StateValue(string value) => new StateValue(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StateValue other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StateValue other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
