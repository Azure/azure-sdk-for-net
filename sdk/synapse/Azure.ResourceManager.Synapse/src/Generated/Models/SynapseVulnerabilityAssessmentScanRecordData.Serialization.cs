// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class SynapseVulnerabilityAssessmentScanRecordData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SynapseVulnerabilityAssessmentScanRecordData DeserializeSynapseVulnerabilityAssessmentScanRecordData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> scanId = default;
            Optional<SynapseVulnerabilityAssessmentScanTriggerType> triggerType = default;
            Optional<SynapseVulnerabilityAssessmentScanState> state = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<IReadOnlyList<SynapseVulnerabilityAssessmentScanError>> errors = default;
            Optional<string> storageContainerPath = default;
            Optional<int> numberOfFailedSecurityChecks = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("scanId"))
                        {
                            scanId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("triggerType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            triggerType = new SynapseVulnerabilityAssessmentScanTriggerType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("state"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            state = new SynapseVulnerabilityAssessmentScanState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("startTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            startTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("endTime"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            endTime = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("errors"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<SynapseVulnerabilityAssessmentScanError> array = new List<SynapseVulnerabilityAssessmentScanError>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(SynapseVulnerabilityAssessmentScanError.DeserializeSynapseVulnerabilityAssessmentScanError(item));
                            }
                            errors = array;
                            continue;
                        }
                        if (property0.NameEquals("storageContainerPath"))
                        {
                            storageContainerPath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("numberOfFailedSecurityChecks"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            numberOfFailedSecurityChecks = property0.Value.GetInt32();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SynapseVulnerabilityAssessmentScanRecordData(id, name, type, systemData.Value, scanId.Value, Optional.ToNullable(triggerType), Optional.ToNullable(state), Optional.ToNullable(startTime), Optional.ToNullable(endTime), Optional.ToList(errors), storageContainerPath.Value, Optional.ToNullable(numberOfFailedSecurityChecks));
        }
    }
}
