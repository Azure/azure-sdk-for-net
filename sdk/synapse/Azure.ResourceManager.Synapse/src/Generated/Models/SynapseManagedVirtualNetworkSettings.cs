// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary> Managed Virtual Network Settings. </summary>
    public partial class SynapseManagedVirtualNetworkSettings
    {
        /// <summary> Initializes a new instance of <see cref="SynapseManagedVirtualNetworkSettings"/>. </summary>
        public SynapseManagedVirtualNetworkSettings()
        {
            AllowedAadTenantIdsForLinking = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="SynapseManagedVirtualNetworkSettings"/>. </summary>
        /// <param name="preventDataExfiltration"> Prevent Data Exfiltration. </param>
        /// <param name="enableLinkedAccessCheckOnTargetResource"> Linked Access Check On Target Resource. </param>
        /// <param name="allowedAadTenantIdsForLinking"> Allowed Aad Tenant Ids For Linking. </param>
        internal SynapseManagedVirtualNetworkSettings(bool? preventDataExfiltration, bool? enableLinkedAccessCheckOnTargetResource, IList<string> allowedAadTenantIdsForLinking)
        {
            PreventDataExfiltration = preventDataExfiltration;
            EnableLinkedAccessCheckOnTargetResource = enableLinkedAccessCheckOnTargetResource;
            AllowedAadTenantIdsForLinking = allowedAadTenantIdsForLinking;
        }

        /// <summary> Prevent Data Exfiltration. </summary>
        public bool? PreventDataExfiltration { get; set; }
        /// <summary> Linked Access Check On Target Resource. </summary>
        public bool? EnableLinkedAccessCheckOnTargetResource { get; set; }
        /// <summary> Allowed Aad Tenant Ids For Linking. </summary>
        public IList<string> AllowedAadTenantIdsForLinking { get; }
    }
}
