// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary> The managed integration runtime node status. </summary>
    public readonly partial struct SynapseManagedIntegrationRuntimeNodeStatus : IEquatable<SynapseManagedIntegrationRuntimeNodeStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SynapseManagedIntegrationRuntimeNodeStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SynapseManagedIntegrationRuntimeNodeStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartingValue = "Starting";
        private const string AvailableValue = "Available";
        private const string RecyclingValue = "Recycling";
        private const string UnavailableValue = "Unavailable";

        /// <summary> Starting. </summary>
        public static SynapseManagedIntegrationRuntimeNodeStatus Starting { get; } = new SynapseManagedIntegrationRuntimeNodeStatus(StartingValue);
        /// <summary> Available. </summary>
        public static SynapseManagedIntegrationRuntimeNodeStatus Available { get; } = new SynapseManagedIntegrationRuntimeNodeStatus(AvailableValue);
        /// <summary> Recycling. </summary>
        public static SynapseManagedIntegrationRuntimeNodeStatus Recycling { get; } = new SynapseManagedIntegrationRuntimeNodeStatus(RecyclingValue);
        /// <summary> Unavailable. </summary>
        public static SynapseManagedIntegrationRuntimeNodeStatus Unavailable { get; } = new SynapseManagedIntegrationRuntimeNodeStatus(UnavailableValue);
        /// <summary> Determines if two <see cref="SynapseManagedIntegrationRuntimeNodeStatus"/> values are the same. </summary>
        public static bool operator ==(SynapseManagedIntegrationRuntimeNodeStatus left, SynapseManagedIntegrationRuntimeNodeStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SynapseManagedIntegrationRuntimeNodeStatus"/> values are not the same. </summary>
        public static bool operator !=(SynapseManagedIntegrationRuntimeNodeStatus left, SynapseManagedIntegrationRuntimeNodeStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SynapseManagedIntegrationRuntimeNodeStatus"/>. </summary>
        public static implicit operator SynapseManagedIntegrationRuntimeNodeStatus(string value) => new SynapseManagedIntegrationRuntimeNodeStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SynapseManagedIntegrationRuntimeNodeStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SynapseManagedIntegrationRuntimeNodeStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
