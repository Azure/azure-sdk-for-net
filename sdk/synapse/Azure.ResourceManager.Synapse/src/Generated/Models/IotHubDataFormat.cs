// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary>
    /// The data format of the message. Optionally the data format can be added to each message.
    /// Serialized Name: IotHubDataFormat
    /// </summary>
    public readonly partial struct IotHubDataFormat : IEquatable<IotHubDataFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IotHubDataFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IotHubDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MultiJsonValue = "MULTIJSON";
        private const string JsonValue = "JSON";
        private const string CsvValue = "CSV";
        private const string TsvValue = "TSV";
        private const string ScsvValue = "SCSV";
        private const string SohsvValue = "SOHSV";
        private const string PsvValue = "PSV";
        private const string TxtValue = "TXT";
        private const string RawValue = "RAW";
        private const string SingleJsonValue = "SINGLEJSON";
        private const string AvroValue = "AVRO";
        private const string TsveValue = "TSVE";
        private const string ParquetValue = "PARQUET";
        private const string OrcValue = "ORC";
        private const string ApacheAvroValue = "APACHEAVRO";
        private const string W3CLogfileValue = "W3CLOGFILE";

        /// <summary>
        /// MULTIJSON
        /// Serialized Name: IotHubDataFormat.MULTIJSON
        /// </summary>
        public static IotHubDataFormat MultiJson { get; } = new IotHubDataFormat(MultiJsonValue);
        /// <summary>
        /// JSON
        /// Serialized Name: IotHubDataFormat.JSON
        /// </summary>
        public static IotHubDataFormat Json { get; } = new IotHubDataFormat(JsonValue);
        /// <summary>
        /// CSV
        /// Serialized Name: IotHubDataFormat.CSV
        /// </summary>
        public static IotHubDataFormat Csv { get; } = new IotHubDataFormat(CsvValue);
        /// <summary>
        /// TSV
        /// Serialized Name: IotHubDataFormat.TSV
        /// </summary>
        public static IotHubDataFormat Tsv { get; } = new IotHubDataFormat(TsvValue);
        /// <summary>
        /// SCSV
        /// Serialized Name: IotHubDataFormat.SCSV
        /// </summary>
        public static IotHubDataFormat Scsv { get; } = new IotHubDataFormat(ScsvValue);
        /// <summary>
        /// SOHSV
        /// Serialized Name: IotHubDataFormat.SOHSV
        /// </summary>
        public static IotHubDataFormat Sohsv { get; } = new IotHubDataFormat(SohsvValue);
        /// <summary>
        /// PSV
        /// Serialized Name: IotHubDataFormat.PSV
        /// </summary>
        public static IotHubDataFormat Psv { get; } = new IotHubDataFormat(PsvValue);
        /// <summary>
        /// TXT
        /// Serialized Name: IotHubDataFormat.TXT
        /// </summary>
        public static IotHubDataFormat Txt { get; } = new IotHubDataFormat(TxtValue);
        /// <summary>
        /// RAW
        /// Serialized Name: IotHubDataFormat.RAW
        /// </summary>
        public static IotHubDataFormat Raw { get; } = new IotHubDataFormat(RawValue);
        /// <summary>
        /// SINGLEJSON
        /// Serialized Name: IotHubDataFormat.SINGLEJSON
        /// </summary>
        public static IotHubDataFormat SingleJson { get; } = new IotHubDataFormat(SingleJsonValue);
        /// <summary>
        /// AVRO
        /// Serialized Name: IotHubDataFormat.AVRO
        /// </summary>
        public static IotHubDataFormat Avro { get; } = new IotHubDataFormat(AvroValue);
        /// <summary>
        /// TSVE
        /// Serialized Name: IotHubDataFormat.TSVE
        /// </summary>
        public static IotHubDataFormat Tsve { get; } = new IotHubDataFormat(TsveValue);
        /// <summary>
        /// PARQUET
        /// Serialized Name: IotHubDataFormat.PARQUET
        /// </summary>
        public static IotHubDataFormat Parquet { get; } = new IotHubDataFormat(ParquetValue);
        /// <summary>
        /// ORC
        /// Serialized Name: IotHubDataFormat.ORC
        /// </summary>
        public static IotHubDataFormat Orc { get; } = new IotHubDataFormat(OrcValue);
        /// <summary>
        /// APACHEAVRO
        /// Serialized Name: IotHubDataFormat.APACHEAVRO
        /// </summary>
        public static IotHubDataFormat ApacheAvro { get; } = new IotHubDataFormat(ApacheAvroValue);
        /// <summary>
        /// W3CLOGFILE
        /// Serialized Name: IotHubDataFormat.W3CLOGFILE
        /// </summary>
        public static IotHubDataFormat W3CLogfile { get; } = new IotHubDataFormat(W3CLogfileValue);
        /// <summary> Determines if two <see cref="IotHubDataFormat"/> values are the same. </summary>
        public static bool operator ==(IotHubDataFormat left, IotHubDataFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IotHubDataFormat"/> values are not the same. </summary>
        public static bool operator !=(IotHubDataFormat left, IotHubDataFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IotHubDataFormat"/>. </summary>
        public static implicit operator IotHubDataFormat(string value) => new IotHubDataFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IotHubDataFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IotHubDataFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
