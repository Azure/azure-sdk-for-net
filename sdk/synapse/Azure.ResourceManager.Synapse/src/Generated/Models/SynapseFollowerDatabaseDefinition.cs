// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary>
    /// A class representing follower database request.
    /// Serialized Name: FollowerDatabaseDefinition
    /// </summary>
    public partial class SynapseFollowerDatabaseDefinition
    {
        /// <summary> Initializes a new instance of SynapseFollowerDatabaseDefinition. </summary>
        /// <param name="kustoPoolResourceId">
        /// Resource id of the cluster that follows a database owned by this cluster.
        /// Serialized Name: FollowerDatabaseDefinition.clusterResourceId
        /// </param>
        /// <param name="attachedDatabaseConfigurationName">
        /// Resource name of the attached database configuration in the follower cluster.
        /// Serialized Name: FollowerDatabaseDefinition.attachedDatabaseConfigurationName
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="kustoPoolResourceId"/> or <paramref name="attachedDatabaseConfigurationName"/> is null. </exception>
        public SynapseFollowerDatabaseDefinition(string kustoPoolResourceId, string attachedDatabaseConfigurationName)
        {
            Argument.AssertNotNull(kustoPoolResourceId, nameof(kustoPoolResourceId));
            Argument.AssertNotNull(attachedDatabaseConfigurationName, nameof(attachedDatabaseConfigurationName));

            KustoPoolResourceId = kustoPoolResourceId;
            AttachedDatabaseConfigurationName = attachedDatabaseConfigurationName;
        }

        /// <summary> Initializes a new instance of SynapseFollowerDatabaseDefinition. </summary>
        /// <param name="kustoPoolResourceId">
        /// Resource id of the cluster that follows a database owned by this cluster.
        /// Serialized Name: FollowerDatabaseDefinition.clusterResourceId
        /// </param>
        /// <param name="attachedDatabaseConfigurationName">
        /// Resource name of the attached database configuration in the follower cluster.
        /// Serialized Name: FollowerDatabaseDefinition.attachedDatabaseConfigurationName
        /// </param>
        /// <param name="databaseName">
        /// The database name owned by this cluster that was followed. * in case following all databases.
        /// Serialized Name: FollowerDatabaseDefinition.databaseName
        /// </param>
        internal SynapseFollowerDatabaseDefinition(string kustoPoolResourceId, string attachedDatabaseConfigurationName, string databaseName)
        {
            KustoPoolResourceId = kustoPoolResourceId;
            AttachedDatabaseConfigurationName = attachedDatabaseConfigurationName;
            DatabaseName = databaseName;
        }

        /// <summary>
        /// Resource id of the cluster that follows a database owned by this cluster.
        /// Serialized Name: FollowerDatabaseDefinition.clusterResourceId
        /// </summary>
        public string KustoPoolResourceId { get; set; }
        /// <summary>
        /// Resource name of the attached database configuration in the follower cluster.
        /// Serialized Name: FollowerDatabaseDefinition.attachedDatabaseConfigurationName
        /// </summary>
        public string AttachedDatabaseConfigurationName { get; set; }
        /// <summary>
        /// The database name owned by this cluster that was followed. * in case following all databases.
        /// Serialized Name: FollowerDatabaseDefinition.databaseName
        /// </summary>
        public string DatabaseName { get; }
    }
}
