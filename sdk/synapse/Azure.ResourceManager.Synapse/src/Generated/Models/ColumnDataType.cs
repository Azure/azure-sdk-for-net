// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary>
    /// The column data type.
    /// Serialized Name: ColumnDataType
    /// </summary>
    public readonly partial struct ColumnDataType : IEquatable<ColumnDataType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ColumnDataType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ColumnDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ImageValue = "image";
        private const string TextValue = "text";
        private const string UniqueidentifierValue = "uniqueidentifier";
        private const string DateValue = "date";
        private const string TimeValue = "time";
        private const string Datetime2Value = "datetime2";
        private const string DatetimeoffsetValue = "datetimeoffset";
        private const string TinyintValue = "tinyint";
        private const string SmallintValue = "smallint";
        private const string IntValue = "int";
        private const string SmalldatetimeValue = "smalldatetime";
        private const string RealValue = "real";
        private const string MoneyValue = "money";
        private const string DatetimeValue = "datetime";
        private const string FloatValue = "float";
        private const string SqlVariantValue = "sql_variant";
        private const string NtextValue = "ntext";
        private const string BitValue = "bit";
        private const string DecimalValue = "decimal";
        private const string NumericValue = "numeric";
        private const string SmallmoneyValue = "smallmoney";
        private const string BigintValue = "bigint";
        private const string HierarchyidValue = "hierarchyid";
        private const string GeometryValue = "geometry";
        private const string GeographyValue = "geography";
        private const string VarbinaryValue = "varbinary";
        private const string VarcharValue = "varchar";
        private const string BinaryValue = "binary";
        private const string CharValue = "char";
        private const string TimestampValue = "timestamp";
        private const string NvarcharValue = "nvarchar";
        private const string NcharValue = "nchar";
        private const string XmlValue = "xml";
        private const string SysnameValue = "sysname";

        /// <summary>
        /// image
        /// Serialized Name: ColumnDataType.image
        /// </summary>
        public static ColumnDataType Image { get; } = new ColumnDataType(ImageValue);
        /// <summary>
        /// text
        /// Serialized Name: ColumnDataType.text
        /// </summary>
        public static ColumnDataType Text { get; } = new ColumnDataType(TextValue);
        /// <summary>
        /// uniqueidentifier
        /// Serialized Name: ColumnDataType.uniqueidentifier
        /// </summary>
        public static ColumnDataType Uniqueidentifier { get; } = new ColumnDataType(UniqueidentifierValue);
        /// <summary>
        /// date
        /// Serialized Name: ColumnDataType.date
        /// </summary>
        public static ColumnDataType Date { get; } = new ColumnDataType(DateValue);
        /// <summary>
        /// time
        /// Serialized Name: ColumnDataType.time
        /// </summary>
        public static ColumnDataType Time { get; } = new ColumnDataType(TimeValue);
        /// <summary>
        /// datetime2
        /// Serialized Name: ColumnDataType.datetime2
        /// </summary>
        public static ColumnDataType Datetime2 { get; } = new ColumnDataType(Datetime2Value);
        /// <summary>
        /// datetimeoffset
        /// Serialized Name: ColumnDataType.datetimeoffset
        /// </summary>
        public static ColumnDataType Datetimeoffset { get; } = new ColumnDataType(DatetimeoffsetValue);
        /// <summary>
        /// tinyint
        /// Serialized Name: ColumnDataType.tinyint
        /// </summary>
        public static ColumnDataType Tinyint { get; } = new ColumnDataType(TinyintValue);
        /// <summary>
        /// smallint
        /// Serialized Name: ColumnDataType.smallint
        /// </summary>
        public static ColumnDataType Smallint { get; } = new ColumnDataType(SmallintValue);
        /// <summary>
        /// int
        /// Serialized Name: ColumnDataType.int
        /// </summary>
        public static ColumnDataType Int { get; } = new ColumnDataType(IntValue);
        /// <summary>
        /// smalldatetime
        /// Serialized Name: ColumnDataType.smalldatetime
        /// </summary>
        public static ColumnDataType Smalldatetime { get; } = new ColumnDataType(SmalldatetimeValue);
        /// <summary>
        /// real
        /// Serialized Name: ColumnDataType.real
        /// </summary>
        public static ColumnDataType Real { get; } = new ColumnDataType(RealValue);
        /// <summary>
        /// money
        /// Serialized Name: ColumnDataType.money
        /// </summary>
        public static ColumnDataType Money { get; } = new ColumnDataType(MoneyValue);
        /// <summary>
        /// datetime
        /// Serialized Name: ColumnDataType.datetime
        /// </summary>
        public static ColumnDataType Datetime { get; } = new ColumnDataType(DatetimeValue);
        /// <summary>
        /// float
        /// Serialized Name: ColumnDataType.float
        /// </summary>
        public static ColumnDataType Float { get; } = new ColumnDataType(FloatValue);
        /// <summary>
        /// sql_variant
        /// Serialized Name: ColumnDataType.sql_variant
        /// </summary>
        public static ColumnDataType SqlVariant { get; } = new ColumnDataType(SqlVariantValue);
        /// <summary>
        /// ntext
        /// Serialized Name: ColumnDataType.ntext
        /// </summary>
        public static ColumnDataType Ntext { get; } = new ColumnDataType(NtextValue);
        /// <summary>
        /// bit
        /// Serialized Name: ColumnDataType.bit
        /// </summary>
        public static ColumnDataType Bit { get; } = new ColumnDataType(BitValue);
        /// <summary>
        /// decimal
        /// Serialized Name: ColumnDataType.decimal
        /// </summary>
        public static ColumnDataType Decimal { get; } = new ColumnDataType(DecimalValue);
        /// <summary>
        /// numeric
        /// Serialized Name: ColumnDataType.numeric
        /// </summary>
        public static ColumnDataType Numeric { get; } = new ColumnDataType(NumericValue);
        /// <summary>
        /// smallmoney
        /// Serialized Name: ColumnDataType.smallmoney
        /// </summary>
        public static ColumnDataType Smallmoney { get; } = new ColumnDataType(SmallmoneyValue);
        /// <summary>
        /// bigint
        /// Serialized Name: ColumnDataType.bigint
        /// </summary>
        public static ColumnDataType Bigint { get; } = new ColumnDataType(BigintValue);
        /// <summary>
        /// hierarchyid
        /// Serialized Name: ColumnDataType.hierarchyid
        /// </summary>
        public static ColumnDataType Hierarchyid { get; } = new ColumnDataType(HierarchyidValue);
        /// <summary>
        /// geometry
        /// Serialized Name: ColumnDataType.geometry
        /// </summary>
        public static ColumnDataType Geometry { get; } = new ColumnDataType(GeometryValue);
        /// <summary>
        /// geography
        /// Serialized Name: ColumnDataType.geography
        /// </summary>
        public static ColumnDataType Geography { get; } = new ColumnDataType(GeographyValue);
        /// <summary>
        /// varbinary
        /// Serialized Name: ColumnDataType.varbinary
        /// </summary>
        public static ColumnDataType Varbinary { get; } = new ColumnDataType(VarbinaryValue);
        /// <summary>
        /// varchar
        /// Serialized Name: ColumnDataType.varchar
        /// </summary>
        public static ColumnDataType Varchar { get; } = new ColumnDataType(VarcharValue);
        /// <summary>
        /// binary
        /// Serialized Name: ColumnDataType.binary
        /// </summary>
        public static ColumnDataType Binary { get; } = new ColumnDataType(BinaryValue);
        /// <summary>
        /// char
        /// Serialized Name: ColumnDataType.char
        /// </summary>
        public static ColumnDataType Char { get; } = new ColumnDataType(CharValue);
        /// <summary>
        /// timestamp
        /// Serialized Name: ColumnDataType.timestamp
        /// </summary>
        public static ColumnDataType Timestamp { get; } = new ColumnDataType(TimestampValue);
        /// <summary>
        /// nvarchar
        /// Serialized Name: ColumnDataType.nvarchar
        /// </summary>
        public static ColumnDataType Nvarchar { get; } = new ColumnDataType(NvarcharValue);
        /// <summary>
        /// nchar
        /// Serialized Name: ColumnDataType.nchar
        /// </summary>
        public static ColumnDataType Nchar { get; } = new ColumnDataType(NcharValue);
        /// <summary>
        /// xml
        /// Serialized Name: ColumnDataType.xml
        /// </summary>
        public static ColumnDataType Xml { get; } = new ColumnDataType(XmlValue);
        /// <summary>
        /// sysname
        /// Serialized Name: ColumnDataType.sysname
        /// </summary>
        public static ColumnDataType Sysname { get; } = new ColumnDataType(SysnameValue);
        /// <summary> Determines if two <see cref="ColumnDataType"/> values are the same. </summary>
        public static bool operator ==(ColumnDataType left, ColumnDataType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ColumnDataType"/> values are not the same. </summary>
        public static bool operator !=(ColumnDataType left, ColumnDataType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ColumnDataType"/>. </summary>
        public static implicit operator ColumnDataType(string value) => new ColumnDataType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ColumnDataType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ColumnDataType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
