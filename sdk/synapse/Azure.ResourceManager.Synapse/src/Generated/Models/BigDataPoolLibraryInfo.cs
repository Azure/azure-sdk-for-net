// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary>
    /// Library/package information of a Big Data pool powered by Apache Spark
    /// Serialized Name: LibraryInfo
    /// </summary>
    public partial class BigDataPoolLibraryInfo
    {
        /// <summary> Initializes a new instance of BigDataPoolLibraryInfo. </summary>
        public BigDataPoolLibraryInfo()
        {
        }

        /// <summary> Initializes a new instance of BigDataPoolLibraryInfo. </summary>
        /// <param name="name">
        /// Name of the library.
        /// Serialized Name: LibraryInfo.name
        /// </param>
        /// <param name="path">
        /// Storage blob path of library.
        /// Serialized Name: LibraryInfo.path
        /// </param>
        /// <param name="containerName">
        /// Storage blob container name.
        /// Serialized Name: LibraryInfo.containerName
        /// </param>
        /// <param name="uploadedOn">
        /// The last update time of the library.
        /// Serialized Name: LibraryInfo.uploadedTimestamp
        /// </param>
        /// <param name="libraryInfoType">
        /// Type of the library.
        /// Serialized Name: LibraryInfo.type
        /// </param>
        /// <param name="provisioningStatus">
        /// Provisioning status of the library/package.
        /// Serialized Name: LibraryInfo.provisioningStatus
        /// </param>
        /// <param name="creatorId">
        /// Creator Id of the library/package.
        /// Serialized Name: LibraryInfo.creatorId
        /// </param>
        internal BigDataPoolLibraryInfo(string name, string path, string containerName, DateTimeOffset? uploadedOn, string libraryInfoType, string provisioningStatus, string creatorId)
        {
            Name = name;
            Path = path;
            ContainerName = containerName;
            UploadedOn = uploadedOn;
            LibraryInfoType = libraryInfoType;
            ProvisioningStatus = provisioningStatus;
            CreatorId = creatorId;
        }

        /// <summary>
        /// Name of the library.
        /// Serialized Name: LibraryInfo.name
        /// </summary>
        public string Name { get; set; }
        /// <summary>
        /// Storage blob path of library.
        /// Serialized Name: LibraryInfo.path
        /// </summary>
        public string Path { get; set; }
        /// <summary>
        /// Storage blob container name.
        /// Serialized Name: LibraryInfo.containerName
        /// </summary>
        public string ContainerName { get; set; }
        /// <summary>
        /// The last update time of the library.
        /// Serialized Name: LibraryInfo.uploadedTimestamp
        /// </summary>
        public DateTimeOffset? UploadedOn { get; set; }
        /// <summary>
        /// Type of the library.
        /// Serialized Name: LibraryInfo.type
        /// </summary>
        public string LibraryInfoType { get; set; }
        /// <summary>
        /// Provisioning status of the library/package.
        /// Serialized Name: LibraryInfo.provisioningStatus
        /// </summary>
        public string ProvisioningStatus { get; }
        /// <summary>
        /// Creator Id of the library/package.
        /// Serialized Name: LibraryInfo.creatorId
        /// </summary>
        public string CreatorId { get; }
    }
}
