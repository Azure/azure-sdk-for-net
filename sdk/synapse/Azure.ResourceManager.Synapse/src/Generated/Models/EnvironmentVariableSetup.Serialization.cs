// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Synapse.Models
{
    public partial class EnvironmentVariableSetup : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(CustomSetupBaseType);
            writer.WritePropertyName("typeProperties");
            writer.WriteStartObject();
            writer.WritePropertyName("variableName");
            writer.WriteStringValue(VariableName);
            writer.WritePropertyName("variableValue");
            writer.WriteStringValue(VariableValue);
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static EnvironmentVariableSetup DeserializeEnvironmentVariableSetup(JsonElement element)
        {
            string type = default;
            string variableName = default;
            string variableValue = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("typeProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("variableName"))
                        {
                            variableName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("variableValue"))
                        {
                            variableValue = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new EnvironmentVariableSetup(type, variableName, variableValue);
        }
    }
}
