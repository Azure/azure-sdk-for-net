// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Synapse;

namespace Azure.ResourceManager.Synapse.Models
{
    /// <summary>
    /// Class representing a read only following database.
    /// Serialized Name: ReadOnlyFollowingDatabase
    /// </summary>
    public partial class SynapseReadOnlyFollowingDatabase : SynapseDatabaseData
    {
        /// <summary> Initializes a new instance of SynapseReadOnlyFollowingDatabase. </summary>
        public SynapseReadOnlyFollowingDatabase()
        {
            Kind = SynapseKind.ReadOnlyFollowing;
        }

        /// <summary> Initializes a new instance of SynapseReadOnlyFollowingDatabase. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location">
        /// Resource location.
        /// Serialized Name: Database.location
        /// </param>
        /// <param name="kind">
        /// Kind of the database
        /// Serialized Name: Database.kind
        /// </param>
        /// <param name="provisioningState">
        /// The provisioned state of the resource.
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.provisioningState
        /// </param>
        /// <param name="softDeletePeriod">
        /// The time the data should be kept before it stops being accessible to queries in TimeSpan.
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.softDeletePeriod
        /// </param>
        /// <param name="hotCachePeriod">
        /// The time the data should be kept in cache for fast queries in TimeSpan.
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.hotCachePeriod
        /// </param>
        /// <param name="statistics">
        /// The statistics of the database.
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.statistics
        /// </param>
        /// <param name="leaderClusterResourceId">
        /// The name of the leader cluster
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.leaderClusterResourceId
        /// </param>
        /// <param name="attachedDatabaseConfigurationName">
        /// The name of the attached database configuration cluster
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.attachedDatabaseConfigurationName
        /// </param>
        /// <param name="principalsModificationKind">
        /// The principals modification kind of the database
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.principalsModificationKind
        /// </param>
        internal SynapseReadOnlyFollowingDatabase(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, AzureLocation? location, SynapseKind kind, ResourceProvisioningState? provisioningState, TimeSpan? softDeletePeriod, TimeSpan? hotCachePeriod, DatabaseStatistics statistics, string leaderClusterResourceId, string attachedDatabaseConfigurationName, SynapsePrincipalsModificationKind? principalsModificationKind) : base(id, name, resourceType, systemData, location, kind)
        {
            ProvisioningState = provisioningState;
            SoftDeletePeriod = softDeletePeriod;
            HotCachePeriod = hotCachePeriod;
            Statistics = statistics;
            LeaderClusterResourceId = leaderClusterResourceId;
            AttachedDatabaseConfigurationName = attachedDatabaseConfigurationName;
            PrincipalsModificationKind = principalsModificationKind;
            Kind = kind;
        }

        /// <summary>
        /// The provisioned state of the resource.
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.provisioningState
        /// </summary>
        public ResourceProvisioningState? ProvisioningState { get; }
        /// <summary>
        /// The time the data should be kept before it stops being accessible to queries in TimeSpan.
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.softDeletePeriod
        /// </summary>
        public TimeSpan? SoftDeletePeriod { get; }
        /// <summary>
        /// The time the data should be kept in cache for fast queries in TimeSpan.
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.hotCachePeriod
        /// </summary>
        public TimeSpan? HotCachePeriod { get; set; }
        /// <summary>
        /// The statistics of the database.
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.statistics
        /// </summary>
        internal DatabaseStatistics Statistics { get; }
        /// <summary>
        /// The database size - the total size of compressed data and index in bytes.
        /// Serialized Name: DatabaseStatistics.size
        /// </summary>
        public float? StatisticsSize
        {
            get => Statistics?.Size;
        }

        /// <summary>
        /// The name of the leader cluster
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.leaderClusterResourceId
        /// </summary>
        public string LeaderClusterResourceId { get; }
        /// <summary>
        /// The name of the attached database configuration cluster
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.attachedDatabaseConfigurationName
        /// </summary>
        public string AttachedDatabaseConfigurationName { get; }
        /// <summary>
        /// The principals modification kind of the database
        /// Serialized Name: ReadOnlyFollowingDatabase.properties.principalsModificationKind
        /// </summary>
        public SynapsePrincipalsModificationKind? PrincipalsModificationKind { get; }
    }
}
