// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Synapse.Models
{
    internal static partial class SynapseGrantSqlControlToManagedIdentityStateExtensions
    {
        public static string ToSerialString(this SynapseGrantSqlControlToManagedIdentityState value) => value switch
        {
            SynapseGrantSqlControlToManagedIdentityState.Unknown => "Unknown",
            SynapseGrantSqlControlToManagedIdentityState.Enabling => "Enabling",
            SynapseGrantSqlControlToManagedIdentityState.Enabled => "Enabled",
            SynapseGrantSqlControlToManagedIdentityState.Disabling => "Disabling",
            SynapseGrantSqlControlToManagedIdentityState.Disabled => "Disabled",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown SynapseGrantSqlControlToManagedIdentityState value.")
        };

        public static SynapseGrantSqlControlToManagedIdentityState ToSynapseGrantSqlControlToManagedIdentityState(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unknown")) return SynapseGrantSqlControlToManagedIdentityState.Unknown;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Enabling")) return SynapseGrantSqlControlToManagedIdentityState.Enabling;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Enabled")) return SynapseGrantSqlControlToManagedIdentityState.Enabled;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Disabling")) return SynapseGrantSqlControlToManagedIdentityState.Disabling;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Disabled")) return SynapseGrantSqlControlToManagedIdentityState.Disabled;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown SynapseGrantSqlControlToManagedIdentityState value.");
        }
    }
}
