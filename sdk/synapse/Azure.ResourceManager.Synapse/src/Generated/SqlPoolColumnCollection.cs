// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Synapse
{
    /// <summary>
    /// A class representing a collection of <see cref="SqlPoolColumnResource" /> and their operations.
    /// Each <see cref="SqlPoolColumnResource" /> in the collection will belong to the same instance of <see cref="SqlPoolTableResource" />.
    /// To get a <see cref="SqlPoolColumnCollection" /> instance call the GetSqlPoolColumns method from an instance of <see cref="SqlPoolTableResource" />.
    /// </summary>
    public partial class SqlPoolColumnCollection : ArmCollection, IEnumerable<SqlPoolColumnResource>, IAsyncEnumerable<SqlPoolColumnResource>
    {
        private readonly ClientDiagnostics _sqlPoolColumnClientDiagnostics;
        private readonly SqlPoolColumnsRestOperations _sqlPoolColumnRestClient;
        private readonly ClientDiagnostics _sqlPoolColumnSqlPoolTableColumnsClientDiagnostics;
        private readonly SqlPoolTableColumnsRestOperations _sqlPoolColumnSqlPoolTableColumnsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SqlPoolColumnCollection"/> class for mocking. </summary>
        protected SqlPoolColumnCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SqlPoolColumnCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal SqlPoolColumnCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _sqlPoolColumnClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Synapse", SqlPoolColumnResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SqlPoolColumnResource.ResourceType, out string sqlPoolColumnApiVersion);
            _sqlPoolColumnRestClient = new SqlPoolColumnsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, sqlPoolColumnApiVersion);
            _sqlPoolColumnSqlPoolTableColumnsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Synapse", SqlPoolColumnResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SqlPoolColumnResource.ResourceType, out string sqlPoolColumnSqlPoolTableColumnsApiVersion);
            _sqlPoolColumnSqlPoolTableColumnsRestClient = new SqlPoolTableColumnsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, sqlPoolColumnSqlPoolTableColumnsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SqlPoolTableResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SqlPoolTableResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get Sql pool column
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}
        /// Operation Id: SqlPoolColumns_Get
        /// </summary>
        /// <param name="columnName"> The name of the column. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="columnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="columnName"/> is null. </exception>
        public virtual async Task<Response<SqlPoolColumnResource>> GetAsync(string columnName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(columnName, nameof(columnName));

            using var scope = _sqlPoolColumnClientDiagnostics.CreateScope("SqlPoolColumnCollection.Get");
            scope.Start();
            try
            {
                var response = await _sqlPoolColumnRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, columnName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SqlPoolColumnResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Sql pool column
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}
        /// Operation Id: SqlPoolColumns_Get
        /// </summary>
        /// <param name="columnName"> The name of the column. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="columnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="columnName"/> is null. </exception>
        public virtual Response<SqlPoolColumnResource> Get(string columnName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(columnName, nameof(columnName));

            using var scope = _sqlPoolColumnClientDiagnostics.CreateScope("SqlPoolColumnCollection.Get");
            scope.Start();
            try
            {
                var response = _sqlPoolColumnRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, columnName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SqlPoolColumnResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets columns in a given table in a SQL pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns
        /// Operation Id: SqlPoolTableColumns_ListByTableName
        /// </summary>
        /// <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SqlPoolColumnResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SqlPoolColumnResource> GetAllAsync(string filter = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SqlPoolColumnResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _sqlPoolColumnSqlPoolTableColumnsClientDiagnostics.CreateScope("SqlPoolColumnCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _sqlPoolColumnSqlPoolTableColumnsRestClient.ListByTableNameAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SqlPoolColumnResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SqlPoolColumnResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _sqlPoolColumnSqlPoolTableColumnsClientDiagnostics.CreateScope("SqlPoolColumnCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _sqlPoolColumnSqlPoolTableColumnsRestClient.ListByTableNameNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SqlPoolColumnResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Gets columns in a given table in a SQL pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns
        /// Operation Id: SqlPoolTableColumns_ListByTableName
        /// </summary>
        /// <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SqlPoolColumnResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SqlPoolColumnResource> GetAll(string filter = null, CancellationToken cancellationToken = default)
        {
            Page<SqlPoolColumnResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _sqlPoolColumnSqlPoolTableColumnsClientDiagnostics.CreateScope("SqlPoolColumnCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _sqlPoolColumnSqlPoolTableColumnsRestClient.ListByTableName(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SqlPoolColumnResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SqlPoolColumnResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _sqlPoolColumnSqlPoolTableColumnsClientDiagnostics.CreateScope("SqlPoolColumnCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _sqlPoolColumnSqlPoolTableColumnsRestClient.ListByTableNameNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, filter, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SqlPoolColumnResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}
        /// Operation Id: SqlPoolColumns_Get
        /// </summary>
        /// <param name="columnName"> The name of the column. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="columnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="columnName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string columnName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(columnName, nameof(columnName));

            using var scope = _sqlPoolColumnClientDiagnostics.CreateScope("SqlPoolColumnCollection.Exists");
            scope.Start();
            try
            {
                var response = await _sqlPoolColumnRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, columnName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}
        /// Operation Id: SqlPoolColumns_Get
        /// </summary>
        /// <param name="columnName"> The name of the column. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="columnName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="columnName"/> is null. </exception>
        public virtual Response<bool> Exists(string columnName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(columnName, nameof(columnName));

            using var scope = _sqlPoolColumnClientDiagnostics.CreateScope("SqlPoolColumnCollection.Exists");
            scope.Start();
            try
            {
                var response = _sqlPoolColumnRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, columnName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SqlPoolColumnResource> IEnumerable<SqlPoolColumnResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SqlPoolColumnResource> IAsyncEnumerable<SqlPoolColumnResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
