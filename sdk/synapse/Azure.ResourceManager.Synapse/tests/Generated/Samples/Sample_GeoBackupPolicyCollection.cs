// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_GeoBackupPolicyCollection
    {
        // Get Sql pool geo backup policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_GetSqlPoolGeoBackupPolicy()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolGeoBackupPolicies_List.json
            // this example is just showing the usage of "SqlPoolGeoBackupPolicies_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-4799";
            string workspaceName = "sqlcrudtest-5961";
            string sqlPoolName = "testdw";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // get the collection of this GeoBackupPolicyResource
            GeoBackupPolicyCollection collection = sqlPool.GetGeoBackupPolicies();

            // invoke the operation and iterate over the result
            await foreach (GeoBackupPolicyResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                GeoBackupPolicyData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Create geo backup policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateGeoBackupPolicy()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateGeoBackupPolicies.json
            // this example is just showing the usage of "SqlPoolGeoBackupPolicies_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "testrg";
            string workspaceName = "testws";
            string sqlPoolName = "testdw";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // get the collection of this GeoBackupPolicyResource
            GeoBackupPolicyCollection collection = sqlPool.GetGeoBackupPolicies();

            // invoke the operation
            GeoBackupPolicyName geoBackupPolicyName = GeoBackupPolicyName.Default;
            GeoBackupPolicyData data = new GeoBackupPolicyData(GeoBackupPolicyState.Enabled);
            ArmOperation<GeoBackupPolicyResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, geoBackupPolicyName, data);
            GeoBackupPolicyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GeoBackupPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get Sql pool geo backup policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetSqlPoolGeoBackupPolicy()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolGeoBackupPolicy.json
            // this example is just showing the usage of "SqlPoolGeoBackupPolicies_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-4799";
            string workspaceName = "sqlcrudtest-5961";
            string sqlPoolName = "testdw";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // get the collection of this GeoBackupPolicyResource
            GeoBackupPolicyCollection collection = sqlPool.GetGeoBackupPolicies();

            // invoke the operation
            GeoBackupPolicyName geoBackupPolicyName = GeoBackupPolicyName.Default;
            GeoBackupPolicyResource result = await collection.GetAsync(geoBackupPolicyName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            GeoBackupPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get Sql pool geo backup policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetSqlPoolGeoBackupPolicy()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolGeoBackupPolicy.json
            // this example is just showing the usage of "SqlPoolGeoBackupPolicies_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-4799";
            string workspaceName = "sqlcrudtest-5961";
            string sqlPoolName = "testdw";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // get the collection of this GeoBackupPolicyResource
            GeoBackupPolicyCollection collection = sqlPool.GetGeoBackupPolicies();

            // invoke the operation
            GeoBackupPolicyName geoBackupPolicyName = GeoBackupPolicyName.Default;
            bool result = await collection.ExistsAsync(geoBackupPolicyName);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
