// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_IntegrationRuntimeResourceCollection
    {
        // Get integration runtime
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetIntegrationRuntime()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Get.json
            // this example is just showing the usage of "IntegrationRuntimes_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string workspaceName = "exampleWorkspace";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this IntegrationRuntimeResource
            IntegrationRuntimeResourceCollection collection = workspace.GetIntegrationRuntimeResources();

            // invoke the operation
            string integrationRuntimeName = "exampleIntegrationRuntime";
            IntegrationRuntimeResource result = await collection.GetAsync(integrationRuntimeName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IntegrationRuntimeResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get integration runtime
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetIntegrationRuntime()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Get.json
            // this example is just showing the usage of "IntegrationRuntimes_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string workspaceName = "exampleWorkspace";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this IntegrationRuntimeResource
            IntegrationRuntimeResourceCollection collection = workspace.GetIntegrationRuntimeResources();

            // invoke the operation
            string integrationRuntimeName = "exampleIntegrationRuntime";
            bool result = await collection.ExistsAsync(integrationRuntimeName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Create integration runtime
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateIntegrationRuntime()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_Create.json
            // this example is just showing the usage of "IntegrationRuntimes_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string workspaceName = "exampleWorkspace";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this IntegrationRuntimeResource
            IntegrationRuntimeResourceCollection collection = workspace.GetIntegrationRuntimeResources();

            // invoke the operation
            string integrationRuntimeName = "exampleIntegrationRuntime";
            IntegrationRuntimeResourceData data = new IntegrationRuntimeResourceData(new IntegrationRuntime()
            {
                RuntimeType = IntegrationRuntimeType.SelfHosted,
                Description = "A selfhosted integration runtime",
            });
            ArmOperation<IntegrationRuntimeResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, integrationRuntimeName, data);
            IntegrationRuntimeResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            IntegrationRuntimeResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // List integration runtimes
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListIntegrationRuntimes()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/IntegrationRuntimes_ListByWorkspace.json
            // this example is just showing the usage of "IntegrationRuntimes_ListByWorkspace" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "12345678-1234-1234-1234-12345678abc";
            string resourceGroupName = "exampleResourceGroup";
            string workspaceName = "exampleWorkspace";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this IntegrationRuntimeResource
            IntegrationRuntimeResourceCollection collection = workspace.GetIntegrationRuntimeResources();

            // invoke the operation and iterate over the result
            await foreach (IntegrationRuntimeResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                IntegrationRuntimeResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
