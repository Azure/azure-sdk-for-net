// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_SqlPoolCollection
    {
        // Get a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPool.json
            // this example is just showing the usage of "SqlPools_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-6852";
            string workspaceName = "sqlcrudtest-2080";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this SqlPoolResource
            SqlPoolCollection collection = workspace.GetSqlPools();

            // invoke the operation
            string sqlPoolName = "sqlcrudtest-9187";
            SqlPoolResource result = await collection.GetAsync(sqlPoolName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPool.json
            // this example is just showing the usage of "SqlPools_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-6852";
            string workspaceName = "sqlcrudtest-2080";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this SqlPoolResource
            SqlPoolCollection collection = workspace.GetSqlPools();

            // invoke the operation
            string sqlPoolName = "sqlcrudtest-9187";
            bool result = await collection.ExistsAsync(sqlPoolName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Create a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPool.json
            // this example is just showing the usage of "SqlPools_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "01234567-89ab-4def-0123-456789abcdef";
            string resourceGroupName = "ExampleResourceGroup";
            string workspaceName = "ExampleWorkspace";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this SqlPoolResource
            SqlPoolCollection collection = workspace.GetSqlPools();

            // invoke the operation
            string sqlPoolName = "ExampleSqlPool";
            SqlPoolData data = new SqlPoolData(new AzureLocation("Southeast Asia"))
            {
                Sku = new SynapseSku()
                {
                    Tier = "",
                    Name = "",
                },
                MaxSizeBytes = 0,
                Collation = "",
                SourceDatabaseId = "",
                RecoverableDatabaseId = "",
                CreateMode = new CreateMode(""),
                StorageAccountType = StorageAccountType.LRS,
                Tags =
{
},
            };
            ArmOperation<SqlPoolResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sqlPoolName, data);
            SqlPoolResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // List SQL Analytics pools in a workspace
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListSQLAnalyticsPoolsInAWorkspace()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsInWorkspace.json
            // this example is just showing the usage of "SqlPools_ListByWorkspace" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-6845";
            string workspaceName = "sqlcrudtest-7177";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this SqlPoolResource
            SqlPoolCollection collection = workspace.GetSqlPools();

            // invoke the operation and iterate over the result
            await foreach (SqlPoolResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SqlPoolData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List SQL Analytics pools in a workspace with filter
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListSQLAnalyticsPoolsInAWorkspaceWithFilter()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsInWorkspaceWithFilter.json
            // this example is just showing the usage of "SqlPools_ListByWorkspace" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-6845";
            string workspaceName = "sqlcrudtest-7177";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this SqlPoolResource
            SqlPoolCollection collection = workspace.GetSqlPools();

            // invoke the operation and iterate over the result
            await foreach (SqlPoolResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SqlPoolData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
