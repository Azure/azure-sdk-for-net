// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_MetadataSyncConfigResource
    {
        // Get metadata sync config for a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetMetadataSyncConfigForASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolMetadataSyncConfig.json
            // this example is just showing the usage of "SqlPoolMetadataSyncConfigs_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this MetadataSyncConfigResource created on azure
            // for more information of creating MetadataSyncConfigResource, please refer to the document of MetadataSyncConfigResource
            string subscriptionId = "01234567-89ab-4def-0123-456789abcdef";
            string resourceGroupName = "ExampleResourceGroup";
            string workspaceName = "ExampleWorkspace";
            string sqlPoolName = "ExampleSqlPool";
            ResourceIdentifier metadataSyncConfigResourceId = MetadataSyncConfigResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            MetadataSyncConfigResource metadataSyncConfig = client.GetMetadataSyncConfigResource(metadataSyncConfigResourceId);

            // invoke the operation
            MetadataSyncConfigResource result = await metadataSyncConfig.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MetadataSyncConfigData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Set metadata sync config for a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SetMetadataSyncConfigForASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolMetadataSyncConfig.json
            // this example is just showing the usage of "SqlPoolMetadataSyncConfigs_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this MetadataSyncConfigResource created on azure
            // for more information of creating MetadataSyncConfigResource, please refer to the document of MetadataSyncConfigResource
            string subscriptionId = "01234567-89ab-4def-0123-456789abcdef";
            string resourceGroupName = "ExampleResourceGroup";
            string workspaceName = "ExampleWorkspace";
            string sqlPoolName = "ExampleSqlPool";
            ResourceIdentifier metadataSyncConfigResourceId = MetadataSyncConfigResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            MetadataSyncConfigResource metadataSyncConfig = client.GetMetadataSyncConfigResource(metadataSyncConfigResourceId);

            // invoke the operation
            MetadataSyncConfigData data = new MetadataSyncConfigData()
            {
                Enabled = true,
            };
            ArmOperation<MetadataSyncConfigResource> lro = await metadataSyncConfig.CreateOrUpdateAsync(WaitUntil.Completed, data);
            MetadataSyncConfigResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            MetadataSyncConfigData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
