// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_RecoverableSqlPoolCollection
    {
        // List recoverable sql pools for the server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListRecoverableSqlPoolsForTheServer()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListWorkspaceManagedSqlServerRecoverableSqlPool.json
            // this example is just showing the usage of "WorkspaceManagedSqlServerRecoverableSqlPools_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "wsg-7398";
            string workspaceName = "testWorkspace";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this RecoverableSqlPoolResource
            RecoverableSqlPoolCollection collection = workspace.GetRecoverableSqlPools();

            // invoke the operation and iterate over the result
            await foreach (RecoverableSqlPoolResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                RecoverableSqlPoolData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get recoverable sql pools for the server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetRecoverableSqlPoolsForTheServer()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerRecoverableSqlPool.json
            // this example is just showing the usage of "WorkspaceManagedSqlServerRecoverableSqlPools_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "wsg-7398";
            string workspaceName = "testWorkspace";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this RecoverableSqlPoolResource
            RecoverableSqlPoolCollection collection = workspace.GetRecoverableSqlPools();

            // invoke the operation
            string sqlPoolName = "recoverableSqlpools-1235";
            RecoverableSqlPoolResource result = await collection.GetAsync(sqlPoolName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RecoverableSqlPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get recoverable sql pools for the server
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetRecoverableSqlPoolsForTheServer()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetWorkspaceManagedSqlServerRecoverableSqlPool.json
            // this example is just showing the usage of "WorkspaceManagedSqlServerRecoverableSqlPools_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this WorkspaceResource created on azure
            // for more information of creating WorkspaceResource, please refer to the document of WorkspaceResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "wsg-7398";
            string workspaceName = "testWorkspace";
            ResourceIdentifier workspaceResourceId = WorkspaceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName);
            WorkspaceResource workspace = client.GetWorkspaceResource(workspaceResourceId);

            // get the collection of this RecoverableSqlPoolResource
            RecoverableSqlPoolCollection collection = workspace.GetRecoverableSqlPools();

            // invoke the operation
            string sqlPoolName = "recoverableSqlpools-1235";
            bool result = await collection.ExistsAsync(sqlPoolName);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
