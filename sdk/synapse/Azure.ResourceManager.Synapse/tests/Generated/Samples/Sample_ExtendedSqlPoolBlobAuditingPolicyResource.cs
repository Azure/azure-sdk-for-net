// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_ExtendedSqlPoolBlobAuditingPolicyResource
    {
        // Get an extended database's blob auditing policy
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAnExtendedDatabaseSBlobAuditingPolicy()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingGet.json
            // this example is just showing the usage of "ExtendedSqlPoolBlobAuditingPolicies_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ExtendedSqlPoolBlobAuditingPolicyResource created on azure
            // for more information of creating ExtendedSqlPoolBlobAuditingPolicyResource, please refer to the document of ExtendedSqlPoolBlobAuditingPolicyResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "blobauditingtest-6852";
            string workspaceName = "blobauditingtest-2080";
            string sqlPoolName = "testdb";
            ResourceIdentifier extendedSqlPoolBlobAuditingPolicyResourceId = ExtendedSqlPoolBlobAuditingPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            ExtendedSqlPoolBlobAuditingPolicyResource extendedSqlPoolBlobAuditingPolicy = client.GetExtendedSqlPoolBlobAuditingPolicyResource(extendedSqlPoolBlobAuditingPolicyResourceId);

            // invoke the operation
            ExtendedSqlPoolBlobAuditingPolicyResource result = await extendedSqlPoolBlobAuditingPolicy.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExtendedSqlPoolBlobAuditingPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create or update an extended SQL pool's azure monitor auditing policy with minimal parameters
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateAnExtendedSQLPoolSAzureMonitorAuditingPolicyWithMinimalParameters()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolAzureMonitorAuditingCreateMin.json
            // this example is just showing the usage of "ExtendedSqlPoolBlobAuditingPolicies_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ExtendedSqlPoolBlobAuditingPolicyResource created on azure
            // for more information of creating ExtendedSqlPoolBlobAuditingPolicyResource, please refer to the document of ExtendedSqlPoolBlobAuditingPolicyResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "blobauditingtest-4799";
            string workspaceName = "blobauditingtest-6440";
            string sqlPoolName = "testdb";
            ResourceIdentifier extendedSqlPoolBlobAuditingPolicyResourceId = ExtendedSqlPoolBlobAuditingPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            ExtendedSqlPoolBlobAuditingPolicyResource extendedSqlPoolBlobAuditingPolicy = client.GetExtendedSqlPoolBlobAuditingPolicyResource(extendedSqlPoolBlobAuditingPolicyResourceId);

            // invoke the operation
            ExtendedSqlPoolBlobAuditingPolicyData data = new ExtendedSqlPoolBlobAuditingPolicyData()
            {
                State = BlobAuditingPolicyState.Enabled,
                IsAzureMonitorTargetEnabled = true,
            };
            ArmOperation<ExtendedSqlPoolBlobAuditingPolicyResource> lro = await extendedSqlPoolBlobAuditingPolicy.CreateOrUpdateAsync(WaitUntil.Completed, data);
            ExtendedSqlPoolBlobAuditingPolicyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExtendedSqlPoolBlobAuditingPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create or update an extended Sql pool's blob auditing policy with all parameters
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateAnExtendedSqlPoolSBlobAuditingPolicyWithAllParameters()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingCreateMax.json
            // this example is just showing the usage of "ExtendedSqlPoolBlobAuditingPolicies_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ExtendedSqlPoolBlobAuditingPolicyResource created on azure
            // for more information of creating ExtendedSqlPoolBlobAuditingPolicyResource, please refer to the document of ExtendedSqlPoolBlobAuditingPolicyResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "blobauditingtest-4799";
            string workspaceName = "blobauditingtest-6440";
            string sqlPoolName = "testdb";
            ResourceIdentifier extendedSqlPoolBlobAuditingPolicyResourceId = ExtendedSqlPoolBlobAuditingPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            ExtendedSqlPoolBlobAuditingPolicyResource extendedSqlPoolBlobAuditingPolicy = client.GetExtendedSqlPoolBlobAuditingPolicyResource(extendedSqlPoolBlobAuditingPolicyResourceId);

            // invoke the operation
            ExtendedSqlPoolBlobAuditingPolicyData data = new ExtendedSqlPoolBlobAuditingPolicyData()
            {
                PredicateExpression = "statement = 'select 1'",
                State = BlobAuditingPolicyState.Enabled,
                StorageEndpoint = "https://mystorage.blob.core.windows.net",
                StorageAccountAccessKey = "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
                RetentionDays = 6,
                AuditActionsAndGroups =
{
"DATABASE_LOGOUT_GROUP","DATABASE_ROLE_MEMBER_CHANGE_GROUP","UPDATE on database::TestDatabaseName by public"
},
                StorageAccountSubscriptionId = Guid.Parse("00000000-1234-0000-5678-000000000000"),
                IsStorageSecondaryKeyInUse = false,
                IsAzureMonitorTargetEnabled = true,
            };
            ArmOperation<ExtendedSqlPoolBlobAuditingPolicyResource> lro = await extendedSqlPoolBlobAuditingPolicy.CreateOrUpdateAsync(WaitUntil.Completed, data);
            ExtendedSqlPoolBlobAuditingPolicyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExtendedSqlPoolBlobAuditingPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create or update an extended Sql pool's blob auditing policy with minimal parameters
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateOrUpdateAnExtendedSqlPoolSBlobAuditingPolicyWithMinimalParameters()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExtendedSqlPoolBlobAuditingCreateMin.json
            // this example is just showing the usage of "ExtendedSqlPoolBlobAuditingPolicies_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ExtendedSqlPoolBlobAuditingPolicyResource created on azure
            // for more information of creating ExtendedSqlPoolBlobAuditingPolicyResource, please refer to the document of ExtendedSqlPoolBlobAuditingPolicyResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "blobauditingtest-4799";
            string workspaceName = "blobauditingtest-6440";
            string sqlPoolName = "testdb";
            ResourceIdentifier extendedSqlPoolBlobAuditingPolicyResourceId = ExtendedSqlPoolBlobAuditingPolicyResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            ExtendedSqlPoolBlobAuditingPolicyResource extendedSqlPoolBlobAuditingPolicy = client.GetExtendedSqlPoolBlobAuditingPolicyResource(extendedSqlPoolBlobAuditingPolicyResourceId);

            // invoke the operation
            ExtendedSqlPoolBlobAuditingPolicyData data = new ExtendedSqlPoolBlobAuditingPolicyData()
            {
                State = BlobAuditingPolicyState.Enabled,
                StorageEndpoint = "https://mystorage.blob.core.windows.net",
                StorageAccountAccessKey = "sdlfkjabc+sdlfkjsdlkfsjdfLDKFTERLKFDFKLjsdfksjdflsdkfD2342309432849328476458/3RSD==",
            };
            ArmOperation<ExtendedSqlPoolBlobAuditingPolicyResource> lro = await extendedSqlPoolBlobAuditingPolicy.CreateOrUpdateAsync(WaitUntil.Completed, data);
            ExtendedSqlPoolBlobAuditingPolicyResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExtendedSqlPoolBlobAuditingPolicyData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
