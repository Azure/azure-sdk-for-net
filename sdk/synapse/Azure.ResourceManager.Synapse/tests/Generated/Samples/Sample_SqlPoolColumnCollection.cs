// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_SqlPoolColumnCollection
    {
        // List the columns in a table of a given schema in a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListTheColumnsInATableOfAGivenSchemaInASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolColumns.json
            // this example is just showing the usage of "SqlPoolTableColumns_ListByTableName" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolTableResource created on azure
            // for more information of creating SqlPoolTableResource, please refer to the document of SqlPoolTableResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "serverName";
            string sqlPoolName = "myDatabase";
            string schemaName = "dbo";
            string tableName = "table1";
            ResourceIdentifier sqlPoolTableResourceId = SqlPoolTableResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName);
            SqlPoolTableResource sqlPoolTable = client.GetSqlPoolTableResource(sqlPoolTableResourceId);

            // get the collection of this SqlPoolColumnResource
            SqlPoolColumnCollection collection = sqlPoolTable.GetSqlPoolColumns();

            // invoke the operation and iterate over the result
            await foreach (SqlPoolColumnResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SqlPoolColumnData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get database column
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetDatabaseColumn()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolColumnGet.json
            // this example is just showing the usage of "SqlPoolColumns_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolTableResource created on azure
            // for more information of creating SqlPoolTableResource, please refer to the document of SqlPoolTableResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "serverName";
            string sqlPoolName = "myDatabase";
            string schemaName = "dbo";
            string tableName = "table1";
            ResourceIdentifier sqlPoolTableResourceId = SqlPoolTableResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName);
            SqlPoolTableResource sqlPoolTable = client.GetSqlPoolTableResource(sqlPoolTableResourceId);

            // get the collection of this SqlPoolColumnResource
            SqlPoolColumnCollection collection = sqlPoolTable.GetSqlPoolColumns();

            // invoke the operation
            string columnName = "column1";
            SqlPoolColumnResource result = await collection.GetAsync(columnName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlPoolColumnData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get database column
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetDatabaseColumn()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolColumnGet.json
            // this example is just showing the usage of "SqlPoolColumns_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolTableResource created on azure
            // for more information of creating SqlPoolTableResource, please refer to the document of SqlPoolTableResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "serverName";
            string sqlPoolName = "myDatabase";
            string schemaName = "dbo";
            string tableName = "table1";
            ResourceIdentifier sqlPoolTableResourceId = SqlPoolTableResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName);
            SqlPoolTableResource sqlPoolTable = client.GetSqlPoolTableResource(sqlPoolTableResourceId);

            // get the collection of this SqlPoolColumnResource
            SqlPoolColumnCollection collection = sqlPoolTable.GetSqlPoolColumns();

            // invoke the operation
            string columnName = "column1";
            bool result = await collection.ExistsAsync(columnName);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
