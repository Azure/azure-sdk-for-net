// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_VulnerabilityAssessmentScanRecordResource
    {
        // Executes a Sql pool's vulnerability assessment scan.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task InitiateScan_ExecutesASqlPoolSVulnerabilityAssessmentScan()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExecuteSqlPoolVulnerabilityAssessmentScans.json
            // this example is just showing the usage of "SqlPoolVulnerabilityAssessmentScans_InitiateScan" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this VulnerabilityAssessmentScanRecordResource created on azure
            // for more information of creating VulnerabilityAssessmentScanRecordResource, please refer to the document of VulnerabilityAssessmentScanRecordResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "vulnerabilityassessmenttest-4711";
            string workspaceName = "vulnerabilityassessmenttest-6411";
            string sqlPoolName = "testdb";
            VulnerabilityAssessmentName vulnerabilityAssessmentName = VulnerabilityAssessmentName.Default;
            string scanId = "scan01";
            ResourceIdentifier vulnerabilityAssessmentScanRecordResourceId = VulnerabilityAssessmentScanRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, vulnerabilityAssessmentName, scanId);
            VulnerabilityAssessmentScanRecordResource vulnerabilityAssessmentScanRecord = client.GetVulnerabilityAssessmentScanRecordResource(vulnerabilityAssessmentScanRecordResourceId);

            // invoke the operation
            await vulnerabilityAssessmentScanRecord.InitiateScanAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Export a database's vulnerability assessment scan results.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Export_ExportADatabaseSVulnerabilityAssessmentScanResults()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ExportSqlPoolVulnerabilityAssessmentScan.json
            // this example is just showing the usage of "SqlPoolVulnerabilityAssessmentScans_Export" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this VulnerabilityAssessmentScanRecordResource created on azure
            // for more information of creating VulnerabilityAssessmentScanRecordResource, please refer to the document of VulnerabilityAssessmentScanRecordResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "vulnerabilityassessmenttest-4799";
            string workspaceName = "vulnerabilityassessmenttest-6440";
            string sqlPoolName = "testdb";
            VulnerabilityAssessmentName vulnerabilityAssessmentName = VulnerabilityAssessmentName.Default;
            string scanId = "scan001";
            ResourceIdentifier vulnerabilityAssessmentScanRecordResourceId = VulnerabilityAssessmentScanRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, vulnerabilityAssessmentName, scanId);
            VulnerabilityAssessmentScanRecordResource vulnerabilityAssessmentScanRecord = client.GetVulnerabilityAssessmentScanRecordResource(vulnerabilityAssessmentScanRecordResourceId);

            // invoke the operation
            SqlPoolVulnerabilityAssessmentScansExport result = await vulnerabilityAssessmentScanRecord.ExportAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        // Gets a database vulnerability assessment scan record by scan ID
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsADatabaseVulnerabilityAssessmentScanRecordByScanID()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolVulnerabilityAssessmentScanRecordsGet.json
            // this example is just showing the usage of "SqlPoolVulnerabilityAssessmentScans_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this VulnerabilityAssessmentScanRecordResource created on azure
            // for more information of creating VulnerabilityAssessmentScanRecordResource, please refer to the document of VulnerabilityAssessmentScanRecordResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "vulnerabilityassessmenttest-4711";
            string workspaceName = "vulnerabilityassessmenttest-6411";
            string sqlPoolName = "testdb";
            VulnerabilityAssessmentName vulnerabilityAssessmentName = VulnerabilityAssessmentName.Default;
            string scanId = "scan001";
            ResourceIdentifier vulnerabilityAssessmentScanRecordResourceId = VulnerabilityAssessmentScanRecordResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, vulnerabilityAssessmentName, scanId);
            VulnerabilityAssessmentScanRecordResource vulnerabilityAssessmentScanRecord = client.GetVulnerabilityAssessmentScanRecordResource(vulnerabilityAssessmentScanRecordResourceId);

            // invoke the operation
            VulnerabilityAssessmentScanRecordResource result = await vulnerabilityAssessmentScanRecord.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VulnerabilityAssessmentScanRecordData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
