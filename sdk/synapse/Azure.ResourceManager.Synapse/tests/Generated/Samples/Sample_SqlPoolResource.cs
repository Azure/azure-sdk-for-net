// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_SqlPoolResource
    {
        // Get a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPool.json
            // this example is just showing the usage of "SqlPools_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-6852";
            string workspaceName = "sqlcrudtest-2080";
            string sqlPoolName = "sqlcrudtest-9187";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            SqlPoolResource result = await sqlPool.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Update a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/UpdateSqlPool.json
            // this example is just showing the usage of "SqlPools_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "01234567-89ab-4def-0123-456789abcdef";
            string resourceGroupName = "ExampleResourceGroup";
            string workspaceName = "ExampleWorkspace";
            string sqlPoolName = "ExampleSqlPool";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            SqlPoolPatch patch = new SqlPoolPatch()
            {
                Tags =
{
},
                Location = new AzureLocation("West US 2"),
                Sku = new SynapseSku()
                {
                    Tier = "",
                    Name = "",
                },
                MaxSizeBytes = 0,
                Collation = "",
                RestorePointInTime = DateTimeOffset.Parse("1970-01-01T00:00:00.000Z"),
            };
            SqlPoolResource result = await sqlPool.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SqlPoolData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPool.json
            // this example is just showing the usage of "SqlPools_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "01234567-89ab-4def-0123-456789abcdef";
            string resourceGroupName = "ExampleResourceGroup";
            string workspaceName = "ExampleWorkspace";
            string sqlPoolName = "ExampleSqlPool";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            ArmOperation<BinaryData> lro = await sqlPool.DeleteAsync(WaitUntil.Completed);
            BinaryData result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Pause a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Pause_PauseASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/PauseSqlPool.json
            // this example is just showing the usage of "SqlPools_Pause" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "01234567-89ab-4def-0123-456789abcdef";
            string resourceGroupName = "Default-SQL-SouthEastAsia";
            string workspaceName = "testsvr";
            string sqlPoolName = "testdwdb";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            ArmOperation<BinaryData> lro = await sqlPool.PauseAsync(WaitUntil.Completed);
            BinaryData result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Resume a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Resume_ResumeASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ResumeSqlPool.json
            // this example is just showing the usage of "SqlPools_Resume" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "01234567-89ab-4def-0123-456789abcdef";
            string resourceGroupName = "sqlcrudtest-6852";
            string workspaceName = "sqlcrudtest-2080";
            string sqlPoolName = "sqlcrudtest-9187";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            ArmOperation<BinaryData> lro = await sqlPool.ResumeAsync(WaitUntil.Completed);
            BinaryData result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // Rename a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Rename_RenameASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RenameSqlPool.json
            // this example is just showing the usage of "SqlPools_Rename" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "Default-SQL-SouthEastAsia";
            string workspaceName = "testsvr";
            string sqlPoolName = "testdb";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            ResourceMoveDefinition resourceMoveDefinition = new ResourceMoveDefinition("/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Synapse/workspaces/testsvr/sqlPools/newtestdb");
            await sqlPool.RenameAsync(resourceMoveDefinition);

            Console.WriteLine($"Succeeded");
        }

        // Get the result of an operation on a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetLocationHeaderResultSqlPoolOperationResult_GetTheResultOfAnOperationOnASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetLocationHeaderResultWithSqlPool.json
            // this example is just showing the usage of "SqlPoolOperationResults_GetLocationHeaderResult" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "01234567-89ab-4def-0123-456789abcdef";
            string resourceGroupName = "ExampleResourceGroup";
            string workspaceName = "ExampleWorkspace";
            string sqlPoolName = "ExampleSqlPool";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            string operationId = "fedcba98-7654-4210-fedc-ba9876543210";
            BinaryData result = await sqlPool.GetLocationHeaderResultSqlPoolOperationResultAsync(operationId);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Creates Sql pool restore point.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateSqlPoolRestorePoint_CreatesSqlPoolRestorePoint()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateSqlPoolRestorePoints.json
            // this example is just showing the usage of "SqlPoolRestorePoints_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "Default-SQL-SouthEastAsia";
            string workspaceName = "testserver";
            string sqlPoolName = "testDatabase";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            CreateSqlPoolRestorePointDefinition createSqlPoolRestorePointDefinition = new CreateSqlPoolRestorePointDefinition("mylabel");
            ArmOperation<RestorePointResource> lro = await sqlPool.CreateSqlPoolRestorePointAsync(WaitUntil.Completed, createSqlPoolRestorePointDefinition);
            RestorePointResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            RestorePointData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // List the Sql Analytics pool management operations
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSqlPoolOperations_ListTheSqlAnalyticsPoolManagementOperations()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolOperations.json
            // this example is just showing the usage of "SqlPoolOperations_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-7398";
            string workspaceName = "sqlcrudtest-4645";
            string sqlPoolName = "testdb";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation and iterate over the result
            await foreach (SqlPoolOperation item in sqlPool.GetSqlPoolOperationsAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // List the usages of a SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetSqlPoolUsages_ListTheUsagesOfASQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SqlPoolUsageMetricsList.json
            // this example is just showing the usage of "SqlPoolUsages_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "sqlcrudtest-6730";
            string workspaceName = "sqlcrudtest-9007";
            string sqlPoolName = "3481";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation and iterate over the result
            await foreach (SqlPoolUsage item in sqlPool.GetSqlPoolUsagesAsync())
            {
                Console.WriteLine($"Succeeded: {item}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Gets the current sensitivity labels of a given SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetCurrentSqlPoolSensitivityLabels_GetsTheCurrentSensitivityLabelsOfAGivenSQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsSensitivityLabelsWithSourceCurrent.json
            // this example is just showing the usage of "SqlPoolSensitivityLabels_ListCurrent" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "myServer";
            string sqlPoolName = "myDatabase";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation and iterate over the result
            await foreach (SensitivityLabelResource item in sqlPool.GetCurrentSqlPoolSensitivityLabelsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SensitivityLabelData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Update sensitivity labels of a given database using an operations batch.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UpdateSqlPoolSensitivityLabel_UpdateSensitivityLabelsOfAGivenDatabaseUsingAnOperationsBatch()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SensitivityLabelsCurrentUpdate.json
            // this example is just showing the usage of "SqlPoolSensitivityLabels_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "myWorkspace";
            string sqlPoolName = "mySqlPool";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            SensitivityLabelUpdateList sensitivityLabelUpdateList = new SensitivityLabelUpdateList()
            {
                Operations =
{
new SensitivityLabelUpdate()
{
Op = SensitivityLabelUpdateKind.Set,
Schema = "dbo",
Table = "table1",
Column = "column1",
SensitivityLabel = new SensitivityLabelData()
{
LabelName = "Highly Confidential",
LabelId = "3A477B16-9423-432B-AA97-6069B481CEC3",
InformationType = "Financial",
InformationTypeId = "1D3652D6-422C-4115-82F1-65DAEBC665C8",
Rank = SensitivityLabelRank.Low,
},
},new SensitivityLabelUpdate()
{
Op = SensitivityLabelUpdateKind.Set,
Schema = "dbo",
Table = "table2",
Column = "column2",
SensitivityLabel = new SensitivityLabelData()
{
LabelName = "PII",
LabelId = "bf91e08c-f4f0-478a-b016-25164b2a65ff",
InformationType = "PhoneNumber",
InformationTypeId = "d22fa6e9-5ee4-3bde-4c2b-a409604c4646",
Rank = SensitivityLabelRank.Critical,
},
},new SensitivityLabelUpdate()
{
Op = SensitivityLabelUpdateKind.Remove,
Schema = "dbo",
Table = "Table1",
Column = "Column3",
}
},
            };
            await sqlPool.UpdateSqlPoolSensitivityLabelAsync(sensitivityLabelUpdateList);

            Console.WriteLine($"Succeeded");
        }

        // Gets the recommended sensitivity labels of a given SQL Analytics pool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetRecommendedSqlPoolSensitivityLabels_GetsTheRecommendedSensitivityLabelsOfAGivenSQLAnalyticsPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolSensitivityLabelsWithSourceRecommended.json
            // this example is just showing the usage of "SqlPoolSensitivityLabels_ListRecommended" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "myServer";
            string sqlPoolName = "myDatabase";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation and iterate over the result
            await foreach (SensitivityLabelResource item in sqlPool.GetRecommendedSqlPoolSensitivityLabelsAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SensitivityLabelData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Update recommended sensitivity labels of a given SQL Pool using an operations batch.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task UpdateSqlPoolRecommendedSensitivityLabel_UpdateRecommendedSensitivityLabelsOfAGivenSQLPoolUsingAnOperationsBatch()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SensitivityLabelsRecommendedUpdate.json
            // this example is just showing the usage of "SqlPoolRecommendedSensitivityLabels_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolResource created on azure
            // for more information of creating SqlPoolResource, please refer to the document of SqlPoolResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "myWorkspace";
            string sqlPoolName = "mySqlPool";
            ResourceIdentifier sqlPoolResourceId = SqlPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName);
            SqlPoolResource sqlPool = client.GetSqlPoolResource(sqlPoolResourceId);

            // invoke the operation
            RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList = new RecommendedSensitivityLabelUpdateList()
            {
                Operations =
{
new RecommendedSensitivityLabelUpdate()
{
Op = RecommendedSensitivityLabelUpdateKind.Enable,
Schema = "dbo",
Table = "table1",
Column = "column1",
},new RecommendedSensitivityLabelUpdate()
{
Op = RecommendedSensitivityLabelUpdateKind.Enable,
Schema = "dbo",
Table = "table2",
Column = "column2",
},new RecommendedSensitivityLabelUpdate()
{
Op = RecommendedSensitivityLabelUpdateKind.Disable,
Schema = "dbo",
Table = "table1",
Column = "column3",
}
},
            };
            await sqlPool.UpdateSqlPoolRecommendedSensitivityLabelAsync(recommendedSensitivityLabelUpdateList);

            Console.WriteLine($"Succeeded");
        }
    }
}
