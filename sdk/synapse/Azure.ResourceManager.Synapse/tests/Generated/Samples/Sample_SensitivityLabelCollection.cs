// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_SensitivityLabelCollection
    {
        // Updates the sensitivity label of a given column with all parameters
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_UpdatesTheSensitivityLabelOfAGivenColumnWithAllParameters()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolColumnSensitivityLabelWithAllParameters.json
            // this example is just showing the usage of "SqlPoolSensitivityLabels_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolColumnResource created on azure
            // for more information of creating SqlPoolColumnResource, please refer to the document of SqlPoolColumnResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "myServer";
            string sqlPoolName = "myDatabase";
            string schemaName = "dbo";
            string tableName = "myTable";
            string columnName = "myColumn";
            ResourceIdentifier sqlPoolColumnResourceId = SqlPoolColumnResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName, columnName);
            SqlPoolColumnResource sqlPoolColumn = client.GetSqlPoolColumnResource(sqlPoolColumnResourceId);

            // get the collection of this SensitivityLabelResource
            SensitivityLabelCollection collection = sqlPoolColumn.GetSensitivityLabels();

            // invoke the operation
            SensitivityLabelData data = new SensitivityLabelData()
            {
                LabelName = "PII",
                LabelId = "bf91e08c-f4f0-478a-b016-25164b2a65ff",
                InformationType = "PhoneNumber",
                InformationTypeId = "d22fa6e9-5ee4-3bde-4c2b-a409604c4646",
            };
            ArmOperation<SensitivityLabelResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, data);
            SensitivityLabelResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SensitivityLabelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets the sensitivity label of a given column
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetsTheSensitivityLabelOfAGivenColumn()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolColumnSensitivityLabelGet.json
            // this example is just showing the usage of "SqlPoolSensitivityLabels_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolColumnResource created on azure
            // for more information of creating SqlPoolColumnResource, please refer to the document of SqlPoolColumnResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "myServer";
            string sqlPoolName = "myDatabase";
            string schemaName = "dbo";
            string tableName = "myTable";
            string columnName = "myColumn";
            ResourceIdentifier sqlPoolColumnResourceId = SqlPoolColumnResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName, columnName);
            SqlPoolColumnResource sqlPoolColumn = client.GetSqlPoolColumnResource(sqlPoolColumnResourceId);

            // get the collection of this SensitivityLabelResource
            SensitivityLabelCollection collection = sqlPoolColumn.GetSensitivityLabels();

            // invoke the operation
            SensitivityLabelSource sensitivityLabelSource = SensitivityLabelSource.Current;
            SensitivityLabelResource result = await collection.GetAsync(sensitivityLabelSource);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SensitivityLabelData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Gets the sensitivity label of a given column
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetsTheSensitivityLabelOfAGivenColumn()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolColumnSensitivityLabelGet.json
            // this example is just showing the usage of "SqlPoolSensitivityLabels_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SqlPoolColumnResource created on azure
            // for more information of creating SqlPoolColumnResource, please refer to the document of SqlPoolColumnResource
            string subscriptionId = "00000000-1111-2222-3333-444444444444";
            string resourceGroupName = "myRG";
            string workspaceName = "myServer";
            string sqlPoolName = "myDatabase";
            string schemaName = "dbo";
            string tableName = "myTable";
            string columnName = "myColumn";
            ResourceIdentifier sqlPoolColumnResourceId = SqlPoolColumnResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName, columnName);
            SqlPoolColumnResource sqlPoolColumn = client.GetSqlPoolColumnResource(sqlPoolColumnResourceId);

            // get the collection of this SensitivityLabelResource
            SensitivityLabelCollection collection = sqlPoolColumn.GetSensitivityLabels();

            // invoke the operation
            SensitivityLabelSource sensitivityLabelSource = SensitivityLabelSource.Current;
            bool result = await collection.ExistsAsync(sensitivityLabelSource);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
