// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_DatabaseResource
    {
        // KustoPoolDatabasesGet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_KustoPoolDatabasesGet()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesGet.json
            // this example is just showing the usage of "KustoPoolDatabases_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DatabaseResource created on azure
            // for more information of creating DatabaseResource, please refer to the document of DatabaseResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "synapseWorkspaceName";
            string kustoPoolName = "kustoclusterrptest4";
            string databaseName = "KustoDatabase8";
            ResourceIdentifier databaseResourceId = DatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName, databaseName);
            DatabaseResource database = client.GetDatabaseResource(databaseResourceId);

            // invoke the operation
            DatabaseResource result = await database.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // KustoPoolDatabasesUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_KustoPoolDatabasesUpdate()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesUpdate.json
            // this example is just showing the usage of "KustoPoolDatabases_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DatabaseResource created on azure
            // for more information of creating DatabaseResource, please refer to the document of DatabaseResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "synapseWorkspaceName";
            string kustoPoolName = "kustoclusterrptest4";
            string databaseName = "KustoDatabase8";
            ResourceIdentifier databaseResourceId = DatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName, databaseName);
            DatabaseResource database = client.GetDatabaseResource(databaseResourceId);

            // invoke the operation
            DatabaseData data = new DatabaseData()
            {
                Kind = SynapseKind.ReadWrite,
            };
            ArmOperation<DatabaseResource> lro = await database.UpdateAsync(WaitUntil.Completed, data);
            DatabaseResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DatabaseData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // KustoPoolDatabasesDelete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_KustoPoolDatabasesDelete()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasesDelete.json
            // this example is just showing the usage of "KustoPoolDatabases_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DatabaseResource created on azure
            // for more information of creating DatabaseResource, please refer to the document of DatabaseResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "synapseWorkspaceName";
            string kustoPoolName = "kustoclusterrptest4";
            string databaseName = "KustoDatabase8";
            ResourceIdentifier databaseResourceId = DatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName, databaseName);
            DatabaseResource database = client.GetDatabaseResource(databaseResourceId);

            // invoke the operation
            await database.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // KustoPoolDataConnectionsCheckNameAvailability
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CheckNameAvailabilityKustoPoolDataConnection_KustoPoolDataConnectionsCheckNameAvailability()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionsCheckNameAvailability.json
            // this example is just showing the usage of "KustoPoolDataConnections_CheckNameAvailability" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DatabaseResource created on azure
            // for more information of creating DatabaseResource, please refer to the document of DatabaseResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "synapseWorkspaceName";
            string kustoPoolName = "kustoclusterrptest4";
            string databaseName = "Kustodatabase8";
            ResourceIdentifier databaseResourceId = DatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName, databaseName);
            DatabaseResource database = client.GetDatabaseResource(databaseResourceId);

            // invoke the operation
            DataConnectionCheckNameContent content = new DataConnectionCheckNameContent("DataConnections8");
            CheckNameResult result = await database.CheckNameAvailabilityKustoPoolDataConnectionAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }

        // KustoPoolDataConnectionValidation
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task DataConnectionValidationKustoPoolDataConnection_KustoPoolDataConnectionValidation()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDataConnectionValidation.json
            // this example is just showing the usage of "KustoPoolDataConnections_dataConnectionValidation" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DatabaseResource created on azure
            // for more information of creating DatabaseResource, please refer to the document of DatabaseResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "kustorptest";
            string kustoPoolName = "kustoclusterrptest4";
            string databaseName = "KustoDatabase8";
            ResourceIdentifier databaseResourceId = DatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName, databaseName);
            DatabaseResource database = client.GetDatabaseResource(databaseResourceId);

            // invoke the operation
            DataConnectionValidation dataConnectionValidation = new DataConnectionValidation()
            {
                DataConnectionName = "DataConnections8",
                Properties = new DataConnectionData()
                {
                    Kind = DataConnectionKind.EventHub,
                },
            };
            ArmOperation<DataConnectionValidationListResult> lro = await database.DataConnectionValidationKustoPoolDataConnectionAsync(WaitUntil.Completed, dataConnectionValidation);
            DataConnectionValidationListResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }

        // KustoPoolDatabasePrincipalAssignmentsCheckNameAvailability
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CheckNameAvailabilityKustoPoolDatabasePrincipalAssignment_KustoPoolDatabasePrincipalAssignmentsCheckNameAvailability()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolDatabasePrincipalAssignmentsCheckNameAvailability.json
            // this example is just showing the usage of "KustoPoolDatabasePrincipalAssignments_CheckNameAvailability" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this DatabaseResource created on azure
            // for more information of creating DatabaseResource, please refer to the document of DatabaseResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "synapseWorkspaceName";
            string kustoPoolName = "kustoclusterrptest4";
            string databaseName = "Kustodatabase8";
            ResourceIdentifier databaseResourceId = DatabaseResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName, databaseName);
            DatabaseResource database = client.GetDatabaseResource(databaseResourceId);

            // invoke the operation
            DatabasePrincipalAssignmentCheckNameContent content = new DatabasePrincipalAssignmentCheckNameContent("kustoprincipal1");
            CheckNameResult result = await database.CheckNameAvailabilityKustoPoolDatabasePrincipalAssignmentAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
