// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Synapse.Models;

namespace Azure.ResourceManager.Synapse
{
    public partial class Sample_AttachedDatabaseConfigurationCollection
    {
        // KustoPoolAttachedDatabaseConfigurationsListByKustoPool
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_KustoPoolAttachedDatabaseConfigurationsListByKustoPool()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsListByKustoPool.json
            // this example is just showing the usage of "KustoPoolAttachedDatabaseConfigurations_ListByKustoPool" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this KustoPoolResource created on azure
            // for more information of creating KustoPoolResource, please refer to the document of KustoPoolResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "kustorptest";
            string kustoPoolName = "kustoclusterrptest4";
            ResourceIdentifier kustoPoolResourceId = KustoPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName);
            KustoPoolResource kustoPool = client.GetKustoPoolResource(kustoPoolResourceId);

            // get the collection of this AttachedDatabaseConfigurationResource
            AttachedDatabaseConfigurationCollection collection = kustoPool.GetAttachedDatabaseConfigurations();

            // invoke the operation and iterate over the result
            await foreach (AttachedDatabaseConfigurationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                AttachedDatabaseConfigurationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // KustoPoolAttachedDatabaseConfigurationsGet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_KustoPoolAttachedDatabaseConfigurationsGet()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsGet.json
            // this example is just showing the usage of "KustoPoolAttachedDatabaseConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this KustoPoolResource created on azure
            // for more information of creating KustoPoolResource, please refer to the document of KustoPoolResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "kustorptest";
            string kustoPoolName = "kustoclusterrptest4";
            ResourceIdentifier kustoPoolResourceId = KustoPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName);
            KustoPoolResource kustoPool = client.GetKustoPoolResource(kustoPoolResourceId);

            // get the collection of this AttachedDatabaseConfigurationResource
            AttachedDatabaseConfigurationCollection collection = kustoPool.GetAttachedDatabaseConfigurations();

            // invoke the operation
            string attachedDatabaseConfigurationName = "attachedDatabaseConfigurations1";
            AttachedDatabaseConfigurationResource result = await collection.GetAsync(attachedDatabaseConfigurationName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AttachedDatabaseConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // KustoPoolAttachedDatabaseConfigurationsGet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_KustoPoolAttachedDatabaseConfigurationsGet()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsGet.json
            // this example is just showing the usage of "KustoPoolAttachedDatabaseConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this KustoPoolResource created on azure
            // for more information of creating KustoPoolResource, please refer to the document of KustoPoolResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "kustorptest";
            string kustoPoolName = "kustoclusterrptest4";
            ResourceIdentifier kustoPoolResourceId = KustoPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName);
            KustoPoolResource kustoPool = client.GetKustoPoolResource(kustoPoolResourceId);

            // get the collection of this AttachedDatabaseConfigurationResource
            AttachedDatabaseConfigurationCollection collection = kustoPool.GetAttachedDatabaseConfigurations();

            // invoke the operation
            string attachedDatabaseConfigurationName = "attachedDatabaseConfigurations1";
            bool result = await collection.ExistsAsync(attachedDatabaseConfigurationName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // KustoPoolAttachedDatabaseConfigurationsCreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_KustoPoolAttachedDatabaseConfigurationsCreateOrUpdate()
        {
            // Generated from example definition: specification/synapse/resource-manager/Microsoft.Synapse/preview/2021-06-01-preview/examples/KustoPoolAttachedDatabaseConfigurationsCreateOrUpdate.json
            // this example is just showing the usage of "KustoPoolAttachedDatabaseConfigurations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this KustoPoolResource created on azure
            // for more information of creating KustoPoolResource, please refer to the document of KustoPoolResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "kustorptest";
            string workspaceName = "kustorptest";
            string kustoPoolName = "kustoclusterrptest4";
            ResourceIdentifier kustoPoolResourceId = KustoPoolResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, workspaceName, kustoPoolName);
            KustoPoolResource kustoPool = client.GetKustoPoolResource(kustoPoolResourceId);

            // get the collection of this AttachedDatabaseConfigurationResource
            AttachedDatabaseConfigurationCollection collection = kustoPool.GetAttachedDatabaseConfigurations();

            // invoke the operation
            string attachedDatabaseConfigurationName = "attachedDatabaseConfigurations1";
            AttachedDatabaseConfigurationData data = new AttachedDatabaseConfigurationData()
            {
                Location = new AzureLocation("westus"),
                DatabaseName = "kustodatabase",
                KustoPoolResourceId = "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Synapse/Workspaces/kustorptest/KustoPools/kustoclusterrptest4",
                DefaultPrincipalsModificationKind = DefaultPrincipalsModificationKind.Union,
                TableLevelSharingProperties = new TableLevelSharingProperties()
                {
                    TablesToInclude =
{
"Table1"
},
                    TablesToExclude =
{
"Table2"
},
                    ExternalTablesToInclude =
{
"ExternalTable1"
},
                    ExternalTablesToExclude =
{
"ExternalTable2"
},
                    MaterializedViewsToInclude =
{
"MaterializedViewTable1"
},
                    MaterializedViewsToExclude =
{
"MaterializedViewTable2"
},
                },
            };
            ArmOperation<AttachedDatabaseConfigurationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, attachedDatabaseConfigurationName, data);
            AttachedDatabaseConfigurationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AttachedDatabaseConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
