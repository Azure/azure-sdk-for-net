// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Monitoring.Models
{
    /// <summary> The SparkJob. </summary>
    public partial class SparkJob
    {
        /// <summary> Initializes a new instance of SparkJob. </summary>
        internal SparkJob()
        {
            Timing = new ChangeTrackingList<string>();
            Pipeline = new ChangeTrackingList<SparkJob>();
        }

        /// <summary> Initializes a new instance of SparkJob. </summary>
        /// <param name="state"> . </param>
        /// <param name="name"> . </param>
        /// <param name="submitter"> . </param>
        /// <param name="compute"> . </param>
        /// <param name="sparkApplicationId"> . </param>
        /// <param name="livyId"> . </param>
        /// <param name="timing"> . </param>
        /// <param name="sparkJobDefinition"> . </param>
        /// <param name="pipeline"> . </param>
        /// <param name="jobType"> . </param>
        /// <param name="submitTime"> . </param>
        /// <param name="endTime"> . </param>
        /// <param name="queuedDuration"> . </param>
        /// <param name="runningDuration"> . </param>
        /// <param name="totalDuration"> . </param>
        internal SparkJob(string state, string name, string submitter, string compute, string sparkApplicationId, string livyId, IReadOnlyList<string> timing, string sparkJobDefinition, IReadOnlyList<SparkJob> pipeline, string jobType, DateTimeOffset? submitTime, DateTimeOffset? endTime, string queuedDuration, string runningDuration, string totalDuration)
        {
            State = state;
            Name = name;
            Submitter = submitter;
            Compute = compute;
            SparkApplicationId = sparkApplicationId;
            LivyId = livyId;
            Timing = timing;
            SparkJobDefinition = sparkJobDefinition;
            Pipeline = pipeline;
            JobType = jobType;
            SubmitTime = submitTime;
            EndTime = endTime;
            QueuedDuration = queuedDuration;
            RunningDuration = runningDuration;
            TotalDuration = totalDuration;
        }

        public string State { get; }
        public string Name { get; }
        public string Submitter { get; }
        public string Compute { get; }
        public string SparkApplicationId { get; }
        public string LivyId { get; }
        public IReadOnlyList<string> Timing { get; }
        public string SparkJobDefinition { get; }
        public IReadOnlyList<SparkJob> Pipeline { get; }
        public string JobType { get; }
        public DateTimeOffset? SubmitTime { get; }
        public DateTimeOffset? EndTime { get; }
        public string QueuedDuration { get; }
        public string RunningDuration { get; }
        public string TotalDuration { get; }
    }
}
