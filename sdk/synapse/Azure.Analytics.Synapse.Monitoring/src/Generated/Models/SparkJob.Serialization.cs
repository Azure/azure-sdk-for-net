// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Monitoring.Models
{
    public partial class SparkJob : IUtf8JsonSerializable, IJsonModel<SparkJob>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SparkJob>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<SparkJob>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<SparkJob>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<SparkJob>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Submitter))
            {
                writer.WritePropertyName("submitter"u8);
                writer.WriteStringValue(Submitter);
            }
            if (Optional.IsDefined(Compute))
            {
                writer.WritePropertyName("compute"u8);
                writer.WriteStringValue(Compute);
            }
            if (Optional.IsDefined(SparkApplicationId))
            {
                writer.WritePropertyName("sparkApplicationId"u8);
                writer.WriteStringValue(SparkApplicationId);
            }
            if (Optional.IsDefined(LivyId))
            {
                writer.WritePropertyName("livyId"u8);
                writer.WriteStringValue(LivyId);
            }
            if (Optional.IsCollectionDefined(Timing))
            {
                writer.WritePropertyName("timing"u8);
                writer.WriteStartArray();
                foreach (var item in Timing)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SparkJobDefinition))
            {
                if (SparkJobDefinition != null)
                {
                    writer.WritePropertyName("sparkJobDefinition"u8);
                    writer.WriteStringValue(SparkJobDefinition);
                }
                else
                {
                    writer.WriteNull("sparkJobDefinition");
                }
            }
            if (Optional.IsCollectionDefined(Pipeline))
            {
                if (Pipeline != null)
                {
                    writer.WritePropertyName("pipeline"u8);
                    writer.WriteStartArray();
                    foreach (var item in Pipeline)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNull("pipeline");
                }
            }
            if (Optional.IsDefined(JobType))
            {
                writer.WritePropertyName("jobType"u8);
                writer.WriteStringValue(JobType);
            }
            if (Optional.IsDefined(SubmitTime))
            {
                if (SubmitTime != null)
                {
                    writer.WritePropertyName("submitTime"u8);
                    writer.WriteStringValue(SubmitTime.Value, "O");
                }
                else
                {
                    writer.WriteNull("submitTime");
                }
            }
            if (Optional.IsDefined(EndTime))
            {
                if (EndTime != null)
                {
                    writer.WritePropertyName("endTime"u8);
                    writer.WriteStringValue(EndTime.Value, "O");
                }
                else
                {
                    writer.WriteNull("endTime");
                }
            }
            if (Optional.IsDefined(QueuedDuration))
            {
                writer.WritePropertyName("queuedDuration"u8);
                writer.WriteStringValue(QueuedDuration);
            }
            if (Optional.IsDefined(RunningDuration))
            {
                writer.WritePropertyName("runningDuration"u8);
                writer.WriteStringValue(RunningDuration);
            }
            if (Optional.IsDefined(TotalDuration))
            {
                writer.WritePropertyName("totalDuration"u8);
                writer.WriteStringValue(TotalDuration);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SparkJob IJsonModel<SparkJob>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkJob)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSparkJob(document.RootElement, options);
        }

        internal static SparkJob DeserializeSparkJob(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> state = default;
            Optional<string> name = default;
            Optional<string> submitter = default;
            Optional<string> compute = default;
            Optional<string> sparkApplicationId = default;
            Optional<string> livyId = default;
            Optional<IReadOnlyList<string>> timing = default;
            Optional<string> sparkJobDefinition = default;
            Optional<IReadOnlyList<SparkJob>> pipeline = default;
            Optional<string> jobType = default;
            Optional<DateTimeOffset?> submitTime = default;
            Optional<DateTimeOffset?> endTime = default;
            Optional<string> queuedDuration = default;
            Optional<string> runningDuration = default;
            Optional<string> totalDuration = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("state"u8))
                {
                    state = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("submitter"u8))
                {
                    submitter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("compute"u8))
                {
                    compute = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sparkApplicationId"u8))
                {
                    sparkApplicationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("livyId"u8))
                {
                    livyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timing"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    timing = array;
                    continue;
                }
                if (property.NameEquals("sparkJobDefinition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        sparkJobDefinition = null;
                        continue;
                    }
                    sparkJobDefinition = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pipeline"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SparkJob> array = new List<SparkJob>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeserializeSparkJob(item));
                    }
                    pipeline = array;
                    continue;
                }
                if (property.NameEquals("jobType"u8))
                {
                    jobType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("submitTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        submitTime = null;
                        continue;
                    }
                    submitTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        endTime = null;
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("queuedDuration"u8))
                {
                    queuedDuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runningDuration"u8))
                {
                    runningDuration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalDuration"u8))
                {
                    totalDuration = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SparkJob(state.Value, name.Value, submitter.Value, compute.Value, sparkApplicationId.Value, livyId.Value, Optional.ToList(timing), sparkJobDefinition.Value, Optional.ToList(pipeline), jobType.Value, Optional.ToNullable(submitTime), Optional.ToNullable(endTime), queuedDuration.Value, runningDuration.Value, totalDuration.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SparkJob>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkJob)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        SparkJob IPersistableModel<SparkJob>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkJob)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeSparkJob(document.RootElement, options);
        }

        string IPersistableModel<SparkJob>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
