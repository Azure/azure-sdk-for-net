// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Spark.Models
{
    public partial class SparkScheduler : IUtf8JsonSerializable, IJsonModel<SparkScheduler>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SparkScheduler>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SparkScheduler>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<SparkScheduler>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<SparkScheduler>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(SubmittedAt))
            {
                if (SubmittedAt != null)
                {
                    writer.WritePropertyName("submittedAt"u8);
                    writer.WriteStringValue(SubmittedAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("submittedAt");
                }
            }
            if (Optional.IsDefined(ScheduledAt))
            {
                if (ScheduledAt != null)
                {
                    writer.WritePropertyName("scheduledAt"u8);
                    writer.WriteStringValue(ScheduledAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("scheduledAt");
                }
            }
            if (Optional.IsDefined(EndedAt))
            {
                if (EndedAt != null)
                {
                    writer.WritePropertyName("endedAt"u8);
                    writer.WriteStringValue(EndedAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("endedAt");
                }
            }
            if (Optional.IsDefined(CancellationRequestedAt))
            {
                if (CancellationRequestedAt != null)
                {
                    writer.WritePropertyName("cancellationRequestedAt"u8);
                    writer.WriteStringValue(CancellationRequestedAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("cancellationRequestedAt");
                }
            }
            if (Optional.IsDefined(CurrentState))
            {
                writer.WritePropertyName("currentState"u8);
                writer.WriteStringValue(CurrentState.Value.ToString());
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SparkScheduler IJsonModel<SparkScheduler>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkScheduler)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSparkScheduler(document.RootElement, options);
        }

        internal static SparkScheduler DeserializeSparkScheduler(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset?> submittedAt = default;
            Optional<DateTimeOffset?> scheduledAt = default;
            Optional<DateTimeOffset?> endedAt = default;
            Optional<DateTimeOffset?> cancellationRequestedAt = default;
            Optional<SchedulerCurrentState> currentState = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("submittedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        submittedAt = null;
                        continue;
                    }
                    submittedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("scheduledAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scheduledAt = null;
                        continue;
                    }
                    scheduledAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        endedAt = null;
                        continue;
                    }
                    endedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("cancellationRequestedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cancellationRequestedAt = null;
                        continue;
                    }
                    cancellationRequestedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentState = new SchedulerCurrentState(property.Value.GetString());
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SparkScheduler(Optional.ToNullable(submittedAt), Optional.ToNullable(scheduledAt), Optional.ToNullable(endedAt), Optional.ToNullable(cancellationRequestedAt), Optional.ToNullable(currentState), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SparkScheduler>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkScheduler)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        SparkScheduler IPersistableModel<SparkScheduler>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkScheduler)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeSparkScheduler(document.RootElement, options);
        }

        string IPersistableModel<SparkScheduler>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
