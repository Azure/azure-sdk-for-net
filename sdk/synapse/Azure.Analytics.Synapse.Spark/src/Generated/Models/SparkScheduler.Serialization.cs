// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Spark.Models
{
    public partial class SparkScheduler
    {
        internal static SparkScheduler DeserializeSparkScheduler(JsonElement element)
        {
            DateTimeOffset? submittedAt = default;
            DateTimeOffset? scheduledAt = default;
            DateTimeOffset? endedAt = default;
            DateTimeOffset? cancellationRequestedAt = default;
            SchedulerCurrentState? currentState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("submittedAt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    submittedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("scheduledAt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scheduledAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endedAt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("cancellationRequestedAt"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cancellationRequestedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentState = new SchedulerCurrentState(property.Value.GetString());
                    continue;
                }
            }
            return new SparkScheduler(submittedAt, scheduledAt, endedAt, cancellationRequestedAt, currentState);
        }
    }
}
