// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Spark.Models
{
    public partial class SparkSessionState : IUtf8JsonSerializable, IJsonModel<SparkSessionState>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SparkSessionState>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<SparkSessionState>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<SparkSessionState>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<SparkSessionState>)} interface");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(NotStartedAt))
            {
                if (NotStartedAt != null)
                {
                    writer.WritePropertyName("notStartedAt"u8);
                    writer.WriteStringValue(NotStartedAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("notStartedAt");
                }
            }
            if (Optional.IsDefined(StartingAt))
            {
                if (StartingAt != null)
                {
                    writer.WritePropertyName("startingAt"u8);
                    writer.WriteStringValue(StartingAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("startingAt");
                }
            }
            if (Optional.IsDefined(IdleAt))
            {
                if (IdleAt != null)
                {
                    writer.WritePropertyName("idleAt"u8);
                    writer.WriteStringValue(IdleAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("idleAt");
                }
            }
            if (Optional.IsDefined(DeadAt))
            {
                if (DeadAt != null)
                {
                    writer.WritePropertyName("deadAt"u8);
                    writer.WriteStringValue(DeadAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("deadAt");
                }
            }
            if (Optional.IsDefined(ShuttingDownAt))
            {
                if (ShuttingDownAt != null)
                {
                    writer.WritePropertyName("shuttingDownAt"u8);
                    writer.WriteStringValue(ShuttingDownAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("shuttingDownAt");
                }
            }
            if (Optional.IsDefined(TerminatedAt))
            {
                if (TerminatedAt != null)
                {
                    writer.WritePropertyName("killedAt"u8);
                    writer.WriteStringValue(TerminatedAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("killedAt");
                }
            }
            if (Optional.IsDefined(RecoveringAt))
            {
                if (RecoveringAt != null)
                {
                    writer.WritePropertyName("recoveringAt"u8);
                    writer.WriteStringValue(RecoveringAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("recoveringAt");
                }
            }
            if (Optional.IsDefined(BusyAt))
            {
                if (BusyAt != null)
                {
                    writer.WritePropertyName("busyAt"u8);
                    writer.WriteStringValue(BusyAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("busyAt");
                }
            }
            if (Optional.IsDefined(ErrorAt))
            {
                if (ErrorAt != null)
                {
                    writer.WritePropertyName("errorAt"u8);
                    writer.WriteStringValue(ErrorAt.Value, "O");
                }
                else
                {
                    writer.WriteNull("errorAt");
                }
            }
            if (Optional.IsDefined(CurrentState))
            {
                writer.WritePropertyName("currentState"u8);
                writer.WriteStringValue(CurrentState);
            }
            if (Optional.IsDefined(JobCreationRequest))
            {
                writer.WritePropertyName("jobCreationRequest"u8);
                writer.WriteObjectValue(JobCreationRequest);
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SparkSessionState IJsonModel<SparkSessionState>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkSessionState)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSparkSessionState(document.RootElement, options);
        }

        internal static SparkSessionState DeserializeSparkSessionState(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset?> notStartedAt = default;
            Optional<DateTimeOffset?> startingAt = default;
            Optional<DateTimeOffset?> idleAt = default;
            Optional<DateTimeOffset?> deadAt = default;
            Optional<DateTimeOffset?> shuttingDownAt = default;
            Optional<DateTimeOffset?> killedAt = default;
            Optional<DateTimeOffset?> recoveringAt = default;
            Optional<DateTimeOffset?> busyAt = default;
            Optional<DateTimeOffset?> errorAt = default;
            Optional<string> currentState = default;
            Optional<SparkRequest> jobCreationRequest = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("notStartedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        notStartedAt = null;
                        continue;
                    }
                    notStartedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startingAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        startingAt = null;
                        continue;
                    }
                    startingAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("idleAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        idleAt = null;
                        continue;
                    }
                    idleAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("deadAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        deadAt = null;
                        continue;
                    }
                    deadAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("shuttingDownAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        shuttingDownAt = null;
                        continue;
                    }
                    shuttingDownAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("killedAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        killedAt = null;
                        continue;
                    }
                    killedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recoveringAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        recoveringAt = null;
                        continue;
                    }
                    recoveringAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("busyAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        busyAt = null;
                        continue;
                    }
                    busyAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("errorAt"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        errorAt = null;
                        continue;
                    }
                    errorAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentState"u8))
                {
                    currentState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobCreationRequest"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jobCreationRequest = SparkRequest.DeserializeSparkRequest(property.Value);
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SparkSessionState(Optional.ToNullable(notStartedAt), Optional.ToNullable(startingAt), Optional.ToNullable(idleAt), Optional.ToNullable(deadAt), Optional.ToNullable(shuttingDownAt), Optional.ToNullable(killedAt), Optional.ToNullable(recoveringAt), Optional.ToNullable(busyAt), Optional.ToNullable(errorAt), currentState.Value, jobCreationRequest.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SparkSessionState>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkSessionState)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        SparkSessionState IPersistableModel<SparkSessionState>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SparkSessionState)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeSparkSessionState(document.RootElement, options);
        }

        string IPersistableModel<SparkSessionState>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
