// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A database query.
    /// </summary>
    public partial class QueryMetric
    {
        /// <summary>
        /// Initializes a new instance of the QueryMetric class.
        /// </summary>
        public QueryMetric()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryMetric class.
        /// </summary>
        /// <param name="name">The name of the metric</param>
        /// <param name="displayName">The name of the metric for display in
        /// user interface</param>
        /// <param name="unit">The unit of measurement. Possible values
        /// include: 'percentage', 'KB', 'microseconds'</param>
        /// <param name="value">The measured value</param>
        public QueryMetric(string name = default(string), string displayName = default(string), QueryMetricUnit? unit = default(QueryMetricUnit?), double? value = default(double?))
        {
            Name = name;
            DisplayName = displayName;
            Unit = unit;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the name of the metric
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the name of the metric for display in user interface
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets the unit of measurement. Possible values include:
        /// 'percentage', 'KB', 'microseconds'
        /// </summary>
        [JsonProperty(PropertyName = "unit")]
        public QueryMetricUnit? Unit { get; private set; }

        /// <summary>
        /// Gets the measured value
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public double? Value { get; private set; }

    }
}
