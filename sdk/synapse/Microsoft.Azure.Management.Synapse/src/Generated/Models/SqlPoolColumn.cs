// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A Sql pool column resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SqlPoolColumn : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the SqlPoolColumn class.
        /// </summary>
        public SqlPoolColumn()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlPoolColumn class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="columnType">The column data type. Possible values
        /// include: 'image', 'text', 'uniqueidentifier', 'date', 'time',
        /// 'datetime2', 'datetimeoffset', 'tinyint', 'smallint', 'int',
        /// 'smalldatetime', 'real', 'money', 'datetime', 'float',
        /// 'sql_variant', 'ntext', 'bit', 'decimal', 'numeric', 'smallmoney',
        /// 'bigint', 'hierarchyid', 'geometry', 'geography', 'varbinary',
        /// 'varchar', 'binary', 'char', 'timestamp', 'nvarchar', 'nchar',
        /// 'xml', 'sysname'</param>
        /// <param name="isComputed">Indicates whether column value is computed
        /// or not</param>
        public SqlPoolColumn(string id = default(string), string name = default(string), string type = default(string), string columnType = default(string), bool? isComputed = default(bool?))
            : base(id, name, type)
        {
            ColumnType = columnType;
            IsComputed = isComputed;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the column data type. Possible values include:
        /// 'image', 'text', 'uniqueidentifier', 'date', 'time', 'datetime2',
        /// 'datetimeoffset', 'tinyint', 'smallint', 'int', 'smalldatetime',
        /// 'real', 'money', 'datetime', 'float', 'sql_variant', 'ntext',
        /// 'bit', 'decimal', 'numeric', 'smallmoney', 'bigint', 'hierarchyid',
        /// 'geometry', 'geography', 'varbinary', 'varchar', 'binary', 'char',
        /// 'timestamp', 'nvarchar', 'nchar', 'xml', 'sysname'
        /// </summary>
        [JsonProperty(PropertyName = "properties.columnType")]
        public string ColumnType { get; set; }

        /// <summary>
        /// Gets indicates whether column value is computed or not
        /// </summary>
        [JsonProperty(PropertyName = "properties.isComputed")]
        public bool? IsComputed { get; private set; }

    }
}
