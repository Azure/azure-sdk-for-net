// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A sql pool resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SqlPoolV3 : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the SqlPoolV3 class.
        /// </summary>
        public SqlPoolV3()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlPoolV3 class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="sku">The sql pool SKU. The list of SKUs may vary by
        /// region and support offer.</param>
        /// <param name="kind">Kind of SqlPool.</param>
        /// <param name="systemData">SystemData of SqlPool.</param>
        /// <param name="status">The status of the sql pool. Possible values
        /// include: 'Invisible', 'Online', 'Offline', 'Creating',
        /// 'Inaccessible', 'Pausing', 'Paused', 'Resuming', 'Scaling',
        /// 'Dropping', 'Error', 'Unknown'</param>
        /// <param name="sqlPoolGuid">The Guid of the sql pool.</param>
        /// <param name="currentServiceObjectiveName">The current service level
        /// objective name of the sql pool.</param>
        /// <param name="requestedServiceObjectiveName">The requested service
        /// level objective name of the sql pool.</param>
        /// <param name="maxServiceObjectiveName">The max service level
        /// objective name of the sql pool.</param>
        /// <param name="autoPauseTimer">The period of inactivity in minutes
        /// before automatically pausing the sql pool.</param>
        /// <param name="autoResume">Indicates whether the sql pool can
        /// automatically resume when connection attempts are made.</param>
        public SqlPoolV3(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), SkuV3 sku = default(SkuV3), string kind = default(string), SystemData systemData = default(SystemData), string status = default(string), System.Guid? sqlPoolGuid = default(System.Guid?), string currentServiceObjectiveName = default(string), string requestedServiceObjectiveName = default(string), string maxServiceObjectiveName = default(string), int? autoPauseTimer = default(int?), bool? autoResume = default(bool?))
            : base(location, id, name, type, tags)
        {
            Sku = sku;
            Kind = kind;
            SystemData = systemData;
            Status = status;
            SqlPoolGuid = sqlPoolGuid;
            CurrentServiceObjectiveName = currentServiceObjectiveName;
            RequestedServiceObjectiveName = requestedServiceObjectiveName;
            MaxServiceObjectiveName = maxServiceObjectiveName;
            AutoPauseTimer = autoPauseTimer;
            AutoResume = autoResume;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the sql pool SKU. The list of SKUs may vary by region
        /// and support offer.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public SkuV3 Sku { get; set; }

        /// <summary>
        /// Gets kind of SqlPool.
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; private set; }

        /// <summary>
        /// Gets systemData of SqlPool.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Gets the status of the sql pool. Possible values include:
        /// 'Invisible', 'Online', 'Offline', 'Creating', 'Inaccessible',
        /// 'Pausing', 'Paused', 'Resuming', 'Scaling', 'Dropping', 'Error',
        /// 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets the Guid of the sql pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sqlPoolGuid")]
        public System.Guid? SqlPoolGuid { get; private set; }

        /// <summary>
        /// Gets the current service level objective name of the sql pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currentServiceObjectiveName")]
        public string CurrentServiceObjectiveName { get; private set; }

        /// <summary>
        /// Gets the requested service level objective name of the sql pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.requestedServiceObjectiveName")]
        public string RequestedServiceObjectiveName { get; private set; }

        /// <summary>
        /// Gets or sets the max service level objective name of the sql pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxServiceObjectiveName")]
        public string MaxServiceObjectiveName { get; set; }

        /// <summary>
        /// Gets or sets the period of inactivity in minutes before
        /// automatically pausing the sql pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoPauseTimer")]
        public int? AutoPauseTimer { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the sql pool can automatically
        /// resume when connection attempts are made.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoResume")]
        public bool? AutoResume { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Sku != null)
            {
                Sku.Validate();
            }
        }
    }
}
