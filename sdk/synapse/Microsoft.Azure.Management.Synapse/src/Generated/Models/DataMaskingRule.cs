// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a Sql pool data masking rule.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DataMaskingRule : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DataMaskingRule class.
        /// </summary>
        public DataMaskingRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataMaskingRule class.
        /// </summary>
        /// <param name="schemaName">The schema name on which the data masking
        /// rule is applied.</param>
        /// <param name="tableName">The table name on which the data masking
        /// rule is applied.</param>
        /// <param name="columnName">The column name on which the data masking
        /// rule is applied.</param>
        /// <param name="maskingFunction">The masking function that is used for
        /// the data masking rule. Possible values include: 'Default', 'CCN',
        /// 'Email', 'Number', 'SSN', 'Text'</param>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="dataMaskingRuleId">The rule Id.</param>
        /// <param name="aliasName">The alias name. This is a legacy parameter
        /// and is no longer used.</param>
        /// <param name="ruleState">The rule state. Used to delete a rule. To
        /// delete an existing rule, specify the schemaName, tableName,
        /// columnName, maskingFunction, and specify ruleState as disabled.
        /// However, if the rule doesn't already exist, the rule will be
        /// created with ruleState set to enabled, regardless of the provided
        /// value of ruleState. Possible values include: 'Disabled',
        /// 'Enabled'</param>
        /// <param name="numberFrom">The numberFrom property of the masking
        /// rule. Required if maskingFunction is set to Number, otherwise this
        /// parameter will be ignored.</param>
        /// <param name="numberTo">The numberTo property of the data masking
        /// rule. Required if maskingFunction is set to Number, otherwise this
        /// parameter will be ignored.</param>
        /// <param name="prefixSize">If maskingFunction is set to Text, the
        /// number of characters to show unmasked in the beginning of the
        /// string. Otherwise, this parameter will be ignored.</param>
        /// <param name="suffixSize">If maskingFunction is set to Text, the
        /// number of characters to show unmasked at the end of the string.
        /// Otherwise, this parameter will be ignored.</param>
        /// <param name="replacementString">If maskingFunction is set to Text,
        /// the character to use for masking the unexposed part of the string.
        /// Otherwise, this parameter will be ignored.</param>
        /// <param name="location">The location of the data masking
        /// rule.</param>
        /// <param name="kind">The kind of Data Masking Rule. Metadata, used
        /// for Azure portal.</param>
        public DataMaskingRule(string schemaName, string tableName, string columnName, DataMaskingFunction maskingFunction, string id = default(string), string name = default(string), string type = default(string), string dataMaskingRuleId = default(string), string aliasName = default(string), DataMaskingRuleState? ruleState = default(DataMaskingRuleState?), string numberFrom = default(string), string numberTo = default(string), string prefixSize = default(string), string suffixSize = default(string), string replacementString = default(string), string location = default(string), string kind = default(string))
            : base(id, name, type)
        {
            DataMaskingRuleId = dataMaskingRuleId;
            AliasName = aliasName;
            RuleState = ruleState;
            SchemaName = schemaName;
            TableName = tableName;
            ColumnName = columnName;
            MaskingFunction = maskingFunction;
            NumberFrom = numberFrom;
            NumberTo = numberTo;
            PrefixSize = prefixSize;
            SuffixSize = suffixSize;
            ReplacementString = replacementString;
            Location = location;
            Kind = kind;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the rule Id.
        /// </summary>
        [JsonProperty(PropertyName = "properties.id")]
        public string DataMaskingRuleId { get; private set; }

        /// <summary>
        /// Gets or sets the alias name. This is a legacy parameter and is no
        /// longer used.
        /// </summary>
        [JsonProperty(PropertyName = "properties.aliasName")]
        public string AliasName { get; set; }

        /// <summary>
        /// Gets or sets the rule state. Used to delete a rule. To delete an
        /// existing rule, specify the schemaName, tableName, columnName,
        /// maskingFunction, and specify ruleState as disabled. However, if the
        /// rule doesn't already exist, the rule will be created with ruleState
        /// set to enabled, regardless of the provided value of ruleState.
        /// Possible values include: 'Disabled', 'Enabled'
        /// </summary>
        [JsonProperty(PropertyName = "properties.ruleState")]
        public DataMaskingRuleState? RuleState { get; set; }

        /// <summary>
        /// Gets or sets the schema name on which the data masking rule is
        /// applied.
        /// </summary>
        [JsonProperty(PropertyName = "properties.schemaName")]
        public string SchemaName { get; set; }

        /// <summary>
        /// Gets or sets the table name on which the data masking rule is
        /// applied.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tableName")]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or sets the column name on which the data masking rule is
        /// applied.
        /// </summary>
        [JsonProperty(PropertyName = "properties.columnName")]
        public string ColumnName { get; set; }

        /// <summary>
        /// Gets or sets the masking function that is used for the data masking
        /// rule. Possible values include: 'Default', 'CCN', 'Email', 'Number',
        /// 'SSN', 'Text'
        /// </summary>
        [JsonProperty(PropertyName = "properties.maskingFunction")]
        public DataMaskingFunction MaskingFunction { get; set; }

        /// <summary>
        /// Gets or sets the numberFrom property of the masking rule. Required
        /// if maskingFunction is set to Number, otherwise this parameter will
        /// be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberFrom")]
        public string NumberFrom { get; set; }

        /// <summary>
        /// Gets or sets the numberTo property of the data masking rule.
        /// Required if maskingFunction is set to Number, otherwise this
        /// parameter will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.numberTo")]
        public string NumberTo { get; set; }

        /// <summary>
        /// Gets or sets if maskingFunction is set to Text, the number of
        /// characters to show unmasked in the beginning of the string.
        /// Otherwise, this parameter will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.prefixSize")]
        public string PrefixSize { get; set; }

        /// <summary>
        /// Gets or sets if maskingFunction is set to Text, the number of
        /// characters to show unmasked at the end of the string. Otherwise,
        /// this parameter will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.suffixSize")]
        public string SuffixSize { get; set; }

        /// <summary>
        /// Gets or sets if maskingFunction is set to Text, the character to
        /// use for masking the unexposed part of the string. Otherwise, this
        /// parameter will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.replacementString")]
        public string ReplacementString { get; set; }

        /// <summary>
        /// Gets the location of the data masking rule.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; private set; }

        /// <summary>
        /// Gets the kind of Data Masking Rule. Metadata, used for Azure
        /// portal.
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SchemaName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SchemaName");
            }
            if (TableName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TableName");
            }
            if (ColumnName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ColumnName");
            }
        }
    }
}
