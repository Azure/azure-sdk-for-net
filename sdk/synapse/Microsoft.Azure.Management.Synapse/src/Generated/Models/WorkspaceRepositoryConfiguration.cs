// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Git integration settings
    /// </summary>
    public partial class WorkspaceRepositoryConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the WorkspaceRepositoryConfiguration
        /// class.
        /// </summary>
        public WorkspaceRepositoryConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkspaceRepositoryConfiguration
        /// class.
        /// </summary>
        /// <param name="type">Type of workspace repositoryID configuration.
        /// Example WorkspaceVSTSConfiguration,
        /// WorkspaceGitHubConfiguration</param>
        /// <param name="hostName">GitHub Enterprise host name. For example:
        /// https://github.mydomain.com</param>
        /// <param name="accountName">Account name</param>
        /// <param name="projectName">VSTS project name</param>
        /// <param name="repositoryName">Repository name</param>
        /// <param name="collaborationBranch">Collaboration branch</param>
        /// <param name="rootFolder">Root folder to use in the
        /// repository</param>
        /// <param name="lastCommitId">The last commit ID</param>
        /// <param name="tenantId">The VSTS tenant ID</param>
        public WorkspaceRepositoryConfiguration(string type = default(string), string hostName = default(string), string accountName = default(string), string projectName = default(string), string repositoryName = default(string), string collaborationBranch = default(string), string rootFolder = default(string), string lastCommitId = default(string), System.Guid? tenantId = default(System.Guid?))
        {
            Type = type;
            HostName = hostName;
            AccountName = accountName;
            ProjectName = projectName;
            RepositoryName = repositoryName;
            CollaborationBranch = collaborationBranch;
            RootFolder = rootFolder;
            LastCommitId = lastCommitId;
            TenantId = tenantId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of workspace repositoryID configuration. Example
        /// WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets gitHub Enterprise host name. For example:
        /// https://github.mydomain.com
        /// </summary>
        [JsonProperty(PropertyName = "hostName")]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or sets account name
        /// </summary>
        [JsonProperty(PropertyName = "accountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or sets VSTS project name
        /// </summary>
        [JsonProperty(PropertyName = "projectName")]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or sets repository name
        /// </summary>
        [JsonProperty(PropertyName = "repositoryName")]
        public string RepositoryName { get; set; }

        /// <summary>
        /// Gets or sets collaboration branch
        /// </summary>
        [JsonProperty(PropertyName = "collaborationBranch")]
        public string CollaborationBranch { get; set; }

        /// <summary>
        /// Gets or sets root folder to use in the repository
        /// </summary>
        [JsonProperty(PropertyName = "rootFolder")]
        public string RootFolder { get; set; }

        /// <summary>
        /// Gets or sets the last commit ID
        /// </summary>
        [JsonProperty(PropertyName = "lastCommitId")]
        public string LastCommitId { get; set; }

        /// <summary>
        /// Gets or sets the VSTS tenant ID
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public System.Guid? TenantId { get; set; }

    }
}
