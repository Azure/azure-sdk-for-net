// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Update integration runtime node request.
    /// </summary>
    public partial class UpdateIntegrationRuntimeNodeRequest
    {
        /// <summary>
        /// Initializes a new instance of the
        /// UpdateIntegrationRuntimeNodeRequest class.
        /// </summary>
        public UpdateIntegrationRuntimeNodeRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// UpdateIntegrationRuntimeNodeRequest class.
        /// </summary>
        /// <param name="concurrentJobsLimit">The number of concurrent jobs
        /// permitted to run on the integration runtime node. Values between 1
        /// and maxConcurrentJobs(inclusive) are allowed.</param>
        public UpdateIntegrationRuntimeNodeRequest(int? concurrentJobsLimit = default(int?))
        {
            ConcurrentJobsLimit = concurrentJobsLimit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number of concurrent jobs permitted to run on the
        /// integration runtime node. Values between 1 and
        /// maxConcurrentJobs(inclusive) are allowed.
        /// </summary>
        [JsonProperty(PropertyName = "concurrentJobsLimit")]
        public int? ConcurrentJobsLimit { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ConcurrentJobsLimit < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ConcurrentJobsLimit", 1);
            }
        }
    }
}
