// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Ssis environment.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Environment")]
    public partial class SsisEnvironment : SsisObjectMetadata
    {
        /// <summary>
        /// Initializes a new instance of the SsisEnvironment class.
        /// </summary>
        public SsisEnvironment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SsisEnvironment class.
        /// </summary>
        /// <param name="id">Metadata id.</param>
        /// <param name="name">Metadata name.</param>
        /// <param name="description">Metadata description.</param>
        /// <param name="folderId">Folder id which contains
        /// environment.</param>
        /// <param name="variables">Variable in environment</param>
        public SsisEnvironment(long? id = default(long?), string name = default(string), string description = default(string), long? folderId = default(long?), IList<SsisVariable> variables = default(IList<SsisVariable>))
            : base(id, name, description)
        {
            FolderId = folderId;
            Variables = variables;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets folder id which contains environment.
        /// </summary>
        [JsonProperty(PropertyName = "folderId")]
        public long? FolderId { get; set; }

        /// <summary>
        /// Gets or sets variable in environment
        /// </summary>
        [JsonProperty(PropertyName = "variables")]
        public IList<SsisVariable> Variables { get; set; }

    }
}
