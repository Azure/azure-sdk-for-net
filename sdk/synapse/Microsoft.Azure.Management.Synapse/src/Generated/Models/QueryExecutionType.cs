// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for QueryExecutionType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum QueryExecutionType
    {
        [EnumMember(Value = "any")]
        Any,
        [EnumMember(Value = "regular")]
        Regular,
        [EnumMember(Value = "irregular")]
        Irregular,
        [EnumMember(Value = "aborted")]
        Aborted,
        [EnumMember(Value = "exception")]
        Exception
    }
    internal static class QueryExecutionTypeEnumExtension
    {
        internal static string ToSerializedValue(this QueryExecutionType? value)
        {
            return value == null ? null : ((QueryExecutionType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this QueryExecutionType value)
        {
            switch( value )
            {
                case QueryExecutionType.Any:
                    return "any";
                case QueryExecutionType.Regular:
                    return "regular";
                case QueryExecutionType.Irregular:
                    return "irregular";
                case QueryExecutionType.Aborted:
                    return "aborted";
                case QueryExecutionType.Exception:
                    return "exception";
            }
            return null;
        }

        internal static QueryExecutionType? ParseQueryExecutionType(this string value)
        {
            switch( value )
            {
                case "any":
                    return QueryExecutionType.Any;
                case "regular":
                    return QueryExecutionType.Regular;
                case "irregular":
                    return QueryExecutionType.Irregular;
                case "aborted":
                    return QueryExecutionType.Aborted;
                case "exception":
                    return QueryExecutionType.Exception;
            }
            return null;
        }
    }
}
