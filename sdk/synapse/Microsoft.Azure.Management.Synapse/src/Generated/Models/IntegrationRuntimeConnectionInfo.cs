// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Connection information for encrypting the on-premises data source
    /// credentials.
    /// </summary>
    public partial class IntegrationRuntimeConnectionInfo
    {
        /// <summary>
        /// Initializes a new instance of the IntegrationRuntimeConnectionInfo
        /// class.
        /// </summary>
        public IntegrationRuntimeConnectionInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IntegrationRuntimeConnectionInfo
        /// class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="serviceToken">The token generated in service. Callers
        /// use this token to authenticate to integration runtime.</param>
        /// <param name="identityCertThumbprint">The integration runtime SSL
        /// certificate thumbprint. Click-Once application uses it to do server
        /// validation.</param>
        /// <param name="hostServiceUri">The on-premises integration runtime
        /// host URL.</param>
        /// <param name="version">The integration runtime version.</param>
        /// <param name="publicKey">The public key for encrypting a credential
        /// when transferring the credential to the integration
        /// runtime.</param>
        /// <param name="isIdentityCertExprired">Whether the identity
        /// certificate is expired.</param>
        public IntegrationRuntimeConnectionInfo(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), string serviceToken = default(string), string identityCertThumbprint = default(string), string hostServiceUri = default(string), string version = default(string), string publicKey = default(string), bool? isIdentityCertExprired = default(bool?))
        {
            AdditionalProperties = additionalProperties;
            ServiceToken = serviceToken;
            IdentityCertThumbprint = identityCertThumbprint;
            HostServiceUri = hostServiceUri;
            Version = version;
            PublicKey = publicKey;
            IsIdentityCertExprired = isIdentityCertExprired;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets the token generated in service. Callers use this token to
        /// authenticate to integration runtime.
        /// </summary>
        [JsonProperty(PropertyName = "serviceToken")]
        public string ServiceToken { get; private set; }

        /// <summary>
        /// Gets the integration runtime SSL certificate thumbprint. Click-Once
        /// application uses it to do server validation.
        /// </summary>
        [JsonProperty(PropertyName = "identityCertThumbprint")]
        public string IdentityCertThumbprint { get; private set; }

        /// <summary>
        /// Gets the on-premises integration runtime host URL.
        /// </summary>
        [JsonProperty(PropertyName = "hostServiceUri")]
        public string HostServiceUri { get; private set; }

        /// <summary>
        /// Gets the integration runtime version.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; private set; }

        /// <summary>
        /// Gets the public key for encrypting a credential when transferring
        /// the credential to the integration runtime.
        /// </summary>
        [JsonProperty(PropertyName = "publicKey")]
        public string PublicKey { get; private set; }

        /// <summary>
        /// Gets whether the identity certificate is expired.
        /// </summary>
        [JsonProperty(PropertyName = "isIdentityCertExprired")]
        public bool? IsIdentityCertExprired { get; private set; }

    }
}
