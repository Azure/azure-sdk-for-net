// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A database query.
    /// </summary>
    public partial class TopQueries
    {
        /// <summary>
        /// Initializes a new instance of the TopQueries class.
        /// </summary>
        public TopQueries()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TopQueries class.
        /// </summary>
        /// <param name="aggregationFunction">The function that is used to
        /// aggregate each query's metrics. Possible values include: 'min',
        /// 'max', 'avg', 'sum'</param>
        /// <param name="executionType">The execution type that is used to
        /// filter the query instances that are returned. Possible values
        /// include: 'any', 'regular', 'irregular', 'aborted',
        /// 'exception'</param>
        /// <param name="intervalType">The duration of the interval (ISO8601
        /// duration format).</param>
        /// <param name="numberOfTopQueries">The number of requested
        /// queries.</param>
        /// <param name="observationStartTime">The start time for queries that
        /// are returned (ISO8601 format)</param>
        /// <param name="observationEndTime">The end time for queries that are
        /// returned (ISO8601 format)</param>
        /// <param name="observedMetric">The type of metric to use for ordering
        /// the top metrics. Possible values include: 'cpu', 'io', 'logio',
        /// 'duration', 'executionCount'</param>
        /// <param name="queries">The list of queries.</param>
        public TopQueries(QueryAggregationFunction? aggregationFunction = default(QueryAggregationFunction?), QueryExecutionType? executionType = default(QueryExecutionType?), string intervalType = default(string), double? numberOfTopQueries = default(double?), System.DateTime? observationStartTime = default(System.DateTime?), System.DateTime? observationEndTime = default(System.DateTime?), QueryObservedMetricType? observedMetric = default(QueryObservedMetricType?), IList<QueryStatistic> queries = default(IList<QueryStatistic>))
        {
            AggregationFunction = aggregationFunction;
            ExecutionType = executionType;
            IntervalType = intervalType;
            NumberOfTopQueries = numberOfTopQueries;
            ObservationStartTime = observationStartTime;
            ObservationEndTime = observationEndTime;
            ObservedMetric = observedMetric;
            Queries = queries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the function that is used to aggregate each query's metrics.
        /// Possible values include: 'min', 'max', 'avg', 'sum'
        /// </summary>
        [JsonProperty(PropertyName = "aggregationFunction")]
        public QueryAggregationFunction? AggregationFunction { get; private set; }

        /// <summary>
        /// Gets the execution type that is used to filter the query instances
        /// that are returned. Possible values include: 'any', 'regular',
        /// 'irregular', 'aborted', 'exception'
        /// </summary>
        [JsonProperty(PropertyName = "executionType")]
        public QueryExecutionType? ExecutionType { get; private set; }

        /// <summary>
        /// Gets the duration of the interval (ISO8601 duration format).
        /// </summary>
        [JsonProperty(PropertyName = "intervalType")]
        public string IntervalType { get; private set; }

        /// <summary>
        /// Gets the number of requested queries.
        /// </summary>
        [JsonProperty(PropertyName = "numberOfTopQueries")]
        public double? NumberOfTopQueries { get; private set; }

        /// <summary>
        /// Gets the start time for queries that are returned (ISO8601 format)
        /// </summary>
        [JsonProperty(PropertyName = "observationStartTime")]
        public System.DateTime? ObservationStartTime { get; private set; }

        /// <summary>
        /// Gets the end time for queries that are returned (ISO8601 format)
        /// </summary>
        [JsonProperty(PropertyName = "observationEndTime")]
        public System.DateTime? ObservationEndTime { get; private set; }

        /// <summary>
        /// Gets the type of metric to use for ordering the top metrics.
        /// Possible values include: 'cpu', 'io', 'logio', 'duration',
        /// 'executionCount'
        /// </summary>
        [JsonProperty(PropertyName = "observedMetric")]
        public QueryObservedMetricType? ObservedMetric { get; private set; }

        /// <summary>
        /// Gets the list of queries.
        /// </summary>
        [JsonProperty(PropertyName = "queries")]
        public IList<QueryStatistic> Queries { get; private set; }

    }
}
