// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrivateLinkHubsOperations.
    /// </summary>
    public static partial class PrivateLinkHubsOperationsExtensions
    {
            /// <summary>
            /// Returns a list of privateLinkHubs in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<PrivateLinkHub> ListByResourceGroup(this IPrivateLinkHubsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of privateLinkHubs in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PrivateLinkHub>> ListByResourceGroupAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a privateLinkHub
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateLinkHubName'>
            /// The name of the privateLinkHub
            /// </param>
            public static PrivateLinkHub Get(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName)
            {
                return operations.GetAsync(resourceGroupName, privateLinkHubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a privateLinkHub
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateLinkHubName'>
            /// The name of the privateLinkHub
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateLinkHub> GetAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a privateLinkHub
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateLinkHubName'>
            /// The name of the privateLinkHub
            /// </param>
            /// <param name='privateLinkHubPatchInfo'>
            /// PrivateLinkHub patch request properties
            /// </param>
            public static PrivateLinkHub Update(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, PrivateLinkHubPatchInfo privateLinkHubPatchInfo)
            {
                return operations.UpdateAsync(resourceGroupName, privateLinkHubName, privateLinkHubPatchInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a privateLinkHub
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateLinkHubName'>
            /// The name of the privateLinkHub
            /// </param>
            /// <param name='privateLinkHubPatchInfo'>
            /// PrivateLinkHub patch request properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateLinkHub> UpdateAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, PrivateLinkHubPatchInfo privateLinkHubPatchInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, privateLinkHubPatchInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a privateLinkHub
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateLinkHubName'>
            /// The name of the privateLinkHub
            /// </param>
            /// <param name='privateLinkHubInfo'>
            /// PrivateLinkHub create or update request properties
            /// </param>
            public static PrivateLinkHub CreateOrUpdate(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, PrivateLinkHub privateLinkHubInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, privateLinkHubName, privateLinkHubInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a privateLinkHub
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateLinkHubName'>
            /// The name of the privateLinkHub
            /// </param>
            /// <param name='privateLinkHubInfo'>
            /// PrivateLinkHub create or update request properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateLinkHub> CreateOrUpdateAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, PrivateLinkHub privateLinkHubInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, privateLinkHubInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a privateLinkHub
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateLinkHubName'>
            /// The name of the privateLinkHub
            /// </param>
            public static void Delete(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName)
            {
                operations.DeleteAsync(resourceGroupName, privateLinkHubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a privateLinkHub
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='privateLinkHubName'>
            /// The name of the privateLinkHub
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of privateLinkHubs in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<PrivateLinkHub> List(this IPrivateLinkHubsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of privateLinkHubs in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PrivateLinkHub>> ListAsync(this IPrivateLinkHubsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of privateLinkHubs in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PrivateLinkHub> ListByResourceGroupNext(this IPrivateLinkHubsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of privateLinkHubs in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PrivateLinkHub>> ListByResourceGroupNextAsync(this IPrivateLinkHubsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of privateLinkHubs in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PrivateLinkHub> ListNext(this IPrivateLinkHubsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of privateLinkHubs in a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PrivateLinkHub>> ListNextAsync(this IPrivateLinkHubsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
