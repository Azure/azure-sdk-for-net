// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlDatabasesOperations.
    /// </summary>
    public static partial class SqlDatabasesOperationsExtensions
    {
            /// <summary>
            /// Gets a SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            public static SqlDatabase Get(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, sqlDatabaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlDatabase> GetAsync(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlDatabaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new SqlDatabase or updates an existing SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='parameters'>
            /// The requested SqlDatabase resource state.
            /// </param>
            public static SqlDatabase CreateOrUpdate(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabase parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, sqlDatabaseName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new SqlDatabase or updates an existing SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='parameters'>
            /// The requested SqlDatabase resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlDatabase> CreateOrUpdateAsync(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabase parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlDatabaseName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            public static void Delete(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName)
            {
                operations.DeleteAsync(resourceGroupName, workspaceName, sqlDatabaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlDatabaseName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an existing database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='parameters'>
            /// The requested SqlDatabase resource state.
            /// </param>
            public static SqlDatabase Update(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabaseUpdate parameters)
            {
                return operations.UpdateAsync(resourceGroupName, workspaceName, sqlDatabaseName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='parameters'>
            /// The requested SqlDatabase resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlDatabase> UpdateAsync(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabaseUpdate parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlDatabaseName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of sql databases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            public static IPage<SqlDatabase> ListByWorkspace(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName)
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of sql databases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlDatabase>> ListByWorkspaceAsync(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new SqlDatabase or updates an existing SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='parameters'>
            /// The requested SqlDatabase resource state.
            /// </param>
            public static SqlDatabase BeginCreateOrUpdate(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabase parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, sqlDatabaseName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new SqlDatabase or updates an existing SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='parameters'>
            /// The requested SqlDatabase resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlDatabase> BeginCreateOrUpdateAsync(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabase parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlDatabaseName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            public static void BeginDelete(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName)
            {
                operations.BeginDeleteAsync(resourceGroupName, workspaceName, sqlDatabaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the SqlDatabase.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlDatabaseName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates an existing database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='parameters'>
            /// The requested SqlDatabase resource state.
            /// </param>
            public static SqlDatabase BeginUpdate(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabaseUpdate parameters)
            {
                return operations.BeginUpdateAsync(resourceGroupName, workspaceName, sqlDatabaseName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='sqlDatabaseName'>
            /// The name of the sql database.
            /// </param>
            /// <param name='parameters'>
            /// The requested SqlDatabase resource state.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlDatabase> BeginUpdateAsync(this ISqlDatabasesOperations operations, string resourceGroupName, string workspaceName, string sqlDatabaseName, SqlDatabaseUpdate parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlDatabaseName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of sql databases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SqlDatabase> ListByWorkspaceNext(this ISqlDatabasesOperations operations, string nextPageLink)
            {
                return operations.ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of sql databases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SqlDatabase>> ListByWorkspaceNextAsync(this ISqlDatabasesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
