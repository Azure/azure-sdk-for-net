// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KustoPoolPrincipalAssignmentsOperations.
    /// </summary>
    public static partial class KustoPoolPrincipalAssignmentsOperationsExtensions
    {
            /// <summary>
            /// Checks that the principal assignment name is valid and is not already in
            /// use.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the principal assignment.
            /// </param>
            public static CheckNameResult CheckNameAvailability(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, ClusterPrincipalAssignmentCheckNameRequest principalAssignmentName)
            {
                return operations.CheckNameAvailabilityAsync(workspaceName, kustoPoolName, resourceGroupName, principalAssignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks that the principal assignment name is valid and is not already in
            /// use.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the principal assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameResult> CheckNameAvailabilityAsync(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, ClusterPrincipalAssignmentCheckNameRequest principalAssignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, principalAssignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all Kusto pool principalAssignments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IEnumerable<ClusterPrincipalAssignment> List(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
            {
                return operations.ListAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all Kusto pool principalAssignments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<ClusterPrincipalAssignment>> ListAsync(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static ClusterPrincipalAssignment Get(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName)
            {
                return operations.GetAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClusterPrincipalAssignment> GetAsync(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool principalAssignment's parameters supplied for the operation.
            /// </param>
            public static ClusterPrincipalAssignment CreateOrUpdate(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName, ClusterPrincipalAssignment parameters)
            {
                return operations.CreateOrUpdateAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool principalAssignment's parameters supplied for the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClusterPrincipalAssignment> CreateOrUpdateAsync(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName, ClusterPrincipalAssignment parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void Delete(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName)
            {
                operations.DeleteAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool principalAssignment's parameters supplied for the operation.
            /// </param>
            public static ClusterPrincipalAssignment BeginCreateOrUpdate(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName, ClusterPrincipalAssignment parameters)
            {
                return operations.BeginCreateOrUpdateAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='parameters'>
            /// The Kusto pool principalAssignment's parameters supplied for the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClusterPrincipalAssignment> BeginCreateOrUpdateAsync(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName, ClusterPrincipalAssignment parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static void BeginDelete(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName)
            {
                operations.BeginDeleteAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Kusto pool principalAssignment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace.
            /// </param>
            /// <param name='kustoPoolName'>
            /// The name of the Kusto pool.
            /// </param>
            /// <param name='principalAssignmentName'>
            /// The name of the Kusto principalAssignment.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IKustoPoolPrincipalAssignmentsOperations operations, string workspaceName, string kustoPoolName, string principalAssignmentName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(workspaceName, kustoPoolName, principalAssignmentName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
