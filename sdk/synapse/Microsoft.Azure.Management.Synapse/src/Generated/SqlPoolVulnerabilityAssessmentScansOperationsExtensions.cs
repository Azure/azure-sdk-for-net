// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlPoolVulnerabilityAssessmentScansOperations.
    /// </summary>
    public static partial class SqlPoolVulnerabilityAssessmentScansOperationsExtensions
    {
            /// <summary>
            /// Lists the vulnerability assessment scans of a SQL pool
            /// </summary>
            /// <remarks>
            /// Lists the vulnerability assessment scans of a SQL pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            public static IPage<VulnerabilityAssessmentScanRecord> List(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName)
            {
                return operations.ListAsync(resourceGroupName, workspaceName, sqlPoolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the vulnerability assessment scans of a SQL pool
            /// </summary>
            /// <remarks>
            /// Lists the vulnerability assessment scans of a SQL pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VulnerabilityAssessmentScanRecord>> ListAsync(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Executes a Vulnerability Assessment database scan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='scanId'>
            /// The vulnerability assessment scan Id of the scan to retrieve.
            /// </param>
            public static void InitiateScan(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string scanId)
            {
                operations.InitiateScanAsync(resourceGroupName, workspaceName, sqlPoolName, scanId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Executes a Vulnerability Assessment database scan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='scanId'>
            /// The vulnerability assessment scan Id of the scan to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InitiateScanAsync(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string scanId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.InitiateScanWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, scanId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Convert an existing scan result to a human readable format. If already
            /// exists nothing happens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='scanId'>
            /// The vulnerability assessment scan Id of the scan to retrieve.
            /// </param>
            public static SqlPoolVulnerabilityAssessmentScansExport Export(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string scanId)
            {
                return operations.ExportAsync(resourceGroupName, workspaceName, sqlPoolName, scanId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Convert an existing scan result to a human readable format. If already
            /// exists nothing happens
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='scanId'>
            /// The vulnerability assessment scan Id of the scan to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlPoolVulnerabilityAssessmentScansExport> ExportAsync(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string scanId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, scanId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a vulnerability assessment scan record of a Sql pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='scanId'>
            /// The vulnerability assessment scan Id of the scan to retrieve.
            /// </param>
            public static VulnerabilityAssessmentScanRecord Get(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string scanId)
            {
                return operations.GetAsync(resourceGroupName, workspaceName, sqlPoolName, scanId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a vulnerability assessment scan record of a Sql pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='scanId'>
            /// The vulnerability assessment scan Id of the scan to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VulnerabilityAssessmentScanRecord> GetAsync(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string scanId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, scanId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Executes a Vulnerability Assessment database scan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='scanId'>
            /// The vulnerability assessment scan Id of the scan to retrieve.
            /// </param>
            public static void BeginInitiateScan(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string scanId)
            {
                operations.BeginInitiateScanAsync(resourceGroupName, workspaceName, sqlPoolName, scanId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Executes a Vulnerability Assessment database scan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='scanId'>
            /// The vulnerability assessment scan Id of the scan to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginInitiateScanAsync(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string scanId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginInitiateScanWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, scanId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists the vulnerability assessment scans of a SQL pool
            /// </summary>
            /// <remarks>
            /// Lists the vulnerability assessment scans of a SQL pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VulnerabilityAssessmentScanRecord> ListNext(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the vulnerability assessment scans of a SQL pool
            /// </summary>
            /// <remarks>
            /// Lists the vulnerability assessment scans of a SQL pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VulnerabilityAssessmentScanRecord>> ListNextAsync(this ISqlPoolVulnerabilityAssessmentScansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
