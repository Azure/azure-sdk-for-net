// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// Azure Synapse Analytics Management Client
    /// </summary>
    public partial class SynapseManagementClient : ServiceClient<SynapseManagementClient>, ISynapseManagementClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The API version to use for this operation.
        /// </summary>
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets the IBigDataPools.
        /// </summary>
        public virtual IBigDataPools BigDataPools { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the IIpFirewallRules.
        /// </summary>
        public virtual IIpFirewallRules IpFirewallRules { get; private set; }

        /// <summary>
        /// Gets the ISqlPools.
        /// </summary>
        public virtual ISqlPools SqlPools { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolMetadataSyncConfigs.
        /// </summary>
        public virtual ISqlPoolMetadataSyncConfigs SqlPoolMetadataSyncConfigs { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolOperationResults.
        /// </summary>
        public virtual ISqlPoolOperationResults SqlPoolOperationResults { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolGeoBackupPolicies.
        /// </summary>
        public virtual ISqlPoolGeoBackupPolicies SqlPoolGeoBackupPolicies { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolDataWarehouseUserActivities.
        /// </summary>
        public virtual ISqlPoolDataWarehouseUserActivities SqlPoolDataWarehouseUserActivities { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolRestorePoints.
        /// </summary>
        public virtual ISqlPoolRestorePoints SqlPoolRestorePoints { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolReplicationLinks.
        /// </summary>
        public virtual ISqlPoolReplicationLinks SqlPoolReplicationLinks { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolTransparentDataEncryptions.
        /// </summary>
        public virtual ISqlPoolTransparentDataEncryptions SqlPoolTransparentDataEncryptions { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolBlobAuditingPolicies.
        /// </summary>
        public virtual ISqlPoolBlobAuditingPolicies SqlPoolBlobAuditingPolicies { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolOperations.
        /// </summary>
        public virtual ISqlPoolOperations SqlPoolOperations { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolUsages.
        /// </summary>
        public virtual ISqlPoolUsages SqlPoolUsages { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolSensitivityLabels.
        /// </summary>
        public virtual ISqlPoolSensitivityLabels SqlPoolSensitivityLabels { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolSchemas.
        /// </summary>
        public virtual ISqlPoolSchemas SqlPoolSchemas { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolTables.
        /// </summary>
        public virtual ISqlPoolTables SqlPoolTables { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolTableColumns.
        /// </summary>
        public virtual ISqlPoolTableColumns SqlPoolTableColumns { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolConnectionPolicies.
        /// </summary>
        public virtual ISqlPoolConnectionPolicies SqlPoolConnectionPolicies { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolVulnerabilityAssessments.
        /// </summary>
        public virtual ISqlPoolVulnerabilityAssessments SqlPoolVulnerabilityAssessments { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolVulnerabilityAssessmentScans.
        /// </summary>
        public virtual ISqlPoolVulnerabilityAssessmentScans SqlPoolVulnerabilityAssessmentScans { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolSecurityAlertPolicies.
        /// </summary>
        public virtual ISqlPoolSecurityAlertPolicies SqlPoolSecurityAlertPolicies { get; private set; }

        /// <summary>
        /// Gets the ISqlPoolVulnerabilityAssessmentRuleBaselines.
        /// </summary>
        public virtual ISqlPoolVulnerabilityAssessmentRuleBaselines SqlPoolVulnerabilityAssessmentRuleBaselines { get; private set; }

        /// <summary>
        /// Gets the IWorkspaces.
        /// </summary>
        public virtual IWorkspaces Workspaces { get; private set; }

        /// <summary>
        /// Gets the IWorkspaceAadAdmins.
        /// </summary>
        public virtual IWorkspaceAadAdmins WorkspaceAadAdmins { get; private set; }

        /// <summary>
        /// Gets the IWorkspaceManagedIdentitySqlControlSettings.
        /// </summary>
        public virtual IWorkspaceManagedIdentitySqlControlSettings WorkspaceManagedIdentitySqlControlSettings { get; private set; }

        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SynapseManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        public SynapseManagementClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SynapseManagementClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SynapseManagementClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SynapseManagementClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SynapseManagementClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            BigDataPools = new BigDataPools(this);
            Operations = new Operations(this);
            IpFirewallRules = new IpFirewallRules(this);
            SqlPools = new SqlPools(this);
            SqlPoolMetadataSyncConfigs = new SqlPoolMetadataSyncConfigs(this);
            SqlPoolOperationResults = new SqlPoolOperationResults(this);
            SqlPoolGeoBackupPolicies = new SqlPoolGeoBackupPolicies(this);
            SqlPoolDataWarehouseUserActivities = new SqlPoolDataWarehouseUserActivities(this);
            SqlPoolRestorePoints = new SqlPoolRestorePoints(this);
            SqlPoolReplicationLinks = new SqlPoolReplicationLinks(this);
            SqlPoolTransparentDataEncryptions = new SqlPoolTransparentDataEncryptions(this);
            SqlPoolBlobAuditingPolicies = new SqlPoolBlobAuditingPolicies(this);
            SqlPoolOperations = new SqlPoolOperations(this);
            SqlPoolUsages = new SqlPoolUsages(this);
            SqlPoolSensitivityLabels = new SqlPoolSensitivityLabels(this);
            SqlPoolSchemas = new SqlPoolSchemas(this);
            SqlPoolTables = new SqlPoolTables(this);
            SqlPoolTableColumns = new SqlPoolTableColumns(this);
            SqlPoolConnectionPolicies = new SqlPoolConnectionPolicies(this);
            SqlPoolVulnerabilityAssessments = new SqlPoolVulnerabilityAssessments(this);
            SqlPoolVulnerabilityAssessmentScans = new SqlPoolVulnerabilityAssessmentScans(this);
            SqlPoolSecurityAlertPolicies = new SqlPoolSecurityAlertPolicies(this);
            SqlPoolVulnerabilityAssessmentRuleBaselines = new SqlPoolVulnerabilityAssessmentRuleBaselines(this);
            Workspaces = new Workspaces(this);
            WorkspaceAadAdmins = new WorkspaceAadAdmins(this);
            WorkspaceManagedIdentitySqlControlSettings = new WorkspaceManagedIdentitySqlControlSettings(this);
            BaseUri = new System.Uri("https://management.azure.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
        }
    }
}
