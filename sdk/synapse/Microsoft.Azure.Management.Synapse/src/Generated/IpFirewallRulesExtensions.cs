// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for IpFirewallRules.
    /// </summary>
    public static partial class IpFirewallRulesExtensions
    {
            /// <summary>
            /// Returns a list of firewall rules
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            public static IpFirewallRuleInfoListResult ListByWorkspace(this IIpFirewallRules operations, string resourceGroupName, string workspaceName)
            {
                return operations.ListByWorkspaceAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of firewall rules
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IpFirewallRuleInfoListResult> ListByWorkspaceAsync(this IIpFirewallRules operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a firewall rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='ruleName'>
            /// The IP firewall rule name
            /// </param>
            /// <param name='ipFirewallRuleInfo'>
            /// IP firewall rule properties
            /// </param>
            public static IpFirewallRuleInfo CreateOrUpdate(this IIpFirewallRules operations, string resourceGroupName, string workspaceName, string ruleName, IpFirewallRuleInfo ipFirewallRuleInfo)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, workspaceName, ruleName, ipFirewallRuleInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a firewall rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='ruleName'>
            /// The IP firewall rule name
            /// </param>
            /// <param name='ipFirewallRuleInfo'>
            /// IP firewall rule properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IpFirewallRuleInfo> CreateOrUpdateAsync(this IIpFirewallRules operations, string resourceGroupName, string workspaceName, string ruleName, IpFirewallRuleInfo ipFirewallRuleInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, ruleName, ipFirewallRuleInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a firewall rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='ruleName'>
            /// The IP firewall rule name
            /// </param>
            public static object Delete(this IIpFirewallRules operations, string resourceGroupName, string workspaceName, string ruleName)
            {
                return operations.DeleteAsync(resourceGroupName, workspaceName, ruleName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a firewall rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='ruleName'>
            /// The IP firewall rule name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IIpFirewallRules operations, string resourceGroupName, string workspaceName, string ruleName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, ruleName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces firewall rules
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='request'>
            /// Replace all IP firewall rules request
            /// </param>
            public static ReplaceAllFirewallRulesOperationResponse ReplaceAll(this IIpFirewallRules operations, string resourceGroupName, string workspaceName, ReplaceAllIpFirewallRulesRequest request)
            {
                return operations.ReplaceAllAsync(resourceGroupName, workspaceName, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces firewall rules
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='request'>
            /// Replace all IP firewall rules request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplaceAllFirewallRulesOperationResponse> ReplaceAllAsync(this IIpFirewallRules operations, string resourceGroupName, string workspaceName, ReplaceAllIpFirewallRulesRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReplaceAllWithHttpMessagesAsync(resourceGroupName, workspaceName, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
