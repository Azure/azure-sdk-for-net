// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Synapse
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SqlPoolTables.
    /// </summary>
    public static partial class SqlPoolTablesExtensions
    {
            /// <summary>
            /// Gets tables of a given schema in a SQL pool
            /// </summary>
            /// <remarks>
            /// Gets tables of a given schema in a SQL pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema.
            /// </param>
            /// <param name='filter'>
            /// An OData filter expression that filters elements in the collection.
            /// </param>
            public static SqlPoolTableListResult ListBySchema(this ISqlPoolTables operations, string resourceGroupName, string workspaceName, string sqlPoolName, string schemaName, string filter = default(string))
            {
                return operations.ListBySchemaAsync(resourceGroupName, workspaceName, sqlPoolName, schemaName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets tables of a given schema in a SQL pool
            /// </summary>
            /// <remarks>
            /// Gets tables of a given schema in a SQL pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace
            /// </param>
            /// <param name='sqlPoolName'>
            /// SQL pool name
            /// </param>
            /// <param name='schemaName'>
            /// The name of the schema.
            /// </param>
            /// <param name='filter'>
            /// An OData filter expression that filters elements in the collection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SqlPoolTableListResult> ListBySchemaAsync(this ISqlPoolTables operations, string resourceGroupName, string workspaceName, string sqlPoolName, string schemaName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySchemaWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, schemaName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
