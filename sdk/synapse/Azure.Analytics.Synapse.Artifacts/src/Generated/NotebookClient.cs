// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Synapse.Artifacts
{
    /// <summary> The Notebook service client. </summary>
    public partial class NotebookClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://dev.azuresynapse.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of NotebookClient for mocking. </summary>
        protected NotebookClient()
        {
        }

        /// <summary> Initializes a new instance of NotebookClient. </summary>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public NotebookClient(Uri endpoint, TokenCredential credential, ArtifactsClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new ArtifactsClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Lists Notebooks. </summary>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetNotebooksByWorkspaceAsync(RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetNotebooksByWorkspaceRequest(requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.GetNotebooksByWorkspace");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists Notebooks. </summary>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetNotebooksByWorkspace(RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetNotebooksByWorkspaceRequest(requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.GetNotebooksByWorkspace");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetNotebooksByWorkspace"/> and <see cref="GetNotebooksByWorkspaceAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetNotebooksByWorkspaceRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/notebooks", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists a summary of Notebooks. </summary>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetNotebookSummaryByWorkSpaceAsync(RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetNotebookSummaryByWorkSpaceRequest(requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.GetNotebookSummaryByWorkSpace");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists a summary of Notebooks. </summary>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetNotebookSummaryByWorkSpace(RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetNotebookSummaryByWorkSpaceRequest(requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.GetNotebookSummaryByWorkSpace");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetNotebookSummaryByWorkSpace"/> and <see cref="GetNotebookSummaryByWorkSpaceAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetNotebookSummaryByWorkSpaceRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/notebooks/summary", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Creates or updates a Note Book. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> The name of the resource. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts. </term>
        ///   </item>
        ///   <item>
        ///     <term>etag</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Resource Etag. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>Notebook</term>
        ///     <term>Yes</term>
        ///     <term> Properties of Notebook. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>Notebook</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the notebook. </term>
        ///   </item>
        ///   <item>
        ///     <term>bigDataPool</term>
        ///     <term>BigDataPoolReference</term>
        ///     <term></term>
        ///     <term> Big data pool reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>sessionProperties</term>
        ///     <term>NotebookSessionProperties</term>
        ///     <term></term>
        ///     <term> Session properties. </term>
        ///   </item>
        ///   <item>
        ///     <term>metadata</term>
        ///     <term>NotebookMetadata</term>
        ///     <term>Yes</term>
        ///     <term> Notebook root-level metadata. </term>
        ///   </item>
        ///   <item>
        ///     <term>nbformat</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Notebook format (major number). Incremented between backwards incompatible changes to the notebook format. </term>
        ///   </item>
        ///   <item>
        ///     <term>nbformat_minor</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Notebook format (minor number). Incremented for backward compatible changes to the notebook format. </term>
        ///   </item>
        ///   <item>
        ///     <term>cells</term>
        ///     <term>NotebookCell[]</term>
        ///     <term>Yes</term>
        ///     <term> Array of cells of the current notebook. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>BigDataPoolReference</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;BigDataPoolReference&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Big data pool reference type. </term>
        ///   </item>
        ///   <item>
        ///     <term>referenceName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Reference big data pool name. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookSessionProperties</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>driverMemory</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Amount of memory to use for the driver process. </term>
        ///   </item>
        ///   <item>
        ///     <term>driverCores</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Number of cores to use for the driver. </term>
        ///   </item>
        ///   <item>
        ///     <term>executorMemory</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Amount of memory to use per executor process. </term>
        ///   </item>
        ///   <item>
        ///     <term>executorCores</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Number of cores to use for each executor. </term>
        ///   </item>
        ///   <item>
        ///     <term>numExecutors</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Number of executors to launch for this session. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookMetadata</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>kernelspec</term>
        ///     <term>NotebookKernelSpec</term>
        ///     <term></term>
        ///     <term> Kernel information. </term>
        ///   </item>
        ///   <item>
        ///     <term>language_info</term>
        ///     <term>NotebookLanguageInfo</term>
        ///     <term></term>
        ///     <term> Language info. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookKernelSpec</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Name of the kernel specification. </term>
        ///   </item>
        ///   <item>
        ///     <term>display_name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Name to display in UI. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookLanguageInfo</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> The programming language which this kernel runs. </term>
        ///   </item>
        ///   <item>
        ///     <term>codemirror_mode</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The codemirror mode to use for code in this language. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookCell</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cell_type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> String identifying the type of cell. </term>
        ///   </item>
        ///   <item>
        ///     <term>metadata</term>
        ///     <term>AnyObject</term>
        ///     <term>Yes</term>
        ///     <term> Cell-level metadata. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string[]</term>
        ///     <term>Yes</term>
        ///     <term> Contents of the cell, represented as an array of lines. </term>
        ///   </item>
        ///   <item>
        ///     <term>attachments</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Attachments associated with the cell. </term>
        ///   </item>
        ///   <item>
        ///     <term>outputs</term>
        ///     <term>NotebookCellOutputItem[]</term>
        ///     <term></term>
        ///     <term> Cell-level output items. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookCellOutputItem</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> For output_type=stream, determines the name of stream (stdout / stderr). </term>
        ///   </item>
        ///   <item>
        ///     <term>execution_count</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Execution sequence number. </term>
        ///   </item>
        ///   <item>
        ///     <term>output_type</term>
        ///     <term>&quot;execute_result&quot; | &quot;display_data&quot; | &quot;stream&quot; | &quot;error&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Execution, display, or stream outputs. </term>
        ///   </item>
        ///   <item>
        ///     <term>text</term>
        ///     <term>object</term>
        ///     <term></term>
        ///     <term> For output_type=stream, the stream&apos;s text output, represented as a string or an array of strings. </term>
        ///   </item>
        ///   <item>
        ///     <term>data</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Output data. Use MIME type as key, and content as value. </term>
        ///   </item>
        ///   <item>
        ///     <term>metadata</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Metadata for the output item. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="ifMatch"> ETag of the Note book entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateNotebookAsync(string notebookName, RequestContent requestBody, string ifMatch = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateOrUpdateNotebookRequest(notebookName, requestBody, ifMatch, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.CreateOrUpdateNotebook");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a Note Book. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> The name of the resource. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts. </term>
        ///   </item>
        ///   <item>
        ///     <term>etag</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Resource Etag. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>Notebook</term>
        ///     <term>Yes</term>
        ///     <term> Properties of Notebook. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>Notebook</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the notebook. </term>
        ///   </item>
        ///   <item>
        ///     <term>bigDataPool</term>
        ///     <term>BigDataPoolReference</term>
        ///     <term></term>
        ///     <term> Big data pool reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>sessionProperties</term>
        ///     <term>NotebookSessionProperties</term>
        ///     <term></term>
        ///     <term> Session properties. </term>
        ///   </item>
        ///   <item>
        ///     <term>metadata</term>
        ///     <term>NotebookMetadata</term>
        ///     <term>Yes</term>
        ///     <term> Notebook root-level metadata. </term>
        ///   </item>
        ///   <item>
        ///     <term>nbformat</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Notebook format (major number). Incremented between backwards incompatible changes to the notebook format. </term>
        ///   </item>
        ///   <item>
        ///     <term>nbformat_minor</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Notebook format (minor number). Incremented for backward compatible changes to the notebook format. </term>
        ///   </item>
        ///   <item>
        ///     <term>cells</term>
        ///     <term>NotebookCell[]</term>
        ///     <term>Yes</term>
        ///     <term> Array of cells of the current notebook. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>BigDataPoolReference</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;BigDataPoolReference&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Big data pool reference type. </term>
        ///   </item>
        ///   <item>
        ///     <term>referenceName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Reference big data pool name. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookSessionProperties</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>driverMemory</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Amount of memory to use for the driver process. </term>
        ///   </item>
        ///   <item>
        ///     <term>driverCores</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Number of cores to use for the driver. </term>
        ///   </item>
        ///   <item>
        ///     <term>executorMemory</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Amount of memory to use per executor process. </term>
        ///   </item>
        ///   <item>
        ///     <term>executorCores</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Number of cores to use for each executor. </term>
        ///   </item>
        ///   <item>
        ///     <term>numExecutors</term>
        ///     <term>number</term>
        ///     <term>Yes</term>
        ///     <term> Number of executors to launch for this session. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookMetadata</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>kernelspec</term>
        ///     <term>NotebookKernelSpec</term>
        ///     <term></term>
        ///     <term> Kernel information. </term>
        ///   </item>
        ///   <item>
        ///     <term>language_info</term>
        ///     <term>NotebookLanguageInfo</term>
        ///     <term></term>
        ///     <term> Language info. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookKernelSpec</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Name of the kernel specification. </term>
        ///   </item>
        ///   <item>
        ///     <term>display_name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Name to display in UI. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookLanguageInfo</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> The programming language which this kernel runs. </term>
        ///   </item>
        ///   <item>
        ///     <term>codemirror_mode</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The codemirror mode to use for code in this language. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookCell</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>cell_type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> String identifying the type of cell. </term>
        ///   </item>
        ///   <item>
        ///     <term>metadata</term>
        ///     <term>AnyObject</term>
        ///     <term>Yes</term>
        ///     <term> Cell-level metadata. </term>
        ///   </item>
        ///   <item>
        ///     <term>source</term>
        ///     <term>string[]</term>
        ///     <term>Yes</term>
        ///     <term> Contents of the cell, represented as an array of lines. </term>
        ///   </item>
        ///   <item>
        ///     <term>attachments</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Attachments associated with the cell. </term>
        ///   </item>
        ///   <item>
        ///     <term>outputs</term>
        ///     <term>NotebookCellOutputItem[]</term>
        ///     <term></term>
        ///     <term> Cell-level output items. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>NotebookCellOutputItem</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> For output_type=stream, determines the name of stream (stdout / stderr). </term>
        ///   </item>
        ///   <item>
        ///     <term>execution_count</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Execution sequence number. </term>
        ///   </item>
        ///   <item>
        ///     <term>output_type</term>
        ///     <term>&quot;execute_result&quot; | &quot;display_data&quot; | &quot;stream&quot; | &quot;error&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Execution, display, or stream outputs. </term>
        ///   </item>
        ///   <item>
        ///     <term>text</term>
        ///     <term>object</term>
        ///     <term></term>
        ///     <term> For output_type=stream, the stream&apos;s text output, represented as a string or an array of strings. </term>
        ///   </item>
        ///   <item>
        ///     <term>data</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Output data. Use MIME type as key, and content as value. </term>
        ///   </item>
        ///   <item>
        ///     <term>metadata</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Metadata for the output item. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="ifMatch"> ETag of the Note book entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdateNotebook(string notebookName, RequestContent requestBody, string ifMatch = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateOrUpdateNotebookRequest(notebookName, requestBody, ifMatch, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.CreateOrUpdateNotebook");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreateOrUpdateNotebook"/> and <see cref="CreateOrUpdateNotebookAsync"/> operations. </summary>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="ifMatch"> ETag of the Note book entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCreateOrUpdateNotebookRequest(string notebookName, RequestContent requestBody, string ifMatch = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/notebooks/", false);
            uri.AppendPath(notebookName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("If-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Gets a Note Book. </summary>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="ifNoneMatch"> ETag of the Notebook entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetNotebookAsync(string notebookName, string ifNoneMatch = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetNotebookRequest(notebookName, ifNoneMatch, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.GetNotebook");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 304:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a Note Book. </summary>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="ifNoneMatch"> ETag of the Notebook entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetNotebook(string notebookName, string ifNoneMatch = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetNotebookRequest(notebookName, ifNoneMatch, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.GetNotebook");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 304:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetNotebook"/> and <see cref="GetNotebookAsync"/> operations. </summary>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="ifNoneMatch"> ETag of the Notebook entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetNotebookRequest(string notebookName, string ifNoneMatch = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/notebooks/", false);
            uri.AppendPath(notebookName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (ifNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", ifNoneMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a Note book. </summary>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteNotebookAsync(string notebookName, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteNotebookRequest(notebookName, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.DeleteNotebook");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a Note book. </summary>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteNotebook(string notebookName, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteNotebookRequest(notebookName, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.DeleteNotebook");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="DeleteNotebook"/> and <see cref="DeleteNotebookAsync"/> operations. </summary>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateDeleteNotebookRequest(string notebookName, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/notebooks/", false);
            uri.AppendPath(notebookName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Renames a notebook. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>newName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> New name of the artifact. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RenameNotebookAsync(string notebookName, RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateRenameNotebookRequest(notebookName, requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.RenameNotebook");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Renames a notebook. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>newName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> New name of the artifact. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RenameNotebook(string notebookName, RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateRenameNotebookRequest(notebookName, requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("NotebookClient.RenameNotebook");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="RenameNotebook"/> and <see cref="RenameNotebookAsync"/> operations. </summary>
        /// <param name="notebookName"> The notebook name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateRenameNotebookRequest(string notebookName, RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/notebooks/", false);
            uri.AppendPath(notebookName, true);
            uri.AppendPath("/rename", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }
    }
}
