// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Analytics.Synapse.Artifacts;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ArtifactsModelFactory
    {
        /// <summary> Initializes a new instance of LinkConnectionResource. </summary>
        /// <param name="id"> Link connection id. </param>
        /// <param name="name"> Link connection name. </param>
        /// <param name="type"> Link connection type. </param>
        /// <param name="properties"> Properties of link connection. </param>
        /// <param name="description"> Link connection description. </param>
        /// <returns> A new <see cref="Models.LinkConnectionResource"/> instance for mocking. </returns>
        public static LinkConnectionResource LinkConnectionResource(string id = null, string name = null, string type = null, LinkConnection properties = null, string description = null)
        {
            return new LinkConnectionResource(id, name, type, properties, description);
        }

        /// <summary> Initializes a new instance of LinkConnection. </summary>
        /// <param name="sourceDatabase"> Properties of link connection&apos;s source database. </param>
        /// <param name="targetDatabase"> Properties of link connection&apos;s target database. </param>
        /// <param name="landingZone"> Properties of link connection&apos;s landing zone. </param>
        /// <param name="compute"> Properties of link connection&apos;s compute. </param>
        /// <returns> A new <see cref="Models.LinkConnection"/> instance for mocking. </returns>
        public static LinkConnection LinkConnection(LinkConnectionSourceDatabase sourceDatabase = null, LinkConnectionTargetDatabase targetDatabase = null, LinkConnectionLandingZone landingZone = null, LinkConnectionCompute compute = null)
        {
            return new LinkConnection(sourceDatabase, targetDatabase, landingZone, compute);
        }

        /// <summary> Initializes a new instance of LinkConnectionSourceDatabase. </summary>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="typeProperties"> Source database type properties. </param>
        /// <returns> A new <see cref="Models.LinkConnectionSourceDatabase"/> instance for mocking. </returns>
        public static LinkConnectionSourceDatabase LinkConnectionSourceDatabase(LinkedServiceReference linkedService = null, LinkConnectionSourceDatabaseTypeProperties typeProperties = null)
        {
            return new LinkConnectionSourceDatabase(linkedService, typeProperties);
        }

        /// <summary> Initializes a new instance of LinkedServiceReference. </summary>
        /// <param name="type"> Linked service reference type. </param>
        /// <param name="referenceName"> Reference LinkedService name. </param>
        /// <param name="parameters"> Arguments for LinkedService. </param>
        /// <returns> A new <see cref="Models.LinkedServiceReference"/> instance for mocking. </returns>
        public static LinkedServiceReference LinkedServiceReference(LinkedServiceReferenceType type = default, string referenceName = null, IDictionary<string, object> parameters = null)
        {
            parameters ??= new Dictionary<string, object>();

            return new LinkedServiceReference(type, referenceName, parameters);
        }

        /// <summary> Initializes a new instance of LinkConnectionSourceDatabaseTypeProperties. </summary>
        /// <param name="resourceId"> Link connection source database server&apos;s resource id. </param>
        /// <param name="principalId"> Link connection source database server&apos;s principal id. </param>
        /// <returns> A new <see cref="Models.LinkConnectionSourceDatabaseTypeProperties"/> instance for mocking. </returns>
        public static LinkConnectionSourceDatabaseTypeProperties LinkConnectionSourceDatabaseTypeProperties(string resourceId = null, string principalId = null)
        {
            return new LinkConnectionSourceDatabaseTypeProperties(resourceId, principalId);
        }

        /// <summary> Initializes a new instance of LinkConnectionTargetDatabase. </summary>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="typeProperties"> Target database type properties. </param>
        /// <returns> A new <see cref="Models.LinkConnectionTargetDatabase"/> instance for mocking. </returns>
        public static LinkConnectionTargetDatabase LinkConnectionTargetDatabase(LinkedServiceReference linkedService = null, LinkConnectionTargetDatabaseTypeProperties typeProperties = null)
        {
            return new LinkConnectionTargetDatabase(linkedService, typeProperties);
        }

        /// <summary> Initializes a new instance of LinkConnectionTargetDatabaseTypeProperties. </summary>
        /// <param name="crossTableTransaction"> Enable cross table transaction consistency on target database. </param>
        /// <param name="dropExistingTargetTableOnStart"> Drop and recreate same existing target table on link connection target database. </param>
        /// <returns> A new <see cref="Models.LinkConnectionTargetDatabaseTypeProperties"/> instance for mocking. </returns>
        public static LinkConnectionTargetDatabaseTypeProperties LinkConnectionTargetDatabaseTypeProperties(bool? crossTableTransaction = null, bool? dropExistingTargetTableOnStart = null)
        {
            return new LinkConnectionTargetDatabaseTypeProperties(crossTableTransaction, dropExistingTargetTableOnStart);
        }

        /// <summary> Initializes a new instance of LinkConnectionLandingZone. </summary>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="fileSystem"> Landing zone&apos;s file system name. </param>
        /// <param name="folderPath"> Landing zone&apos;s folder path name. </param>
        /// <param name="sasToken"> Landing zone&apos;s sas token. </param>
        /// <returns> A new <see cref="Models.LinkConnectionLandingZone"/> instance for mocking. </returns>
        public static LinkConnectionLandingZone LinkConnectionLandingZone(LinkedServiceReference linkedService = null, string fileSystem = null, string folderPath = null, SecureString sasToken = null)
        {
            return new LinkConnectionLandingZone(linkedService, fileSystem, folderPath, sasToken);
        }

        /// <summary> Initializes a new instance of SecureString. </summary>
        /// <param name="value"> Value of secure string. </param>
        /// <returns> A new <see cref="Models.SecureString"/> instance for mocking. </returns>
        public static SecureString SecureString(string value = null)
        {
            return new SecureString("SecureString", value);
        }

        /// <summary> Initializes a new instance of SecretBase. </summary>
        /// <param name="type"> Type of the secret. </param>
        /// <returns> A new <see cref="Models.SecretBase"/> instance for mocking. </returns>
        public static SecretBase SecretBase(string type = null)
        {
            return new SecretBase(type);
        }

        /// <summary> Initializes a new instance of LinkConnectionCompute. </summary>
        /// <param name="coreCount"> Compute core count used by the link connection. </param>
        /// <param name="computeType"> Link connection&apos;s compute type. </param>
        /// <param name="dataProcessIntervalMinutes"> Link connection&apos;s data process interval in minutes. </param>
        /// <returns> A new <see cref="Models.LinkConnectionCompute"/> instance for mocking. </returns>
        public static LinkConnectionCompute LinkConnectionCompute(int? coreCount = null, string computeType = null, int? dataProcessIntervalMinutes = null)
        {
            return new LinkConnectionCompute(coreCount, computeType, dataProcessIntervalMinutes);
        }

        /// <summary> Initializes a new instance of CloudError. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Property name/path in request associated with error. </param>
        /// <param name="details"> Array with additional error details. </param>
        /// <returns> A new <see cref="Models.CloudError"/> instance for mocking. </returns>
        public static CloudError CloudError(string code = null, string message = null, string target = null, IEnumerable<CloudError> details = null)
        {
            details ??= new List<CloudError>();

            return new CloudError(code, message, target, details?.ToList());
        }

        /// <summary> Initializes a new instance of EditTablesRequest. </summary>
        /// <param name="linkTables"> Edit link tables request. </param>
        /// <returns> A new <see cref="Models.EditTablesRequest"/> instance for mocking. </returns>
        public static EditTablesRequest EditTablesRequest(IEnumerable<LinkTableRequest> linkTables = null)
        {
            linkTables ??= new List<LinkTableRequest>();

            return new EditTablesRequest(linkTables?.ToList());
        }

        /// <summary> Initializes a new instance of LinkTableRequest. </summary>
        /// <param name="id"> Link table id. </param>
        /// <param name="source"> Source table properties for link table request. </param>
        /// <param name="target"> Target table properties for link table request. </param>
        /// <param name="operationType"> Link table operation type. </param>
        /// <returns> A new <see cref="Models.LinkTableRequest"/> instance for mocking. </returns>
        public static LinkTableRequest LinkTableRequest(string id = null, LinkTableRequestSource source = null, LinkTableRequestTarget target = null, string operationType = null)
        {
            return new LinkTableRequest(id, source, target, operationType);
        }

        /// <summary> Initializes a new instance of LinkTableRequestSource. </summary>
        /// <param name="tableName"> Source table table name. </param>
        /// <param name="schemaName"> Source table schema name. </param>
        /// <returns> A new <see cref="Models.LinkTableRequestSource"/> instance for mocking. </returns>
        public static LinkTableRequestSource LinkTableRequestSource(string tableName = null, string schemaName = null)
        {
            return new LinkTableRequestSource(tableName, schemaName);
        }

        /// <summary> Initializes a new instance of LinkTableRequestTarget. </summary>
        /// <param name="tableName"> Target table table name. </param>
        /// <param name="schemaName"> Target table schema name. </param>
        /// <param name="distributionOptions"> Target table distribution options for link table request. </param>
        /// <param name="structureOptions"> Target table structure options for link table request. </param>
        /// <returns> A new <see cref="Models.LinkTableRequestTarget"/> instance for mocking. </returns>
        public static LinkTableRequestTarget LinkTableRequestTarget(string tableName = null, string schemaName = null, LinkTableRequestTargetDistributionOptions distributionOptions = null, LinkTableRequestTargetStructureOptions structureOptions = null)
        {
            return new LinkTableRequestTarget(tableName, schemaName, distributionOptions, structureOptions);
        }

        /// <summary> Initializes a new instance of LinkTableRequestTargetDistributionOptions. </summary>
        /// <param name="type"> Target table distribution type. </param>
        /// <param name="distributionColumn"> Target table distribution column. </param>
        /// <returns> A new <see cref="Models.LinkTableRequestTargetDistributionOptions"/> instance for mocking. </returns>
        public static LinkTableRequestTargetDistributionOptions LinkTableRequestTargetDistributionOptions(string type = null, string distributionColumn = null)
        {
            return new LinkTableRequestTargetDistributionOptions(type, distributionColumn);
        }

        /// <summary> Initializes a new instance of LinkTableRequestTargetStructureOptions. </summary>
        /// <param name="type"> Target table structure type. </param>
        /// <returns> A new <see cref="Models.LinkTableRequestTargetStructureOptions"/> instance for mocking. </returns>
        public static LinkTableRequestTargetStructureOptions LinkTableRequestTargetStructureOptions(string type = null)
        {
            return new LinkTableRequestTargetStructureOptions(type);
        }

        /// <summary> Initializes a new instance of LinkConnectionDetailedStatus. </summary>
        /// <param name="id"> Link connection id. </param>
        /// <param name="name"> Link connection name. </param>
        /// <param name="isApplyingChanges"> Is link connection applying changes. </param>
        /// <param name="isPartiallyFailed"> Is link connection partially failed. </param>
        /// <param name="startTime"> Link connection start time. </param>
        /// <param name="stopTime"> Link connection stop time. </param>
        /// <param name="status"> Link connection status. </param>
        /// <param name="continuousRunId"> Link connection&apos;s corresponding continuous run id. </param>
        /// <param name="error"> Link connection error. </param>
        /// <param name="refreshStatus"> Link connection refresh status. </param>
        /// <param name="landingZoneCredentialExpireTime"> Link connection landing zone credential expire time. </param>
        /// <returns> A new <see cref="Models.LinkConnectionDetailedStatus"/> instance for mocking. </returns>
        public static LinkConnectionDetailedStatus LinkConnectionDetailedStatus(string id = null, string name = null, bool? isApplyingChanges = null, bool? isPartiallyFailed = null, object startTime = null, object stopTime = null, string status = null, string continuousRunId = null, object error = null, LinkConnectionRefreshStatus refreshStatus = null, DateTimeOffset? landingZoneCredentialExpireTime = null)
        {
            return new LinkConnectionDetailedStatus(id, name, isApplyingChanges, isPartiallyFailed, startTime, stopTime, status, continuousRunId, error, refreshStatus, landingZoneCredentialExpireTime);
        }

        /// <summary> Initializes a new instance of LinkConnectionRefreshStatus. </summary>
        /// <param name="refreshStatus"> Link connection refresh status. </param>
        /// <param name="errorMessage"> Link connection refresh error message. </param>
        /// <returns> A new <see cref="Models.LinkConnectionRefreshStatus"/> instance for mocking. </returns>
        public static LinkConnectionRefreshStatus LinkConnectionRefreshStatus(string refreshStatus = null, string errorMessage = null)
        {
            return new LinkConnectionRefreshStatus(refreshStatus, errorMessage);
        }

        /// <summary> Initializes a new instance of LinkTableListResponse. </summary>
        /// <param name="value"> List link table value. </param>
        /// <returns> A new <see cref="Models.LinkTableListResponse"/> instance for mocking. </returns>
        public static LinkTableListResponse LinkTableListResponse(IEnumerable<LinkTableResource> value = null)
        {
            value ??= new List<LinkTableResource>();

            return new LinkTableListResponse(value?.ToList());
        }

        /// <summary> Initializes a new instance of LinkTableResource. </summary>
        /// <param name="id"> Link table id. </param>
        /// <param name="name"> Link table name. </param>
        /// <param name="source"> Source table properties for link table request. </param>
        /// <param name="target"> Target table properties for link table request. </param>
        /// <returns> A new <see cref="Models.LinkTableResource"/> instance for mocking. </returns>
        public static LinkTableResource LinkTableResource(string id = null, string name = null, LinkTableRequestSource source = null, LinkTableRequestTarget target = null)
        {
            return new LinkTableResource(id, name, source, target);
        }

        /// <summary> Initializes a new instance of LinkConnectionQueryTableStatus. </summary>
        /// <param name="value"> Link tables&apos; status. </param>
        /// <param name="continuationToken"> Continuation token to query table status. </param>
        /// <returns> A new <see cref="Models.LinkConnectionQueryTableStatus"/> instance for mocking. </returns>
        public static LinkConnectionQueryTableStatus LinkConnectionQueryTableStatus(IEnumerable<LinkTableStatus> value = null, object continuationToken = null)
        {
            value ??= new List<LinkTableStatus>();

            return new LinkConnectionQueryTableStatus(value?.ToList(), continuationToken);
        }

        /// <summary> Initializes a new instance of LinkTableStatus. </summary>
        /// <param name="id"> ID provided by the client. </param>
        /// <param name="status"> Link table status. </param>
        /// <param name="errorMessage"> Link table error message. </param>
        /// <param name="startTime"> Link table start time. </param>
        /// <param name="stopTime"> Link table stop time. </param>
        /// <param name="linkTableId"> Link table ID. </param>
        /// <param name="errorCode"> Link table error code. </param>
        /// <param name="lastProcessedData"> Link table last processed data time. </param>
        /// <param name="lastTransactionCommitTime"> Link table last transaction commit time. </param>
        /// <returns> A new <see cref="Models.LinkTableStatus"/> instance for mocking. </returns>
        public static LinkTableStatus LinkTableStatus(string id = null, string status = null, string errorMessage = null, object startTime = null, object stopTime = null, string linkTableId = null, string errorCode = null, DateTimeOffset? lastProcessedData = null, DateTimeOffset? lastTransactionCommitTime = null)
        {
            return new LinkTableStatus(id, status, errorMessage, startTime, stopTime, linkTableId, errorCode, lastProcessedData, lastTransactionCommitTime);
        }

        /// <summary> Initializes a new instance of KqlScriptResource. </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="properties"> Properties of sql script. </param>
        /// <returns> A new <see cref="Models.KqlScriptResource"/> instance for mocking. </returns>
        public static KqlScriptResource KqlScriptResource(string id = null, string name = null, string type = null, KqlScript properties = null)
        {
            return new KqlScriptResource(id, name, type, properties);
        }

        /// <summary> Initializes a new instance of KqlScript. </summary>
        /// <param name="content"></param>
        /// <returns> A new <see cref="Models.KqlScript"/> instance for mocking. </returns>
        public static KqlScript KqlScript(KqlScriptContent content = null)
        {
            return new KqlScript(content);
        }

        /// <summary> Initializes a new instance of KqlScriptContent. </summary>
        /// <param name="query"></param>
        /// <param name="metadata"></param>
        /// <param name="currentConnection"></param>
        /// <returns> A new <see cref="Models.KqlScriptContent"/> instance for mocking. </returns>
        public static KqlScriptContent KqlScriptContent(string query = null, KqlScriptContentMetadata metadata = null, KqlScriptContentCurrentConnection currentConnection = null)
        {
            return new KqlScriptContent(query, metadata, currentConnection);
        }

        /// <summary> Initializes a new instance of KqlScriptContentMetadata. </summary>
        /// <param name="language"></param>
        /// <returns> A new <see cref="Models.KqlScriptContentMetadata"/> instance for mocking. </returns>
        public static KqlScriptContentMetadata KqlScriptContentMetadata(string language = null)
        {
            return new KqlScriptContentMetadata(language);
        }

        /// <summary> Initializes a new instance of KqlScriptContentCurrentConnection. </summary>
        /// <param name="name"></param>
        /// <param name="poolName"></param>
        /// <param name="databaseName"></param>
        /// <param name="type"></param>
        /// <returns> A new <see cref="Models.KqlScriptContentCurrentConnection"/> instance for mocking. </returns>
        public static KqlScriptContentCurrentConnection KqlScriptContentCurrentConnection(string name = null, string poolName = null, string databaseName = null, string type = null)
        {
            return new KqlScriptContentCurrentConnection(name, poolName, databaseName, type);
        }

        /// <summary> Initializes a new instance of MetastoreRegistrationResponse. </summary>
        /// <param name="status"> Enumerates possible request statuses. </param>
        /// <returns> A new <see cref="Models.MetastoreRegistrationResponse"/> instance for mocking. </returns>
        public static MetastoreRegistrationResponse MetastoreRegistrationResponse(RequestStatus? status = null)
        {
            return new MetastoreRegistrationResponse(status);
        }

        /// <summary> Initializes a new instance of MetastoreRequestSuccessResponse. </summary>
        /// <param name="status"> Enumerates possible Status of the resource. </param>
        /// <returns> A new <see cref="Models.MetastoreRequestSuccessResponse"/> instance for mocking. </returns>
        public static MetastoreRequestSuccessResponse MetastoreRequestSuccessResponse(ResourceStatus? status = null)
        {
            return new MetastoreRequestSuccessResponse(status);
        }

        /// <summary> Initializes a new instance of MetastoreUpdationResponse. </summary>
        /// <param name="status"> Enumerates possible request statuses. </param>
        /// <returns> A new <see cref="Models.MetastoreUpdationResponse"/> instance for mocking. </returns>
        public static MetastoreUpdationResponse MetastoreUpdationResponse(RequestStatus? status = null)
        {
            return new MetastoreUpdationResponse(status);
        }

        /// <summary> Initializes a new instance of SparkConfigurationResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of Spark Configuration. </param>
        /// <returns> A new <see cref="Models.SparkConfigurationResource"/> instance for mocking. </returns>
        public static SparkConfigurationResource SparkConfigurationResource(string id = null, string name = null, string type = null, string etag = null, SparkConfiguration properties = null)
        {
            return new SparkConfigurationResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of SparkConfiguration. </summary>
        /// <param name="description"> Description about the SparkConfiguration. </param>
        /// <param name="configs"> SparkConfiguration configs. </param>
        /// <param name="annotations"> Annotations for SparkConfiguration. </param>
        /// <param name="notes"> additional Notes. </param>
        /// <param name="createdBy"> The identity that created the resource. </param>
        /// <param name="created"> The timestamp of resource creation. </param>
        /// <param name="configMergeRule"> SparkConfiguration configMergeRule. </param>
        /// <returns> A new <see cref="Models.SparkConfiguration"/> instance for mocking. </returns>
        public static SparkConfiguration SparkConfiguration(string description = null, IDictionary<string, string> configs = null, IEnumerable<string> annotations = null, string notes = null, string createdBy = null, DateTimeOffset? created = null, IDictionary<string, string> configMergeRule = null)
        {
            configs ??= new Dictionary<string, string>();
            annotations ??= new List<string>();
            configMergeRule ??= new Dictionary<string, string>();

            return new SparkConfiguration(description, configs, annotations?.ToList(), notes, createdBy, created, configMergeRule);
        }

        /// <summary> Initializes a new instance of SubResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="Models.SubResource"/> instance for mocking. </returns>
        public static SubResource SubResource(string id = null, string name = null, string type = null, string etag = null)
        {
            return new SubResource(id, name, type, etag);
        }

        /// <summary> Initializes a new instance of AzureEntityResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="Models.AzureEntityResource"/> instance for mocking. </returns>
        public static AzureEntityResource AzureEntityResource(string id = null, string name = null, string type = null, string etag = null)
        {
            return new AzureEntityResource(id, name, type, etag);
        }

        /// <summary> Initializes a new instance of Resource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <returns> A new <see cref="Models.Resource"/> instance for mocking. </returns>
        public static Resource Resource(string id = null, string name = null, string type = null)
        {
            return new Resource(id, name, type);
        }

        /// <summary> Initializes a new instance of BigDataPoolResourceInfoListResult. </summary>
        /// <param name="nextLink"> Link to the next page of results. </param>
        /// <param name="value"> List of Big Data pools. </param>
        /// <returns> A new <see cref="Models.BigDataPoolResourceInfoListResult"/> instance for mocking. </returns>
        public static BigDataPoolResourceInfoListResult BigDataPoolResourceInfoListResult(string nextLink = null, IEnumerable<BigDataPoolResourceInfo> value = null)
        {
            value ??= new List<BigDataPoolResourceInfo>();

            return new BigDataPoolResourceInfoListResult(nextLink, value?.ToList());
        }

        /// <summary> Initializes a new instance of BigDataPoolResourceInfo. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="provisioningState"> The state of the Big Data pool. </param>
        /// <param name="autoScale"> Auto-scaling properties. </param>
        /// <param name="creationDate"> The time when the Big Data pool was created. </param>
        /// <param name="autoPause"> Auto-pausing properties. </param>
        /// <param name="isComputeIsolationEnabled"> Whether compute isolation is required or not. </param>
        /// <param name="sessionLevelPackagesEnabled"> Whether session level packages enabled. </param>
        /// <param name="cacheSize"> The cache size. </param>
        /// <param name="dynamicExecutorAllocation"> Dynamic Executor Allocation. </param>
        /// <param name="sparkEventsFolder"> The Spark events folder. </param>
        /// <param name="nodeCount"> The number of nodes in the Big Data pool. </param>
        /// <param name="libraryRequirements"> Library version requirements. </param>
        /// <param name="customLibraries"> List of custom libraries/packages associated with the spark pool. </param>
        /// <param name="sparkConfigProperties"> Spark configuration file to specify additional properties. </param>
        /// <param name="sparkVersion"> The Apache Spark version. </param>
        /// <param name="defaultSparkLogFolder"> The default folder where Spark logs will be written. </param>
        /// <param name="nodeSize"> The level of compute power that each node in the Big Data pool has. </param>
        /// <param name="nodeSizeFamily"> The kind of nodes that the Big Data pool provides. </param>
        /// <param name="lastSucceededTimestamp"> The time when the Big Data pool was updated successfully. </param>
        /// <returns> A new <see cref="Models.BigDataPoolResourceInfo"/> instance for mocking. </returns>
        public static BigDataPoolResourceInfo BigDataPoolResourceInfo(string id = null, string name = null, string type = null, IDictionary<string, string> tags = null, string location = null, string provisioningState = null, AutoScaleProperties autoScale = null, DateTimeOffset? creationDate = null, AutoPauseProperties autoPause = null, bool? isComputeIsolationEnabled = null, bool? sessionLevelPackagesEnabled = null, int? cacheSize = null, DynamicExecutorAllocation dynamicExecutorAllocation = null, string sparkEventsFolder = null, int? nodeCount = null, LibraryRequirements libraryRequirements = null, IEnumerable<LibraryInfo> customLibraries = null, LibraryRequirements sparkConfigProperties = null, string sparkVersion = null, string defaultSparkLogFolder = null, NodeSize? nodeSize = null, NodeSizeFamily? nodeSizeFamily = null, DateTimeOffset? lastSucceededTimestamp = null)
        {
            tags ??= new Dictionary<string, string>();
            customLibraries ??= new List<LibraryInfo>();

            return new BigDataPoolResourceInfo(id, name, type, tags, location, provisioningState, autoScale, creationDate, autoPause, isComputeIsolationEnabled, sessionLevelPackagesEnabled, cacheSize, dynamicExecutorAllocation, sparkEventsFolder, nodeCount, libraryRequirements, customLibraries?.ToList(), sparkConfigProperties, sparkVersion, defaultSparkLogFolder, nodeSize, nodeSizeFamily, lastSucceededTimestamp);
        }

        /// <summary> Initializes a new instance of AutoScaleProperties. </summary>
        /// <param name="minNodeCount"> The minimum number of nodes the Big Data pool can support. </param>
        /// <param name="enabled"> Whether automatic scaling is enabled for the Big Data pool. </param>
        /// <param name="maxNodeCount"> The maximum number of nodes the Big Data pool can support. </param>
        /// <returns> A new <see cref="Models.AutoScaleProperties"/> instance for mocking. </returns>
        public static AutoScaleProperties AutoScaleProperties(int? minNodeCount = null, bool? enabled = null, int? maxNodeCount = null)
        {
            return new AutoScaleProperties(minNodeCount, enabled, maxNodeCount);
        }

        /// <summary> Initializes a new instance of AutoPauseProperties. </summary>
        /// <param name="delayInMinutes"> Number of minutes of idle time before the Big Data pool is automatically paused. </param>
        /// <param name="enabled"> Whether auto-pausing is enabled for the Big Data pool. </param>
        /// <returns> A new <see cref="Models.AutoPauseProperties"/> instance for mocking. </returns>
        public static AutoPauseProperties AutoPauseProperties(int? delayInMinutes = null, bool? enabled = null)
        {
            return new AutoPauseProperties(delayInMinutes, enabled);
        }

        /// <summary> Initializes a new instance of DynamicExecutorAllocation. </summary>
        /// <param name="enabled"> Indicates whether Dynamic Executor Allocation is enabled or not. </param>
        /// <returns> A new <see cref="Models.DynamicExecutorAllocation"/> instance for mocking. </returns>
        public static DynamicExecutorAllocation DynamicExecutorAllocation(bool? enabled = null)
        {
            return new DynamicExecutorAllocation(enabled);
        }

        /// <summary> Initializes a new instance of LibraryRequirements. </summary>
        /// <param name="time"> The last update time of the library requirements file. </param>
        /// <param name="content"> The library requirements. </param>
        /// <param name="filename"> The filename of the library requirements file. </param>
        /// <returns> A new <see cref="Models.LibraryRequirements"/> instance for mocking. </returns>
        public static LibraryRequirements LibraryRequirements(DateTimeOffset? time = null, string content = null, string filename = null)
        {
            return new LibraryRequirements(time, content, filename);
        }

        /// <summary> Initializes a new instance of LibraryInfo. </summary>
        /// <param name="name"> Name of the library. </param>
        /// <param name="path"> Storage blob path of library. </param>
        /// <param name="containerName"> Storage blob container name. </param>
        /// <param name="uploadedTimestamp"> The last update time of the library. </param>
        /// <param name="type"> Type of the library. </param>
        /// <param name="provisioningStatus"> Provisioning status of the library/package. </param>
        /// <param name="creatorId"> Creator Id of the library/package. </param>
        /// <returns> A new <see cref="Models.LibraryInfo"/> instance for mocking. </returns>
        public static LibraryInfo LibraryInfo(string name = null, string path = null, string containerName = null, DateTimeOffset? uploadedTimestamp = null, string type = null, string provisioningStatus = null, string creatorId = null)
        {
            return new LibraryInfo(name, path, containerName, uploadedTimestamp, type, provisioningStatus, creatorId);
        }

        /// <summary> Initializes a new instance of TrackedResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <returns> A new <see cref="Models.TrackedResource"/> instance for mocking. </returns>
        public static TrackedResource TrackedResource(string id = null, string name = null, string type = null, IDictionary<string, string> tags = null, string location = null)
        {
            tags ??= new Dictionary<string, string>();

            return new TrackedResource(id, name, type, tags, location);
        }

        /// <summary> Initializes a new instance of DataFlowResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties">
        /// Data flow properties.
        /// Please note <see cref="DataFlow"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Flowlet"/> and <see cref="MappingDataFlow"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DataFlowResource"/> instance for mocking. </returns>
        public static DataFlowResource DataFlowResource(string id = null, string name = null, string type = null, string etag = null, DataFlow properties = null)
        {
            return new DataFlowResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of DataFlow. </summary>
        /// <param name="type"> Type of data flow. </param>
        /// <param name="description"> The description of the data flow. </param>
        /// <param name="annotations"> List of tags that can be used for describing the data flow. </param>
        /// <param name="folder"> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </param>
        /// <returns> A new <see cref="Models.DataFlow"/> instance for mocking. </returns>
        public static DataFlow DataFlow(string type = null, string description = null, IEnumerable<object> annotations = null, DataFlowFolder folder = null)
        {
            annotations ??= new List<object>();

            return new DataFlow(type, description, annotations?.ToList(), folder);
        }

        /// <summary> Initializes a new instance of DataFlowFolder. </summary>
        /// <param name="name"> The name of the folder that this data flow is in. </param>
        /// <returns> A new <see cref="Models.DataFlowFolder"/> instance for mocking. </returns>
        public static DataFlowFolder DataFlowFolder(string name = null)
        {
            return new DataFlowFolder(name);
        }

        /// <summary> Initializes a new instance of CreateDataFlowDebugSessionRequest. </summary>
        /// <param name="computeType"> Compute type of the cluster. The value will be overwritten by the same setting in integration runtime if provided. </param>
        /// <param name="coreCount"> Core count of the cluster. The value will be overwritten by the same setting in integration runtime if provided. </param>
        /// <param name="timeToLive"> Time to live setting of the cluster in minutes. </param>
        /// <param name="integrationRuntime"> Set to use integration runtime setting for data flow debug session. </param>
        /// <returns> A new <see cref="Models.CreateDataFlowDebugSessionRequest"/> instance for mocking. </returns>
        public static CreateDataFlowDebugSessionRequest CreateDataFlowDebugSessionRequest(string computeType = null, int? coreCount = null, int? timeToLive = null, IntegrationRuntimeDebugResource integrationRuntime = null)
        {
            return new CreateDataFlowDebugSessionRequest(computeType, coreCount, timeToLive, integrationRuntime);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeDebugResource. </summary>
        /// <param name="name"> The resource name. </param>
        /// <param name="properties">
        /// Integration runtime properties.
        /// Please note <see cref="IntegrationRuntime"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ManagedIntegrationRuntime"/> and <see cref="SelfHostedIntegrationRuntime"/>.
        /// </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeDebugResource"/> instance for mocking. </returns>
        public static IntegrationRuntimeDebugResource IntegrationRuntimeDebugResource(string name = null, IntegrationRuntime properties = null)
        {
            return new IntegrationRuntimeDebugResource(name, properties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntime. </summary>
        /// <param name="type"> Type of integration runtime. </param>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntime"/> instance for mocking. </returns>
        public static IntegrationRuntime IntegrationRuntime(string type = null, string description = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new IntegrationRuntime(type, description, additionalProperties);
        }

        /// <summary> Initializes a new instance of SubResourceDebugResource. </summary>
        /// <param name="name"> The resource name. </param>
        /// <returns> A new <see cref="Models.SubResourceDebugResource"/> instance for mocking. </returns>
        public static SubResourceDebugResource SubResourceDebugResource(string name = null)
        {
            return new SubResourceDebugResource(name);
        }

        /// <summary> Initializes a new instance of CreateDataFlowDebugSessionResponse. </summary>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <returns> A new <see cref="Models.CreateDataFlowDebugSessionResponse"/> instance for mocking. </returns>
        public static CreateDataFlowDebugSessionResponse CreateDataFlowDebugSessionResponse(string sessionId = null)
        {
            return new CreateDataFlowDebugSessionResponse(sessionId);
        }

        /// <summary> Initializes a new instance of DataFlowDebugSessionInfo. </summary>
        /// <param name="dataFlowName"> The name of the data flow. </param>
        /// <param name="computeType"> Compute type of the cluster. </param>
        /// <param name="coreCount"> Core count of the cluster. </param>
        /// <param name="nodeCount"> Node count of the cluster. (deprecated property). </param>
        /// <param name="integrationRuntimeName"> Attached integration runtime name of data flow debug session. </param>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="startTime"> Start time of data flow debug session. </param>
        /// <param name="timeToLiveInMinutes"> Compute type of the cluster. </param>
        /// <param name="lastActivityTime"> Last activity time of data flow debug session. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugSessionInfo"/> instance for mocking. </returns>
        public static DataFlowDebugSessionInfo DataFlowDebugSessionInfo(string dataFlowName = null, string computeType = null, int? coreCount = null, int? nodeCount = null, string integrationRuntimeName = null, string sessionId = null, string startTime = null, int? timeToLiveInMinutes = null, string lastActivityTime = null, IReadOnlyDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DataFlowDebugSessionInfo(dataFlowName, computeType, coreCount, nodeCount, integrationRuntimeName, sessionId, startTime, timeToLiveInMinutes, lastActivityTime, additionalProperties);
        }

        /// <summary> Initializes a new instance of DataFlowDebugPackage. </summary>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="dataFlow"> Data flow instance. </param>
        /// <param name="dataFlows"> List of Data flows. </param>
        /// <param name="datasets"> List of datasets. </param>
        /// <param name="linkedServices"> List of linked services. </param>
        /// <param name="staging"> Staging info for debug session. </param>
        /// <param name="debugSettings"> Data flow debug settings. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugPackage"/> instance for mocking. </returns>
        public static DataFlowDebugPackage DataFlowDebugPackage(string sessionId = null, DataFlowDebugResource dataFlow = null, IEnumerable<DataFlowDebugResource> dataFlows = null, IEnumerable<DatasetDebugResource> datasets = null, IEnumerable<LinkedServiceDebugResource> linkedServices = null, DataFlowStagingInfo staging = null, DataFlowDebugPackageDebugSettings debugSettings = null, IDictionary<string, object> additionalProperties = null)
        {
            dataFlows ??= new List<DataFlowDebugResource>();
            datasets ??= new List<DatasetDebugResource>();
            linkedServices ??= new List<LinkedServiceDebugResource>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DataFlowDebugPackage(sessionId, dataFlow, dataFlows?.ToList(), datasets?.ToList(), linkedServices?.ToList(), staging, debugSettings, additionalProperties);
        }

        /// <summary> Initializes a new instance of DataFlowDebugResource. </summary>
        /// <param name="name"> The resource name. </param>
        /// <param name="properties">
        /// Data flow properties.
        /// Please note <see cref="DataFlow"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Flowlet"/> and <see cref="MappingDataFlow"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DataFlowDebugResource"/> instance for mocking. </returns>
        public static DataFlowDebugResource DataFlowDebugResource(string name = null, DataFlow properties = null)
        {
            return new DataFlowDebugResource(name, properties);
        }

        /// <summary> Initializes a new instance of DatasetDebugResource. </summary>
        /// <param name="name"> The resource name. </param>
        /// <param name="properties">
        /// Dataset properties.
        /// Please note <see cref="Dataset"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMWSObjectDataset"/>, <see cref="AmazonRdsForOracleTableDataset"/>, <see cref="AmazonRdsForSqlServerTableDataset"/>, <see cref="AmazonRedshiftTableDataset"/>, <see cref="AmazonS3Dataset"/>, <see cref="AvroDataset"/>, <see cref="AzureBlobDataset"/>, <see cref="AzureBlobFSDataset"/>, <see cref="AzureDataExplorerTableDataset"/>, <see cref="AzureDataLakeStoreDataset"/>, <see cref="AzureDatabricksDeltaLakeDataset"/>, <see cref="AzureMariaDBTableDataset"/>, <see cref="AzureMySqlTableDataset"/>, <see cref="AzurePostgreSqlTableDataset"/>, <see cref="AzureSearchIndexDataset"/>, <see cref="AzureSqlDWTableDataset"/>, <see cref="AzureSqlMITableDataset"/>, <see cref="AzureSqlTableDataset"/>, <see cref="AzureTableDataset"/>, <see cref="BinaryDataset"/>, <see cref="CassandraTableDataset"/>, <see cref="CommonDataServiceForAppsEntityDataset"/>, <see cref="ConcurObjectDataset"/>, <see cref="CosmosDbMongoDbApiCollectionDataset"/>, <see cref="CosmosDbSqlApiCollectionDataset"/>, <see cref="CouchbaseTableDataset"/>, <see cref="CustomDataset"/>, <see cref="Db2TableDataset"/>, <see cref="DelimitedTextDataset"/>, <see cref="DocumentDbCollectionDataset"/>, <see cref="DrillTableDataset"/>, <see cref="DynamicsAXResourceDataset"/>, <see cref="DynamicsCrmEntityDataset"/>, <see cref="DynamicsEntityDataset"/>, <see cref="EloquaObjectDataset"/>, <see cref="ExcelDataset"/>, <see cref="FileShareDataset"/>, <see cref="GoogleAdWordsObjectDataset"/>, <see cref="GoogleBigQueryObjectDataset"/>, <see cref="GreenplumTableDataset"/>, <see cref="HBaseObjectDataset"/>, <see cref="HiveObjectDataset"/>, <see cref="HttpDataset"/>, <see cref="HubspotObjectDataset"/>, <see cref="ImpalaObjectDataset"/>, <see cref="InformixTableDataset"/>, <see cref="JiraObjectDataset"/>, <see cref="JsonDataset"/>, <see cref="MagentoObjectDataset"/>, <see cref="MariaDBTableDataset"/>, <see cref="MarketoObjectDataset"/>, <see cref="MicrosoftAccessTableDataset"/>, <see cref="MongoDbAtlasCollectionDataset"/>, <see cref="MongoDbCollectionDataset"/>, <see cref="MongoDbV2CollectionDataset"/>, <see cref="MySqlTableDataset"/>, <see cref="NetezzaTableDataset"/>, <see cref="ODataResourceDataset"/>, <see cref="OdbcTableDataset"/>, <see cref="Office365Dataset"/>, <see cref="OracleServiceCloudObjectDataset"/>, <see cref="OracleTableDataset"/>, <see cref="OrcDataset"/>, <see cref="ParquetDataset"/>, <see cref="PaypalObjectDataset"/>, <see cref="PhoenixObjectDataset"/>, <see cref="PostgreSqlTableDataset"/>, <see cref="PrestoObjectDataset"/>, <see cref="QuickBooksObjectDataset"/>, <see cref="RelationalTableDataset"/>, <see cref="ResponsysObjectDataset"/>, <see cref="RestResourceDataset"/>, <see cref="SalesforceMarketingCloudObjectDataset"/>, <see cref="SalesforceObjectDataset"/>, <see cref="SalesforceServiceCloudObjectDataset"/>, <see cref="SapBwCubeDataset"/>, <see cref="SapCloudForCustomerResourceDataset"/>, <see cref="SapEccResourceDataset"/>, <see cref="SapHanaTableDataset"/>, <see cref="SapOdpResourceDataset"/>, <see cref="SapOpenHubTableDataset"/>, <see cref="SapTableResourceDataset"/>, <see cref="ServiceNowObjectDataset"/>, <see cref="SharePointOnlineListResourceDataset"/>, <see cref="ShopifyObjectDataset"/>, <see cref="SnowflakeDataset"/>, <see cref="SparkObjectDataset"/>, <see cref="SqlServerTableDataset"/>, <see cref="SquareObjectDataset"/>, <see cref="SybaseTableDataset"/>, <see cref="TeradataTableDataset"/>, <see cref="VerticaTableDataset"/>, <see cref="WebTableDataset"/>, <see cref="XeroObjectDataset"/>, <see cref="XmlDataset"/> and <see cref="ZohoObjectDataset"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DatasetDebugResource"/> instance for mocking. </returns>
        public static DatasetDebugResource DatasetDebugResource(string name = null, Dataset properties = null)
        {
            return new DatasetDebugResource(name, properties);
        }

        /// <summary> Initializes a new instance of Dataset. </summary>
        /// <param name="type"> Type of dataset. </param>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.Dataset"/> instance for mocking. </returns>
        public static Dataset Dataset(string type = null, string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Dataset(type, description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties);
        }

        /// <summary> Initializes a new instance of ParameterSpecification. </summary>
        /// <param name="type"> Parameter type. </param>
        /// <param name="defaultValue"> Default value of parameter. </param>
        /// <returns> A new <see cref="Models.ParameterSpecification"/> instance for mocking. </returns>
        public static ParameterSpecification ParameterSpecification(ParameterType type = default, object defaultValue = null)
        {
            return new ParameterSpecification(type, defaultValue);
        }

        /// <summary> Initializes a new instance of DatasetFolder. </summary>
        /// <param name="name"> The name of the folder that this Dataset is in. </param>
        /// <returns> A new <see cref="Models.DatasetFolder"/> instance for mocking. </returns>
        public static DatasetFolder DatasetFolder(string name = null)
        {
            return new DatasetFolder(name);
        }

        /// <summary> Initializes a new instance of LinkedServiceDebugResource. </summary>
        /// <param name="name"> The resource name. </param>
        /// <param name="properties">
        /// Properties of linked service.
        /// Please note <see cref="LinkedService"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMWSLinkedService"/>, <see cref="AmazonRdsForOracleLinkedService"/>, <see cref="AmazonRdsForSqlServerLinkedService"/>, <see cref="AmazonRedshiftLinkedService"/>, <see cref="AmazonS3LinkedService"/>, <see cref="AppFiguresLinkedService"/>, <see cref="AsanaLinkedService"/>, <see cref="AzureBatchLinkedService"/>, <see cref="AzureBlobFSLinkedService"/>, <see cref="AzureBlobStorageLinkedService"/>, <see cref="AzureDataExplorerLinkedService"/>, <see cref="AzureDataLakeAnalyticsLinkedService"/>, <see cref="AzureDataLakeStoreLinkedService"/>, <see cref="AzureDatabricksLinkedService"/>, <see cref="AzureDatabricksDeltaLakeLinkedService"/>, <see cref="AzureFileStorageLinkedService"/>, <see cref="AzureFunctionLinkedService"/>, <see cref="AzureKeyVaultLinkedService"/>, <see cref="AzureMLLinkedService"/>, <see cref="AzureMLServiceLinkedService"/>, <see cref="AzureMariaDBLinkedService"/>, <see cref="AzureMySqlLinkedService"/>, <see cref="AzurePostgreSqlLinkedService"/>, <see cref="AzureSearchLinkedService"/>, <see cref="AzureSqlDWLinkedService"/>, <see cref="AzureSqlDatabaseLinkedService"/>, <see cref="AzureSqlMILinkedService"/>, <see cref="AzureStorageLinkedService"/>, <see cref="AzureSynapseArtifactsLinkedService"/>, <see cref="AzureTableStorageLinkedService"/>, <see cref="CassandraLinkedService"/>, <see cref="CommonDataServiceForAppsLinkedService"/>, <see cref="ConcurLinkedService"/>, <see cref="CosmosDbLinkedService"/>, <see cref="CosmosDbMongoDbApiLinkedService"/>, <see cref="CouchbaseLinkedService"/>, <see cref="CustomDataSourceLinkedService"/>, <see cref="DataworldLinkedService"/>, <see cref="Db2LinkedService"/>, <see cref="DrillLinkedService"/>, <see cref="DynamicsLinkedService"/>, <see cref="DynamicsAXLinkedService"/>, <see cref="DynamicsCrmLinkedService"/>, <see cref="EloquaLinkedService"/>, <see cref="FileServerLinkedService"/>, <see cref="FtpServerLinkedService"/>, <see cref="GoogleAdWordsLinkedService"/>, <see cref="GoogleBigQueryLinkedService"/>, <see cref="GoogleCloudStorageLinkedService"/>, <see cref="GoogleSheetsLinkedService"/>, <see cref="GreenplumLinkedService"/>, <see cref="HBaseLinkedService"/>, <see cref="HDInsightLinkedService"/>, <see cref="HDInsightOnDemandLinkedService"/>, <see cref="HdfsLinkedService"/>, <see cref="HiveLinkedService"/>, <see cref="HttpLinkedService"/>, <see cref="HubspotLinkedService"/>, <see cref="ImpalaLinkedService"/>, <see cref="InformixLinkedService"/>, <see cref="JiraLinkedService"/>, <see cref="MagentoLinkedService"/>, <see cref="MariaDBLinkedService"/>, <see cref="MarketoLinkedService"/>, <see cref="MicrosoftAccessLinkedService"/>, <see cref="MongoDbLinkedService"/>, <see cref="MongoDbAtlasLinkedService"/>, <see cref="MongoDbV2LinkedService"/>, <see cref="MySqlLinkedService"/>, <see cref="NetezzaLinkedService"/>, <see cref="ODataLinkedService"/>, <see cref="OdbcLinkedService"/>, <see cref="Office365LinkedService"/>, <see cref="OracleLinkedService"/>, <see cref="OracleServiceCloudLinkedService"/>, <see cref="PaypalLinkedService"/>, <see cref="PhoenixLinkedService"/>, <see cref="PostgreSqlLinkedService"/>, <see cref="PrestoLinkedService"/>, <see cref="QuickBooksLinkedService"/>, <see cref="QuickbaseLinkedService"/>, <see cref="ResponsysLinkedService"/>, <see cref="RestServiceLinkedService"/>, <see cref="SalesforceLinkedService"/>, <see cref="SalesforceMarketingCloudLinkedService"/>, <see cref="SalesforceServiceCloudLinkedService"/>, <see cref="SapBWLinkedService"/>, <see cref="SapCloudForCustomerLinkedService"/>, <see cref="SapEccLinkedService"/>, <see cref="SapHanaLinkedService"/>, <see cref="SapOdpLinkedService"/>, <see cref="SapOpenHubLinkedService"/>, <see cref="SapTableLinkedService"/>, <see cref="ServiceNowLinkedService"/>, <see cref="SftpServerLinkedService"/>, <see cref="SharePointOnlineListLinkedService"/>, <see cref="ShopifyLinkedService"/>, <see cref="SmartsheetLinkedService"/>, <see cref="SnowflakeLinkedService"/>, <see cref="SparkLinkedService"/>, <see cref="SqlServerLinkedService"/>, <see cref="SquareLinkedService"/>, <see cref="SybaseLinkedService"/>, <see cref="TeamDeskLinkedService"/>, <see cref="TeradataLinkedService"/>, <see cref="TwilioLinkedService"/>, <see cref="VerticaLinkedService"/>, <see cref="WebLinkedService"/>, <see cref="XeroLinkedService"/>, <see cref="ZendeskLinkedService"/> and <see cref="ZohoLinkedService"/>.
        /// </param>
        /// <returns> A new <see cref="Models.LinkedServiceDebugResource"/> instance for mocking. </returns>
        public static LinkedServiceDebugResource LinkedServiceDebugResource(string name = null, LinkedService properties = null)
        {
            return new LinkedServiceDebugResource(name, properties);
        }

        /// <summary> Initializes a new instance of LinkedService. </summary>
        /// <param name="type"> Type of linked service. </param>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.LinkedService"/> instance for mocking. </returns>
        public static LinkedService LinkedService(string type = null, IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new LinkedService(type, connectVia, description, parameters, annotations?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeReference. </summary>
        /// <param name="type"> Type of integration runtime. </param>
        /// <param name="referenceName"> Reference integration runtime name. </param>
        /// <param name="parameters"> Arguments for integration runtime. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeReference"/> instance for mocking. </returns>
        public static IntegrationRuntimeReference IntegrationRuntimeReference(IntegrationRuntimeReferenceType type = default, string referenceName = null, IDictionary<string, object> parameters = null)
        {
            parameters ??= new Dictionary<string, object>();

            return new IntegrationRuntimeReference(type, referenceName, parameters);
        }

        /// <summary> Initializes a new instance of DataFlowStagingInfo. </summary>
        /// <param name="linkedService"> Staging linked service reference. </param>
        /// <param name="folderPath"> Folder path for staging blob. </param>
        /// <returns> A new <see cref="Models.DataFlowStagingInfo"/> instance for mocking. </returns>
        public static DataFlowStagingInfo DataFlowStagingInfo(LinkedServiceReference linkedService = null, string folderPath = null)
        {
            return new DataFlowStagingInfo(linkedService, folderPath);
        }

        /// <summary> Initializes a new instance of DataFlowDebugPackageDebugSettings. </summary>
        /// <param name="sourceSettings"> Source setting for data flow debug. </param>
        /// <param name="parameters"> Data flow parameters. </param>
        /// <param name="datasetParameters"> Parameters for dataset. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugPackageDebugSettings"/> instance for mocking. </returns>
        public static DataFlowDebugPackageDebugSettings DataFlowDebugPackageDebugSettings(IEnumerable<DataFlowSourceSetting> sourceSettings = null, IDictionary<string, object> parameters = null, object datasetParameters = null)
        {
            sourceSettings ??= new List<DataFlowSourceSetting>();
            parameters ??= new Dictionary<string, object>();

            return new DataFlowDebugPackageDebugSettings(sourceSettings?.ToList(), parameters, datasetParameters);
        }

        /// <summary> Initializes a new instance of DataFlowSourceSetting. </summary>
        /// <param name="sourceName"> The data flow source name. </param>
        /// <param name="rowLimit"> Defines the row limit of data flow source in debug. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DataFlowSourceSetting"/> instance for mocking. </returns>
        public static DataFlowSourceSetting DataFlowSourceSetting(string sourceName = null, int? rowLimit = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DataFlowSourceSetting(sourceName, rowLimit, additionalProperties);
        }

        /// <summary> Initializes a new instance of AddDataFlowToDebugSessionResponse. </summary>
        /// <param name="jobVersion"> The ID of data flow debug job version. </param>
        /// <returns> A new <see cref="Models.AddDataFlowToDebugSessionResponse"/> instance for mocking. </returns>
        public static AddDataFlowToDebugSessionResponse AddDataFlowToDebugSessionResponse(string jobVersion = null)
        {
            return new AddDataFlowToDebugSessionResponse(jobVersion);
        }

        /// <summary> Initializes a new instance of DataFlowDebugCommandResponse. </summary>
        /// <param name="status"> The run status of data preview, statistics or expression preview. </param>
        /// <param name="data"> The result data of data preview, statistics or expression preview. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugCommandResponse"/> instance for mocking. </returns>
        public static DataFlowDebugCommandResponse DataFlowDebugCommandResponse(string status = null, string data = null)
        {
            return new DataFlowDebugCommandResponse(status, data);
        }

        /// <summary> Initializes a new instance of DatasetResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties">
        /// Dataset properties.
        /// Please note <see cref="Dataset"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMWSObjectDataset"/>, <see cref="AmazonRdsForOracleTableDataset"/>, <see cref="AmazonRdsForSqlServerTableDataset"/>, <see cref="AmazonRedshiftTableDataset"/>, <see cref="AmazonS3Dataset"/>, <see cref="AvroDataset"/>, <see cref="AzureBlobDataset"/>, <see cref="AzureBlobFSDataset"/>, <see cref="AzureDataExplorerTableDataset"/>, <see cref="AzureDataLakeStoreDataset"/>, <see cref="AzureDatabricksDeltaLakeDataset"/>, <see cref="AzureMariaDBTableDataset"/>, <see cref="AzureMySqlTableDataset"/>, <see cref="AzurePostgreSqlTableDataset"/>, <see cref="AzureSearchIndexDataset"/>, <see cref="AzureSqlDWTableDataset"/>, <see cref="AzureSqlMITableDataset"/>, <see cref="AzureSqlTableDataset"/>, <see cref="AzureTableDataset"/>, <see cref="BinaryDataset"/>, <see cref="CassandraTableDataset"/>, <see cref="CommonDataServiceForAppsEntityDataset"/>, <see cref="ConcurObjectDataset"/>, <see cref="CosmosDbMongoDbApiCollectionDataset"/>, <see cref="CosmosDbSqlApiCollectionDataset"/>, <see cref="CouchbaseTableDataset"/>, <see cref="CustomDataset"/>, <see cref="Db2TableDataset"/>, <see cref="DelimitedTextDataset"/>, <see cref="DocumentDbCollectionDataset"/>, <see cref="DrillTableDataset"/>, <see cref="DynamicsAXResourceDataset"/>, <see cref="DynamicsCrmEntityDataset"/>, <see cref="DynamicsEntityDataset"/>, <see cref="EloquaObjectDataset"/>, <see cref="ExcelDataset"/>, <see cref="FileShareDataset"/>, <see cref="GoogleAdWordsObjectDataset"/>, <see cref="GoogleBigQueryObjectDataset"/>, <see cref="GreenplumTableDataset"/>, <see cref="HBaseObjectDataset"/>, <see cref="HiveObjectDataset"/>, <see cref="HttpDataset"/>, <see cref="HubspotObjectDataset"/>, <see cref="ImpalaObjectDataset"/>, <see cref="InformixTableDataset"/>, <see cref="JiraObjectDataset"/>, <see cref="JsonDataset"/>, <see cref="MagentoObjectDataset"/>, <see cref="MariaDBTableDataset"/>, <see cref="MarketoObjectDataset"/>, <see cref="MicrosoftAccessTableDataset"/>, <see cref="MongoDbAtlasCollectionDataset"/>, <see cref="MongoDbCollectionDataset"/>, <see cref="MongoDbV2CollectionDataset"/>, <see cref="MySqlTableDataset"/>, <see cref="NetezzaTableDataset"/>, <see cref="ODataResourceDataset"/>, <see cref="OdbcTableDataset"/>, <see cref="Office365Dataset"/>, <see cref="OracleServiceCloudObjectDataset"/>, <see cref="OracleTableDataset"/>, <see cref="OrcDataset"/>, <see cref="ParquetDataset"/>, <see cref="PaypalObjectDataset"/>, <see cref="PhoenixObjectDataset"/>, <see cref="PostgreSqlTableDataset"/>, <see cref="PrestoObjectDataset"/>, <see cref="QuickBooksObjectDataset"/>, <see cref="RelationalTableDataset"/>, <see cref="ResponsysObjectDataset"/>, <see cref="RestResourceDataset"/>, <see cref="SalesforceMarketingCloudObjectDataset"/>, <see cref="SalesforceObjectDataset"/>, <see cref="SalesforceServiceCloudObjectDataset"/>, <see cref="SapBwCubeDataset"/>, <see cref="SapCloudForCustomerResourceDataset"/>, <see cref="SapEccResourceDataset"/>, <see cref="SapHanaTableDataset"/>, <see cref="SapOdpResourceDataset"/>, <see cref="SapOpenHubTableDataset"/>, <see cref="SapTableResourceDataset"/>, <see cref="ServiceNowObjectDataset"/>, <see cref="SharePointOnlineListResourceDataset"/>, <see cref="ShopifyObjectDataset"/>, <see cref="SnowflakeDataset"/>, <see cref="SparkObjectDataset"/>, <see cref="SqlServerTableDataset"/>, <see cref="SquareObjectDataset"/>, <see cref="SybaseTableDataset"/>, <see cref="TeradataTableDataset"/>, <see cref="VerticaTableDataset"/>, <see cref="WebTableDataset"/>, <see cref="XeroObjectDataset"/>, <see cref="XmlDataset"/> and <see cref="ZohoObjectDataset"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DatasetResource"/> instance for mocking. </returns>
        public static DatasetResource DatasetResource(string id = null, string name = null, string type = null, string etag = null, Dataset properties = null)
        {
            return new DatasetResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of GitHubAccessTokenResponse. </summary>
        /// <param name="gitHubAccessToken"></param>
        /// <returns> A new <see cref="Models.GitHubAccessTokenResponse"/> instance for mocking. </returns>
        public static GitHubAccessTokenResponse GitHubAccessTokenResponse(string gitHubAccessToken = null)
        {
            return new GitHubAccessTokenResponse(gitHubAccessToken);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeListResponse. </summary>
        /// <param name="value"> List of integration runtimes. </param>
        /// <param name="nextLink"> The link to the next page of results, if any remaining results exist. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeListResponse"/> instance for mocking. </returns>
        public static IntegrationRuntimeListResponse IntegrationRuntimeListResponse(IEnumerable<IntegrationRuntimeResource> value = null, string nextLink = null)
        {
            value ??= new List<IntegrationRuntimeResource>();

            return new IntegrationRuntimeListResponse(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties">
        /// Integration runtime properties.
        /// Please note <see cref="IntegrationRuntime"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ManagedIntegrationRuntime"/> and <see cref="SelfHostedIntegrationRuntime"/>.
        /// </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeResource"/> instance for mocking. </returns>
        public static IntegrationRuntimeResource IntegrationRuntimeResource(string id = null, string name = null, string type = null, string etag = null, IntegrationRuntime properties = null)
        {
            return new IntegrationRuntimeResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of LibraryResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Library/package properties. </param>
        /// <returns> A new <see cref="Models.LibraryResource"/> instance for mocking. </returns>
        public static LibraryResource LibraryResource(string id = null, string name = null, string type = null, string etag = null, LibraryResourceProperties properties = null)
        {
            return new LibraryResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of LibraryResourceProperties. </summary>
        /// <param name="name"> Name of the library/package. </param>
        /// <param name="path"> Location of library/package in storage account. </param>
        /// <param name="containerName"> Container name of the library/package. </param>
        /// <param name="uploadedTimestamp"> The last update time of the library/package. </param>
        /// <param name="type"> Type of the library/package. </param>
        /// <param name="provisioningStatus"> Provisioning status of the library/package. </param>
        /// <param name="creatorId"> Creator Id of the library/package. </param>
        /// <returns> A new <see cref="Models.LibraryResourceProperties"/> instance for mocking. </returns>
        public static LibraryResourceProperties LibraryResourceProperties(string name = null, string path = null, string containerName = null, string uploadedTimestamp = null, string type = null, string provisioningStatus = null, string creatorId = null)
        {
            return new LibraryResourceProperties(name, path, containerName, uploadedTimestamp, type, provisioningStatus, creatorId);
        }

        /// <summary> Initializes a new instance of LibraryResourceInfo. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="recordId"> record Id of the library/package. </param>
        /// <param name="state"> Provisioning status of the library/package. </param>
        /// <param name="created"> The creation time of the library/package. </param>
        /// <param name="changed"> The last updated time of the library/package. </param>
        /// <param name="type"> The type of the resource. E.g. LibraryArtifact. </param>
        /// <param name="name"> Name of the library/package. </param>
        /// <param name="operationId"> Operation Id of the operation performed on library/package. </param>
        /// <param name="artifactId"> artifact Id of the library/package. </param>
        /// <returns> A new <see cref="Models.LibraryResourceInfo"/> instance for mocking. </returns>
        public static LibraryResourceInfo LibraryResourceInfo(string id = null, int? recordId = null, string state = null, string created = null, string changed = null, string type = null, string name = null, string operationId = null, string artifactId = null)
        {
            return new LibraryResourceInfo(id, recordId, state, created, changed, type, name, operationId, artifactId);
        }

        /// <summary> Initializes a new instance of OperationResult. </summary>
        /// <param name="status"> Operation status. </param>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Property name/path in request associated with error. </param>
        /// <param name="details"> Array with additional error details. </param>
        /// <returns> A new <see cref="Models.OperationResult"/> instance for mocking. </returns>
        public static OperationResult OperationResult(string status = null, string code = null, string message = null, string target = null, IEnumerable<CloudError> details = null)
        {
            details ??= new List<CloudError>();

            return new OperationResult(status, code, message, target, details?.ToList());
        }

        /// <summary> Initializes a new instance of LinkedServiceResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties">
        /// Properties of linked service.
        /// Please note <see cref="LinkedService"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMWSLinkedService"/>, <see cref="AmazonRdsForOracleLinkedService"/>, <see cref="AmazonRdsForSqlServerLinkedService"/>, <see cref="AmazonRedshiftLinkedService"/>, <see cref="AmazonS3LinkedService"/>, <see cref="AppFiguresLinkedService"/>, <see cref="AsanaLinkedService"/>, <see cref="AzureBatchLinkedService"/>, <see cref="AzureBlobFSLinkedService"/>, <see cref="AzureBlobStorageLinkedService"/>, <see cref="AzureDataExplorerLinkedService"/>, <see cref="AzureDataLakeAnalyticsLinkedService"/>, <see cref="AzureDataLakeStoreLinkedService"/>, <see cref="AzureDatabricksLinkedService"/>, <see cref="AzureDatabricksDeltaLakeLinkedService"/>, <see cref="AzureFileStorageLinkedService"/>, <see cref="AzureFunctionLinkedService"/>, <see cref="AzureKeyVaultLinkedService"/>, <see cref="AzureMLLinkedService"/>, <see cref="AzureMLServiceLinkedService"/>, <see cref="AzureMariaDBLinkedService"/>, <see cref="AzureMySqlLinkedService"/>, <see cref="AzurePostgreSqlLinkedService"/>, <see cref="AzureSearchLinkedService"/>, <see cref="AzureSqlDWLinkedService"/>, <see cref="AzureSqlDatabaseLinkedService"/>, <see cref="AzureSqlMILinkedService"/>, <see cref="AzureStorageLinkedService"/>, <see cref="AzureSynapseArtifactsLinkedService"/>, <see cref="AzureTableStorageLinkedService"/>, <see cref="CassandraLinkedService"/>, <see cref="CommonDataServiceForAppsLinkedService"/>, <see cref="ConcurLinkedService"/>, <see cref="CosmosDbLinkedService"/>, <see cref="CosmosDbMongoDbApiLinkedService"/>, <see cref="CouchbaseLinkedService"/>, <see cref="CustomDataSourceLinkedService"/>, <see cref="DataworldLinkedService"/>, <see cref="Db2LinkedService"/>, <see cref="DrillLinkedService"/>, <see cref="DynamicsLinkedService"/>, <see cref="DynamicsAXLinkedService"/>, <see cref="DynamicsCrmLinkedService"/>, <see cref="EloquaLinkedService"/>, <see cref="FileServerLinkedService"/>, <see cref="FtpServerLinkedService"/>, <see cref="GoogleAdWordsLinkedService"/>, <see cref="GoogleBigQueryLinkedService"/>, <see cref="GoogleCloudStorageLinkedService"/>, <see cref="GoogleSheetsLinkedService"/>, <see cref="GreenplumLinkedService"/>, <see cref="HBaseLinkedService"/>, <see cref="HDInsightLinkedService"/>, <see cref="HDInsightOnDemandLinkedService"/>, <see cref="HdfsLinkedService"/>, <see cref="HiveLinkedService"/>, <see cref="HttpLinkedService"/>, <see cref="HubspotLinkedService"/>, <see cref="ImpalaLinkedService"/>, <see cref="InformixLinkedService"/>, <see cref="JiraLinkedService"/>, <see cref="MagentoLinkedService"/>, <see cref="MariaDBLinkedService"/>, <see cref="MarketoLinkedService"/>, <see cref="MicrosoftAccessLinkedService"/>, <see cref="MongoDbLinkedService"/>, <see cref="MongoDbAtlasLinkedService"/>, <see cref="MongoDbV2LinkedService"/>, <see cref="MySqlLinkedService"/>, <see cref="NetezzaLinkedService"/>, <see cref="ODataLinkedService"/>, <see cref="OdbcLinkedService"/>, <see cref="Office365LinkedService"/>, <see cref="OracleLinkedService"/>, <see cref="OracleServiceCloudLinkedService"/>, <see cref="PaypalLinkedService"/>, <see cref="PhoenixLinkedService"/>, <see cref="PostgreSqlLinkedService"/>, <see cref="PrestoLinkedService"/>, <see cref="QuickBooksLinkedService"/>, <see cref="QuickbaseLinkedService"/>, <see cref="ResponsysLinkedService"/>, <see cref="RestServiceLinkedService"/>, <see cref="SalesforceLinkedService"/>, <see cref="SalesforceMarketingCloudLinkedService"/>, <see cref="SalesforceServiceCloudLinkedService"/>, <see cref="SapBWLinkedService"/>, <see cref="SapCloudForCustomerLinkedService"/>, <see cref="SapEccLinkedService"/>, <see cref="SapHanaLinkedService"/>, <see cref="SapOdpLinkedService"/>, <see cref="SapOpenHubLinkedService"/>, <see cref="SapTableLinkedService"/>, <see cref="ServiceNowLinkedService"/>, <see cref="SftpServerLinkedService"/>, <see cref="SharePointOnlineListLinkedService"/>, <see cref="ShopifyLinkedService"/>, <see cref="SmartsheetLinkedService"/>, <see cref="SnowflakeLinkedService"/>, <see cref="SparkLinkedService"/>, <see cref="SqlServerLinkedService"/>, <see cref="SquareLinkedService"/>, <see cref="SybaseLinkedService"/>, <see cref="TeamDeskLinkedService"/>, <see cref="TeradataLinkedService"/>, <see cref="TwilioLinkedService"/>, <see cref="VerticaLinkedService"/>, <see cref="WebLinkedService"/>, <see cref="XeroLinkedService"/>, <see cref="ZendeskLinkedService"/> and <see cref="ZohoLinkedService"/>.
        /// </param>
        /// <returns> A new <see cref="Models.LinkedServiceResource"/> instance for mocking. </returns>
        public static LinkedServiceResource LinkedServiceResource(string id = null, string name = null, string type = null, string etag = null, LinkedService properties = null)
        {
            return new LinkedServiceResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of NotebookResource. </summary>
        /// <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of Notebook. </param>
        /// <returns> A new <see cref="Models.NotebookResource"/> instance for mocking. </returns>
        public static NotebookResource NotebookResource(string id = null, string name = null, string type = null, string etag = null, Notebook properties = null)
        {
            return new NotebookResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of Notebook. </summary>
        /// <param name="description"> The description of the notebook. </param>
        /// <param name="bigDataPool"> Big data pool reference. </param>
        /// <param name="sessionProperties"> Session properties. </param>
        /// <param name="metadata"> Notebook root-level metadata. </param>
        /// <param name="notebookFormat"> Notebook format (major number). Incremented between backwards incompatible changes to the notebook format. </param>
        /// <param name="notebookFormatMinor"> Notebook format (minor number). Incremented for backward compatible changes to the notebook format. </param>
        /// <param name="cells"> Array of cells of the current notebook. </param>
        /// <param name="folder"> The folder that this notebook is in. If not specified, this notebook will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.Notebook"/> instance for mocking. </returns>
        public static Notebook Notebook(string description = null, BigDataPoolReference bigDataPool = null, NotebookSessionProperties sessionProperties = null, NotebookMetadata metadata = null, int notebookFormat = default, int notebookFormatMinor = default, IEnumerable<NotebookCell> cells = null, NotebookFolder folder = null, IDictionary<string, object> additionalProperties = null)
        {
            cells ??= new List<NotebookCell>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Notebook(description, bigDataPool, sessionProperties, metadata, notebookFormat, notebookFormatMinor, cells?.ToList(), folder, additionalProperties);
        }

        /// <summary> Initializes a new instance of NotebookMetadata. </summary>
        /// <param name="kernelspec"> Kernel information. </param>
        /// <param name="languageInfo"> Language info. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.NotebookMetadata"/> instance for mocking. </returns>
        public static NotebookMetadata NotebookMetadata(NotebookKernelSpec kernelspec = null, NotebookLanguageInfo languageInfo = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new NotebookMetadata(kernelspec, languageInfo, additionalProperties);
        }

        /// <summary> Initializes a new instance of NotebookKernelSpec. </summary>
        /// <param name="name"> Name of the kernel specification. </param>
        /// <param name="displayName"> Name to display in UI. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.NotebookKernelSpec"/> instance for mocking. </returns>
        public static NotebookKernelSpec NotebookKernelSpec(string name = null, string displayName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new NotebookKernelSpec(name, displayName, additionalProperties);
        }

        /// <summary> Initializes a new instance of NotebookLanguageInfo. </summary>
        /// <param name="name"> The programming language which this kernel runs. </param>
        /// <param name="codemirrorMode"> The codemirror mode to use for code in this language. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.NotebookLanguageInfo"/> instance for mocking. </returns>
        public static NotebookLanguageInfo NotebookLanguageInfo(string name = null, string codemirrorMode = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new NotebookLanguageInfo(name, codemirrorMode, additionalProperties);
        }

        /// <summary> Initializes a new instance of NotebookCell. </summary>
        /// <param name="cellType"> String identifying the type of cell. </param>
        /// <param name="metadata"> Cell-level metadata. </param>
        /// <param name="source"> Contents of the cell, represented as an array of lines. </param>
        /// <param name="attachments"> Attachments associated with the cell. </param>
        /// <param name="outputs"> Cell-level output items. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.NotebookCell"/> instance for mocking. </returns>
        public static NotebookCell NotebookCell(string cellType = null, object metadata = null, IEnumerable<string> source = null, object attachments = null, IEnumerable<NotebookCellOutputItem> outputs = null, IDictionary<string, object> additionalProperties = null)
        {
            source ??= new List<string>();
            outputs ??= new List<NotebookCellOutputItem>();
            additionalProperties ??= new Dictionary<string, object>();

            return new NotebookCell(cellType, metadata, source?.ToList(), attachments, outputs?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of NotebookCellOutputItem. </summary>
        /// <param name="name"> For output_type=stream, determines the name of stream (stdout / stderr). </param>
        /// <param name="executionCount"> Execution sequence number. </param>
        /// <param name="outputType"> Execution, display, or stream outputs. </param>
        /// <param name="text"> For output_type=stream, the stream&apos;s text output, represented as a string or an array of strings. </param>
        /// <param name="data"> Output data. Use MIME type as key, and content as value. </param>
        /// <param name="metadata"> Metadata for the output item. </param>
        /// <returns> A new <see cref="Models.NotebookCellOutputItem"/> instance for mocking. </returns>
        public static NotebookCellOutputItem NotebookCellOutputItem(string name = null, int? executionCount = null, CellOutputType outputType = default, object text = null, object data = null, object metadata = null)
        {
            return new NotebookCellOutputItem(name, executionCount, outputType, text, data, metadata);
        }

        /// <summary> Initializes a new instance of NotebookFolder. </summary>
        /// <param name="name"> The name of the folder that this notebook is in. </param>
        /// <returns> A new <see cref="Models.NotebookFolder"/> instance for mocking. </returns>
        public static NotebookFolder NotebookFolder(string name = null)
        {
            return new NotebookFolder(name);
        }

        /// <summary> Initializes a new instance of PipelineResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="description"> The description of the pipeline. </param>
        /// <param name="activities">
        /// List of activities in pipeline.
        /// Please note <see cref="Activity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SynapseSparkJobDefinitionActivity"/>, <see cref="SqlPoolStoredProcedureActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="SynapseNotebookActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <param name="parameters"> List of parameters for pipeline. </param>
        /// <param name="variables"> List of variables for pipeline. </param>
        /// <param name="concurrency"> The max number of concurrent runs for the pipeline. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Pipeline. </param>
        /// <param name="runDimensions"> Dimensions emitted by Pipeline. </param>
        /// <param name="folder"> The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.PipelineResource"/> instance for mocking. </returns>
        public static PipelineResource PipelineResource(string id = null, string name = null, string type = null, string etag = null, string description = null, IEnumerable<Activity> activities = null, IDictionary<string, ParameterSpecification> parameters = null, IDictionary<string, VariableSpecification> variables = null, int? concurrency = null, IEnumerable<object> annotations = null, IDictionary<string, object> runDimensions = null, PipelineFolder folder = null, IDictionary<string, object> additionalProperties = null)
        {
            activities ??= new List<Activity>();
            parameters ??= new Dictionary<string, ParameterSpecification>();
            variables ??= new Dictionary<string, VariableSpecification>();
            annotations ??= new List<object>();
            runDimensions ??= new Dictionary<string, object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PipelineResource(id, name, type, etag, description, activities?.ToList(), parameters, variables, concurrency, annotations?.ToList(), runDimensions, folder, additionalProperties);
        }

        /// <summary> Initializes a new instance of Activity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="type"> Type of activity. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.Activity"/> instance for mocking. </returns>
        public static Activity Activity(string name = null, string type = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Activity(name, type, description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of ActivityDependency. </summary>
        /// <param name="activity"> Activity name. </param>
        /// <param name="dependencyConditions"> Match-Condition for the dependency. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ActivityDependency"/> instance for mocking. </returns>
        public static ActivityDependency ActivityDependency(string activity = null, IEnumerable<DependencyCondition> dependencyConditions = null, IDictionary<string, object> additionalProperties = null)
        {
            dependencyConditions ??= new List<DependencyCondition>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ActivityDependency(activity, dependencyConditions?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of VariableSpecification. </summary>
        /// <param name="type"> Variable type. </param>
        /// <param name="defaultValue"> Default value of variable. </param>
        /// <returns> A new <see cref="Models.VariableSpecification"/> instance for mocking. </returns>
        public static VariableSpecification VariableSpecification(VariableType type = default, object defaultValue = null)
        {
            return new VariableSpecification(type, defaultValue);
        }

        /// <summary> Initializes a new instance of PipelineFolder. </summary>
        /// <param name="name"> The name of the folder that this Pipeline is in. </param>
        /// <returns> A new <see cref="Models.PipelineFolder"/> instance for mocking. </returns>
        public static PipelineFolder PipelineFolder(string name = null)
        {
            return new PipelineFolder(name);
        }

        /// <summary> Initializes a new instance of CreateRunResponse. </summary>
        /// <param name="runId"> Identifier of a run. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="runId"/> is null. </exception>
        /// <returns> A new <see cref="Models.CreateRunResponse"/> instance for mocking. </returns>
        public static CreateRunResponse CreateRunResponse(string runId = null)
        {
            if (runId == null)
            {
                throw new ArgumentNullException(nameof(runId));
            }

            return new CreateRunResponse(runId);
        }

        /// <summary> Initializes a new instance of PipelineRunsQueryResponse. </summary>
        /// <param name="value"> List of pipeline runs. </param>
        /// <param name="continuationToken"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <returns> A new <see cref="Models.PipelineRunsQueryResponse"/> instance for mocking. </returns>
        public static PipelineRunsQueryResponse PipelineRunsQueryResponse(IEnumerable<PipelineRun> value = null, string continuationToken = null)
        {
            value ??= new List<PipelineRun>();

            return new PipelineRunsQueryResponse(value?.ToList(), continuationToken);
        }

        /// <summary> Initializes a new instance of PipelineRun. </summary>
        /// <param name="runId"> Identifier of a run. </param>
        /// <param name="runGroupId"> Identifier that correlates all the recovery runs of a pipeline run. </param>
        /// <param name="isLatest"> Indicates if the recovered pipeline run is the latest in its group. </param>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="parameters"> The full or partial list of parameter name, value pair used in the pipeline run. </param>
        /// <param name="invokedBy"> Entity that started the pipeline run. </param>
        /// <param name="lastUpdated"> The last updated timestamp for the pipeline run event in ISO8601 format. </param>
        /// <param name="runStart"> The start time of a pipeline run in ISO8601 format. </param>
        /// <param name="runEnd"> The end time of a pipeline run in ISO8601 format. </param>
        /// <param name="durationInMs"> The duration of a pipeline run. </param>
        /// <param name="status"> The status of a pipeline run. </param>
        /// <param name="message"> The message from a pipeline run. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.PipelineRun"/> instance for mocking. </returns>
        public static PipelineRun PipelineRun(string runId = null, string runGroupId = null, bool? isLatest = null, string pipelineName = null, IReadOnlyDictionary<string, string> parameters = null, PipelineRunInvokedBy invokedBy = null, DateTimeOffset? lastUpdated = null, DateTimeOffset? runStart = null, DateTimeOffset? runEnd = null, int? durationInMs = null, string status = null, string message = null, IReadOnlyDictionary<string, object> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PipelineRun(runId, runGroupId, isLatest, pipelineName, parameters, invokedBy, lastUpdated, runStart, runEnd, durationInMs, status, message, additionalProperties);
        }

        /// <summary> Initializes a new instance of PipelineRunInvokedBy. </summary>
        /// <param name="name"> Name of the entity that started the pipeline run. </param>
        /// <param name="id"> The ID of the entity that started the run. </param>
        /// <param name="invokedByType"> The type of the entity that started the run. </param>
        /// <returns> A new <see cref="Models.PipelineRunInvokedBy"/> instance for mocking. </returns>
        public static PipelineRunInvokedBy PipelineRunInvokedBy(string name = null, string id = null, string invokedByType = null)
        {
            return new PipelineRunInvokedBy(name, id, invokedByType);
        }

        /// <summary> Initializes a new instance of ActivityRunsQueryResponse. </summary>
        /// <param name="value"> List of activity runs. </param>
        /// <param name="continuationToken"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <returns> A new <see cref="Models.ActivityRunsQueryResponse"/> instance for mocking. </returns>
        public static ActivityRunsQueryResponse ActivityRunsQueryResponse(IEnumerable<ActivityRun> value = null, string continuationToken = null)
        {
            value ??= new List<ActivityRun>();

            return new ActivityRunsQueryResponse(value?.ToList(), continuationToken);
        }

        /// <summary> Initializes a new instance of ActivityRun. </summary>
        /// <param name="pipelineName"> The name of the pipeline. </param>
        /// <param name="pipelineRunId"> The id of the pipeline run. </param>
        /// <param name="activityName"> The name of the activity. </param>
        /// <param name="activityType"> The type of the activity. </param>
        /// <param name="activityRunId"> The id of the activity run. </param>
        /// <param name="linkedServiceName"> The name of the compute linked service. </param>
        /// <param name="status"> The status of the activity run. </param>
        /// <param name="activityRunStart"> The start time of the activity run in &apos;ISO 8601&apos; format. </param>
        /// <param name="activityRunEnd"> The end time of the activity run in &apos;ISO 8601&apos; format. </param>
        /// <param name="durationInMs"> The duration of the activity run. </param>
        /// <param name="input"> The input for the activity. </param>
        /// <param name="output"> The output for the activity. </param>
        /// <param name="error"> The error if any from the activity run. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ActivityRun"/> instance for mocking. </returns>
        public static ActivityRun ActivityRun(string pipelineName = null, string pipelineRunId = null, string activityName = null, string activityType = null, string activityRunId = null, string linkedServiceName = null, string status = null, DateTimeOffset? activityRunStart = null, DateTimeOffset? activityRunEnd = null, int? durationInMs = null, object input = null, object output = null, object error = null, IReadOnlyDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ActivityRun(pipelineName, pipelineRunId, activityName, activityType, activityRunId, linkedServiceName, status, activityRunStart, activityRunEnd, durationInMs, input, output, error, additionalProperties);
        }

        /// <summary> Initializes a new instance of SparkJobDefinitionResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of spark job definition. </param>
        /// <returns> A new <see cref="Models.SparkJobDefinitionResource"/> instance for mocking. </returns>
        public static SparkJobDefinitionResource SparkJobDefinitionResource(string id = null, string name = null, string type = null, string etag = null, SparkJobDefinition properties = null)
        {
            return new SparkJobDefinitionResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of SparkJobDefinition. </summary>
        /// <param name="description"> The description of the Spark job definition. </param>
        /// <param name="targetBigDataPool"> Big data pool reference. </param>
        /// <param name="requiredSparkVersion"> The required Spark version of the application. </param>
        /// <param name="language"> The language of the Spark application. </param>
        /// <param name="jobProperties"> The properties of the Spark job. </param>
        /// <param name="folder"> The folder that this Spark job definition is in. If not specified, this Spark job definition will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SparkJobDefinition"/> instance for mocking. </returns>
        public static SparkJobDefinition SparkJobDefinition(string description = null, BigDataPoolReference targetBigDataPool = null, string requiredSparkVersion = null, string language = null, SparkJobProperties jobProperties = null, SparkJobDefinitionFolder folder = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SparkJobDefinition(description, targetBigDataPool, requiredSparkVersion, language, jobProperties, folder, additionalProperties);
        }

        /// <summary> Initializes a new instance of SparkJobProperties. </summary>
        /// <param name="name"> The name of the job. </param>
        /// <param name="file"> File containing the application to execute. </param>
        /// <param name="className"> Main class for Java/Scala application. </param>
        /// <param name="conf"> Spark configuration properties. </param>
        /// <param name="args"> Command line arguments for the application. </param>
        /// <param name="jars"> Jars to be used in this job. </param>
        /// <param name="files"> files to be used in this job. </param>
        /// <param name="archives"> Archives to be used in this job. </param>
        /// <param name="driverMemory"> Amount of memory to use for the driver process. </param>
        /// <param name="driverCores"> Number of cores to use for the driver. </param>
        /// <param name="executorMemory"> Amount of memory to use per executor process. </param>
        /// <param name="executorCores"> Number of cores to use for each executor. </param>
        /// <param name="numExecutors"> Number of executors to launch for this job. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SparkJobProperties"/> instance for mocking. </returns>
        public static SparkJobProperties SparkJobProperties(string name = null, string file = null, string className = null, object conf = null, IEnumerable<string> args = null, IEnumerable<string> jars = null, IEnumerable<string> files = null, IEnumerable<string> archives = null, string driverMemory = null, int driverCores = default, string executorMemory = null, int executorCores = default, int numExecutors = default, IDictionary<string, object> additionalProperties = null)
        {
            args ??= new List<string>();
            jars ??= new List<string>();
            files ??= new List<string>();
            archives ??= new List<string>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SparkJobProperties(name, file, className, conf, args?.ToList(), jars?.ToList(), files?.ToList(), archives?.ToList(), driverMemory, driverCores, executorMemory, executorCores, numExecutors, additionalProperties);
        }

        /// <summary> Initializes a new instance of SparkJobDefinitionFolder. </summary>
        /// <param name="name"> The name of the folder that this Spark job definition is in. </param>
        /// <returns> A new <see cref="Models.SparkJobDefinitionFolder"/> instance for mocking. </returns>
        public static SparkJobDefinitionFolder SparkJobDefinitionFolder(string name = null)
        {
            return new SparkJobDefinitionFolder(name);
        }

        /// <summary> Initializes a new instance of SparkBatchJob. </summary>
        /// <param name="livyInfo"></param>
        /// <param name="name"> The batch name. </param>
        /// <param name="workspaceName"> The workspace name. </param>
        /// <param name="sparkPoolName"> The Spark pool name. </param>
        /// <param name="submitterName"> The submitter name. </param>
        /// <param name="submitterId"> The submitter identifier. </param>
        /// <param name="artifactId"> The artifact identifier. </param>
        /// <param name="jobType"> The job type. </param>
        /// <param name="result"> The Spark batch job result. </param>
        /// <param name="scheduler"> The scheduler information. </param>
        /// <param name="plugin"> The plugin information. </param>
        /// <param name="errors"> The error information. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="id"> The session Id. </param>
        /// <param name="appId"> The application id of this session. </param>
        /// <param name="appInfo"> The detailed application info. </param>
        /// <param name="state"> The batch state. </param>
        /// <param name="logLines"> The log lines. </param>
        /// <returns> A new <see cref="Models.SparkBatchJob"/> instance for mocking. </returns>
        public static SparkBatchJob SparkBatchJob(SparkBatchJobState livyInfo = null, string name = null, string workspaceName = null, string sparkPoolName = null, string submitterName = null, string submitterId = null, string artifactId = null, SparkJobType? jobType = null, SparkBatchJobResultType? result = null, SparkScheduler scheduler = null, SparkServicePlugin plugin = null, IEnumerable<SparkServiceError> errors = null, IReadOnlyDictionary<string, string> tags = null, int id = default, string appId = null, IReadOnlyDictionary<string, string> appInfo = null, LivyStates? state = null, IEnumerable<string> logLines = null)
        {
            errors ??= new List<SparkServiceError>();
            tags ??= new Dictionary<string, string>();
            appInfo ??= new Dictionary<string, string>();
            logLines ??= new List<string>();

            return new SparkBatchJob(livyInfo, name, workspaceName, sparkPoolName, submitterName, submitterId, artifactId, jobType, result, scheduler, plugin, errors?.ToList(), tags, id, appId, appInfo, state, logLines?.ToList());
        }

        /// <summary> Initializes a new instance of SparkBatchJobState. </summary>
        /// <param name="notStartedAt"> the time that at which &quot;not_started&quot; livy state was first seen. </param>
        /// <param name="startingAt"> the time that at which &quot;starting&quot; livy state was first seen. </param>
        /// <param name="runningAt"> the time that at which &quot;running&quot; livy state was first seen. </param>
        /// <param name="deadAt"> time that at which &quot;dead&quot; livy state was first seen. </param>
        /// <param name="successAt"> the time that at which &quot;success&quot; livy state was first seen. </param>
        /// <param name="terminatedAt"> the time that at which &quot;killed&quot; livy state was first seen. </param>
        /// <param name="recoveringAt"> the time that at which &quot;recovering&quot; livy state was first seen. </param>
        /// <param name="currentState"> the Spark job state. </param>
        /// <param name="jobCreationRequest"></param>
        /// <returns> A new <see cref="Models.SparkBatchJobState"/> instance for mocking. </returns>
        public static SparkBatchJobState SparkBatchJobState(DateTimeOffset? notStartedAt = null, DateTimeOffset? startingAt = null, DateTimeOffset? runningAt = null, DateTimeOffset? deadAt = null, DateTimeOffset? successAt = null, DateTimeOffset? terminatedAt = null, DateTimeOffset? recoveringAt = null, string currentState = null, SparkRequest jobCreationRequest = null)
        {
            return new SparkBatchJobState(notStartedAt, startingAt, runningAt, deadAt, successAt, terminatedAt, recoveringAt, currentState, jobCreationRequest);
        }

        /// <summary> Initializes a new instance of SparkRequest. </summary>
        /// <param name="name"></param>
        /// <param name="file"></param>
        /// <param name="className"></param>
        /// <param name="arguments"></param>
        /// <param name="jars"></param>
        /// <param name="pythonFiles"></param>
        /// <param name="files"></param>
        /// <param name="archives"></param>
        /// <param name="configuration"> Dictionary of &lt;string&gt;. </param>
        /// <param name="driverMemory"></param>
        /// <param name="driverCores"></param>
        /// <param name="executorMemory"></param>
        /// <param name="executorCores"></param>
        /// <param name="executorCount"></param>
        /// <returns> A new <see cref="Models.SparkRequest"/> instance for mocking. </returns>
        public static SparkRequest SparkRequest(string name = null, string file = null, string className = null, IEnumerable<string> arguments = null, IEnumerable<string> jars = null, IEnumerable<string> pythonFiles = null, IEnumerable<string> files = null, IEnumerable<string> archives = null, IReadOnlyDictionary<string, string> configuration = null, string driverMemory = null, int? driverCores = null, string executorMemory = null, int? executorCores = null, int? executorCount = null)
        {
            arguments ??= new List<string>();
            jars ??= new List<string>();
            pythonFiles ??= new List<string>();
            files ??= new List<string>();
            archives ??= new List<string>();
            configuration ??= new Dictionary<string, string>();

            return new SparkRequest(name, file, className, arguments?.ToList(), jars?.ToList(), pythonFiles?.ToList(), files?.ToList(), archives?.ToList(), configuration, driverMemory, driverCores, executorMemory, executorCores, executorCount);
        }

        /// <summary> Initializes a new instance of SparkScheduler. </summary>
        /// <param name="submittedAt"></param>
        /// <param name="scheduledAt"></param>
        /// <param name="endedAt"></param>
        /// <param name="cancellationRequestedAt"></param>
        /// <param name="currentState"></param>
        /// <returns> A new <see cref="Models.SparkScheduler"/> instance for mocking. </returns>
        public static SparkScheduler SparkScheduler(DateTimeOffset? submittedAt = null, DateTimeOffset? scheduledAt = null, DateTimeOffset? endedAt = null, DateTimeOffset? cancellationRequestedAt = null, SchedulerCurrentState? currentState = null)
        {
            return new SparkScheduler(submittedAt, scheduledAt, endedAt, cancellationRequestedAt, currentState);
        }

        /// <summary> Initializes a new instance of SparkServicePlugin. </summary>
        /// <param name="preparationStartedAt"></param>
        /// <param name="resourceAcquisitionStartedAt"></param>
        /// <param name="submissionStartedAt"></param>
        /// <param name="monitoringStartedAt"></param>
        /// <param name="cleanupStartedAt"></param>
        /// <param name="currentState"></param>
        /// <returns> A new <see cref="Models.SparkServicePlugin"/> instance for mocking. </returns>
        public static SparkServicePlugin SparkServicePlugin(DateTimeOffset? preparationStartedAt = null, DateTimeOffset? resourceAcquisitionStartedAt = null, DateTimeOffset? submissionStartedAt = null, DateTimeOffset? monitoringStartedAt = null, DateTimeOffset? cleanupStartedAt = null, PluginCurrentState? currentState = null)
        {
            return new SparkServicePlugin(preparationStartedAt, resourceAcquisitionStartedAt, submissionStartedAt, monitoringStartedAt, cleanupStartedAt, currentState);
        }

        /// <summary> Initializes a new instance of SparkServiceError. </summary>
        /// <param name="message"></param>
        /// <param name="errorCode"></param>
        /// <param name="source"></param>
        /// <returns> A new <see cref="Models.SparkServiceError"/> instance for mocking. </returns>
        public static SparkServiceError SparkServiceError(string message = null, string errorCode = null, SparkErrorSource? source = null)
        {
            return new SparkServiceError(message, errorCode, source);
        }

        /// <summary> Initializes a new instance of SqlPoolInfoListResult. </summary>
        /// <param name="nextLink"> Link to the next page of results. </param>
        /// <param name="value"> List of SQL pools. </param>
        /// <returns> A new <see cref="Models.SqlPoolInfoListResult"/> instance for mocking. </returns>
        public static SqlPoolInfoListResult SqlPoolInfoListResult(string nextLink = null, IEnumerable<SqlPool> value = null)
        {
            value ??= new List<SqlPool>();

            return new SqlPoolInfoListResult(nextLink, value?.ToList());
        }

        /// <summary> Initializes a new instance of SqlPool. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="sku"> SQL pool SKU. </param>
        /// <param name="maxSizeBytes"> Maximum size in bytes. </param>
        /// <param name="collation"> Collation mode. </param>
        /// <param name="sourceDatabaseId"> Source database to create from. </param>
        /// <param name="recoverableDatabaseId"> Backup database to restore from. </param>
        /// <param name="provisioningState"> Resource state. </param>
        /// <param name="status"> Resource status. </param>
        /// <param name="restorePointInTime"> Snapshot time to restore. </param>
        /// <param name="createMode">
        /// Specifies the mode of sql pool creation.
        /// 
        /// Default: regular sql pool creation.
        /// 
        /// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
        /// 
        /// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
        /// 
        /// Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool&apos;s original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
        /// </param>
        /// <param name="creationDate"> Date the SQL pool was created. </param>
        /// <returns> A new <see cref="Models.SqlPool"/> instance for mocking. </returns>
        public static SqlPool SqlPool(string id = null, string name = null, string type = null, IDictionary<string, string> tags = null, string location = null, Sku sku = null, long? maxSizeBytes = null, string collation = null, string sourceDatabaseId = null, string recoverableDatabaseId = null, string provisioningState = null, string status = null, string restorePointInTime = null, CreateMode? createMode = null, DateTimeOffset? creationDate = null)
        {
            tags ??= new Dictionary<string, string>();

            return new SqlPool(id, name, type, tags, location, sku, maxSizeBytes, collation, sourceDatabaseId, recoverableDatabaseId, provisioningState, status, restorePointInTime, createMode, creationDate);
        }

        /// <summary> Initializes a new instance of Sku. </summary>
        /// <param name="tier"> The service tier. </param>
        /// <param name="name"> The SKU name. </param>
        /// <param name="capacity"> If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. </param>
        /// <returns> A new <see cref="Models.Sku"/> instance for mocking. </returns>
        public static Sku Sku(string tier = null, string name = null, int? capacity = null)
        {
            return new Sku(tier, name, capacity);
        }

        /// <summary> Initializes a new instance of SqlScriptResource. </summary>
        /// <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of sql script. </param>
        /// <returns> A new <see cref="Models.SqlScriptResource"/> instance for mocking. </returns>
        public static SqlScriptResource SqlScriptResource(string id = null, string name = null, string type = null, string etag = null, SqlScript properties = null)
        {
            return new SqlScriptResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of SqlScript. </summary>
        /// <param name="description"> The description of the SQL script. </param>
        /// <param name="type"> The type of the SQL script. </param>
        /// <param name="content"> The content of the SQL script. </param>
        /// <param name="folder"> The folder that this SQL script is in. If not specified, this SQL script will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SqlScript"/> instance for mocking. </returns>
        public static SqlScript SqlScript(string description = null, SqlScriptType? type = null, SqlScriptContent content = null, SqlScriptFolder folder = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlScript(description, type, content, folder, additionalProperties);
        }

        /// <summary> Initializes a new instance of SqlScriptContent. </summary>
        /// <param name="query"> SQL query to execute. </param>
        /// <param name="currentConnection"> The connection used to execute the SQL script. </param>
        /// <param name="resultLimit"> Limit of results, &apos;-1&apos; for no limit. </param>
        /// <param name="metadata"> The metadata of the SQL script. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SqlScriptContent"/> instance for mocking. </returns>
        public static SqlScriptContent SqlScriptContent(string query = null, SqlConnection currentConnection = null, int? resultLimit = null, SqlScriptMetadata metadata = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlScriptContent(query, currentConnection, resultLimit, metadata, additionalProperties);
        }

        /// <summary> Initializes a new instance of SqlConnection. </summary>
        /// <param name="type"> The type of the connection. </param>
        /// <param name="name"> The identifier of the connection. </param>
        /// <param name="poolName"> The associated SQL pool name (supported by SQL pool v3). </param>
        /// <param name="databaseName"> The associated database name (supported by SQL pool v3). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SqlConnection"/> instance for mocking. </returns>
        public static SqlConnection SqlConnection(SqlConnectionType? type = null, string name = null, string poolName = null, string databaseName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlConnection(type, name, poolName, databaseName, additionalProperties);
        }

        /// <summary> Initializes a new instance of SqlScriptMetadata. </summary>
        /// <param name="language"> The language of the SQL script. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SqlScriptMetadata"/> instance for mocking. </returns>
        public static SqlScriptMetadata SqlScriptMetadata(string language = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlScriptMetadata(language, additionalProperties);
        }

        /// <summary> Initializes a new instance of SqlScriptFolder. </summary>
        /// <param name="name"> The name of the folder that this SQL script is in. </param>
        /// <returns> A new <see cref="Models.SqlScriptFolder"/> instance for mocking. </returns>
        public static SqlScriptFolder SqlScriptFolder(string name = null)
        {
            return new SqlScriptFolder(name);
        }

        /// <summary> Initializes a new instance of TriggerResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties">
        /// Properties of the trigger.
        /// Please note <see cref="Trigger"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BlobEventsTrigger"/>, <see cref="BlobTrigger"/>, <see cref="ChainingTrigger"/>, <see cref="CustomEventsTrigger"/>, <see cref="MultiplePipelineTrigger"/>, <see cref="RerunTumblingWindowTrigger"/>, <see cref="ScheduleTrigger"/> and <see cref="TumblingWindowTrigger"/>.
        /// </param>
        /// <returns> A new <see cref="Models.TriggerResource"/> instance for mocking. </returns>
        public static TriggerResource TriggerResource(string id = null, string name = null, string type = null, string etag = null, Trigger properties = null)
        {
            return new TriggerResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of Trigger. </summary>
        /// <param name="type"> Trigger type. </param>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.Trigger"/> instance for mocking. </returns>
        public static Trigger Trigger(string type = null, string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Trigger(type, description, runtimeState, annotations?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of TriggerSubscriptionOperationStatus. </summary>
        /// <param name="triggerName"> Trigger name. </param>
        /// <param name="status"> Event Subscription Status. </param>
        /// <returns> A new <see cref="Models.TriggerSubscriptionOperationStatus"/> instance for mocking. </returns>
        public static TriggerSubscriptionOperationStatus TriggerSubscriptionOperationStatus(string triggerName = null, EventSubscriptionStatus? status = null)
        {
            return new TriggerSubscriptionOperationStatus(triggerName, status);
        }

        /// <summary> Initializes a new instance of TriggerRunsQueryResponse. </summary>
        /// <param name="value"> List of trigger runs. </param>
        /// <param name="continuationToken"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <returns> A new <see cref="Models.TriggerRunsQueryResponse"/> instance for mocking. </returns>
        public static TriggerRunsQueryResponse TriggerRunsQueryResponse(IEnumerable<TriggerRun> value = null, string continuationToken = null)
        {
            value ??= new List<TriggerRun>();

            return new TriggerRunsQueryResponse(value?.ToList(), continuationToken);
        }

        /// <summary> Initializes a new instance of TriggerRun. </summary>
        /// <param name="triggerRunId"> Trigger run id. </param>
        /// <param name="triggerName"> Trigger name. </param>
        /// <param name="triggerType"> Trigger type. </param>
        /// <param name="triggerRunTimestamp"> Trigger run start time. </param>
        /// <param name="status"> Trigger run status. </param>
        /// <param name="message"> Trigger error message. </param>
        /// <param name="properties"> List of property name and value related to trigger run. Name, value pair depends on type of trigger. </param>
        /// <param name="triggeredPipelines"> List of pipeline name and run Id triggered by the trigger run. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.TriggerRun"/> instance for mocking. </returns>
        public static TriggerRun TriggerRun(string triggerRunId = null, string triggerName = null, string triggerType = null, DateTimeOffset? triggerRunTimestamp = null, TriggerRunStatus? status = null, string message = null, IReadOnlyDictionary<string, string> properties = null, IReadOnlyDictionary<string, string> triggeredPipelines = null, IReadOnlyDictionary<string, object> additionalProperties = null)
        {
            properties ??= new Dictionary<string, string>();
            triggeredPipelines ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, object>();

            return new TriggerRun(triggerRunId, triggerName, triggerType, triggerRunTimestamp, status, message, properties, triggeredPipelines, additionalProperties);
        }

        /// <summary> Initializes a new instance of Workspace. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="identity"> Identity of the workspace. </param>
        /// <param name="defaultDataLakeStorage"> Workspace default data lake storage account details. </param>
        /// <param name="sqlAdministratorLoginPassword"> SQL administrator login password. </param>
        /// <param name="managedResourceGroupName"> Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and &apos;-&apos;, &apos;_&apos;, &apos;(&apos;, &apos;)&apos; and&apos;.&apos;. Note that the name cannot end with &apos;.&apos;. </param>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="sqlAdministratorLogin"> Login for workspace SQL active directory administrator. </param>
        /// <param name="virtualNetworkProfile"> Virtual Network profile. </param>
        /// <param name="connectivityEndpoints"> Connectivity endpoints. </param>
        /// <param name="managedVirtualNetwork"> Setting this to &apos;default&apos; will ensure that all compute for this workspace is in a virtual network managed on behalf of the user. </param>
        /// <param name="privateEndpointConnections"> Private endpoint connections to the workspace. </param>
        /// <param name="encryption"> The encryption details of the workspace. </param>
        /// <param name="workspaceUID"> The workspace unique identifier. </param>
        /// <param name="extraProperties"> Workspace level configs and feature flags. </param>
        /// <param name="managedVirtualNetworkSettings"> Managed Virtual Network Settings. </param>
        /// <param name="workspaceRepositoryConfiguration"> Git integration settings. </param>
        /// <param name="purviewConfiguration"> Purview Configuration. </param>
        /// <param name="adlaResourceId"> The ADLA resource ID. </param>
        /// <returns> A new <see cref="Models.Workspace"/> instance for mocking. </returns>
        public static Workspace Workspace(string id = null, string name = null, string type = null, IDictionary<string, string> tags = null, string location = null, ManagedIdentity identity = null, DataLakeStorageAccountDetails defaultDataLakeStorage = null, string sqlAdministratorLoginPassword = null, string managedResourceGroupName = null, string provisioningState = null, string sqlAdministratorLogin = null, VirtualNetworkProfile virtualNetworkProfile = null, IDictionary<string, string> connectivityEndpoints = null, string managedVirtualNetwork = null, IEnumerable<PrivateEndpointConnection> privateEndpointConnections = null, EncryptionDetails encryption = null, Guid? workspaceUID = null, IReadOnlyDictionary<string, object> extraProperties = null, ManagedVirtualNetworkSettings managedVirtualNetworkSettings = null, WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration = null, PurviewConfiguration purviewConfiguration = null, string adlaResourceId = null)
        {
            tags ??= new Dictionary<string, string>();
            connectivityEndpoints ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<PrivateEndpointConnection>();
            extraProperties ??= new Dictionary<string, object>();

            return new Workspace(id, name, type, tags, location, identity, defaultDataLakeStorage, sqlAdministratorLoginPassword, managedResourceGroupName, provisioningState, sqlAdministratorLogin, virtualNetworkProfile, connectivityEndpoints, managedVirtualNetwork, privateEndpointConnections?.ToList(), encryption, workspaceUID, extraProperties, managedVirtualNetworkSettings, workspaceRepositoryConfiguration, purviewConfiguration, adlaResourceId);
        }

        /// <summary> Initializes a new instance of DataLakeStorageAccountDetails. </summary>
        /// <param name="accountUrl"> Account URL. </param>
        /// <param name="filesystem"> Filesystem name. </param>
        /// <returns> A new <see cref="Models.DataLakeStorageAccountDetails"/> instance for mocking. </returns>
        public static DataLakeStorageAccountDetails DataLakeStorageAccountDetails(string accountUrl = null, string filesystem = null)
        {
            return new DataLakeStorageAccountDetails(accountUrl, filesystem);
        }

        /// <summary> Initializes a new instance of VirtualNetworkProfile. </summary>
        /// <param name="computeSubnetId"> Subnet ID used for computes in workspace. </param>
        /// <returns> A new <see cref="Models.VirtualNetworkProfile"/> instance for mocking. </returns>
        public static VirtualNetworkProfile VirtualNetworkProfile(string computeSubnetId = null)
        {
            return new VirtualNetworkProfile(computeSubnetId);
        }

        /// <summary> Initializes a new instance of PrivateEndpointConnection. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="privateEndpoint"> The private endpoint which the connection belongs to. </param>
        /// <param name="connectionState"> Connection state of the private endpoint connection. </param>
        /// <param name="provisioningState"> Provisioning state of the private endpoint connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnection"/> instance for mocking. </returns>
        public static PrivateEndpointConnection PrivateEndpointConnection(string id = null, string name = null, string type = null, PrivateEndpoint privateEndpoint = null, PrivateLinkServiceConnectionState connectionState = null, string provisioningState = null)
        {
            return new PrivateEndpointConnection(id, name, type, privateEndpoint, connectionState, provisioningState);
        }

        /// <summary> Initializes a new instance of PrivateEndpoint. </summary>
        /// <param name="id"> Resource id of the private endpoint. </param>
        /// <returns> A new <see cref="Models.PrivateEndpoint"/> instance for mocking. </returns>
        public static PrivateEndpoint PrivateEndpoint(string id = null)
        {
            return new PrivateEndpoint(id);
        }

        /// <summary> Initializes a new instance of PrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> The private link service connection status. </param>
        /// <param name="description"> The private link service connection description. </param>
        /// <param name="actionsRequired"> The actions required for private link service connection. </param>
        /// <returns> A new <see cref="Models.PrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState(string status = null, string description = null, string actionsRequired = null)
        {
            return new PrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of ProxyResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <returns> A new <see cref="Models.ProxyResource"/> instance for mocking. </returns>
        public static ProxyResource ProxyResource(string id = null, string name = null, string type = null)
        {
            return new ProxyResource(id, name, type);
        }

        /// <summary> Initializes a new instance of EncryptionDetails. </summary>
        /// <param name="doubleEncryptionEnabled"> Double Encryption enabled. </param>
        /// <param name="cmk"> Customer Managed Key Details. </param>
        /// <returns> A new <see cref="Models.EncryptionDetails"/> instance for mocking. </returns>
        public static EncryptionDetails EncryptionDetails(bool? doubleEncryptionEnabled = null, CustomerManagedKeyDetails cmk = null)
        {
            return new EncryptionDetails(doubleEncryptionEnabled, cmk);
        }

        /// <summary> Initializes a new instance of CustomerManagedKeyDetails. </summary>
        /// <param name="status"> The customer managed key status on the workspace. </param>
        /// <param name="key"> The key object of the workspace. </param>
        /// <returns> A new <see cref="Models.CustomerManagedKeyDetails"/> instance for mocking. </returns>
        public static CustomerManagedKeyDetails CustomerManagedKeyDetails(string status = null, WorkspaceKeyDetails key = null)
        {
            return new CustomerManagedKeyDetails(status, key);
        }

        /// <summary> Initializes a new instance of WorkspaceKeyDetails. </summary>
        /// <param name="name"> Workspace Key sub-resource name. </param>
        /// <param name="keyVaultUrl"> Workspace Key sub-resource key vault url. </param>
        /// <returns> A new <see cref="Models.WorkspaceKeyDetails"/> instance for mocking. </returns>
        public static WorkspaceKeyDetails WorkspaceKeyDetails(string name = null, string keyVaultUrl = null)
        {
            return new WorkspaceKeyDetails(name, keyVaultUrl);
        }

        /// <summary> Initializes a new instance of ManagedVirtualNetworkSettings. </summary>
        /// <param name="preventDataExfiltration"> Prevent Data Exfiltration. </param>
        /// <param name="linkedAccessCheckOnTargetResource"> Linked Access Check On Target Resource. </param>
        /// <param name="allowedAadTenantIdsForLinking"> Allowed Aad Tenant Ids For Linking. </param>
        /// <returns> A new <see cref="Models.ManagedVirtualNetworkSettings"/> instance for mocking. </returns>
        public static ManagedVirtualNetworkSettings ManagedVirtualNetworkSettings(bool? preventDataExfiltration = null, bool? linkedAccessCheckOnTargetResource = null, IEnumerable<string> allowedAadTenantIdsForLinking = null)
        {
            allowedAadTenantIdsForLinking ??= new List<string>();

            return new ManagedVirtualNetworkSettings(preventDataExfiltration, linkedAccessCheckOnTargetResource, allowedAadTenantIdsForLinking?.ToList());
        }

        /// <summary> Initializes a new instance of WorkspaceRepositoryConfiguration. </summary>
        /// <param name="type"> Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration. </param>
        /// <param name="hostName"> GitHub Enterprise host name. For example: https://github.mydomain.com. </param>
        /// <param name="accountName"> Account name. </param>
        /// <param name="projectName"> VSTS project name. </param>
        /// <param name="repositoryName"> Repository name. </param>
        /// <param name="collaborationBranch"> Collaboration branch. </param>
        /// <param name="rootFolder"> Root folder to use in the repository. </param>
        /// <param name="lastCommitId"> The last commit ID. </param>
        /// <param name="tenantId"> The VSTS tenant ID. </param>
        /// <param name="clientId"> GitHub bring your own app client id. </param>
        /// <param name="clientSecret"> GitHub bring your own app client secret information. </param>
        /// <returns> A new <see cref="Models.WorkspaceRepositoryConfiguration"/> instance for mocking. </returns>
        public static WorkspaceRepositoryConfiguration WorkspaceRepositoryConfiguration(string type = null, string hostName = null, string accountName = null, string projectName = null, string repositoryName = null, string collaborationBranch = null, string rootFolder = null, string lastCommitId = null, Guid? tenantId = null, string clientId = null, GitHubClientSecret clientSecret = null)
        {
            return new WorkspaceRepositoryConfiguration(type, hostName, accountName, projectName, repositoryName, collaborationBranch, rootFolder, lastCommitId, tenantId, clientId, clientSecret);
        }

        /// <summary> Initializes a new instance of GitHubClientSecret. </summary>
        /// <param name="byoaSecretAkvUrl"> Bring your own app client secret AKV URL. </param>
        /// <param name="byoaSecretName"> Bring your own app client secret name in AKV. </param>
        /// <returns> A new <see cref="Models.GitHubClientSecret"/> instance for mocking. </returns>
        public static GitHubClientSecret GitHubClientSecret(string byoaSecretAkvUrl = null, string byoaSecretName = null)
        {
            return new GitHubClientSecret(byoaSecretAkvUrl, byoaSecretName);
        }

        /// <summary> Initializes a new instance of PurviewConfiguration. </summary>
        /// <param name="purviewResourceId"> Purview Resource ID. </param>
        /// <returns> A new <see cref="Models.PurviewConfiguration"/> instance for mocking. </returns>
        public static PurviewConfiguration PurviewConfiguration(string purviewResourceId = null)
        {
            return new PurviewConfiguration(purviewResourceId);
        }

        /// <summary> Initializes a new instance of ManagedIdentity. </summary>
        /// <param name="principalId"> The principal ID of the workspace managed identity. </param>
        /// <param name="tenantId"> The tenant ID of the workspace managed identity. </param>
        /// <param name="type"> The type of managed identity for the workspace. </param>
        /// <returns> A new <see cref="Models.ManagedIdentity"/> instance for mocking. </returns>
        public static ManagedIdentity ManagedIdentity(string principalId = null, Guid? tenantId = null, ResourceIdentityType? type = null)
        {
            return new ManagedIdentity(principalId, tenantId, type);
        }

        /// <summary> Initializes a new instance of AzureKeyVaultSecretReference. </summary>
        /// <param name="store"> The Azure Key Vault linked service reference. </param>
        /// <param name="secretName"> The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string). </param>
        /// <param name="secretVersion"> The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureKeyVaultSecretReference"/> instance for mocking. </returns>
        public static AzureKeyVaultSecretReference AzureKeyVaultSecretReference(LinkedServiceReference store = null, object secretName = null, object secretVersion = null)
        {
            return new AzureKeyVaultSecretReference("AzureKeyVaultSecret", store, secretName, secretVersion);
        }

        /// <summary> Initializes a new instance of PipelineReference. </summary>
        /// <param name="type"> Pipeline reference type. </param>
        /// <param name="referenceName"> Reference pipeline name. </param>
        /// <param name="name"> Reference name. </param>
        /// <returns> A new <see cref="Models.PipelineReference"/> instance for mocking. </returns>
        public static PipelineReference PipelineReference(PipelineReferenceType type = default, string referenceName = null, string name = null)
        {
            return new PipelineReference(type, referenceName, name);
        }

        /// <summary> Initializes a new instance of TriggerPipelineReference. </summary>
        /// <param name="pipelineReference"> Pipeline reference. </param>
        /// <param name="parameters"> Pipeline parameters. </param>
        /// <returns> A new <see cref="Models.TriggerPipelineReference"/> instance for mocking. </returns>
        public static TriggerPipelineReference TriggerPipelineReference(PipelineReference pipelineReference = null, IDictionary<string, object> parameters = null)
        {
            parameters ??= new Dictionary<string, object>();

            return new TriggerPipelineReference(pipelineReference, parameters);
        }

        /// <summary> Initializes a new instance of WorkspaceUpdateParameters. </summary>
        /// <param name="tags"> The resource tags. </param>
        /// <param name="identity"> Managed service identity of the workspace. </param>
        /// <returns> A new <see cref="Models.WorkspaceUpdateParameters"/> instance for mocking. </returns>
        public static WorkspaceUpdateParameters WorkspaceUpdateParameters(IDictionary<string, string> tags = null, WorkspaceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new WorkspaceUpdateParameters(tags, identity);
        }

        /// <summary> Initializes a new instance of WorkspaceIdentity. </summary>
        /// <param name="type"> The identity type. Currently the only supported type is &apos;SystemAssigned&apos;. </param>
        /// <param name="principalId"> The principal id of the identity. </param>
        /// <param name="tenantId"> The client tenant id of the identity. </param>
        /// <returns> A new <see cref="Models.WorkspaceIdentity"/> instance for mocking. </returns>
        public static WorkspaceIdentity WorkspaceIdentity(string type = null, string principalId = null, string tenantId = null)
        {
            return new WorkspaceIdentity(type, principalId, tenantId);
        }

        /// <summary> Initializes a new instance of DatasetReference. </summary>
        /// <param name="type"> Dataset reference type. </param>
        /// <param name="referenceName"> Reference dataset name. </param>
        /// <param name="parameters"> Arguments for dataset. </param>
        /// <returns> A new <see cref="Models.DatasetReference"/> instance for mocking. </returns>
        public static DatasetReference DatasetReference(DatasetReferenceType type = default, string referenceName = null, IDictionary<string, object> parameters = null)
        {
            parameters ??= new Dictionary<string, object>();

            return new DatasetReference(type, referenceName, parameters);
        }

        /// <summary> Initializes a new instance of DataFlowReference. </summary>
        /// <param name="type"> Data flow reference type. </param>
        /// <param name="referenceName"> Reference data flow name. </param>
        /// <param name="datasetParameters"> Reference data flow parameters from dataset. </param>
        /// <param name="parameters"> Data flow parameters. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DataFlowReference"/> instance for mocking. </returns>
        public static DataFlowReference DataFlowReference(DataFlowReferenceType type = default, string referenceName = null, object datasetParameters = null, IDictionary<string, object> parameters = null, IDictionary<string, object> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DataFlowReference(type, referenceName, datasetParameters, parameters, additionalProperties);
        }

        /// <summary> Initializes a new instance of GetSsisObjectMetadataRequest. </summary>
        /// <param name="metadataPath"> Metadata path. </param>
        /// <returns> A new <see cref="Models.GetSsisObjectMetadataRequest"/> instance for mocking. </returns>
        public static GetSsisObjectMetadataRequest GetSsisObjectMetadataRequest(string metadataPath = null)
        {
            return new GetSsisObjectMetadataRequest(metadataPath);
        }

        /// <summary> Initializes a new instance of SsisObjectMetadataStatusResponse. </summary>
        /// <param name="status"> The status of the operation. </param>
        /// <param name="name"> The operation name. </param>
        /// <param name="properties"> The operation properties. </param>
        /// <param name="error"> The operation error message. </param>
        /// <returns> A new <see cref="Models.SsisObjectMetadataStatusResponse"/> instance for mocking. </returns>
        public static SsisObjectMetadataStatusResponse SsisObjectMetadataStatusResponse(string status = null, string name = null, string properties = null, string error = null)
        {
            return new SsisObjectMetadataStatusResponse(status, name, properties, error);
        }

        /// <summary> Initializes a new instance of ExposureControlRequest. </summary>
        /// <param name="featureName"> The feature name. </param>
        /// <param name="featureType"> The feature type. </param>
        /// <returns> A new <see cref="Models.ExposureControlRequest"/> instance for mocking. </returns>
        public static ExposureControlRequest ExposureControlRequest(string featureName = null, string featureType = null)
        {
            return new ExposureControlRequest(featureName, featureType);
        }

        /// <summary> Initializes a new instance of ExposureControlResponse. </summary>
        /// <param name="featureName"> The feature name. </param>
        /// <param name="value"> The feature value. </param>
        /// <returns> A new <see cref="Models.ExposureControlResponse"/> instance for mocking. </returns>
        public static ExposureControlResponse ExposureControlResponse(string featureName = null, string value = null)
        {
            return new ExposureControlResponse(featureName, value);
        }

        /// <summary> Initializes a new instance of StartDataFlowDebugSessionRequest. </summary>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="dataFlow"> Data flow instance. </param>
        /// <param name="dataFlows"> List of Data flows. </param>
        /// <param name="datasets"> List of datasets. </param>
        /// <param name="linkedServices"> List of linked services. </param>
        /// <param name="staging"> Staging info for debug session. </param>
        /// <param name="debugSettings"> Data flow debug settings. </param>
        /// <param name="incrementalDebug"> The type of new Databricks cluster. </param>
        /// <returns> A new <see cref="Models.StartDataFlowDebugSessionRequest"/> instance for mocking. </returns>
        public static StartDataFlowDebugSessionRequest StartDataFlowDebugSessionRequest(string sessionId = null, DataFlowResource dataFlow = null, IEnumerable<DataFlowResource> dataFlows = null, IEnumerable<DatasetResource> datasets = null, IEnumerable<LinkedServiceResource> linkedServices = null, object staging = null, object debugSettings = null, bool? incrementalDebug = null)
        {
            dataFlows ??= new List<DataFlowResource>();
            datasets ??= new List<DatasetResource>();
            linkedServices ??= new List<LinkedServiceResource>();

            return new StartDataFlowDebugSessionRequest(sessionId, dataFlow, dataFlows?.ToList(), datasets?.ToList(), linkedServices?.ToList(), staging, debugSettings, incrementalDebug);
        }

        /// <summary> Initializes a new instance of StartDataFlowDebugSessionResponse. </summary>
        /// <param name="jobVersion"> The ID of data flow debug job version. </param>
        /// <returns> A new <see cref="Models.StartDataFlowDebugSessionResponse"/> instance for mocking. </returns>
        public static StartDataFlowDebugSessionResponse StartDataFlowDebugSessionResponse(string jobVersion = null)
        {
            return new StartDataFlowDebugSessionResponse(jobVersion);
        }

        /// <summary> Initializes a new instance of DataFlowDebugPreviewDataRequest. </summary>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="dataFlowName"> The data flow which contains the debug session. </param>
        /// <param name="streamName"> The output stream name. </param>
        /// <param name="rowLimits"> The row limit for preview request. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugPreviewDataRequest"/> instance for mocking. </returns>
        public static DataFlowDebugPreviewDataRequest DataFlowDebugPreviewDataRequest(string sessionId = null, string dataFlowName = null, string streamName = null, int? rowLimits = null)
        {
            return new DataFlowDebugPreviewDataRequest(sessionId, dataFlowName, streamName, rowLimits);
        }

        /// <summary> Initializes a new instance of DataFlowDebugStatisticsRequest. </summary>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="dataFlowName"> The data flow which contains the debug session. </param>
        /// <param name="streamName"> The output stream name. </param>
        /// <param name="columns"> List of column names. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugStatisticsRequest"/> instance for mocking. </returns>
        public static DataFlowDebugStatisticsRequest DataFlowDebugStatisticsRequest(string sessionId = null, string dataFlowName = null, string streamName = null, IEnumerable<string> columns = null)
        {
            columns ??= new List<string>();

            return new DataFlowDebugStatisticsRequest(sessionId, dataFlowName, streamName, columns?.ToList());
        }

        /// <summary> Initializes a new instance of EvaluateDataFlowExpressionRequest. </summary>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="dataFlowName"> The data flow which contains the debug session. </param>
        /// <param name="streamName"> The output stream name. </param>
        /// <param name="rowLimits"> The row limit for preview request. </param>
        /// <param name="expression"> The expression for preview. </param>
        /// <returns> A new <see cref="Models.EvaluateDataFlowExpressionRequest"/> instance for mocking. </returns>
        public static EvaluateDataFlowExpressionRequest EvaluateDataFlowExpressionRequest(string sessionId = null, string dataFlowName = null, string streamName = null, int? rowLimits = null, string expression = null)
        {
            return new EvaluateDataFlowExpressionRequest(sessionId, dataFlowName, streamName, rowLimits, expression);
        }

        /// <summary> Initializes a new instance of DataFlowDebugQueryResponse. </summary>
        /// <param name="runId"> The run ID of data flow debug session. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugQueryResponse"/> instance for mocking. </returns>
        public static DataFlowDebugQueryResponse DataFlowDebugQueryResponse(string runId = null)
        {
            return new DataFlowDebugQueryResponse(runId);
        }

        /// <summary> Initializes a new instance of DataFlowDebugResultResponse. </summary>
        /// <param name="status"> The run status of data preview, statistics or expression preview. </param>
        /// <param name="data"> The result data of data preview, statistics or expression preview. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugResultResponse"/> instance for mocking. </returns>
        public static DataFlowDebugResultResponse DataFlowDebugResultResponse(string status = null, string data = null)
        {
            return new DataFlowDebugResultResponse(status, data);
        }

        /// <summary> Initializes a new instance of RerunTriggerListResponse. </summary>
        /// <param name="value"> List of rerun triggers. </param>
        /// <param name="nextLink"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <returns> A new <see cref="Models.RerunTriggerListResponse"/> instance for mocking. </returns>
        public static RerunTriggerListResponse RerunTriggerListResponse(IEnumerable<RerunTriggerResource> value = null, string nextLink = null)
        {
            value ??= new List<RerunTriggerResource>();

            return new RerunTriggerListResponse(value?.ToList(), nextLink);
        }

        /// <summary> Initializes a new instance of RerunTriggerResource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of the rerun trigger. </param>
        /// <returns> A new <see cref="Models.RerunTriggerResource"/> instance for mocking. </returns>
        public static RerunTriggerResource RerunTriggerResource(string id = null, string name = null, string type = null, string etag = null, RerunTumblingWindowTrigger properties = null)
        {
            return new RerunTriggerResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes a new instance of RerunTumblingWindowTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="parentTrigger"> The parent trigger reference. </param>
        /// <param name="requestedStartTime"> The start time for the time period for which restatement is initiated. Only UTC time is currently supported. </param>
        /// <param name="requestedEndTime"> The end time for the time period for which restatement is initiated. Only UTC time is currently supported. </param>
        /// <param name="rerunConcurrency"> The max number of parallel time windows (ready for execution) for which a rerun is triggered. </param>
        /// <returns> A new <see cref="Models.RerunTumblingWindowTrigger"/> instance for mocking. </returns>
        public static RerunTumblingWindowTrigger RerunTumblingWindowTrigger(string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object parentTrigger = null, DateTimeOffset requestedStartTime = default, DateTimeOffset requestedEndTime = default, int rerunConcurrency = default)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new RerunTumblingWindowTrigger("RerunTumblingWindowTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, parentTrigger, requestedStartTime, requestedEndTime, rerunConcurrency);
        }

        /// <summary> Initializes a new instance of MappingDataFlow. </summary>
        /// <param name="description"> The description of the data flow. </param>
        /// <param name="annotations"> List of tags that can be used for describing the data flow. </param>
        /// <param name="folder"> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </param>
        /// <param name="sources"> List of sources in data flow. </param>
        /// <param name="sinks"> List of sinks in data flow. </param>
        /// <param name="transformations"> List of transformations in data flow. </param>
        /// <param name="script"> DataFlow script. </param>
        /// <param name="scriptLines"> Data flow script lines. </param>
        /// <returns> A new <see cref="Models.MappingDataFlow"/> instance for mocking. </returns>
        public static MappingDataFlow MappingDataFlow(string description = null, IEnumerable<object> annotations = null, DataFlowFolder folder = null, IEnumerable<DataFlowSource> sources = null, IEnumerable<DataFlowSink> sinks = null, IEnumerable<Transformation> transformations = null, string script = null, IEnumerable<string> scriptLines = null)
        {
            annotations ??= new List<object>();
            sources ??= new List<DataFlowSource>();
            sinks ??= new List<DataFlowSink>();
            transformations ??= new List<Transformation>();
            scriptLines ??= new List<string>();

            return new MappingDataFlow("MappingDataFlow", description, annotations?.ToList(), folder, sources?.ToList(), sinks?.ToList(), transformations?.ToList(), script, scriptLines?.ToList());
        }

        /// <summary> Initializes a new instance of DataFlowSource. </summary>
        /// <param name="name"> Transformation name. </param>
        /// <param name="description"> Transformation description. </param>
        /// <param name="dataset"> Dataset reference. </param>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="flowlet"> Flowlet Reference. </param>
        /// <param name="schemaLinkedService"> Schema linked service reference. </param>
        /// <returns> A new <see cref="Models.DataFlowSource"/> instance for mocking. </returns>
        public static DataFlowSource DataFlowSource(string name = null, string description = null, DatasetReference dataset = null, LinkedServiceReference linkedService = null, DataFlowReference flowlet = null, LinkedServiceReference schemaLinkedService = null)
        {
            return new DataFlowSource(name, description, dataset, linkedService, flowlet, schemaLinkedService);
        }

        /// <summary> Initializes a new instance of Transformation. </summary>
        /// <param name="name"> Transformation name. </param>
        /// <param name="description"> Transformation description. </param>
        /// <param name="dataset"> Dataset reference. </param>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="flowlet"> Flowlet Reference. </param>
        /// <returns> A new <see cref="Models.Transformation"/> instance for mocking. </returns>
        public static Transformation Transformation(string name = null, string description = null, DatasetReference dataset = null, LinkedServiceReference linkedService = null, DataFlowReference flowlet = null)
        {
            return new Transformation(name, description, dataset, linkedService, flowlet);
        }

        /// <summary> Initializes a new instance of DataFlowSink. </summary>
        /// <param name="name"> Transformation name. </param>
        /// <param name="description"> Transformation description. </param>
        /// <param name="dataset"> Dataset reference. </param>
        /// <param name="linkedService"> Linked service reference. </param>
        /// <param name="flowlet"> Flowlet Reference. </param>
        /// <param name="schemaLinkedService"> Schema linked service reference. </param>
        /// <param name="rejectedDataLinkedService"> Rejected data linked service reference. </param>
        /// <returns> A new <see cref="Models.DataFlowSink"/> instance for mocking. </returns>
        public static DataFlowSink DataFlowSink(string name = null, string description = null, DatasetReference dataset = null, LinkedServiceReference linkedService = null, DataFlowReference flowlet = null, LinkedServiceReference schemaLinkedService = null, LinkedServiceReference rejectedDataLinkedService = null)
        {
            return new DataFlowSink(name, description, dataset, linkedService, flowlet, schemaLinkedService, rejectedDataLinkedService);
        }

        /// <summary> Initializes a new instance of Flowlet. </summary>
        /// <param name="description"> The description of the data flow. </param>
        /// <param name="annotations"> List of tags that can be used for describing the data flow. </param>
        /// <param name="folder"> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </param>
        /// <param name="sources"> List of sources in Flowlet. </param>
        /// <param name="sinks"> List of sinks in Flowlet. </param>
        /// <param name="transformations"> List of transformations in Flowlet. </param>
        /// <param name="script"> Flowlet script. </param>
        /// <param name="scriptLines"> Flowlet script lines. </param>
        /// <returns> A new <see cref="Models.Flowlet"/> instance for mocking. </returns>
        public static Flowlet Flowlet(string description = null, IEnumerable<object> annotations = null, DataFlowFolder folder = null, IEnumerable<DataFlowSource> sources = null, IEnumerable<DataFlowSink> sinks = null, IEnumerable<Transformation> transformations = null, string script = null, IEnumerable<string> scriptLines = null)
        {
            annotations ??= new List<object>();
            sources ??= new List<DataFlowSource>();
            sinks ??= new List<DataFlowSink>();
            transformations ??= new List<Transformation>();
            scriptLines ??= new List<string>();

            return new Flowlet("Flowlet", description, annotations?.ToList(), folder, sources?.ToList(), sinks?.ToList(), transformations?.ToList(), script, scriptLines?.ToList());
        }

        /// <summary> Initializes a new instance of DatasetLocation. </summary>
        /// <param name="type"> Type of dataset storage location. </param>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetLocation"/> instance for mocking. </returns>
        public static DatasetLocation DatasetLocation(string type = null, object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DatasetLocation(type, folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureBlobStorageLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="container"> Specify the container of azure blob. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobStorageLocation"/> instance for mocking. </returns>
        public static AzureBlobStorageLocation AzureBlobStorageLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null, object container = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobStorageLocation("AzureBlobStorageLocation", folderPath, fileName, additionalProperties, container);
        }

        /// <summary> Initializes a new instance of AzureBlobFSLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="fileSystem"> Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSLocation"/> instance for mocking. </returns>
        public static AzureBlobFSLocation AzureBlobFSLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null, object fileSystem = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobFSLocation("AzureBlobFSLocation", folderPath, fileName, additionalProperties, fileSystem);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreLocation"/> instance for mocking. </returns>
        public static AzureDataLakeStoreLocation AzureDataLakeStoreLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataLakeStoreLocation("AzureDataLakeStoreLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of AmazonS3Location. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="bucketName"> Specify the bucketName of amazon S3. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Specify the version of amazon S3. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3Location"/> instance for mocking. </returns>
        public static AmazonS3Location AmazonS3Location(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null, object bucketName = null, object version = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonS3Location("AmazonS3Location", folderPath, fileName, additionalProperties, bucketName, version);
        }

        /// <summary> Initializes a new instance of FileServerLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FileServerLocation"/> instance for mocking. </returns>
        public static FileServerLocation FileServerLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FileServerLocation("FileServerLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureFileStorageLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AzureFileStorageLocation"/> instance for mocking. </returns>
        public static AzureFileStorageLocation AzureFileStorageLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureFileStorageLocation("AzureFileStorageLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of GoogleCloudStorageLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="bucketName"> Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleCloudStorageLocation"/> instance for mocking. </returns>
        public static GoogleCloudStorageLocation GoogleCloudStorageLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null, object bucketName = null, object version = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleCloudStorageLocation("GoogleCloudStorageLocation", folderPath, fileName, additionalProperties, bucketName, version);
        }

        /// <summary> Initializes a new instance of FtpServerLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FtpServerLocation"/> instance for mocking. </returns>
        public static FtpServerLocation FtpServerLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FtpServerLocation("FtpServerLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of SftpLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SftpLocation"/> instance for mocking. </returns>
        public static SftpLocation SftpLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SftpLocation("SftpLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of HttpServerLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="relativeUrl"> Specify the relativeUrl of http server. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HttpServerLocation"/> instance for mocking. </returns>
        public static HttpServerLocation HttpServerLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null, object relativeUrl = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HttpServerLocation("HttpServerLocation", folderPath, fileName, additionalProperties, relativeUrl);
        }

        /// <summary> Initializes a new instance of HdfsLocation. </summary>
        /// <param name="folderPath"> Specify the folder path of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> Specify the file name of dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.HdfsLocation"/> instance for mocking. </returns>
        public static HdfsLocation HdfsLocation(object folderPath = null, object fileName = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HdfsLocation("HdfsLocation", folderPath, fileName, additionalProperties);
        }

        /// <summary> Initializes a new instance of DatasetDataElement. </summary>
        /// <param name="name"> Name of the column. Type: string (or Expression with resultType string). </param>
        /// <param name="type"> Type of the column. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DatasetDataElement"/> instance for mocking. </returns>
        public static DatasetDataElement DatasetDataElement(object name = null, object type = null)
        {
            return new DatasetDataElement(name, type);
        }

        /// <summary> Initializes a new instance of DatasetSchemaDataElement. </summary>
        /// <param name="name"> Name of the schema column. Type: string (or Expression with resultType string). </param>
        /// <param name="type"> Type of the schema column. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetSchemaDataElement"/> instance for mocking. </returns>
        public static DatasetSchemaDataElement DatasetSchemaDataElement(object name = null, object type = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DatasetSchemaDataElement(name, type, additionalProperties);
        }

        /// <summary> Initializes a new instance of DatasetStorageFormat. </summary>
        /// <param name="type"> Type of dataset storage format. </param>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetStorageFormat"/> instance for mocking. </returns>
        public static DatasetStorageFormat DatasetStorageFormat(string type = null, object serializer = null, object deserializer = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DatasetStorageFormat(type, serializer, deserializer, additionalProperties);
        }

        /// <summary> Initializes a new instance of TextFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="columnDelimiter"> The column delimiter. Type: string (or Expression with resultType string). </param>
        /// <param name="rowDelimiter"> The row delimiter. Type: string (or Expression with resultType string). </param>
        /// <param name="escapeChar"> The escape character. Type: string (or Expression with resultType string). </param>
        /// <param name="quoteChar"> The quote character. Type: string (or Expression with resultType string). </param>
        /// <param name="nullValue"> The null value string. Type: string (or Expression with resultType string). </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). </param>
        /// <param name="treatEmptyAsNull"> Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="skipLineCount"> The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer). </param>
        /// <param name="firstRowAsHeader"> When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.TextFormat"/> instance for mocking. </returns>
        public static TextFormat TextFormat(object serializer = null, object deserializer = null, IDictionary<string, object> additionalProperties = null, object columnDelimiter = null, object rowDelimiter = null, object escapeChar = null, object quoteChar = null, object nullValue = null, object encodingName = null, object treatEmptyAsNull = null, object skipLineCount = null, object firstRowAsHeader = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TextFormat("TextFormat", serializer, deserializer, additionalProperties, columnDelimiter, rowDelimiter, escapeChar, quoteChar, nullValue, encodingName, treatEmptyAsNull, skipLineCount, firstRowAsHeader);
        }

        /// <summary> Initializes a new instance of JsonFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filePattern"> File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is &apos;setOfObjects&apos;. It is case-sensitive. </param>
        /// <param name="nestingSeparator"> The character used to separate nesting levels. Default value is &apos;.&apos; (dot). Type: string (or Expression with resultType string). </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If not provided, the default value is &apos;utf-8&apos;, unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the &apos;Name&apos; column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string). </param>
        /// <param name="jsonNodeReference"> The JSONPath of the JSON array element to be flattened. Example: &quot;$.ArrayPath&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="jsonPathDefinition"> The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with &quot;$&quot;; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {&quot;Column1&quot;: &quot;$.Column1Path&quot;, &quot;Column2&quot;: &quot;Column2PathInArray&quot;}. Type: object (or Expression with resultType object). </param>
        /// <returns> A new <see cref="Models.JsonFormat"/> instance for mocking. </returns>
        public static JsonFormat JsonFormat(object serializer = null, object deserializer = null, IDictionary<string, object> additionalProperties = null, object filePattern = null, object nestingSeparator = null, object encodingName = null, object jsonNodeReference = null, object jsonPathDefinition = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new JsonFormat("JsonFormat", serializer, deserializer, additionalProperties, filePattern, nestingSeparator, encodingName, jsonNodeReference, jsonPathDefinition);
        }

        /// <summary> Initializes a new instance of AvroFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AvroFormat"/> instance for mocking. </returns>
        public static AvroFormat AvroFormat(object serializer = null, object deserializer = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AvroFormat("AvroFormat", serializer, deserializer, additionalProperties);
        }

        /// <summary> Initializes a new instance of OrcFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.OrcFormat"/> instance for mocking. </returns>
        public static OrcFormat OrcFormat(object serializer = null, object deserializer = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OrcFormat("OrcFormat", serializer, deserializer, additionalProperties);
        }

        /// <summary> Initializes a new instance of ParquetFormat. </summary>
        /// <param name="serializer"> Serializer. Type: string (or Expression with resultType string). </param>
        /// <param name="deserializer"> Deserializer. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ParquetFormat"/> instance for mocking. </returns>
        public static ParquetFormat ParquetFormat(object serializer = null, object deserializer = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ParquetFormat("ParquetFormat", serializer, deserializer, additionalProperties);
        }

        /// <summary> Initializes a new instance of DatasetCompression. </summary>
        /// <param name="type"> Type of dataset compression. Type: string (or Expression with resultType string). </param>
        /// <param name="level"> The dataset compression level. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.DatasetCompression"/> instance for mocking. </returns>
        public static DatasetCompression DatasetCompression(object type = null, object level = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DatasetCompression(type, level, additionalProperties);
        }

        /// <summary> Initializes a new instance of AmazonS3Dataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="bucketName"> The name of the Amazon S3 bucket. Type: string (or Expression with resultType string). </param>
        /// <param name="key"> The key of the Amazon S3 object. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the S3 object name. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> The version for the S3 object. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeStart"> The start of S3 object&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of S3 object&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of files.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormat"/>, <see cref="JsonFormat"/>, <see cref="OrcFormat"/>, <see cref="ParquetFormat"/> and <see cref="TextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the Amazon S3 object. </param>
        /// <returns> A new <see cref="Models.AmazonS3Dataset"/> instance for mocking. </returns>
        public static AmazonS3Dataset AmazonS3Dataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object bucketName = null, object key = null, object prefix = null, object version = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonS3Dataset("AmazonS3Object", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, bucketName, key, prefix, version, modifiedDatetimeStart, modifiedDatetimeEnd, format, compression);
        }

        /// <summary> Initializes a new instance of AvroDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="location">
        /// The location of the avro storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="avroCompressionCodec"> A string from AvroCompressionCodecEnum or an expression. </param>
        /// <param name="avroCompressionLevel"></param>
        /// <returns> A new <see cref="Models.AvroDataset"/> instance for mocking. </returns>
        public static AvroDataset AvroDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, DatasetLocation location = null, object avroCompressionCodec = null, int? avroCompressionLevel = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AvroDataset("Avro", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, location, avroCompressionCodec, avroCompressionLevel);
        }

        /// <summary> Initializes a new instance of ExcelDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="location">
        /// The location of the excel storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="sheetName"> The sheet name of excel file. Type: string (or Expression with resultType string). </param>
        /// <param name="sheetIndex"> The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer). </param>
        /// <param name="range"> The partial data of one sheet. Type: string (or Expression with resultType string). </param>
        /// <param name="firstRowAsHeader"> When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="compression"> The data compression method used for the json dataset. </param>
        /// <param name="nullValue"> The null value string. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ExcelDataset"/> instance for mocking. </returns>
        public static ExcelDataset ExcelDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, DatasetLocation location = null, object sheetName = null, object sheetIndex = null, object range = null, object firstRowAsHeader = null, DatasetCompression compression = null, object nullValue = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ExcelDataset("Excel", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, location, sheetName, sheetIndex, range, firstRowAsHeader, compression, nullValue);
        }

        /// <summary> Initializes a new instance of ParquetDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="location">
        /// The location of the parquet storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="compressionCodec"> A string from ParquetCompressionCodecEnum or an expression. </param>
        /// <returns> A new <see cref="Models.ParquetDataset"/> instance for mocking. </returns>
        public static ParquetDataset ParquetDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, DatasetLocation location = null, object compressionCodec = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ParquetDataset("Parquet", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, location, compressionCodec);
        }

        /// <summary> Initializes a new instance of DelimitedTextDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="location">
        /// The location of the delimited text storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="columnDelimiter"> The column delimiter. Type: string (or Expression with resultType string). </param>
        /// <param name="rowDelimiter"> The row delimiter. Type: string (or Expression with resultType string). </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). </param>
        /// <param name="compressionCodec"> The data compressionCodec. Type: string (or Expression with resultType string). </param>
        /// <param name="compressionLevel"> The data compression method used for DelimitedText. </param>
        /// <param name="quoteChar"> The quote character. Type: string (or Expression with resultType string). </param>
        /// <param name="escapeChar"> The escape character. Type: string (or Expression with resultType string). </param>
        /// <param name="firstRowAsHeader"> When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="nullValue"> The null value string. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DelimitedTextDataset"/> instance for mocking. </returns>
        public static DelimitedTextDataset DelimitedTextDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, DatasetLocation location = null, object columnDelimiter = null, object rowDelimiter = null, object encodingName = null, object compressionCodec = null, object compressionLevel = null, object quoteChar = null, object escapeChar = null, object firstRowAsHeader = null, object nullValue = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DelimitedTextDataset("DelimitedText", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, location, columnDelimiter, rowDelimiter, encodingName, compressionCodec, compressionLevel, quoteChar, escapeChar, firstRowAsHeader, nullValue);
        }

        /// <summary> Initializes a new instance of JsonDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="location">
        /// The location of the json data storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). </param>
        /// <param name="compression"> The data compression method used for the json dataset. </param>
        /// <returns> A new <see cref="Models.JsonDataset"/> instance for mocking. </returns>
        public static JsonDataset JsonDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, DatasetLocation location = null, object encodingName = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new JsonDataset("Json", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, location, encodingName, compression);
        }

        /// <summary> Initializes a new instance of XmlDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="location">
        /// The location of the json data storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="encodingName"> The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string). </param>
        /// <param name="nullValue"> The null value string. Type: string (or Expression with resultType string). </param>
        /// <param name="compression"> The data compression method used for the json dataset. </param>
        /// <returns> A new <see cref="Models.XmlDataset"/> instance for mocking. </returns>
        public static XmlDataset XmlDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, DatasetLocation location = null, object encodingName = null, object nullValue = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new XmlDataset("Xml", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, location, encodingName, nullValue, compression);
        }

        /// <summary> Initializes a new instance of OrcDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="location">
        /// The location of the ORC data storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="orcCompressionCodec"> The data orcCompressionCodec. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OrcDataset"/> instance for mocking. </returns>
        public static OrcDataset OrcDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, DatasetLocation location = null, object orcCompressionCodec = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new OrcDataset("Orc", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, location, orcCompressionCodec);
        }

        /// <summary> Initializes a new instance of BinaryDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="location">
        /// The location of the Binary storage.
        /// Please note <see cref="DatasetLocation"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3Location"/>, <see cref="AzureBlobFSLocation"/>, <see cref="AzureBlobStorageLocation"/>, <see cref="AzureDataLakeStoreLocation"/>, <see cref="AzureFileStorageLocation"/>, <see cref="FileServerLocation"/>, <see cref="FtpServerLocation"/>, <see cref="GoogleCloudStorageLocation"/>, <see cref="HdfsLocation"/>, <see cref="HttpServerLocation"/> and <see cref="SftpLocation"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the binary dataset. </param>
        /// <returns> A new <see cref="Models.BinaryDataset"/> instance for mocking. </returns>
        public static BinaryDataset BinaryDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, DatasetLocation location = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new BinaryDataset("Binary", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, location, compression);
        }

        /// <summary> Initializes a new instance of AzureBlobDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="folderPath"> The path of the Azure Blob storage. Type: string (or Expression with resultType string). </param>
        /// <param name="tableRootLocation"> The root of blob path. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> The name of the Azure Blob. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeStart"> The start of Azure Blob&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of Azure Blob&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of the Azure Blob storage.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormat"/>, <see cref="JsonFormat"/>, <see cref="OrcFormat"/>, <see cref="ParquetFormat"/> and <see cref="TextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the blob storage. </param>
        /// <returns> A new <see cref="Models.AzureBlobDataset"/> instance for mocking. </returns>
        public static AzureBlobDataset AzureBlobDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object folderPath = null, object tableRootLocation = null, object fileName = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobDataset("AzureBlob", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, folderPath, tableRootLocation, fileName, modifiedDatetimeStart, modifiedDatetimeEnd, format, compression);
        }

        /// <summary> Initializes a new instance of AzureTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name of the Azure Table storage. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureTableDataset"/> instance for mocking. </returns>
        public static AzureTableDataset AzureTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureTableDataset("AzureTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of AzureSqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Azure SQL database. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Azure SQL database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlTableDataset"/> instance for mocking. </returns>
        public static AzureSqlTableDataset AzureSqlTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSqlTableDataset("AzureSqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of AzureSqlMITableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Azure SQL Managed Instance. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlMITableDataset"/> instance for mocking. </returns>
        public static AzureSqlMITableDataset AzureSqlMITableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSqlMITableDataset("AzureSqlMITable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of AzureSqlDWTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlDWTableDataset"/> instance for mocking. </returns>
        public static AzureSqlDWTableDataset AzureSqlDWTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSqlDWTableDataset("AzureSqlDWTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of CassandraTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name of the Cassandra database. Type: string (or Expression with resultType string). </param>
        /// <param name="keyspace"> The keyspace of the Cassandra database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CassandraTableDataset"/> instance for mocking. </returns>
        public static CassandraTableDataset CassandraTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object keyspace = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CassandraTableDataset("CassandraTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, keyspace);
        }

        /// <summary> Initializes a new instance of CustomDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="typeProperties"> Custom dataset properties. </param>
        /// <returns> A new <see cref="Models.CustomDataset"/> instance for mocking. </returns>
        public static CustomDataset CustomDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object typeProperties = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CustomDataset("CustomDataset", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, typeProperties);
        }

        /// <summary> Initializes a new instance of CosmosDbSqlApiCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collectionName"> CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDbSqlApiCollectionDataset"/> instance for mocking. </returns>
        public static CosmosDbSqlApiCollectionDataset CosmosDbSqlApiCollectionDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object collectionName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CosmosDbSqlApiCollectionDataset("CosmosDbSqlApiCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, collectionName);
        }

        /// <summary> Initializes a new instance of DocumentDbCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collectionName"> Document Database collection name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DocumentDbCollectionDataset"/> instance for mocking. </returns>
        public static DocumentDbCollectionDataset DocumentDbCollectionDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object collectionName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DocumentDbCollectionDataset("DocumentDbCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, collectionName);
        }

        /// <summary> Initializes a new instance of DynamicsEntityDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="entityName"> The logical name of the entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsEntityDataset"/> instance for mocking. </returns>
        public static DynamicsEntityDataset DynamicsEntityDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object entityName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsEntityDataset("DynamicsEntity", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, entityName);
        }

        /// <summary> Initializes a new instance of DynamicsCrmEntityDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="entityName"> The logical name of the entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsCrmEntityDataset"/> instance for mocking. </returns>
        public static DynamicsCrmEntityDataset DynamicsCrmEntityDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object entityName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsCrmEntityDataset("DynamicsCrmEntity", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, entityName);
        }

        /// <summary> Initializes a new instance of CommonDataServiceForAppsEntityDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="entityName"> The logical name of the entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CommonDataServiceForAppsEntityDataset"/> instance for mocking. </returns>
        public static CommonDataServiceForAppsEntityDataset CommonDataServiceForAppsEntityDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object entityName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CommonDataServiceForAppsEntityDataset("CommonDataServiceForAppsEntity", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, entityName);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="folderPath"> Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of the Data Lake Store.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormat"/>, <see cref="JsonFormat"/>, <see cref="OrcFormat"/>, <see cref="ParquetFormat"/> and <see cref="TextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the item(s) in the Azure Data Lake Store. </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreDataset"/> instance for mocking. </returns>
        public static AzureDataLakeStoreDataset AzureDataLakeStoreDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object folderPath = null, object fileName = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataLakeStoreDataset("AzureDataLakeStoreFile", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, folderPath, fileName, format, compression);
        }

        /// <summary> Initializes a new instance of AzureBlobFSDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="folderPath"> The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of the Azure Data Lake Storage Gen2 storage.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormat"/>, <see cref="JsonFormat"/>, <see cref="OrcFormat"/>, <see cref="ParquetFormat"/> and <see cref="TextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used for the blob storage. </param>
        /// <returns> A new <see cref="Models.AzureBlobFSDataset"/> instance for mocking. </returns>
        public static AzureBlobFSDataset AzureBlobFSDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object folderPath = null, object fileName = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobFSDataset("AzureBlobFSFile", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, folderPath, fileName, format, compression);
        }

        /// <summary> Initializes a new instance of Office365Dataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string). </param>
        /// <param name="predicate"> A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Office365Dataset"/> instance for mocking. </returns>
        public static Office365Dataset Office365Dataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object predicate = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Office365Dataset("Office365Table", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, predicate);
        }

        /// <summary> Initializes a new instance of FileShareDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="folderPath"> The path of the on-premises file system. Type: string (or Expression with resultType string). </param>
        /// <param name="fileName"> The name of the on-premises file system. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="format">
        /// The format of the files.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormat"/>, <see cref="JsonFormat"/>, <see cref="OrcFormat"/>, <see cref="ParquetFormat"/> and <see cref="TextFormat"/>.
        /// </param>
        /// <param name="fileFilter"> Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string). </param>
        /// <param name="compression"> The data compression method used for the file system. </param>
        /// <returns> A new <see cref="Models.FileShareDataset"/> instance for mocking. </returns>
        public static FileShareDataset FileShareDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object folderPath = null, object fileName = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null, DatasetStorageFormat format = null, object fileFilter = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new FileShareDataset("FileShare", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, folderPath, fileName, modifiedDatetimeStart, modifiedDatetimeEnd, format, fileFilter, compression);
        }

        /// <summary> Initializes a new instance of MongoDbCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collectionName"> The table name of the MongoDB database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDbCollectionDataset"/> instance for mocking. </returns>
        public static MongoDbCollectionDataset MongoDbCollectionDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object collectionName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbCollectionDataset("MongoDbCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, collectionName);
        }

        /// <summary> Initializes a new instance of MongoDbAtlasCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collection"> The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDbAtlasCollectionDataset"/> instance for mocking. </returns>
        public static MongoDbAtlasCollectionDataset MongoDbAtlasCollectionDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object collection = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbAtlasCollectionDataset("MongoDbAtlasCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, collection);
        }

        /// <summary> Initializes a new instance of MongoDbV2CollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collection"> The collection name of the MongoDB database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDbV2CollectionDataset"/> instance for mocking. </returns>
        public static MongoDbV2CollectionDataset MongoDbV2CollectionDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object collection = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbV2CollectionDataset("MongoDbV2Collection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, collection);
        }

        /// <summary> Initializes a new instance of CosmosDbMongoDbApiCollectionDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="collection"> The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDbMongoDbApiCollectionDataset"/> instance for mocking. </returns>
        public static CosmosDbMongoDbApiCollectionDataset CosmosDbMongoDbApiCollectionDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object collection = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CosmosDbMongoDbApiCollectionDataset("CosmosDbMongoDbApiCollection", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, collection);
        }

        /// <summary> Initializes a new instance of ODataResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="path"> The OData resource path. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ODataResourceDataset"/> instance for mocking. </returns>
        public static ODataResourceDataset ODataResourceDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object path = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ODataResourceDataset("ODataResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, path);
        }

        /// <summary> Initializes a new instance of OracleTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the on-premises Oracle database. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the on-premises Oracle database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleTableDataset"/> instance for mocking. </returns>
        public static OracleTableDataset OracleTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new OracleTableDataset("OracleTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of AmazonRdsForOracleTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForOracleTableDataset"/> instance for mocking. </returns>
        public static AmazonRdsForOracleTableDataset AmazonRdsForOracleTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonRdsForOracleTableDataset("AmazonRdsForOracleTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of TeradataTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="database"> The database name of Teradata. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of Teradata. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TeradataTableDataset"/> instance for mocking. </returns>
        public static TeradataTableDataset TeradataTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object database = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new TeradataTableDataset("TeradataTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, database, table);
        }

        /// <summary> Initializes a new instance of AzureMySqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The Azure MySQL database table name. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The name of Azure MySQL database table. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMySqlTableDataset"/> instance for mocking. </returns>
        public static AzureMySqlTableDataset AzureMySqlTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMySqlTableDataset("AzureMySqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table);
        }

        /// <summary> Initializes a new instance of AmazonRedshiftTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The Amazon Redshift table name. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The Amazon Redshift schema name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRedshiftTableDataset"/> instance for mocking. </returns>
        public static AmazonRedshiftTableDataset AmazonRedshiftTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonRedshiftTableDataset("AmazonRedshiftTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of Db2TableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The Db2 schema name. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The Db2 table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Db2TableDataset"/> instance for mocking. </returns>
        public static Db2TableDataset Db2TableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Db2TableDataset("Db2Table", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of RelationalTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The relational table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.RelationalTableDataset"/> instance for mocking. </returns>
        public static RelationalTableDataset RelationalTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new RelationalTableDataset("RelationalTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of InformixTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The Informix table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.InformixTableDataset"/> instance for mocking. </returns>
        public static InformixTableDataset InformixTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new InformixTableDataset("InformixTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of OdbcTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The ODBC table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OdbcTableDataset"/> instance for mocking. </returns>
        public static OdbcTableDataset OdbcTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new OdbcTableDataset("OdbcTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of MySqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The MySQL table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MySqlTableDataset"/> instance for mocking. </returns>
        public static MySqlTableDataset MySqlTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MySqlTableDataset("MySqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of PostgreSqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The PostgreSQL table name. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The PostgreSQL schema name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PostgreSqlTableDataset"/> instance for mocking. </returns>
        public static PostgreSqlTableDataset PostgreSqlTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PostgreSqlTableDataset("PostgreSqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of MicrosoftAccessTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The Microsoft Access table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MicrosoftAccessTableDataset"/> instance for mocking. </returns>
        public static MicrosoftAccessTableDataset MicrosoftAccessTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MicrosoftAccessTableDataset("MicrosoftAccessTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SalesforceObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="objectApiName"> The Salesforce object API name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceObjectDataset"/> instance for mocking. </returns>
        public static SalesforceObjectDataset SalesforceObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object objectApiName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceObjectDataset("SalesforceObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, objectApiName);
        }

        /// <summary> Initializes a new instance of SalesforceServiceCloudObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="objectApiName"> The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceServiceCloudObjectDataset"/> instance for mocking. </returns>
        public static SalesforceServiceCloudObjectDataset SalesforceServiceCloudObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object objectApiName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceServiceCloudObjectDataset("SalesforceServiceCloudObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, objectApiName);
        }

        /// <summary> Initializes a new instance of SybaseTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The Sybase table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SybaseTableDataset"/> instance for mocking. </returns>
        public static SybaseTableDataset SybaseTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SybaseTableDataset("SybaseTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SapBwCubeDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.SapBwCubeDataset"/> instance for mocking. </returns>
        public static SapBwCubeDataset SapBwCubeDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapBwCubeDataset("SapBwCube", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties);
        }

        /// <summary> Initializes a new instance of SapCloudForCustomerResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="path"> The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapCloudForCustomerResourceDataset"/> instance for mocking. </returns>
        public static SapCloudForCustomerResourceDataset SapCloudForCustomerResourceDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object path = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapCloudForCustomerResourceDataset("SapCloudForCustomerResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, path);
        }

        /// <summary> Initializes a new instance of SapEccResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="path"> The path of the SAP ECC OData entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapEccResourceDataset"/> instance for mocking. </returns>
        public static SapEccResourceDataset SapEccResourceDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object path = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapEccResourceDataset("SapEccResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, path);
        }

        /// <summary> Initializes a new instance of SapHanaTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of SAP HANA. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of SAP HANA. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapHanaTableDataset"/> instance for mocking. </returns>
        public static SapHanaTableDataset SapHanaTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapHanaTableDataset("SapHanaTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of SapOpenHubTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="openHubDestinationName"> The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with resultType string). </param>
        /// <param name="excludeLastRequest"> Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="baseRequestId"> The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ). </param>
        /// <returns> A new <see cref="Models.SapOpenHubTableDataset"/> instance for mocking. </returns>
        public static SapOpenHubTableDataset SapOpenHubTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object openHubDestinationName = null, object excludeLastRequest = null, object baseRequestId = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapOpenHubTableDataset("SapOpenHubTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, openHubDestinationName, excludeLastRequest, baseRequestId);
        }

        /// <summary> Initializes a new instance of SqlServerTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the SQL Server dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the SQL Server dataset. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlServerTableDataset"/> instance for mocking. </returns>
        public static SqlServerTableDataset SqlServerTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlServerTableDataset("SqlServerTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of AmazonRdsForSqlServerTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the SQL Server dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the SQL Server dataset. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForSqlServerTableDataset"/> instance for mocking. </returns>
        public static AmazonRdsForSqlServerTableDataset AmazonRdsForSqlServerTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonRdsForSqlServerTableDataset("AmazonRdsForSqlServerTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of RestResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="relativeUrl"> The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string). </param>
        /// <param name="requestMethod"> The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). </param>
        /// <param name="requestBody"> The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders"> The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). </param>
        /// <param name="paginationRules"> The pagination rules to compose next page requests. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.RestResourceDataset"/> instance for mocking. </returns>
        public static RestResourceDataset RestResourceDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object relativeUrl = null, object requestMethod = null, object requestBody = null, object additionalHeaders = null, object paginationRules = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new RestResourceDataset("RestResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, relativeUrl, requestMethod, requestBody, additionalHeaders, paginationRules);
        }

        /// <summary> Initializes a new instance of SapTableResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The name of the SAP Table. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapTableResourceDataset"/> instance for mocking. </returns>
        public static SapTableResourceDataset SapTableResourceDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapTableResourceDataset("SapTableResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SapOdpResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="context"> The context of the SAP ODP Object. Type: string (or Expression with resultType string). </param>
        /// <param name="objectName"> The name of the SAP ODP Object. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapOdpResourceDataset"/> instance for mocking. </returns>
        public static SapOdpResourceDataset SapOdpResourceDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object context = null, object objectName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapOdpResourceDataset("SapOdpResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, context, objectName);
        }

        /// <summary> Initializes a new instance of WebTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="index"> The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="path"> The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.WebTableDataset"/> instance for mocking. </returns>
        public static WebTableDataset WebTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object index = null, object path = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new WebTableDataset("WebTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, index, path);
        }

        /// <summary> Initializes a new instance of AzureSearchIndexDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="indexName"> The name of the Azure Search Index. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSearchIndexDataset"/> instance for mocking. </returns>
        public static AzureSearchIndexDataset AzureSearchIndexDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object indexName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSearchIndexDataset("AzureSearchIndex", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, indexName);
        }

        /// <summary> Initializes a new instance of HttpDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="relativeUrl"> The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType string). </param>
        /// <param name="requestMethod"> The HTTP method for the HTTP request. Type: string (or Expression with resultType string). </param>
        /// <param name="requestBody"> The body for the HTTP request. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders">
        /// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1
        /// ...
        /// request-header-name-n:request-header-value-n Type: string (or Expression with resultType string).
        /// </param>
        /// <param name="format">
        /// The format of files.
        /// Please note <see cref="DatasetStorageFormat"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroFormat"/>, <see cref="JsonFormat"/>, <see cref="OrcFormat"/>, <see cref="ParquetFormat"/> and <see cref="TextFormat"/>.
        /// </param>
        /// <param name="compression"> The data compression method used on files. </param>
        /// <returns> A new <see cref="Models.HttpDataset"/> instance for mocking. </returns>
        public static HttpDataset HttpDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object relativeUrl = null, object requestMethod = null, object requestBody = null, object additionalHeaders = null, DatasetStorageFormat format = null, DatasetCompression compression = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HttpDataset("HttpFile", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, relativeUrl, requestMethod, requestBody, additionalHeaders, format, compression);
        }

        /// <summary> Initializes a new instance of AmazonMWSObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonMWSObjectDataset"/> instance for mocking. </returns>
        public static AmazonMWSObjectDataset AmazonMWSObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonMWSObjectDataset("AmazonMWSObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of AzurePostgreSqlTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Azure PostgreSQL database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzurePostgreSqlTableDataset"/> instance for mocking. </returns>
        public static AzurePostgreSqlTableDataset AzurePostgreSqlTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzurePostgreSqlTableDataset("AzurePostgreSqlTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of ConcurObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ConcurObjectDataset"/> instance for mocking. </returns>
        public static ConcurObjectDataset ConcurObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ConcurObjectDataset("ConcurObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of CouchbaseTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CouchbaseTableDataset"/> instance for mocking. </returns>
        public static CouchbaseTableDataset CouchbaseTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CouchbaseTableDataset("CouchbaseTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of DrillTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Drill. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Drill. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DrillTableDataset"/> instance for mocking. </returns>
        public static DrillTableDataset DrillTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DrillTableDataset("DrillTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of EloquaObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.EloquaObjectDataset"/> instance for mocking. </returns>
        public static EloquaObjectDataset EloquaObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new EloquaObjectDataset("EloquaObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of GoogleBigQueryObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using database + table properties instead. </param>
        /// <param name="table"> The table name of the Google BigQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="dataset"> The database name of the Google BigQuery. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleBigQueryObjectDataset"/> instance for mocking. </returns>
        public static GoogleBigQueryObjectDataset GoogleBigQueryObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object dataset = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleBigQueryObjectDataset("GoogleBigQueryObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, dataset);
        }

        /// <summary> Initializes a new instance of GreenplumTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of Greenplum. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of Greenplum. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GreenplumTableDataset"/> instance for mocking. </returns>
        public static GreenplumTableDataset GreenplumTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new GreenplumTableDataset("GreenplumTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of HBaseObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HBaseObjectDataset"/> instance for mocking. </returns>
        public static HBaseObjectDataset HBaseObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HBaseObjectDataset("HBaseObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of HiveObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Hive. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Hive. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HiveObjectDataset"/> instance for mocking. </returns>
        public static HiveObjectDataset HiveObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HiveObjectDataset("HiveObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of HubspotObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HubspotObjectDataset"/> instance for mocking. </returns>
        public static HubspotObjectDataset HubspotObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HubspotObjectDataset("HubspotObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ImpalaObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Impala. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Impala. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ImpalaObjectDataset"/> instance for mocking. </returns>
        public static ImpalaObjectDataset ImpalaObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ImpalaObjectDataset("ImpalaObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of JiraObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.JiraObjectDataset"/> instance for mocking. </returns>
        public static JiraObjectDataset JiraObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new JiraObjectDataset("JiraObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of MagentoObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MagentoObjectDataset"/> instance for mocking. </returns>
        public static MagentoObjectDataset MagentoObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MagentoObjectDataset("MagentoObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of MariaDBTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MariaDBTableDataset"/> instance for mocking. </returns>
        public static MariaDBTableDataset MariaDBTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MariaDBTableDataset("MariaDBTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of AzureMariaDBTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMariaDBTableDataset"/> instance for mocking. </returns>
        public static AzureMariaDBTableDataset AzureMariaDBTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMariaDBTableDataset("AzureMariaDBTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of MarketoObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MarketoObjectDataset"/> instance for mocking. </returns>
        public static MarketoObjectDataset MarketoObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MarketoObjectDataset("MarketoObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of PaypalObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PaypalObjectDataset"/> instance for mocking. </returns>
        public static PaypalObjectDataset PaypalObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PaypalObjectDataset("PaypalObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of PhoenixObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Phoenix. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Phoenix. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PhoenixObjectDataset"/> instance for mocking. </returns>
        public static PhoenixObjectDataset PhoenixObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PhoenixObjectDataset("PhoenixObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of PrestoObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Presto. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Presto. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PrestoObjectDataset"/> instance for mocking. </returns>
        public static PrestoObjectDataset PrestoObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PrestoObjectDataset("PrestoObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of QuickBooksObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.QuickBooksObjectDataset"/> instance for mocking. </returns>
        public static QuickBooksObjectDataset QuickBooksObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new QuickBooksObjectDataset("QuickBooksObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ServiceNowObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ServiceNowObjectDataset"/> instance for mocking. </returns>
        public static ServiceNowObjectDataset ServiceNowObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ServiceNowObjectDataset("ServiceNowObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ShopifyObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ShopifyObjectDataset"/> instance for mocking. </returns>
        public static ShopifyObjectDataset ShopifyObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ShopifyObjectDataset("ShopifyObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SparkObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Spark. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Spark. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SparkObjectDataset"/> instance for mocking. </returns>
        public static SparkObjectDataset SparkObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SparkObjectDataset("SparkObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of SquareObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SquareObjectDataset"/> instance for mocking. </returns>
        public static SquareObjectDataset SquareObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SquareObjectDataset("SquareObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of XeroObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.XeroObjectDataset"/> instance for mocking. </returns>
        public static XeroObjectDataset XeroObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new XeroObjectDataset("XeroObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ZohoObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ZohoObjectDataset"/> instance for mocking. </returns>
        public static ZohoObjectDataset ZohoObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ZohoObjectDataset("ZohoObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of NetezzaTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Netezza. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Netezza. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.NetezzaTableDataset"/> instance for mocking. </returns>
        public static NetezzaTableDataset NetezzaTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new NetezzaTableDataset("NetezzaTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of VerticaTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> This property will be retired. Please consider using schema + table properties instead. </param>
        /// <param name="table"> The table name of the Vertica. Type: string (or Expression with resultType string). </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Vertica. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.VerticaTableDataset"/> instance for mocking. </returns>
        public static VerticaTableDataset VerticaTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null, object table = null, object schemaTypePropertiesSchema = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new VerticaTableDataset("VerticaTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName, table, schemaTypePropertiesSchema);
        }

        /// <summary> Initializes a new instance of SalesforceMarketingCloudObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceMarketingCloudObjectDataset"/> instance for mocking. </returns>
        public static SalesforceMarketingCloudObjectDataset SalesforceMarketingCloudObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceMarketingCloudObjectDataset("SalesforceMarketingCloudObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of ResponsysObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ResponsysObjectDataset"/> instance for mocking. </returns>
        public static ResponsysObjectDataset ResponsysObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ResponsysObjectDataset("ResponsysObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of DynamicsAXResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="path"> The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsAXResourceDataset"/> instance for mocking. </returns>
        public static DynamicsAXResourceDataset DynamicsAXResourceDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object path = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsAXResourceDataset("DynamicsAXResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, path);
        }

        /// <summary> Initializes a new instance of OracleServiceCloudObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleServiceCloudObjectDataset"/> instance for mocking. </returns>
        public static OracleServiceCloudObjectDataset OracleServiceCloudObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new OracleServiceCloudObjectDataset("OracleServiceCloudObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerTableDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="table"> The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerTableDataset"/> instance for mocking. </returns>
        public static AzureDataExplorerTableDataset AzureDataExplorerTableDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataExplorerTableDataset("AzureDataExplorerTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, table);
        }

        /// <summary> Initializes a new instance of GoogleAdWordsObjectDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="tableName"> The table name. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleAdWordsObjectDataset"/> instance for mocking. </returns>
        public static GoogleAdWordsObjectDataset GoogleAdWordsObjectDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object tableName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleAdWordsObjectDataset("GoogleAdWordsObject", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, tableName);
        }

        /// <summary> Initializes a new instance of SnowflakeDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="schemaTypePropertiesSchema"> The schema name of the Snowflake database. Type: string (or Expression with resultType string). </param>
        /// <param name="table"> The table name of the Snowflake database. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SnowflakeDataset"/> instance for mocking. </returns>
        public static SnowflakeDataset SnowflakeDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object schemaTypePropertiesSchema = null, object table = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SnowflakeDataset("SnowflakeTable", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, schemaTypePropertiesSchema, table);
        }

        /// <summary> Initializes a new instance of SharePointOnlineListResourceDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="listName"> The name of the SharePoint Online list. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SharePointOnlineListResourceDataset"/> instance for mocking. </returns>
        public static SharePointOnlineListResourceDataset SharePointOnlineListResourceDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object listName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SharePointOnlineListResourceDataset("SharePointOnlineListResource", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, listName);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeDataset. </summary>
        /// <param name="description"> Dataset description. </param>
        /// <param name="structure"> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </param>
        /// <param name="schema"> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="parameters"> Parameters for dataset. </param>
        /// <param name="annotations"> List of tags that can be used for describing the Dataset. </param>
        /// <param name="folder"> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="table"> The name of delta table. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> The database name of delta table. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeDataset"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeDataset AzureDatabricksDeltaLakeDataset(string description = null, object structure = null, object schema = null, LinkedServiceReference linkedServiceName = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, DatasetFolder folder = null, IDictionary<string, object> additionalProperties = null, object table = null, object database = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDatabricksDeltaLakeDataset("AzureDatabricksDeltaLakeDataset", description, structure, schema, linkedServiceName, parameters, annotations?.ToList(), folder, additionalProperties, table, database);
        }

        /// <summary> Initializes a new instance of AzureStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountKey"> The Azure key vault secret reference of accountKey in connection string. </param>
        /// <param name="sasUri"> SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="sasToken"> The Azure key vault secret reference of sasToken in sas uri. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureStorageLinkedService"/> instance for mocking. </returns>
        public static AzureStorageLinkedService AzureStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference accountKey = null, object sasUri = null, AzureKeyVaultSecretReference sasToken = null, string encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureStorageLinkedService("AzureStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, accountKey, sasUri, sasToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureBlobStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountKey"> The Azure key vault secret reference of accountKey in connection string. </param>
        /// <param name="sasUri"> SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="sasToken"> The Azure key vault secret reference of sasToken in sas uri. </param>
        /// <param name="serviceEndpoint"> Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="accountKind"> Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobStorageLinkedService"/> instance for mocking. </returns>
        public static AzureBlobStorageLinkedService AzureBlobStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference accountKey = null, object sasUri = null, AzureKeyVaultSecretReference sasToken = null, string serviceEndpoint = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object azureCloudType = null, string accountKind = null, string encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobStorageLinkedService("AzureBlobStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, accountKey, sasUri, sasToken, serviceEndpoint, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, accountKind, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureTableStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountKey"> The Azure key vault secret reference of accountKey in connection string. </param>
        /// <param name="sasUri"> SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="sasToken"> The Azure key vault secret reference of sasToken in sas uri. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureTableStorageLinkedService"/> instance for mocking. </returns>
        public static AzureTableStorageLinkedService AzureTableStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference accountKey = null, object sasUri = null, AzureKeyVaultSecretReference sasToken = null, string encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureTableStorageLinkedService("AzureTableStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, accountKey, sasUri, sasToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureSqlDWLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlDWLinkedService"/> instance for mocking. </returns>
        public static AzureSqlDWLinkedService AzureSqlDWLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object azureCloudType = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSqlDWLinkedService("AzureSqlDW", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SqlServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="userName"> The on-premises Windows authentication user name. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The on-premises Windows authentication password.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlServerLinkedService"/> instance for mocking. </returns>
        public static SqlServerLinkedService SqlServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object userName = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlServerLinkedService("SqlServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AmazonRdsForSqlServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="userName"> The on-premises Windows authentication user name. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The on-premises Windows authentication password.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForSqlServerLinkedService"/> instance for mocking. </returns>
        public static AmazonRdsForSqlServerLinkedService AmazonRdsForSqlServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object userName = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonRdsForSqlServerLinkedService("AmazonRdsForSqlServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureSqlDatabaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Database.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlDatabaseLinkedService"/> instance for mocking. </returns>
        public static AzureSqlDatabaseLinkedService AzureSqlDatabaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object azureCloudType = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSqlDatabaseLinkedService("AzureSqlDatabase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureSqlMILinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Managed Instance.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlMILinkedService"/> instance for mocking. </returns>
        public static AzureSqlMILinkedService AzureSqlMILinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object azureCloudType = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSqlMILinkedService("AzureSqlMI", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureBatchLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="accountName"> The Azure Batch account name. Type: string (or Expression with resultType string). </param>
        /// <param name="accessKey">
        /// The Azure Batch account access key.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="batchUri"> The Azure Batch URI. Type: string (or Expression with resultType string). </param>
        /// <param name="poolName"> The Azure Batch pool name. Type: string (or Expression with resultType string). </param>
        /// <param name="linkedServiceName"> The Azure Storage linked service reference. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBatchLinkedService"/> instance for mocking. </returns>
        public static AzureBatchLinkedService AzureBatchLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object accountName = null, SecretBase accessKey = null, object batchUri = null, object poolName = null, LinkedServiceReference linkedServiceName = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBatchLinkedService("AzureBatch", connectVia, description, parameters, annotations?.ToList(), additionalProperties, accountName, accessKey, batchUri, poolName, linkedServiceName, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureKeyVaultLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="baseUrl"> The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureKeyVaultLinkedService"/> instance for mocking. </returns>
        public static AzureKeyVaultLinkedService AzureKeyVaultLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object baseUrl = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureKeyVaultLinkedService("AzureKeyVault", connectVia, description, parameters, annotations?.ToList(), additionalProperties, baseUrl);
        }

        /// <summary> Initializes a new instance of CosmosDbLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountEndpoint"> The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> The name of the database. Type: string (or Expression with resultType string). </param>
        /// <param name="accountKey">
        /// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDbLinkedService"/> instance for mocking. </returns>
        public static CosmosDbLinkedService CosmosDbLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object accountEndpoint = null, object database = null, SecretBase accountKey = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CosmosDbLinkedService("CosmosDb", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, accountEndpoint, database, accountKey, encryptedCredential);
        }

        /// <summary> Initializes a new instance of DynamicsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="deploymentType"> The deployment type of the Dynamics instance. &apos;Online&apos; for Dynamics Online and &apos;OnPremisesWithIfd&apos; for Dynamics on-premises with Ifd. Type: string (or Expression with resultType string). </param>
        /// <param name="hostName"> The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="serviceUri"> The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). </param>
        /// <param name="organizationName"> The organization name of the Dynamics instance. The property is required for on-prem and required for online when there are more than one Dynamics instances associated with the user. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to connect to Dynamics server. &apos;Office365&apos; for online scenario, &apos;Ifd&apos; for on-premises with Ifd scenario, &apos;AADServicePrincipal&apos; for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> User name to access the Dynamics instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the Dynamics instance.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="servicePrincipalId"> The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredentialType"> The service principal credential type to use in Server-To-Server authentication. &apos;ServicePrincipalKey&apos; for key/secret, &apos;ServicePrincipalCert&apos; for certificate. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsLinkedService"/> instance for mocking. </returns>
        public static DynamicsLinkedService DynamicsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object deploymentType = null, object hostName = null, object port = null, object serviceUri = null, object organizationName = null, object authenticationType = null, object username = null, SecretBase password = null, object servicePrincipalId = null, object servicePrincipalCredentialType = null, SecretBase servicePrincipalCredential = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsLinkedService("Dynamics", connectVia, description, parameters, annotations?.ToList(), additionalProperties, deploymentType, hostName, port, serviceUri, organizationName, authenticationType, username, password, servicePrincipalId, servicePrincipalCredentialType, servicePrincipalCredential, encryptedCredential);
        }

        /// <summary> Initializes a new instance of DynamicsCrmLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="deploymentType"> The deployment type of the Dynamics CRM instance. &apos;Online&apos; for Dynamics CRM Online and &apos;OnPremisesWithIfd&apos; for Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string). </param>
        /// <param name="hostName"> The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="serviceUri"> The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). </param>
        /// <param name="organizationName"> The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there are more than one Dynamics CRM instances associated with the user. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to connect to Dynamics CRM server. &apos;Office365&apos; for online scenario, &apos;Ifd&apos; for on-premises with Ifd scenario, &apos;AADServicePrincipal&apos; for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the Dynamics CRM instance.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="servicePrincipalId"> The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredentialType"> A string from ServicePrincipalCredentialEnum or an expression. </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsCrmLinkedService"/> instance for mocking. </returns>
        public static DynamicsCrmLinkedService DynamicsCrmLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object deploymentType = null, object hostName = null, object port = null, object serviceUri = null, object organizationName = null, object authenticationType = null, object username = null, SecretBase password = null, object servicePrincipalId = null, object servicePrincipalCredentialType = null, SecretBase servicePrincipalCredential = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsCrmLinkedService("DynamicsCrm", connectVia, description, parameters, annotations?.ToList(), additionalProperties, deploymentType, hostName, port, serviceUri, organizationName, authenticationType, username, password, servicePrincipalId, servicePrincipalCredentialType, servicePrincipalCredential, encryptedCredential);
        }

        /// <summary> Initializes a new instance of CommonDataServiceForAppsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="deploymentType"> The deployment type of the Common Data Service for Apps instance. &apos;Online&apos; for Common Data Service for Apps Online and &apos;OnPremisesWithIfd&apos; for Common Data Service for Apps on-premises with Ifd. Type: string (or Expression with resultType string). </param>
        /// <param name="hostName"> The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online. Default is 443. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="serviceUri"> The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for on-prem. Type: string (or Expression with resultType string). </param>
        /// <param name="organizationName"> The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for online when there are more than one Common Data Service for Apps instances associated with the user. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to connect to Common Data Service for Apps server. &apos;Office365&apos; for online scenario, &apos;Ifd&apos; for on-premises with Ifd scenario. &apos;AADServicePrincipal&apos; for Server-To-Server authentication in online scenario. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the Common Data Service for Apps instance.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="servicePrincipalId"> The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredentialType"> A string from ServicePrincipalCredentialEnum or an expression. </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CommonDataServiceForAppsLinkedService"/> instance for mocking. </returns>
        public static CommonDataServiceForAppsLinkedService CommonDataServiceForAppsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object deploymentType = null, object hostName = null, object port = null, object serviceUri = null, object organizationName = null, object authenticationType = null, object username = null, SecretBase password = null, object servicePrincipalId = null, object servicePrincipalCredentialType = null, SecretBase servicePrincipalCredential = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CommonDataServiceForAppsLinkedService("CommonDataServiceForApps", connectVia, description, parameters, annotations?.ToList(), additionalProperties, deploymentType, hostName, port, serviceUri, organizationName, authenticationType, username, password, servicePrincipalId, servicePrincipalCredentialType, servicePrincipalCredential, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HDInsightLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="clusterUri"> HDInsight cluster URI. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> HDInsight cluster user name. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// HDInsight cluster password.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="linkedServiceName"> The Azure Storage linked service reference. </param>
        /// <param name="hcatalogLinkedServiceName"> A reference to the Azure SQL linked service that points to the HCatalog database. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="isEspEnabled"> Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean. </param>
        /// <param name="fileSystem"> Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HDInsightLinkedService"/> instance for mocking. </returns>
        public static HDInsightLinkedService HDInsightLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object clusterUri = null, object userName = null, SecretBase password = null, LinkedServiceReference linkedServiceName = null, LinkedServiceReference hcatalogLinkedServiceName = null, object encryptedCredential = null, object isEspEnabled = null, object fileSystem = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HDInsightLinkedService("HDInsight", connectVia, description, parameters, annotations?.ToList(), additionalProperties, clusterUri, userName, password, linkedServiceName, hcatalogLinkedServiceName, encryptedCredential, isEspEnabled, fileSystem);
        }

        /// <summary> Initializes a new instance of FileServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> Host name of the server. Type: string (or Expression with resultType string). </param>
        /// <param name="userId"> User ID to logon the server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to logon the server.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.FileServerLinkedService"/> instance for mocking. </returns>
        public static FileServerLinkedService FileServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object userId = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new FileServerLinkedService("FileServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, userId, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureFileStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> Host name of the server. Type: string (or Expression with resultType string). </param>
        /// <param name="userId"> User ID to logon the server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to logon the server.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="accountKey"> The Azure key vault secret reference of accountKey in connection string. </param>
        /// <param name="sasUri"> SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="sasToken"> The Azure key vault secret reference of sasToken in sas uri. </param>
        /// <param name="fileShare"> The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string). </param>
        /// <param name="snapshot"> The azure file share snapshot version. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureFileStorageLinkedService"/> instance for mocking. </returns>
        public static AzureFileStorageLinkedService AzureFileStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object userId = null, SecretBase password = null, object connectionString = null, AzureKeyVaultSecretReference accountKey = null, object sasUri = null, AzureKeyVaultSecretReference sasToken = null, object fileShare = null, object snapshot = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureFileStorageLinkedService("AzureFileStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, userId, password, connectionString, accountKey, sasUri, sasToken, fileShare, snapshot, encryptedCredential);
        }

        /// <summary> Initializes a new instance of GoogleCloudStorageLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="accessKeyId"> The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). </param>
        /// <param name="secretAccessKey">
        /// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="serviceUrl"> This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleCloudStorageLinkedService"/> instance for mocking. </returns>
        public static GoogleCloudStorageLinkedService GoogleCloudStorageLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object accessKeyId = null, SecretBase secretAccessKey = null, object serviceUrl = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleCloudStorageLinkedService("GoogleCloudStorage", connectVia, description, parameters, annotations?.ToList(), additionalProperties, accessKeyId, secretAccessKey, serviceUrl, encryptedCredential);
        }

        /// <summary> Initializes a new instance of OracleLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleLinkedService"/> instance for mocking. </returns>
        public static OracleLinkedService OracleLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new OracleLinkedService("Oracle", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AmazonRdsForOracleLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password">
        /// The Azure key vault secret reference of password in connection string.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForOracleLinkedService"/> instance for mocking. </returns>
        public static AmazonRdsForOracleLinkedService AmazonRdsForOracleLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonRdsForOracleLinkedService("AmazonRdsForOracle", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureMySqlLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMySqlLinkedService"/> instance for mocking. </returns>
        public static AzureMySqlLinkedService AzureMySqlLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMySqlLinkedService("AzureMySql", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MySqlLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MySqlLinkedService"/> instance for mocking. </returns>
        public static MySqlLinkedService MySqlLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MySqlLinkedService("MySql", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of PostgreSqlLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PostgreSqlLinkedService"/> instance for mocking. </returns>
        public static PostgreSqlLinkedService PostgreSqlLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PostgreSqlLinkedService("PostgreSql", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SybaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Server name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> Database name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="schema"> Schema name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> AuthenticationType to be used for connection. </param>
        /// <param name="username"> Username for authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SybaseLinkedService"/> instance for mocking. </returns>
        public static SybaseLinkedService SybaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object server = null, object database = null, object schema = null, SybaseAuthenticationType? authenticationType = null, object username = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SybaseLinkedService("Sybase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, database, schema, authenticationType, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of Db2LinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection and certificateCommonName property. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="server"> Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> AuthenticationType to be used for connection. It is mutually exclusive with connectionString property. </param>
        /// <param name="username"> Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="packageCollection"> Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="certificateCommonName"> Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. It is mutually exclusive with connectionString property. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Db2LinkedService"/> instance for mocking. </returns>
        public static Db2LinkedService Db2LinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object server = null, object database = null, Db2AuthenticationType? authenticationType = null, object username = null, SecretBase password = null, object packageCollection = null, object certificateCommonName = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Db2LinkedService("Db2", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, server, database, authenticationType, username, password, packageCollection, certificateCommonName, encryptedCredential);
        }

        /// <summary> Initializes a new instance of TeradataLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="server"> Server name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> AuthenticationType to be used for connection. </param>
        /// <param name="username"> Username for authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TeradataLinkedService"/> instance for mocking. </returns>
        public static TeradataLinkedService TeradataLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object server = null, TeradataAuthenticationType? authenticationType = null, object username = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new TeradataLinkedService("Teradata", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, server, authenticationType, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureMLLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="mlEndpoint"> The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="apiKey">
        /// The API key for accessing the Azure ML model endpoint.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="updateResourceEndpoint"> The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio web service.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMLLinkedService"/> instance for mocking. </returns>
        public static AzureMLLinkedService AzureMLLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object mlEndpoint = null, SecretBase apiKey = null, object updateResourceEndpoint = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMLLinkedService("AzureML", connectVia, description, parameters, annotations?.ToList(), additionalProperties, mlEndpoint, apiKey, updateResourceEndpoint, servicePrincipalId, servicePrincipalKey, tenant, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureMLServiceLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="subscriptionId"> Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string). </param>
        /// <param name="resourceGroupName"> Azure ML Service workspace resource group name. Type: string (or Expression with resultType string). </param>
        /// <param name="mlWorkspaceName"> Azure ML Service workspace name. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMLServiceLinkedService"/> instance for mocking. </returns>
        public static AzureMLServiceLinkedService AzureMLServiceLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object subscriptionId = null, object resourceGroupName = null, object mlWorkspaceName = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMLServiceLinkedService("AzureMLService", connectVia, description, parameters, annotations?.ToList(), additionalProperties, subscriptionId, resourceGroupName, mlWorkspaceName, servicePrincipalId, servicePrincipalKey, tenant, encryptedCredential);
        }

        /// <summary> Initializes a new instance of OdbcLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). </param>
        /// <param name="credential">
        /// The access credential portion of the connection string specified in driver-specific property-value format.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="userName"> User name for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Basic authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OdbcLinkedService"/> instance for mocking. </returns>
        public static OdbcLinkedService OdbcLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object authenticationType = null, SecretBase credential = null, object userName = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new OdbcLinkedService("Odbc", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, authenticationType, credential, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of InformixLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). </param>
        /// <param name="credential">
        /// The access credential portion of the connection string specified in driver-specific property-value format.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="userName"> User name for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Basic authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.InformixLinkedService"/> instance for mocking. </returns>
        public static InformixLinkedService InformixLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object authenticationType = null, SecretBase credential = null, object userName = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new InformixLinkedService("Informix", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, authenticationType, credential, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MicrosoftAccessLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The non-access credential portion of the connection string as well as an optional encrypted credential. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic. Type: string (or Expression with resultType string). </param>
        /// <param name="credential">
        /// The access credential portion of the connection string specified in driver-specific property-value format.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="userName"> User name for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Basic authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MicrosoftAccessLinkedService"/> instance for mocking. </returns>
        public static MicrosoftAccessLinkedService MicrosoftAccessLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object authenticationType = null, SecretBase credential = null, object userName = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MicrosoftAccessLinkedService("MicrosoftAccess", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, authenticationType, credential, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HdfsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> User name for Windows authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Windows authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <returns> A new <see cref="Models.HdfsLinkedService"/> instance for mocking. </returns>
        public static HdfsLinkedService HdfsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, object authenticationType = null, object encryptedCredential = null, object userName = null, SecretBase password = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HdfsLinkedService("Hdfs", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, authenticationType, encryptedCredential, userName, password);
        }

        /// <summary> Initializes a new instance of ODataLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> The URL of the OData service endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the OData service. </param>
        /// <param name="userName"> User name of the OData service. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password of the OData service.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="aadResourceId"> Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string). </param>
        /// <param name="aadServicePrincipalCredentialType"> Specify the credential type (key or cert) is used for service principal. </param>
        /// <param name="servicePrincipalKey">
        /// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="servicePrincipalEmbeddedCert">
        /// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="servicePrincipalEmbeddedCertPassword">
        /// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication. Type: string (or Expression with resultType string).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ODataLinkedService"/> instance for mocking. </returns>
        public static ODataLinkedService ODataLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, ODataAuthenticationType? authenticationType = null, object userName = null, SecretBase password = null, object tenant = null, object servicePrincipalId = null, object azureCloudType = null, object aadResourceId = null, ODataAadServicePrincipalCredentialType? aadServicePrincipalCredentialType = null, SecretBase servicePrincipalKey = null, SecretBase servicePrincipalEmbeddedCert = null, SecretBase servicePrincipalEmbeddedCertPassword = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ODataLinkedService("OData", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, authenticationType, userName, password, tenant, servicePrincipalId, azureCloudType, aadResourceId, aadServicePrincipalCredentialType, servicePrincipalKey, servicePrincipalEmbeddedCert, servicePrincipalEmbeddedCertPassword, encryptedCredential);
        }

        /// <summary> Initializes a new instance of WebLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="typeProperties">
        /// Web linked service properties.
        /// Please note <see cref="WebLinkedServiceTypeProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="WebAnonymousAuthentication"/>, <see cref="WebBasicAuthentication"/> and <see cref="WebClientCertificateAuthentication"/>.
        /// </param>
        /// <returns> A new <see cref="Models.WebLinkedService"/> instance for mocking. </returns>
        public static WebLinkedService WebLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, WebLinkedServiceTypeProperties typeProperties = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new WebLinkedService("Web", connectVia, description, parameters, annotations?.ToList(), additionalProperties, typeProperties);
        }

        /// <summary> Initializes a new instance of WebLinkedServiceTypeProperties. </summary>
        /// <param name="url"> The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the web table source. </param>
        /// <returns> A new <see cref="Models.WebLinkedServiceTypeProperties"/> instance for mocking. </returns>
        public static WebLinkedServiceTypeProperties WebLinkedServiceTypeProperties(object url = null, string authenticationType = null)
        {
            return new WebLinkedServiceTypeProperties(url, authenticationType);
        }

        /// <summary> Initializes a new instance of WebAnonymousAuthentication. </summary>
        /// <param name="url"> The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.WebAnonymousAuthentication"/> instance for mocking. </returns>
        public static WebAnonymousAuthentication WebAnonymousAuthentication(object url = null)
        {
            return new WebAnonymousAuthentication(url, "Anonymous");
        }

        /// <summary> Initializes a new instance of WebBasicAuthentication. </summary>
        /// <param name="url"> The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string). </param>
        /// <param name="username"> User name for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <returns> A new <see cref="Models.WebBasicAuthentication"/> instance for mocking. </returns>
        public static WebBasicAuthentication WebBasicAuthentication(object url = null, object username = null, SecretBase password = null)
        {
            return new WebBasicAuthentication(url, "Basic", username, password);
        }

        /// <summary> Initializes a new instance of WebClientCertificateAuthentication. </summary>
        /// <param name="url"> The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string). </param>
        /// <param name="pfx">
        /// Base64-encoded contents of a PFX file.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="password">
        /// Password for the PFX file.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <returns> A new <see cref="Models.WebClientCertificateAuthentication"/> instance for mocking. </returns>
        public static WebClientCertificateAuthentication WebClientCertificateAuthentication(object url = null, SecretBase pfx = null, SecretBase password = null)
        {
            return new WebClientCertificateAuthentication(url, "ClientCertificate", pfx, password);
        }

        /// <summary> Initializes a new instance of CassandraLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> Host name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> AuthenticationType to be used for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The port for the connection. Type: integer (or Expression with resultType integer). </param>
        /// <param name="username"> Username for authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CassandraLinkedService"/> instance for mocking. </returns>
        public static CassandraLinkedService CassandraLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object authenticationType = null, object port = null, object username = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CassandraLinkedService("Cassandra", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, authenticationType, port, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MongoDbLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the MongoDB database. </param>
        /// <param name="databaseName"> The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> Username for authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="authSource"> Database to verify the username and password. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDbLinkedService"/> instance for mocking. </returns>
        public static MongoDbLinkedService MongoDbLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object server = null, MongoDbAuthenticationType? authenticationType = null, object databaseName = null, object username = null, SecretBase password = null, object authSource = null, object port = null, object enableSsl = null, object allowSelfSignedServerCert = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbLinkedService("MongoDb", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, authenticationType, databaseName, username, password, authSource, port, enableSsl, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MongoDbAtlasLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="database"> The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDbAtlasLinkedService"/> instance for mocking. </returns>
        public static MongoDbAtlasLinkedService MongoDbAtlasLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object database = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbAtlasLinkedService("MongoDbAtlas", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, database);
        }

        /// <summary> Initializes a new instance of MongoDbV2LinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="database"> The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MongoDbV2LinkedService"/> instance for mocking. </returns>
        public static MongoDbV2LinkedService MongoDbV2LinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object database = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbV2LinkedService("MongoDbV2", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, database);
        }

        /// <summary> Initializes a new instance of CosmosDbMongoDbApiLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="database"> The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDbMongoDbApiLinkedService"/> instance for mocking. </returns>
        public static CosmosDbMongoDbApiLinkedService CosmosDbMongoDbApiLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object database = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CosmosDbMongoDbApiLinkedService("CosmosDbMongoDbApi", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, database);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dataLakeStoreUri"> Data Lake Store service URI. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The Key of the application used to authenticate against the Azure Data Lake Store account.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="accountName"> Data Lake Store account name. Type: string (or Expression with resultType string). </param>
        /// <param name="subscriptionId"> Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string). </param>
        /// <param name="resourceGroupName"> Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreLinkedService"/> instance for mocking. </returns>
        public static AzureDataLakeStoreLinkedService AzureDataLakeStoreLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object dataLakeStoreUri = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object azureCloudType = null, object accountName = null, object subscriptionId = null, object resourceGroupName = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataLakeStoreLinkedService("AzureDataLakeStore", connectVia, description, parameters, annotations?.ToList(), additionalProperties, dataLakeStoreUri, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, accountName, subscriptionId, resourceGroupName, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureBlobFSLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string). </param>
        /// <param name="accountKey"> Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredentialType"> The service principal credential type to use in Server-To-Server authentication. &apos;ServicePrincipalKey&apos; for key/secret, &apos;ServicePrincipalCert&apos; for certificate. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &apos;ServicePrincipalKey&apos;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &apos;ServicePrincipalCert&apos;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSLinkedService"/> instance for mocking. </returns>
        public static AzureBlobFSLinkedService AzureBlobFSLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, object accountKey = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object azureCloudType = null, object servicePrincipalCredentialType = null, SecretBase servicePrincipalCredential = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobFSLinkedService("AzureBlobFS", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, accountKey, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, servicePrincipalCredentialType, servicePrincipalCredential, encryptedCredential);
        }

        /// <summary> Initializes a new instance of Office365LinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="office365TenantId"> Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalTenantId"> Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> Specify the application&apos;s client ID. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// Specify the application&apos;s key.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Office365LinkedService"/> instance for mocking. </returns>
        public static Office365LinkedService Office365LinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object office365TenantId = null, object servicePrincipalTenantId = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new Office365LinkedService("Office365", connectVia, description, parameters, annotations?.ToList(), additionalProperties, office365TenantId, servicePrincipalTenantId, servicePrincipalId, servicePrincipalKey, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SalesforceLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="environmentUrl"> The URL of Salesforce instance. Default is &apos;https://login.salesforce.com&apos;. To copy data from sandbox, specify &apos;https://test.salesforce.com&apos;. To copy data from custom domain, specify, for example, &apos;https://[domain].my.salesforce.com&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication of the Salesforce instance.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="securityToken">
        /// The security token is optional to remotely access Salesforce instance.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="apiVersion"> The Salesforce API version used in ADF. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceLinkedService"/> instance for mocking. </returns>
        public static SalesforceLinkedService SalesforceLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object environmentUrl = null, object username = null, SecretBase password = null, SecretBase securityToken = null, object apiVersion = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceLinkedService("Salesforce", connectVia, description, parameters, annotations?.ToList(), additionalProperties, environmentUrl, username, password, securityToken, apiVersion, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SalesforceServiceCloudLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="environmentUrl"> The URL of Salesforce Service Cloud instance. Default is &apos;https://login.salesforce.com&apos;. To copy data from sandbox, specify &apos;https://test.salesforce.com&apos;. To copy data from custom domain, specify, for example, &apos;https://[domain].my.salesforce.com&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication of the Salesforce instance.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="securityToken">
        /// The security token is optional to remotely access Salesforce instance.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="apiVersion"> The Salesforce API version used in ADF. Type: string (or Expression with resultType string). </param>
        /// <param name="extendedProperties"> Extended properties appended to the connection string. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceServiceCloudLinkedService"/> instance for mocking. </returns>
        public static SalesforceServiceCloudLinkedService SalesforceServiceCloudLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object environmentUrl = null, object username = null, SecretBase password = null, SecretBase securityToken = null, object apiVersion = null, object extendedProperties = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceServiceCloudLinkedService("SalesforceServiceCloud", connectVia, description, parameters, annotations?.ToList(), additionalProperties, environmentUrl, username, password, securityToken, apiVersion, extendedProperties, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapCloudForCustomerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> The URL of SAP Cloud for Customer OData API. For example, &apos;[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapCloudForCustomerLinkedService"/> instance for mocking. </returns>
        public static SapCloudForCustomerLinkedService SapCloudForCustomerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, object username = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapCloudForCustomerLinkedService("SapCloudForCustomer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapEccLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> The URL of SAP ECC OData API. For example, &apos;[https://hostname:port/sap/opu/odata/sap/servicename/]&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username for Basic authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password for Basic authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Either encryptedCredential or username/password must be provided. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapEccLinkedService"/> instance for mocking. </returns>
        public static SapEccLinkedService SapEccLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, string url = null, string username = null, SecretBase password = null, string encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapEccLinkedService("SapEcc", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, username, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapOpenHubLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with resultType string). </param>
        /// <param name="systemNumber"> System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). </param>
        /// <param name="language"> Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression with resultType string). </param>
        /// <param name="systemId"> SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP BW server where the open hub destination is located.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="messageServer"> The hostname of the SAP Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="messageServerService"> The service name or port number of the Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="logonGroup"> The Logon Group for the SAP System. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapOpenHubLinkedService"/> instance for mocking. </returns>
        public static SapOpenHubLinkedService SapOpenHubLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object server = null, object systemNumber = null, object clientId = null, object language = null, object systemId = null, object userName = null, SecretBase password = null, object messageServer = null, object messageServerService = null, object logonGroup = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapOpenHubLinkedService("SapOpenHub", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, systemNumber, clientId, language, systemId, userName, password, messageServer, messageServerService, logonGroup, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapOdpLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="systemNumber"> System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). </param>
        /// <param name="language"> Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string). </param>
        /// <param name="systemId"> SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> Username to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP server where the table is located.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="messageServer"> The hostname of the SAP Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="messageServerService"> The service name or port number of the Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="sncMode"> SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string). </param>
        /// <param name="sncMyName"> Initiator&apos;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncPartnerName"> Communication partner&apos;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncLibraryPath"> External security product&apos;s library to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncQop"> SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string). </param>
        /// <param name="x509CertificatePath"> SNC X509 certificate file path. Type: string (or Expression with resultType string). </param>
        /// <param name="logonGroup"> The Logon Group for the SAP System. Type: string (or Expression with resultType string). </param>
        /// <param name="subscriberName"> The subscriber name. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapOdpLinkedService"/> instance for mocking. </returns>
        public static SapOdpLinkedService SapOdpLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object server = null, object systemNumber = null, object clientId = null, object language = null, object systemId = null, object userName = null, SecretBase password = null, object messageServer = null, object messageServerService = null, object sncMode = null, object sncMyName = null, object sncPartnerName = null, object sncLibraryPath = null, object sncQop = null, object x509CertificatePath = null, object logonGroup = null, object subscriberName = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapOdpLinkedService("SapOdp", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, systemNumber, clientId, language, systemId, userName, password, messageServer, messageServerService, sncMode, sncMyName, sncPartnerName, sncLibraryPath, sncQop, x509CertificatePath, logonGroup, subscriberName, encryptedCredential);
        }

        /// <summary> Initializes a new instance of RestServiceLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> The base URL of the REST service. </param>
        /// <param name="enableServerCertificateValidation"> Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="authenticationType"> Type of authentication used to connect to the REST service. </param>
        /// <param name="userName"> The user name used in Basic authentication type. </param>
        /// <param name="password">
        /// The password used in Basic authentication type.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="servicePrincipalId"> The application&apos;s client ID used in AadServicePrincipal authentication type. </param>
        /// <param name="servicePrincipalKey">
        /// The application&apos;s key used in AadServicePrincipal authentication type.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application resides. </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="aadResourceId"> The resource you are requesting authorization to use. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> The client ID associated with your application. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret associated with your application.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tokenEndpoint"> The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string). </param>
        /// <param name="resource"> The target service or resource to which the access will be requested. Type: string (or Expression with resultType string). </param>
        /// <param name="scope"> The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.RestServiceLinkedService"/> instance for mocking. </returns>
        public static RestServiceLinkedService RestServiceLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, object enableServerCertificateValidation = null, RestServiceAuthenticationType authenticationType = default, object userName = null, SecretBase password = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object azureCloudType = null, object aadResourceId = null, object encryptedCredential = null, object clientId = null, SecretBase clientSecret = null, object tokenEndpoint = null, object resource = null, object scope = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new RestServiceLinkedService("RestService", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, enableServerCertificateValidation, authenticationType, userName, password, servicePrincipalId, servicePrincipalKey, tenant, azureCloudType, aadResourceId, encryptedCredential, clientId, clientSecret, tokenEndpoint, resource, scope);
        }

        /// <summary> Initializes a new instance of TeamDeskLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="authenticationType"> The authentication type to use. </param>
        /// <param name="url"> The url to connect TeamDesk source. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> The username of the TeamDesk source. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password of the TeamDesk source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="apiToken">
        /// The api token for the TeamDesk source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TeamDeskLinkedService"/> instance for mocking. </returns>
        public static TeamDeskLinkedService TeamDeskLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, TeamDeskAuthenticationType authenticationType = default, object url = null, object userName = null, SecretBase password = null, SecretBase apiToken = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new TeamDeskLinkedService("TeamDesk", connectVia, description, parameters, annotations?.ToList(), additionalProperties, authenticationType, url, userName, password, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of QuickbaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> The url to connect Quickbase source. Type: string (or Expression with resultType string). </param>
        /// <param name="userToken">
        /// The user token for the Quickbase source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.QuickbaseLinkedService"/> instance for mocking. </returns>
        public static QuickbaseLinkedService QuickbaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, SecretBase userToken = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new QuickbaseLinkedService("Quickbase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, userToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SmartsheetLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="apiToken">
        /// The api token for the Smartsheet source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SmartsheetLinkedService"/> instance for mocking. </returns>
        public static SmartsheetLinkedService SmartsheetLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, SecretBase apiToken = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SmartsheetLinkedService("Smartsheet", connectVia, description, parameters, annotations?.ToList(), additionalProperties, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ZendeskLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="authenticationType"> The authentication type to use. </param>
        /// <param name="url"> The url to connect Zendesk source. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> The username of the Zendesk source. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password of the Zendesk source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="apiToken">
        /// The api token for the Zendesk source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ZendeskLinkedService"/> instance for mocking. </returns>
        public static ZendeskLinkedService ZendeskLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, ZendeskAuthenticationType authenticationType = default, object url = null, object userName = null, SecretBase password = null, SecretBase apiToken = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ZendeskLinkedService("Zendesk", connectVia, description, parameters, annotations?.ToList(), additionalProperties, authenticationType, url, userName, password, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of DataworldLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="apiToken">
        /// The api token for the Dataworld source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DataworldLinkedService"/> instance for mocking. </returns>
        public static DataworldLinkedService DataworldLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, SecretBase apiToken = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DataworldLinkedService("Dataworld", connectVia, description, parameters, annotations?.ToList(), additionalProperties, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AppFiguresLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="userName"> The username of the Appfigures source. </param>
        /// <param name="password">
        /// The password of the AppFigures source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="clientKey">
        /// The client key for the AppFigures source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <returns> A new <see cref="Models.AppFiguresLinkedService"/> instance for mocking. </returns>
        public static AppFiguresLinkedService AppFiguresLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object userName = null, SecretBase password = null, SecretBase clientKey = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AppFiguresLinkedService("AppFigures", connectVia, description, parameters, annotations?.ToList(), additionalProperties, userName, password, clientKey);
        }

        /// <summary> Initializes a new instance of AsanaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="apiToken">
        /// The api token for the Asana source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AsanaLinkedService"/> instance for mocking. </returns>
        public static AsanaLinkedService AsanaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, SecretBase apiToken = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AsanaLinkedService("Asana", connectVia, description, parameters, annotations?.ToList(), additionalProperties, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of TwilioLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="userName"> The Account SID of Twilio service. </param>
        /// <param name="password">
        /// The auth token of Twilio service.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <returns> A new <see cref="Models.TwilioLinkedService"/> instance for mocking. </returns>
        public static TwilioLinkedService TwilioLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object userName = null, SecretBase password = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new TwilioLinkedService("Twilio", connectVia, description, parameters, annotations?.ToList(), additionalProperties, userName, password);
        }

        /// <summary> Initializes a new instance of GoogleSheetsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="apiToken">
        /// The api token for the GoogleSheets source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleSheetsLinkedService"/> instance for mocking. </returns>
        public static GoogleSheetsLinkedService GoogleSheetsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, SecretBase apiToken = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleSheetsLinkedService("GoogleSheets", connectVia, description, parameters, annotations?.ToList(), additionalProperties, apiToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AmazonS3LinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="authenticationType"> The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression with resultType string). </param>
        /// <param name="accessKeyId"> The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with resultType string). </param>
        /// <param name="secretAccessKey">
        /// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="serviceUrl"> This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you want to try a different service endpoint or want to switch between https and http. Type: string (or Expression with resultType string). </param>
        /// <param name="sessionToken">
        /// The session token for the S3 temporary security credential.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3LinkedService"/> instance for mocking. </returns>
        public static AmazonS3LinkedService AmazonS3LinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object authenticationType = null, object accessKeyId = null, SecretBase secretAccessKey = null, object serviceUrl = null, SecretBase sessionToken = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonS3LinkedService("AmazonS3", connectVia, description, parameters, annotations?.ToList(), additionalProperties, authenticationType, accessKeyId, secretAccessKey, serviceUrl, sessionToken, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AmazonRedshiftLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> The name of the Amazon Redshift server. Type: string (or Expression with resultType string). </param>
        /// <param name="username"> The username of the Amazon Redshift source. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// The password of the Amazon Redshift source.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="database"> The database name of the Amazon Redshift source. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type: integer (or Expression with resultType integer). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRedshiftLinkedService"/> instance for mocking. </returns>
        public static AmazonRedshiftLinkedService AmazonRedshiftLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object server = null, object username = null, SecretBase password = null, object database = null, object port = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonRedshiftLinkedService("AmazonRedshift", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, username, password, database, port, encryptedCredential);
        }

        /// <summary> Initializes a new instance of CustomDataSourceLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="typeProperties"> Custom linked service properties. </param>
        /// <returns> A new <see cref="Models.CustomDataSourceLinkedService"/> instance for mocking. </returns>
        public static CustomDataSourceLinkedService CustomDataSourceLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object typeProperties = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CustomDataSourceLinkedService("CustomDataSource", connectVia, description, parameters, annotations?.ToList(), additionalProperties, typeProperties);
        }

        /// <summary> Initializes a new instance of AzureSearchLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> URL for Azure Search service. Type: string (or Expression with resultType string). </param>
        /// <param name="key">
        /// Admin Key for Azure Search service
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSearchLinkedService"/> instance for mocking. </returns>
        public static AzureSearchLinkedService AzureSearchLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, SecretBase key = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSearchLinkedService("AzureSearch", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, key, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HttpLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the HTTP server. </param>
        /// <param name="userName"> User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="embeddedCertData"> Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string). </param>
        /// <param name="certThumbprint"> Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with ClientCertificate authentication, either CertThumbprint or EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="enableServerCertificateValidation"> If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.HttpLinkedService"/> instance for mocking. </returns>
        public static HttpLinkedService HttpLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, HttpAuthenticationType? authenticationType = null, object userName = null, SecretBase password = null, object embeddedCertData = null, object certThumbprint = null, object encryptedCredential = null, object enableServerCertificateValidation = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HttpLinkedService("HttpServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, authenticationType, userName, password, embeddedCertData, certThumbprint, encryptedCredential, enableServerCertificateValidation);
        }

        /// <summary> Initializes a new instance of FtpServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> Host name of the FTP server. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the FTP server. </param>
        /// <param name="userName"> Username to logon the FTP server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to logon the FTP server.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="enableSsl"> If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="enableServerCertificateValidation"> If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.FtpServerLinkedService"/> instance for mocking. </returns>
        public static FtpServerLinkedService FtpServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object port = null, FtpAuthenticationType? authenticationType = null, object userName = null, SecretBase password = null, object encryptedCredential = null, object enableSsl = null, object enableServerCertificateValidation = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new FtpServerLinkedService("FtpServer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, authenticationType, userName, password, encryptedCredential, enableSsl, enableServerCertificateValidation);
        }

        /// <summary> Initializes a new instance of SftpServerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The SFTP server host name. Type: string (or Expression with resultType string). </param>
        /// <param name="port"> The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the FTP server. </param>
        /// <param name="userName"> The username used to log on to the SFTP server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to logon the SFTP server for Basic authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="privateKeyPath"> The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string). </param>
        /// <param name="privateKeyContent">
        /// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="passPhrase">
        /// The password to decrypt the SSH private key if the SSH private key is encrypted.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="skipHostKeyValidation"> If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="hostKeyFingerprint"> The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SftpServerLinkedService"/> instance for mocking. </returns>
        public static SftpServerLinkedService SftpServerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object port = null, SftpAuthenticationType? authenticationType = null, object userName = null, SecretBase password = null, object encryptedCredential = null, object privateKeyPath = null, SecretBase privateKeyContent = null, SecretBase passPhrase = null, object skipHostKeyValidation = null, object hostKeyFingerprint = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SftpServerLinkedService("Sftp", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, authenticationType, userName, password, encryptedCredential, privateKeyPath, privateKeyContent, passPhrase, skipHostKeyValidation, hostKeyFingerprint);
        }

        /// <summary> Initializes a new instance of SapBWLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Host name of the SAP BW instance. Type: string (or Expression with resultType string). </param>
        /// <param name="systemNumber"> System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> Username to access the SAP BW server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP BW server.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapBWLinkedService"/> instance for mocking. </returns>
        public static SapBWLinkedService SapBWLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object server = null, object systemNumber = null, object clientId = null, object userName = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapBWLinkedService("SapBW", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, systemNumber, clientId, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapHanaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="server"> Host name of the SAP HANA server. Type: string (or Expression with resultType string). </param>
        /// <param name="authenticationType"> The authentication type to be used to connect to the SAP HANA server. </param>
        /// <param name="userName"> Username to access the SAP HANA server. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP HANA server.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapHanaLinkedService"/> instance for mocking. </returns>
        public static SapHanaLinkedService SapHanaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, object server = null, SapHanaAuthenticationType? authenticationType = null, object userName = null, SecretBase password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapHanaLinkedService("SapHana", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, server, authenticationType, userName, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AmazonMWSLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com). </param>
        /// <param name="marketplaceID"> The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2). </param>
        /// <param name="sellerID"> The Amazon seller ID. </param>
        /// <param name="mwsAuthToken">
        /// The Amazon MWS authentication token.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="accessKeyId"> The access key id used to access data. </param>
        /// <param name="secretKey">
        /// The secret key used to access data.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonMWSLinkedService"/> instance for mocking. </returns>
        public static AmazonMWSLinkedService AmazonMWSLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object endpoint = null, object marketplaceID = null, object sellerID = null, SecretBase mwsAuthToken = null, object accessKeyId = null, SecretBase secretKey = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonMWSLinkedService("AmazonMWS", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, marketplaceID, sellerID, mwsAuthToken, accessKeyId, secretKey, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzurePostgreSqlLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzurePostgreSqlLinkedService"/> instance for mocking. </returns>
        public static AzurePostgreSqlLinkedService AzurePostgreSqlLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzurePostgreSqlLinkedService("AzurePostgreSql", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ConcurLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="clientId"> Application client_id supplied by Concur App Management. </param>
        /// <param name="username"> The user name that you use to access Concur Service. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the username field.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ConcurLinkedService"/> instance for mocking. </returns>
        public static ConcurLinkedService ConcurLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionProperties = null, object clientId = null, object username = null, SecretBase password = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ConcurLinkedService("Concur", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, clientId, username, password, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of CouchbaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="credString"> The Azure key vault secret reference of credString in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CouchbaseLinkedService"/> instance for mocking. </returns>
        public static CouchbaseLinkedService CouchbaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference credString = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new CouchbaseLinkedService("Couchbase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, credString, encryptedCredential);
        }

        /// <summary> Initializes a new instance of DrillLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="pwd"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DrillLinkedService"/> instance for mocking. </returns>
        public static DrillLinkedService DrillLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference pwd = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DrillLinkedService("Drill", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, pwd, encryptedCredential);
        }

        /// <summary> Initializes a new instance of EloquaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the Eloqua server. (i.e. eloqua.example.com). </param>
        /// <param name="username"> The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice). </param>
        /// <param name="password">
        /// The password corresponding to the user name.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.EloquaLinkedService"/> instance for mocking. </returns>
        public static EloquaLinkedService EloquaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object endpoint = null, object username = null, SecretBase password = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new EloquaLinkedService("Eloqua", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, username, password, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of GoogleBigQueryLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="project"> The default BigQuery project to query against. </param>
        /// <param name="additionalProjects"> A comma-separated list of public BigQuery projects to access. </param>
        /// <param name="requestGoogleDriveScope"> Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine BigQuery data with data from Google Drive. The default value is false. </param>
        /// <param name="authenticationType"> The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR. </param>
        /// <param name="refreshToken">
        /// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="clientId"> The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret of the google application used to acquire the refresh token.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="email"> The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. </param>
        /// <param name="keyFilePath"> The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleBigQueryLinkedService"/> instance for mocking. </returns>
        public static GoogleBigQueryLinkedService GoogleBigQueryLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object project = null, object additionalProjects = null, object requestGoogleDriveScope = null, GoogleBigQueryAuthenticationType authenticationType = default, SecretBase refreshToken = null, object clientId = null, SecretBase clientSecret = null, object email = null, object keyFilePath = null, object trustedCertPath = null, object useSystemTrustStore = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleBigQueryLinkedService("GoogleBigQuery", connectVia, description, parameters, annotations?.ToList(), additionalProperties, project, additionalProjects, requestGoogleDriveScope, authenticationType, refreshToken, clientId, clientSecret, email, keyFilePath, trustedCertPath, useSystemTrustStore, encryptedCredential);
        }

        /// <summary> Initializes a new instance of GreenplumLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="pwd"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GreenplumLinkedService"/> instance for mocking. </returns>
        public static GreenplumLinkedService GreenplumLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference pwd = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new GreenplumLinkedService("Greenplum", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, pwd, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HBaseLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the HBase server. (i.e. 192.168.222.160). </param>
        /// <param name="port"> The TCP port that the HBase instance uses to listen for client connections. The default value is 9090. </param>
        /// <param name="httpPath"> The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version). </param>
        /// <param name="authenticationType"> The authentication mechanism to use to connect to the HBase server. </param>
        /// <param name="username"> The user name used to connect to the HBase instance. </param>
        /// <param name="password">
        /// The password corresponding to the user name.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HBaseLinkedService"/> instance for mocking. </returns>
        public static HBaseLinkedService HBaseLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object port = null, object httpPath = null, HBaseAuthenticationType authenticationType = default, object username = null, SecretBase password = null, object enableSsl = null, object trustedCertPath = null, object allowHostNameCNMismatch = null, object allowSelfSignedServerCert = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HBaseLinkedService("HBase", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, httpPath, authenticationType, username, password, enableSsl, trustedCertPath, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HiveLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> IP address or host name of the Hive server, separated by &apos;;&apos; for multiple hosts (only when serviceDiscoveryMode is enable). </param>
        /// <param name="port"> The TCP port that the Hive server uses to listen for client connections. </param>
        /// <param name="serverType"> The type of Hive server. </param>
        /// <param name="thriftTransportProtocol"> The transport protocol to use in the Thrift layer. </param>
        /// <param name="authenticationType"> The authentication method used to access the Hive server. </param>
        /// <param name="serviceDiscoveryMode"> true to indicate using the ZooKeeper service, false not. </param>
        /// <param name="zooKeeperNameSpace"> The namespace on ZooKeeper under which Hive Server 2 nodes are added. </param>
        /// <param name="useNativeQuery"> Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL. </param>
        /// <param name="username"> The user name that you use to access Hive Server. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the Username field
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="httpPath"> The partial URL corresponding to the Hive server. </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HiveLinkedService"/> instance for mocking. </returns>
        public static HiveLinkedService HiveLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object port = null, HiveServerType? serverType = null, HiveThriftTransportProtocol? thriftTransportProtocol = null, HiveAuthenticationType authenticationType = default, object serviceDiscoveryMode = null, object zooKeeperNameSpace = null, object useNativeQuery = null, object username = null, SecretBase password = null, object httpPath = null, object enableSsl = null, object trustedCertPath = null, object useSystemTrustStore = null, object allowHostNameCNMismatch = null, object allowSelfSignedServerCert = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HiveLinkedService("Hive", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, serverType, thriftTransportProtocol, authenticationType, serviceDiscoveryMode, zooKeeperNameSpace, useNativeQuery, username, password, httpPath, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HubspotLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="clientId"> The client ID associated with your Hubspot application. </param>
        /// <param name="clientSecret">
        /// The client secret associated with your Hubspot application.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="accessToken">
        /// The access token obtained when initially authenticating your OAuth integration.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="refreshToken">
        /// The refresh token obtained when initially authenticating your OAuth integration.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HubspotLinkedService"/> instance for mocking. </returns>
        public static HubspotLinkedService HubspotLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object clientId = null, SecretBase clientSecret = null, SecretBase accessToken = null, SecretBase refreshToken = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new HubspotLinkedService("Hubspot", connectVia, description, parameters, annotations?.ToList(), additionalProperties, clientId, clientSecret, accessToken, refreshToken, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ImpalaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the Impala server. (i.e. 192.168.222.160). </param>
        /// <param name="port"> The TCP port that the Impala server uses to listen for client connections. The default value is 21050. </param>
        /// <param name="authenticationType"> The authentication type to use. </param>
        /// <param name="username"> The user name used to access the Impala server. The default value is anonymous when using SASLUsername. </param>
        /// <param name="password">
        /// The password corresponding to the user name when using UsernameAndPassword.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ImpalaLinkedService"/> instance for mocking. </returns>
        public static ImpalaLinkedService ImpalaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object port = null, ImpalaAuthenticationType authenticationType = default, object username = null, SecretBase password = null, object enableSsl = null, object trustedCertPath = null, object useSystemTrustStore = null, object allowHostNameCNMismatch = null, object allowSelfSignedServerCert = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ImpalaLinkedService("Impala", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, authenticationType, username, password, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of JiraLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the Jira service. (e.g. jira.example.com). </param>
        /// <param name="port"> The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through HTTPS, or 8080 if connecting through HTTP. </param>
        /// <param name="username"> The user name that you use to access Jira Service. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the username field.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.JiraLinkedService"/> instance for mocking. </returns>
        public static JiraLinkedService JiraLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object port = null, object username = null, SecretBase password = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new JiraLinkedService("Jira", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, username, password, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MagentoLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The URL of the Magento instance. (i.e. 192.168.222.110/magento3). </param>
        /// <param name="accessToken">
        /// The access token from Magento.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MagentoLinkedService"/> instance for mocking. </returns>
        public static MagentoLinkedService MagentoLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, SecretBase accessToken = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MagentoLinkedService("Magento", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, accessToken, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MariaDBLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="pwd"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MariaDBLinkedService"/> instance for mocking. </returns>
        public static MariaDBLinkedService MariaDBLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference pwd = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MariaDBLinkedService("MariaDB", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, pwd, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureMariaDBLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="pwd"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMariaDBLinkedService"/> instance for mocking. </returns>
        public static AzureMariaDBLinkedService AzureMariaDBLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference pwd = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMariaDBLinkedService("AzureMariaDB", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, pwd, encryptedCredential);
        }

        /// <summary> Initializes a new instance of MarketoLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com). </param>
        /// <param name="clientId"> The client Id of your Marketo service. </param>
        /// <param name="clientSecret">
        /// The client secret of your Marketo service.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MarketoLinkedService"/> instance for mocking. </returns>
        public static MarketoLinkedService MarketoLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object endpoint = null, object clientId = null, SecretBase clientSecret = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new MarketoLinkedService("Marketo", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of PaypalLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The URL of the PayPal instance. (i.e. api.sandbox.paypal.com). </param>
        /// <param name="clientId"> The client ID associated with your PayPal application. </param>
        /// <param name="clientSecret">
        /// The client secret associated with your PayPal application.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PaypalLinkedService"/> instance for mocking. </returns>
        public static PaypalLinkedService PaypalLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object clientId = null, SecretBase clientSecret = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PaypalLinkedService("Paypal", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of PhoenixLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the Phoenix server. (i.e. 192.168.222.160). </param>
        /// <param name="port"> The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765. </param>
        /// <param name="httpPath"> The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix if using WindowsAzureHDInsightService. </param>
        /// <param name="authenticationType"> The authentication mechanism used to connect to the Phoenix server. </param>
        /// <param name="username"> The user name used to connect to the Phoenix server. </param>
        /// <param name="password">
        /// The password corresponding to the user name.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PhoenixLinkedService"/> instance for mocking. </returns>
        public static PhoenixLinkedService PhoenixLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object port = null, object httpPath = null, PhoenixAuthenticationType authenticationType = default, object username = null, SecretBase password = null, object enableSsl = null, object trustedCertPath = null, object useSystemTrustStore = null, object allowHostNameCNMismatch = null, object allowSelfSignedServerCert = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PhoenixLinkedService("Phoenix", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, httpPath, authenticationType, username, password, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of PrestoLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The IP address or host name of the Presto server. (i.e. 192.168.222.160). </param>
        /// <param name="serverVersion"> The version of the Presto server. (i.e. 0.148-t). </param>
        /// <param name="catalog"> The catalog context for all request against the server. </param>
        /// <param name="port"> The TCP port that the Presto server uses to listen for client connections. The default value is 8080. </param>
        /// <param name="authenticationType"> The authentication mechanism used to connect to the Presto server. </param>
        /// <param name="username"> The user name used to connect to the Presto server. </param>
        /// <param name="password">
        /// The password corresponding to the user name.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="timeZoneID"> The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database. The default value is the system time zone. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PrestoLinkedService"/> instance for mocking. </returns>
        public static PrestoLinkedService PrestoLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object serverVersion = null, object catalog = null, object port = null, PrestoAuthenticationType authenticationType = default, object username = null, SecretBase password = null, object enableSsl = null, object trustedCertPath = null, object useSystemTrustStore = null, object allowHostNameCNMismatch = null, object allowSelfSignedServerCert = null, object timeZoneID = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new PrestoLinkedService("Presto", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, serverVersion, catalog, port, authenticationType, username, password, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, timeZoneID, encryptedCredential);
        }

        /// <summary> Initializes a new instance of QuickBooksLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="endpoint"> The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com). </param>
        /// <param name="companyId"> The company ID of the QuickBooks company to authorize. </param>
        /// <param name="consumerKey"> The consumer key for OAuth 1.0 authentication. </param>
        /// <param name="consumerSecret">
        /// The consumer secret for OAuth 1.0 authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="accessToken">
        /// The access token for OAuth 1.0 authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="accessTokenSecret">
        /// The access token secret for OAuth 1.0 authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.QuickBooksLinkedService"/> instance for mocking. </returns>
        public static QuickBooksLinkedService QuickBooksLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionProperties = null, object endpoint = null, object companyId = null, object consumerKey = null, SecretBase consumerSecret = null, SecretBase accessToken = null, SecretBase accessTokenSecret = null, object useEncryptedEndpoints = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new QuickBooksLinkedService("QuickBooks", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, endpoint, companyId, consumerKey, consumerSecret, accessToken, accessTokenSecret, useEncryptedEndpoints, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ServiceNowLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the ServiceNow server. (i.e. &lt;instance&gt;.service-now.com). </param>
        /// <param name="authenticationType"> The authentication type to use. </param>
        /// <param name="username"> The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication. </param>
        /// <param name="password">
        /// The password corresponding to the user name for Basic and OAuth2 authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="clientId"> The client id for OAuth2 authentication. </param>
        /// <param name="clientSecret">
        /// The client secret for OAuth2 authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ServiceNowLinkedService"/> instance for mocking. </returns>
        public static ServiceNowLinkedService ServiceNowLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object endpoint = null, ServiceNowAuthenticationType authenticationType = default, object username = null, SecretBase password = null, object clientId = null, SecretBase clientSecret = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ServiceNowLinkedService("ServiceNow", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, authenticationType, username, password, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ShopifyLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The endpoint of the Shopify server. (i.e. mystore.myshopify.com). </param>
        /// <param name="accessToken">
        /// The API access token that can be used to access Shopify’s data. The token won&apos;t expire if it is offline mode.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ShopifyLinkedService"/> instance for mocking. </returns>
        public static ShopifyLinkedService ShopifyLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, SecretBase accessToken = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ShopifyLinkedService("Shopify", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, accessToken, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SparkLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> IP address or host name of the Spark server. </param>
        /// <param name="port"> The TCP port that the Spark server uses to listen for client connections. </param>
        /// <param name="serverType"> The type of Spark server. </param>
        /// <param name="thriftTransportProtocol"> The transport protocol to use in the Thrift layer. </param>
        /// <param name="authenticationType"> The authentication method used to access the Spark server. </param>
        /// <param name="username"> The user name that you use to access Spark Server. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the Username field
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="httpPath"> The partial URL corresponding to the Spark server. </param>
        /// <param name="enableSsl"> Specifies whether the connections to the server are encrypted using SSL. The default value is false. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="allowHostNameCNMismatch"> Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false. </param>
        /// <param name="allowSelfSignedServerCert"> Specifies whether to allow self-signed certificates from the server. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SparkLinkedService"/> instance for mocking. </returns>
        public static SparkLinkedService SparkLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object port = null, SparkServerType? serverType = null, SparkThriftTransportProtocol? thriftTransportProtocol = null, SparkAuthenticationType authenticationType = default, object username = null, SecretBase password = null, object httpPath = null, object enableSsl = null, object trustedCertPath = null, object useSystemTrustStore = null, object allowHostNameCNMismatch = null, object allowSelfSignedServerCert = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SparkLinkedService("Spark", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, port, serverType, thriftTransportProtocol, authenticationType, username, password, httpPath, enableSsl, trustedCertPath, useSystemTrustStore, allowHostNameCNMismatch, allowSelfSignedServerCert, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SquareLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="host"> The URL of the Square instance. (i.e. mystore.mysquare.com). </param>
        /// <param name="clientId"> The client ID associated with your Square application. </param>
        /// <param name="clientSecret">
        /// The client secret associated with your Square application.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="redirectUri"> The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500). </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SquareLinkedService"/> instance for mocking. </returns>
        public static SquareLinkedService SquareLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionProperties = null, object host = null, object clientId = null, SecretBase clientSecret = null, object redirectUri = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SquareLinkedService("Square", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, host, clientId, clientSecret, redirectUri, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of XeroLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="host"> The endpoint of the Xero server. (i.e. api.xero.com). </param>
        /// <param name="consumerKey">
        /// The consumer key associated with the Xero application.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="privateKey">
        /// The private key from the .pem file that was generated for your Xero private application. You must include all the text from the .pem file, including the Unix line endings(
        /// ).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.XeroLinkedService"/> instance for mocking. </returns>
        public static XeroLinkedService XeroLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionProperties = null, object host = null, SecretBase consumerKey = null, SecretBase privateKey = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new XeroLinkedService("Xero", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, host, consumerKey, privateKey, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ZohoLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="endpoint"> The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private). </param>
        /// <param name="accessToken">
        /// The access token for Zoho authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ZohoLinkedService"/> instance for mocking. </returns>
        public static ZohoLinkedService ZohoLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionProperties = null, object endpoint = null, SecretBase accessToken = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ZohoLinkedService("Zoho", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, endpoint, accessToken, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of VerticaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="pwd"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.VerticaLinkedService"/> instance for mocking. </returns>
        public static VerticaLinkedService VerticaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference pwd = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new VerticaLinkedService("Vertica", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, pwd, encryptedCredential);
        }

        /// <summary> Initializes a new instance of NetezzaLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="pwd"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.NetezzaLinkedService"/> instance for mocking. </returns>
        public static NetezzaLinkedService NetezzaLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference pwd = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new NetezzaLinkedService("Netezza", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, pwd, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SalesforceMarketingCloudLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="clientId"> The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType string).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceMarketingCloudLinkedService"/> instance for mocking. </returns>
        public static SalesforceMarketingCloudLinkedService SalesforceMarketingCloudLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionProperties = null, object clientId = null, SecretBase clientSecret = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceMarketingCloudLinkedService("SalesforceMarketingCloud", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of HDInsightOnDemandLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="clusterSize"> Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string). </param>
        /// <param name="timeToLive"> The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string). </param>
        /// <param name="version"> Version of the HDInsight cluster.  Type: string (or Expression with resultType string). </param>
        /// <param name="linkedServiceName"> Azure Storage linked service to be used by the on-demand cluster for storing and processing data. </param>
        /// <param name="hostSubscriptionId"> The customer’s subscription to host the cluster. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key for the service principal id.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="clusterResourceGroup"> The resource group where the cluster belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="clusterNamePrefix"> The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string). </param>
        /// <param name="clusterUserName"> The username to access the cluster. Type: string (or Expression with resultType string). </param>
        /// <param name="clusterPassword">
        /// The password to access the cluster.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="clusterSshUserName"> The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string). </param>
        /// <param name="clusterSshPassword">
        /// The password to SSH remotely connect cluster’s node (for Linux).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="additionalLinkedServiceNames"> Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf. </param>
        /// <param name="hcatalogLinkedServiceName"> The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore. </param>
        /// <param name="clusterType"> The cluster type. Type: string (or Expression with resultType string). </param>
        /// <param name="sparkVersion"> The version of spark if the cluster type is &apos;spark&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="coreConfiguration"> Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created. </param>
        /// <param name="hBaseConfiguration"> Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster. </param>
        /// <param name="hdfsConfiguration"> Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster. </param>
        /// <param name="hiveConfiguration"> Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster. </param>
        /// <param name="mapReduceConfiguration"> Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster. </param>
        /// <param name="oozieConfiguration"> Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster. </param>
        /// <param name="stormConfiguration"> Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster. </param>
        /// <param name="yarnConfiguration"> Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="headNodeSize"> Specifies the size of the head node for the HDInsight cluster. </param>
        /// <param name="dataNodeSize"> Specifies the size of the data node for the HDInsight cluster. </param>
        /// <param name="zookeeperNodeSize"> Specifies the size of the Zoo Keeper node for the HDInsight cluster. </param>
        /// <param name="scriptActions"> Custom script actions to run on HDI ondemand cluster once it&apos;s up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&amp;bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions. </param>
        /// <param name="virtualNetworkId"> The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string). </param>
        /// <param name="subnetName"> The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HDInsightOnDemandLinkedService"/> instance for mocking. </returns>
        public static HDInsightOnDemandLinkedService HDInsightOnDemandLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object clusterSize = null, object timeToLive = null, object version = null, LinkedServiceReference linkedServiceName = null, object hostSubscriptionId = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object clusterResourceGroup = null, object clusterNamePrefix = null, object clusterUserName = null, SecretBase clusterPassword = null, object clusterSshUserName = null, SecretBase clusterSshPassword = null, IEnumerable<LinkedServiceReference> additionalLinkedServiceNames = null, LinkedServiceReference hcatalogLinkedServiceName = null, object clusterType = null, object sparkVersion = null, object coreConfiguration = null, object hBaseConfiguration = null, object hdfsConfiguration = null, object hiveConfiguration = null, object mapReduceConfiguration = null, object oozieConfiguration = null, object stormConfiguration = null, object yarnConfiguration = null, object encryptedCredential = null, object headNodeSize = null, object dataNodeSize = null, object zookeeperNodeSize = null, IEnumerable<ScriptAction> scriptActions = null, object virtualNetworkId = null, object subnetName = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            additionalLinkedServiceNames ??= new List<LinkedServiceReference>();
            scriptActions ??= new List<ScriptAction>();

            return new HDInsightOnDemandLinkedService("HDInsightOnDemand", connectVia, description, parameters, annotations?.ToList(), additionalProperties, clusterSize, timeToLive, version, linkedServiceName, hostSubscriptionId, servicePrincipalId, servicePrincipalKey, tenant, clusterResourceGroup, clusterNamePrefix, clusterUserName, clusterPassword, clusterSshUserName, clusterSshPassword, additionalLinkedServiceNames?.ToList(), hcatalogLinkedServiceName, clusterType, sparkVersion, coreConfiguration, hBaseConfiguration, hdfsConfiguration, hiveConfiguration, mapReduceConfiguration, oozieConfiguration, stormConfiguration, yarnConfiguration, encryptedCredential, headNodeSize, dataNodeSize, zookeeperNodeSize, scriptActions?.ToList(), virtualNetworkId, subnetName);
        }

        /// <summary> Initializes a new instance of ScriptAction. </summary>
        /// <param name="name"> The user provided name of the script action. </param>
        /// <param name="uri"> The URI for the script action. </param>
        /// <param name="roles"> The node types on which the script action should be executed. </param>
        /// <param name="parameters"> The parameters for the script action. </param>
        /// <returns> A new <see cref="Models.ScriptAction"/> instance for mocking. </returns>
        public static ScriptAction ScriptAction(string name = null, string uri = null, object roles = null, string parameters = null)
        {
            return new ScriptAction(name, uri, roles, parameters);
        }

        /// <summary> Initializes a new instance of AzureDataLakeAnalyticsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="accountName"> The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="subscriptionId"> Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string). </param>
        /// <param name="resourceGroupName"> Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string). </param>
        /// <param name="dataLakeAnalyticsUri"> Azure Data Lake Analytics URI Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeAnalyticsLinkedService"/> instance for mocking. </returns>
        public static AzureDataLakeAnalyticsLinkedService AzureDataLakeAnalyticsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object accountName = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object subscriptionId = null, object resourceGroupName = null, object dataLakeAnalyticsUri = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataLakeAnalyticsLinkedService("AzureDataLakeAnalytics", connectVia, description, parameters, annotations?.ToList(), additionalProperties, accountName, servicePrincipalId, servicePrincipalKey, tenant, subscriptionId, resourceGroupName, dataLakeAnalyticsUri, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureDatabricksLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="domain"> &lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string). </param>
        /// <param name="accessToken">
        /// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="authentication"> Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string). </param>
        /// <param name="workspaceResourceId"> Workspace resource id for databricks REST API. Type: string (or Expression with resultType string). </param>
        /// <param name="existingClusterId"> The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string). </param>
        /// <param name="instancePoolId"> The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterVersion"> If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterNumOfWorker"> If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like &apos;1&apos; means numOfWorker is 1 or &apos;1:10&apos; means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as &apos;2&apos;. Required if newClusterVersion is specified. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterNodeType"> The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterSparkConf"> A set of optional, user-specified Spark configuration key-value pairs. </param>
        /// <param name="newClusterSparkEnvVars"> A set of optional, user-specified Spark environment variables key-value pairs. </param>
        /// <param name="newClusterCustomTags"> Additional tags for cluster resources. This property is ignored in instance pool configurations. </param>
        /// <param name="newClusterLogDestination"> Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterDriverNodeType"> The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string). </param>
        /// <param name="newClusterInitScripts"> User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings). </param>
        /// <param name="newClusterEnableElasticDisk"> Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="policyId"> The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksLinkedService"/> instance for mocking. </returns>
        public static AzureDatabricksLinkedService AzureDatabricksLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object domain = null, SecretBase accessToken = null, object authentication = null, object workspaceResourceId = null, object existingClusterId = null, object instancePoolId = null, object newClusterVersion = null, object newClusterNumOfWorker = null, object newClusterNodeType = null, IDictionary<string, object> newClusterSparkConf = null, IDictionary<string, object> newClusterSparkEnvVars = null, IDictionary<string, object> newClusterCustomTags = null, object newClusterLogDestination = null, object newClusterDriverNodeType = null, object newClusterInitScripts = null, object newClusterEnableElasticDisk = null, object encryptedCredential = null, object policyId = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            newClusterSparkConf ??= new Dictionary<string, object>();
            newClusterSparkEnvVars ??= new Dictionary<string, object>();
            newClusterCustomTags ??= new Dictionary<string, object>();

            return new AzureDatabricksLinkedService("AzureDatabricks", connectVia, description, parameters, annotations?.ToList(), additionalProperties, domain, accessToken, authentication, workspaceResourceId, existingClusterId, instancePoolId, newClusterVersion, newClusterNumOfWorker, newClusterNodeType, newClusterSparkConf, newClusterSparkEnvVars, newClusterCustomTags, newClusterLogDestination, newClusterDriverNodeType, newClusterInitScripts, newClusterEnableElasticDisk, encryptedCredential, policyId);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="domain"> &lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string). </param>
        /// <param name="accessToken">
        /// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string, SecureString or AzureKeyVaultSecretReference.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="clusterId"> The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeLinkedService"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeLinkedService AzureDatabricksDeltaLakeLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object domain = null, SecretBase accessToken = null, object clusterId = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDatabricksDeltaLakeLinkedService("AzureDatabricksDeltaLake", connectVia, description, parameters, annotations?.ToList(), additionalProperties, domain, accessToken, clusterId, encryptedCredential);
        }

        /// <summary> Initializes a new instance of ResponsysLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of the Responsys server. </param>
        /// <param name="clientId"> The client ID associated with the Responsys application. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ResponsysLinkedService"/> instance for mocking. </returns>
        public static ResponsysLinkedService ResponsysLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object endpoint = null, object clientId = null, SecretBase clientSecret = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ResponsysLinkedService("Responsys", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, clientId, clientSecret, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of DynamicsAXLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="url"> The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint. </param>
        /// <param name="servicePrincipalId"> Specify the application&apos;s client ID. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// Specify the application&apos;s key. Mark this field as a SecureString to store it securely in Data Factory, or reference a secret stored in Azure Key Vault. Type: string (or Expression with resultType string).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by hovering the mouse in the top-right corner of the Azure portal. Type: string (or Expression with resultType string). </param>
        /// <param name="aadResourceId"> Specify the resource you are requesting authorization. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsAXLinkedService"/> instance for mocking. </returns>
        public static DynamicsAXLinkedService DynamicsAXLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object url = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object tenant = null, object aadResourceId = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsAXLinkedService("DynamicsAX", connectVia, description, parameters, annotations?.ToList(), additionalProperties, url, servicePrincipalId, servicePrincipalKey, tenant, aadResourceId, encryptedCredential);
        }

        /// <summary> Initializes a new instance of OracleServiceCloudLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="host"> The URL of the Oracle Service Cloud instance. </param>
        /// <param name="username"> The user name that you use to access Oracle Service Cloud server. </param>
        /// <param name="password">
        /// The password corresponding to the user name that you provided in the username key.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="useEncryptedEndpoints"> Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="useHostVerification"> Specifies whether to require the host name in the server&apos;s certificate to match the host name of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="usePeerVerification"> Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleServiceCloudLinkedService"/> instance for mocking. </returns>
        public static OracleServiceCloudLinkedService OracleServiceCloudLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object host = null, object username = null, SecretBase password = null, object useEncryptedEndpoints = null, object useHostVerification = null, object usePeerVerification = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new OracleServiceCloudLinkedService("OracleServiceCloud", connectVia, description, parameters, annotations?.ToList(), additionalProperties, host, username, password, useEncryptedEndpoints, useHostVerification, usePeerVerification, encryptedCredential);
        }

        /// <summary> Initializes a new instance of GoogleAdWordsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionProperties"> Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type: object. </param>
        /// <param name="clientCustomerID"> The Client customer ID of the AdWords account that you want to fetch report data for. </param>
        /// <param name="developerToken">
        /// The developer token associated with the manager account that you use to grant access to the AdWords API.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="authenticationType"> The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR. </param>
        /// <param name="refreshToken">
        /// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="clientId"> The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType string). </param>
        /// <param name="clientSecret">
        /// The client secret of the google application used to acquire the refresh token.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="email"> The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR. </param>
        /// <param name="keyFilePath"> The full path to the .p12 key file that is used to authenticate the service account email address and can only be used on self-hosted IR. </param>
        /// <param name="trustedCertPath"> The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR. </param>
        /// <param name="useSystemTrustStore"> Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is false. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleAdWordsLinkedService"/> instance for mocking. </returns>
        public static GoogleAdWordsLinkedService GoogleAdWordsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionProperties = null, object clientCustomerID = null, SecretBase developerToken = null, GoogleAdWordsAuthenticationType? authenticationType = null, SecretBase refreshToken = null, object clientId = null, SecretBase clientSecret = null, object email = null, object keyFilePath = null, object trustedCertPath = null, object useSystemTrustStore = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleAdWordsLinkedService("GoogleAdWords", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionProperties, clientCustomerID, developerToken, authenticationType, refreshToken, clientId, clientSecret, email, keyFilePath, trustedCertPath, useSystemTrustStore, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SapTableLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="server"> Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="systemNumber"> System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string). </param>
        /// <param name="clientId"> Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string). </param>
        /// <param name="language"> Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string). </param>
        /// <param name="systemId"> SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="userName"> Username to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="password">
        /// Password to access the SAP server where the table is located.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="messageServer"> The hostname of the SAP Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="messageServerService"> The service name or port number of the Message Server. Type: string (or Expression with resultType string). </param>
        /// <param name="sncMode"> SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string). </param>
        /// <param name="sncMyName"> Initiator&apos;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncPartnerName"> Communication partner&apos;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncLibraryPath"> External security product&apos;s library to access the SAP server where the table is located. Type: string (or Expression with resultType string). </param>
        /// <param name="sncQop"> SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string). </param>
        /// <param name="logonGroup"> The Logon Group for the SAP System. Type: string (or Expression with resultType string). </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapTableLinkedService"/> instance for mocking. </returns>
        public static SapTableLinkedService SapTableLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object server = null, object systemNumber = null, object clientId = null, object language = null, object systemId = null, object userName = null, SecretBase password = null, object messageServer = null, object messageServerService = null, object sncMode = null, object sncMyName = null, object sncPartnerName = null, object sncLibraryPath = null, object sncQop = null, object logonGroup = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SapTableLinkedService("SapTable", connectVia, description, parameters, annotations?.ToList(), additionalProperties, server, systemNumber, clientId, language, systemId, userName, password, messageServer, messageServerService, sncMode, sncMyName, sncPartnerName, sncLibraryPath, sncQop, logonGroup, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> The endpoint of Azure Data Explorer (the engine&apos;s endpoint). URL will be in the format https://&lt;clusterName&gt;.&lt;regionName&gt;.kusto.windows.net. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Kusto.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="database"> Database name for connection. Type: string (or Expression with resultType string). </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerLinkedService"/> instance for mocking. </returns>
        public static AzureDataExplorerLinkedService AzureDataExplorerLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object endpoint = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object database = null, object tenant = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataExplorerLinkedService("AzureDataExplorer", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, servicePrincipalId, servicePrincipalKey, database, tenant);
        }

        /// <summary> Initializes a new instance of AzureFunctionLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="functionAppUrl"> The endpoint of the Azure Function App. URL will be in the format https://&lt;accountName&gt;.azurewebsites.net. </param>
        /// <param name="functionKey">
        /// Function or Host key for Azure Function App.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureFunctionLinkedService"/> instance for mocking. </returns>
        public static AzureFunctionLinkedService AzureFunctionLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object functionAppUrl = null, SecretBase functionKey = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureFunctionLinkedService("AzureFunction", connectVia, description, parameters, annotations?.ToList(), additionalProperties, functionAppUrl, functionKey, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SnowflakeLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="connectionString"> The connection string of snowflake. Type: string, SecureString. </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SnowflakeLinkedService"/> instance for mocking. </returns>
        public static SnowflakeLinkedService SnowflakeLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object connectionString = null, AzureKeyVaultSecretReference password = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SnowflakeLinkedService("Snowflake", connectVia, description, parameters, annotations?.ToList(), additionalProperties, connectionString, password, encryptedCredential);
        }

        /// <summary> Initializes a new instance of SharePointOnlineListLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="siteUrl"> The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string (or Expression with resultType string). </param>
        /// <param name="tenantId"> The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview page. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalId"> The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint site permission to this application. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The client secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType string).
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SharePointOnlineListLinkedService"/> instance for mocking. </returns>
        public static SharePointOnlineListLinkedService SharePointOnlineListLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object siteUrl = null, object tenantId = null, object servicePrincipalId = null, SecretBase servicePrincipalKey = null, object encryptedCredential = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SharePointOnlineListLinkedService("SharePointOnlineList", connectVia, description, parameters, annotations?.ToList(), additionalProperties, siteUrl, tenantId, servicePrincipalId, servicePrincipalKey, encryptedCredential);
        }

        /// <summary> Initializes a new instance of AzureSynapseArtifactsLinkedService. </summary>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="description"> Linked service description. </param>
        /// <param name="parameters"> Parameters for linked service. </param>
        /// <param name="annotations"> List of tags that can be used for describing the linked service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="endpoint"> https://&lt;workspacename&gt;.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType string). </param>
        /// <param name="authentication"> Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSynapseArtifactsLinkedService"/> instance for mocking. </returns>
        public static AzureSynapseArtifactsLinkedService AzureSynapseArtifactsLinkedService(IntegrationRuntimeReference connectVia = null, string description = null, IDictionary<string, ParameterSpecification> parameters = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, object endpoint = null, object authentication = null)
        {
            parameters ??= new Dictionary<string, ParameterSpecification>();
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSynapseArtifactsLinkedService("AzureSynapseArtifacts", connectVia, description, parameters, annotations?.ToList(), additionalProperties, endpoint, authentication);
        }

        /// <summary> Initializes a new instance of ControlActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ControlActivity"/> instance for mocking. </returns>
        public static ControlActivity ControlActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ControlActivity(name, "Container", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of ExecutionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <returns> A new <see cref="Models.ExecutionActivity"/> instance for mocking. </returns>
        public static ExecutionActivity ExecutionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ExecutionActivity(name, "Execution", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy);
        }

        /// <summary> Initializes a new instance of ActivityPolicy. </summary>
        /// <param name="timeout"> Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="retry"> Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="retryIntervalInSeconds"> Interval between each retry attempt (in seconds). The default is 30 sec. </param>
        /// <param name="secureInput"> When set to true, Input from activity is considered as secure and will not be logged to monitoring. </param>
        /// <param name="secureOutput"> When set to true, Output from activity is considered as secure and will not be logged to monitoring. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ActivityPolicy"/> instance for mocking. </returns>
        public static ActivityPolicy ActivityPolicy(object timeout = null, object retry = null, int? retryIntervalInSeconds = null, bool? secureInput = null, bool? secureOutput = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ActivityPolicy(timeout, retry, retryIntervalInSeconds, secureInput, secureOutput, additionalProperties);
        }

        /// <summary> Initializes a new instance of StoreReadSettings. </summary>
        /// <param name="type"> The read setting type. </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.StoreReadSettings"/> instance for mocking. </returns>
        public static StoreReadSettings StoreReadSettings(string type = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new StoreReadSettings(type, maxConcurrentConnections, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureBlobStorageReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Azure blob wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Azure blob wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobStorageReadSettings"/> instance for mocking. </returns>
        public static AzureBlobStorageReadSettings AzureBlobStorageReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, object prefix = null, object fileListPath = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object deleteFilesAfterCompletion = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobStorageReadSettings("AzureBlobStorageReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of AzureBlobFSReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Azure blobFS wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSReadSettings"/> instance for mocking. </returns>
        public static AzureBlobFSReadSettings AzureBlobFSReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, object fileListPath = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object deleteFilesAfterCompletion = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobFSReadSettings("AzureBlobFSReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> ADLS wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> ADLS wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="listAfter"> Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="listBefore"> Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath in data set, and filter files/sub-folders under the folderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreReadSettings"/> instance for mocking. </returns>
        public static AzureDataLakeStoreReadSettings AzureDataLakeStoreReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, object fileListPath = null, object listAfter = null, object listBefore = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object deleteFilesAfterCompletion = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataLakeStoreReadSettings("AzureDataLakeStoreReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, fileListPath, listAfter, listBefore, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of AmazonS3ReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> AmazonS3 wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the S3 object name. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonS3ReadSettings"/> instance for mocking. </returns>
        public static AmazonS3ReadSettings AmazonS3ReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, object prefix = null, object fileListPath = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object deleteFilesAfterCompletion = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonS3ReadSettings("AmazonS3ReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of FileServerReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> FileServer wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> FileServer wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="fileFilter"> Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.FileServerReadSettings"/> instance for mocking. </returns>
        public static FileServerReadSettings FileServerReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, object fileListPath = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object deleteFilesAfterCompletion = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null, object fileFilter = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FileServerReadSettings("FileServerReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd, fileFilter);
        }

        /// <summary> Initializes a new instance of AzureFileStorageReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Azure File Storage wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureFileStorageReadSettings"/> instance for mocking. </returns>
        public static AzureFileStorageReadSettings AzureFileStorageReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, object prefix = null, object fileListPath = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object deleteFilesAfterCompletion = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureFileStorageReadSettings("AzureFileStorageReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of SftpWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="operationTimeout"> Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string). </param>
        /// <param name="useTempFileRename"> Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn&apos;t support rename operation. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SftpWriteSettings"/> instance for mocking. </returns>
        public static SftpWriteSettings SftpWriteSettings(object maxConcurrentConnections = null, object copyBehavior = null, IDictionary<string, object> additionalProperties = null, object operationTimeout = null, object useTempFileRename = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SftpWriteSettings("SftpWriteSettings", maxConcurrentConnections, copyBehavior, additionalProperties, operationTimeout, useTempFileRename);
        }

        /// <summary> Initializes a new instance of StoreWriteSettings. </summary>
        /// <param name="type"> The write setting type. </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.StoreWriteSettings"/> instance for mocking. </returns>
        public static StoreWriteSettings StoreWriteSettings(string type = null, object maxConcurrentConnections = null, object copyBehavior = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new StoreWriteSettings(type, maxConcurrentConnections, copyBehavior, additionalProperties);
        }

        /// <summary> Initializes a new instance of GoogleCloudStorageReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="prefix"> The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleCloudStorageReadSettings"/> instance for mocking. </returns>
        public static GoogleCloudStorageReadSettings GoogleCloudStorageReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, object prefix = null, object fileListPath = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object deleteFilesAfterCompletion = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleCloudStorageReadSettings("GoogleCloudStorageReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, prefix, fileListPath, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd);
        }

        /// <summary> Initializes a new instance of FtpReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Ftp wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Ftp wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="useBinaryTransfer"> Specify whether to use binary transfer mode for FTP stores. </param>
        /// <param name="disableChunking"> If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.FtpReadSettings"/> instance for mocking. </returns>
        public static FtpReadSettings FtpReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object deleteFilesAfterCompletion = null, object fileListPath = null, bool? useBinaryTransfer = null, object disableChunking = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FtpReadSettings("FtpReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, enablePartitionDiscovery, partitionRootPath, deleteFilesAfterCompletion, fileListPath, useBinaryTransfer, disableChunking);
        }

        /// <summary> Initializes a new instance of SftpReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> Sftp wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> Sftp wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="disableChunking"> If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SftpReadSettings"/> instance for mocking. </returns>
        public static SftpReadSettings SftpReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object fileListPath = null, object deleteFilesAfterCompletion = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null, object disableChunking = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SftpReadSettings("SftpReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, enablePartitionDiscovery, partitionRootPath, fileListPath, deleteFilesAfterCompletion, modifiedDatetimeStart, modifiedDatetimeEnd, disableChunking);
        }

        /// <summary> Initializes a new instance of HttpReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="requestMethod"> The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). </param>
        /// <param name="requestBody"> The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders"> The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). </param>
        /// <param name="requestTimeout"> Specifies the timeout for a HTTP client to get HTTP response from HTTP server. </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HttpReadSettings"/> instance for mocking. </returns>
        public static HttpReadSettings HttpReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object requestMethod = null, object requestBody = null, object additionalHeaders = null, object requestTimeout = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HttpReadSettings("HttpReadSettings", maxConcurrentConnections, additionalProperties, requestMethod, requestBody, additionalHeaders, requestTimeout, enablePartitionDiscovery, partitionRootPath);
        }

        /// <summary> Initializes a new instance of HdfsReadSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="wildcardFolderPath"> HDFS wildcardFolderPath. Type: string (or Expression with resultType string). </param>
        /// <param name="wildcardFileName"> HDFS wildcardFileName. Type: string (or Expression with resultType string). </param>
        /// <param name="fileListPath"> Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string). </param>
        /// <param name="enablePartitionDiscovery"> Indicates whether to enable partition discovery. </param>
        /// <param name="partitionRootPath"> Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeStart"> The start of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="modifiedDatetimeEnd"> The end of file&apos;s modified datetime. Type: string (or Expression with resultType string). </param>
        /// <param name="distcpSettings"> Specifies Distcp-related settings. </param>
        /// <param name="deleteFilesAfterCompletion"> Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.HdfsReadSettings"/> instance for mocking. </returns>
        public static HdfsReadSettings HdfsReadSettings(object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object wildcardFolderPath = null, object wildcardFileName = null, object fileListPath = null, bool? enablePartitionDiscovery = null, object partitionRootPath = null, object modifiedDatetimeStart = null, object modifiedDatetimeEnd = null, DistcpSettings distcpSettings = null, object deleteFilesAfterCompletion = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HdfsReadSettings("HdfsReadSettings", maxConcurrentConnections, additionalProperties, recursive, wildcardFolderPath, wildcardFileName, fileListPath, enablePartitionDiscovery, partitionRootPath, modifiedDatetimeStart, modifiedDatetimeEnd, distcpSettings, deleteFilesAfterCompletion);
        }

        /// <summary> Initializes a new instance of DistcpSettings. </summary>
        /// <param name="resourceManagerEndpoint"> Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string). </param>
        /// <param name="tempScriptPath"> Specifies an existing folder path which will be used to store temp Distcp command script. The script file is generated by ADF and will be removed after Copy job finished. Type: string (or Expression with resultType string). </param>
        /// <param name="distcpOptions"> Specifies the Distcp options. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DistcpSettings"/> instance for mocking. </returns>
        public static DistcpSettings DistcpSettings(object resourceManagerEndpoint = null, object tempScriptPath = null, object distcpOptions = null)
        {
            return new DistcpSettings(resourceManagerEndpoint, tempScriptPath, distcpOptions);
        }

        /// <summary> Initializes a new instance of AzureBlobStorageWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="blockSizeInMB"> Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.AzureBlobStorageWriteSettings"/> instance for mocking. </returns>
        public static AzureBlobStorageWriteSettings AzureBlobStorageWriteSettings(object maxConcurrentConnections = null, object copyBehavior = null, IDictionary<string, object> additionalProperties = null, object blockSizeInMB = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobStorageWriteSettings("AzureBlobStorageWriteSettings", maxConcurrentConnections, copyBehavior, additionalProperties, blockSizeInMB);
        }

        /// <summary> Initializes a new instance of AzureBlobFSWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="blockSizeInMB"> Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSWriteSettings"/> instance for mocking. </returns>
        public static AzureBlobFSWriteSettings AzureBlobFSWriteSettings(object maxConcurrentConnections = null, object copyBehavior = null, IDictionary<string, object> additionalProperties = null, object blockSizeInMB = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobFSWriteSettings("AzureBlobFSWriteSettings", maxConcurrentConnections, copyBehavior, additionalProperties, blockSizeInMB);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="expiryDateTime"> Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of &quot;2018-12-01T05:00:00Z&quot;. Default value is NULL. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreWriteSettings"/> instance for mocking. </returns>
        public static AzureDataLakeStoreWriteSettings AzureDataLakeStoreWriteSettings(object maxConcurrentConnections = null, object copyBehavior = null, IDictionary<string, object> additionalProperties = null, object expiryDateTime = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataLakeStoreWriteSettings("AzureDataLakeStoreWriteSettings", maxConcurrentConnections, copyBehavior, additionalProperties, expiryDateTime);
        }

        /// <summary> Initializes a new instance of FileServerWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FileServerWriteSettings"/> instance for mocking. </returns>
        public static FileServerWriteSettings FileServerWriteSettings(object maxConcurrentConnections = null, object copyBehavior = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FileServerWriteSettings("FileServerWriteSettings", maxConcurrentConnections, copyBehavior, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureFileStorageWriteSettings. </summary>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AzureFileStorageWriteSettings"/> instance for mocking. </returns>
        public static AzureFileStorageWriteSettings AzureFileStorageWriteSettings(object maxConcurrentConnections = null, object copyBehavior = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureFileStorageWriteSettings("AzureFileStorageWriteSettings", maxConcurrentConnections, copyBehavior, additionalProperties);
        }

        /// <summary> Initializes a new instance of FormatReadSettings. </summary>
        /// <param name="type"> The read setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FormatReadSettings"/> instance for mocking. </returns>
        public static FormatReadSettings FormatReadSettings(string type = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FormatReadSettings(type, additionalProperties);
        }

        /// <summary> Initializes a new instance of CompressionReadSettings. </summary>
        /// <param name="type"> The Compression setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.CompressionReadSettings"/> instance for mocking. </returns>
        public static CompressionReadSettings CompressionReadSettings(string type = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CompressionReadSettings(type, additionalProperties);
        }

        /// <summary> Initializes a new instance of ZipDeflateReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preserveZipFileNameAsFolder"> Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.ZipDeflateReadSettings"/> instance for mocking. </returns>
        public static ZipDeflateReadSettings ZipDeflateReadSettings(IDictionary<string, object> additionalProperties = null, object preserveZipFileNameAsFolder = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ZipDeflateReadSettings("ZipDeflateReadSettings", additionalProperties, preserveZipFileNameAsFolder);
        }

        /// <summary> Initializes a new instance of TarReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preserveCompressionFileNameAsFolder"> Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.TarReadSettings"/> instance for mocking. </returns>
        public static TarReadSettings TarReadSettings(IDictionary<string, object> additionalProperties = null, object preserveCompressionFileNameAsFolder = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TarReadSettings("TarReadSettings", additionalProperties, preserveCompressionFileNameAsFolder);
        }

        /// <summary> Initializes a new instance of TarGZipReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preserveCompressionFileNameAsFolder"> Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.TarGZipReadSettings"/> instance for mocking. </returns>
        public static TarGZipReadSettings TarGZipReadSettings(IDictionary<string, object> additionalProperties = null, object preserveCompressionFileNameAsFolder = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TarGZipReadSettings("TarGZipReadSettings", additionalProperties, preserveCompressionFileNameAsFolder);
        }

        /// <summary> Initializes a new instance of DelimitedTextReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="skipLineCount"> Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType integer). </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGZipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DelimitedTextReadSettings"/> instance for mocking. </returns>
        public static DelimitedTextReadSettings DelimitedTextReadSettings(IDictionary<string, object> additionalProperties = null, object skipLineCount = null, CompressionReadSettings compressionProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DelimitedTextReadSettings("DelimitedTextReadSettings", additionalProperties, skipLineCount, compressionProperties);
        }

        /// <summary> Initializes a new instance of JsonReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGZipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.JsonReadSettings"/> instance for mocking. </returns>
        public static JsonReadSettings JsonReadSettings(IDictionary<string, object> additionalProperties = null, CompressionReadSettings compressionProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new JsonReadSettings("JsonReadSettings", additionalProperties, compressionProperties);
        }

        /// <summary> Initializes a new instance of XmlReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGZipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <param name="validationMode"> Indicates what validation method is used when reading the xml files. Allowed values: &apos;none&apos;, &apos;xsd&apos;, or &apos;dtd&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="detectDataType"> Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="namespaces"> Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="namespacePrefixes"> Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: &quot;{&quot;http://www.example.com/xml&quot;:&quot;prefix&quot;}&quot; Type: object (or Expression with resultType object). </param>
        /// <returns> A new <see cref="Models.XmlReadSettings"/> instance for mocking. </returns>
        public static XmlReadSettings XmlReadSettings(IDictionary<string, object> additionalProperties = null, CompressionReadSettings compressionProperties = null, object validationMode = null, object detectDataType = null, object namespaces = null, object namespacePrefixes = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new XmlReadSettings("XmlReadSettings", additionalProperties, compressionProperties, validationMode, detectDataType, namespaces, namespacePrefixes);
        }

        /// <summary> Initializes a new instance of BinaryReadSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="compressionProperties">
        /// Compression settings.
        /// Please note <see cref="CompressionReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="TarGZipReadSettings"/>, <see cref="TarReadSettings"/> and <see cref="ZipDeflateReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.BinaryReadSettings"/> instance for mocking. </returns>
        public static BinaryReadSettings BinaryReadSettings(IDictionary<string, object> additionalProperties = null, CompressionReadSettings compressionProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new BinaryReadSettings("BinaryReadSettings", additionalProperties, compressionProperties);
        }

        /// <summary> Initializes a new instance of FormatWriteSettings. </summary>
        /// <param name="type"> The write setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.FormatWriteSettings"/> instance for mocking. </returns>
        public static FormatWriteSettings FormatWriteSettings(string type = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FormatWriteSettings(type, additionalProperties);
        }

        /// <summary> Initializes a new instance of AvroWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recordName"> Top level record name in write result, which is required in AVRO spec. </param>
        /// <param name="recordNamespace"> Record namespace in the write result. </param>
        /// <param name="maxRowsPerFile"> Limit the written file&apos;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="fileNamePrefix"> Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AvroWriteSettings"/> instance for mocking. </returns>
        public static AvroWriteSettings AvroWriteSettings(IDictionary<string, object> additionalProperties = null, string recordName = null, string recordNamespace = null, object maxRowsPerFile = null, object fileNamePrefix = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AvroWriteSettings("AvroWriteSettings", additionalProperties, recordName, recordNamespace, maxRowsPerFile, fileNamePrefix);
        }

        /// <summary> Initializes a new instance of OrcWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="maxRowsPerFile"> Limit the written file&apos;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="fileNamePrefix"> Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OrcWriteSettings"/> instance for mocking. </returns>
        public static OrcWriteSettings OrcWriteSettings(IDictionary<string, object> additionalProperties = null, object maxRowsPerFile = null, object fileNamePrefix = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OrcWriteSettings("OrcWriteSettings", additionalProperties, maxRowsPerFile, fileNamePrefix);
        }

        /// <summary> Initializes a new instance of ParquetWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="maxRowsPerFile"> Limit the written file&apos;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="fileNamePrefix"> Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ParquetWriteSettings"/> instance for mocking. </returns>
        public static ParquetWriteSettings ParquetWriteSettings(IDictionary<string, object> additionalProperties = null, object maxRowsPerFile = null, object fileNamePrefix = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ParquetWriteSettings("ParquetWriteSettings", additionalProperties, maxRowsPerFile, fileNamePrefix);
        }

        /// <summary> Initializes a new instance of DelimitedTextWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="quoteAllText"> Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="fileExtension"> The file extension used to create the files. Type: string (or Expression with resultType string). </param>
        /// <param name="maxRowsPerFile"> Limit the written file&apos;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="fileNamePrefix"> Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DelimitedTextWriteSettings"/> instance for mocking. </returns>
        public static DelimitedTextWriteSettings DelimitedTextWriteSettings(IDictionary<string, object> additionalProperties = null, object quoteAllText = null, object fileExtension = null, object maxRowsPerFile = null, object fileNamePrefix = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DelimitedTextWriteSettings("DelimitedTextWriteSettings", additionalProperties, quoteAllText, fileExtension, maxRowsPerFile, fileNamePrefix);
        }

        /// <summary> Initializes a new instance of JsonWriteSettings. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filePattern"> File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is &apos;setOfObjects&apos;. It is case-sensitive. </param>
        /// <returns> A new <see cref="Models.JsonWriteSettings"/> instance for mocking. </returns>
        public static JsonWriteSettings JsonWriteSettings(IDictionary<string, object> additionalProperties = null, object filePattern = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new JsonWriteSettings("JsonWriteSettings", additionalProperties, filePattern);
        }

        /// <summary> Initializes a new instance of AvroSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Avro store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.AvroSource"/> instance for mocking. </returns>
        public static AvroSource AvroSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreReadSettings storeSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AvroSource("AvroSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of CopySource. </summary>
        /// <param name="type"> Copy source type. </param>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.CopySource"/> instance for mocking. </returns>
        public static CopySource CopySource(string type = null, object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CopySource(type, sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties);
        }

        /// <summary> Initializes a new instance of ExcelSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Excel store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.ExcelSource"/> instance for mocking. </returns>
        public static ExcelSource ExcelSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreReadSettings storeSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ExcelSource("ExcelSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of ParquetSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Parquet store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.ParquetSource"/> instance for mocking. </returns>
        public static ParquetSource ParquetSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreReadSettings storeSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ParquetSource("ParquetSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of DelimitedTextSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// DelimitedText store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings"> DelimitedText format settings. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.DelimitedTextSource"/> instance for mocking. </returns>
        public static DelimitedTextSource DelimitedTextSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreReadSettings storeSettings = null, DelimitedTextReadSettings formatSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DelimitedTextSource("DelimitedTextSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of JsonSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Json store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Json format settings. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.JsonSource"/> instance for mocking. </returns>
        public static JsonSource JsonSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreReadSettings storeSettings = null, JsonReadSettings formatSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new JsonSource("JsonSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of XmlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Xml store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Xml format settings. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.XmlSource"/> instance for mocking. </returns>
        public static XmlSource XmlSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreReadSettings storeSettings = null, XmlReadSettings formatSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new XmlSource("XmlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of OrcSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// ORC store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.OrcSource"/> instance for mocking. </returns>
        public static OrcSource OrcSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreReadSettings storeSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OrcSource("OrcSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of DelimitedTextSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// DelimitedText store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> DelimitedText format settings. </param>
        /// <returns> A new <see cref="Models.DelimitedTextSink"/> instance for mocking. </returns>
        public static DelimitedTextSink DelimitedTextSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreWriteSettings storeSettings = null, DelimitedTextWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DelimitedTextSink("DelimitedTextSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of CopySink. </summary>
        /// <param name="type"> Copy sink type. </param>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.CopySink"/> instance for mocking. </returns>
        public static CopySink CopySink(string type = null, object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CopySink(type, writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties);
        }

        /// <summary> Initializes a new instance of JsonSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Json store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Json format settings. </param>
        /// <returns> A new <see cref="Models.JsonSink"/> instance for mocking. </returns>
        public static JsonSink JsonSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreWriteSettings storeSettings = null, JsonWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new JsonSink("JsonSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of OrcSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// ORC store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> ORC format settings. </param>
        /// <returns> A new <see cref="Models.OrcSink"/> instance for mocking. </returns>
        public static OrcSink OrcSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreWriteSettings storeSettings = null, OrcWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OrcSink("OrcSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of CopyActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="inputs"> List of inputs for the activity. </param>
        /// <param name="outputs"> List of outputs for the activity. </param>
        /// <param name="source">
        /// Copy activity source.
        /// Please note <see cref="CopySource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMWSSource"/>, <see cref="AmazonRdsForOracleSource"/>, <see cref="AmazonRdsForSqlServerSource"/>, <see cref="AmazonRedshiftSource"/>, <see cref="AvroSource"/>, <see cref="AzureBlobFSSource"/>, <see cref="AzureDataExplorerSource"/>, <see cref="AzureDataLakeStoreSource"/>, <see cref="AzureDatabricksDeltaLakeSource"/>, <see cref="AzureMariaDBSource"/>, <see cref="AzureMySqlSource"/>, <see cref="AzurePostgreSqlSource"/>, <see cref="AzureSqlSource"/>, <see cref="AzureTableSource"/>, <see cref="BinarySource"/>, <see cref="BlobSource"/>, <see cref="CassandraSource"/>, <see cref="CommonDataServiceForAppsSource"/>, <see cref="ConcurSource"/>, <see cref="CosmosDbMongoDbApiSource"/>, <see cref="CosmosDbSqlApiSource"/>, <see cref="CouchbaseSource"/>, <see cref="Db2Source"/>, <see cref="DelimitedTextSource"/>, <see cref="DocumentDbCollectionSource"/>, <see cref="DrillSource"/>, <see cref="DynamicsAXSource"/>, <see cref="DynamicsCrmSource"/>, <see cref="DynamicsSource"/>, <see cref="EloquaSource"/>, <see cref="ExcelSource"/>, <see cref="FileSystemSource"/>, <see cref="GoogleAdWordsSource"/>, <see cref="GoogleBigQuerySource"/>, <see cref="GreenplumSource"/>, <see cref="HBaseSource"/>, <see cref="HdfsSource"/>, <see cref="HiveSource"/>, <see cref="HttpSource"/>, <see cref="HubspotSource"/>, <see cref="ImpalaSource"/>, <see cref="InformixSource"/>, <see cref="JiraSource"/>, <see cref="JsonSource"/>, <see cref="MagentoSource"/>, <see cref="MariaDBSource"/>, <see cref="MarketoSource"/>, <see cref="MicrosoftAccessSource"/>, <see cref="MongoDbAtlasSource"/>, <see cref="MongoDbSource"/>, <see cref="MongoDbV2Source"/>, <see cref="MySqlSource"/>, <see cref="NetezzaSource"/>, <see cref="ODataSource"/>, <see cref="OdbcSource"/>, <see cref="Office365Source"/>, <see cref="OracleServiceCloudSource"/>, <see cref="OracleSource"/>, <see cref="OrcSource"/>, <see cref="ParquetSource"/>, <see cref="PaypalSource"/>, <see cref="PhoenixSource"/>, <see cref="PostgreSqlSource"/>, <see cref="PrestoSource"/>, <see cref="QuickBooksSource"/>, <see cref="RelationalSource"/>, <see cref="ResponsysSource"/>, <see cref="RestSource"/>, <see cref="SalesforceMarketingCloudSource"/>, <see cref="SalesforceServiceCloudSource"/>, <see cref="SalesforceSource"/>, <see cref="SapBwSource"/>, <see cref="SapCloudForCustomerSource"/>, <see cref="SapEccSource"/>, <see cref="SapHanaSource"/>, <see cref="SapOdpSource"/>, <see cref="SapOpenHubSource"/>, <see cref="SapTableSource"/>, <see cref="ServiceNowSource"/>, <see cref="SharePointOnlineListSource"/>, <see cref="ShopifySource"/>, <see cref="SnowflakeSource"/>, <see cref="SparkSource"/>, <see cref="SqlDWSource"/>, <see cref="SqlMISource"/>, <see cref="SqlServerSource"/>, <see cref="SqlSource"/>, <see cref="SquareSource"/>, <see cref="SybaseSource"/>, <see cref="TabularSource"/>, <see cref="TeradataSource"/>, <see cref="VerticaSource"/>, <see cref="WebSource"/>, <see cref="XeroSource"/>, <see cref="XmlSource"/> and <see cref="ZohoSource"/>.
        /// </param>
        /// <param name="sink">
        /// Copy activity sink.
        /// Please note <see cref="CopySink"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AvroSink"/>, <see cref="AzureBlobFSSink"/>, <see cref="AzureDataExplorerSink"/>, <see cref="AzureDataLakeStoreSink"/>, <see cref="AzureDatabricksDeltaLakeSink"/>, <see cref="AzureMySqlSink"/>, <see cref="AzurePostgreSqlSink"/>, <see cref="AzureQueueSink"/>, <see cref="AzureSearchIndexSink"/>, <see cref="AzureSqlSink"/>, <see cref="AzureTableSink"/>, <see cref="BinarySink"/>, <see cref="BlobSink"/>, <see cref="CommonDataServiceForAppsSink"/>, <see cref="CosmosDbMongoDbApiSink"/>, <see cref="CosmosDbSqlApiSink"/>, <see cref="DelimitedTextSink"/>, <see cref="DocumentDbCollectionSink"/>, <see cref="DynamicsCrmSink"/>, <see cref="DynamicsSink"/>, <see cref="FileSystemSink"/>, <see cref="InformixSink"/>, <see cref="JsonSink"/>, <see cref="MicrosoftAccessSink"/>, <see cref="OdbcSink"/>, <see cref="OracleSink"/>, <see cref="OrcSink"/>, <see cref="ParquetSink"/>, <see cref="RestSink"/>, <see cref="SalesforceServiceCloudSink"/>, <see cref="SalesforceSink"/>, <see cref="SapCloudForCustomerSink"/>, <see cref="SnowflakeSink"/>, <see cref="SqlDWSink"/>, <see cref="SqlMISink"/>, <see cref="SqlServerSink"/> and <see cref="SqlSink"/>.
        /// </param>
        /// <param name="translator"> Copy activity translator. If not specified, tabular translator is used. </param>
        /// <param name="enableStaging"> Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="stagingSettings"> Specifies interim staging settings when EnableStaging is true. </param>
        /// <param name="parallelCopies"> Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="dataIntegrationUnits"> Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="enableSkipIncompatibleRow"> Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="redirectIncompatibleRowSettings"> Redirect incompatible row settings when EnableSkipIncompatibleRow is true. </param>
        /// <param name="logStorageSettings"> (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log. </param>
        /// <param name="logSettings"> Log settings customer needs provide when enabling log. </param>
        /// <param name="preserveRules"> Preserve Rules. </param>
        /// <param name="preserve"> Preserve rules. </param>
        /// <param name="validateDataConsistency"> Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="skipErrorFile"> Specify the fault tolerance for data consistency. </param>
        /// <returns> A new <see cref="Models.CopyActivity"/> instance for mocking. </returns>
        public static CopyActivity CopyActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<DatasetReference> inputs = null, IEnumerable<DatasetReference> outputs = null, CopySource source = null, CopySink sink = null, object translator = null, object enableStaging = null, StagingSettings stagingSettings = null, object parallelCopies = null, object dataIntegrationUnits = null, object enableSkipIncompatibleRow = null, RedirectIncompatibleRowSettings redirectIncompatibleRowSettings = null, LogStorageSettings logStorageSettings = null, LogSettings logSettings = null, IEnumerable<object> preserveRules = null, IEnumerable<object> preserve = null, object validateDataConsistency = null, SkipErrorFile skipErrorFile = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            inputs ??= new List<DatasetReference>();
            outputs ??= new List<DatasetReference>();
            preserveRules ??= new List<object>();
            preserve ??= new List<object>();

            return new CopyActivity(name, "Copy", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, inputs?.ToList(), outputs?.ToList(), source, sink, translator, enableStaging, stagingSettings, parallelCopies, dataIntegrationUnits, enableSkipIncompatibleRow, redirectIncompatibleRowSettings, logStorageSettings, logSettings, preserveRules?.ToList(), preserve?.ToList(), validateDataConsistency, skipErrorFile);
        }

        /// <summary> Initializes a new instance of StagingSettings. </summary>
        /// <param name="linkedServiceName"> Staging linked service reference. </param>
        /// <param name="path"> The path to storage for storing the interim data. Type: string (or Expression with resultType string). </param>
        /// <param name="enableCompression"> Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.StagingSettings"/> instance for mocking. </returns>
        public static StagingSettings StagingSettings(LinkedServiceReference linkedServiceName = null, object path = null, object enableCompression = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new StagingSettings(linkedServiceName, path, enableCompression, additionalProperties);
        }

        /// <summary> Initializes a new instance of RedirectIncompatibleRowSettings. </summary>
        /// <param name="linkedServiceName"> Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string). </param>
        /// <param name="path"> The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.RedirectIncompatibleRowSettings"/> instance for mocking. </returns>
        public static RedirectIncompatibleRowSettings RedirectIncompatibleRowSettings(object linkedServiceName = null, object path = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new RedirectIncompatibleRowSettings(linkedServiceName, path, additionalProperties);
        }

        /// <summary> Initializes a new instance of LogStorageSettings. </summary>
        /// <param name="linkedServiceName"> Log storage linked service reference. </param>
        /// <param name="path"> The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string). </param>
        /// <param name="logLevel"> Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string). </param>
        /// <param name="enableReliableLogging"> Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.LogStorageSettings"/> instance for mocking. </returns>
        public static LogStorageSettings LogStorageSettings(LinkedServiceReference linkedServiceName = null, object path = null, object logLevel = null, object enableReliableLogging = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new LogStorageSettings(linkedServiceName, path, logLevel, enableReliableLogging, additionalProperties);
        }

        /// <summary> Initializes a new instance of LogSettings. </summary>
        /// <param name="enableCopyActivityLog"> Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyActivityLogSettings"> Specifies settings for copy activity log. </param>
        /// <param name="logLocationSettings"> Log location settings customer needs to provide when enabling log. </param>
        /// <returns> A new <see cref="Models.LogSettings"/> instance for mocking. </returns>
        public static LogSettings LogSettings(object enableCopyActivityLog = null, CopyActivityLogSettings copyActivityLogSettings = null, LogLocationSettings logLocationSettings = null)
        {
            return new LogSettings(enableCopyActivityLog, copyActivityLogSettings, logLocationSettings);
        }

        /// <summary> Initializes a new instance of CopyActivityLogSettings. </summary>
        /// <param name="logLevel"> Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string). </param>
        /// <param name="enableReliableLogging"> Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.CopyActivityLogSettings"/> instance for mocking. </returns>
        public static CopyActivityLogSettings CopyActivityLogSettings(object logLevel = null, object enableReliableLogging = null)
        {
            return new CopyActivityLogSettings(logLevel, enableReliableLogging);
        }

        /// <summary> Initializes a new instance of LogLocationSettings. </summary>
        /// <param name="linkedServiceName"> Log storage linked service reference. </param>
        /// <param name="path"> The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.LogLocationSettings"/> instance for mocking. </returns>
        public static LogLocationSettings LogLocationSettings(LinkedServiceReference linkedServiceName = null, object path = null)
        {
            return new LogLocationSettings(linkedServiceName, path);
        }

        /// <summary> Initializes a new instance of SkipErrorFile. </summary>
        /// <param name="fileMissing"> Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="dataInconsistency"> Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SkipErrorFile"/> instance for mocking. </returns>
        public static SkipErrorFile SkipErrorFile(object fileMissing = null, object dataInconsistency = null)
        {
            return new SkipErrorFile(fileMissing, dataInconsistency);
        }

        /// <summary> Initializes a new instance of BinarySource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Binary store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Binary format settings. </param>
        /// <returns> A new <see cref="Models.BinarySource"/> instance for mocking. </returns>
        public static BinarySource BinarySource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreReadSettings storeSettings = null, BinaryReadSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new BinarySource("BinarySource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of TabularSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.TabularSource"/> instance for mocking. </returns>
        public static TabularSource TabularSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TabularSource("TabularSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of AzureTableSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="azureTableSourceQuery"> Azure Table source query. Type: string (or Expression with resultType string). </param>
        /// <param name="azureTableSourceIgnoreTableNotFound"> Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureTableSource"/> instance for mocking. </returns>
        public static AzureTableSource AzureTableSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object azureTableSourceQuery = null, object azureTableSourceIgnoreTableNotFound = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureTableSource("AzureTableSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, azureTableSourceQuery, azureTableSourceIgnoreTableNotFound);
        }

        /// <summary> Initializes a new instance of BlobSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="treatEmptyAsNull"> Treat empty as null. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="skipHeaderLineCount"> Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer). </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.BlobSource"/> instance for mocking. </returns>
        public static BlobSource BlobSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object treatEmptyAsNull = null, object skipHeaderLineCount = null, object recursive = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new BlobSource("BlobSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, treatEmptyAsNull, skipHeaderLineCount, recursive);
        }

        /// <summary> Initializes a new instance of DocumentDbCollectionSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Documents query. Type: string (or Expression with resultType string). </param>
        /// <param name="nestingSeparator"> Nested properties separator. Type: string (or Expression with resultType string). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.DocumentDbCollectionSource"/> instance for mocking. </returns>
        public static DocumentDbCollectionSource DocumentDbCollectionSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object nestingSeparator = null, object queryTimeout = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DocumentDbCollectionSource("DocumentDbCollectionSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, nestingSeparator, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of CosmosDbSqlApiSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> SQL API query. Type: string (or Expression with resultType string). </param>
        /// <param name="pageSize"> Page size of the result. Type: integer (or Expression with resultType integer). </param>
        /// <param name="preferredRegions"> Preferred regions. Type: array of strings (or Expression with resultType array of strings). </param>
        /// <param name="detectDatetime"> Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.CosmosDbSqlApiSource"/> instance for mocking. </returns>
        public static CosmosDbSqlApiSource CosmosDbSqlApiSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object pageSize = null, object preferredRegions = null, object detectDatetime = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CosmosDbSqlApiSource("CosmosDbSqlApiSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, pageSize, preferredRegions, detectDatetime, additionalColumns);
        }

        /// <summary> Initializes a new instance of DynamicsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> FetchXML is a proprietary query language that is used in Microsoft Dynamics (online &amp; on-premises). Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.DynamicsSource"/> instance for mocking. </returns>
        public static DynamicsSource DynamicsSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsSource("DynamicsSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of DynamicsCrmSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online &amp; on-premises). Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.DynamicsCrmSource"/> instance for mocking. </returns>
        public static DynamicsCrmSource DynamicsCrmSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsCrmSource("DynamicsCrmSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of CommonDataServiceForAppsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online &amp; on-premises). Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.CommonDataServiceForAppsSource"/> instance for mocking. </returns>
        public static CommonDataServiceForAppsSource CommonDataServiceForAppsSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CommonDataServiceForAppsSource("CommonDataServiceForAppsSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of RelationalSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.RelationalSource"/> instance for mocking. </returns>
        public static RelationalSource RelationalSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new RelationalSource("RelationalSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of InformixSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.InformixSource"/> instance for mocking. </returns>
        public static InformixSource InformixSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new InformixSource("InformixSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MicrosoftAccessSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.MicrosoftAccessSource"/> instance for mocking. </returns>
        public static MicrosoftAccessSource MicrosoftAccessSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MicrosoftAccessSource("MicrosoftAccessSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of Db2Source. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.Db2Source"/> instance for mocking. </returns>
        public static Db2Source Db2Source(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new Db2Source("Db2Source", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of OdbcSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OdbcSource"/> instance for mocking. </returns>
        public static OdbcSource OdbcSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OdbcSource("OdbcSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MySqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MySqlSource"/> instance for mocking. </returns>
        public static MySqlSource MySqlSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MySqlSource("MySqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of PostgreSqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PostgreSqlSource"/> instance for mocking. </returns>
        public static PostgreSqlSource PostgreSqlSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new PostgreSqlSource("PostgreSqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SybaseSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SybaseSource"/> instance for mocking. </returns>
        public static SybaseSource SybaseSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SybaseSource("SybaseSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SapBwSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> MDX query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapBwSource"/> instance for mocking. </returns>
        public static SapBwSource SapBwSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SapBwSource("SapBwSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ODataSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> OData query. For example, &quot;$top=1&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.ODataSource"/> instance for mocking. </returns>
        public static ODataSource ODataSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object httpRequestTimeout = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ODataSource("ODataSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, httpRequestTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of SalesforceSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="readBehavior"> The read behavior for the operation. Default is Query. </param>
        /// <returns> A new <see cref="Models.SalesforceSource"/> instance for mocking. </returns>
        public static SalesforceSource SalesforceSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, SalesforceSourceReadBehavior? readBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceSource("SalesforceSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, readBehavior);
        }

        /// <summary> Initializes a new instance of SalesforceServiceCloudSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="readBehavior"> The read behavior for the operation. Default is Query. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.SalesforceServiceCloudSource"/> instance for mocking. </returns>
        public static SalesforceServiceCloudSource SalesforceServiceCloudSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, SalesforceSourceReadBehavior? readBehavior = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceServiceCloudSource("SalesforceServiceCloudSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, readBehavior, additionalColumns);
        }

        /// <summary> Initializes a new instance of SapCloudForCustomerSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> SAP Cloud for Customer OData query. For example, &quot;$top=1&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SapCloudForCustomerSource"/> instance for mocking. </returns>
        public static SapCloudForCustomerSource SapCloudForCustomerSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, object httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SapCloudForCustomerSource("SapCloudForCustomerSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of SapEccSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> SAP ECC OData query. For example, &quot;$top=1&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SapEccSource"/> instance for mocking. </returns>
        public static SapEccSource SapEccSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, object httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SapEccSource("SapEccSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of SapHanaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> SAP HANA Sql query. Type: string (or Expression with resultType string). </param>
        /// <param name="packetSize"> The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for SAP HANA read in parallel. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for SAP HANA source partitioning. </param>
        /// <returns> A new <see cref="Models.SapHanaSource"/> instance for mocking. </returns>
        public static SapHanaSource SapHanaSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, object packetSize = null, SapHanaPartitionOption? partitionOption = null, SapHanaPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SapHanaSource("SapHanaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, packetSize, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of SapHanaPartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapHanaPartitionSettings"/> instance for mocking. </returns>
        public static SapHanaPartitionSettings SapHanaPartitionSettings(object partitionColumnName = null)
        {
            return new SapHanaPartitionSettings(partitionColumnName);
        }

        /// <summary> Initializes a new instance of SapOpenHubSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="excludeLastRequest"> Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="baseRequestId"> The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will be retrieved. The default value is 0. Type: integer (or Expression with resultType integer ). </param>
        /// <param name="customRfcReadTableFunctionModule"> Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string). </param>
        /// <param name="sapDataColumnDelimiter"> The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapOpenHubSource"/> instance for mocking. </returns>
        public static SapOpenHubSource SapOpenHubSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object excludeLastRequest = null, object baseRequestId = null, object customRfcReadTableFunctionModule = null, object sapDataColumnDelimiter = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SapOpenHubSource("SapOpenHubSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, excludeLastRequest, baseRequestId, customRfcReadTableFunctionModule, sapDataColumnDelimiter);
        }

        /// <summary> Initializes a new instance of SapOdpSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="extractionMode"> The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression with resultType string). </param>
        /// <param name="subscriberProcess"> The subscriber process to manage the delta process. Type: string (or Expression with resultType string). </param>
        /// <param name="selection"> Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array of objects). </param>
        /// <param name="projection"> Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.SapOdpSource"/> instance for mocking. </returns>
        public static SapOdpSource SapOdpSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object extractionMode = null, object subscriberProcess = null, object selection = null, object projection = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SapOdpSource("SapOdpSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, extractionMode, subscriberProcess, selection, projection);
        }

        /// <summary> Initializes a new instance of SapTableSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="rowCount"> The number of rows to be retrieved. Type: integer(or Expression with resultType integer). </param>
        /// <param name="rowSkips"> The number of rows that will be skipped. Type: integer (or Expression with resultType integer). </param>
        /// <param name="rfcTableFields"> The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType string). </param>
        /// <param name="rfcTableOptions"> The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType string). </param>
        /// <param name="batchSize"> Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer (or Expression with resultType integer). </param>
        /// <param name="customRfcReadTableFunctionModule"> Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with resultType string). </param>
        /// <param name="sapDataColumnDelimiter"> The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for SAP table read in parallel. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for SAP table source partitioning. </param>
        /// <returns> A new <see cref="Models.SapTableSource"/> instance for mocking. </returns>
        public static SapTableSource SapTableSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object rowCount = null, object rowSkips = null, object rfcTableFields = null, object rfcTableOptions = null, object batchSize = null, object customRfcReadTableFunctionModule = null, object sapDataColumnDelimiter = null, SapTablePartitionOption? partitionOption = null, SapTablePartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SapTableSource("SapTableSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, rowCount, rowSkips, rfcTableFields, rfcTableOptions, batchSize, customRfcReadTableFunctionModule, sapDataColumnDelimiter, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of SapTablePartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="maxPartitionsNumber"> The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SapTablePartitionSettings"/> instance for mocking. </returns>
        public static SapTablePartitionSettings SapTablePartitionSettings(object partitionColumnName = null, object partitionUpperBound = null, object partitionLowerBound = null, object maxPartitionsNumber = null)
        {
            return new SapTablePartitionSettings(partitionColumnName, partitionUpperBound, partitionLowerBound, maxPartitionsNumber);
        }

        /// <summary> Initializes a new instance of RestSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="requestMethod"> The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders"> The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="requestInterval"> The time to await before sending next request, in milliseconds. </param>
        /// <param name="httpCompressionType"> Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported option is Gzip. </param>
        /// <returns> A new <see cref="Models.RestSink"/> instance for mocking. </returns>
        public static RestSink RestSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object requestMethod = null, object additionalHeaders = null, object httpRequestTimeout = null, object requestInterval = null, object httpCompressionType = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new RestSink("RestSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, requestMethod, additionalHeaders, httpRequestTimeout, requestInterval, httpCompressionType);
        }

        /// <summary> Initializes a new instance of RestSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="requestMethod"> The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string). </param>
        /// <param name="requestBody"> The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalHeaders"> The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string). </param>
        /// <param name="paginationRules"> The pagination rules to compose next page requests. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:01:40. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="requestInterval"> The time to await before sending next page request. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.RestSource"/> instance for mocking. </returns>
        public static RestSource RestSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object requestMethod = null, object requestBody = null, object additionalHeaders = null, object paginationRules = null, object httpRequestTimeout = null, object requestInterval = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new RestSource("RestSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, requestMethod, requestBody, additionalHeaders, paginationRules, httpRequestTimeout, requestInterval, additionalColumns);
        }

        /// <summary> Initializes a new instance of SqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="isolationLevel"> Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot. The default value is ReadCommitted. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.SqlSource"/> instance for mocking. </returns>
        public static SqlSource SqlSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object sqlReaderQuery = null, object sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object isolationLevel = null, object partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlSource("SqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, isolationLevel, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of StoredProcedureParameter. </summary>
        /// <param name="value"> Stored procedure parameter value. Type: string (or Expression with resultType string). </param>
        /// <param name="type"> Stored procedure parameter type. </param>
        /// <returns> A new <see cref="Models.StoredProcedureParameter"/> instance for mocking. </returns>
        public static StoredProcedureParameter StoredProcedureParameter(object value = null, StoredProcedureParameterType? type = null)
        {
            return new StoredProcedureParameter(value, type);
        }

        /// <summary> Initializes a new instance of SqlPartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlPartitionSettings"/> instance for mocking. </returns>
        public static SqlPartitionSettings SqlPartitionSettings(object partitionColumnName = null, object partitionUpperBound = null, object partitionLowerBound = null)
        {
            return new SqlPartitionSettings(partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of SqlServerSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="produceAdditionalTypes"> Which additional types to produce. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.SqlServerSource"/> instance for mocking. </returns>
        public static SqlServerSource SqlServerSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object sqlReaderQuery = null, object sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object produceAdditionalTypes = null, object partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlServerSource("SqlServerSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, produceAdditionalTypes, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of AmazonRdsForSqlServerSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="produceAdditionalTypes"> Which additional types to produce. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.AmazonRdsForSqlServerSource"/> instance for mocking. </returns>
        public static AmazonRdsForSqlServerSource AmazonRdsForSqlServerSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object sqlReaderQuery = null, object sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object produceAdditionalTypes = null, object partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new AmazonRdsForSqlServerSource("AmazonRdsForSqlServerSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, produceAdditionalTypes, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of AzureSqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="produceAdditionalTypes"> Which additional types to produce. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.AzureSqlSource"/> instance for mocking. </returns>
        public static AzureSqlSource AzureSqlSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object sqlReaderQuery = null, object sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object produceAdditionalTypes = null, object partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new AzureSqlSource("AzureSqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, produceAdditionalTypes, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of SqlMISource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <param name="produceAdditionalTypes"> Which additional types to produce. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.SqlMISource"/> instance for mocking. </returns>
        public static SqlMISource SqlMISource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object sqlReaderQuery = null, object sqlReaderStoredProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object produceAdditionalTypes = null, object partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlMISource("SqlMISource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, produceAdditionalTypes, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of SqlDWSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="sqlReaderQuery"> SQL Data Warehouse reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlReaderStoredProcedureName"> Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. Type: object (or Expression with resultType object), itemType: StoredProcedureParameter. </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Sql read in parallel. Possible values include: &quot;None&quot;, &quot;PhysicalPartitionsOfTable&quot;, &quot;DynamicRange&quot;. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Sql source partitioning. </param>
        /// <returns> A new <see cref="Models.SqlDWSource"/> instance for mocking. </returns>
        public static SqlDWSource SqlDWSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object sqlReaderQuery = null, object sqlReaderStoredProcedureName = null, object storedProcedureParameters = null, object partitionOption = null, SqlPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlDWSource("SqlDWSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, sqlReaderQuery, sqlReaderStoredProcedureName, storedProcedureParameters, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of FileSystemSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.FileSystemSource"/> instance for mocking. </returns>
        public static FileSystemSource FileSystemSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FileSystemSource("FileSystemSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, recursive, additionalColumns);
        }

        /// <summary> Initializes a new instance of HdfsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="distcpSettings"> Specifies Distcp-related settings. </param>
        /// <returns> A new <see cref="Models.HdfsSource"/> instance for mocking. </returns>
        public static HdfsSource HdfsSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null, DistcpSettings distcpSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HdfsSource("HdfsSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, recursive, distcpSettings);
        }

        /// <summary> Initializes a new instance of AzureMySqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMySqlSource"/> instance for mocking. </returns>
        public static AzureMySqlSource AzureMySqlSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMySqlSource("AzureMySqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string). </param>
        /// <param name="noTruncation"> The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count limit. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerSource"/> instance for mocking. </returns>
        public static AzureDataExplorerSource AzureDataExplorerSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object noTruncation = null, object queryTimeout = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataExplorerSource("AzureDataExplorerSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, noTruncation, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of OracleSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="oracleReaderQuery"> Oracle reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Oracle read in parallel. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Oracle source partitioning. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.OracleSource"/> instance for mocking. </returns>
        public static OracleSource OracleSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object oracleReaderQuery = null, object queryTimeout = null, OraclePartitionOption? partitionOption = null, OraclePartitionSettings partitionSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OracleSource("OracleSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, oracleReaderQuery, queryTimeout, partitionOption, partitionSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of OraclePartitionSettings. </summary>
        /// <param name="partitionNames"> Names of the physical partitions of Oracle table. </param>
        /// <param name="partitionColumnName"> The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OraclePartitionSettings"/> instance for mocking. </returns>
        public static OraclePartitionSettings OraclePartitionSettings(object partitionNames = null, object partitionColumnName = null, object partitionUpperBound = null, object partitionLowerBound = null)
        {
            return new OraclePartitionSettings(partitionNames, partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of AmazonRdsForOracleSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="oracleReaderQuery"> AmazonRdsForOracle reader query. Type: string (or Expression with resultType string). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for AmazonRdsForOracle source partitioning. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForOracleSource"/> instance for mocking. </returns>
        public static AmazonRdsForOracleSource AmazonRdsForOracleSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object oracleReaderQuery = null, object queryTimeout = null, object partitionOption = null, AmazonRdsForOraclePartitionSettings partitionSettings = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonRdsForOracleSource("AmazonRdsForOracleSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, oracleReaderQuery, queryTimeout, partitionOption, partitionSettings, additionalColumns);
        }

        /// <summary> Initializes a new instance of AmazonRdsForOraclePartitionSettings. </summary>
        /// <param name="partitionNames"> Names of the physical partitions of AmazonRdsForOracle table. </param>
        /// <param name="partitionColumnName"> The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonRdsForOraclePartitionSettings"/> instance for mocking. </returns>
        public static AmazonRdsForOraclePartitionSettings AmazonRdsForOraclePartitionSettings(object partitionNames = null, object partitionColumnName = null, object partitionUpperBound = null, object partitionLowerBound = null)
        {
            return new AmazonRdsForOraclePartitionSettings(partitionNames, partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of TeradataSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Teradata query. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for teradata read in parallel. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for teradata source partitioning. </param>
        /// <returns> A new <see cref="Models.TeradataSource"/> instance for mocking. </returns>
        public static TeradataSource TeradataSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, TeradataPartitionOption? partitionOption = null, TeradataPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TeradataSource("TeradataSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of TeradataPartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TeradataPartitionSettings"/> instance for mocking. </returns>
        public static TeradataPartitionSettings TeradataPartitionSettings(object partitionColumnName = null, object partitionUpperBound = null, object partitionLowerBound = null)
        {
            return new TeradataPartitionSettings(partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of WebSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.WebSource"/> instance for mocking. </returns>
        public static WebSource WebSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new WebSource("WebSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, additionalColumns);
        }

        /// <summary> Initializes a new instance of CassandraSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression with resultType string). </param>
        /// <param name="consistencyLevel"> The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the client application. Cassandra checks the specified number of Cassandra servers for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is &apos;ONE&apos;. It is case-insensitive. </param>
        /// <returns> A new <see cref="Models.CassandraSource"/> instance for mocking. </returns>
        public static CassandraSource CassandraSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, CassandraSourceReadConsistencyLevels? consistencyLevel = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CassandraSource("CassandraSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, consistencyLevel);
        }

        /// <summary> Initializes a new instance of MongoDbSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.MongoDbSource"/> instance for mocking. </returns>
        public static MongoDbSource MongoDbSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbSource("MongoDbSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, additionalColumns);
        }

        /// <summary> Initializes a new instance of MongoDbAtlasSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filter"> Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). </param>
        /// <param name="cursorMethods"> Cursor methods for Mongodb query. </param>
        /// <param name="batchSize"> Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying the batch size will not affect the user or the application. This property&apos;s main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.MongoDbAtlasSource"/> instance for mocking. </returns>
        public static MongoDbAtlasSource MongoDbAtlasSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object filter = null, MongoDbCursorMethodsProperties cursorMethods = null, object batchSize = null, object queryTimeout = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbAtlasSource("MongoDbAtlasSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, filter, cursorMethods, batchSize, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of MongoDbCursorMethodsProperties. </summary>
        /// <param name="project"> Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string). </param>
        /// <param name="sort"> Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). </param>
        /// <param name="skip"> Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer). </param>
        /// <param name="limit"> Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.MongoDbCursorMethodsProperties"/> instance for mocking. </returns>
        public static MongoDbCursorMethodsProperties MongoDbCursorMethodsProperties(object project = null, object sort = null, object skip = null, object limit = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbCursorMethodsProperties(project, sort, skip, limit, additionalProperties);
        }

        /// <summary> Initializes a new instance of MongoDbV2Source. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filter"> Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). </param>
        /// <param name="cursorMethods"> Cursor methods for Mongodb query. </param>
        /// <param name="batchSize"> Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property&apos;s main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.MongoDbV2Source"/> instance for mocking. </returns>
        public static MongoDbV2Source MongoDbV2Source(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object filter = null, MongoDbCursorMethodsProperties cursorMethods = null, object batchSize = null, object queryTimeout = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MongoDbV2Source("MongoDbV2Source", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, filter, cursorMethods, batchSize, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of CosmosDbMongoDbApiSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="filter"> Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass an empty document ({}). Type: string (or Expression with resultType string). </param>
        /// <param name="cursorMethods"> Cursor methods for Mongodb query. </param>
        /// <param name="batchSize"> Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying the batch size will not affect the user or the application. This property&apos;s main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer). </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <returns> A new <see cref="Models.CosmosDbMongoDbApiSource"/> instance for mocking. </returns>
        public static CosmosDbMongoDbApiSource CosmosDbMongoDbApiSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object filter = null, MongoDbCursorMethodsProperties cursorMethods = null, object batchSize = null, object queryTimeout = null, object additionalColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CosmosDbMongoDbApiSource("CosmosDbMongoDbApiSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, filter, cursorMethods, batchSize, queryTimeout, additionalColumns);
        }

        /// <summary> Initializes a new instance of Office365Source. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="allowedGroups"> The groups containing all the users. Type: array of strings (or Expression with resultType array of strings). </param>
        /// <param name="userScopeFilterUri"> The user scope uri. Type: string (or Expression with resultType string). </param>
        /// <param name="dateFilterColumn"> The Column to apply the &lt;paramref name=&quot;StartTime&quot;/&gt; and &lt;paramref name=&quot;EndTime&quot;/&gt;. Type: string (or Expression with resultType string). </param>
        /// <param name="startTime"> Start time of the requested range for this dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="endTime"> End time of the requested range for this dataset. Type: string (or Expression with resultType string). </param>
        /// <param name="outputColumns"> The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). Example: [ { &quot;name&quot;: &quot;Id&quot; }, { &quot;name&quot;: &quot;CreatedDateTime&quot; } ]. </param>
        /// <returns> A new <see cref="Models.Office365Source"/> instance for mocking. </returns>
        public static Office365Source Office365Source(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object allowedGroups = null, object userScopeFilterUri = null, object dateFilterColumn = null, object startTime = null, object endTime = null, object outputColumns = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new Office365Source("Office365Source", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, allowedGroups, userScopeFilterUri, dateFilterColumn, startTime, endTime, outputColumns);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreSource"/> instance for mocking. </returns>
        public static AzureDataLakeStoreSource AzureDataLakeStoreSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object recursive = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataLakeStoreSource("AzureDataLakeStoreSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, recursive);
        }

        /// <summary> Initializes a new instance of AzureBlobFSSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="treatEmptyAsNull"> Treat empty as null. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="skipHeaderLineCount"> Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer). </param>
        /// <param name="recursive"> If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureBlobFSSource"/> instance for mocking. </returns>
        public static AzureBlobFSSource AzureBlobFSSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object treatEmptyAsNull = null, object skipHeaderLineCount = null, object recursive = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobFSSource("AzureBlobFSSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, treatEmptyAsNull, skipHeaderLineCount, recursive);
        }

        /// <summary> Initializes a new instance of HttpSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="httpRequestTimeout"> Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.HttpSource"/> instance for mocking. </returns>
        public static HttpSource HttpSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HttpSource("HttpSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of AmazonMWSSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AmazonMWSSource"/> instance for mocking. </returns>
        public static AmazonMWSSource AmazonMWSSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonMWSSource("AmazonMWSSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AzurePostgreSqlSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzurePostgreSqlSource"/> instance for mocking. </returns>
        public static AzurePostgreSqlSource AzurePostgreSqlSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzurePostgreSqlSource("AzurePostgreSqlSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AzurePostgreSqlSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzurePostgreSqlSink"/> instance for mocking. </returns>
        public static AzurePostgreSqlSink AzurePostgreSqlSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzurePostgreSqlSink("AzurePostgreSqlSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of AzureMySqlSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMySqlSink"/> instance for mocking. </returns>
        public static AzureMySqlSink AzureMySqlSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMySqlSink("AzureMySqlSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of ConcurSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ConcurSource"/> instance for mocking. </returns>
        public static ConcurSource ConcurSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ConcurSource("ConcurSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of CouchbaseSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CouchbaseSource"/> instance for mocking. </returns>
        public static CouchbaseSource CouchbaseSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CouchbaseSource("CouchbaseSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of DrillSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DrillSource"/> instance for mocking. </returns>
        public static DrillSource DrillSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DrillSource("DrillSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of EloquaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.EloquaSource"/> instance for mocking. </returns>
        public static EloquaSource EloquaSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new EloquaSource("EloquaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of GoogleBigQuerySource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleBigQuerySource"/> instance for mocking. </returns>
        public static GoogleBigQuerySource GoogleBigQuerySource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleBigQuerySource("GoogleBigQuerySource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of GreenplumSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GreenplumSource"/> instance for mocking. </returns>
        public static GreenplumSource GreenplumSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new GreenplumSource("GreenplumSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of HBaseSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HBaseSource"/> instance for mocking. </returns>
        public static HBaseSource HBaseSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HBaseSource("HBaseSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of HiveSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HiveSource"/> instance for mocking. </returns>
        public static HiveSource HiveSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HiveSource("HiveSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of HubspotSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.HubspotSource"/> instance for mocking. </returns>
        public static HubspotSource HubspotSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new HubspotSource("HubspotSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ImpalaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ImpalaSource"/> instance for mocking. </returns>
        public static ImpalaSource ImpalaSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ImpalaSource("ImpalaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of JiraSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.JiraSource"/> instance for mocking. </returns>
        public static JiraSource JiraSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new JiraSource("JiraSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MagentoSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MagentoSource"/> instance for mocking. </returns>
        public static MagentoSource MagentoSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MagentoSource("MagentoSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MariaDBSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MariaDBSource"/> instance for mocking. </returns>
        public static MariaDBSource MariaDBSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MariaDBSource("MariaDBSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AzureMariaDBSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMariaDBSource"/> instance for mocking. </returns>
        public static AzureMariaDBSource AzureMariaDBSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMariaDBSource("AzureMariaDBSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of MarketoSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MarketoSource"/> instance for mocking. </returns>
        public static MarketoSource MarketoSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MarketoSource("MarketoSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of PaypalSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PaypalSource"/> instance for mocking. </returns>
        public static PaypalSource PaypalSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new PaypalSource("PaypalSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of PhoenixSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PhoenixSource"/> instance for mocking. </returns>
        public static PhoenixSource PhoenixSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new PhoenixSource("PhoenixSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of PrestoSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.PrestoSource"/> instance for mocking. </returns>
        public static PrestoSource PrestoSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new PrestoSource("PrestoSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of QuickBooksSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.QuickBooksSource"/> instance for mocking. </returns>
        public static QuickBooksSource QuickBooksSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new QuickBooksSource("QuickBooksSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ServiceNowSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ServiceNowSource"/> instance for mocking. </returns>
        public static ServiceNowSource ServiceNowSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ServiceNowSource("ServiceNowSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ShopifySource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ShopifySource"/> instance for mocking. </returns>
        public static ShopifySource ShopifySource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ShopifySource("ShopifySource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SparkSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SparkSource"/> instance for mocking. </returns>
        public static SparkSource SparkSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SparkSource("SparkSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SquareSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SquareSource"/> instance for mocking. </returns>
        public static SquareSource SquareSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SquareSource("SquareSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of XeroSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.XeroSource"/> instance for mocking. </returns>
        public static XeroSource XeroSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new XeroSource("XeroSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ZohoSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ZohoSource"/> instance for mocking. </returns>
        public static ZohoSource ZohoSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ZohoSource("ZohoSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of NetezzaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionOption"> The partition mechanism that will be used for Netezza read in parallel. </param>
        /// <param name="partitionSettings"> The settings that will be leveraged for Netezza source partitioning. </param>
        /// <returns> A new <see cref="Models.NetezzaSource"/> instance for mocking. </returns>
        public static NetezzaSource NetezzaSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, NetezzaPartitionOption? partitionOption = null, NetezzaPartitionSettings partitionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new NetezzaSource("NetezzaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, partitionOption, partitionSettings);
        }

        /// <summary> Initializes a new instance of NetezzaPartitionSettings. </summary>
        /// <param name="partitionColumnName"> The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionUpperBound"> The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <param name="partitionLowerBound"> The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.NetezzaPartitionSettings"/> instance for mocking. </returns>
        public static NetezzaPartitionSettings NetezzaPartitionSettings(object partitionColumnName = null, object partitionUpperBound = null, object partitionLowerBound = null)
        {
            return new NetezzaPartitionSettings(partitionColumnName, partitionUpperBound, partitionLowerBound);
        }

        /// <summary> Initializes a new instance of VerticaSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.VerticaSource"/> instance for mocking. </returns>
        public static VerticaSource VerticaSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new VerticaSource("VerticaSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of SalesforceMarketingCloudSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SalesforceMarketingCloudSource"/> instance for mocking. </returns>
        public static SalesforceMarketingCloudSource SalesforceMarketingCloudSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceMarketingCloudSource("SalesforceMarketingCloudSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of ResponsysSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.ResponsysSource"/> instance for mocking. </returns>
        public static ResponsysSource ResponsysSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ResponsysSource("ResponsysSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of DynamicsAXSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.DynamicsAXSource"/> instance for mocking. </returns>
        public static DynamicsAXSource DynamicsAXSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, object httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsAXSource("DynamicsAXSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of OracleServiceCloudSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleServiceCloudSource"/> instance for mocking. </returns>
        public static OracleServiceCloudSource OracleServiceCloudSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OracleServiceCloudSource("OracleServiceCloudSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of GoogleAdWordsSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> A query to retrieve data from source. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.GoogleAdWordsSource"/> instance for mocking. </returns>
        public static GoogleAdWordsSource GoogleAdWordsSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new GoogleAdWordsSource("GoogleAdWordsSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query);
        }

        /// <summary> Initializes a new instance of AmazonRedshiftSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="queryTimeout"> Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="additionalColumns"> Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects). </param>
        /// <param name="query"> Database query. Type: string (or Expression with resultType string). </param>
        /// <param name="redshiftUnloadSettings"> The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the targeted sink from the interim S3. </param>
        /// <returns> A new <see cref="Models.AmazonRedshiftSource"/> instance for mocking. </returns>
        public static AmazonRedshiftSource AmazonRedshiftSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object queryTimeout = null, object additionalColumns = null, object query = null, RedshiftUnloadSettings redshiftUnloadSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AmazonRedshiftSource("AmazonRedshiftSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, queryTimeout, additionalColumns, query, redshiftUnloadSettings);
        }

        /// <summary> Initializes a new instance of SnowflakeSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Snowflake Sql query. Type: string (or Expression with resultType string). </param>
        /// <param name="exportSettings"> Snowflake export settings. </param>
        /// <returns> A new <see cref="Models.SnowflakeSource"/> instance for mocking. </returns>
        public static SnowflakeSource SnowflakeSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, SnowflakeExportCopyCommand exportSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SnowflakeSource("SnowflakeSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, exportSettings);
        }

        /// <summary> Initializes a new instance of SnowflakeExportCopyCommand. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="additionalCopyOptions"> Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalCopyOptions&quot;: { &quot;DATE_FORMAT&quot;: &quot;MM/DD/YYYY&quot;, &quot;TIME_FORMAT&quot;: &quot;&apos;HH24:MI:SS.FF&apos;&quot; }. </param>
        /// <param name="additionalFormatOptions"> Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalFormatOptions&quot;: { &quot;OVERWRITE&quot;: &quot;TRUE&quot;, &quot;MAX_FILE_SIZE&quot;: &quot;&apos;FALSE&apos;&quot; }. </param>
        /// <returns> A new <see cref="Models.SnowflakeExportCopyCommand"/> instance for mocking. </returns>
        public static SnowflakeExportCopyCommand SnowflakeExportCopyCommand(IDictionary<string, object> additionalProperties = null, IDictionary<string, object> additionalCopyOptions = null, IDictionary<string, object> additionalFormatOptions = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            additionalCopyOptions ??= new Dictionary<string, object>();
            additionalFormatOptions ??= new Dictionary<string, object>();

            return new SnowflakeExportCopyCommand("SnowflakeExportCopyCommand", additionalProperties, additionalCopyOptions, additionalFormatOptions);
        }

        /// <summary> Initializes a new instance of ExportSettings. </summary>
        /// <param name="type"> The export setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ExportSettings"/> instance for mocking. </returns>
        public static ExportSettings ExportSettings(string type = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ExportSettings(type, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string). </param>
        /// <param name="exportSettings"> Azure Databricks Delta Lake export settings. </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeSource"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeSource AzureDatabricksDeltaLakeSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, AzureDatabricksDeltaLakeExportCommand exportSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDatabricksDeltaLakeSource("AzureDatabricksDeltaLakeSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, exportSettings);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeExportCommand. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dateFormat"> Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). </param>
        /// <param name="timestampFormat"> Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeExportCommand"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeExportCommand AzureDatabricksDeltaLakeExportCommand(IDictionary<string, object> additionalProperties = null, object dateFormat = null, object timestampFormat = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDatabricksDeltaLakeExportCommand("AzureDatabricksDeltaLakeExportCommand", additionalProperties, dateFormat, timestampFormat);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="importSettings"> Azure Databricks Delta Lake import settings. </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeSink"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeSink AzureDatabricksDeltaLakeSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null, AzureDatabricksDeltaLakeImportCommand importSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDatabricksDeltaLakeSink("AzureDatabricksDeltaLakeSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript, importSettings);
        }

        /// <summary> Initializes a new instance of AzureDatabricksDeltaLakeImportCommand. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="dateFormat"> Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). </param>
        /// <param name="timestampFormat"> Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureDatabricksDeltaLakeImportCommand"/> instance for mocking. </returns>
        public static AzureDatabricksDeltaLakeImportCommand AzureDatabricksDeltaLakeImportCommand(IDictionary<string, object> additionalProperties = null, object dateFormat = null, object timestampFormat = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDatabricksDeltaLakeImportCommand("AzureDatabricksDeltaLakeImportCommand", additionalProperties, dateFormat, timestampFormat);
        }

        /// <summary> Initializes a new instance of ImportSettings. </summary>
        /// <param name="type"> The import setting type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ImportSettings"/> instance for mocking. </returns>
        public static ImportSettings ImportSettings(string type = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ImportSettings(type, additionalProperties);
        }

        /// <summary> Initializes a new instance of NotebookParameter. </summary>
        /// <param name="value"> Notebook parameter value. Type: string (or Expression with resultType string). </param>
        /// <param name="type"> Notebook parameter type. </param>
        /// <returns> A new <see cref="Models.NotebookParameter"/> instance for mocking. </returns>
        public static NotebookParameter NotebookParameter(object value = null, NotebookParameterType? type = null)
        {
            return new NotebookParameter(value, type);
        }

        /// <summary> Initializes a new instance of SapCloudForCustomerSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. Default is &apos;Insert&apos;. </param>
        /// <param name="httpRequestTimeout"> The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data. Default value: 00:05:00. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SapCloudForCustomerSink"/> instance for mocking. </returns>
        public static SapCloudForCustomerSink SapCloudForCustomerSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, SapCloudForCustomerSinkWriteBehavior? writeBehavior = null, object httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SapCloudForCustomerSink("SapCloudForCustomerSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of AzureQueueSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.AzureQueueSink"/> instance for mocking. </returns>
        public static AzureQueueSink AzureQueueSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureQueueSink("AzureQueueSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties);
        }

        /// <summary> Initializes a new instance of AzureTableSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="azureTableDefaultPartitionKeyValue"> Azure Table default partition key value. Type: string (or Expression with resultType string). </param>
        /// <param name="azureTablePartitionKeyName"> Azure Table partition key name. Type: string (or Expression with resultType string). </param>
        /// <param name="azureTableRowKeyName"> Azure Table row key name. Type: string (or Expression with resultType string). </param>
        /// <param name="azureTableInsertType"> Azure Table insert type. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureTableSink"/> instance for mocking. </returns>
        public static AzureTableSink AzureTableSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object azureTableDefaultPartitionKeyValue = null, object azureTablePartitionKeyName = null, object azureTableRowKeyName = null, object azureTableInsertType = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureTableSink("AzureTableSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, azureTableDefaultPartitionKeyValue, azureTablePartitionKeyName, azureTableRowKeyName, azureTableInsertType);
        }

        /// <summary> Initializes a new instance of AvroSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Avro store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Avro format settings. </param>
        /// <returns> A new <see cref="Models.AvroSink"/> instance for mocking. </returns>
        public static AvroSink AvroSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreWriteSettings storeSettings = null, AvroWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AvroSink("AvroSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of ParquetSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Parquet store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <param name="formatSettings"> Parquet format settings. </param>
        /// <returns> A new <see cref="Models.ParquetSink"/> instance for mocking. </returns>
        public static ParquetSink ParquetSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreWriteSettings storeSettings = null, ParquetWriteSettings formatSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ParquetSink("ParquetSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of BinarySink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="storeSettings">
        /// Binary store settings.
        /// Please note <see cref="StoreWriteSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBlobFSWriteSettings"/>, <see cref="AzureBlobStorageWriteSettings"/>, <see cref="AzureDataLakeStoreWriteSettings"/>, <see cref="AzureFileStorageWriteSettings"/>, <see cref="FileServerWriteSettings"/> and <see cref="SftpWriteSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.BinarySink"/> instance for mocking. </returns>
        public static BinarySink BinarySink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, StoreWriteSettings storeSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new BinarySink("BinarySink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, storeSettings);
        }

        /// <summary> Initializes a new instance of BlobSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="blobWriterOverwriteFiles"> Blob writer overwrite files. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="blobWriterDateTimeFormat"> Blob writer date time format. Type: string (or Expression with resultType string). </param>
        /// <param name="blobWriterAddHeader"> Blob writer add header. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <returns> A new <see cref="Models.BlobSink"/> instance for mocking. </returns>
        public static BlobSink BlobSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object blobWriterOverwriteFiles = null, object blobWriterDateTimeFormat = null, object blobWriterAddHeader = null, object copyBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new BlobSink("BlobSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, blobWriterOverwriteFiles, blobWriterDateTimeFormat, blobWriterAddHeader, copyBehavior);
        }

        /// <summary> Initializes a new instance of FileSystemSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <returns> A new <see cref="Models.FileSystemSink"/> instance for mocking. </returns>
        public static FileSystemSink FileSystemSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object copyBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new FileSystemSink("FileSystemSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, copyBehavior);
        }

        /// <summary> Initializes a new instance of DocumentDbCollectionSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="nestingSeparator"> Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string). </param>
        /// <param name="writeBehavior"> Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert. </param>
        /// <returns> A new <see cref="Models.DocumentDbCollectionSink"/> instance for mocking. </returns>
        public static DocumentDbCollectionSink DocumentDbCollectionSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object nestingSeparator = null, object writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DocumentDbCollectionSink("DocumentDbCollectionSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, nestingSeparator, writeBehavior);
        }

        /// <summary> Initializes a new instance of CosmosDbSqlApiSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert and upsert. </param>
        /// <returns> A new <see cref="Models.CosmosDbSqlApiSink"/> instance for mocking. </returns>
        public static CosmosDbSqlApiSink CosmosDbSqlApiSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CosmosDbSqlApiSink("CosmosDbSqlApiSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior);
        }

        /// <summary> Initializes a new instance of SqlSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName"> SQL writer stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterTableType"> SQL writer table type. Type: string (or Expression with resultType string). </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> SQL stored procedure parameters. </param>
        /// <param name="storedProcedureTableTypeParameterName"> The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlSink"/> instance for mocking. </returns>
        public static SqlSink SqlSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object sqlWriterStoredProcedureName = null, object sqlWriterTableType = null, object preCopyScript = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object storedProcedureTableTypeParameterName = null, object tableOption = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlSink("SqlSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, sqlWriterStoredProcedureName, sqlWriterTableType, preCopyScript, storedProcedureParameters, storedProcedureTableTypeParameterName, tableOption);
        }

        /// <summary> Initializes a new instance of SqlServerSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName"> SQL writer stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterTableType"> SQL writer table type. Type: string (or Expression with resultType string). </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> SQL stored procedure parameters. </param>
        /// <param name="storedProcedureTableTypeParameterName"> The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlServerSink"/> instance for mocking. </returns>
        public static SqlServerSink SqlServerSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object sqlWriterStoredProcedureName = null, object sqlWriterTableType = null, object preCopyScript = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object storedProcedureTableTypeParameterName = null, object tableOption = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlServerSink("SqlServerSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, sqlWriterStoredProcedureName, sqlWriterTableType, preCopyScript, storedProcedureParameters, storedProcedureTableTypeParameterName, tableOption);
        }

        /// <summary> Initializes a new instance of AzureSqlSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName"> SQL writer stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterTableType"> SQL writer table type. Type: string (or Expression with resultType string). </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> SQL stored procedure parameters. </param>
        /// <param name="storedProcedureTableTypeParameterName"> The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureSqlSink"/> instance for mocking. </returns>
        public static AzureSqlSink AzureSqlSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object sqlWriterStoredProcedureName = null, object sqlWriterTableType = null, object preCopyScript = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object storedProcedureTableTypeParameterName = null, object tableOption = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new AzureSqlSink("AzureSqlSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, sqlWriterStoredProcedureName, sqlWriterTableType, preCopyScript, storedProcedureParameters, storedProcedureTableTypeParameterName, tableOption);
        }

        /// <summary> Initializes a new instance of SqlMISink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlWriterStoredProcedureName"> SQL writer stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="sqlWriterTableType"> SQL writer table type. Type: string (or Expression with resultType string). </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> SQL stored procedure parameters. </param>
        /// <param name="storedProcedureTableTypeParameterName"> The stored procedure parameter name of the table type. Type: string (or Expression with resultType string). </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlMISink"/> instance for mocking. </returns>
        public static SqlMISink SqlMISink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object sqlWriterStoredProcedureName = null, object sqlWriterTableType = null, object preCopyScript = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null, object storedProcedureTableTypeParameterName = null, object tableOption = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlMISink("SqlMISink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, sqlWriterStoredProcedureName, sqlWriterTableType, preCopyScript, storedProcedureParameters, storedProcedureTableTypeParameterName, tableOption);
        }

        /// <summary> Initializes a new instance of SqlDWSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="allowPolyBase"> Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="polyBaseSettings"> Specifies PolyBase-related settings when allowPolyBase is true. </param>
        /// <param name="allowCopyCommand"> Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="copyCommandSettings"> Specifies Copy Command related settings when allowCopyCommand is true. </param>
        /// <param name="tableOption"> The option to handle sink table, such as autoCreate. For now only &apos;autoCreate&apos; value is supported. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.SqlDWSink"/> instance for mocking. </returns>
        public static SqlDWSink SqlDWSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null, object allowPolyBase = null, PolybaseSettings polyBaseSettings = null, object allowCopyCommand = null, DWCopyCommandSettings copyCommandSettings = null, object tableOption = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlDWSink("SqlDWSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript, allowPolyBase, polyBaseSettings, allowCopyCommand, copyCommandSettings, tableOption);
        }

        /// <summary> Initializes a new instance of PolybaseSettings. </summary>
        /// <param name="rejectType"> Reject type. </param>
        /// <param name="rejectValue"> Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression with resultType number), minimum: 0. </param>
        /// <param name="rejectSampleValue"> Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="useTypeDefault"> Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.PolybaseSettings"/> instance for mocking. </returns>
        public static PolybaseSettings PolybaseSettings(PolybaseSettingsRejectType? rejectType = null, object rejectValue = null, object rejectSampleValue = null, object useTypeDefault = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new PolybaseSettings(rejectType, rejectValue, rejectSampleValue, useTypeDefault, additionalProperties);
        }

        /// <summary> Initializes a new instance of DWCopyCommandSettings. </summary>
        /// <param name="defaultValues"> Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT constraint set in the DB, and identity column cannot have a default value. Type: array of objects (or Expression with resultType array of objects). </param>
        /// <param name="additionalOptions"> Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalOptions&quot;: { &quot;MAXERRORS&quot;: &quot;1000&quot;, &quot;DATEFORMAT&quot;: &quot;&apos;ymd&apos;&quot; }. </param>
        /// <returns> A new <see cref="Models.DWCopyCommandSettings"/> instance for mocking. </returns>
        public static DWCopyCommandSettings DWCopyCommandSettings(IEnumerable<DWCopyCommandDefaultValue> defaultValues = null, IDictionary<string, string> additionalOptions = null)
        {
            defaultValues ??= new List<DWCopyCommandDefaultValue>();
            additionalOptions ??= new Dictionary<string, string>();

            return new DWCopyCommandSettings(defaultValues?.ToList(), additionalOptions);
        }

        /// <summary> Initializes a new instance of DWCopyCommandDefaultValue. </summary>
        /// <param name="columnName"> Column name. Type: object (or Expression with resultType string). </param>
        /// <param name="defaultValue"> The default value of the column. Type: object (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DWCopyCommandDefaultValue"/> instance for mocking. </returns>
        public static DWCopyCommandDefaultValue DWCopyCommandDefaultValue(object columnName = null, object defaultValue = null)
        {
            return new DWCopyCommandDefaultValue(columnName, defaultValue);
        }

        /// <summary> Initializes a new instance of SnowflakeSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <param name="importSettings"> Snowflake import settings. </param>
        /// <returns> A new <see cref="Models.SnowflakeSink"/> instance for mocking. </returns>
        public static SnowflakeSink SnowflakeSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null, SnowflakeImportCopyCommand importSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SnowflakeSink("SnowflakeSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript, importSettings);
        }

        /// <summary> Initializes a new instance of SnowflakeImportCopyCommand. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="additionalCopyOptions"> Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalCopyOptions&quot;: { &quot;DATE_FORMAT&quot;: &quot;MM/DD/YYYY&quot;, &quot;TIME_FORMAT&quot;: &quot;&apos;HH24:MI:SS.FF&apos;&quot; }. </param>
        /// <param name="additionalFormatOptions"> Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type) (or Expression with resultType object). Example: &quot;additionalFormatOptions&quot;: { &quot;FORCE&quot;: &quot;TRUE&quot;, &quot;LOAD_UNCERTAIN_FILES&quot;: &quot;&apos;FALSE&apos;&quot; }. </param>
        /// <returns> A new <see cref="Models.SnowflakeImportCopyCommand"/> instance for mocking. </returns>
        public static SnowflakeImportCopyCommand SnowflakeImportCopyCommand(IDictionary<string, object> additionalProperties = null, IDictionary<string, object> additionalCopyOptions = null, IDictionary<string, object> additionalFormatOptions = null)
        {
            additionalProperties ??= new Dictionary<string, object>();
            additionalCopyOptions ??= new Dictionary<string, object>();
            additionalFormatOptions ??= new Dictionary<string, object>();

            return new SnowflakeImportCopyCommand("SnowflakeImportCopyCommand", additionalProperties, additionalCopyOptions, additionalFormatOptions);
        }

        /// <summary> Initializes a new instance of OracleSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> SQL pre-copy script. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OracleSink"/> instance for mocking. </returns>
        public static OracleSink OracleSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OracleSink("OracleSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of AzureDataLakeStoreSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <param name="enableAdlsSingleFileParallel"> Single File Parallel. </param>
        /// <returns> A new <see cref="Models.AzureDataLakeStoreSink"/> instance for mocking. </returns>
        public static AzureDataLakeStoreSink AzureDataLakeStoreSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object copyBehavior = null, object enableAdlsSingleFileParallel = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataLakeStoreSink("AzureDataLakeStoreSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, copyBehavior, enableAdlsSingleFileParallel);
        }

        /// <summary> Initializes a new instance of AzureBlobFSSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="copyBehavior"> The type of copy behavior for copy sink. </param>
        /// <returns> A new <see cref="Models.AzureBlobFSSink"/> instance for mocking. </returns>
        public static AzureBlobFSSink AzureBlobFSSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object copyBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureBlobFSSink("AzureBlobFSSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, copyBehavior);
        }

        /// <summary> Initializes a new instance of AzureSearchIndexSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> Specify the write behavior when upserting documents into Azure Search Index. </param>
        /// <returns> A new <see cref="Models.AzureSearchIndexSink"/> instance for mocking. </returns>
        public static AzureSearchIndexSink AzureSearchIndexSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, AzureSearchIndexWriteBehaviorType? writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureSearchIndexSink("AzureSearchIndexSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior);
        }

        /// <summary> Initializes a new instance of OdbcSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.OdbcSink"/> instance for mocking. </returns>
        public static OdbcSink OdbcSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new OdbcSink("OdbcSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of InformixSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.InformixSink"/> instance for mocking. </returns>
        public static InformixSink InformixSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new InformixSink("InformixSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of MicrosoftAccessSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="preCopyScript"> A query to execute before starting the copy. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.MicrosoftAccessSink"/> instance for mocking. </returns>
        public static MicrosoftAccessSink MicrosoftAccessSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object preCopyScript = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new MicrosoftAccessSink("MicrosoftAccessSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, preCopyScript);
        }

        /// <summary> Initializes a new instance of DynamicsSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. </param>
        /// <param name="ignoreNullValues"> The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="alternateKeyName"> The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsSink"/> instance for mocking. </returns>
        public static DynamicsSink DynamicsSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, DynamicsSinkWriteBehavior writeBehavior = default, object ignoreNullValues = null, object alternateKeyName = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsSink("DynamicsSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior, ignoreNullValues, alternateKeyName);
        }

        /// <summary> Initializes a new instance of DynamicsCrmSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. </param>
        /// <param name="ignoreNullValues"> The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="alternateKeyName"> The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DynamicsCrmSink"/> instance for mocking. </returns>
        public static DynamicsCrmSink DynamicsCrmSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, DynamicsSinkWriteBehavior writeBehavior = default, object ignoreNullValues = null, object alternateKeyName = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new DynamicsCrmSink("DynamicsCrmSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior, ignoreNullValues, alternateKeyName);
        }

        /// <summary> Initializes a new instance of CommonDataServiceForAppsSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. </param>
        /// <param name="ignoreNullValues"> The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="alternateKeyName"> The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CommonDataServiceForAppsSink"/> instance for mocking. </returns>
        public static CommonDataServiceForAppsSink CommonDataServiceForAppsSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, DynamicsSinkWriteBehavior writeBehavior = default, object ignoreNullValues = null, object alternateKeyName = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CommonDataServiceForAppsSink("CommonDataServiceForAppsSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior, ignoreNullValues, alternateKeyName);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="ingestionMappingName"> A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string. </param>
        /// <param name="ingestionMappingAsJson"> An explicit column mapping description provided in a json format. Type: string. </param>
        /// <param name="flushImmediately"> If set to true, any aggregation will be skipped. Default is false. Type: boolean. </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerSink"/> instance for mocking. </returns>
        public static AzureDataExplorerSink AzureDataExplorerSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object ingestionMappingName = null, object ingestionMappingAsJson = null, object flushImmediately = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataExplorerSink("AzureDataExplorerSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, ingestionMappingName, ingestionMappingAsJson, flushImmediately);
        }

        /// <summary> Initializes a new instance of SalesforceSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. Default is Insert. </param>
        /// <param name="externalIdFieldName"> The name of the external ID field for upsert operation. Default value is &apos;Id&apos; column. Type: string (or Expression with resultType string). </param>
        /// <param name="ignoreNullValues"> The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SalesforceSink"/> instance for mocking. </returns>
        public static SalesforceSink SalesforceSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, SalesforceSinkWriteBehavior? writeBehavior = null, object externalIdFieldName = null, object ignoreNullValues = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceSink("SalesforceSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior, externalIdFieldName, ignoreNullValues);
        }

        /// <summary> Initializes a new instance of SalesforceServiceCloudSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> The write behavior for the operation. Default is Insert. </param>
        /// <param name="externalIdFieldName"> The name of the external ID field for upsert operation. Default value is &apos;Id&apos; column. Type: string (or Expression with resultType string). </param>
        /// <param name="ignoreNullValues"> The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation. Default value is false. If set it to true, it means ADF will leave the data in the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert operation, versus ADF will update the data in the destination object to NULL when doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.SalesforceServiceCloudSink"/> instance for mocking. </returns>
        public static SalesforceServiceCloudSink SalesforceServiceCloudSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, SalesforceSinkWriteBehavior? writeBehavior = null, object externalIdFieldName = null, object ignoreNullValues = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SalesforceServiceCloudSink("SalesforceServiceCloudSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior, externalIdFieldName, ignoreNullValues);
        }

        /// <summary> Initializes a new instance of CosmosDbMongoDbApiSink. </summary>
        /// <param name="writeBatchSize"> Write batch size. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="writeBatchTimeout"> Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sinkRetryCount"> Sink retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sinkRetryWait"> Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="writeBehavior"> Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default value is &quot;insert&quot;. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.CosmosDbMongoDbApiSink"/> instance for mocking. </returns>
        public static CosmosDbMongoDbApiSink CosmosDbMongoDbApiSink(object writeBatchSize = null, object writeBatchTimeout = null, object sinkRetryCount = null, object sinkRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object writeBehavior = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CosmosDbMongoDbApiSink("CosmosDbMongoDbApiSink", writeBatchSize, writeBatchTimeout, sinkRetryCount, sinkRetryWait, maxConcurrentConnections, additionalProperties, writeBehavior);
        }

        /// <summary> Initializes a new instance of CopyTranslator. </summary>
        /// <param name="type"> Copy translator type. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.CopyTranslator"/> instance for mocking. </returns>
        public static CopyTranslator CopyTranslator(string type = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new CopyTranslator(type, additionalProperties);
        }

        /// <summary> Initializes a new instance of TabularTranslator. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="columnMappings"> Column mappings. Example: &quot;UserId: MyUserId, Group: MyGroup, Name: MyName&quot; Type: string (or Expression with resultType string). This property will be retired. Please use mappings property. </param>
        /// <param name="schemaMapping"> The schema mapping to map between tabular data and hierarchical data. Example: {&quot;Column1&quot;: &quot;$.Column1&quot;, &quot;Column2&quot;: &quot;$.Column2.Property1&quot;, &quot;Column3&quot;: &quot;$.Column2.Property2&quot;}. Type: object (or Expression with resultType object). This property will be retired. Please use mappings property. </param>
        /// <param name="collectionReference"> The JSON Path of the Nested Array that is going to do cross-apply. Type: object (or Expression with resultType object). </param>
        /// <param name="mapComplexValuesToString"> Whether to map complex (array and object) values to simple strings in json format. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="mappings"> Column mappings with logical types. Tabular-&gt;tabular example: [{&quot;source&quot;:{&quot;name&quot;:&quot;CustomerName&quot;,&quot;type&quot;:&quot;String&quot;},&quot;sink&quot;:{&quot;name&quot;:&quot;ClientName&quot;,&quot;type&quot;:&quot;String&quot;}},{&quot;source&quot;:{&quot;name&quot;:&quot;CustomerAddress&quot;,&quot;type&quot;:&quot;String&quot;},&quot;sink&quot;:{&quot;name&quot;:&quot;ClientAddress&quot;,&quot;type&quot;:&quot;String&quot;}}].  Hierarchical-&gt;tabular example: [{&quot;source&quot;:{&quot;path&quot;:&quot;$.CustomerName&quot;,&quot;type&quot;:&quot;String&quot;},&quot;sink&quot;:{&quot;name&quot;:&quot;ClientName&quot;,&quot;type&quot;:&quot;String&quot;}},{&quot;source&quot;:{&quot;path&quot;:&quot;$.CustomerAddress&quot;,&quot;type&quot;:&quot;String&quot;},&quot;sink&quot;:{&quot;name&quot;:&quot;ClientAddress&quot;,&quot;type&quot;:&quot;String&quot;}}]. Type: object (or Expression with resultType object). </param>
        /// <param name="typeConversion"> Whether to enable the advanced type conversion feature in the Copy activity. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="typeConversionSettings"> Type conversion settings. </param>
        /// <returns> A new <see cref="Models.TabularTranslator"/> instance for mocking. </returns>
        public static TabularTranslator TabularTranslator(IDictionary<string, object> additionalProperties = null, object columnMappings = null, object schemaMapping = null, object collectionReference = null, object mapComplexValuesToString = null, object mappings = null, object typeConversion = null, TypeConversionSettings typeConversionSettings = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new TabularTranslator("TabularTranslator", additionalProperties, columnMappings, schemaMapping, collectionReference, mapComplexValuesToString, mappings, typeConversion, typeConversionSettings);
        }

        /// <summary> Initializes a new instance of TypeConversionSettings. </summary>
        /// <param name="allowDataTruncation"> Whether to allow data truncation when converting the data. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="treatBooleanAsNumber"> Whether to treat boolean values as numbers. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="dateTimeFormat"> The format for DateTime values. Type: string (or Expression with resultType string). </param>
        /// <param name="dateTimeOffsetFormat"> The format for DateTimeOffset values. Type: string (or Expression with resultType string). </param>
        /// <param name="timeSpanFormat"> The format for TimeSpan values. Type: string (or Expression with resultType string). </param>
        /// <param name="culture"> The culture used to convert data from/to string. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.TypeConversionSettings"/> instance for mocking. </returns>
        public static TypeConversionSettings TypeConversionSettings(object allowDataTruncation = null, object treatBooleanAsNumber = null, object dateTimeFormat = null, object dateTimeOffsetFormat = null, object timeSpanFormat = null, object culture = null)
        {
            return new TypeConversionSettings(allowDataTruncation, treatBooleanAsNumber, dateTimeFormat, dateTimeOffsetFormat, timeSpanFormat, culture);
        }

        /// <summary> Initializes a new instance of HDInsightHiveActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storageLinkedServices"> Storage linked service references. </param>
        /// <param name="arguments"> User specified arguments to HDInsightActivity. </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="scriptPath"> Script path. Type: string (or Expression with resultType string). </param>
        /// <param name="scriptLinkedService"> Script linked service reference. </param>
        /// <param name="defines"> Allows user to specify defines for Hive job request. </param>
        /// <param name="variables"> User specified arguments under hivevar namespace. </param>
        /// <param name="queryTimeout"> Query timeout value (in minutes).  Effective when the HDInsight cluster is with ESP (Enterprise Security Package). </param>
        /// <returns> A new <see cref="Models.HDInsightHiveActivity"/> instance for mocking. </returns>
        public static HDInsightHiveActivity HDInsightHiveActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<LinkedServiceReference> storageLinkedServices = null, IEnumerable<object> arguments = null, HDInsightActivityDebugInfoOption? getDebugInfo = null, object scriptPath = null, LinkedServiceReference scriptLinkedService = null, IDictionary<string, object> defines = null, IEnumerable<object> variables = null, int? queryTimeout = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            storageLinkedServices ??= new List<LinkedServiceReference>();
            arguments ??= new List<object>();
            defines ??= new Dictionary<string, object>();
            variables ??= new List<object>();

            return new HDInsightHiveActivity(name, "HDInsightHive", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storageLinkedServices?.ToList(), arguments?.ToList(), getDebugInfo, scriptPath, scriptLinkedService, defines, variables?.ToList(), queryTimeout);
        }

        /// <summary> Initializes a new instance of HDInsightPigActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storageLinkedServices"> Storage linked service references. </param>
        /// <param name="arguments"> User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array). </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="scriptPath"> Script path. Type: string (or Expression with resultType string). </param>
        /// <param name="scriptLinkedService"> Script linked service reference. </param>
        /// <param name="defines"> Allows user to specify defines for Pig job request. </param>
        /// <returns> A new <see cref="Models.HDInsightPigActivity"/> instance for mocking. </returns>
        public static HDInsightPigActivity HDInsightPigActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<LinkedServiceReference> storageLinkedServices = null, object arguments = null, HDInsightActivityDebugInfoOption? getDebugInfo = null, object scriptPath = null, LinkedServiceReference scriptLinkedService = null, IDictionary<string, object> defines = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            storageLinkedServices ??= new List<LinkedServiceReference>();
            defines ??= new Dictionary<string, object>();

            return new HDInsightPigActivity(name, "HDInsightPig", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storageLinkedServices?.ToList(), arguments, getDebugInfo, scriptPath, scriptLinkedService, defines);
        }

        /// <summary> Initializes a new instance of HDInsightMapReduceActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storageLinkedServices"> Storage linked service references. </param>
        /// <param name="arguments"> User specified arguments to HDInsightActivity. </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="className"> Class name. Type: string (or Expression with resultType string). </param>
        /// <param name="jarFilePath"> Jar path. Type: string (or Expression with resultType string). </param>
        /// <param name="jarLinkedService"> Jar linked service reference. </param>
        /// <param name="jarLibs"> Jar libs. </param>
        /// <param name="defines"> Allows user to specify defines for the MapReduce job request. </param>
        /// <returns> A new <see cref="Models.HDInsightMapReduceActivity"/> instance for mocking. </returns>
        public static HDInsightMapReduceActivity HDInsightMapReduceActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<LinkedServiceReference> storageLinkedServices = null, IEnumerable<object> arguments = null, HDInsightActivityDebugInfoOption? getDebugInfo = null, object className = null, object jarFilePath = null, LinkedServiceReference jarLinkedService = null, IEnumerable<object> jarLibs = null, IDictionary<string, object> defines = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            storageLinkedServices ??= new List<LinkedServiceReference>();
            arguments ??= new List<object>();
            jarLibs ??= new List<object>();
            defines ??= new Dictionary<string, object>();

            return new HDInsightMapReduceActivity(name, "HDInsightMapReduce", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storageLinkedServices?.ToList(), arguments?.ToList(), getDebugInfo, className, jarFilePath, jarLinkedService, jarLibs?.ToList(), defines);
        }

        /// <summary> Initializes a new instance of HDInsightStreamingActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storageLinkedServices"> Storage linked service references. </param>
        /// <param name="arguments"> User specified arguments to HDInsightActivity. </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="mapper"> Mapper executable name. Type: string (or Expression with resultType string). </param>
        /// <param name="reducer"> Reducer executable name. Type: string (or Expression with resultType string). </param>
        /// <param name="input"> Input blob path. Type: string (or Expression with resultType string). </param>
        /// <param name="output"> Output blob path. Type: string (or Expression with resultType string). </param>
        /// <param name="filePaths"> Paths to streaming job files. Can be directories. </param>
        /// <param name="fileLinkedService"> Linked service reference where the files are located. </param>
        /// <param name="combiner"> Combiner executable name. Type: string (or Expression with resultType string). </param>
        /// <param name="commandEnvironment"> Command line environment values. </param>
        /// <param name="defines"> Allows user to specify defines for streaming job request. </param>
        /// <returns> A new <see cref="Models.HDInsightStreamingActivity"/> instance for mocking. </returns>
        public static HDInsightStreamingActivity HDInsightStreamingActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<LinkedServiceReference> storageLinkedServices = null, IEnumerable<object> arguments = null, HDInsightActivityDebugInfoOption? getDebugInfo = null, object mapper = null, object reducer = null, object input = null, object output = null, IEnumerable<object> filePaths = null, LinkedServiceReference fileLinkedService = null, object combiner = null, IEnumerable<object> commandEnvironment = null, IDictionary<string, object> defines = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            storageLinkedServices ??= new List<LinkedServiceReference>();
            arguments ??= new List<object>();
            filePaths ??= new List<object>();
            commandEnvironment ??= new List<object>();
            defines ??= new Dictionary<string, object>();

            return new HDInsightStreamingActivity(name, "HDInsightStreaming", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storageLinkedServices?.ToList(), arguments?.ToList(), getDebugInfo, mapper, reducer, input, output, filePaths?.ToList(), fileLinkedService, combiner, commandEnvironment?.ToList(), defines);
        }

        /// <summary> Initializes a new instance of HDInsightSparkActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="rootPath"> The root path in &apos;sparkJobLinkedService&apos; for all the job’s files. Type: string (or Expression with resultType string). </param>
        /// <param name="entryFilePath"> The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string). </param>
        /// <param name="arguments"> The user-specified arguments to HDInsightSparkActivity. </param>
        /// <param name="getDebugInfo"> Debug info option. </param>
        /// <param name="sparkJobLinkedService"> The storage linked service for uploading the entry file and dependencies, and for receiving logs. </param>
        /// <param name="className"> The application&apos;s Java/Spark main class. </param>
        /// <param name="proxyUser"> The user to impersonate that will execute the job. Type: string (or Expression with resultType string). </param>
        /// <param name="sparkConfig"> Spark configuration property. </param>
        /// <returns> A new <see cref="Models.HDInsightSparkActivity"/> instance for mocking. </returns>
        public static HDInsightSparkActivity HDInsightSparkActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object rootPath = null, object entryFilePath = null, IEnumerable<object> arguments = null, HDInsightActivityDebugInfoOption? getDebugInfo = null, LinkedServiceReference sparkJobLinkedService = null, string className = null, object proxyUser = null, IDictionary<string, object> sparkConfig = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            arguments ??= new List<object>();
            sparkConfig ??= new Dictionary<string, object>();

            return new HDInsightSparkActivity(name, "HDInsightSpark", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, rootPath, entryFilePath, arguments?.ToList(), getDebugInfo, sparkJobLinkedService, className, proxyUser, sparkConfig);
        }

        /// <summary> Initializes a new instance of ExecuteSsisPackageActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="packageLocation"> SSIS package location. </param>
        /// <param name="runtime"> Specifies the runtime to execute SSIS package. The value should be &quot;x86&quot; or &quot;x64&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="loggingLevel"> The logging level of SSIS package execution. Type: string (or Expression with resultType string). </param>
        /// <param name="environmentPath"> The environment path to execute the SSIS package. Type: string (or Expression with resultType string). </param>
        /// <param name="executionCredential"> The package execution credential. </param>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <param name="projectParameters"> The project level parameters to execute the SSIS package. </param>
        /// <param name="packageParameters"> The package level parameters to execute the SSIS package. </param>
        /// <param name="projectConnectionManagers"> The project level connection managers to execute the SSIS package. </param>
        /// <param name="packageConnectionManagers"> The package level connection managers to execute the SSIS package. </param>
        /// <param name="propertyOverrides"> The property overrides to execute the SSIS package. </param>
        /// <param name="logLocation"> SSIS package execution log location. </param>
        /// <returns> A new <see cref="Models.ExecuteSsisPackageActivity"/> instance for mocking. </returns>
        public static ExecuteSsisPackageActivity ExecuteSsisPackageActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, SsisPackageLocation packageLocation = null, object runtime = null, object loggingLevel = null, object environmentPath = null, SsisExecutionCredential executionCredential = null, IntegrationRuntimeReference connectVia = null, IDictionary<string, SsisExecutionParameter> projectParameters = null, IDictionary<string, SsisExecutionParameter> packageParameters = null, IDictionary<string, IDictionary<string, SsisExecutionParameter>> projectConnectionManagers = null, IDictionary<string, IDictionary<string, SsisExecutionParameter>> packageConnectionManagers = null, IDictionary<string, SsisPropertyOverride> propertyOverrides = null, SsisLogLocation logLocation = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            projectParameters ??= new Dictionary<string, SsisExecutionParameter>();
            packageParameters ??= new Dictionary<string, SsisExecutionParameter>();
            projectConnectionManagers ??= new Dictionary<string, IDictionary<string, SsisExecutionParameter>>();
            packageConnectionManagers ??= new Dictionary<string, IDictionary<string, SsisExecutionParameter>>();
            propertyOverrides ??= new Dictionary<string, SsisPropertyOverride>();

            return new ExecuteSsisPackageActivity(name, "ExecuteSSISPackage", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, packageLocation, runtime, loggingLevel, environmentPath, executionCredential, connectVia, projectParameters, packageParameters, projectConnectionManagers, packageConnectionManagers, propertyOverrides, logLocation);
        }

        /// <summary> Initializes a new instance of SsisPackageLocation. </summary>
        /// <param name="packagePath"> The SSIS package path. Type: string (or Expression with resultType string). </param>
        /// <param name="type"> The type of SSIS package location. </param>
        /// <param name="packagePassword">
        /// Password of the package.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="accessCredential"> The package access credential. </param>
        /// <param name="configurationPath"> The configuration file of the package execution. Type: string (or Expression with resultType string). </param>
        /// <param name="configurationAccessCredential"> The configuration file access credential. </param>
        /// <param name="packageName"> The package name. </param>
        /// <param name="packageContent"> The embedded package content. Type: string (or Expression with resultType string). </param>
        /// <param name="packageLastModifiedDate"> The embedded package last modified date. </param>
        /// <param name="childPackages"> The embedded child package list. </param>
        /// <returns> A new <see cref="Models.SsisPackageLocation"/> instance for mocking. </returns>
        public static SsisPackageLocation SsisPackageLocation(object packagePath = null, SsisPackageLocationType? type = null, SecretBase packagePassword = null, SsisAccessCredential accessCredential = null, object configurationPath = null, SsisAccessCredential configurationAccessCredential = null, string packageName = null, object packageContent = null, string packageLastModifiedDate = null, IEnumerable<SsisChildPackage> childPackages = null)
        {
            childPackages ??= new List<SsisChildPackage>();

            return new SsisPackageLocation(packagePath, type, packagePassword, accessCredential, configurationPath, configurationAccessCredential, packageName, packageContent, packageLastModifiedDate, childPackages?.ToList());
        }

        /// <summary> Initializes a new instance of SsisChildPackage. </summary>
        /// <param name="packagePath"> Path for embedded child package. Type: string (or Expression with resultType string). </param>
        /// <param name="packageName"> Name for embedded child package. </param>
        /// <param name="packageContent"> Content for embedded child package. Type: string (or Expression with resultType string). </param>
        /// <param name="packageLastModifiedDate"> Last modified date for embedded child package. </param>
        /// <returns> A new <see cref="Models.SsisChildPackage"/> instance for mocking. </returns>
        public static SsisChildPackage SsisChildPackage(object packagePath = null, string packageName = null, object packageContent = null, string packageLastModifiedDate = null)
        {
            return new SsisChildPackage(packagePath, packageName, packageContent, packageLastModifiedDate);
        }

        /// <summary> Initializes a new instance of SsisPropertyOverride. </summary>
        /// <param name="value"> SSIS package property override value. Type: string (or Expression with resultType string). </param>
        /// <param name="isSensitive"> Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true. </param>
        /// <returns> A new <see cref="Models.SsisPropertyOverride"/> instance for mocking. </returns>
        public static SsisPropertyOverride SsisPropertyOverride(object value = null, bool? isSensitive = null)
        {
            return new SsisPropertyOverride(value, isSensitive);
        }

        /// <summary> Initializes a new instance of SsisLogLocation. </summary>
        /// <param name="logPath"> The SSIS package execution log path. Type: string (or Expression with resultType string). </param>
        /// <param name="type"> The type of SSIS log location. </param>
        /// <param name="accessCredential"> The package execution log access credential. </param>
        /// <param name="logRefreshInterval"> Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SsisLogLocation"/> instance for mocking. </returns>
        public static SsisLogLocation SsisLogLocation(object logPath = null, SsisLogLocationType type = default, SsisAccessCredential accessCredential = null, object logRefreshInterval = null)
        {
            return new SsisLogLocation(logPath, type, accessCredential, logRefreshInterval);
        }

        /// <summary> Initializes a new instance of CustomActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="command"> Command for custom activity Type: string (or Expression with resultType string). </param>
        /// <param name="resourceLinkedService"> Resource linked service reference. </param>
        /// <param name="folderPath"> Folder path for resource files Type: string (or Expression with resultType string). </param>
        /// <param name="referenceObjects"> Reference objects. </param>
        /// <param name="extendedProperties"> User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined. </param>
        /// <param name="retentionTimeInDays"> The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double). </param>
        /// <param name="autoUserSpecification"> Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double). </param>
        /// <returns> A new <see cref="Models.CustomActivity"/> instance for mocking. </returns>
        public static CustomActivity CustomActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object command = null, LinkedServiceReference resourceLinkedService = null, object folderPath = null, CustomActivityReferenceObject referenceObjects = null, IDictionary<string, object> extendedProperties = null, object retentionTimeInDays = null, object autoUserSpecification = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            extendedProperties ??= new Dictionary<string, object>();

            return new CustomActivity(name, "Custom", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, command, resourceLinkedService, folderPath, referenceObjects, extendedProperties, retentionTimeInDays, autoUserSpecification);
        }

        /// <summary> Initializes a new instance of CustomActivityReferenceObject. </summary>
        /// <param name="linkedServices"> Linked service references. </param>
        /// <param name="datasets"> Dataset references. </param>
        /// <returns> A new <see cref="Models.CustomActivityReferenceObject"/> instance for mocking. </returns>
        public static CustomActivityReferenceObject CustomActivityReferenceObject(IEnumerable<LinkedServiceReference> linkedServices = null, IEnumerable<DatasetReference> datasets = null)
        {
            linkedServices ??= new List<LinkedServiceReference>();
            datasets ??= new List<DatasetReference>();

            return new CustomActivityReferenceObject(linkedServices?.ToList(), datasets?.ToList());
        }

        /// <summary> Initializes a new instance of SqlServerStoredProcedureActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="storedProcedureName"> Stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <returns> A new <see cref="Models.SqlServerStoredProcedureActivity"/> instance for mocking. </returns>
        public static SqlServerStoredProcedureActivity SqlServerStoredProcedureActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object storedProcedureName = null, object storedProcedureParameters = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SqlServerStoredProcedureActivity(name, "SqlServerStoredProcedure", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, storedProcedureName, storedProcedureParameters);
        }

        /// <summary> Initializes a new instance of ExecutePipelineActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipeline"> Pipeline reference. </param>
        /// <param name="parameters"> Pipeline parameters. </param>
        /// <param name="waitOnCompletion"> Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false. </param>
        /// <returns> A new <see cref="Models.ExecutePipelineActivity"/> instance for mocking. </returns>
        public static ExecutePipelineActivity ExecutePipelineActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, PipelineReference pipeline = null, IDictionary<string, object> parameters = null, bool? waitOnCompletion = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            parameters ??= new Dictionary<string, object>();

            return new ExecutePipelineActivity(name, "ExecutePipeline", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, pipeline, parameters, waitOnCompletion);
        }

        /// <summary> Initializes a new instance of DeleteActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="recursive"> If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="maxConcurrentConnections"> The max concurrent connections to connect data source at the same time. </param>
        /// <param name="enableLogging"> Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="logStorageSettings"> Log storage settings customer need to provide when enableLogging is true. </param>
        /// <param name="dataset"> Delete activity dataset reference. </param>
        /// <param name="storeSettings">
        /// Delete activity store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DeleteActivity"/> instance for mocking. </returns>
        public static DeleteActivity DeleteActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object recursive = null, int? maxConcurrentConnections = null, object enableLogging = null, LogStorageSettings logStorageSettings = null, DatasetReference dataset = null, StoreReadSettings storeSettings = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new DeleteActivity(name, "Delete", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, recursive, maxConcurrentConnections, enableLogging, logStorageSettings, dataset, storeSettings);
        }

        /// <summary> Initializes a new instance of AzureDataExplorerCommandActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="command"> A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType string). </param>
        /// <param name="commandTimeout"> Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..). </param>
        /// <returns> A new <see cref="Models.AzureDataExplorerCommandActivity"/> instance for mocking. </returns>
        public static AzureDataExplorerCommandActivity AzureDataExplorerCommandActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object command = null, object commandTimeout = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureDataExplorerCommandActivity(name, "AzureDataExplorerCommand", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, command, commandTimeout);
        }

        /// <summary> Initializes a new instance of LookupActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="source">
        /// Dataset-specific source properties, same as copy activity source.
        /// Please note <see cref="CopySource"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonMWSSource"/>, <see cref="AmazonRdsForOracleSource"/>, <see cref="AmazonRdsForSqlServerSource"/>, <see cref="AmazonRedshiftSource"/>, <see cref="AvroSource"/>, <see cref="AzureBlobFSSource"/>, <see cref="AzureDataExplorerSource"/>, <see cref="AzureDataLakeStoreSource"/>, <see cref="AzureDatabricksDeltaLakeSource"/>, <see cref="AzureMariaDBSource"/>, <see cref="AzureMySqlSource"/>, <see cref="AzurePostgreSqlSource"/>, <see cref="AzureSqlSource"/>, <see cref="AzureTableSource"/>, <see cref="BinarySource"/>, <see cref="BlobSource"/>, <see cref="CassandraSource"/>, <see cref="CommonDataServiceForAppsSource"/>, <see cref="ConcurSource"/>, <see cref="CosmosDbMongoDbApiSource"/>, <see cref="CosmosDbSqlApiSource"/>, <see cref="CouchbaseSource"/>, <see cref="Db2Source"/>, <see cref="DelimitedTextSource"/>, <see cref="DocumentDbCollectionSource"/>, <see cref="DrillSource"/>, <see cref="DynamicsAXSource"/>, <see cref="DynamicsCrmSource"/>, <see cref="DynamicsSource"/>, <see cref="EloquaSource"/>, <see cref="ExcelSource"/>, <see cref="FileSystemSource"/>, <see cref="GoogleAdWordsSource"/>, <see cref="GoogleBigQuerySource"/>, <see cref="GreenplumSource"/>, <see cref="HBaseSource"/>, <see cref="HdfsSource"/>, <see cref="HiveSource"/>, <see cref="HttpSource"/>, <see cref="HubspotSource"/>, <see cref="ImpalaSource"/>, <see cref="InformixSource"/>, <see cref="JiraSource"/>, <see cref="JsonSource"/>, <see cref="MagentoSource"/>, <see cref="MariaDBSource"/>, <see cref="MarketoSource"/>, <see cref="MicrosoftAccessSource"/>, <see cref="MongoDbAtlasSource"/>, <see cref="MongoDbSource"/>, <see cref="MongoDbV2Source"/>, <see cref="MySqlSource"/>, <see cref="NetezzaSource"/>, <see cref="ODataSource"/>, <see cref="OdbcSource"/>, <see cref="Office365Source"/>, <see cref="OracleServiceCloudSource"/>, <see cref="OracleSource"/>, <see cref="OrcSource"/>, <see cref="ParquetSource"/>, <see cref="PaypalSource"/>, <see cref="PhoenixSource"/>, <see cref="PostgreSqlSource"/>, <see cref="PrestoSource"/>, <see cref="QuickBooksSource"/>, <see cref="RelationalSource"/>, <see cref="ResponsysSource"/>, <see cref="RestSource"/>, <see cref="SalesforceMarketingCloudSource"/>, <see cref="SalesforceServiceCloudSource"/>, <see cref="SalesforceSource"/>, <see cref="SapBwSource"/>, <see cref="SapCloudForCustomerSource"/>, <see cref="SapEccSource"/>, <see cref="SapHanaSource"/>, <see cref="SapOdpSource"/>, <see cref="SapOpenHubSource"/>, <see cref="SapTableSource"/>, <see cref="ServiceNowSource"/>, <see cref="SharePointOnlineListSource"/>, <see cref="ShopifySource"/>, <see cref="SnowflakeSource"/>, <see cref="SparkSource"/>, <see cref="SqlDWSource"/>, <see cref="SqlMISource"/>, <see cref="SqlServerSource"/>, <see cref="SqlSource"/>, <see cref="SquareSource"/>, <see cref="SybaseSource"/>, <see cref="TabularSource"/>, <see cref="TeradataSource"/>, <see cref="VerticaSource"/>, <see cref="WebSource"/>, <see cref="XeroSource"/>, <see cref="XmlSource"/> and <see cref="ZohoSource"/>.
        /// </param>
        /// <param name="dataset"> Lookup activity dataset reference. </param>
        /// <param name="firstRowOnly"> Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.LookupActivity"/> instance for mocking. </returns>
        public static LookupActivity LookupActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, CopySource source = null, DatasetReference dataset = null, object firstRowOnly = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new LookupActivity(name, "Lookup", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, source, dataset, firstRowOnly);
        }

        /// <summary> Initializes a new instance of WebActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="method"> Rest API method for target endpoint. </param>
        /// <param name="url"> Web activity target endpoint and path. Type: string (or Expression with resultType string). </param>
        /// <param name="headers"> Represents the headers that will be sent to the request. For example, to set the language and type on a request: &quot;headers&quot; : { &quot;Accept-Language&quot;: &quot;en-us&quot;, &quot;Content-Type&quot;: &quot;application/json&quot; }. Type: string (or Expression with resultType string). </param>
        /// <param name="body"> Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). </param>
        /// <param name="authentication"> Authentication method used for calling the endpoint. </param>
        /// <param name="datasets"> List of datasets passed to web endpoint. </param>
        /// <param name="linkedServices"> List of linked services passed to web endpoint. </param>
        /// <param name="connectVia"> The integration runtime reference. </param>
        /// <returns> A new <see cref="Models.WebActivity"/> instance for mocking. </returns>
        public static WebActivity WebActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, WebActivityMethod method = default, object url = null, object headers = null, object body = null, WebActivityAuthentication authentication = null, IEnumerable<DatasetReference> datasets = null, IEnumerable<LinkedServiceReference> linkedServices = null, IntegrationRuntimeReference connectVia = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            datasets ??= new List<DatasetReference>();
            linkedServices ??= new List<LinkedServiceReference>();

            return new WebActivity(name, "WebActivity", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, method, url, headers, body, authentication, datasets?.ToList(), linkedServices?.ToList(), connectVia);
        }

        /// <summary> Initializes a new instance of WebActivityAuthentication. </summary>
        /// <param name="type"> Web activity authentication (Basic/ClientCertificate/MSI). </param>
        /// <param name="pfx">
        /// Base64-encoded contents of a PFX file.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="username"> Web activity authentication user name for basic authentication. </param>
        /// <param name="password">
        /// Password for the PFX file or basic authentication.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="resource"> Resource for which Azure Auth token will be requested when using MSI Authentication. </param>
        /// <returns> A new <see cref="Models.WebActivityAuthentication"/> instance for mocking. </returns>
        public static WebActivityAuthentication WebActivityAuthentication(string type = null, SecretBase pfx = null, string username = null, SecretBase password = null, string resource = null)
        {
            return new WebActivityAuthentication(type, pfx, username, password, resource);
        }

        /// <summary> Initializes a new instance of GetMetadataActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="dataset"> GetMetadata activity dataset reference. </param>
        /// <param name="fieldList"> Fields of metadata to get from dataset. </param>
        /// <param name="storeSettings">
        /// GetMetadata activity store settings.
        /// Please note <see cref="StoreReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AmazonS3ReadSettings"/>, <see cref="AzureBlobFSReadSettings"/>, <see cref="AzureBlobStorageReadSettings"/>, <see cref="AzureDataLakeStoreReadSettings"/>, <see cref="AzureFileStorageReadSettings"/>, <see cref="FileServerReadSettings"/>, <see cref="FtpReadSettings"/>, <see cref="GoogleCloudStorageReadSettings"/>, <see cref="HdfsReadSettings"/>, <see cref="HttpReadSettings"/> and <see cref="SftpReadSettings"/>.
        /// </param>
        /// <param name="formatSettings">
        /// GetMetadata activity format settings.
        /// Please note <see cref="FormatReadSettings"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="BinaryReadSettings"/>, <see cref="JsonReadSettings"/>, <see cref="XmlReadSettings"/> and <see cref="DelimitedTextReadSettings"/>.
        /// </param>
        /// <returns> A new <see cref="Models.GetMetadataActivity"/> instance for mocking. </returns>
        public static GetMetadataActivity GetMetadataActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, DatasetReference dataset = null, IEnumerable<object> fieldList = null, StoreReadSettings storeSettings = null, FormatReadSettings formatSettings = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            fieldList ??= new List<object>();

            return new GetMetadataActivity(name, "GetMetadata", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, dataset, fieldList?.ToList(), storeSettings, formatSettings);
        }

        /// <summary> Initializes a new instance of IfConditionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="expression"> An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed. </param>
        /// <param name="ifTrueActivities">
        /// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
        /// Please note <see cref="Activity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SynapseSparkJobDefinitionActivity"/>, <see cref="SqlPoolStoredProcedureActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="SynapseNotebookActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <param name="ifFalseActivities">
        /// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
        /// Please note <see cref="Activity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SynapseSparkJobDefinitionActivity"/>, <see cref="SqlPoolStoredProcedureActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="SynapseNotebookActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.IfConditionActivity"/> instance for mocking. </returns>
        public static IfConditionActivity IfConditionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, Expression expression = null, IEnumerable<Activity> ifTrueActivities = null, IEnumerable<Activity> ifFalseActivities = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            ifTrueActivities ??= new List<Activity>();
            ifFalseActivities ??= new List<Activity>();

            return new IfConditionActivity(name, "IfCondition", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, expression, ifTrueActivities?.ToList(), ifFalseActivities?.ToList());
        }

        /// <summary> Initializes a new instance of SwitchActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="on"> An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed. </param>
        /// <param name="cases"> List of cases that correspond to expected values of the &apos;on&apos; property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities. </param>
        /// <param name="defaultActivities">
        /// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
        /// Please note <see cref="Activity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SynapseSparkJobDefinitionActivity"/>, <see cref="SqlPoolStoredProcedureActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="SynapseNotebookActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SwitchActivity"/> instance for mocking. </returns>
        public static SwitchActivity SwitchActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, Expression @on = null, IEnumerable<SwitchCase> cases = null, IEnumerable<Activity> defaultActivities = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            cases ??= new List<SwitchCase>();
            defaultActivities ??= new List<Activity>();

            return new SwitchActivity(name, "Switch", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, @on, cases?.ToList(), defaultActivities?.ToList());
        }

        /// <summary> Initializes a new instance of SwitchCase. </summary>
        /// <param name="value"> Expected value that satisfies the expression result of the &apos;on&apos; property. </param>
        /// <param name="activities">
        /// List of activities to execute for satisfied case condition.
        /// Please note <see cref="Activity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SynapseSparkJobDefinitionActivity"/>, <see cref="SqlPoolStoredProcedureActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="SynapseNotebookActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SwitchCase"/> instance for mocking. </returns>
        public static SwitchCase SwitchCase(string value = null, IEnumerable<Activity> activities = null)
        {
            activities ??= new List<Activity>();

            return new SwitchCase(value, activities?.ToList());
        }

        /// <summary> Initializes a new instance of ForEachActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="isSequential"> Should the loop be executed in sequence or in parallel (max 50). </param>
        /// <param name="batchCount"> Batch count to be used for controlling the number of parallel execution (when isSequential is set to false). </param>
        /// <param name="items"> Collection to iterate. </param>
        /// <param name="activities">
        /// List of activities to execute .
        /// Please note <see cref="Activity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SynapseSparkJobDefinitionActivity"/>, <see cref="SqlPoolStoredProcedureActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="SynapseNotebookActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.ForEachActivity"/> instance for mocking. </returns>
        public static ForEachActivity ForEachActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, bool? isSequential = null, int? batchCount = null, Expression items = null, IEnumerable<Activity> activities = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            activities ??= new List<Activity>();

            return new ForEachActivity(name, "ForEach", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, isSequential, batchCount, items, activities?.ToList());
        }

        /// <summary> Initializes a new instance of AzureMLBatchExecutionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="globalParameters"> Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service parameters defined in the published Azure ML web service. Values will be passed in the GlobalParameters property of the Azure ML batch execution request. </param>
        /// <param name="webServiceOutputs"> Key,Value pairs, mapping the names of Azure ML endpoint&apos;s Web Service Outputs to AzureMLWebServiceFile objects specifying the output Blob locations. This information will be passed in the WebServiceOutputs property of the Azure ML batch execution request. </param>
        /// <param name="webServiceInputs"> Key,Value pairs, mapping the names of Azure ML endpoint&apos;s Web Service Inputs to AzureMLWebServiceFile objects specifying the input Blob locations.. This information will be passed in the WebServiceInputs property of the Azure ML batch execution request. </param>
        /// <returns> A new <see cref="Models.AzureMLBatchExecutionActivity"/> instance for mocking. </returns>
        public static AzureMLBatchExecutionActivity AzureMLBatchExecutionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IDictionary<string, object> globalParameters = null, IDictionary<string, AzureMLWebServiceFile> webServiceOutputs = null, IDictionary<string, AzureMLWebServiceFile> webServiceInputs = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            globalParameters ??= new Dictionary<string, object>();
            webServiceOutputs ??= new Dictionary<string, AzureMLWebServiceFile>();
            webServiceInputs ??= new Dictionary<string, AzureMLWebServiceFile>();

            return new AzureMLBatchExecutionActivity(name, "AzureMLBatchExecution", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, globalParameters, webServiceOutputs, webServiceInputs);
        }

        /// <summary> Initializes a new instance of AzureMLUpdateResourceActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="trainedModelName"> Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with resultType string). </param>
        /// <param name="trainedModelLinkedServiceName"> Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation. </param>
        /// <param name="trainedModelFilePath"> The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by the update operation.  Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureMLUpdateResourceActivity"/> instance for mocking. </returns>
        public static AzureMLUpdateResourceActivity AzureMLUpdateResourceActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object trainedModelName = null, LinkedServiceReference trainedModelLinkedServiceName = null, object trainedModelFilePath = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMLUpdateResourceActivity(name, "AzureMLUpdateResource", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, trainedModelName, trainedModelLinkedServiceName, trainedModelFilePath);
        }

        /// <summary> Initializes a new instance of AzureMLExecutePipelineActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="mlPipelineId"> ID of the published Azure ML pipeline. Type: string (or Expression with resultType string). </param>
        /// <param name="experimentName"> Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the published pipeline execution request. Type: string (or Expression with resultType string). </param>
        /// <param name="mlPipelineParameters"> Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters defined in the published pipeline. Values will be passed in the ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression with resultType object). </param>
        /// <param name="mlParentRunId"> The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published pipeline execution request. Type: string (or Expression with resultType string). </param>
        /// <param name="continueOnStepFailure"> Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the continueOnStepFailure property of the published pipeline execution request. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.AzureMLExecutePipelineActivity"/> instance for mocking. </returns>
        public static AzureMLExecutePipelineActivity AzureMLExecutePipelineActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object mlPipelineId = null, object experimentName = null, object mlPipelineParameters = null, object mlParentRunId = null, object continueOnStepFailure = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureMLExecutePipelineActivity(name, "AzureMLExecutePipeline", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, mlPipelineId, experimentName, mlPipelineParameters, mlParentRunId, continueOnStepFailure);
        }

        /// <summary> Initializes a new instance of DataLakeAnalyticsUsqlActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="scriptPath"> Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string). </param>
        /// <param name="scriptLinkedService"> Script linked service reference. </param>
        /// <param name="degreeOfParallelism"> The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1. </param>
        /// <param name="priority"> Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1. </param>
        /// <param name="parameters"> Parameters for U-SQL job request. </param>
        /// <param name="runtimeVersion"> Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string). </param>
        /// <param name="compilationMode"> Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.DataLakeAnalyticsUsqlActivity"/> instance for mocking. </returns>
        public static DataLakeAnalyticsUsqlActivity DataLakeAnalyticsUsqlActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object scriptPath = null, LinkedServiceReference scriptLinkedService = null, object degreeOfParallelism = null, object priority = null, IDictionary<string, object> parameters = null, object runtimeVersion = null, object compilationMode = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            parameters ??= new Dictionary<string, object>();

            return new DataLakeAnalyticsUsqlActivity(name, "DataLakeAnalyticsU-SQL", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, scriptPath, scriptLinkedService, degreeOfParallelism, priority, parameters, runtimeVersion, compilationMode);
        }

        /// <summary> Initializes a new instance of WaitActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="waitTimeInSeconds"> Duration in seconds. </param>
        /// <returns> A new <see cref="Models.WaitActivity"/> instance for mocking. </returns>
        public static WaitActivity WaitActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, object waitTimeInSeconds = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new WaitActivity(name, "Wait", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, waitTimeInSeconds);
        }

        /// <summary> Initializes a new instance of FailActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="message"> The error message that surfaced in the Fail activity. It can be dynamic content that&apos;s evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string). </param>
        /// <param name="errorCode"> The error code that categorizes the error type of the Fail activity. It can be dynamic content that&apos;s evaluated to a non empty/blank string at runtime. Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.FailActivity"/> instance for mocking. </returns>
        public static FailActivity FailActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, object message = null, object errorCode = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new FailActivity(name, "Fail", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, message, errorCode);
        }

        /// <summary> Initializes a new instance of UntilActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="expression"> An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true. </param>
        /// <param name="timeout"> Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="activities">
        /// List of activities to execute.
        /// Please note <see cref="Activity"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AppendVariableActivity"/>, <see cref="AzureDataExplorerCommandActivity"/>, <see cref="AzureFunctionActivity"/>, <see cref="AzureMLBatchExecutionActivity"/>, <see cref="AzureMLExecutePipelineActivity"/>, <see cref="AzureMLUpdateResourceActivity"/>, <see cref="ControlActivity"/>, <see cref="CopyActivity"/>, <see cref="CustomActivity"/>, <see cref="DataLakeAnalyticsUsqlActivity"/>, <see cref="DatabricksNotebookActivity"/>, <see cref="DatabricksSparkJarActivity"/>, <see cref="DatabricksSparkPythonActivity"/>, <see cref="DeleteActivity"/>, <see cref="ExecuteDataFlowActivity"/>, <see cref="ExecutePipelineActivity"/>, <see cref="ExecuteSsisPackageActivity"/>, <see cref="ExecutionActivity"/>, <see cref="FailActivity"/>, <see cref="FilterActivity"/>, <see cref="ForEachActivity"/>, <see cref="GetMetadataActivity"/>, <see cref="HDInsightHiveActivity"/>, <see cref="HDInsightMapReduceActivity"/>, <see cref="HDInsightPigActivity"/>, <see cref="HDInsightSparkActivity"/>, <see cref="HDInsightStreamingActivity"/>, <see cref="IfConditionActivity"/>, <see cref="LookupActivity"/>, <see cref="ScriptActivity"/>, <see cref="SetVariableActivity"/>, <see cref="SynapseSparkJobDefinitionActivity"/>, <see cref="SqlPoolStoredProcedureActivity"/>, <see cref="SqlServerStoredProcedureActivity"/>, <see cref="SwitchActivity"/>, <see cref="SynapseNotebookActivity"/>, <see cref="UntilActivity"/>, <see cref="ValidationActivity"/>, <see cref="WaitActivity"/>, <see cref="WebActivity"/> and <see cref="WebHookActivity"/>.
        /// </param>
        /// <returns> A new <see cref="Models.UntilActivity"/> instance for mocking. </returns>
        public static UntilActivity UntilActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, Expression expression = null, object timeout = null, IEnumerable<Activity> activities = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            activities ??= new List<Activity>();

            return new UntilActivity(name, "Until", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, expression, timeout, activities?.ToList());
        }

        /// <summary> Initializes a new instance of ValidationActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="timeout"> Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="sleep"> A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer). </param>
        /// <param name="minimumSize"> Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer). </param>
        /// <param name="childItems"> Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="dataset"> Validation activity dataset reference. </param>
        /// <returns> A new <see cref="Models.ValidationActivity"/> instance for mocking. </returns>
        public static ValidationActivity ValidationActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, object timeout = null, object sleep = null, object minimumSize = null, object childItems = null, DatasetReference dataset = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ValidationActivity(name, "Validation", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, timeout, sleep, minimumSize, childItems, dataset);
        }

        /// <summary> Initializes a new instance of FilterActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="items"> Input array on which filter should be applied. </param>
        /// <param name="condition"> Condition to be used for filtering the input. </param>
        /// <returns> A new <see cref="Models.FilterActivity"/> instance for mocking. </returns>
        public static FilterActivity FilterActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, Expression items = null, Expression condition = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new FilterActivity(name, "Filter", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, items, condition);
        }

        /// <summary> Initializes a new instance of DatabricksNotebookActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="notebookPath"> The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type: string (or Expression with resultType string). </param>
        /// <param name="baseParameters"> Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default value from the notebook will be used. </param>
        /// <param name="libraries"> A list of libraries to be installed on the cluster that will execute the job. </param>
        /// <returns> A new <see cref="Models.DatabricksNotebookActivity"/> instance for mocking. </returns>
        public static DatabricksNotebookActivity DatabricksNotebookActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object notebookPath = null, IDictionary<string, object> baseParameters = null, IEnumerable<IDictionary<string, object>> libraries = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            baseParameters ??= new Dictionary<string, object>();
            libraries ??= new List<IDictionary<string, object>>();

            return new DatabricksNotebookActivity(name, "DatabricksNotebook", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, notebookPath, baseParameters, libraries?.ToList());
        }

        /// <summary> Initializes a new instance of DatabricksSparkJarActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="mainClassName"> The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string). </param>
        /// <param name="parameters"> Parameters that will be passed to the main method. </param>
        /// <param name="libraries"> A list of libraries to be installed on the cluster that will execute the job. </param>
        /// <returns> A new <see cref="Models.DatabricksSparkJarActivity"/> instance for mocking. </returns>
        public static DatabricksSparkJarActivity DatabricksSparkJarActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object mainClassName = null, IEnumerable<object> parameters = null, IEnumerable<IDictionary<string, object>> libraries = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            parameters ??= new List<object>();
            libraries ??= new List<IDictionary<string, object>>();

            return new DatabricksSparkJarActivity(name, "DatabricksSparkJar", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, mainClassName, parameters?.ToList(), libraries?.ToList());
        }

        /// <summary> Initializes a new instance of DatabricksSparkPythonActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="pythonFile"> The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType string). </param>
        /// <param name="parameters"> Command line parameters that will be passed to the Python file. </param>
        /// <param name="libraries"> A list of libraries to be installed on the cluster that will execute the job. </param>
        /// <returns> A new <see cref="Models.DatabricksSparkPythonActivity"/> instance for mocking. </returns>
        public static DatabricksSparkPythonActivity DatabricksSparkPythonActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, object pythonFile = null, IEnumerable<object> parameters = null, IEnumerable<IDictionary<string, object>> libraries = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            parameters ??= new List<object>();
            libraries ??= new List<IDictionary<string, object>>();

            return new DatabricksSparkPythonActivity(name, "DatabricksSparkPython", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, pythonFile, parameters?.ToList(), libraries?.ToList());
        }

        /// <summary> Initializes a new instance of SetVariableActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="variableName"> Name of the variable whose value needs to be set. </param>
        /// <param name="value"> Value to be set. Could be a static value or Expression. </param>
        /// <returns> A new <see cref="Models.SetVariableActivity"/> instance for mocking. </returns>
        public static SetVariableActivity SetVariableActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, string variableName = null, object value = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new SetVariableActivity(name, "SetVariable", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, variableName, value);
        }

        /// <summary> Initializes a new instance of AppendVariableActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="variableName"> Name of the variable whose value needs to be appended to. </param>
        /// <param name="value"> Value to be appended. Could be a static value or Expression. </param>
        /// <returns> A new <see cref="Models.AppendVariableActivity"/> instance for mocking. </returns>
        public static AppendVariableActivity AppendVariableActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, string variableName = null, object value = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AppendVariableActivity(name, "AppendVariable", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, variableName, value);
        }

        /// <summary> Initializes a new instance of AzureFunctionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="method"> Rest API method for target endpoint. </param>
        /// <param name="functionName"> Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType string). </param>
        /// <param name="headers"> Represents the headers that will be sent to the request. For example, to set the language and type on a request: &quot;headers&quot; : { &quot;Accept-Language&quot;: &quot;en-us&quot;, &quot;Content-Type&quot;: &quot;application/json&quot; }. Type: string (or Expression with resultType string). </param>
        /// <param name="body"> Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). </param>
        /// <returns> A new <see cref="Models.AzureFunctionActivity"/> instance for mocking. </returns>
        public static AzureFunctionActivity AzureFunctionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, AzureFunctionActivityMethod method = default, object functionName = null, object headers = null, object body = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new AzureFunctionActivity(name, "AzureFunctionActivity", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, method, functionName, headers, body);
        }

        /// <summary> Initializes a new instance of WebHookActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="method"> Rest API method for target endpoint. </param>
        /// <param name="url"> WebHook activity target endpoint and path. Type: string (or Expression with resultType string). </param>
        /// <param name="timeout"> The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes. Type: string. Pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="headers"> Represents the headers that will be sent to the request. For example, to set the language and type on a request: &quot;headers&quot; : { &quot;Accept-Language&quot;: &quot;en-us&quot;, &quot;Content-Type&quot;: &quot;application/json&quot; }. Type: string (or Expression with resultType string). </param>
        /// <param name="body"> Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string). </param>
        /// <param name="authentication"> Authentication method used for calling the endpoint. </param>
        /// <param name="reportStatusOnCallBack"> When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can be marked as failed by setting statusCode &gt;= 400 in callback request. Default is false. Type: boolean (or Expression with resultType boolean). </param>
        /// <returns> A new <see cref="Models.WebHookActivity"/> instance for mocking. </returns>
        public static WebHookActivity WebHookActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, WebHookActivityMethod method = default, object url = null, string timeout = null, object headers = null, object body = null, WebActivityAuthentication authentication = null, object reportStatusOnCallBack = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new WebHookActivity(name, "WebHook", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, method, url, timeout, headers, body, authentication, reportStatusOnCallBack);
        }

        /// <summary> Initializes a new instance of ExecuteDataFlowActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="dataflow"> Data flow reference. </param>
        /// <param name="staging"> Staging info for execute data flow activity. </param>
        /// <param name="integrationRuntime"> The integration runtime reference. </param>
        /// <param name="compute"> Compute properties for data flow activity. </param>
        /// <param name="traceLevel"> Trace level setting used for data flow monitoring output. Supported values are: &apos;coarse&apos;, &apos;fine&apos;, and &apos;none&apos;. Type: string (or Expression with resultType string). </param>
        /// <param name="continueOnError"> Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="runConcurrently"> Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean). </param>
        /// <param name="sourceStagingConcurrency"> Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer). </param>
        /// <returns> A new <see cref="Models.ExecuteDataFlowActivity"/> instance for mocking. </returns>
        public static ExecuteDataFlowActivity ExecuteDataFlowActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, DataFlowReference dataflow = null, DataFlowStagingInfo staging = null, IntegrationRuntimeReference integrationRuntime = null, ExecuteDataFlowActivityTypePropertiesCompute compute = null, object traceLevel = null, object continueOnError = null, object runConcurrently = null, object sourceStagingConcurrency = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();

            return new ExecuteDataFlowActivity(name, "ExecuteDataFlow", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, dataflow, staging, integrationRuntime, compute, traceLevel, continueOnError, runConcurrently, sourceStagingConcurrency);
        }

        /// <summary> Initializes a new instance of ExecuteDataFlowActivityTypePropertiesCompute. </summary>
        /// <param name="computeType"> Compute type of the cluster which will execute data flow job. </param>
        /// <param name="coreCount"> Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. </param>
        /// <returns> A new <see cref="Models.ExecuteDataFlowActivityTypePropertiesCompute"/> instance for mocking. </returns>
        public static ExecuteDataFlowActivityTypePropertiesCompute ExecuteDataFlowActivityTypePropertiesCompute(DataFlowComputeType? computeType = null, int? coreCount = null)
        {
            return new ExecuteDataFlowActivityTypePropertiesCompute(computeType, coreCount);
        }

        /// <summary> Initializes a new instance of ScriptActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="scripts"> Array of script blocks. Type: array. </param>
        /// <param name="logSettings"> Log settings of script activity. </param>
        /// <returns> A new <see cref="Models.ScriptActivity"/> instance for mocking. </returns>
        public static ScriptActivity ScriptActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, IEnumerable<ScriptActivityScriptBlock> scripts = null, ScriptActivityTypePropertiesLogSettings logSettings = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            scripts ??= new List<ScriptActivityScriptBlock>();

            return new ScriptActivity(name, "Script", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, scripts?.ToList(), logSettings);
        }

        /// <summary> Initializes a new instance of ScriptActivityScriptBlock. </summary>
        /// <param name="text"> The query text. Type: string (or Expression with resultType string). </param>
        /// <param name="type"> The type of the query. Type: string. </param>
        /// <param name="parameters"> Array of script parameters. Type: array. </param>
        /// <returns> A new <see cref="Models.ScriptActivityScriptBlock"/> instance for mocking. </returns>
        public static ScriptActivityScriptBlock ScriptActivityScriptBlock(object text = null, ScriptType type = default, IEnumerable<ScriptActivityParameter> parameters = null)
        {
            parameters ??= new List<ScriptActivityParameter>();

            return new ScriptActivityScriptBlock(text, type, parameters?.ToList());
        }

        /// <summary> Initializes a new instance of ScriptActivityParameter. </summary>
        /// <param name="name"> The name of the parameter. Type: string (or Expression with resultType string). </param>
        /// <param name="type"> The type of the parameter. </param>
        /// <param name="value"> The value of the parameter. </param>
        /// <param name="direction"> The direction of the parameter. </param>
        /// <param name="size"> The size of the output direction parameter. </param>
        /// <returns> A new <see cref="Models.ScriptActivityParameter"/> instance for mocking. </returns>
        public static ScriptActivityParameter ScriptActivityParameter(object name = null, ScriptActivityParameterType? type = null, object value = null, ScriptActivityParameterDirection? direction = null, int? size = null)
        {
            return new ScriptActivityParameter(name, type, value, direction, size);
        }

        /// <summary> Initializes a new instance of ScriptActivityTypePropertiesLogSettings. </summary>
        /// <param name="logDestination"> The destination of logs. Type: string. </param>
        /// <param name="logLocationSettings"> Log location settings customer needs to provide when enabling log. </param>
        /// <returns> A new <see cref="Models.ScriptActivityTypePropertiesLogSettings"/> instance for mocking. </returns>
        public static ScriptActivityTypePropertiesLogSettings ScriptActivityTypePropertiesLogSettings(ScriptActivityLogDestination logDestination = default, LogLocationSettings logLocationSettings = null)
        {
            return new ScriptActivityTypePropertiesLogSettings(logDestination, logLocationSettings);
        }

        /// <summary> Initializes a new instance of SharePointOnlineListSource. </summary>
        /// <param name="sourceRetryCount"> Source retry count. Type: integer (or Expression with resultType integer). </param>
        /// <param name="sourceRetryWait"> Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrentConnections"> The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer). </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="query"> The OData query to filter the data in SharePoint Online list. For example, &quot;$top=1&quot;. Type: string (or Expression with resultType string). </param>
        /// <param name="httpRequestTimeout"> The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <returns> A new <see cref="Models.SharePointOnlineListSource"/> instance for mocking. </returns>
        public static SharePointOnlineListSource SharePointOnlineListSource(object sourceRetryCount = null, object sourceRetryWait = null, object maxConcurrentConnections = null, IDictionary<string, object> additionalProperties = null, object query = null, object httpRequestTimeout = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SharePointOnlineListSource("SharePointOnlineListSource", sourceRetryCount, sourceRetryWait, maxConcurrentConnections, additionalProperties, query, httpRequestTimeout);
        }

        /// <summary> Initializes a new instance of SynapseNotebookActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="notebook"> Synapse notebook reference. </param>
        /// <param name="sparkPool"> The name of the big data pool which will be used to execute the notebook. </param>
        /// <param name="parameters"> Notebook parameters. </param>
        /// <param name="executorSize"> Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be used for overriding &apos;executorCores&apos; and &apos;executorMemory&apos; of the notebook you provide. Type: string (or Expression with resultType string). </param>
        /// <param name="conf"> Spark configuration properties, which will override the &apos;conf&apos; of the notebook you provide. </param>
        /// <param name="driverSize"> Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used for overriding &apos;driverCores&apos; and &apos;driverMemory&apos; of the notebook you provide. Type: string (or Expression with resultType string). </param>
        /// <param name="numExecutors"> Number of executors to launch for this session, which will override the &apos;numExecutors&apos; of the notebook you provide. </param>
        /// <returns> A new <see cref="Models.SynapseNotebookActivity"/> instance for mocking. </returns>
        public static SynapseNotebookActivity SynapseNotebookActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, SynapseNotebookReference notebook = null, BigDataPoolParametrizationReference sparkPool = null, IDictionary<string, NotebookParameter> parameters = null, object executorSize = null, object conf = null, object driverSize = null, int? numExecutors = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            parameters ??= new Dictionary<string, NotebookParameter>();

            return new SynapseNotebookActivity(name, "SynapseNotebook", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, notebook, sparkPool, parameters, executorSize, conf, driverSize, numExecutors);
        }

        /// <summary> Initializes a new instance of SynapseSparkJobDefinitionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedServiceName"> Linked service reference. </param>
        /// <param name="policy"> Activity policy. </param>
        /// <param name="sparkJob"> Synapse spark job reference. </param>
        /// <param name="arguments"> User specified arguments to SynapseSparkJobDefinitionActivity. </param>
        /// <param name="file"> The main file used for the job, which will override the &apos;file&apos; of the spark job definition you provide. Type: string (or Expression with resultType string). </param>
        /// <param name="className"> The fully-qualified identifier or the main class that is in the main definition file, which will override the &apos;className&apos; of the spark job definition you provide. Type: string (or Expression with resultType string). </param>
        /// <param name="files"> Additional files used for reference in the main definition file, which will override the &apos;files&apos; of the spark job definition you provide. </param>
        /// <param name="targetBigDataPool"> The name of the big data pool which will be used to execute the spark batch job, which will override the &apos;targetBigDataPool&apos; of the spark job definition you provide. </param>
        /// <param name="executorSize"> Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used for overriding &apos;executorCores&apos; and &apos;executorMemory&apos; of the spark job definition you provide. Type: string (or Expression with resultType string). </param>
        /// <param name="conf"> Spark configuration properties, which will override the &apos;conf&apos; of the spark job definition you provide. </param>
        /// <param name="driverSize"> Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for overriding &apos;driverCores&apos; and &apos;driverMemory&apos; of the spark job definition you provide. Type: string (or Expression with resultType string). </param>
        /// <param name="numExecutors"> Number of executors to launch for this job, which will override the &apos;numExecutors&apos; of the spark job definition you provide. </param>
        /// <returns> A new <see cref="Models.SynapseSparkJobDefinitionActivity"/> instance for mocking. </returns>
        public static SynapseSparkJobDefinitionActivity SynapseSparkJobDefinitionActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, LinkedServiceReference linkedServiceName = null, ActivityPolicy policy = null, SynapseSparkJobReference sparkJob = null, IEnumerable<object> arguments = null, object file = null, object className = null, IEnumerable<object> files = null, BigDataPoolParametrizationReference targetBigDataPool = null, object executorSize = null, object conf = null, object driverSize = null, int? numExecutors = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            arguments ??= new List<object>();
            files ??= new List<object>();

            return new SynapseSparkJobDefinitionActivity(name, "SparkJob", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, linkedServiceName, policy, sparkJob, arguments?.ToList(), file, className, files?.ToList(), targetBigDataPool, executorSize, conf, driverSize, numExecutors);
        }

        /// <summary> Initializes a new instance of SqlPoolStoredProcedureActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlPool"> SQL pool stored procedure reference. </param>
        /// <param name="storedProcedureName"> Stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        /// <returns> A new <see cref="Models.SqlPoolStoredProcedureActivity"/> instance for mocking. </returns>
        public static SqlPoolStoredProcedureActivity SqlPoolStoredProcedureActivity(string name = null, string description = null, IEnumerable<ActivityDependency> dependsOn = null, IEnumerable<UserProperty> userProperties = null, IDictionary<string, object> additionalProperties = null, SqlPoolReference sqlPool = null, object storedProcedureName = null, IDictionary<string, StoredProcedureParameter> storedProcedureParameters = null)
        {
            dependsOn ??= new List<ActivityDependency>();
            userProperties ??= new List<UserProperty>();
            additionalProperties ??= new Dictionary<string, object>();
            storedProcedureParameters ??= new Dictionary<string, StoredProcedureParameter>();

            return new SqlPoolStoredProcedureActivity(name, "SqlPoolStoredProcedure", description, dependsOn?.ToList(), userProperties?.ToList(), additionalProperties, sqlPool, storedProcedureName, storedProcedureParameters);
        }

        /// <summary> Initializes a new instance of MultiplePipelineTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <returns> A new <see cref="Models.MultiplePipelineTrigger"/> instance for mocking. </returns>
        public static MultiplePipelineTrigger MultiplePipelineTrigger(string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new MultiplePipelineTrigger("MultiplePipelineTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList());
        }

        /// <summary> Initializes a new instance of ScheduleTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="recurrence"> Recurrence schedule configuration. </param>
        /// <returns> A new <see cref="Models.ScheduleTrigger"/> instance for mocking. </returns>
        public static ScheduleTrigger ScheduleTrigger(string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, ScheduleTriggerRecurrence recurrence = null)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new ScheduleTrigger("ScheduleTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), recurrence);
        }

        /// <summary> Initializes a new instance of ScheduleTriggerRecurrence. </summary>
        /// <param name="frequency"> The frequency. </param>
        /// <param name="interval"> The interval. </param>
        /// <param name="startTime"> The start time. </param>
        /// <param name="endTime"> The end time. </param>
        /// <param name="timeZone"> The time zone. </param>
        /// <param name="schedule"> The recurrence schedule. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ScheduleTriggerRecurrence"/> instance for mocking. </returns>
        public static ScheduleTriggerRecurrence ScheduleTriggerRecurrence(RecurrenceFrequency? frequency = null, int? interval = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string timeZone = null, RecurrenceSchedule schedule = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ScheduleTriggerRecurrence(frequency, interval, startTime, endTime, timeZone, schedule, additionalProperties);
        }

        /// <summary> Initializes a new instance of RecurrenceSchedule. </summary>
        /// <param name="minutes"> The minutes. </param>
        /// <param name="hours"> The hours. </param>
        /// <param name="weekDays"> The days of the week. </param>
        /// <param name="monthDays"> The month days. </param>
        /// <param name="monthlyOccurrences"> The monthly occurrences. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.RecurrenceSchedule"/> instance for mocking. </returns>
        public static RecurrenceSchedule RecurrenceSchedule(IEnumerable<int> minutes = null, IEnumerable<int> hours = null, IEnumerable<DayOfWeek> weekDays = null, IEnumerable<int> monthDays = null, IEnumerable<RecurrenceScheduleOccurrence> monthlyOccurrences = null, IDictionary<string, object> additionalProperties = null)
        {
            minutes ??= new List<int>();
            hours ??= new List<int>();
            weekDays ??= new List<DayOfWeek>();
            monthDays ??= new List<int>();
            monthlyOccurrences ??= new List<RecurrenceScheduleOccurrence>();
            additionalProperties ??= new Dictionary<string, object>();

            return new RecurrenceSchedule(minutes?.ToList(), hours?.ToList(), weekDays?.ToList(), monthDays?.ToList(), monthlyOccurrences?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of RecurrenceScheduleOccurrence. </summary>
        /// <param name="day"> The day of the week. </param>
        /// <param name="occurrence"> The occurrence. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.RecurrenceScheduleOccurrence"/> instance for mocking. </returns>
        public static RecurrenceScheduleOccurrence RecurrenceScheduleOccurrence(DayOfWeek? day = null, int? occurrence = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new RecurrenceScheduleOccurrence(day, occurrence, additionalProperties);
        }

        /// <summary> Initializes a new instance of BlobTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="folderPath"> The path of the container/folder that will trigger the pipeline. </param>
        /// <param name="maxConcurrency"> The max number of parallel files to handle when it is triggered. </param>
        /// <param name="linkedService"> The Azure Storage linked service reference. </param>
        /// <returns> A new <see cref="Models.BlobTrigger"/> instance for mocking. </returns>
        public static BlobTrigger BlobTrigger(string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string folderPath = null, int maxConcurrency = default, LinkedServiceReference linkedService = null)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            pipelines ??= new List<TriggerPipelineReference>();

            return new BlobTrigger("BlobTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), folderPath, maxConcurrency, linkedService);
        }

        /// <summary> Initializes a new instance of BlobEventsTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="blobPathBeginsWith"> The blob path must begin with the pattern provided for trigger to fire. For example, &apos;/records/blobs/december/&apos; will only fire the trigger for blobs in the december folder under the records container. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith. </param>
        /// <param name="blobPathEndsWith"> The blob path must end with the pattern provided for trigger to fire. For example, &apos;december/boxes.csv&apos; will only fire the trigger for blobs named boxes in a december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith. </param>
        /// <param name="ignoreEmptyBlobs"> If set to true, blobs with zero bytes will be ignored. </param>
        /// <param name="events"> The type of events that cause this trigger to fire. </param>
        /// <param name="scope"> The ARM resource ID of the Storage Account. </param>
        /// <returns> A new <see cref="Models.BlobEventsTrigger"/> instance for mocking. </returns>
        public static BlobEventsTrigger BlobEventsTrigger(string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string blobPathBeginsWith = null, string blobPathEndsWith = null, bool? ignoreEmptyBlobs = null, IEnumerable<BlobEventType> events = null, string scope = null)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            pipelines ??= new List<TriggerPipelineReference>();
            events ??= new List<BlobEventType>();

            return new BlobEventsTrigger("BlobEventsTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), blobPathBeginsWith, blobPathEndsWith, ignoreEmptyBlobs, events?.ToList(), scope);
        }

        /// <summary> Initializes a new instance of CustomEventsTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipelines"> Pipelines that need to be started. </param>
        /// <param name="subjectBeginsWith"> The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith. </param>
        /// <param name="subjectEndsWith"> The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith, subjectEndsWith. </param>
        /// <param name="events"> The list of event types that cause this trigger to fire. </param>
        /// <param name="scope"> The ARM resource ID of the Azure Event Grid Topic. </param>
        /// <returns> A new <see cref="Models.CustomEventsTrigger"/> instance for mocking. </returns>
        public static CustomEventsTrigger CustomEventsTrigger(string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, IEnumerable<TriggerPipelineReference> pipelines = null, string subjectBeginsWith = null, string subjectEndsWith = null, IEnumerable<object> events = null, string scope = null)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            pipelines ??= new List<TriggerPipelineReference>();
            events ??= new List<object>();

            return new CustomEventsTrigger("CustomEventsTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipelines?.ToList(), subjectBeginsWith, subjectEndsWith, events?.ToList(), scope);
        }

        /// <summary> Initializes a new instance of TumblingWindowTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipeline"> Pipeline for which runs are created when an event is fired for trigger window that is ready. </param>
        /// <param name="frequency"> The frequency of the time windows. </param>
        /// <param name="interval"> The interval of the time windows. The minimum interval allowed is 15 Minutes. </param>
        /// <param name="startTime"> The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported. </param>
        /// <param name="endTime"> The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported. </param>
        /// <param name="delay"> Specifies how long the trigger waits past due time before triggering new run. It doesn&apos;t alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). </param>
        /// <param name="maxConcurrency"> The max number of parallel time windows (ready for execution) for which a new run is triggered. </param>
        /// <param name="retryPolicy"> Retry policy that will be applied for failed pipeline runs. </param>
        /// <param name="dependsOn">
        /// Triggers that this trigger depends on. Only tumbling window triggers are supported.
        /// Please note <see cref="DependencyReference"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SelfDependencyTumblingWindowTriggerReference"/>, <see cref="TriggerDependencyReference"/> and <see cref="TumblingWindowTriggerDependencyReference"/>.
        /// </param>
        /// <returns> A new <see cref="Models.TumblingWindowTrigger"/> instance for mocking. </returns>
        public static TumblingWindowTrigger TumblingWindowTrigger(string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, TriggerPipelineReference pipeline = null, TumblingWindowFrequency frequency = default, int interval = default, DateTimeOffset startTime = default, DateTimeOffset? endTime = null, object delay = null, int maxConcurrency = default, RetryPolicy retryPolicy = null, IEnumerable<DependencyReference> dependsOn = null)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            dependsOn ??= new List<DependencyReference>();

            return new TumblingWindowTrigger("TumblingWindowTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipeline, frequency, interval, startTime, endTime, delay, maxConcurrency, retryPolicy, dependsOn?.ToList());
        }

        /// <summary> Initializes a new instance of RetryPolicy. </summary>
        /// <param name="count"> Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0. </param>
        /// <param name="intervalInSeconds"> Interval between retries in seconds. Default is 30. </param>
        /// <returns> A new <see cref="Models.RetryPolicy"/> instance for mocking. </returns>
        public static RetryPolicy RetryPolicy(object count = null, int? intervalInSeconds = null)
        {
            return new RetryPolicy(count, intervalInSeconds);
        }

        /// <summary> Initializes a new instance of DependencyReference. </summary>
        /// <param name="type"> The type of dependency reference. </param>
        /// <returns> A new <see cref="Models.DependencyReference"/> instance for mocking. </returns>
        public static DependencyReference DependencyReference(string type = null)
        {
            return new DependencyReference(type);
        }

        /// <summary> Initializes a new instance of TriggerDependencyReference. </summary>
        /// <param name="referenceTrigger"> Referenced trigger. </param>
        /// <returns> A new <see cref="Models.TriggerDependencyReference"/> instance for mocking. </returns>
        public static TriggerDependencyReference TriggerDependencyReference(TriggerReference referenceTrigger = null)
        {
            return new TriggerDependencyReference("TriggerDependencyReference", referenceTrigger);
        }

        /// <summary> Initializes a new instance of TumblingWindowTriggerDependencyReference. </summary>
        /// <param name="referenceTrigger"> Referenced trigger. </param>
        /// <param name="offset"> Timespan applied to the start time of a tumbling window when evaluating dependency. </param>
        /// <param name="size"> The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used. </param>
        /// <returns> A new <see cref="Models.TumblingWindowTriggerDependencyReference"/> instance for mocking. </returns>
        public static TumblingWindowTriggerDependencyReference TumblingWindowTriggerDependencyReference(TriggerReference referenceTrigger = null, string offset = null, string size = null)
        {
            return new TumblingWindowTriggerDependencyReference("TumblingWindowTriggerDependencyReference", referenceTrigger, offset, size);
        }

        /// <summary> Initializes a new instance of SelfDependencyTumblingWindowTriggerReference. </summary>
        /// <param name="offset"> Timespan applied to the start time of a tumbling window when evaluating dependency. </param>
        /// <param name="size"> The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used. </param>
        /// <returns> A new <see cref="Models.SelfDependencyTumblingWindowTriggerReference"/> instance for mocking. </returns>
        public static SelfDependencyTumblingWindowTriggerReference SelfDependencyTumblingWindowTriggerReference(string offset = null, string size = null)
        {
            return new SelfDependencyTumblingWindowTriggerReference("SelfDependencyTumblingWindowTriggerReference", offset, size);
        }

        /// <summary> Initializes a new instance of ChainingTrigger. </summary>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="pipeline"> Pipeline for which runs are created when all upstream pipelines complete successfully. </param>
        /// <param name="dependsOn"> Upstream Pipelines. </param>
        /// <param name="runDimension"> Run Dimension property that needs to be emitted by upstream pipelines. </param>
        /// <returns> A new <see cref="Models.ChainingTrigger"/> instance for mocking. </returns>
        public static ChainingTrigger ChainingTrigger(string description = null, TriggerRuntimeState? runtimeState = null, IEnumerable<object> annotations = null, IDictionary<string, object> additionalProperties = null, TriggerPipelineReference pipeline = null, IEnumerable<PipelineReference> dependsOn = null, string runDimension = null)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            dependsOn ??= new List<PipelineReference>();

            return new ChainingTrigger("ChainingTrigger", description, runtimeState, annotations?.ToList(), additionalProperties, pipeline, dependsOn?.ToList(), runDimension);
        }

        /// <summary> Initializes a new instance of ManagedIntegrationRuntime. </summary>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="state"> Integration runtime state, only valid for managed dedicated integration runtime. </param>
        /// <param name="managedVirtualNetwork"> Managed Virtual Network reference. </param>
        /// <param name="computeProperties"> The compute resource for managed integration runtime. </param>
        /// <param name="ssisProperties"> SSIS properties for managed integration runtime. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntime"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntime ManagedIntegrationRuntime(string description = null, IDictionary<string, object> additionalProperties = null, IntegrationRuntimeState? state = null, ManagedVirtualNetworkReference managedVirtualNetwork = null, IntegrationRuntimeComputeProperties computeProperties = null, IntegrationRuntimeSsisProperties ssisProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new ManagedIntegrationRuntime("Managed", description, additionalProperties, state, managedVirtualNetwork, computeProperties, ssisProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeComputeProperties. </summary>
        /// <param name="location"> The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities. </param>
        /// <param name="nodeSize"> The node size requirement to managed integration runtime. </param>
        /// <param name="numberOfNodes"> The required number of nodes for managed integration runtime. </param>
        /// <param name="maxParallelExecutionsPerNode"> Maximum parallel executions count per node for managed integration runtime. </param>
        /// <param name="dataFlowProperties"> Data flow properties for managed integration runtime. </param>
        /// <param name="vNetProperties"> VNet properties for managed integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeComputeProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeComputeProperties IntegrationRuntimeComputeProperties(string location = null, string nodeSize = null, int? numberOfNodes = null, int? maxParallelExecutionsPerNode = null, IntegrationRuntimeDataFlowProperties dataFlowProperties = null, IntegrationRuntimeVNetProperties vNetProperties = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new IntegrationRuntimeComputeProperties(location, nodeSize, numberOfNodes, maxParallelExecutionsPerNode, dataFlowProperties, vNetProperties, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeDataFlowProperties. </summary>
        /// <param name="computeType"> Compute type of the cluster which will execute data flow job. </param>
        /// <param name="coreCount"> Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. </param>
        /// <param name="timeToLive"> Time to live (in minutes) setting of the cluster which will execute data flow job. </param>
        /// <param name="cleanup"> Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeDataFlowProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeDataFlowProperties IntegrationRuntimeDataFlowProperties(DataFlowComputeType? computeType = null, int? coreCount = null, int? timeToLive = null, bool? cleanup = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new IntegrationRuntimeDataFlowProperties(computeType, coreCount, timeToLive, cleanup, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeVNetProperties. </summary>
        /// <param name="vNetId"> The ID of the VNet that this integration runtime will join. </param>
        /// <param name="subnet"> The name of the subnet this integration runtime will join. </param>
        /// <param name="publicIPs"> Resource IDs of the public IP addresses that this integration runtime will use. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeVNetProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeVNetProperties IntegrationRuntimeVNetProperties(string vNetId = null, string subnet = null, IEnumerable<string> publicIPs = null, IDictionary<string, object> additionalProperties = null)
        {
            publicIPs ??= new List<string>();
            additionalProperties ??= new Dictionary<string, object>();

            return new IntegrationRuntimeVNetProperties(vNetId, subnet, publicIPs?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeSsisProperties. </summary>
        /// <param name="catalogInfo"> Catalog information for managed dedicated integration runtime. </param>
        /// <param name="licenseType"> License type for bringing your own license scenario. </param>
        /// <param name="customSetupScriptProperties"> Custom setup script properties for a managed dedicated integration runtime. </param>
        /// <param name="dataProxyProperties"> Data proxy properties for a managed dedicated integration runtime. </param>
        /// <param name="edition"> The edition for the SSIS Integration Runtime. </param>
        /// <param name="expressCustomSetupProperties"> Custom setup without script properties for a SSIS integration runtime. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeSsisProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeSsisProperties IntegrationRuntimeSsisProperties(IntegrationRuntimeSsisCatalogInfo catalogInfo = null, IntegrationRuntimeLicenseType? licenseType = null, IntegrationRuntimeCustomSetupScriptProperties customSetupScriptProperties = null, IntegrationRuntimeDataProxyProperties dataProxyProperties = null, IntegrationRuntimeEdition? edition = null, IEnumerable<CustomSetupBase> expressCustomSetupProperties = null, IDictionary<string, object> additionalProperties = null)
        {
            expressCustomSetupProperties ??= new List<CustomSetupBase>();
            additionalProperties ??= new Dictionary<string, object>();

            return new IntegrationRuntimeSsisProperties(catalogInfo, licenseType, customSetupScriptProperties, dataProxyProperties, edition, expressCustomSetupProperties?.ToList(), additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeSsisCatalogInfo. </summary>
        /// <param name="catalogServerEndpoint"> The catalog database server URL. </param>
        /// <param name="catalogAdminUserName"> The administrator user name of catalog database. </param>
        /// <param name="catalogAdminPassword"> The password of the administrator user account of the catalog database. </param>
        /// <param name="catalogPricingTier"> The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeSsisCatalogInfo"/> instance for mocking. </returns>
        public static IntegrationRuntimeSsisCatalogInfo IntegrationRuntimeSsisCatalogInfo(string catalogServerEndpoint = null, string catalogAdminUserName = null, SecureString catalogAdminPassword = null, IntegrationRuntimeSsisCatalogPricingTier? catalogPricingTier = null, IDictionary<string, object> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new IntegrationRuntimeSsisCatalogInfo(catalogServerEndpoint, catalogAdminUserName, catalogAdminPassword, catalogPricingTier, additionalProperties);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeCustomSetupScriptProperties. </summary>
        /// <param name="blobContainerUri"> The URI of the Azure blob container that contains the custom setup script. </param>
        /// <param name="sasToken"> The SAS token of the Azure blob container. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeCustomSetupScriptProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeCustomSetupScriptProperties IntegrationRuntimeCustomSetupScriptProperties(string blobContainerUri = null, SecureString sasToken = null)
        {
            return new IntegrationRuntimeCustomSetupScriptProperties(blobContainerUri, sasToken);
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeDataProxyProperties. </summary>
        /// <param name="connectVia"> The self-hosted integration runtime reference. </param>
        /// <param name="stagingLinkedService"> The staging linked service reference. </param>
        /// <param name="path"> The path to contain the staged data in the Blob storage. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeDataProxyProperties"/> instance for mocking. </returns>
        public static IntegrationRuntimeDataProxyProperties IntegrationRuntimeDataProxyProperties(EntityReference connectVia = null, EntityReference stagingLinkedService = null, string path = null)
        {
            return new IntegrationRuntimeDataProxyProperties(connectVia, stagingLinkedService, path);
        }

        /// <summary> Initializes a new instance of EntityReference. </summary>
        /// <param name="type"> The type of this referenced entity. </param>
        /// <param name="referenceName"> The name of this referenced entity. </param>
        /// <returns> A new <see cref="Models.EntityReference"/> instance for mocking. </returns>
        public static EntityReference EntityReference(IntegrationRuntimeEntityReferenceType? type = null, string referenceName = null)
        {
            return new EntityReference(type, referenceName);
        }

        /// <summary> Initializes a new instance of CustomSetupBase. </summary>
        /// <param name="type"> The type of custom setup. </param>
        /// <returns> A new <see cref="Models.CustomSetupBase"/> instance for mocking. </returns>
        public static CustomSetupBase CustomSetupBase(string type = null)
        {
            return new CustomSetupBase(type);
        }

        /// <summary> Initializes a new instance of ManagedVirtualNetworkReference. </summary>
        /// <param name="type"> Managed Virtual Network reference type. </param>
        /// <param name="referenceName"> Reference ManagedVirtualNetwork name. </param>
        /// <returns> A new <see cref="Models.ManagedVirtualNetworkReference"/> instance for mocking. </returns>
        public static ManagedVirtualNetworkReference ManagedVirtualNetworkReference(string type = null, string referenceName = null)
        {
            return new ManagedVirtualNetworkReference(type, referenceName);
        }

        /// <summary> Initializes a new instance of SelfHostedIntegrationRuntime. </summary>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="linkedInfo">
        /// Linked integration runtime type from data factory
        /// Please note <see cref="LinkedIntegrationRuntimeType"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LinkedIntegrationRuntimeKeyAuthorization"/> and <see cref="LinkedIntegrationRuntimeRbacAuthorization"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SelfHostedIntegrationRuntime"/> instance for mocking. </returns>
        public static SelfHostedIntegrationRuntime SelfHostedIntegrationRuntime(string description = null, IDictionary<string, object> additionalProperties = null, LinkedIntegrationRuntimeType linkedInfo = null)
        {
            additionalProperties ??= new Dictionary<string, object>();

            return new SelfHostedIntegrationRuntime("SelfHosted", description, additionalProperties, linkedInfo);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeType. </summary>
        /// <param name="authorizationType"> The authorization type for integration runtime sharing. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeType"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeType LinkedIntegrationRuntimeType(string authorizationType = null)
        {
            return new LinkedIntegrationRuntimeType(authorizationType);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeKeyAuthorization. </summary>
        /// <param name="key"> The key used for authorization. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeKeyAuthorization"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeKeyAuthorization LinkedIntegrationRuntimeKeyAuthorization(SecureString key = null)
        {
            return new LinkedIntegrationRuntimeKeyAuthorization("Key", key);
        }

        /// <summary> Initializes a new instance of LinkedIntegrationRuntimeRbacAuthorization. </summary>
        /// <param name="resourceId"> The resource identifier of the integration runtime to be shared. </param>
        /// <returns> A new <see cref="Models.LinkedIntegrationRuntimeRbacAuthorization"/> instance for mocking. </returns>
        public static LinkedIntegrationRuntimeRbacAuthorization LinkedIntegrationRuntimeRbacAuthorization(string resourceId = null)
        {
            return new LinkedIntegrationRuntimeRbacAuthorization("RBAC", resourceId);
        }
    }
}
