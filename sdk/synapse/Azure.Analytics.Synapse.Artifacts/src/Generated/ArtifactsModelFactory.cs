// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Analytics.Synapse.Artifacts.Models;

namespace Azure.Analytics.Synapse.Artifacts
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class ArtifactsModelFactory
    {
        /// <summary> Initializes new instance of Resource class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <returns> A new <see cref="Models.Resource"/> instance for mocking. </returns>
        public static Resource Resource(string id = default, string name = default, string type = default)
        {
            return new Resource(id, name, type);
        }

        /// <summary> Initializes new instance of AzureEntityResource class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <returns> A new <see cref="Models.AzureEntityResource"/> instance for mocking. </returns>
        public static AzureEntityResource AzureEntityResource(string id = default, string name = default, string type = default, string etag = default)
        {
            return new AzureEntityResource(id, name, type, etag);
        }

        /// <summary> Initializes new instance of CloudError class. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Property name/path in request associated with error. </param>
        /// <param name="details"> Array with additional error details. </param>
        /// <returns> A new <see cref="Models.CloudError"/> instance for mocking. </returns>
        public static CloudError CloudError(string code = default, string message = default, string target = default, IReadOnlyList<CloudError> details = default)
        {
            details ??= new List<CloudError>();
            return new CloudError(code, message, target, details);
        }

        /// <summary> Initializes new instance of CreateRunResponse class. </summary>
        /// <param name="runId"> Identifier of a run. </param>
        /// <returns> A new <see cref="Models.CreateRunResponse"/> instance for mocking. </returns>
        public static CreateRunResponse CreateRunResponse(string runId = default)
        {
            return new CreateRunResponse(runId);
        }

        /// <summary> Initializes new instance of PipelineRunsQueryResponse class. </summary>
        /// <param name="value"> List of pipeline runs. </param>
        /// <param name="continuationToken"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <returns> A new <see cref="Models.PipelineRunsQueryResponse"/> instance for mocking. </returns>
        public static PipelineRunsQueryResponse PipelineRunsQueryResponse(IReadOnlyList<PipelineRun> value = default, string continuationToken = default)
        {
            value ??= new List<PipelineRun>();
            return new PipelineRunsQueryResponse(value, continuationToken);
        }

        /// <summary> Initializes new instance of PipelineRun class. </summary>
        /// <param name="runId"> Identifier of a run. </param>
        /// <param name="runGroupId"> Identifier that correlates all the recovery runs of a pipeline run. </param>
        /// <param name="isLatest"> Indicates if the recovered pipeline run is the latest in its group. </param>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="parameters"> The full or partial list of parameter name, value pair used in the pipeline run. </param>
        /// <param name="invokedBy"> Entity that started the pipeline run. </param>
        /// <param name="lastUpdated"> The last updated timestamp for the pipeline run event in ISO8601 format. </param>
        /// <param name="runStart"> The start time of a pipeline run in ISO8601 format. </param>
        /// <param name="runEnd"> The end time of a pipeline run in ISO8601 format. </param>
        /// <param name="durationInMs"> The duration of a pipeline run. </param>
        /// <param name="status"> The status of a pipeline run. </param>
        /// <param name="message"> The message from a pipeline run. </param>
        /// <param name="additionalProperties"> . </param>
        /// <returns> A new <see cref="Models.PipelineRun"/> instance for mocking. </returns>
        public static PipelineRun PipelineRun(string runId = default, string runGroupId = default, bool? isLatest = default, string pipelineName = default, IReadOnlyDictionary<string, string> parameters = default, PipelineRunInvokedBy invokedBy = default, DateTimeOffset? lastUpdated = default, DateTimeOffset? runStart = default, DateTimeOffset? runEnd = default, int? durationInMs = default, string status = default, string message = default, IReadOnlyDictionary<string, object> additionalProperties = default)
        {
            parameters ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, object>();
            return new PipelineRun(runId, runGroupId, isLatest, pipelineName, parameters, invokedBy, lastUpdated, runStart, runEnd, durationInMs, status, message, additionalProperties);
        }

        /// <summary> Initializes new instance of PipelineRunInvokedBy class. </summary>
        /// <param name="name"> Name of the entity that started the pipeline run. </param>
        /// <param name="id"> The ID of the entity that started the run. </param>
        /// <param name="invokedByType"> The type of the entity that started the run. </param>
        /// <returns> A new <see cref="Models.PipelineRunInvokedBy"/> instance for mocking. </returns>
        public static PipelineRunInvokedBy PipelineRunInvokedBy(string name = default, string id = default, string invokedByType = default)
        {
            return new PipelineRunInvokedBy(name, id, invokedByType);
        }

        /// <summary> Initializes new instance of ActivityRunsQueryResponse class. </summary>
        /// <param name="value"> List of activity runs. </param>
        /// <param name="continuationToken"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <returns> A new <see cref="Models.ActivityRunsQueryResponse"/> instance for mocking. </returns>
        public static ActivityRunsQueryResponse ActivityRunsQueryResponse(IReadOnlyList<ActivityRun> value = default, string continuationToken = default)
        {
            value ??= new List<ActivityRun>();
            return new ActivityRunsQueryResponse(value, continuationToken);
        }

        /// <summary> Initializes new instance of ActivityRun class. </summary>
        /// <param name="pipelineName"> The name of the pipeline. </param>
        /// <param name="pipelineRunId"> The id of the pipeline run. </param>
        /// <param name="activityName"> The name of the activity. </param>
        /// <param name="activityType"> The type of the activity. </param>
        /// <param name="activityRunId"> The id of the activity run. </param>
        /// <param name="linkedServiceName"> The name of the compute linked service. </param>
        /// <param name="status"> The status of the activity run. </param>
        /// <param name="activityRunStart"> The start time of the activity run in &apos;ISO 8601&apos; format. </param>
        /// <param name="activityRunEnd"> The end time of the activity run in &apos;ISO 8601&apos; format. </param>
        /// <param name="durationInMs"> The duration of the activity run. </param>
        /// <param name="input"> The input for the activity. </param>
        /// <param name="output"> The output for the activity. </param>
        /// <param name="error"> The error if any from the activity run. </param>
        /// <param name="additionalProperties"> . </param>
        /// <returns> A new <see cref="Models.ActivityRun"/> instance for mocking. </returns>
        public static ActivityRun ActivityRun(string pipelineName = default, string pipelineRunId = default, string activityName = default, string activityType = default, string activityRunId = default, string linkedServiceName = default, string status = default, DateTimeOffset? activityRunStart = default, DateTimeOffset? activityRunEnd = default, int? durationInMs = default, object input = default, object output = default, object error = default, IReadOnlyDictionary<string, object> additionalProperties = default)
        {
            additionalProperties ??= new Dictionary<string, object>();
            return new ActivityRun(pipelineName, pipelineRunId, activityName, activityType, activityRunId, linkedServiceName, status, activityRunStart, activityRunEnd, durationInMs, input, output, error, additionalProperties);
        }

        /// <summary> Initializes new instance of Trigger class. </summary>
        /// <param name="type"> Trigger type. </param>
        /// <param name="description"> Trigger description. </param>
        /// <param name="runtimeState"> Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger. </param>
        /// <param name="annotations"> List of tags that can be used for describing the trigger. </param>
        /// <param name="additionalProperties"> . </param>
        /// <returns> A new <see cref="Models.Trigger"/> instance for mocking. </returns>
        public static Trigger Trigger(string type = default, string description = default, TriggerRuntimeState? runtimeState = default, IList<object> annotations = default, IDictionary<string, object> additionalProperties = default)
        {
            annotations ??= new List<object>();
            additionalProperties ??= new Dictionary<string, object>();
            return new Trigger(type, description, runtimeState, annotations, additionalProperties);
        }

        /// <summary> Initializes new instance of TriggerSubscriptionOperationStatus class. </summary>
        /// <param name="triggerName"> Trigger name. </param>
        /// <param name="status"> Event Subscription Status. </param>
        /// <returns> A new <see cref="Models.TriggerSubscriptionOperationStatus"/> instance for mocking. </returns>
        public static TriggerSubscriptionOperationStatus TriggerSubscriptionOperationStatus(string triggerName = default, EventSubscriptionStatus? status = default)
        {
            return new TriggerSubscriptionOperationStatus(triggerName, status);
        }

        /// <summary> Initializes new instance of TriggerRunsQueryResponse class. </summary>
        /// <param name="value"> List of trigger runs. </param>
        /// <param name="continuationToken"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <returns> A new <see cref="Models.TriggerRunsQueryResponse"/> instance for mocking. </returns>
        public static TriggerRunsQueryResponse TriggerRunsQueryResponse(IReadOnlyList<TriggerRun> value = default, string continuationToken = default)
        {
            value ??= new List<TriggerRun>();
            return new TriggerRunsQueryResponse(value, continuationToken);
        }

        /// <summary> Initializes new instance of TriggerRun class. </summary>
        /// <param name="triggerRunId"> Trigger run id. </param>
        /// <param name="triggerName"> Trigger name. </param>
        /// <param name="triggerType"> Trigger type. </param>
        /// <param name="triggerRunTimestamp"> Trigger run start time. </param>
        /// <param name="status"> Trigger run status. </param>
        /// <param name="message"> Trigger error message. </param>
        /// <param name="properties"> List of property name and value related to trigger run. Name, value pair depends on type of trigger. </param>
        /// <param name="triggeredPipelines"> List of pipeline name and run Id triggered by the trigger run. </param>
        /// <param name="additionalProperties"> . </param>
        /// <returns> A new <see cref="Models.TriggerRun"/> instance for mocking. </returns>
        public static TriggerRun TriggerRun(string triggerRunId = default, string triggerName = default, string triggerType = default, DateTimeOffset? triggerRunTimestamp = default, TriggerRunStatus? status = default, string message = default, IReadOnlyDictionary<string, string> properties = default, IReadOnlyDictionary<string, string> triggeredPipelines = default, IReadOnlyDictionary<string, object> additionalProperties = default)
        {
            properties ??= new Dictionary<string, string>();
            triggeredPipelines ??= new Dictionary<string, string>();
            additionalProperties ??= new Dictionary<string, object>();
            return new TriggerRun(triggerRunId, triggerName, triggerType, triggerRunTimestamp, status, message, properties, triggeredPipelines, additionalProperties);
        }

        /// <summary> Initializes new instance of CreateDataFlowDebugSessionResponse class. </summary>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <returns> A new <see cref="Models.CreateDataFlowDebugSessionResponse"/> instance for mocking. </returns>
        public static CreateDataFlowDebugSessionResponse CreateDataFlowDebugSessionResponse(string sessionId = default)
        {
            return new CreateDataFlowDebugSessionResponse(sessionId);
        }

        /// <summary> Initializes new instance of DataFlowDebugSessionInfo class. </summary>
        /// <param name="dataFlowName"> The name of the data flow. </param>
        /// <param name="computeType"> Compute type of the cluster. </param>
        /// <param name="coreCount"> Core count of the cluster. </param>
        /// <param name="nodeCount"> Node count of the cluster. (deprecated property). </param>
        /// <param name="integrationRuntimeName"> Attached integration runtime name of data flow debug session. </param>
        /// <param name="sessionId"> The ID of data flow debug session. </param>
        /// <param name="startTime"> Start time of data flow debug session. </param>
        /// <param name="timeToLiveInMinutes"> Compute type of the cluster. </param>
        /// <param name="lastActivityTime"> Last activity time of data flow debug session. </param>
        /// <param name="additionalProperties"> . </param>
        /// <returns> A new <see cref="Models.DataFlowDebugSessionInfo"/> instance for mocking. </returns>
        public static DataFlowDebugSessionInfo DataFlowDebugSessionInfo(string dataFlowName = default, string computeType = default, int? coreCount = default, int? nodeCount = default, string integrationRuntimeName = default, string sessionId = default, string startTime = default, int? timeToLiveInMinutes = default, string lastActivityTime = default, IReadOnlyDictionary<string, object> additionalProperties = default)
        {
            additionalProperties ??= new Dictionary<string, object>();
            return new DataFlowDebugSessionInfo(dataFlowName, computeType, coreCount, nodeCount, integrationRuntimeName, sessionId, startTime, timeToLiveInMinutes, lastActivityTime, additionalProperties);
        }

        /// <summary> Initializes new instance of AddDataFlowToDebugSessionResponse class. </summary>
        /// <param name="jobVersion"> The ID of data flow debug job version. </param>
        /// <returns> A new <see cref="Models.AddDataFlowToDebugSessionResponse"/> instance for mocking. </returns>
        public static AddDataFlowToDebugSessionResponse AddDataFlowToDebugSessionResponse(string jobVersion = default)
        {
            return new AddDataFlowToDebugSessionResponse(jobVersion);
        }

        /// <summary> Initializes new instance of DataFlowDebugCommandResponse class. </summary>
        /// <param name="status"> The run status of data preview, statistics or expression preview. </param>
        /// <param name="data"> The result data of data preview, statistics or expression preview. </param>
        /// <returns> A new <see cref="Models.DataFlowDebugCommandResponse"/> instance for mocking. </returns>
        public static DataFlowDebugCommandResponse DataFlowDebugCommandResponse(string status = default, string data = default)
        {
            return new DataFlowDebugCommandResponse(status, data);
        }

        /// <summary> Initializes new instance of SqlScriptResource class. </summary>
        /// <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of sql script. </param>
        /// <returns> A new <see cref="Models.SqlScriptResource"/> instance for mocking. </returns>
        public static SqlScriptResource SqlScriptResource(string id = default, string name = default, string type = default, string etag = default, SqlScript properties = default)
        {
            return new SqlScriptResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes new instance of SparkBatchJob class. </summary>
        /// <param name="livyInfo"> . </param>
        /// <param name="name"> The batch name. </param>
        /// <param name="workspaceName"> The workspace name. </param>
        /// <param name="sparkPoolName"> The Spark pool name. </param>
        /// <param name="submitterName"> The submitter name. </param>
        /// <param name="submitterId"> The submitter identifier. </param>
        /// <param name="artifactId"> The artifact identifier. </param>
        /// <param name="jobType"> The job type. </param>
        /// <param name="result"> The Spark batch job result. </param>
        /// <param name="scheduler"> The scheduler information. </param>
        /// <param name="plugin"> The plugin information. </param>
        /// <param name="errors"> The error information. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="id"> The session Id. </param>
        /// <param name="appId"> The application id of this session. </param>
        /// <param name="appInfo"> The detailed application info. </param>
        /// <param name="state"> The batch state. </param>
        /// <param name="logLines"> The log lines. </param>
        /// <returns> A new <see cref="Models.SparkBatchJob"/> instance for mocking. </returns>
        public static SparkBatchJob SparkBatchJob(SparkBatchJobState livyInfo = default, string name = default, string workspaceName = default, string sparkPoolName = default, string submitterName = default, string submitterId = default, string artifactId = default, SparkJobType? jobType = default, SparkBatchJobResultType? result = default, SparkScheduler scheduler = default, SparkServicePlugin plugin = default, IReadOnlyList<SparkServiceError> errors = default, IReadOnlyDictionary<string, string> tags = default, int id = default, string appId = default, IReadOnlyDictionary<string, string> appInfo = default, string state = default, IReadOnlyList<string> logLines = default)
        {
            errors ??= new List<SparkServiceError>();
            tags ??= new Dictionary<string, string>();
            appInfo ??= new Dictionary<string, string>();
            logLines ??= new List<string>();
            return new SparkBatchJob(livyInfo, name, workspaceName, sparkPoolName, submitterName, submitterId, artifactId, jobType, result, scheduler, plugin, errors, tags, id, appId, appInfo, state, logLines);
        }

        /// <summary> Initializes new instance of SparkBatchJobState class. </summary>
        /// <param name="notStartedAt"> the time that at which &quot;not_started&quot; livy state was first seen. </param>
        /// <param name="startingAt"> the time that at which &quot;starting&quot; livy state was first seen. </param>
        /// <param name="runningAt"> the time that at which &quot;running&quot; livy state was first seen. </param>
        /// <param name="deadAt"> time that at which &quot;dead&quot; livy state was first seen. </param>
        /// <param name="successAt"> the time that at which &quot;success&quot; livy state was first seen. </param>
        /// <param name="terminatedAt"> the time that at which &quot;killed&quot; livy state was first seen. </param>
        /// <param name="recoveringAt"> the time that at which &quot;recovering&quot; livy state was first seen. </param>
        /// <param name="currentState"> the Spark job state. </param>
        /// <param name="jobCreationRequest"> . </param>
        /// <returns> A new <see cref="Models.SparkBatchJobState"/> instance for mocking. </returns>
        public static SparkBatchJobState SparkBatchJobState(DateTimeOffset? notStartedAt = default, DateTimeOffset? startingAt = default, DateTimeOffset? runningAt = default, DateTimeOffset? deadAt = default, DateTimeOffset? successAt = default, DateTimeOffset? terminatedAt = default, DateTimeOffset? recoveringAt = default, string currentState = default, SparkRequest jobCreationRequest = default)
        {
            return new SparkBatchJobState(notStartedAt, startingAt, runningAt, deadAt, successAt, terminatedAt, recoveringAt, currentState, jobCreationRequest);
        }

        /// <summary> Initializes new instance of SparkRequest class. </summary>
        /// <param name="name"> . </param>
        /// <param name="file"> . </param>
        /// <param name="className"> . </param>
        /// <param name="arguments"> . </param>
        /// <param name="jars"> . </param>
        /// <param name="pythonFiles"> . </param>
        /// <param name="files"> . </param>
        /// <param name="archives"> . </param>
        /// <param name="configuration"> Dictionary of &lt;string&gt;. </param>
        /// <param name="driverMemory"> . </param>
        /// <param name="driverCores"> . </param>
        /// <param name="executorMemory"> . </param>
        /// <param name="executorCores"> . </param>
        /// <param name="executorCount"> . </param>
        /// <returns> A new <see cref="Models.SparkRequest"/> instance for mocking. </returns>
        public static SparkRequest SparkRequest(string name = default, string file = default, string className = default, IReadOnlyList<string> arguments = default, IReadOnlyList<string> jars = default, IReadOnlyList<string> pythonFiles = default, IReadOnlyList<string> files = default, IReadOnlyList<string> archives = default, IReadOnlyDictionary<string, string> configuration = default, string driverMemory = default, int? driverCores = default, string executorMemory = default, int? executorCores = default, int? executorCount = default)
        {
            arguments ??= new List<string>();
            jars ??= new List<string>();
            pythonFiles ??= new List<string>();
            files ??= new List<string>();
            archives ??= new List<string>();
            configuration ??= new Dictionary<string, string>();
            return new SparkRequest(name, file, className, arguments, jars, pythonFiles, files, archives, configuration, driverMemory, driverCores, executorMemory, executorCores, executorCount);
        }

        /// <summary> Initializes new instance of SparkScheduler class. </summary>
        /// <param name="submittedAt"> . </param>
        /// <param name="scheduledAt"> . </param>
        /// <param name="endedAt"> . </param>
        /// <param name="cancellationRequestedAt"> . </param>
        /// <param name="currentState"> . </param>
        /// <returns> A new <see cref="Models.SparkScheduler"/> instance for mocking. </returns>
        public static SparkScheduler SparkScheduler(DateTimeOffset? submittedAt = default, DateTimeOffset? scheduledAt = default, DateTimeOffset? endedAt = default, DateTimeOffset? cancellationRequestedAt = default, SchedulerCurrentState? currentState = default)
        {
            return new SparkScheduler(submittedAt, scheduledAt, endedAt, cancellationRequestedAt, currentState);
        }

        /// <summary> Initializes new instance of SparkServicePlugin class. </summary>
        /// <param name="preparationStartedAt"> . </param>
        /// <param name="resourceAcquisitionStartedAt"> . </param>
        /// <param name="submissionStartedAt"> . </param>
        /// <param name="monitoringStartedAt"> . </param>
        /// <param name="cleanupStartedAt"> . </param>
        /// <param name="currentState"> . </param>
        /// <returns> A new <see cref="Models.SparkServicePlugin"/> instance for mocking. </returns>
        public static SparkServicePlugin SparkServicePlugin(DateTimeOffset? preparationStartedAt = default, DateTimeOffset? resourceAcquisitionStartedAt = default, DateTimeOffset? submissionStartedAt = default, DateTimeOffset? monitoringStartedAt = default, DateTimeOffset? cleanupStartedAt = default, PluginCurrentState? currentState = default)
        {
            return new SparkServicePlugin(preparationStartedAt, resourceAcquisitionStartedAt, submissionStartedAt, monitoringStartedAt, cleanupStartedAt, currentState);
        }

        /// <summary> Initializes new instance of SparkServiceError class. </summary>
        /// <param name="message"> . </param>
        /// <param name="errorCode"> . </param>
        /// <param name="source"> . </param>
        /// <returns> A new <see cref="Models.SparkServiceError"/> instance for mocking. </returns>
        public static SparkServiceError SparkServiceError(string message = default, string errorCode = default, SparkErrorSource? source = default)
        {
            return new SparkServiceError(message, errorCode, source);
        }

        /// <summary> Initializes new instance of NotebookResource class. </summary>
        /// <param name="id"> Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts. </param>
        /// <param name="etag"> Resource Etag. </param>
        /// <param name="properties"> Properties of Notebook. </param>
        /// <returns> A new <see cref="Models.NotebookResource"/> instance for mocking. </returns>
        public static NotebookResource NotebookResource(string id = default, string name = default, string type = default, string etag = default, Notebook properties = default)
        {
            return new NotebookResource(id, name, type, etag, properties);
        }

        /// <summary> Initializes new instance of Workspace class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="identity"> Identity of the workspace. </param>
        /// <param name="defaultDataLakeStorage"> Workspace default data lake storage account details. </param>
        /// <param name="sqlAdministratorLoginPassword"> SQL administrator login password. </param>
        /// <param name="managedResourceGroupName"> Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and &apos;-&apos;, &apos;_&apos;, &apos;(&apos;, &apos;)&apos; and&apos;.&apos;. Note that the name cannot end with &apos;.&apos;. </param>
        /// <param name="provisioningState"> Resource provisioning state. </param>
        /// <param name="sqlAdministratorLogin"> Login for workspace SQL active directory administrator. </param>
        /// <param name="virtualNetworkProfile"> Virtual Network profile. </param>
        /// <param name="connectivityEndpoints"> Connectivity endpoints. </param>
        /// <param name="managedVirtualNetwork"> Setting this to &apos;default&apos; will ensure that all compute for this workspace is in a virtual network managed on behalf of the user. </param>
        /// <param name="privateEndpointConnections"> Private endpoint connections to the workspace. </param>
        /// <param name="encryption"> The encryption details of the workspace. </param>
        /// <param name="workspaceUID"> The workspace unique identifier. </param>
        /// <param name="extraProperties"> Workspace level configs and feature flags. </param>
        /// <param name="managedVirtualNetworkSettings"> Managed Virtual Network Settings. </param>
        /// <param name="workspaceRepositoryConfiguration"> Git integration settings. </param>
        /// <param name="purviewConfiguration"> Purview Configuration. </param>
        /// <param name="adlaResourceId"> The ADLA resource ID. </param>
        /// <returns> A new <see cref="Models.Workspace"/> instance for mocking. </returns>
        public static Workspace Workspace(string id = default, string name = default, string type = default, IDictionary<string, string> tags = default, string location = default, ManagedIdentity identity = default, DataLakeStorageAccountDetails defaultDataLakeStorage = default, string sqlAdministratorLoginPassword = default, string managedResourceGroupName = default, string provisioningState = default, string sqlAdministratorLogin = default, VirtualNetworkProfile virtualNetworkProfile = default, IDictionary<string, string> connectivityEndpoints = default, string managedVirtualNetwork = default, IList<PrivateEndpointConnection> privateEndpointConnections = default, EncryptionDetails encryption = default, Guid? workspaceUID = default, IReadOnlyDictionary<string, object> extraProperties = default, ManagedVirtualNetworkSettings managedVirtualNetworkSettings = default, WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration = default, PurviewConfiguration purviewConfiguration = default, string adlaResourceId = default)
        {
            tags ??= new Dictionary<string, string>();
            connectivityEndpoints ??= new Dictionary<string, string>();
            privateEndpointConnections ??= new List<PrivateEndpointConnection>();
            extraProperties ??= new Dictionary<string, object>();
            return new Workspace(id, name, type, tags, location, identity, defaultDataLakeStorage, sqlAdministratorLoginPassword, managedResourceGroupName, provisioningState, sqlAdministratorLogin, virtualNetworkProfile, connectivityEndpoints, managedVirtualNetwork, privateEndpointConnections, encryption, workspaceUID, extraProperties, managedVirtualNetworkSettings, workspaceRepositoryConfiguration, purviewConfiguration, adlaResourceId);
        }

        /// <summary> Initializes new instance of PrivateEndpointConnection class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="privateEndpoint"> The private endpoint which the connection belongs to. </param>
        /// <param name="privateLinkServiceConnectionState"> Connection state of the private endpoint connection. </param>
        /// <param name="provisioningState"> Provisioning state of the private endpoint connection. </param>
        /// <returns> A new <see cref="Models.PrivateEndpointConnection"/> instance for mocking. </returns>
        public static PrivateEndpointConnection PrivateEndpointConnection(string id = default, string name = default, string type = default, PrivateEndpoint privateEndpoint = default, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default, string provisioningState = default)
        {
            return new PrivateEndpointConnection(id, name, type, privateEndpoint, privateLinkServiceConnectionState, provisioningState);
        }

        /// <summary> Initializes new instance of PrivateEndpoint class. </summary>
        /// <param name="id"> Resource id of the private endpoint. </param>
        /// <returns> A new <see cref="Models.PrivateEndpoint"/> instance for mocking. </returns>
        public static PrivateEndpoint PrivateEndpoint(string id = default)
        {
            return new PrivateEndpoint(id);
        }

        /// <summary> Initializes new instance of PrivateLinkServiceConnectionState class. </summary>
        /// <param name="status"> The private link service connection status. </param>
        /// <param name="description"> The private link service connection description. </param>
        /// <param name="actionsRequired"> The actions required for private link service connection. </param>
        /// <returns> A new <see cref="Models.PrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState(string status = default, string description = default, string actionsRequired = default)
        {
            return new PrivateLinkServiceConnectionState(status, description, actionsRequired);
        }

        /// <summary> Initializes new instance of EncryptionDetails class. </summary>
        /// <param name="doubleEncryptionEnabled"> Double Encryption enabled. </param>
        /// <param name="cmk"> Customer Managed Key Details. </param>
        /// <returns> A new <see cref="Models.EncryptionDetails"/> instance for mocking. </returns>
        public static EncryptionDetails EncryptionDetails(bool? doubleEncryptionEnabled = default, CustomerManagedKeyDetails cmk = default)
        {
            return new EncryptionDetails(doubleEncryptionEnabled, cmk);
        }

        /// <summary> Initializes new instance of CustomerManagedKeyDetails class. </summary>
        /// <param name="status"> The customer managed key status on the workspace. </param>
        /// <param name="key"> The key object of the workspace. </param>
        /// <returns> A new <see cref="Models.CustomerManagedKeyDetails"/> instance for mocking. </returns>
        public static CustomerManagedKeyDetails CustomerManagedKeyDetails(string status = default, WorkspaceKeyDetails key = default)
        {
            return new CustomerManagedKeyDetails(status, key);
        }

        /// <summary> Initializes new instance of ManagedIdentity class. </summary>
        /// <param name="principalId"> The principal ID of the workspace managed identity. </param>
        /// <param name="tenantId"> The tenant ID of the workspace managed identity. </param>
        /// <param name="type"> The type of managed identity for the workspace. </param>
        /// <returns> A new <see cref="Models.ManagedIdentity"/> instance for mocking. </returns>
        public static ManagedIdentity ManagedIdentity(string principalId = default, Guid? tenantId = default, ResourceIdentityType? type = default)
        {
            return new ManagedIdentity(principalId, tenantId, type);
        }

        /// <summary> Initializes new instance of SqlPoolInfoListResult class. </summary>
        /// <param name="nextLink"> Link to the next page of results. </param>
        /// <param name="value"> List of SQL pools. </param>
        /// <returns> A new <see cref="Models.SqlPoolInfoListResult"/> instance for mocking. </returns>
        public static SqlPoolInfoListResult SqlPoolInfoListResult(string nextLink = default, IReadOnlyList<SqlPool> value = default)
        {
            value ??= new List<SqlPool>();
            return new SqlPoolInfoListResult(nextLink, value);
        }

        /// <summary> Initializes new instance of BigDataPoolResourceInfoListResult class. </summary>
        /// <param name="nextLink"> Link to the next page of results. </param>
        /// <param name="value"> List of Big Data pools. </param>
        /// <returns> A new <see cref="Models.BigDataPoolResourceInfoListResult"/> instance for mocking. </returns>
        public static BigDataPoolResourceInfoListResult BigDataPoolResourceInfoListResult(string nextLink = default, IReadOnlyList<BigDataPoolResourceInfo> value = default)
        {
            value ??= new List<BigDataPoolResourceInfo>();
            return new BigDataPoolResourceInfoListResult(nextLink, value);
        }

        /// <summary> Initializes new instance of BigDataPoolResourceInfo class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="type"> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="provisioningState"> The state of the Big Data pool. </param>
        /// <param name="autoScale"> Auto-scaling properties. </param>
        /// <param name="creationDate"> The time when the Big Data pool was created. </param>
        /// <param name="autoPause"> Auto-pausing properties. </param>
        /// <param name="isComputeIsolationEnabled"> Whether compute isolation is required or not. </param>
        /// <param name="sessionLevelPackagesEnabled"> Whether session level packages enabled. </param>
        /// <param name="cacheSize"> The cache size. </param>
        /// <param name="dynamicExecutorAllocation"> Dynamic Executor Allocation. </param>
        /// <param name="sparkEventsFolder"> The Spark events folder. </param>
        /// <param name="nodeCount"> The number of nodes in the Big Data pool. </param>
        /// <param name="libraryRequirements"> Library version requirements. </param>
        /// <param name="customLibraries"> List of custom libraries/packages associated with the spark pool. </param>
        /// <param name="sparkConfigProperties"> Spark configuration file to specify additional properties. </param>
        /// <param name="sparkVersion"> The Apache Spark version. </param>
        /// <param name="defaultSparkLogFolder"> The default folder where Spark logs will be written. </param>
        /// <param name="nodeSize"> The level of compute power that each node in the Big Data pool has. </param>
        /// <param name="nodeSizeFamily"> The kind of nodes that the Big Data pool provides. </param>
        /// <param name="lastSucceededTimestamp"> The time when the Big Data pool was updated successfully. </param>
        /// <returns> A new <see cref="Models.BigDataPoolResourceInfo"/> instance for mocking. </returns>
        public static BigDataPoolResourceInfo BigDataPoolResourceInfo(string id = default, string name = default, string type = default, IDictionary<string, string> tags = default, string location = default, string provisioningState = default, AutoScaleProperties autoScale = default, DateTimeOffset? creationDate = default, AutoPauseProperties autoPause = default, bool? isComputeIsolationEnabled = default, bool? sessionLevelPackagesEnabled = default, int? cacheSize = default, DynamicExecutorAllocation dynamicExecutorAllocation = default, string sparkEventsFolder = default, int? nodeCount = default, LibraryRequirements libraryRequirements = default, IList<LibraryInfo> customLibraries = default, LibraryRequirements sparkConfigProperties = default, string sparkVersion = default, string defaultSparkLogFolder = default, NodeSize? nodeSize = default, NodeSizeFamily? nodeSizeFamily = default, DateTimeOffset? lastSucceededTimestamp = default)
        {
            tags ??= new Dictionary<string, string>();
            customLibraries ??= new List<LibraryInfo>();
            return new BigDataPoolResourceInfo(id, name, type, tags, location, provisioningState, autoScale, creationDate, autoPause, isComputeIsolationEnabled, sessionLevelPackagesEnabled, cacheSize, dynamicExecutorAllocation, sparkEventsFolder, nodeCount, libraryRequirements, customLibraries, sparkConfigProperties, sparkVersion, defaultSparkLogFolder, nodeSize, nodeSizeFamily, lastSucceededTimestamp);
        }

        /// <summary> Initializes new instance of LibraryRequirements class. </summary>
        /// <param name="time"> The last update time of the library requirements file. </param>
        /// <param name="content"> The library requirements. </param>
        /// <param name="filename"> The filename of the library requirements file. </param>
        /// <returns> A new <see cref="Models.LibraryRequirements"/> instance for mocking. </returns>
        public static LibraryRequirements LibraryRequirements(DateTimeOffset? time = default, string content = default, string filename = default)
        {
            return new LibraryRequirements(time, content, filename);
        }

        /// <summary> Initializes new instance of LibraryInfo class. </summary>
        /// <param name="name"> Name of the library. </param>
        /// <param name="path"> Storage blob path of library. </param>
        /// <param name="containerName"> Storage blob container name. </param>
        /// <param name="uploadedTimestamp"> The last update time of the library. </param>
        /// <param name="type"> Type of the library. </param>
        /// <param name="provisioningStatus"> Provisioning status of the library/package. </param>
        /// <param name="creatorId"> Creator Id of the library/package. </param>
        /// <returns> A new <see cref="Models.LibraryInfo"/> instance for mocking. </returns>
        public static LibraryInfo LibraryInfo(string name = default, string path = default, string containerName = default, DateTimeOffset? uploadedTimestamp = default, string type = default, string provisioningStatus = default, string creatorId = default)
        {
            return new LibraryInfo(name, path, containerName, uploadedTimestamp, type, provisioningStatus, creatorId);
        }

        /// <summary> Initializes new instance of IntegrationRuntimeListResponse class. </summary>
        /// <param name="value"> List of integration runtimes. </param>
        /// <param name="nextLink"> The link to the next page of results, if any remaining results exist. </param>
        /// <returns> A new <see cref="Models.IntegrationRuntimeListResponse"/> instance for mocking. </returns>
        public static IntegrationRuntimeListResponse IntegrationRuntimeListResponse(IReadOnlyList<IntegrationRuntimeResource> value = default, string nextLink = default)
        {
            value ??= new List<IntegrationRuntimeResource>();
            return new IntegrationRuntimeListResponse(value, nextLink);
        }

        /// <summary> Initializes new instance of LibraryResourceProperties class. </summary>
        /// <param name="name"> Name of the library/package. </param>
        /// <param name="path"> Location of library/package in storage account. </param>
        /// <param name="containerName"> Container name of the library/package. </param>
        /// <param name="uploadedTimestamp"> The last update time of the library/package. </param>
        /// <param name="type"> Type of the library/package. </param>
        /// <param name="provisioningStatus"> Provisioning status of the library/package. </param>
        /// <param name="creatorId"> Creator Id of the library/package. </param>
        /// <returns> A new <see cref="Models.LibraryResourceProperties"/> instance for mocking. </returns>
        public static LibraryResourceProperties LibraryResourceProperties(string name = default, string path = default, string containerName = default, string uploadedTimestamp = default, string type = default, string provisioningStatus = default, string creatorId = default)
        {
            return new LibraryResourceProperties(name, path, containerName, uploadedTimestamp, type, provisioningStatus, creatorId);
        }

        /// <summary> Initializes new instance of LibraryResourceInfo class. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="recordId"> record Id of the library/package. </param>
        /// <param name="state"> Provisioning status of the library/package. </param>
        /// <param name="created"> The creation time of the library/package. </param>
        /// <param name="changed"> The last updated time of the library/package. </param>
        /// <param name="type"> The type of the resource. E.g. LibraryArtifact. </param>
        /// <param name="name"> Name of the library/package. </param>
        /// <param name="operationId"> Operation Id of the operation performed on library/package. </param>
        /// <param name="artifactId"> artifact Id of the library/package. </param>
        /// <returns> A new <see cref="Models.LibraryResourceInfo"/> instance for mocking. </returns>
        public static LibraryResourceInfo LibraryResourceInfo(string id = default, int? recordId = default, string state = default, string created = default, string changed = default, string type = default, string name = default, string operationId = default, string artifactId = default)
        {
            return new LibraryResourceInfo(id, recordId, state, created, changed, type, name, operationId, artifactId);
        }

        /// <summary> Initializes new instance of OperationResult class. </summary>
        /// <param name="status"> Operation status. </param>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <param name="target"> Property name/path in request associated with error. </param>
        /// <param name="details"> Array with additional error details. </param>
        /// <returns> A new <see cref="Models.OperationResult"/> instance for mocking. </returns>
        public static OperationResult OperationResult(string status = default, string code = default, string message = default, string target = default, IReadOnlyList<CloudError> details = default)
        {
            details ??= new List<CloudError>();
            return new OperationResult(status, code, message, target, details);
        }

        /// <summary> Initializes new instance of GitHubAccessTokenResponse class. </summary>
        /// <param name="gitHubAccessToken"> . </param>
        /// <returns> A new <see cref="Models.GitHubAccessTokenResponse"/> instance for mocking. </returns>
        public static GitHubAccessTokenResponse GitHubAccessTokenResponse(string gitHubAccessToken = default)
        {
            return new GitHubAccessTokenResponse(gitHubAccessToken);
        }

        /// <summary> Initializes new instance of WorkspaceIdentity class. </summary>
        /// <param name="type"> The identity type. Currently the only supported type is &apos;SystemAssigned&apos;. </param>
        /// <param name="principalId"> The principal id of the identity. </param>
        /// <param name="tenantId"> The client tenant id of the identity. </param>
        /// <returns> A new <see cref="Models.WorkspaceIdentity"/> instance for mocking. </returns>
        public static WorkspaceIdentity WorkspaceIdentity(string type = default, string principalId = default, string tenantId = default)
        {
            return new WorkspaceIdentity(type, principalId, tenantId);
        }

        /// <summary> Initializes new instance of RerunTriggerListResponse class. </summary>
        /// <param name="value"> List of rerun triggers. </param>
        /// <param name="nextLink"> The continuation token for getting the next page of results, if any remaining results exist, null otherwise. </param>
        /// <returns> A new <see cref="Models.RerunTriggerListResponse"/> instance for mocking. </returns>
        public static RerunTriggerListResponse RerunTriggerListResponse(IList<RerunTriggerResource> value = default, string nextLink = default)
        {
            value ??= new List<RerunTriggerResource>();
            return new RerunTriggerListResponse(value, nextLink);
        }

        /// <summary> Initializes new instance of ExposureControlResponse class. </summary>
        /// <param name="featureName"> The feature name. </param>
        /// <param name="value"> The feature value. </param>
        /// <returns> A new <see cref="Models.ExposureControlResponse"/> instance for mocking. </returns>
        public static ExposureControlResponse ExposureControlResponse(string featureName = default, string value = default)
        {
            return new ExposureControlResponse(featureName, value);
        }

        /// <summary> Initializes new instance of ManagedIntegrationRuntime class. </summary>
        /// <param name="type"> Type of integration runtime. </param>
        /// <param name="description"> Integration runtime description. </param>
        /// <param name="additionalProperties"> . </param>
        /// <param name="state"> Integration runtime state, only valid for managed dedicated integration runtime. </param>
        /// <param name="managedVirtualNetwork"> Managed Virtual Network reference. </param>
        /// <param name="computeProperties"> The compute resource for managed integration runtime. </param>
        /// <param name="ssisProperties"> SSIS properties for managed integration runtime. </param>
        /// <returns> A new <see cref="Models.ManagedIntegrationRuntime"/> instance for mocking. </returns>
        public static ManagedIntegrationRuntime ManagedIntegrationRuntime(IntegrationRuntimeType type = default, string description = default, IDictionary<string, object> additionalProperties = default, IntegrationRuntimeState? state = default, ManagedVirtualNetworkReference managedVirtualNetwork = default, IntegrationRuntimeComputeProperties computeProperties = default, IntegrationRuntimeSsisProperties ssisProperties = default)
        {
            additionalProperties ??= new Dictionary<string, object>();
            return new ManagedIntegrationRuntime(type, description, additionalProperties, state, managedVirtualNetwork, computeProperties, ssisProperties);
        }
    }
}
