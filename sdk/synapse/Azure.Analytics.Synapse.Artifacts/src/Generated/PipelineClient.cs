// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Synapse.Artifacts
{
    /// <summary> The Pipeline service client. </summary>
    public partial class PipelineClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://dev.azuresynapse.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of PipelineClient for mocking. </summary>
        protected PipelineClient()
        {
        }

        /// <summary> Initializes a new instance of PipelineClient. </summary>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PipelineClient(Uri endpoint, TokenCredential credential, ArtifactsClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new ArtifactsClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Lists pipelines. </summary>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetPipelinesByWorkspaceAsync(RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetPipelinesByWorkspaceRequest(requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.GetPipelinesByWorkspace");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists pipelines. </summary>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetPipelinesByWorkspace(RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetPipelinesByWorkspaceRequest(requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.GetPipelinesByWorkspace");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetPipelinesByWorkspace"/> and <see cref="GetPipelinesByWorkspaceAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetPipelinesByWorkspaceRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pipelines", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Creates or updates a pipeline. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>etag</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Resource Etag. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the resource. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>activities</term>
        ///     <term>Activity[]</term>
        ///     <term></term>
        ///     <term> List of activities in pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, ParameterSpecification&gt;</term>
        ///     <term></term>
        ///     <term> List of parameters for pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>variables</term>
        ///     <term>Dictionary&lt;string, VariableSpecification&gt;</term>
        ///     <term></term>
        ///     <term> List of variables for pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>concurrency</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The max number of concurrent runs for the pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the Pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>runDimensions</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Dimensions emitted by Pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>folder</term>
        ///     <term>PipelineFolder</term>
        ///     <term></term>
        ///     <term> The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>PipelineFolder</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the folder that this Pipeline is in. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>Activity</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Activity name. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of activity. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Activity description. </term>
        ///   </item>
        ///   <item>
        ///     <term>dependsOn</term>
        ///     <term>ActivityDependency[]</term>
        ///     <term></term>
        ///     <term> Activity depends on condition. </term>
        ///   </item>
        ///   <item>
        ///     <term>userProperties</term>
        ///     <term>UserProperty[]</term>
        ///     <term></term>
        ///     <term> Activity user properties. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ParameterSpecification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;Object&quot; | &quot;String&quot; | &quot;Int&quot; | &quot;Float&quot; | &quot;Bool&quot; | &quot;Array&quot; | &quot;SecureString&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter type. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Default value of parameter. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>VariableSpecification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;String&quot; | &quot;Bool&quot; | &quot;Boolean&quot; | &quot;Array&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Variable type. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Default value of variable. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ActivityDependency</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>activity</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Activity name. </term>
        ///   </item>
        ///   <item>
        ///     <term>dependencyConditions</term>
        ///     <term>&quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Skipped&quot; | &quot;Completed&quot;[]</term>
        ///     <term>Yes</term>
        ///     <term> Match-Condition for the dependency. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>UserProperty</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> User property name. </term>
        ///   </item>
        ///   <item>
        ///     <term>value</term>
        ///     <term>AnyObject</term>
        ///     <term>Yes</term>
        ///     <term> User property value. Type: string (or Expression with resultType string). </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="ifMatch"> ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdatePipelineAsync(string pipelineName, RequestContent requestBody, string ifMatch = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateOrUpdatePipelineRequest(pipelineName, requestBody, ifMatch, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.CreateOrUpdatePipeline");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a pipeline. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>etag</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Resource Etag. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the resource. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>activities</term>
        ///     <term>Activity[]</term>
        ///     <term></term>
        ///     <term> List of activities in pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, ParameterSpecification&gt;</term>
        ///     <term></term>
        ///     <term> List of parameters for pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>variables</term>
        ///     <term>Dictionary&lt;string, VariableSpecification&gt;</term>
        ///     <term></term>
        ///     <term> List of variables for pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>concurrency</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> The max number of concurrent runs for the pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the Pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>runDimensions</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Dimensions emitted by Pipeline. </term>
        ///   </item>
        ///   <item>
        ///     <term>folder</term>
        ///     <term>PipelineFolder</term>
        ///     <term></term>
        ///     <term> The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>PipelineFolder</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the folder that this Pipeline is in. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>Activity</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Activity name. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of activity. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Activity description. </term>
        ///   </item>
        ///   <item>
        ///     <term>dependsOn</term>
        ///     <term>ActivityDependency[]</term>
        ///     <term></term>
        ///     <term> Activity depends on condition. </term>
        ///   </item>
        ///   <item>
        ///     <term>userProperties</term>
        ///     <term>UserProperty[]</term>
        ///     <term></term>
        ///     <term> Activity user properties. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ParameterSpecification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;Object&quot; | &quot;String&quot; | &quot;Int&quot; | &quot;Float&quot; | &quot;Bool&quot; | &quot;Array&quot; | &quot;SecureString&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter type. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Default value of parameter. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>VariableSpecification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;String&quot; | &quot;Bool&quot; | &quot;Boolean&quot; | &quot;Array&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Variable type. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Default value of variable. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ActivityDependency</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>activity</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Activity name. </term>
        ///   </item>
        ///   <item>
        ///     <term>dependencyConditions</term>
        ///     <term>&quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Skipped&quot; | &quot;Completed&quot;[]</term>
        ///     <term>Yes</term>
        ///     <term> Match-Condition for the dependency. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>UserProperty</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> User property name. </term>
        ///   </item>
        ///   <item>
        ///     <term>value</term>
        ///     <term>AnyObject</term>
        ///     <term>Yes</term>
        ///     <term> User property value. Type: string (or Expression with resultType string). </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="ifMatch"> ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdatePipeline(string pipelineName, RequestContent requestBody, string ifMatch = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateOrUpdatePipelineRequest(pipelineName, requestBody, ifMatch, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.CreateOrUpdatePipeline");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreateOrUpdatePipeline"/> and <see cref="CreateOrUpdatePipelineAsync"/> operations. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="ifMatch"> ETag of the pipeline entity.  Should only be specified for update, for which it should match existing entity or can be * for unconditional update. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCreateOrUpdatePipelineRequest(string pipelineName, RequestContent requestBody, string ifMatch = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pipelines/", false);
            uri.AppendPath(pipelineName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (ifMatch != null)
            {
                request.Headers.Add("If-Match", ifMatch);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Gets a pipeline. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="ifNoneMatch"> ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetPipelineAsync(string pipelineName, string ifNoneMatch = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetPipelineRequest(pipelineName, ifNoneMatch, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.GetPipeline");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 304:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a pipeline. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="ifNoneMatch"> ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response GetPipeline(string pipelineName, string ifNoneMatch = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateGetPipelineRequest(pipelineName, ifNoneMatch, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.GetPipeline");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 304:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="GetPipeline"/> and <see cref="GetPipelineAsync"/> operations. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="ifNoneMatch"> ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateGetPipelineRequest(string pipelineName, string ifNoneMatch = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pipelines/", false);
            uri.AppendPath(pipelineName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (ifNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", ifNoneMatch);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a pipeline. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeletePipelineAsync(string pipelineName, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeletePipelineRequest(pipelineName, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.DeletePipeline");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                        case 204:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a pipeline. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeletePipeline(string pipelineName, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeletePipelineRequest(pipelineName, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.DeletePipeline");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                        case 204:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="DeletePipeline"/> and <see cref="DeletePipelineAsync"/> operations. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateDeletePipelineRequest(string pipelineName, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pipelines/", false);
            uri.AppendPath(pipelineName, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Renames a pipeline. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>newName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> New name of the artifact. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RenamePipelineAsync(string pipelineName, RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateRenamePipelineRequest(pipelineName, requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.RenamePipeline");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Renames a pipeline. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>newName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> New name of the artifact. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RenamePipeline(string pipelineName, RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateRenamePipelineRequest(pipelineName, requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.RenamePipeline");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="RenamePipeline"/> and <see cref="RenamePipelineAsync"/> operations. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateRenamePipelineRequest(string pipelineName, RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pipelines/", false);
            uri.AppendPath(pipelineName, true);
            uri.AppendPath("/rename", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Creates a run of a pipeline. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="referencePipelineRunId"> The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run. </param>
        /// <param name="isRecovery"> Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId. </param>
        /// <param name="startActivityName"> In recovery mode, the rerun will start from this activity. If not specified, all activities will run. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreatePipelineRunAsync(string pipelineName, RequestContent requestBody, string referencePipelineRunId = null, bool? isRecovery = null, string startActivityName = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreatePipelineRunRequest(pipelineName, requestBody, referencePipelineRunId, isRecovery, startActivityName, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.CreatePipelineRun");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 202:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a run of a pipeline. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="referencePipelineRunId"> The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run. </param>
        /// <param name="isRecovery"> Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId. </param>
        /// <param name="startActivityName"> In recovery mode, the rerun will start from this activity. If not specified, all activities will run. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreatePipelineRun(string pipelineName, RequestContent requestBody, string referencePipelineRunId = null, bool? isRecovery = null, string startActivityName = null, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreatePipelineRunRequest(pipelineName, requestBody, referencePipelineRunId, isRecovery, startActivityName, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("PipelineClient.CreatePipelineRun");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 202:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreatePipelineRun"/> and <see cref="CreatePipelineRunAsync"/> operations. </summary>
        /// <param name="pipelineName"> The pipeline name. </param>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="referencePipelineRunId"> The pipeline run identifier. If run ID is specified the parameters of the specified run will be used to create a new run. </param>
        /// <param name="isRecovery"> Recovery mode flag. If recovery mode is set to true, the specified referenced pipeline run and the new run will be grouped under the same groupId. </param>
        /// <param name="startActivityName"> In recovery mode, the rerun will start from this activity. If not specified, all activities will run. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCreatePipelineRunRequest(string pipelineName, RequestContent requestBody, string referencePipelineRunId = null, bool? isRecovery = null, string startActivityName = null, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/pipelines/", false);
            uri.AppendPath(pipelineName, true);
            uri.AppendPath("/createRun", false);
            uri.AppendQuery("api-version", apiVersion, true);
            if (referencePipelineRunId != null)
            {
                uri.AppendQuery("referencePipelineRunId", referencePipelineRunId, true);
            }
            if (isRecovery != null)
            {
                uri.AppendQuery("isRecovery", isRecovery.Value, true);
            }
            if (startActivityName != null)
            {
                uri.AppendQuery("startActivityName", startActivityName, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }
    }
}
