// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(FormatInfoConverter))]
    public partial class FormatInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("inputFormat"u8);
            writer.WriteStringValue(InputFormat);
            writer.WritePropertyName("outputFormat"u8);
            writer.WriteStringValue(OutputFormat);
            writer.WritePropertyName("formatType"u8);
            writer.WriteStringValue(FormatType);
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(SerDeName))
            {
                writer.WritePropertyName("serDeName"u8);
                writer.WriteStringValue(SerDeName);
            }
            writer.WritePropertyName("serializeLib"u8);
            writer.WriteStringValue(SerializeLib);
            writer.WriteEndObject();
        }

        internal static FormatInfo DeserializeFormatInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string inputFormat = default;
            string outputFormat = default;
            string formatType = default;
            Optional<IDictionary<string, object>> properties = default;
            Optional<string> serDeName = default;
            string serializeLib = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("inputFormat"u8))
                {
                    inputFormat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("outputFormat"u8))
                {
                    outputFormat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("formatType"u8))
                {
                    formatType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, property0.Value.GetObject());
                        }
                    }
                    properties = dictionary;
                    continue;
                }
                if (property.NameEquals("serDeName"u8))
                {
                    serDeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serializeLib"u8))
                {
                    serializeLib = property.Value.GetString();
                    continue;
                }
            }
            return new FormatInfo(inputFormat, outputFormat, formatType, Optional.ToDictionary(properties), serDeName.Value, serializeLib);
        }

        internal partial class FormatInfoConverter : JsonConverter<FormatInfo>
        {
            public override void Write(Utf8JsonWriter writer, FormatInfo model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override FormatInfo Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeFormatInfo(document.RootElement);
            }
        }
    }
}
