// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(TypeInfoConverter))]
    public partial class TypeInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TypeFamily))
            {
                writer.WritePropertyName("typeFamily"u8);
                writer.WriteStringValue(TypeFamily);
            }
            writer.WritePropertyName("typeName"u8);
            writer.WriteStringValue(TypeName);
            if (Optional.IsDefined(IsTableType))
            {
                writer.WritePropertyName("isTableType"u8);
                writer.WriteBooleanValue(IsTableType.Value);
            }
            if (Optional.IsDefined(IsComplexType))
            {
                writer.WritePropertyName("isComplexType"u8);
                writer.WriteBooleanValue(IsComplexType.Value);
            }
            if (Optional.IsDefined(IsNullable))
            {
                writer.WritePropertyName("isNullable"u8);
                writer.WriteBooleanValue(IsNullable.Value);
            }
            if (Optional.IsDefined(Length))
            {
                writer.WritePropertyName("length"u8);
                writer.WriteNumberValue(Length.Value);
            }
            if (Optional.IsDefined(Precision))
            {
                writer.WritePropertyName("precision"u8);
                writer.WriteNumberValue(Precision.Value);
            }
            if (Optional.IsDefined(Scale))
            {
                writer.WritePropertyName("scale"u8);
                writer.WriteNumberValue(Scale.Value);
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static TypeInfo DeserializeTypeInfo(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> typeFamily = default;
            string typeName = default;
            Optional<bool> isTableType = default;
            Optional<bool> isComplexType = default;
            Optional<bool> isNullable = default;
            Optional<int> length = default;
            Optional<int> precision = default;
            Optional<int> scale = default;
            Optional<IDictionary<string, object>> properties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("typeFamily"u8))
                {
                    typeFamily = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("typeName"u8))
                {
                    typeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isTableType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isTableType = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isComplexType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isComplexType = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isNullable"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isNullable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("length"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    length = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("precision"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    precision = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("scale"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scale = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, property0.Value.GetObject());
                        }
                    }
                    properties = dictionary;
                    continue;
                }
            }
            return new TypeInfo(typeFamily.Value, typeName, Optional.ToNullable(isTableType), Optional.ToNullable(isComplexType), Optional.ToNullable(isNullable), Optional.ToNullable(length), Optional.ToNullable(precision), Optional.ToNullable(scale), Optional.ToDictionary(properties));
        }

        internal partial class TypeInfoConverter : JsonConverter<TypeInfo>
        {
            public override void Write(Utf8JsonWriter writer, TypeInfo model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeInfo Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeInfo(document.RootElement);
            }
        }
    }
}
