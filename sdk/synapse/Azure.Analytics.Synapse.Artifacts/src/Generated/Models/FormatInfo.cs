// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> Format information. </summary>
    public partial class FormatInfo
    {
        /// <summary> Initializes a new instance of FormatInfo. </summary>
        /// <param name="inputFormat"> Input Format to be used. </param>
        /// <param name="outputFormat"> Output Format to be used. </param>
        /// <param name="formatType"> Format Type to be used to be used (csv, parquet, etc.). </param>
        /// <param name="serializeLib"> Serialization Library to be used by Spark (org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="inputFormat"/>, <paramref name="outputFormat"/>, <paramref name="formatType"/> or <paramref name="serializeLib"/> is null. </exception>
        public FormatInfo(string inputFormat, string outputFormat, string formatType, string serializeLib)
        {
            Argument.AssertNotNull(inputFormat, nameof(inputFormat));
            Argument.AssertNotNull(outputFormat, nameof(outputFormat));
            Argument.AssertNotNull(formatType, nameof(formatType));
            Argument.AssertNotNull(serializeLib, nameof(serializeLib));

            InputFormat = inputFormat;
            OutputFormat = outputFormat;
            FormatType = formatType;
            Properties = new ChangeTrackingDictionary<string, object>();
            SerializeLib = serializeLib;
        }

        /// <summary> Initializes a new instance of FormatInfo. </summary>
        /// <param name="inputFormat"> Input Format to be used. </param>
        /// <param name="outputFormat"> Output Format to be used. </param>
        /// <param name="formatType"> Format Type to be used to be used (csv, parquet, etc.). </param>
        /// <param name="properties"> Property bag. </param>
        /// <param name="serDeName"> SerDe name. </param>
        /// <param name="serializeLib"> Serialization Library to be used by Spark (org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe). </param>
        internal FormatInfo(string inputFormat, string outputFormat, string formatType, IDictionary<string, object> properties, string serDeName, string serializeLib)
        {
            InputFormat = inputFormat;
            OutputFormat = outputFormat;
            FormatType = formatType;
            Properties = properties;
            SerDeName = serDeName;
            SerializeLib = serializeLib;
        }

        /// <summary> Input Format to be used. </summary>
        public string InputFormat { get; set; }
        /// <summary> Output Format to be used. </summary>
        public string OutputFormat { get; set; }
        /// <summary> Format Type to be used to be used (csv, parquet, etc.). </summary>
        public string FormatType { get; set; }
        /// <summary> Property bag. </summary>
        public IDictionary<string, object> Properties { get; }
        /// <summary> SerDe name. </summary>
        public string SerDeName { get; set; }
        /// <summary> Serialization Library to be used by Spark (org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe). </summary>
        public string SerializeLib { get; set; }
    }
}
