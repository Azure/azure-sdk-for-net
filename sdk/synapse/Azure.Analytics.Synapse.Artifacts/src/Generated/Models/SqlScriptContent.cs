// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> The content of the SQL script. </summary>
    public partial class SqlScriptContent : IDictionary<string, object>
    {
        /// <summary> Initializes a new instance of SqlScriptContent. </summary>
        /// <param name="query"> SQL query to execute. </param>
        /// <param name="currentConnection"> The connection used to execute the SQL script. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> or <paramref name="currentConnection"/> is null. </exception>
        public SqlScriptContent(string query, SqlConnection currentConnection)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }
            if (currentConnection == null)
            {
                throw new ArgumentNullException(nameof(currentConnection));
            }

            Query = query;
            CurrentConnection = currentConnection;
            AdditionalProperties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of SqlScriptContent. </summary>
        /// <param name="query"> SQL query to execute. </param>
        /// <param name="currentConnection"> The connection used to execute the SQL script. </param>
        /// <param name="metadata"> The metadata of the SQL script. </param>
        /// <param name="additionalProperties"> . </param>
        internal SqlScriptContent(string query, SqlConnection currentConnection, SqlScriptMetadata metadata, IDictionary<string, object> additionalProperties)
        {
            Query = query;
            CurrentConnection = currentConnection;
            Metadata = metadata;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> SQL query to execute. </summary>
        public string Query { get; set; }
        /// <summary> The connection used to execute the SQL script. </summary>
        public SqlConnection CurrentConnection { get; set; }
        /// <summary> The metadata of the SQL script. </summary>
        public SqlScriptMetadata Metadata { get; set; }
        internal IDictionary<string, object> AdditionalProperties { get; }
        /// <inheritdoc />
        public IEnumerator<KeyValuePair<string, object>> GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        public bool TryGetValue(string key, out object value) => AdditionalProperties.TryGetValue(key, out value);
        /// <inheritdoc />
        public bool ContainsKey(string key) => AdditionalProperties.ContainsKey(key);
        /// <inheritdoc />
        public ICollection<string> Keys => AdditionalProperties.Keys;
        /// <inheritdoc />
        public ICollection<object> Values => AdditionalProperties.Values;
        /// <inheritdoc cref="ICollection{T}.Count"/>
        int ICollection<KeyValuePair<string, object>>.Count => AdditionalProperties.Count;
        /// <inheritdoc />
        public void Add(string key, object value) => AdditionalProperties.Add(key, value);
        /// <inheritdoc />
        public bool Remove(string key) => AdditionalProperties.Remove(key);
        /// <inheritdoc cref="ICollection{T}.IsReadOnly"/>
        bool ICollection<KeyValuePair<string, object>>.IsReadOnly => AdditionalProperties.IsReadOnly;
        /// <inheritdoc cref="ICollection{T}.Add"/>
        void ICollection<KeyValuePair<string, object>>.Add(KeyValuePair<string, object> value) => AdditionalProperties.Add(value);
        /// <inheritdoc cref="ICollection{T}.Remove"/>
        bool ICollection<KeyValuePair<string, object>>.Remove(KeyValuePair<string, object> value) => AdditionalProperties.Remove(value);
        /// <inheritdoc cref="ICollection{T}.Contains"/>
        bool ICollection<KeyValuePair<string, object>>.Contains(KeyValuePair<string, object> value) => AdditionalProperties.Contains(value);
        /// <inheritdoc cref="ICollection{T}.CopyTo"/>
        void ICollection<KeyValuePair<string, object>>.CopyTo(KeyValuePair<string, object>[] destination, int offset) => AdditionalProperties.CopyTo(destination, offset);
        /// <inheritdoc cref="ICollection{T}.Clear"/>
        void ICollection<KeyValuePair<string, object>>.Clear() => AdditionalProperties.Clear();
        /// <inheritdoc />
        public object this[string key]
        {
            get => AdditionalProperties[key];
            set => AdditionalProperties[key] = value;
        }
    }
}
