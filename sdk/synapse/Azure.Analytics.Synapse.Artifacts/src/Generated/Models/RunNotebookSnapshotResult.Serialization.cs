// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(RunNotebookSnapshotResultConverter))]
    public partial class RunNotebookSnapshotResult : IUtf8JsonSerializable, IModelJsonSerializable<RunNotebookSnapshotResult>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<RunNotebookSnapshotResult>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<RunNotebookSnapshotResult>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<RunNotebookSnapshotResult>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("snapshot"u8);
            if (Snapshot is null)
            {
                writer.WriteNullValue();
            }
            else
            {
                ((IModelJsonSerializable<RunNotebookSnapshot>)Snapshot).Serialize(writer, options);
            }
            if (Optional.IsDefined(Error))
            {
                writer.WritePropertyName("error"u8);
                if (Error is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<RunNotebookError>)Error).Serialize(writer, options);
                }
            }
            writer.WritePropertyName("runId"u8);
            writer.WriteStringValue(RunId);
            writer.WritePropertyName("runStatus"u8);
            writer.WriteStringValue(RunStatus);
            if (Optional.IsDefined(LastCheckedOn))
            {
                writer.WritePropertyName("lastCheckedOn"u8);
                writer.WriteStringValue(LastCheckedOn);
            }
            if (Optional.IsDefined(SessionId))
            {
                writer.WritePropertyName("sessionId"u8);
                writer.WriteNumberValue(SessionId.Value);
            }
            if (Optional.IsDefined(SparkPool))
            {
                writer.WritePropertyName("sparkPool"u8);
                writer.WriteStringValue(SparkPool);
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static RunNotebookSnapshotResult DeserializeRunNotebookSnapshotResult(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            RunNotebookSnapshot snapshot = default;
            Optional<RunNotebookError> error = default;
            string runId = default;
            string runStatus = default;
            Optional<string> lastCheckedOn = default;
            Optional<long> sessionId = default;
            Optional<string> sparkPool = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("snapshot"u8))
                {
                    snapshot = RunNotebookSnapshot.DeserializeRunNotebookSnapshot(property.Value);
                    continue;
                }
                if (property.NameEquals("error"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = RunNotebookError.DeserializeRunNotebookError(property.Value);
                    continue;
                }
                if (property.NameEquals("runId"u8))
                {
                    runId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runStatus"u8))
                {
                    runStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastCheckedOn"u8))
                {
                    lastCheckedOn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sessionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sessionId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("sparkPool"u8))
                {
                    sparkPool = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new RunNotebookSnapshotResult(snapshot, error.Value, runId, runStatus, lastCheckedOn.Value, Optional.ToNullable(sessionId), sparkPool.Value, serializedAdditionalRawData);
        }

        RunNotebookSnapshotResult IModelJsonSerializable<RunNotebookSnapshotResult>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<RunNotebookSnapshotResult>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeRunNotebookSnapshotResult(doc.RootElement, options);
        }

        BinaryData IModelSerializable<RunNotebookSnapshotResult>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<RunNotebookSnapshotResult>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        RunNotebookSnapshotResult IModelSerializable<RunNotebookSnapshotResult>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<RunNotebookSnapshotResult>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeRunNotebookSnapshotResult(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="RunNotebookSnapshotResult"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="RunNotebookSnapshotResult"/> to convert. </param>
        public static implicit operator RequestContent(RunNotebookSnapshotResult model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="RunNotebookSnapshotResult"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator RunNotebookSnapshotResult(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeRunNotebookSnapshotResult(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }

        internal partial class RunNotebookSnapshotResultConverter : JsonConverter<RunNotebookSnapshotResult>
        {
            public override void Write(Utf8JsonWriter writer, RunNotebookSnapshotResult model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override RunNotebookSnapshotResult Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeRunNotebookSnapshotResult(document.RootElement);
            }
        }
    }
}
