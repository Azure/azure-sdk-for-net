// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> Database properties. </summary>
    public partial class TableProperties : MDEntityProperties
    {
        /// <summary> Initializes a new instance of TableProperties. </summary>
        /// <param name="namespace"> Table namespace. </param>
        /// <param name="tableType"> Entity type. </param>
        /// <param name="storageDescriptor"> Storage descriptor. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="namespace"/> or <paramref name="storageDescriptor"/> is null. </exception>
        public TableProperties(TableNamespace @namespace, TableType tableType, StorageDescriptor storageDescriptor)
        {
            Argument.AssertNotNull(@namespace, nameof(@namespace));
            Argument.AssertNotNull(storageDescriptor, nameof(storageDescriptor));

            Namespace = @namespace;
            TableType = tableType;
            StorageDescriptor = storageDescriptor;
        }

        /// <summary> Initializes a new instance of TableProperties. </summary>
        /// <param name="originObjectId"> Entity object id maintained by the caller. </param>
        /// <param name="objectId"> Entity object id maintained by SyMS. </param>
        /// <param name="objectVersion"> Entity object version maintained by SyMS. </param>
        /// <param name="publishStatus"> Publish status. </param>
        /// <param name="properties"> Property bag. </param>
        /// <param name="namespace"> Table namespace. </param>
        /// <param name="partitioning"> Table partitioning information. </param>
        /// <param name="tableType"> Entity type. </param>
        /// <param name="storageDescriptor"> Storage descriptor. </param>
        /// <param name="temporary"> Temporary. </param>
        /// <param name="isRewriteEnabled"> Is rewrite enabled. </param>
        internal TableProperties(string originObjectId, string objectId, long? objectVersion, PublishStatus? publishStatus, IDictionary<string, object> properties, TableNamespace @namespace, TablePartitioning partitioning, TableType tableType, StorageDescriptor storageDescriptor, bool? temporary, bool? isRewriteEnabled) : base(originObjectId, objectId, objectVersion, publishStatus, properties)
        {
            Namespace = @namespace;
            Partitioning = partitioning;
            TableType = tableType;
            StorageDescriptor = storageDescriptor;
            Temporary = temporary;
            IsRewriteEnabled = isRewriteEnabled;
        }

        /// <summary> Table namespace. </summary>
        public TableNamespace Namespace { get; set; }
        /// <summary> Table partitioning information. </summary>
        public TablePartitioning Partitioning { get; set; }
        /// <summary> Entity type. </summary>
        public TableType TableType { get; set; }
        /// <summary> Storage descriptor. </summary>
        public StorageDescriptor StorageDescriptor { get; set; }
        /// <summary> Temporary. </summary>
        public bool? Temporary { get; set; }
        /// <summary> Is rewrite enabled. </summary>
        public bool? IsRewriteEnabled { get; set; }
    }
}
