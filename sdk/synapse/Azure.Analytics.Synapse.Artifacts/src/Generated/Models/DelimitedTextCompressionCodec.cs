// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> The DelimitedTextCompressionCodec. </summary>
    public readonly partial struct DelimitedTextCompressionCodec : IEquatable<DelimitedTextCompressionCodec>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="DelimitedTextCompressionCodec"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DelimitedTextCompressionCodec(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Bzip2Value = "bzip2";
        private const string GzipValue = "gzip";
        private const string DeflateValue = "deflate";
        private const string ZipDeflateValue = "zipDeflate";
        private const string SnappyValue = "snappy";
        private const string Lz4Value = "lz4";

        /// <summary> bzip2. </summary>
        public static DelimitedTextCompressionCodec Bzip2 { get; } = new DelimitedTextCompressionCodec(Bzip2Value);
        /// <summary> gzip. </summary>
        public static DelimitedTextCompressionCodec Gzip { get; } = new DelimitedTextCompressionCodec(GzipValue);
        /// <summary> deflate. </summary>
        public static DelimitedTextCompressionCodec Deflate { get; } = new DelimitedTextCompressionCodec(DeflateValue);
        /// <summary> zipDeflate. </summary>
        public static DelimitedTextCompressionCodec ZipDeflate { get; } = new DelimitedTextCompressionCodec(ZipDeflateValue);
        /// <summary> snappy. </summary>
        public static DelimitedTextCompressionCodec Snappy { get; } = new DelimitedTextCompressionCodec(SnappyValue);
        /// <summary> lz4. </summary>
        public static DelimitedTextCompressionCodec Lz4 { get; } = new DelimitedTextCompressionCodec(Lz4Value);
        /// <summary> Determines if two <see cref="DelimitedTextCompressionCodec"/> values are the same. </summary>
        public static bool operator ==(DelimitedTextCompressionCodec left, DelimitedTextCompressionCodec right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DelimitedTextCompressionCodec"/> values are not the same. </summary>
        public static bool operator !=(DelimitedTextCompressionCodec left, DelimitedTextCompressionCodec right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DelimitedTextCompressionCodec"/>. </summary>
        public static implicit operator DelimitedTextCompressionCodec(string value) => new DelimitedTextCompressionCodec(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DelimitedTextCompressionCodec other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DelimitedTextCompressionCodec other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
