// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression. </summary>
    public partial class IfConditionActivity : ControlActivity
    {
        /// <summary> Initializes a new instance of IfConditionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="expression"> An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/> or <paramref name="expression"/> is null. </exception>
        public IfConditionActivity(string name, Expression expression) : base(name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (expression == null)
            {
                throw new ArgumentNullException(nameof(expression));
            }

            Expression = expression;
            IfTrueActivities = new ChangeTrackingList<Activity>();
            IfFalseActivities = new ChangeTrackingList<Activity>();
            Type = "IfCondition";
        }

        /// <summary> Initializes a new instance of IfConditionActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="type"> Type of activity. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> . </param>
        /// <param name="expression"> An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed. </param>
        /// <param name="ifTrueActivities"> List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action. </param>
        /// <param name="ifFalseActivities"> List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action. </param>
        internal IfConditionActivity(string name, string type, string description, IList<ActivityDependency> dependsOn, IList<UserProperty> userProperties, IDictionary<string, object> additionalProperties, Expression expression, IList<Activity> ifTrueActivities, IList<Activity> ifFalseActivities) : base(name, type, description, dependsOn, userProperties, additionalProperties)
        {
            Expression = expression;
            IfTrueActivities = ifTrueActivities;
            IfFalseActivities = ifFalseActivities;
            Type = type ?? "IfCondition";
        }

        /// <summary> An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed. </summary>
        public Expression Expression { get; set; }
        /// <summary> List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action. </summary>
        public IList<Activity> IfTrueActivities { get; }
        /// <summary> List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action. </summary>
        public IList<Activity> IfFalseActivities { get; }
    }
}
