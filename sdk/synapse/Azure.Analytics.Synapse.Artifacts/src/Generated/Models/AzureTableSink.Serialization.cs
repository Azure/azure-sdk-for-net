// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(AzureTableSinkConverter))]
    public partial class AzureTableSink : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(AzureTableDefaultPartitionKeyValue))
            {
                writer.WritePropertyName("azureTableDefaultPartitionKeyValue"u8);
                writer.WriteObjectValue(AzureTableDefaultPartitionKeyValue);
            }
            if (Core.Optional.IsDefined(AzureTablePartitionKeyName))
            {
                writer.WritePropertyName("azureTablePartitionKeyName"u8);
                writer.WriteObjectValue(AzureTablePartitionKeyName);
            }
            if (Core.Optional.IsDefined(AzureTableRowKeyName))
            {
                writer.WritePropertyName("azureTableRowKeyName"u8);
                writer.WriteObjectValue(AzureTableRowKeyName);
            }
            if (Core.Optional.IsDefined(AzureTableInsertType))
            {
                writer.WritePropertyName("azureTableInsertType"u8);
                writer.WriteObjectValue(AzureTableInsertType);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Core.Optional.IsDefined(WriteBatchSize))
            {
                writer.WritePropertyName("writeBatchSize"u8);
                writer.WriteObjectValue(WriteBatchSize);
            }
            if (Core.Optional.IsDefined(WriteBatchTimeout))
            {
                writer.WritePropertyName("writeBatchTimeout"u8);
                writer.WriteObjectValue(WriteBatchTimeout);
            }
            if (Core.Optional.IsDefined(SinkRetryCount))
            {
                writer.WritePropertyName("sinkRetryCount"u8);
                writer.WriteObjectValue(SinkRetryCount);
            }
            if (Core.Optional.IsDefined(SinkRetryWait))
            {
                writer.WritePropertyName("sinkRetryWait"u8);
                writer.WriteObjectValue(SinkRetryWait);
            }
            if (Core.Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections"u8);
                writer.WriteObjectValue(MaxConcurrentConnections);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static AzureTableSink DeserializeAzureTableSink(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<object> azureTableDefaultPartitionKeyValue = default;
            Core.Optional<object> azureTablePartitionKeyName = default;
            Core.Optional<object> azureTableRowKeyName = default;
            Core.Optional<object> azureTableInsertType = default;
            string type = default;
            Core.Optional<object> writeBatchSize = default;
            Core.Optional<object> writeBatchTimeout = default;
            Core.Optional<object> sinkRetryCount = default;
            Core.Optional<object> sinkRetryWait = default;
            Core.Optional<object> maxConcurrentConnections = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("azureTableDefaultPartitionKeyValue"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureTableDefaultPartitionKeyValue = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("azureTablePartitionKeyName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureTablePartitionKeyName = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("azureTableRowKeyName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureTableRowKeyName = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("azureTableInsertType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureTableInsertType = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("writeBatchSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    writeBatchSize = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("writeBatchTimeout"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    writeBatchTimeout = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("sinkRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sinkRetryCount = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("sinkRetryWait"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sinkRetryWait = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxConcurrentConnections = property.Value.GetObject();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new AzureTableSink(type, writeBatchSize.Value, writeBatchTimeout.Value, sinkRetryCount.Value, sinkRetryWait.Value, maxConcurrentConnections.Value, additionalProperties, azureTableDefaultPartitionKeyValue.Value, azureTablePartitionKeyName.Value, azureTableRowKeyName.Value, azureTableInsertType.Value);
        }

        internal partial class AzureTableSinkConverter : JsonConverter<AzureTableSink>
        {
            public override void Write(Utf8JsonWriter writer, AzureTableSink model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override AzureTableSink Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeAzureTableSink(document.RootElement);
            }
        }
    }
}
