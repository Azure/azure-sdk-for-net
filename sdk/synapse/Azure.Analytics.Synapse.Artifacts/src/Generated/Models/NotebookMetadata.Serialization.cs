// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(NotebookMetadataConverter))]
    public partial class NotebookMetadata : IUtf8JsonSerializable, IModelJsonSerializable<NotebookMetadata>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<NotebookMetadata>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<NotebookMetadata>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(Kernelspec))
            {
                writer.WritePropertyName("kernelspec"u8);
                if (Kernelspec is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<NotebookKernelSpec>)Kernelspec).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(LanguageInfo))
            {
                if (LanguageInfo != null)
                {
                    writer.WritePropertyName("language_info"u8);
                    if (LanguageInfo is null)
                    {
                        writer.WriteNullValue();
                    }
                    else
                    {
                        ((IModelJsonSerializable<NotebookLanguageInfo>)LanguageInfo).Serialize(writer, options);
                    }
                }
                else
                {
                    writer.WriteNull("language_info");
                }
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static NotebookMetadata DeserializeNotebookMetadata(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<NotebookKernelSpec> kernelspec = default;
            Optional<NotebookLanguageInfo> languageInfo = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("kernelspec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kernelspec = NotebookKernelSpec.DeserializeNotebookKernelSpec(property.Value);
                    continue;
                }
                if (property.NameEquals("language_info"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        languageInfo = null;
                        continue;
                    }
                    languageInfo = NotebookLanguageInfo.DeserializeNotebookLanguageInfo(property.Value);
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new NotebookMetadata(kernelspec.Value, languageInfo.Value, additionalProperties);
        }

        NotebookMetadata IModelJsonSerializable<NotebookMetadata>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeNotebookMetadata(doc.RootElement, options);
        }

        BinaryData IModelSerializable<NotebookMetadata>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        NotebookMetadata IModelSerializable<NotebookMetadata>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeNotebookMetadata(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="NotebookMetadata"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="NotebookMetadata"/> to convert. </param>
        public static implicit operator RequestContent(NotebookMetadata model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="NotebookMetadata"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator NotebookMetadata(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeNotebookMetadata(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }

        internal partial class NotebookMetadataConverter : JsonConverter<NotebookMetadata>
        {
            public override void Write(Utf8JsonWriter writer, NotebookMetadata model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override NotebookMetadata Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeNotebookMetadata(document.RootElement);
            }
        }
    }
}
