// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> Type information. </summary>
    public partial class TypeInfo
    {
        /// <summary> Initializes a new instance of TypeInfo. </summary>
        /// <param name="typeName"> Type name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="typeName"/> is null. </exception>
        public TypeInfo(string typeName)
        {
            Argument.AssertNotNull(typeName, nameof(typeName));

            TypeName = typeName;
            Properties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of TypeInfo. </summary>
        /// <param name="typeFamily"> Type family. </param>
        /// <param name="typeName"> Type name. </param>
        /// <param name="isTableType"> Is Table type. </param>
        /// <param name="isComplexType"> Is Complex type. </param>
        /// <param name="isNullable"> Is Nullable. </param>
        /// <param name="length"> Length. </param>
        /// <param name="precision"> Precision. </param>
        /// <param name="scale"> Scale. </param>
        /// <param name="properties"> Property bag. </param>
        internal TypeInfo(string typeFamily, string typeName, bool? isTableType, bool? isComplexType, bool? isNullable, int? length, int? precision, int? scale, IDictionary<string, object> properties)
        {
            TypeFamily = typeFamily;
            TypeName = typeName;
            IsTableType = isTableType;
            IsComplexType = isComplexType;
            IsNullable = isNullable;
            Length = length;
            Precision = precision;
            Scale = scale;
            Properties = properties;
        }

        /// <summary> Type family. </summary>
        public string TypeFamily { get; set; }
        /// <summary> Type name. </summary>
        public string TypeName { get; set; }
        /// <summary> Is Table type. </summary>
        public bool? IsTableType { get; set; }
        /// <summary> Is Complex type. </summary>
        public bool? IsComplexType { get; set; }
        /// <summary> Is Nullable. </summary>
        public bool? IsNullable { get; set; }
        /// <summary> Length. </summary>
        public int? Length { get; set; }
        /// <summary> Precision. </summary>
        public int? Precision { get; set; }
        /// <summary> Scale. </summary>
        public int? Scale { get; set; }
        /// <summary> Property bag. </summary>
        public IDictionary<string, object> Properties { get; }
    }
}
