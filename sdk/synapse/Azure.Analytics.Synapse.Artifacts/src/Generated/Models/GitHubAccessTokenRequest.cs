// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> The GitHubAccessTokenRequest. </summary>
    public partial class GitHubAccessTokenRequest
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GitHubAccessTokenRequest"/>. </summary>
        /// <param name="gitHubClientId"> The GitHub Client Id. </param>
        /// <param name="gitHubAccessCode"> The GitHub Access code. </param>
        /// <param name="gitHubAccessTokenBaseUrl"> The GitHub access token base URL. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="gitHubClientId"/>, <paramref name="gitHubAccessCode"/> or <paramref name="gitHubAccessTokenBaseUrl"/> is null. </exception>
        public GitHubAccessTokenRequest(string gitHubClientId, string gitHubAccessCode, string gitHubAccessTokenBaseUrl)
        {
            Argument.AssertNotNull(gitHubClientId, nameof(gitHubClientId));
            Argument.AssertNotNull(gitHubAccessCode, nameof(gitHubAccessCode));
            Argument.AssertNotNull(gitHubAccessTokenBaseUrl, nameof(gitHubAccessTokenBaseUrl));

            GitHubClientId = gitHubClientId;
            GitHubAccessCode = gitHubAccessCode;
            GitHubAccessTokenBaseUrl = gitHubAccessTokenBaseUrl;
        }

        /// <summary> Initializes a new instance of <see cref="GitHubAccessTokenRequest"/>. </summary>
        /// <param name="gitHubClientId"> The GitHub Client Id. </param>
        /// <param name="gitHubAccessCode"> The GitHub Access code. </param>
        /// <param name="gitHubAccessTokenBaseUrl"> The GitHub access token base URL. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GitHubAccessTokenRequest(string gitHubClientId, string gitHubAccessCode, string gitHubAccessTokenBaseUrl, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            GitHubClientId = gitHubClientId;
            GitHubAccessCode = gitHubAccessCode;
            GitHubAccessTokenBaseUrl = gitHubAccessTokenBaseUrl;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="GitHubAccessTokenRequest"/> for deserialization. </summary>
        internal GitHubAccessTokenRequest()
        {
        }

        /// <summary> The GitHub Client Id. </summary>
        public string GitHubClientId { get; }
        /// <summary> The GitHub Access code. </summary>
        public string GitHubAccessCode { get; }
        /// <summary> The GitHub access token base URL. </summary>
        public string GitHubAccessTokenBaseUrl { get; }
    }
}
