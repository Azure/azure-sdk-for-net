// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(CopyTranslatorConverter))]
    public partial class CopyTranslator : IUtf8JsonSerializable, IJsonModel<CopyTranslator>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CopyTranslator>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<CopyTranslator>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<CopyTranslator>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<CopyTranslator>)} interface");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        CopyTranslator IJsonModel<CopyTranslator>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(CopyTranslator)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCopyTranslator(document.RootElement, options);
        }

        internal static CopyTranslator DeserializeCopyTranslator(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "TabularTranslator": return TabularTranslator.DeserializeTabularTranslator(element);
                }
            }
            return UnknownCopyTranslator.DeserializeUnknownCopyTranslator(element);
        }

        BinaryData IPersistableModel<CopyTranslator>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(CopyTranslator)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        CopyTranslator IPersistableModel<CopyTranslator>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(CopyTranslator)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeCopyTranslator(document.RootElement, options);
        }

        string IPersistableModel<CopyTranslator>.GetWireFormat(ModelReaderWriterOptions options) => "J";

        internal partial class CopyTranslatorConverter : JsonConverter<CopyTranslator>
        {
            public override void Write(Utf8JsonWriter writer, CopyTranslator model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override CopyTranslator Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeCopyTranslator(document.RootElement);
            }
        }
    }
}
