// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    public partial class ActivityPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Timeout != null)
            {
                writer.WritePropertyName("timeout");
                writer.WriteObjectValue(Timeout);
            }
            if (Retry != null)
            {
                writer.WritePropertyName("retry");
                writer.WriteObjectValue(Retry);
            }
            if (RetryIntervalInSeconds != null)
            {
                writer.WritePropertyName("retryIntervalInSeconds");
                writer.WriteNumberValue(RetryIntervalInSeconds.Value);
            }
            if (SecureInput != null)
            {
                writer.WritePropertyName("secureInput");
                writer.WriteBooleanValue(SecureInput.Value);
            }
            if (SecureOutput != null)
            {
                writer.WritePropertyName("secureOutput");
                writer.WriteBooleanValue(SecureOutput.Value);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static ActivityPolicy DeserializeActivityPolicy(JsonElement element)
        {
            object timeout = default;
            object retry = default;
            int? retryIntervalInSeconds = default;
            bool? secureInput = default;
            bool? secureOutput = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timeout"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeout = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("retry"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retry = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("retryIntervalInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    retryIntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("secureInput"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    secureInput = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("secureOutput"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    secureOutput = property.Value.GetBoolean();
                    continue;
                }
                additionalPropertiesDictionary ??= new Dictionary<string, object>();
                if (property.Value.ValueKind == JsonValueKind.Null)
                {
                    additionalPropertiesDictionary.Add(property.Name, null);
                }
                else
                {
                    additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
                }
            }
            additionalProperties = additionalPropertiesDictionary;
            return new ActivityPolicy(timeout, retry, retryIntervalInSeconds, secureInput, secureOutput, additionalProperties);
        }
    }
}
