// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(SparkServiceErrorConverter))]
    public partial class SparkServiceError
    {
        internal static SparkServiceError DeserializeSparkServiceError(JsonElement element)
        {
            Optional<string> message = default;
            Optional<string> errorCode = default;
            Optional<SparkErrorSource> source = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("message"))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorCode"))
                {
                    errorCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    source = new SparkErrorSource(property.Value.GetString());
                    continue;
                }
            }
            return new SparkServiceError(message.Value, errorCode.Value, Optional.ToNullable(source));
        }

        internal partial class SparkServiceErrorConverter : JsonConverter<SparkServiceError>
        {
            public override void Write(Utf8JsonWriter writer, SparkServiceError model, JsonSerializerOptions options)
            {
                throw new NotImplementedException();
            }
            public override SparkServiceError Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeSparkServiceError(document.RootElement);
            }
        }
    }
}
