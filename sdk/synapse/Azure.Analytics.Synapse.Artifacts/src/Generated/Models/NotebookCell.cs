// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> Notebook cell. </summary>
    public partial class NotebookCell : IDictionary<string, object>
    {
        /// <summary> Initializes a new instance of NotebookCell. </summary>
        /// <param name="cellType"> String identifying the type of cell. </param>
        /// <param name="metadata"> Cell-level metadata. </param>
        /// <param name="source"> Contents of the cell, represented as an array of lines. </param>
        public NotebookCell(string cellType, object metadata, IEnumerable<string> source)
        {
            if (cellType == null)
            {
                throw new ArgumentNullException(nameof(cellType));
            }
            if (metadata == null)
            {
                throw new ArgumentNullException(nameof(metadata));
            }
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }

            CellType = cellType;
            Metadata = metadata;
            Source = source.ToArray();
            AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary> Initializes a new instance of NotebookCell. </summary>
        /// <param name="cellType"> String identifying the type of cell. </param>
        /// <param name="metadata"> Cell-level metadata. </param>
        /// <param name="source"> Contents of the cell, represented as an array of lines. </param>
        /// <param name="attachments"> Attachments associated with the cell. </param>
        /// <param name="outputs"> Cell-level output items. </param>
        /// <param name="additionalProperties"> . </param>
        internal NotebookCell(string cellType, object metadata, IList<string> source, object attachments, IList<NotebookCellOutputItem> outputs, IDictionary<string, object> additionalProperties)
        {
            CellType = cellType;
            Metadata = metadata;
            Source = source ?? new List<string>();
            Attachments = attachments;
            Outputs = outputs;
            AdditionalProperties = additionalProperties ?? new Dictionary<string, object>();
        }

        /// <summary> String identifying the type of cell. </summary>
        public string CellType { get; set; }
        /// <summary> Cell-level metadata. </summary>
        public object Metadata { get; set; }
        /// <summary> Contents of the cell, represented as an array of lines. </summary>
        public IList<string> Source { get; }
        /// <summary> Attachments associated with the cell. </summary>
        public object Attachments { get; set; }
        /// <summary> Cell-level output items. </summary>
        public IList<NotebookCellOutputItem> Outputs { get; set; }
        internal IDictionary<string, object> AdditionalProperties { get; }
        /// <inheritdoc />
        public IEnumerator<KeyValuePair<string, object>> GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        public bool TryGetValue(string key, out object value) => AdditionalProperties.TryGetValue(key, out value);
        /// <inheritdoc />
        public bool ContainsKey(string key) => AdditionalProperties.ContainsKey(key);
        /// <inheritdoc />
        public ICollection<string> Keys => AdditionalProperties.Keys;
        /// <inheritdoc />
        public ICollection<object> Values => AdditionalProperties.Values;
        /// <inheritdoc />
        int ICollection<KeyValuePair<string, object>>.Count => AdditionalProperties.Count;
        /// <inheritdoc />
        public void Add(string key, object value) => AdditionalProperties.Add(key, value);
        /// <inheritdoc />
        public bool Remove(string key) => AdditionalProperties.Remove(key);
        /// <inheritdoc />
        bool ICollection<KeyValuePair<string, object>>.IsReadOnly => AdditionalProperties.IsReadOnly;
        /// <inheritdoc />
        void ICollection<KeyValuePair<string, object>>.Add(KeyValuePair<string, object> value) => AdditionalProperties.Add(value);
        /// <inheritdoc />
        bool ICollection<KeyValuePair<string, object>>.Remove(KeyValuePair<string, object> value) => AdditionalProperties.Remove(value);
        /// <inheritdoc />
        bool ICollection<KeyValuePair<string, object>>.Contains(KeyValuePair<string, object> value) => AdditionalProperties.Contains(value);
        /// <inheritdoc />
        void ICollection<KeyValuePair<string, object>>.CopyTo(KeyValuePair<string, object>[] destination, int offset) => AdditionalProperties.CopyTo(destination, offset);
        /// <inheritdoc />
        void ICollection<KeyValuePair<string, object>>.Clear() => AdditionalProperties.Clear();
        /// <inheritdoc />
        public object this[string key]
        {
            get => AdditionalProperties[key];
            set => AdditionalProperties[key] = value;
        }
    }
}
