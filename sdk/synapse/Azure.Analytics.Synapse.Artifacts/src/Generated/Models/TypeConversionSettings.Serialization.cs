// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(TypeConversionSettingsConverter))]
    public partial class TypeConversionSettings : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(AllowDataTruncation))
            {
                writer.WritePropertyName("allowDataTruncation"u8);
                writer.WriteObjectValue(AllowDataTruncation);
            }
            if (Core.Optional.IsDefined(TreatBooleanAsNumber))
            {
                writer.WritePropertyName("treatBooleanAsNumber"u8);
                writer.WriteObjectValue(TreatBooleanAsNumber);
            }
            if (Core.Optional.IsDefined(DateTimeFormat))
            {
                writer.WritePropertyName("dateTimeFormat"u8);
                writer.WriteObjectValue(DateTimeFormat);
            }
            if (Core.Optional.IsDefined(DateTimeOffsetFormat))
            {
                writer.WritePropertyName("dateTimeOffsetFormat"u8);
                writer.WriteObjectValue(DateTimeOffsetFormat);
            }
            if (Core.Optional.IsDefined(TimeSpanFormat))
            {
                writer.WritePropertyName("timeSpanFormat"u8);
                writer.WriteObjectValue(TimeSpanFormat);
            }
            if (Core.Optional.IsDefined(Culture))
            {
                writer.WritePropertyName("culture"u8);
                writer.WriteObjectValue(Culture);
            }
            writer.WriteEndObject();
        }

        internal static TypeConversionSettings DeserializeTypeConversionSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<object> allowDataTruncation = default;
            Core.Optional<object> treatBooleanAsNumber = default;
            Core.Optional<object> dateTimeFormat = default;
            Core.Optional<object> dateTimeOffsetFormat = default;
            Core.Optional<object> timeSpanFormat = default;
            Core.Optional<object> culture = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("allowDataTruncation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    allowDataTruncation = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("treatBooleanAsNumber"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    treatBooleanAsNumber = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("dateTimeFormat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dateTimeFormat = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("dateTimeOffsetFormat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dateTimeOffsetFormat = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("timeSpanFormat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timeSpanFormat = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("culture"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    culture = property.Value.GetObject();
                    continue;
                }
            }
            return new TypeConversionSettings(allowDataTruncation.Value, treatBooleanAsNumber.Value, dateTimeFormat.Value, dateTimeOffsetFormat.Value, timeSpanFormat.Value, culture.Value);
        }

        internal partial class TypeConversionSettingsConverter : JsonConverter<TypeConversionSettings>
        {
            public override void Write(Utf8JsonWriter writer, TypeConversionSettings model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override TypeConversionSettings Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeTypeConversionSettings(document.RootElement);
            }
        }
    }
}
