// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    public partial class SqlDWSink : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(PreCopyScript))
            {
                writer.WritePropertyName("preCopyScript");
                writer.WriteObjectValue(PreCopyScript);
            }
            if (Optional.IsDefined(AllowPolyBase))
            {
                writer.WritePropertyName("allowPolyBase");
                writer.WriteObjectValue(AllowPolyBase);
            }
            if (Optional.IsDefined(PolyBaseSettings))
            {
                writer.WritePropertyName("polyBaseSettings");
                writer.WriteObjectValue(PolyBaseSettings);
            }
            if (Optional.IsDefined(AllowCopyCommand))
            {
                writer.WritePropertyName("allowCopyCommand");
                writer.WriteObjectValue(AllowCopyCommand);
            }
            if (Optional.IsDefined(CopyCommandSettings))
            {
                writer.WritePropertyName("copyCommandSettings");
                writer.WriteObjectValue(CopyCommandSettings);
            }
            if (Optional.IsDefined(TableOption))
            {
                writer.WritePropertyName("tableOption");
                writer.WriteObjectValue(TableOption);
            }
            writer.WritePropertyName("type");
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(WriteBatchSize))
            {
                writer.WritePropertyName("writeBatchSize");
                writer.WriteObjectValue(WriteBatchSize);
            }
            if (Optional.IsDefined(WriteBatchTimeout))
            {
                writer.WritePropertyName("writeBatchTimeout");
                writer.WriteObjectValue(WriteBatchTimeout);
            }
            if (Optional.IsDefined(SinkRetryCount))
            {
                writer.WritePropertyName("sinkRetryCount");
                writer.WriteObjectValue(SinkRetryCount);
            }
            if (Optional.IsDefined(SinkRetryWait))
            {
                writer.WritePropertyName("sinkRetryWait");
                writer.WriteObjectValue(SinkRetryWait);
            }
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections");
                writer.WriteObjectValue(MaxConcurrentConnections);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static SqlDWSink DeserializeSqlDWSink(JsonElement element)
        {
            Optional<object> preCopyScript = default;
            Optional<object> allowPolyBase = default;
            Optional<PolybaseSettings> polyBaseSettings = default;
            Optional<object> allowCopyCommand = default;
            Optional<DWCopyCommandSettings> copyCommandSettings = default;
            Optional<object> tableOption = default;
            string type = default;
            Optional<object> writeBatchSize = default;
            Optional<object> writeBatchTimeout = default;
            Optional<object> sinkRetryCount = default;
            Optional<object> sinkRetryWait = default;
            Optional<object> maxConcurrentConnections = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("preCopyScript"))
                {
                    preCopyScript = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("allowPolyBase"))
                {
                    allowPolyBase = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("polyBaseSettings"))
                {
                    polyBaseSettings = PolybaseSettings.DeserializePolybaseSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("allowCopyCommand"))
                {
                    allowCopyCommand = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("copyCommandSettings"))
                {
                    copyCommandSettings = DWCopyCommandSettings.DeserializeDWCopyCommandSettings(property.Value);
                    continue;
                }
                if (property.NameEquals("tableOption"))
                {
                    tableOption = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("writeBatchSize"))
                {
                    writeBatchSize = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("writeBatchTimeout"))
                {
                    writeBatchTimeout = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("sinkRetryCount"))
                {
                    sinkRetryCount = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("sinkRetryWait"))
                {
                    sinkRetryWait = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"))
                {
                    maxConcurrentConnections = property.Value.GetObject();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new SqlDWSink(type, writeBatchSize.Value, writeBatchTimeout.Value, sinkRetryCount.Value, sinkRetryWait.Value, maxConcurrentConnections.Value, additionalProperties, preCopyScript.Value, allowPolyBase.Value, polyBaseSettings.Value, allowCopyCommand.Value, copyCommandSettings.Value, tableOption.Value);
        }
    }
}
