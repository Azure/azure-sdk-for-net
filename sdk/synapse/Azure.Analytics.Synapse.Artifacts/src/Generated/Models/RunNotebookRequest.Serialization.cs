// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(RunNotebookRequestConverter))]
    public partial class RunNotebookRequest : IUtf8JsonSerializable, IJsonModel<RunNotebookRequest>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RunNotebookRequest>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RunNotebookRequest>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RunNotebookRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(RunNotebookRequest)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Notebook))
            {
                writer.WritePropertyName("notebook"u8);
                writer.WriteStringValue(Notebook);
            }
            if (Optional.IsDefined(SparkPool))
            {
                writer.WritePropertyName("sparkPool"u8);
                writer.WriteStringValue(SparkPool);
            }
            if (Optional.IsDefined(SessionOptions))
            {
                writer.WritePropertyName("sessionOptions"u8);
                writer.WriteObjectValue(SessionOptions);
            }
            if (Optional.IsDefined(HonorSessionTimeToLive))
            {
                writer.WritePropertyName("honorSessionTimeToLive"u8);
                writer.WriteBooleanValue(HonorSessionTimeToLive.Value);
            }
            if (Optional.IsCollectionDefined(Parameters))
            {
                writer.WritePropertyName("parameters"u8);
                writer.WriteStartObject();
                foreach (var item in Parameters)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RunNotebookRequest IJsonModel<RunNotebookRequest>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RunNotebookRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(RunNotebookRequest)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRunNotebookRequest(document.RootElement, options);
        }

        internal static RunNotebookRequest DeserializeRunNotebookRequest(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> notebook = default;
            Optional<string> sparkPool = default;
            Optional<RunNotebookSparkSessionOptions> sessionOptions = default;
            Optional<bool> honorSessionTimeToLive = default;
            Optional<IDictionary<string, RunNotebookParameter>> parameters = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("notebook"u8))
                {
                    notebook = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sparkPool"u8))
                {
                    sparkPool = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sessionOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sessionOptions = RunNotebookSparkSessionOptions.DeserializeRunNotebookSparkSessionOptions(property.Value);
                    continue;
                }
                if (property.NameEquals("honorSessionTimeToLive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    honorSessionTimeToLive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("parameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, RunNotebookParameter> dictionary = new Dictionary<string, RunNotebookParameter>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, RunNotebookParameter.DeserializeRunNotebookParameter(property0.Value));
                    }
                    parameters = dictionary;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RunNotebookRequest(notebook.Value, sparkPool.Value, sessionOptions.Value, Optional.ToNullable(honorSessionTimeToLive), Optional.ToDictionary(parameters), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RunNotebookRequest>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RunNotebookRequest>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new InvalidOperationException($"The model {nameof(RunNotebookRequest)} does not support '{options.Format}' format.");
            }
        }

        RunNotebookRequest IPersistableModel<RunNotebookRequest>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<RunNotebookRequest>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeRunNotebookRequest(document.RootElement, options);
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(RunNotebookRequest)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<RunNotebookRequest>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class RunNotebookRequestConverter : JsonConverter<RunNotebookRequest>
        {
            public override void Write(Utf8JsonWriter writer, RunNotebookRequest model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override RunNotebookRequest Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeRunNotebookRequest(document.RootElement);
            }
        }
    }
}
