// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(RelationshipPropertiesConverter))]
    public partial class RelationshipProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("namespace"u8);
            writer.WriteObjectValue(Namespace);
            writer.WritePropertyName("fromTableName"u8);
            writer.WriteStringValue(FromTableName);
            writer.WritePropertyName("toTableName"u8);
            writer.WriteStringValue(ToTableName);
            if (Optional.IsDefined(RelationshipType))
            {
                writer.WritePropertyName("relationshipType"u8);
                writer.WriteStringValue(RelationshipType.Value.ToSerialString());
            }
            writer.WritePropertyName("columnRelationshipInformations"u8);
            writer.WriteStartArray();
            foreach (var item in ColumnRelationshipInformations)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(OriginObjectId))
            {
                writer.WritePropertyName("originObjectId"u8);
                writer.WriteStringValue(OriginObjectId);
            }
            if (Optional.IsDefined(PublishStatus))
            {
                writer.WritePropertyName("publishStatus"u8);
                writer.WriteStringValue(PublishStatus.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static RelationshipProperties DeserializeRelationshipProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            BaseNamespace @namespace = default;
            Optional<string> fromTableId = default;
            string fromTableName = default;
            Optional<string> toTableId = default;
            string toTableName = default;
            Optional<RelationshipType> relationshipType = default;
            IList<ColumnRelationshipInformation> columnRelationshipInformations = default;
            Optional<string> originObjectId = default;
            Optional<string> objectId = default;
            Optional<long> objectVersion = default;
            Optional<PublishStatus> publishStatus = default;
            Optional<IDictionary<string, object>> properties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("namespace"u8))
                {
                    @namespace = BaseNamespace.DeserializeBaseNamespace(property.Value);
                    continue;
                }
                if (property.NameEquals("fromTableId"u8))
                {
                    fromTableId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fromTableName"u8))
                {
                    fromTableName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("toTableId"u8))
                {
                    toTableId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("toTableName"u8))
                {
                    toTableName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("relationshipType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    relationshipType = property.Value.GetString().ToRelationshipType();
                    continue;
                }
                if (property.NameEquals("columnRelationshipInformations"u8))
                {
                    List<ColumnRelationshipInformation> array = new List<ColumnRelationshipInformation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ColumnRelationshipInformation.DeserializeColumnRelationshipInformation(item));
                    }
                    columnRelationshipInformations = array;
                    continue;
                }
                if (property.NameEquals("originObjectId"u8))
                {
                    originObjectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectId"u8))
                {
                    objectId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    objectVersion = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("publishStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publishStatus = new PublishStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, property0.Value.GetObject());
                        }
                    }
                    properties = dictionary;
                    continue;
                }
            }
            return new RelationshipProperties(originObjectId.Value, objectId.Value, Optional.ToNullable(objectVersion), Optional.ToNullable(publishStatus), Optional.ToDictionary(properties), @namespace, fromTableId.Value, fromTableName, toTableId.Value, toTableName, Optional.ToNullable(relationshipType), columnRelationshipInformations);
        }

        internal partial class RelationshipPropertiesConverter : JsonConverter<RelationshipProperties>
        {
            public override void Write(Utf8JsonWriter writer, RelationshipProperties model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override RelationshipProperties Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeRelationshipProperties(document.RootElement);
            }
        }
    }
}
