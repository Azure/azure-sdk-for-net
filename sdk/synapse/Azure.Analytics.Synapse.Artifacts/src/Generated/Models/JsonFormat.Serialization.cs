// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(JsonFormatConverter))]
    public partial class JsonFormat : IUtf8JsonSerializable, IModelJsonSerializable<JsonFormat>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<JsonFormat>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<JsonFormat>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<JsonFormat>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(FilePattern))
            {
                writer.WritePropertyName("filePattern"u8);
                writer.WriteObjectValue(FilePattern);
            }
            if (Optional.IsDefined(NestingSeparator))
            {
                writer.WritePropertyName("nestingSeparator"u8);
                writer.WriteObjectValue(NestingSeparator);
            }
            if (Optional.IsDefined(EncodingName))
            {
                writer.WritePropertyName("encodingName"u8);
                writer.WriteObjectValue(EncodingName);
            }
            if (Optional.IsDefined(JsonNodeReference))
            {
                writer.WritePropertyName("jsonNodeReference"u8);
                writer.WriteObjectValue(JsonNodeReference);
            }
            if (Optional.IsDefined(JsonPathDefinition))
            {
                writer.WritePropertyName("jsonPathDefinition"u8);
                writer.WriteObjectValue(JsonPathDefinition);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Serializer))
            {
                writer.WritePropertyName("serializer"u8);
                writer.WriteObjectValue(Serializer);
            }
            if (Optional.IsDefined(Deserializer))
            {
                writer.WritePropertyName("deserializer"u8);
                writer.WriteObjectValue(Deserializer);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static JsonFormat DeserializeJsonFormat(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<object> filePattern = default;
            Optional<object> nestingSeparator = default;
            Optional<object> encodingName = default;
            Optional<object> jsonNodeReference = default;
            Optional<object> jsonPathDefinition = default;
            string type = default;
            Optional<object> serializer = default;
            Optional<object> deserializer = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("filePattern"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    filePattern = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("nestingSeparator"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nestingSeparator = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("encodingName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    encodingName = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("jsonNodeReference"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jsonNodeReference = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("jsonPathDefinition"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jsonPathDefinition = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serializer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serializer = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("deserializer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deserializer = property.Value.GetObject();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new JsonFormat(type, serializer.Value, deserializer.Value, additionalProperties, filePattern.Value, nestingSeparator.Value, encodingName.Value, jsonNodeReference.Value, jsonPathDefinition.Value);
        }

        JsonFormat IModelJsonSerializable<JsonFormat>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<JsonFormat>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeJsonFormat(doc.RootElement, options);
        }

        BinaryData IModelSerializable<JsonFormat>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<JsonFormat>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        JsonFormat IModelSerializable<JsonFormat>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<JsonFormat>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeJsonFormat(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="JsonFormat"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="JsonFormat"/> to convert. </param>
        public static implicit operator RequestContent(JsonFormat model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="JsonFormat"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator JsonFormat(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeJsonFormat(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }

        internal partial class JsonFormatConverter : JsonConverter<JsonFormat>
        {
            public override void Write(Utf8JsonWriter writer, JsonFormat model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override JsonFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeJsonFormat(document.RootElement);
            }
        }
    }
}
