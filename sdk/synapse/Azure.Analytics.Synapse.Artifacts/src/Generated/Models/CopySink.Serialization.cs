// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(CopySinkConverter))]
    public partial class CopySink : IUtf8JsonSerializable, IModelJsonSerializable<CopySink>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<CopySink>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<CopySink>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<CopySink>(this, options.Format);

            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(WriteBatchSize))
            {
                writer.WritePropertyName("writeBatchSize"u8);
                writer.WriteObjectValue(WriteBatchSize);
            }
            if (Optional.IsDefined(WriteBatchTimeout))
            {
                writer.WritePropertyName("writeBatchTimeout"u8);
                writer.WriteObjectValue(WriteBatchTimeout);
            }
            if (Optional.IsDefined(SinkRetryCount))
            {
                writer.WritePropertyName("sinkRetryCount"u8);
                writer.WriteObjectValue(SinkRetryCount);
            }
            if (Optional.IsDefined(SinkRetryWait))
            {
                writer.WritePropertyName("sinkRetryWait"u8);
                writer.WriteObjectValue(SinkRetryWait);
            }
            if (Optional.IsDefined(MaxConcurrentConnections))
            {
                writer.WritePropertyName("maxConcurrentConnections"u8);
                writer.WriteObjectValue(MaxConcurrentConnections);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static CopySink DeserializeCopySink(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AvroSink": return AvroSink.DeserializeAvroSink(element);
                    case "AzureBlobFSSink": return AzureBlobFSSink.DeserializeAzureBlobFSSink(element);
                    case "AzureDataExplorerSink": return AzureDataExplorerSink.DeserializeAzureDataExplorerSink(element);
                    case "AzureDataLakeStoreSink": return AzureDataLakeStoreSink.DeserializeAzureDataLakeStoreSink(element);
                    case "AzureDatabricksDeltaLakeSink": return AzureDatabricksDeltaLakeSink.DeserializeAzureDatabricksDeltaLakeSink(element);
                    case "AzureMySqlSink": return AzureMySqlSink.DeserializeAzureMySqlSink(element);
                    case "AzurePostgreSqlSink": return AzurePostgreSqlSink.DeserializeAzurePostgreSqlSink(element);
                    case "AzureQueueSink": return AzureQueueSink.DeserializeAzureQueueSink(element);
                    case "AzureSearchIndexSink": return AzureSearchIndexSink.DeserializeAzureSearchIndexSink(element);
                    case "AzureSqlSink": return AzureSqlSink.DeserializeAzureSqlSink(element);
                    case "AzureTableSink": return AzureTableSink.DeserializeAzureTableSink(element);
                    case "BinarySink": return BinarySink.DeserializeBinarySink(element);
                    case "BlobSink": return BlobSink.DeserializeBlobSink(element);
                    case "CommonDataServiceForAppsSink": return CommonDataServiceForAppsSink.DeserializeCommonDataServiceForAppsSink(element);
                    case "CosmosDbMongoDbApiSink": return CosmosDbMongoDbApiSink.DeserializeCosmosDbMongoDbApiSink(element);
                    case "CosmosDbSqlApiSink": return CosmosDbSqlApiSink.DeserializeCosmosDbSqlApiSink(element);
                    case "DelimitedTextSink": return DelimitedTextSink.DeserializeDelimitedTextSink(element);
                    case "DocumentDbCollectionSink": return DocumentDbCollectionSink.DeserializeDocumentDbCollectionSink(element);
                    case "DynamicsCrmSink": return DynamicsCrmSink.DeserializeDynamicsCrmSink(element);
                    case "DynamicsSink": return DynamicsSink.DeserializeDynamicsSink(element);
                    case "FileSystemSink": return FileSystemSink.DeserializeFileSystemSink(element);
                    case "InformixSink": return InformixSink.DeserializeInformixSink(element);
                    case "JsonSink": return JsonSink.DeserializeJsonSink(element);
                    case "MicrosoftAccessSink": return MicrosoftAccessSink.DeserializeMicrosoftAccessSink(element);
                    case "OdbcSink": return OdbcSink.DeserializeOdbcSink(element);
                    case "OracleSink": return OracleSink.DeserializeOracleSink(element);
                    case "OrcSink": return OrcSink.DeserializeOrcSink(element);
                    case "ParquetSink": return ParquetSink.DeserializeParquetSink(element);
                    case "RestSink": return RestSink.DeserializeRestSink(element);
                    case "SalesforceServiceCloudSink": return SalesforceServiceCloudSink.DeserializeSalesforceServiceCloudSink(element);
                    case "SalesforceSink": return SalesforceSink.DeserializeSalesforceSink(element);
                    case "SapCloudForCustomerSink": return SapCloudForCustomerSink.DeserializeSapCloudForCustomerSink(element);
                    case "SnowflakeSink": return SnowflakeSink.DeserializeSnowflakeSink(element);
                    case "SqlDWSink": return SqlDWSink.DeserializeSqlDWSink(element);
                    case "SqlMISink": return SqlMISink.DeserializeSqlMISink(element);
                    case "SqlServerSink": return SqlServerSink.DeserializeSqlServerSink(element);
                    case "SqlSink": return SqlSink.DeserializeSqlSink(element);
                }
            }

            // Unknown type found so we will deserialize the base properties only
            string type = default;
            Optional<object> writeBatchSize = default;
            Optional<object> writeBatchTimeout = default;
            Optional<object> sinkRetryCount = default;
            Optional<object> sinkRetryWait = default;
            Optional<object> maxConcurrentConnections = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("writeBatchSize"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    writeBatchSize = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("writeBatchTimeout"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    writeBatchTimeout = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("sinkRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sinkRetryCount = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("sinkRetryWait"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sinkRetryWait = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("maxConcurrentConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxConcurrentConnections = property.Value.GetObject();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new UnknownCopySink(type, writeBatchSize.Value, writeBatchTimeout.Value, sinkRetryCount.Value, sinkRetryWait.Value, maxConcurrentConnections.Value, additionalProperties);
        }

        CopySink IModelJsonSerializable<CopySink>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<CopySink>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeCopySink(doc.RootElement, options);
        }

        BinaryData IModelSerializable<CopySink>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<CopySink>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        CopySink IModelSerializable<CopySink>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<CopySink>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeCopySink(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="CopySink"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="CopySink"/> to convert. </param>
        public static implicit operator RequestContent(CopySink model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="CopySink"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator CopySink(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeCopySink(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }

        internal partial class CopySinkConverter : JsonConverter<CopySink>
        {
            public override void Write(Utf8JsonWriter writer, CopySink model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override CopySink Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeCopySink(document.RootElement);
            }
        }
    }
}
