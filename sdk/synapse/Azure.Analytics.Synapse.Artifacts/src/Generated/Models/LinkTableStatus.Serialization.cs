// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(LinkTableStatusConverter))]
    public partial class LinkTableStatus
    {
        internal static LinkTableStatus DeserializeLinkTableStatus(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> status = default;
            Optional<string> errorMessage = default;
            Optional<object> startTime = default;
            Optional<object> stopTime = default;
            Optional<string> linkTableId = default;
            Optional<string> errorCode = default;
            Optional<DateTimeOffset> lastProcessedData = default;
            Optional<DateTimeOffset> lastTransactionCommitTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorMessage"))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTime = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("stopTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    stopTime = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("linkTableId"))
                {
                    linkTableId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorCode"))
                {
                    errorCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastProcessedData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastProcessedData = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastTransactionCommitTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastTransactionCommitTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new LinkTableStatus(id.Value, status.Value, errorMessage.Value, startTime.Value, stopTime.Value, linkTableId.Value, errorCode.Value, Optional.ToNullable(lastProcessedData), Optional.ToNullable(lastTransactionCommitTime));
        }

        internal partial class LinkTableStatusConverter : JsonConverter<LinkTableStatus>
        {
            public override void Write(Utf8JsonWriter writer, LinkTableStatus model, JsonSerializerOptions options)
            {
                throw new NotImplementedException();
            }
            public override LinkTableStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeLinkTableStatus(document.RootElement);
            }
        }
    }
}
