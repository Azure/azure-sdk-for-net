// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    public partial class SparkBatchJobState
    {
        internal static SparkBatchJobState DeserializeSparkBatchJobState(JsonElement element)
        {
            Optional<DateTimeOffset> notStartedAt = default;
            Optional<DateTimeOffset> startingAt = default;
            Optional<DateTimeOffset> runningAt = default;
            Optional<DateTimeOffset> deadAt = default;
            Optional<DateTimeOffset> successAt = default;
            Optional<DateTimeOffset> killedAt = default;
            Optional<DateTimeOffset> recoveringAt = default;
            Optional<string> currentState = default;
            Optional<SparkRequest> jobCreationRequest = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("notStartedAt"))
                {
                    notStartedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startingAt"))
                {
                    startingAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("runningAt"))
                {
                    runningAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("deadAt"))
                {
                    deadAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("successAt"))
                {
                    successAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("killedAt"))
                {
                    killedAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("recoveringAt"))
                {
                    recoveringAt = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentState"))
                {
                    currentState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobCreationRequest"))
                {
                    jobCreationRequest = SparkRequest.DeserializeSparkRequest(property.Value);
                    continue;
                }
            }
            return new SparkBatchJobState(notStartedAt.HasValue ? notStartedAt.Value : (DateTimeOffset?)null, startingAt.HasValue ? startingAt.Value : (DateTimeOffset?)null, runningAt.HasValue ? runningAt.Value : (DateTimeOffset?)null, deadAt.HasValue ? deadAt.Value : (DateTimeOffset?)null, successAt.HasValue ? successAt.Value : (DateTimeOffset?)null, killedAt.HasValue ? killedAt.Value : (DateTimeOffset?)null, recoveringAt.HasValue ? recoveringAt.Value : (DateTimeOffset?)null, currentState.HasValue ? currentState.Value : null, jobCreationRequest.HasValue ? jobCreationRequest.Value : null);
        }
    }
}
