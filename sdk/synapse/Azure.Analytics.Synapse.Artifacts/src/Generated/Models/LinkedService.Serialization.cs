// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    public partial class LinkedService : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(ConnectVia))
            {
                writer.WritePropertyName("connectVia");
                writer.WriteObjectValue(ConnectVia);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Parameters))
            {
                writer.WritePropertyName("parameters");
                writer.WriteStartObject();
                foreach (var item in Parameters)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(Annotations))
            {
                writer.WritePropertyName("annotations");
                writer.WriteStartArray();
                foreach (var item in Annotations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        internal static LinkedService DeserializeLinkedService(JsonElement element)
        {
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AmazonMWS": return AmazonMWSLinkedService.DeserializeAmazonMWSLinkedService(element);
                    case "AmazonRedshift": return AmazonRedshiftLinkedService.DeserializeAmazonRedshiftLinkedService(element);
                    case "AmazonS3": return AmazonS3LinkedService.DeserializeAmazonS3LinkedService(element);
                    case "AzureBatch": return AzureBatchLinkedService.DeserializeAzureBatchLinkedService(element);
                    case "AzureBlobFS": return AzureBlobFSLinkedService.DeserializeAzureBlobFSLinkedService(element);
                    case "AzureBlobStorage": return AzureBlobStorageLinkedService.DeserializeAzureBlobStorageLinkedService(element);
                    case "AzureDataExplorer": return AzureDataExplorerLinkedService.DeserializeAzureDataExplorerLinkedService(element);
                    case "AzureDataLakeAnalytics": return AzureDataLakeAnalyticsLinkedService.DeserializeAzureDataLakeAnalyticsLinkedService(element);
                    case "AzureDataLakeStore": return AzureDataLakeStoreLinkedService.DeserializeAzureDataLakeStoreLinkedService(element);
                    case "AzureDatabricks": return AzureDatabricksLinkedService.DeserializeAzureDatabricksLinkedService(element);
                    case "AzureFileStorage": return AzureFileStorageLinkedService.DeserializeAzureFileStorageLinkedService(element);
                    case "AzureFunction": return AzureFunctionLinkedService.DeserializeAzureFunctionLinkedService(element);
                    case "AzureKeyVault": return AzureKeyVaultLinkedService.DeserializeAzureKeyVaultLinkedService(element);
                    case "AzureML": return AzureMLLinkedService.DeserializeAzureMLLinkedService(element);
                    case "AzureMLService": return AzureMLServiceLinkedService.DeserializeAzureMLServiceLinkedService(element);
                    case "AzureMariaDB": return AzureMariaDBLinkedService.DeserializeAzureMariaDBLinkedService(element);
                    case "AzureMySql": return AzureMySqlLinkedService.DeserializeAzureMySqlLinkedService(element);
                    case "AzurePostgreSql": return AzurePostgreSqlLinkedService.DeserializeAzurePostgreSqlLinkedService(element);
                    case "AzureSearch": return AzureSearchLinkedService.DeserializeAzureSearchLinkedService(element);
                    case "AzureSqlDW": return AzureSqlDWLinkedService.DeserializeAzureSqlDWLinkedService(element);
                    case "AzureSqlDatabase": return AzureSqlDatabaseLinkedService.DeserializeAzureSqlDatabaseLinkedService(element);
                    case "AzureSqlMI": return AzureSqlMILinkedService.DeserializeAzureSqlMILinkedService(element);
                    case "AzureStorage": return AzureStorageLinkedService.DeserializeAzureStorageLinkedService(element);
                    case "AzureTableStorage": return AzureTableStorageLinkedService.DeserializeAzureTableStorageLinkedService(element);
                    case "Cassandra": return CassandraLinkedService.DeserializeCassandraLinkedService(element);
                    case "CommonDataServiceForApps": return CommonDataServiceForAppsLinkedService.DeserializeCommonDataServiceForAppsLinkedService(element);
                    case "Concur": return ConcurLinkedService.DeserializeConcurLinkedService(element);
                    case "CosmosDb": return CosmosDbLinkedService.DeserializeCosmosDbLinkedService(element);
                    case "CosmosDbMongoDbApi": return CosmosDbMongoDbApiLinkedService.DeserializeCosmosDbMongoDbApiLinkedService(element);
                    case "Couchbase": return CouchbaseLinkedService.DeserializeCouchbaseLinkedService(element);
                    case "CustomDataSource": return CustomDataSourceLinkedService.DeserializeCustomDataSourceLinkedService(element);
                    case "Db2": return Db2LinkedService.DeserializeDb2LinkedService(element);
                    case "Drill": return DrillLinkedService.DeserializeDrillLinkedService(element);
                    case "Dynamics": return DynamicsLinkedService.DeserializeDynamicsLinkedService(element);
                    case "DynamicsAX": return DynamicsAXLinkedService.DeserializeDynamicsAXLinkedService(element);
                    case "DynamicsCrm": return DynamicsCrmLinkedService.DeserializeDynamicsCrmLinkedService(element);
                    case "Eloqua": return EloquaLinkedService.DeserializeEloquaLinkedService(element);
                    case "FileServer": return FileServerLinkedService.DeserializeFileServerLinkedService(element);
                    case "FtpServer": return FtpServerLinkedService.DeserializeFtpServerLinkedService(element);
                    case "GoogleAdWords": return GoogleAdWordsLinkedService.DeserializeGoogleAdWordsLinkedService(element);
                    case "GoogleBigQuery": return GoogleBigQueryLinkedService.DeserializeGoogleBigQueryLinkedService(element);
                    case "GoogleCloudStorage": return GoogleCloudStorageLinkedService.DeserializeGoogleCloudStorageLinkedService(element);
                    case "Greenplum": return GreenplumLinkedService.DeserializeGreenplumLinkedService(element);
                    case "HBase": return HBaseLinkedService.DeserializeHBaseLinkedService(element);
                    case "HDInsight": return HDInsightLinkedService.DeserializeHDInsightLinkedService(element);
                    case "HDInsightOnDemand": return HDInsightOnDemandLinkedService.DeserializeHDInsightOnDemandLinkedService(element);
                    case "Hdfs": return HdfsLinkedService.DeserializeHdfsLinkedService(element);
                    case "Hive": return HiveLinkedService.DeserializeHiveLinkedService(element);
                    case "HttpServer": return HttpLinkedService.DeserializeHttpLinkedService(element);
                    case "Hubspot": return HubspotLinkedService.DeserializeHubspotLinkedService(element);
                    case "Impala": return ImpalaLinkedService.DeserializeImpalaLinkedService(element);
                    case "Informix": return InformixLinkedService.DeserializeInformixLinkedService(element);
                    case "Jira": return JiraLinkedService.DeserializeJiraLinkedService(element);
                    case "Magento": return MagentoLinkedService.DeserializeMagentoLinkedService(element);
                    case "MariaDB": return MariaDBLinkedService.DeserializeMariaDBLinkedService(element);
                    case "Marketo": return MarketoLinkedService.DeserializeMarketoLinkedService(element);
                    case "MicrosoftAccess": return MicrosoftAccessLinkedService.DeserializeMicrosoftAccessLinkedService(element);
                    case "MongoDb": return MongoDbLinkedService.DeserializeMongoDbLinkedService(element);
                    case "MongoDbV2": return MongoDbV2LinkedService.DeserializeMongoDbV2LinkedService(element);
                    case "MySql": return MySqlLinkedService.DeserializeMySqlLinkedService(element);
                    case "Netezza": return NetezzaLinkedService.DeserializeNetezzaLinkedService(element);
                    case "OData": return ODataLinkedService.DeserializeODataLinkedService(element);
                    case "Odbc": return OdbcLinkedService.DeserializeOdbcLinkedService(element);
                    case "Office365": return Office365LinkedService.DeserializeOffice365LinkedService(element);
                    case "Oracle": return OracleLinkedService.DeserializeOracleLinkedService(element);
                    case "OracleServiceCloud": return OracleServiceCloudLinkedService.DeserializeOracleServiceCloudLinkedService(element);
                    case "Paypal": return PaypalLinkedService.DeserializePaypalLinkedService(element);
                    case "Phoenix": return PhoenixLinkedService.DeserializePhoenixLinkedService(element);
                    case "PostgreSql": return PostgreSqlLinkedService.DeserializePostgreSqlLinkedService(element);
                    case "Presto": return PrestoLinkedService.DeserializePrestoLinkedService(element);
                    case "QuickBooks": return QuickBooksLinkedService.DeserializeQuickBooksLinkedService(element);
                    case "Responsys": return ResponsysLinkedService.DeserializeResponsysLinkedService(element);
                    case "RestService": return RestServiceLinkedService.DeserializeRestServiceLinkedService(element);
                    case "Salesforce": return SalesforceLinkedService.DeserializeSalesforceLinkedService(element);
                    case "SalesforceMarketingCloud": return SalesforceMarketingCloudLinkedService.DeserializeSalesforceMarketingCloudLinkedService(element);
                    case "SalesforceServiceCloud": return SalesforceServiceCloudLinkedService.DeserializeSalesforceServiceCloudLinkedService(element);
                    case "SapBW": return SapBWLinkedService.DeserializeSapBWLinkedService(element);
                    case "SapCloudForCustomer": return SapCloudForCustomerLinkedService.DeserializeSapCloudForCustomerLinkedService(element);
                    case "SapEcc": return SapEccLinkedService.DeserializeSapEccLinkedService(element);
                    case "SapHana": return SapHanaLinkedService.DeserializeSapHanaLinkedService(element);
                    case "SapOpenHub": return SapOpenHubLinkedService.DeserializeSapOpenHubLinkedService(element);
                    case "SapTable": return SapTableLinkedService.DeserializeSapTableLinkedService(element);
                    case "ServiceNow": return ServiceNowLinkedService.DeserializeServiceNowLinkedService(element);
                    case "Sftp": return SftpServerLinkedService.DeserializeSftpServerLinkedService(element);
                    case "Shopify": return ShopifyLinkedService.DeserializeShopifyLinkedService(element);
                    case "Spark": return SparkLinkedService.DeserializeSparkLinkedService(element);
                    case "SqlServer": return SqlServerLinkedService.DeserializeSqlServerLinkedService(element);
                    case "Square": return SquareLinkedService.DeserializeSquareLinkedService(element);
                    case "Sybase": return SybaseLinkedService.DeserializeSybaseLinkedService(element);
                    case "Teradata": return TeradataLinkedService.DeserializeTeradataLinkedService(element);
                    case "Vertica": return VerticaLinkedService.DeserializeVerticaLinkedService(element);
                    case "Web": return WebLinkedService.DeserializeWebLinkedService(element);
                    case "Xero": return XeroLinkedService.DeserializeXeroLinkedService(element);
                    case "Zoho": return ZohoLinkedService.DeserializeZohoLinkedService(element);
                }
            }
            string type = default;
            Optional<IntegrationRuntimeReference> connectVia = default;
            Optional<string> description = default;
            Optional<IDictionary<string, ParameterSpecification>> parameters = default;
            Optional<IList<object>> annotations = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("connectVia"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    connectVia = IntegrationRuntimeReference.DeserializeIntegrationRuntimeReference(property.Value);
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("parameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, ParameterSpecification> dictionary = new Dictionary<string, ParameterSpecification>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, ParameterSpecification.DeserializeParameterSpecification(property0.Value));
                    }
                    parameters = dictionary;
                    continue;
                }
                if (property.NameEquals("annotations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<object> array = new List<object>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetObject());
                    }
                    annotations = array;
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new LinkedService(type, connectVia.Value, description.Value, Optional.ToDictionary(parameters), Optional.ToList(annotations), additionalProperties);
        }
    }
}
