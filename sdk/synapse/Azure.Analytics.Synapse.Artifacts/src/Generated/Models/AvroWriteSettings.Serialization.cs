// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(AvroWriteSettingsConverter))]
    public partial class AvroWriteSettings : IUtf8JsonSerializable, IJsonModel<AvroWriteSettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<AvroWriteSettings>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<AvroWriteSettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvroWriteSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(AvroWriteSettings)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(RecordName))
            {
                writer.WritePropertyName("recordName"u8);
                writer.WriteStringValue(RecordName);
            }
            if (Optional.IsDefined(RecordNamespace))
            {
                writer.WritePropertyName("recordNamespace"u8);
                writer.WriteStringValue(RecordNamespace);
            }
            if (Optional.IsDefined(MaxRowsPerFile))
            {
                writer.WritePropertyName("maxRowsPerFile"u8);
                writer.WriteObjectValue(MaxRowsPerFile);
            }
            if (Optional.IsDefined(FileNamePrefix))
            {
                writer.WritePropertyName("fileNamePrefix"u8);
                writer.WriteObjectValue(FileNamePrefix);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (AdditionalProperties != null)
            {
                foreach (var item in AdditionalProperties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
            }
            writer.WriteEndObject();
        }

        AvroWriteSettings IJsonModel<AvroWriteSettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvroWriteSettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(AvroWriteSettings)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeAvroWriteSettings(document.RootElement, options);
        }

        internal static AvroWriteSettings DeserializeAvroWriteSettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> recordName = default;
            Optional<string> recordNamespace = default;
            Optional<object> maxRowsPerFile = default;
            Optional<object> fileNamePrefix = default;
            string type = default;
            IDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("recordName"u8))
                {
                    recordName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recordNamespace"u8))
                {
                    recordNamespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maxRowsPerFile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxRowsPerFile = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("fileNamePrefix"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fileNamePrefix = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
            }
            additionalProperties = additionalPropertiesDictionary;
            return new AvroWriteSettings(type, additionalProperties, recordName.Value, recordNamespace.Value, maxRowsPerFile.Value, fileNamePrefix.Value);
        }

        BinaryData IPersistableModel<AvroWriteSettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvroWriteSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new InvalidOperationException($"The model {nameof(AvroWriteSettings)} does not support '{options.Format}' format.");
            }
        }

        AvroWriteSettings IPersistableModel<AvroWriteSettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<AvroWriteSettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeAvroWriteSettings(document.RootElement, options);
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(AvroWriteSettings)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<AvroWriteSettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class AvroWriteSettingsConverter : JsonConverter<AvroWriteSettings>
        {
            public override void Write(Utf8JsonWriter writer, AvroWriteSettings model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override AvroWriteSettings Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeAvroWriteSettings(document.RootElement);
            }
        }
    }
}
