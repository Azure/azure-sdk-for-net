// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(RerunTriggerListResponseConverter))]
    public partial class RerunTriggerListResponse : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("value");
            writer.WriteStartArray();
            foreach (var item in Value)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static RerunTriggerListResponse DeserializeRerunTriggerListResponse(JsonElement element)
        {
            IList<RerunTriggerResource> value = default;
            Optional<string> nextLink = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("value"))
                {
                    List<RerunTriggerResource> array = new List<RerunTriggerResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RerunTriggerResource.DeserializeRerunTriggerResource(item));
                    }
                    value = array;
                    continue;
                }
                if (property.NameEquals("nextLink"))
                {
                    nextLink = property.Value.GetString();
                    continue;
                }
            }
            return new RerunTriggerListResponse(value, nextLink.Value);
        }

        internal partial class RerunTriggerListResponseConverter : JsonConverter<RerunTriggerListResponse>
        {
            public override void Write(Utf8JsonWriter writer, RerunTriggerListResponse model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override RerunTriggerListResponse Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeRerunTriggerListResponse(document.RootElement);
            }
        }
    }
}
