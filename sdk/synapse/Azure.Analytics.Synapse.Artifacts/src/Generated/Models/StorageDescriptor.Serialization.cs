// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(StorageDescriptorConverter))]
    public partial class StorageDescriptor : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Distribution))
            {
                writer.WritePropertyName("distribution"u8);
                writer.WriteObjectValue(Distribution);
            }
            writer.WritePropertyName("columns"u8);
            writer.WriteStartArray();
            foreach (var item in Columns)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("format"u8);
            writer.WriteObjectValue(Format);
            writer.WritePropertyName("source"u8);
            writer.WriteObjectValue(Source);
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties"u8);
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    if (item.Value == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(SerDeInfo))
            {
                writer.WritePropertyName("serDeInfo"u8);
                writer.WriteObjectValue(SerDeInfo);
            }
            writer.WriteEndObject();
        }

        internal static StorageDescriptor DeserializeStorageDescriptor(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DistributionInfo> distribution = default;
            IList<DataColumn> columns = default;
            FormatInfo format = default;
            DataSource source = default;
            Optional<IDictionary<string, object>> properties = default;
            Optional<object> serDeInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("distribution"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    distribution = DistributionInfo.DeserializeDistributionInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("columns"u8))
                {
                    List<DataColumn> array = new List<DataColumn>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataColumn.DeserializeDataColumn(item));
                    }
                    columns = array;
                    continue;
                }
                if (property.NameEquals("format"u8))
                {
                    format = FormatInfo.DeserializeFormatInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("source"u8))
                {
                    source = DataSource.DeserializeDataSource(property.Value);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.Value.ValueKind == JsonValueKind.Null)
                        {
                            dictionary.Add(property0.Name, null);
                        }
                        else
                        {
                            dictionary.Add(property0.Name, property0.Value.GetObject());
                        }
                    }
                    properties = dictionary;
                    continue;
                }
                if (property.NameEquals("serDeInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serDeInfo = property.Value.GetObject();
                    continue;
                }
            }
            return new StorageDescriptor(distribution.Value, columns, format, source, Optional.ToDictionary(properties), serDeInfo.Value);
        }

        internal partial class StorageDescriptorConverter : JsonConverter<StorageDescriptor>
        {
            public override void Write(Utf8JsonWriter writer, StorageDescriptor model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override StorageDescriptor Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeStorageDescriptor(document.RootElement);
            }
        }
    }
}
