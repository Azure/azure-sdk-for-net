// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(DistcpSettingsConverter))]
    public partial class DistcpSettings : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("resourceManagerEndpoint"u8);
            writer.WriteObjectValue(ResourceManagerEndpoint);
            writer.WritePropertyName("tempScriptPath"u8);
            writer.WriteObjectValue(TempScriptPath);
            if (Optional.IsDefined(DistcpOptions))
            {
                writer.WritePropertyName("distcpOptions"u8);
                writer.WriteObjectValue(DistcpOptions);
            }
            writer.WriteEndObject();
        }

        internal static DistcpSettings DeserializeDistcpSettings(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            object resourceManagerEndpoint = default;
            object tempScriptPath = default;
            Optional<object> distcpOptions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceManagerEndpoint"u8))
                {
                    resourceManagerEndpoint = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("tempScriptPath"u8))
                {
                    tempScriptPath = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("distcpOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    distcpOptions = property.Value.GetObject();
                    continue;
                }
            }
            return new DistcpSettings(resourceManagerEndpoint, tempScriptPath, distcpOptions.Value);
        }

        internal partial class DistcpSettingsConverter : JsonConverter<DistcpSettings>
        {
            public override void Write(Utf8JsonWriter writer, DistcpSettings model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override DistcpSettings Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeDistcpSettings(document.RootElement);
            }
        }
    }
}
