// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> Execute SQL pool stored procedure activity. </summary>
    public partial class SqlPoolStoredProcedureActivity : Activity
    {
        /// <summary> Initializes a new instance of SqlPoolStoredProcedureActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="sqlPool"> SQL pool stored procedure reference. </param>
        /// <param name="storedProcedureName"> Stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="sqlPool"/>, or <paramref name="storedProcedureName"/> is null. </exception>
        public SqlPoolStoredProcedureActivity(string name, SqlPoolReference sqlPool, object storedProcedureName) : base(name)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (sqlPool == null)
            {
                throw new ArgumentNullException(nameof(sqlPool));
            }
            if (storedProcedureName == null)
            {
                throw new ArgumentNullException(nameof(storedProcedureName));
            }

            SqlPool = sqlPool;
            StoredProcedureName = storedProcedureName;
            StoredProcedureParameters = new ChangeTrackingDictionary<string, StoredProcedureParameter>();
            Type = "SqlPoolStoredProcedure";
        }

        /// <summary> Initializes a new instance of SqlPoolStoredProcedureActivity. </summary>
        /// <param name="name"> Activity name. </param>
        /// <param name="type"> Type of activity. </param>
        /// <param name="description"> Activity description. </param>
        /// <param name="dependsOn"> Activity depends on condition. </param>
        /// <param name="userProperties"> Activity user properties. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlPool"> SQL pool stored procedure reference. </param>
        /// <param name="storedProcedureName"> Stored procedure name. Type: string (or Expression with resultType string). </param>
        /// <param name="storedProcedureParameters"> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </param>
        internal SqlPoolStoredProcedureActivity(string name, string type, string description, IList<ActivityDependency> dependsOn, IList<UserProperty> userProperties, IDictionary<string, object> additionalProperties, SqlPoolReference sqlPool, object storedProcedureName, IDictionary<string, StoredProcedureParameter> storedProcedureParameters) : base(name, type, description, dependsOn, userProperties, additionalProperties)
        {
            SqlPool = sqlPool;
            StoredProcedureName = storedProcedureName;
            StoredProcedureParameters = storedProcedureParameters;
            Type = type ?? "SqlPoolStoredProcedure";
        }

        /// <summary> SQL pool stored procedure reference. </summary>
        public SqlPoolReference SqlPool { get; set; }
        /// <summary> Stored procedure name. Type: string (or Expression with resultType string). </summary>
        public object StoredProcedureName { get; set; }
        /// <summary> Value and type setting for stored procedure parameters. Example: &quot;{Parameter1: {value: &quot;1&quot;, type: &quot;int&quot;}}&quot;. </summary>
        public IDictionary<string, StoredProcedureParameter> StoredProcedureParameters { get; }
    }
}
