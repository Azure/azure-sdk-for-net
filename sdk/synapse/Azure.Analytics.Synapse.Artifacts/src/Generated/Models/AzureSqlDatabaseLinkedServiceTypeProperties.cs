// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> Azure SQL Database linked service properties. </summary>
    internal partial class AzureSqlDatabaseLinkedServiceTypeProperties : SqlServerBaseLinkedServiceTypeProperties
    {
        /// <summary> Initializes a new instance of <see cref="AzureSqlDatabaseLinkedServiceTypeProperties"/>. </summary>
        internal AzureSqlDatabaseLinkedServiceTypeProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AzureSqlDatabaseLinkedServiceTypeProperties"/>. </summary>
        /// <param name="server"> The name or network address of the instance of SQL Server to which to connect, used by recommended version. Type: string (or Expression with resultType string). </param>
        /// <param name="database"> The name of the database, used by recommended version. Type: string (or Expression with resultType string). </param>
        /// <param name="encrypt"> Indicate whether TLS encryption is required for all data sent between the client and server, used by recommended version. Possible values are true/yes/mandatory, false/no/optional and strict. Type: string (or Expression with resultType string). </param>
        /// <param name="trustServerCertificate"> Indicate whether the channel will be encrypted while bypassing walking the certificate chain to validate trust, used by recommended version. Type: Boolean (or Expression with resultType boolean). </param>
        /// <param name="hostNameInCertificate"> The host name to use when validating the server certificate for the connection. When not specified, the server name from the Data Source is used for certificate validation, used by recommended version. Type: string (or Expression with resultType string). </param>
        /// <param name="applicationIntent"> The application workload type when connecting to a server, used by recommended version. Possible values are ReadOnly and ReadWrite. Type: string (or Expression with resultType string). </param>
        /// <param name="connectTimeout"> The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error, used by recommended version. Type: integer (or Expression with resultType integer). </param>
        /// <param name="connectRetryCount"> The number of re-connections attempted after identifying that there was an idle connection failure, used by recommended version. This must be an integer between 0 and 255. Type: integer (or Expression with resultType integer). </param>
        /// <param name="connectRetryInterval"> The amount of time (in seconds) between each re-connection attempt after identifying that there was an idle connection failure, used by recommended version. This must be an integer between 1 and 60. Type: integer (or Expression with resultType integer). </param>
        /// <param name="loadBalanceTimeout"> The minimum time, in seconds, for the connection to live in the connection pool before being destroyed, used by recommended version. Type: integer (or Expression with resultType integer). </param>
        /// <param name="commandTimeout"> The default wait time (in seconds) before terminating the attempt to execute a command and generating an error, used by recommended version. Type: integer (or Expression with resultType integer). </param>
        /// <param name="integratedSecurity"> Indicate whether User ID and Password are specified in the connection (when false) or whether the current Windows account credentials are used for authentication (when true), used by recommended version. Type: Boolean (or Expression with resultType boolean). </param>
        /// <param name="failoverPartner"> The name or address of the partner server to connect to if the primary server is down, used by recommended version. Type: string (or Expression with resultType string). </param>
        /// <param name="maxPoolSize"> The maximum number of connections allowed in the connection pool for this specific connection string, used by recommended version. Type: integer (or Expression with resultType integer). </param>
        /// <param name="minPoolSize"> The minimum number of connections allowed in the connection pool for this specific connection string, used by recommended version. Type: integer (or Expression with resultType integer). </param>
        /// <param name="multipleActiveResultSets"> When true, an application can maintain multiple active result sets (MARS). When false, an application must process or cancel all result sets from one batch before it can execute any other batch on that connection. Type: Boolean (or Expression with resultType boolean). </param>
        /// <param name="multiSubnetFailover"> If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server, used by recommended version. Type: Boolean (or Expression with resultType boolean). </param>
        /// <param name="packetSize"> The size in bytes of the network packets used to communicate with an instance of server, used by recommended version. Type: integer (or Expression with resultType integer). </param>
        /// <param name="pooling"> Indicate whether the connection will be pooled or explicitly opened every time that the connection is requested, used by recommended version. Type: Boolean (or Expression with resultType boolean). </param>
        /// <param name="connectionString"> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </param>
        /// <param name="authenticationType"> The type used for authentication. Type: string. </param>
        /// <param name="userName"> The user name to be used when connecting to server. Type: string (or Expression with resultType string). </param>
        /// <param name="password"> The Azure key vault secret reference of password in connection string. </param>
        /// <param name="servicePrincipalId"> The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalKey">
        /// The key of the service principal used to authenticate against Azure SQL Database.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="servicePrincipalCredentialType"> The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string). </param>
        /// <param name="servicePrincipalCredential">
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </param>
        /// <param name="tenant"> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </param>
        /// <param name="azureCloudType"> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type. Type: string (or Expression with resultType string). </param>
        /// <param name="alwaysEncryptedSettings"> Sql always encrypted properties. </param>
        /// <param name="encryptedCredential"> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </param>
        /// <param name="credential"> The credential reference containing authentication information. </param>
        internal AzureSqlDatabaseLinkedServiceTypeProperties(object server, object database, object encrypt, object trustServerCertificate, object hostNameInCertificate, object applicationIntent, object connectTimeout, object connectRetryCount, object connectRetryInterval, object loadBalanceTimeout, object commandTimeout, object integratedSecurity, object failoverPartner, object maxPoolSize, object minPoolSize, object multipleActiveResultSets, object multiSubnetFailover, object packetSize, object pooling, object connectionString, AzureSqlDatabaseAuthenticationType? authenticationType, object userName, AzureKeyVaultSecretReference password, object servicePrincipalId, SecretBase servicePrincipalKey, object servicePrincipalCredentialType, SecretBase servicePrincipalCredential, object tenant, object azureCloudType, SqlAlwaysEncryptedProperties alwaysEncryptedSettings, object encryptedCredential, CredentialReference credential) : base(server, database, encrypt, trustServerCertificate, hostNameInCertificate, applicationIntent, connectTimeout, connectRetryCount, connectRetryInterval, loadBalanceTimeout, commandTimeout, integratedSecurity, failoverPartner, maxPoolSize, minPoolSize, multipleActiveResultSets, multiSubnetFailover, packetSize, pooling)
        {
            ConnectionString = connectionString;
            AuthenticationType = authenticationType;
            UserName = userName;
            Password = password;
            ServicePrincipalId = servicePrincipalId;
            ServicePrincipalKey = servicePrincipalKey;
            ServicePrincipalCredentialType = servicePrincipalCredentialType;
            ServicePrincipalCredential = servicePrincipalCredential;
            Tenant = tenant;
            AzureCloudType = azureCloudType;
            AlwaysEncryptedSettings = alwaysEncryptedSettings;
            EncryptedCredential = encryptedCredential;
            Credential = credential;
        }

        /// <summary> The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. </summary>
        public object ConnectionString { get; }
        /// <summary> The type used for authentication. Type: string. </summary>
        public AzureSqlDatabaseAuthenticationType? AuthenticationType { get; }
        /// <summary> The user name to be used when connecting to server. Type: string (or Expression with resultType string). </summary>
        public object UserName { get; }
        /// <summary> The Azure key vault secret reference of password in connection string. </summary>
        public AzureKeyVaultSecretReference Password { get; }
        /// <summary> The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType string). </summary>
        public object ServicePrincipalId { get; }
        /// <summary>
        /// The key of the service principal used to authenticate against Azure SQL Database.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </summary>
        public SecretBase ServicePrincipalKey { get; }
        /// <summary> The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret, 'ServicePrincipalCert' for certificate. Type: string (or Expression with resultType string). </summary>
        public object ServicePrincipalCredentialType { get; }
        /// <summary>
        /// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey', servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can only be AzureKeyVaultSecretReference.
        /// Please note <see cref="SecretBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureKeyVaultSecretReference"/> and <see cref="SecureString"/>.
        /// </summary>
        public SecretBase ServicePrincipalCredential { get; }
        /// <summary> The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string). </summary>
        public object Tenant { get; }
        /// <summary> Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type. Type: string (or Expression with resultType string). </summary>
        public object AzureCloudType { get; }
        /// <summary> Sql always encrypted properties. </summary>
        public SqlAlwaysEncryptedProperties AlwaysEncryptedSettings { get; }
        /// <summary> The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string). </summary>
        public object EncryptedCredential { get; }
        /// <summary> The credential reference containing authentication information. </summary>
        public CredentialReference Credential { get; }
    }
}
