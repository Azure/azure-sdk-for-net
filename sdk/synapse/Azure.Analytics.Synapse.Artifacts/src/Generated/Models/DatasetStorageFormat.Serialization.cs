// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(DatasetStorageFormatConverter))]
    public partial class DatasetStorageFormat : IUtf8JsonSerializable, IJsonModel<DatasetStorageFormat>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DatasetStorageFormat>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<DatasetStorageFormat>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DatasetStorageFormat>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(DatasetStorageFormat)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Serializer))
            {
                writer.WritePropertyName("serializer"u8);
                writer.WriteObjectValue(Serializer);
            }
            if (Optional.IsDefined(Deserializer))
            {
                writer.WritePropertyName("deserializer"u8);
                writer.WriteObjectValue(Deserializer);
            }
            foreach (var item in AdditionalProperties)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteObjectValue(item.Value);
            }
            writer.WriteEndObject();
        }

        DatasetStorageFormat IJsonModel<DatasetStorageFormat>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DatasetStorageFormat>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new InvalidOperationException($"The model {nameof(DatasetStorageFormat)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDatasetStorageFormat(document.RootElement, options);
        }

        internal static DatasetStorageFormat DeserializeDatasetStorageFormat(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "AvroFormat": return AvroFormat.DeserializeAvroFormat(element);
                    case "JsonFormat": return JsonFormat.DeserializeJsonFormat(element);
                    case "OrcFormat": return OrcFormat.DeserializeOrcFormat(element);
                    case "ParquetFormat": return ParquetFormat.DeserializeParquetFormat(element);
                    case "TextFormat": return TextFormat.DeserializeTextFormat(element);
                }
            }
            return UnknownDatasetStorageFormat.DeserializeUnknownDatasetStorageFormat(element);
        }

        BinaryData IPersistableModel<DatasetStorageFormat>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DatasetStorageFormat>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new InvalidOperationException($"The model {nameof(DatasetStorageFormat)} does not support '{options.Format}' format.");
            }
        }

        DatasetStorageFormat IPersistableModel<DatasetStorageFormat>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DatasetStorageFormat>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDatasetStorageFormat(document.RootElement, options);
                    }
                default:
                    throw new InvalidOperationException($"The model {nameof(DatasetStorageFormat)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<DatasetStorageFormat>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal partial class DatasetStorageFormatConverter : JsonConverter<DatasetStorageFormat>
        {
            public override void Write(Utf8JsonWriter writer, DatasetStorageFormat model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override DatasetStorageFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeDatasetStorageFormat(document.RootElement);
            }
        }
    }
}
