// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(LinkConnectionConverter))]
    public partial class LinkConnection : IUtf8JsonSerializable, IModelJsonSerializable<LinkConnection>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<LinkConnection>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<LinkConnection>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LinkConnection>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(SourceDatabase))
            {
                writer.WritePropertyName("sourceDatabase"u8);
                if (SourceDatabase is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<LinkConnectionSourceDatabase>)SourceDatabase).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(TargetDatabase))
            {
                writer.WritePropertyName("targetDatabase"u8);
                if (TargetDatabase is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<LinkConnectionTargetDatabase>)TargetDatabase).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(LandingZone))
            {
                writer.WritePropertyName("landingZone"u8);
                if (LandingZone is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<LinkConnectionLandingZone>)LandingZone).Serialize(writer, options);
                }
            }
            if (Optional.IsDefined(Compute))
            {
                writer.WritePropertyName("compute"u8);
                if (Compute is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<LinkConnectionCompute>)Compute).Serialize(writer, options);
                }
            }
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static LinkConnection DeserializeLinkConnection(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<LinkConnectionSourceDatabase> sourceDatabase = default;
            Optional<LinkConnectionTargetDatabase> targetDatabase = default;
            Optional<LinkConnectionLandingZone> landingZone = default;
            Optional<LinkConnectionCompute> compute = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sourceDatabase"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceDatabase = LinkConnectionSourceDatabase.DeserializeLinkConnectionSourceDatabase(property.Value);
                    continue;
                }
                if (property.NameEquals("targetDatabase"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetDatabase = LinkConnectionTargetDatabase.DeserializeLinkConnectionTargetDatabase(property.Value);
                    continue;
                }
                if (property.NameEquals("landingZone"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    landingZone = LinkConnectionLandingZone.DeserializeLinkConnectionLandingZone(property.Value);
                    continue;
                }
                if (property.NameEquals("compute"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    compute = LinkConnectionCompute.DeserializeLinkConnectionCompute(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new LinkConnection(sourceDatabase.Value, targetDatabase.Value, landingZone.Value, compute.Value, rawData);
        }

        LinkConnection IModelJsonSerializable<LinkConnection>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LinkConnection>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeLinkConnection(doc.RootElement, options);
        }

        BinaryData IModelSerializable<LinkConnection>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LinkConnection>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        LinkConnection IModelSerializable<LinkConnection>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<LinkConnection>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeLinkConnection(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="LinkConnection"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="LinkConnection"/> to convert. </param>
        public static implicit operator RequestContent(LinkConnection model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="LinkConnection"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator LinkConnection(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeLinkConnection(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }

        internal partial class LinkConnectionConverter : JsonConverter<LinkConnection>
        {
            public override void Write(Utf8JsonWriter writer, LinkConnection model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override LinkConnection Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeLinkConnection(document.RootElement);
            }
        }
    }
}
