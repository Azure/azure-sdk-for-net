// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    [JsonConverter(typeof(LinkConnectionConverter))]
    public partial class LinkConnection : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(SourceDatabase))
            {
                writer.WritePropertyName("sourceDatabase"u8);
                writer.WriteObjectValue(SourceDatabase);
            }
            if (Core.Optional.IsDefined(TargetDatabase))
            {
                writer.WritePropertyName("targetDatabase"u8);
                writer.WriteObjectValue(TargetDatabase);
            }
            if (Core.Optional.IsDefined(LandingZone))
            {
                writer.WritePropertyName("landingZone"u8);
                writer.WriteObjectValue(LandingZone);
            }
            if (Core.Optional.IsDefined(Compute))
            {
                writer.WritePropertyName("compute"u8);
                writer.WriteObjectValue(Compute);
            }
            writer.WriteEndObject();
        }

        internal static LinkConnection DeserializeLinkConnection(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<LinkConnectionSourceDatabase> sourceDatabase = default;
            Core.Optional<LinkConnectionTargetDatabase> targetDatabase = default;
            Core.Optional<LinkConnectionLandingZone> landingZone = default;
            Core.Optional<LinkConnectionCompute> compute = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sourceDatabase"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceDatabase = LinkConnectionSourceDatabase.DeserializeLinkConnectionSourceDatabase(property.Value);
                    continue;
                }
                if (property.NameEquals("targetDatabase"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetDatabase = LinkConnectionTargetDatabase.DeserializeLinkConnectionTargetDatabase(property.Value);
                    continue;
                }
                if (property.NameEquals("landingZone"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    landingZone = LinkConnectionLandingZone.DeserializeLinkConnectionLandingZone(property.Value);
                    continue;
                }
                if (property.NameEquals("compute"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    compute = LinkConnectionCompute.DeserializeLinkConnectionCompute(property.Value);
                    continue;
                }
            }
            return new LinkConnection(sourceDatabase.Value, targetDatabase.Value, landingZone.Value, compute.Value);
        }

        internal partial class LinkConnectionConverter : JsonConverter<LinkConnection>
        {
            public override void Write(Utf8JsonWriter writer, LinkConnection model, JsonSerializerOptions options)
            {
                writer.WriteObjectValue(model);
            }
            public override LinkConnection Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                using var document = JsonDocument.ParseValue(ref reader);
                return DeserializeLinkConnection(document.RootElement);
            }
        }
    }
}
