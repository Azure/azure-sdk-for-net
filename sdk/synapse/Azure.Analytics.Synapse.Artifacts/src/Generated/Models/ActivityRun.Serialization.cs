// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    public partial class ActivityRun
    {
        internal static ActivityRun DeserializeActivityRun(JsonElement element)
        {
            Optional<string> pipelineName = default;
            Optional<string> pipelineRunId = default;
            Optional<string> activityName = default;
            Optional<string> activityType = default;
            Optional<string> activityRunId = default;
            Optional<string> linkedServiceName = default;
            Optional<string> status = default;
            Optional<DateTimeOffset> activityRunStart = default;
            Optional<DateTimeOffset> activityRunEnd = default;
            Optional<int> durationInMs = default;
            Optional<object> input = default;
            Optional<object> output = default;
            Optional<object> error = default;
            IReadOnlyDictionary<string, object> additionalProperties = default;
            Dictionary<string, object> additionalPropertiesDictionary = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("pipelineName"))
                {
                    pipelineName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pipelineRunId"))
                {
                    pipelineRunId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("activityName"))
                {
                    activityName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("activityType"))
                {
                    activityType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("activityRunId"))
                {
                    activityRunId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("linkedServiceName"))
                {
                    linkedServiceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("activityRunStart"))
                {
                    activityRunStart = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("activityRunEnd"))
                {
                    activityRunEnd = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("durationInMs"))
                {
                    durationInMs = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("input"))
                {
                    input = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("output"))
                {
                    output = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("error"))
                {
                    error = property.Value.GetObject();
                    continue;
                }
                additionalPropertiesDictionary ??= new Dictionary<string, object>();
                if (property.Value.ValueKind == JsonValueKind.Null)
                {
                    additionalPropertiesDictionary.Add(property.Name, null);
                }
                else
                {
                    additionalPropertiesDictionary.Add(property.Name, property.Value.GetObject());
                }
            }
            additionalProperties = additionalPropertiesDictionary;
            return new ActivityRun(pipelineName.HasValue ? pipelineName.Value : null, pipelineRunId.HasValue ? pipelineRunId.Value : null, activityName.HasValue ? activityName.Value : null, activityType.HasValue ? activityType.Value : null, activityRunId.HasValue ? activityRunId.Value : null, linkedServiceName.HasValue ? linkedServiceName.Value : null, status.HasValue ? status.Value : null, activityRunStart.HasValue ? activityRunStart.Value : (DateTimeOffset?)null, activityRunEnd.HasValue ? activityRunEnd.Value : (DateTimeOffset?)null, durationInMs.HasValue ? durationInMs.Value : (int?)null, input.HasValue ? input.Value : null, output.HasValue ? output.Value : null, error.HasValue ? error.Value : null, additionalProperties);
        }
    }
}
