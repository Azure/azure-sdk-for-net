// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Analytics.Synapse.Artifacts.Models
{
    /// <summary> VNet properties for managed integration runtime. </summary>
    public partial class IntegrationRuntimeVNetProperties : IDictionary<string, object>
    {
        /// <summary> Initializes a new instance of IntegrationRuntimeVNetProperties. </summary>
        public IntegrationRuntimeVNetProperties()
        {
            PublicIPs = new ChangeTrackingList<string>();
            AdditionalProperties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of IntegrationRuntimeVNetProperties. </summary>
        /// <param name="vNetId"> The ID of the VNet that this integration runtime will join. </param>
        /// <param name="subnet"> The name of the subnet this integration runtime will join. </param>
        /// <param name="publicIPs"> Resource IDs of the public IP addresses that this integration runtime will use. </param>
        /// <param name="additionalProperties"> . </param>
        internal IntegrationRuntimeVNetProperties(string vNetId, string subnet, IList<string> publicIPs, IDictionary<string, object> additionalProperties)
        {
            VNetId = vNetId;
            Subnet = subnet;
            PublicIPs = publicIPs;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> The ID of the VNet that this integration runtime will join. </summary>
        public string VNetId { get; set; }
        /// <summary> The name of the subnet this integration runtime will join. </summary>
        public string Subnet { get; set; }
        /// <summary> Resource IDs of the public IP addresses that this integration runtime will use. </summary>
        public IList<string> PublicIPs { get; }
        internal IDictionary<string, object> AdditionalProperties { get; }
        /// <inheritdoc />
        public IEnumerator<KeyValuePair<string, object>> GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => AdditionalProperties.GetEnumerator();
        /// <inheritdoc />
        public bool TryGetValue(string key, out object value) => AdditionalProperties.TryGetValue(key, out value);
        /// <inheritdoc />
        public bool ContainsKey(string key) => AdditionalProperties.ContainsKey(key);
        /// <inheritdoc />
        public ICollection<string> Keys => AdditionalProperties.Keys;
        /// <inheritdoc />
        public ICollection<object> Values => AdditionalProperties.Values;
        /// <inheritdoc />
        int ICollection<KeyValuePair<string, object>>.Count => AdditionalProperties.Count;
        /// <inheritdoc />
        public void Add(string key, object value) => AdditionalProperties.Add(key, value);
        /// <inheritdoc />
        public bool Remove(string key) => AdditionalProperties.Remove(key);
        /// <inheritdoc />
        bool ICollection<KeyValuePair<string, object>>.IsReadOnly => AdditionalProperties.IsReadOnly;
        /// <inheritdoc />
        void ICollection<KeyValuePair<string, object>>.Add(KeyValuePair<string, object> value) => AdditionalProperties.Add(value);
        /// <inheritdoc />
        bool ICollection<KeyValuePair<string, object>>.Remove(KeyValuePair<string, object> value) => AdditionalProperties.Remove(value);
        /// <inheritdoc />
        bool ICollection<KeyValuePair<string, object>>.Contains(KeyValuePair<string, object> value) => AdditionalProperties.Contains(value);
        /// <inheritdoc />
        void ICollection<KeyValuePair<string, object>>.CopyTo(KeyValuePair<string, object>[] destination, int offset) => AdditionalProperties.CopyTo(destination, offset);
        /// <inheritdoc />
        void ICollection<KeyValuePair<string, object>>.Clear() => AdditionalProperties.Clear();
        /// <inheritdoc />
        public object this[string key]
        {
            get => AdditionalProperties[key];
            set => AdditionalProperties[key] = value;
        }
    }
}
