// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Synapse.Artifacts
{
    /// <summary> The TriggerRun service client. </summary>
    public partial class TriggerRunClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://dev.azuresynapse.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of TriggerRunClient for mocking. </summary>
        protected TriggerRunClient()
        {
        }

        /// <summary> Initializes a new instance of TriggerRunClient. </summary>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TriggerRunClient(Uri endpoint, TokenCredential credential, ArtifactsClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new ArtifactsClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Rerun single trigger instance by runId. </summary>
        /// <param name="triggerName"> The trigger name. </param>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> RerunTriggerInstanceAsync(string triggerName, string runId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateRerunTriggerInstanceRequest(triggerName, runId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("TriggerRunClient.RerunTriggerInstance");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rerun single trigger instance by runId. </summary>
        /// <param name="triggerName"> The trigger name. </param>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response RerunTriggerInstance(string triggerName, string runId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateRerunTriggerInstanceRequest(triggerName, runId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("TriggerRunClient.RerunTriggerInstance");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="RerunTriggerInstance"/> and <see cref="RerunTriggerInstanceAsync"/> operations. </summary>
        /// <param name="triggerName"> The trigger name. </param>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateRerunTriggerInstanceRequest(string triggerName, string runId, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/triggers/", false);
            uri.AppendPath(triggerName, true);
            uri.AppendPath("/triggerRuns/", false);
            uri.AppendPath(runId, true);
            uri.AppendPath("/rerun", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Cancel single trigger instance by runId. </summary>
        /// <param name="triggerName"> The trigger name. </param>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CancelTriggerInstanceAsync(string triggerName, string runId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCancelTriggerInstanceRequest(triggerName, runId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("TriggerRunClient.CancelTriggerInstance");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancel single trigger instance by runId. </summary>
        /// <param name="triggerName"> The trigger name. </param>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CancelTriggerInstance(string triggerName, string runId, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCancelTriggerInstanceRequest(triggerName, runId, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("TriggerRunClient.CancelTriggerInstance");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CancelTriggerInstance"/> and <see cref="CancelTriggerInstanceAsync"/> operations. </summary>
        /// <param name="triggerName"> The trigger name. </param>
        /// <param name="runId"> The pipeline run identifier. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCancelTriggerInstanceRequest(string triggerName, string runId, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/triggers/", false);
            uri.AppendPath(triggerName, true);
            uri.AppendPath("/triggerRuns/", false);
            uri.AppendPath(runId, true);
            uri.AppendPath("/cancel", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Query trigger runs. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>continuationToken</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The continuation token for getting the next page of results. Null for first page. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedAfter</term>
        ///     <term>string (ISO 8601 Format)</term>
        ///     <term>Yes</term>
        ///     <term> The time at or after which the run event was updated in &apos;ISO 8601&apos; format. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedBefore</term>
        ///     <term>string (ISO 8601 Format)</term>
        ///     <term>Yes</term>
        ///     <term> The time at or before which the run event was updated in &apos;ISO 8601&apos; format. </term>
        ///   </item>
        ///   <item>
        ///     <term>filters</term>
        ///     <term>RunQueryFilter[]</term>
        ///     <term></term>
        ///     <term> List of filters. </term>
        ///   </item>
        ///   <item>
        ///     <term>orderBy</term>
        ///     <term>RunQueryOrderBy[]</term>
        ///     <term></term>
        ///     <term> List of OrderBy option. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>RunQueryFilter</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>operand</term>
        ///     <term>&quot;PipelineName&quot; | &quot;Status&quot; | &quot;RunStart&quot; | &quot;RunEnd&quot; | &quot;ActivityName&quot; | &quot;ActivityRunStart&quot; | &quot;ActivityRunEnd&quot; | &quot;ActivityType&quot; | &quot;TriggerName&quot; | &quot;TriggerRunTimestamp&quot; | &quot;RunGroupId&quot; | &quot;LatestOnly&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status; to query activity runs are ActivityName, ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status. </term>
        ///   </item>
        ///   <item>
        ///     <term>operator</term>
        ///     <term>&quot;Equals&quot; | &quot;NotEquals&quot; | &quot;In&quot; | &quot;NotIn&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Operator to be used for filter. </term>
        ///   </item>
        ///   <item>
        ///     <term>values</term>
        ///     <term>string[]</term>
        ///     <term>Yes</term>
        ///     <term> List of filter values. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>RunQueryOrderBy</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>orderBy</term>
        ///     <term>&quot;RunStart&quot; | &quot;RunEnd&quot; | &quot;PipelineName&quot; | &quot;Status&quot; | &quot;ActivityName&quot; | &quot;ActivityRunStart&quot; | &quot;ActivityRunEnd&quot; | &quot;TriggerName&quot; | &quot;TriggerRunTimestamp&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd and Status; for activity runs are ActivityName, ActivityRunStart, ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status. </term>
        ///   </item>
        ///   <item>
        ///     <term>order</term>
        ///     <term>&quot;ASC&quot; | &quot;DESC&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Sorting order of the parameter. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> QueryTriggerRunsByWorkspaceAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateQueryTriggerRunsByWorkspaceRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("TriggerRunClient.QueryTriggerRunsByWorkspace");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query trigger runs. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>continuationToken</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The continuation token for getting the next page of results. Null for first page. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedAfter</term>
        ///     <term>string (ISO 8601 Format)</term>
        ///     <term>Yes</term>
        ///     <term> The time at or after which the run event was updated in &apos;ISO 8601&apos; format. </term>
        ///   </item>
        ///   <item>
        ///     <term>lastUpdatedBefore</term>
        ///     <term>string (ISO 8601 Format)</term>
        ///     <term>Yes</term>
        ///     <term> The time at or before which the run event was updated in &apos;ISO 8601&apos; format. </term>
        ///   </item>
        ///   <item>
        ///     <term>filters</term>
        ///     <term>RunQueryFilter[]</term>
        ///     <term></term>
        ///     <term> List of filters. </term>
        ///   </item>
        ///   <item>
        ///     <term>orderBy</term>
        ///     <term>RunQueryOrderBy[]</term>
        ///     <term></term>
        ///     <term> List of OrderBy option. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>RunQueryFilter</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>operand</term>
        ///     <term>&quot;PipelineName&quot; | &quot;Status&quot; | &quot;RunStart&quot; | &quot;RunEnd&quot; | &quot;ActivityName&quot; | &quot;ActivityRunStart&quot; | &quot;ActivityRunEnd&quot; | &quot;ActivityType&quot; | &quot;TriggerName&quot; | &quot;TriggerRunTimestamp&quot; | &quot;RunGroupId&quot; | &quot;LatestOnly&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart, RunEnd and Status; to query activity runs are ActivityName, ActivityRunStart, ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status. </term>
        ///   </item>
        ///   <item>
        ///     <term>operator</term>
        ///     <term>&quot;Equals&quot; | &quot;NotEquals&quot; | &quot;In&quot; | &quot;NotIn&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Operator to be used for filter. </term>
        ///   </item>
        ///   <item>
        ///     <term>values</term>
        ///     <term>string[]</term>
        ///     <term>Yes</term>
        ///     <term> List of filter values. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>RunQueryOrderBy</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>orderBy</term>
        ///     <term>&quot;RunStart&quot; | &quot;RunEnd&quot; | &quot;PipelineName&quot; | &quot;Status&quot; | &quot;ActivityName&quot; | &quot;ActivityRunStart&quot; | &quot;ActivityRunEnd&quot; | &quot;TriggerName&quot; | &quot;TriggerRunTimestamp&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName, RunStart, RunEnd and Status; for activity runs are ActivityName, ActivityRunStart, ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status. </term>
        ///   </item>
        ///   <item>
        ///     <term>order</term>
        ///     <term>&quot;ASC&quot; | &quot;DESC&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Sorting order of the parameter. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response QueryTriggerRunsByWorkspace(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateQueryTriggerRunsByWorkspaceRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("TriggerRunClient.QueryTriggerRunsByWorkspace");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="QueryTriggerRunsByWorkspace"/> and <see cref="QueryTriggerRunsByWorkspaceAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateQueryTriggerRunsByWorkspaceRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/queryTriggerRuns", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }
    }
}
