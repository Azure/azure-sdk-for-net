// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Synapse.Artifacts.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Synapse.Artifacts
{
    /// <summary> The SynapseMetadata service client. </summary>
    public partial class SynapseMetadataClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal SynapseMetadataRestClient RestClient { get; }

        /// <summary> Initializes a new instance of SynapseMetadataClient for mocking. </summary>
        protected SynapseMetadataClient()
        {
        }

        /// <summary> Initializes a new instance of SynapseMetadataClient. </summary>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public SynapseMetadataClient(Uri endpoint, TokenCredential credential, ArtifactsClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new ArtifactsClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://dev.azuresynapse.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new SynapseMetadataRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of SynapseMetadataClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="endpoint"/> is null. </exception>
        internal SynapseMetadataClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint)
        {
            RestClient = new SynapseMetadataRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Batch execution of DDL Payload. </summary>
        /// <param name="createArtifactsPayload"> DDLBatch payload containing artifact drafts to be created or deleted or modified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Batch execution of DDL Payload. </remarks>
        public virtual async Task<Response<SyMsapiddlResponses>> ExecuteChangeAsync(DDLBatch createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ExecuteChange");
            scope.Start();
            try
            {
                return await RestClient.ExecuteChangeAsync(createArtifactsPayload, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Batch execution of DDL Payload. </summary>
        /// <param name="createArtifactsPayload"> DDLBatch payload containing artifact drafts to be created or deleted or modified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Batch execution of DDL Payload. </remarks>
        public virtual Response<SyMsapiddlResponses> ExecuteChange(DDLBatch createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ExecuteChange");
            scope.Start();
            try
            {
                return RestClient.ExecuteChange(createArtifactsPayload, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all databases in a workspace. </summary>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get all databases in a workspace. </remarks>
        public virtual async Task<Response<QueryArtifactsResponse>> ListDatabasesAsync(string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListDatabases");
            scope.Start();
            try
            {
                return await RestClient.ListDatabasesAsync(continuationToken, maxPageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all databases in a workspace. </summary>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get all databases in a workspace. </remarks>
        public virtual Response<QueryArtifactsResponse> ListDatabases(string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListDatabases");
            scope.Start();
            try
            {
                return RestClient.ListDatabases(continuationToken, maxPageSize, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all Artifacts of a type in a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all Artifacts of a type in a database. </remarks>
        public virtual async Task<Response<QueryArtifactsResponse>> ListArtifactsAsync(string databaseName, SASEntityType artifactType, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListArtifacts");
            scope.Start();
            try
            {
                return await RestClient.ListArtifactsAsync(databaseName, artifactType, continuationToken, maxPageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all Artifacts of a type in a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all Artifacts of a type in a database. </remarks>
        public virtual Response<QueryArtifactsResponse> ListArtifacts(string databaseName, SASEntityType artifactType, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListArtifacts");
            scope.Start();
            try
            {
                return RestClient.ListArtifacts(databaseName, artifactType, continuationToken, maxPageSize, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all artifacts in schema by type. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all Artifacts in schema by type. </remarks>
        public virtual async Task<Response<QueryArtifactsResponse>> ListArtifactsInSchemaByTypeAsync(string databaseName, string schemaName, SASEntityType artifactType, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListArtifactsInSchemaByType");
            scope.Start();
            try
            {
                return await RestClient.ListArtifactsInSchemaByTypeAsync(databaseName, schemaName, artifactType, continuationToken, maxPageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all artifacts in schema by type. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all Artifacts in schema by type. </remarks>
        public virtual Response<QueryArtifactsResponse> ListArtifactsInSchemaByType(string databaseName, string schemaName, SASEntityType artifactType, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListArtifactsInSchemaByType");
            scope.Start();
            try
            {
                return RestClient.ListArtifactsInSchemaByType(databaseName, schemaName, artifactType, continuationToken, maxPageSize, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all partition information for a table. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="tableName"> Table name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all partition information for a table. </remarks>
        public virtual async Task<Response<QueryArtifactsResponse>> ListPartitionInfosForTableAsync(string databaseName, string tableName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListPartitionInfosForTable");
            scope.Start();
            try
            {
                return await RestClient.ListPartitionInfosForTableAsync(databaseName, tableName, continuationToken, maxPageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all partition information for a table. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="tableName"> Table name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all partition information for a table. </remarks>
        public virtual Response<QueryArtifactsResponse> ListPartitionInfosForTable(string databaseName, string tableName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListPartitionInfosForTable");
            scope.Start();
            try
            {
                return RestClient.ListPartitionInfosForTable(databaseName, tableName, continuationToken, maxPageSize, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all partition information for a view. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="viewName"> View name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all partition information for a view. </remarks>
        public virtual async Task<Response<QueryArtifactsResponse>> ListPartitionInfosForViewAsync(string databaseName, string viewName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListPartitionInfosForView");
            scope.Start();
            try
            {
                return await RestClient.ListPartitionInfosForViewAsync(databaseName, viewName, continuationToken, maxPageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all partition information for a view. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="viewName"> View name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all partition information for a view. </remarks>
        public virtual Response<QueryArtifactsResponse> ListPartitionInfosForView(string databaseName, string viewName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListPartitionInfosForView");
            scope.Start();
            try
            {
                return RestClient.ListPartitionInfosForView(databaseName, viewName, continuationToken, maxPageSize, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all partition information for table in schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="tableName"> Table name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all partition information for a table in schema. </remarks>
        public virtual async Task<Response<QueryArtifactsResponse>> ListPartitionInfosForSchemaAndTableAsync(string databaseName, string schemaName, string tableName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListPartitionInfosForSchemaAndTable");
            scope.Start();
            try
            {
                return await RestClient.ListPartitionInfosForSchemaAndTableAsync(databaseName, schemaName, tableName, continuationToken, maxPageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all partition information for table in schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="tableName"> Table name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all partition information for a table in schema. </remarks>
        public virtual Response<QueryArtifactsResponse> ListPartitionInfosForSchemaAndTable(string databaseName, string schemaName, string tableName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListPartitionInfosForSchemaAndTable");
            scope.Start();
            try
            {
                return RestClient.ListPartitionInfosForSchemaAndTable(databaseName, schemaName, tableName, continuationToken, maxPageSize, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all partition information for a view in schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="viewName"> View name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all partition information for a view in schema. </remarks>
        public virtual async Task<Response<QueryArtifactsResponse>> ListPartitionInfosForSchemaAndViewAsync(string databaseName, string schemaName, string viewName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListPartitionInfosForSchemaAndView");
            scope.Start();
            try
            {
                return await RestClient.ListPartitionInfosForSchemaAndViewAsync(databaseName, schemaName, viewName, continuationToken, maxPageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all partition information for a view in schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="viewName"> View name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> List all partition information for a view in schema. </remarks>
        public virtual Response<QueryArtifactsResponse> ListPartitionInfosForSchemaAndView(string databaseName, string schemaName, string viewName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.ListPartitionInfosForSchemaAndView");
            scope.Start();
            try
            {
                return RestClient.ListPartitionInfosForSchemaAndView(databaseName, schemaName, viewName, continuationToken, maxPageSize, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get details about a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get details about a database. </remarks>
        public virtual async Task<Response<DatabaseEntity>> GetDatabaseAsync(string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.GetDatabase");
            scope.Start();
            try
            {
                return await RestClient.GetDatabaseAsync(databaseName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get details about a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get details about a database. </remarks>
        public virtual Response<DatabaseEntity> GetDatabase(string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.GetDatabase");
            scope.Start();
            try
            {
                return RestClient.GetDatabase(databaseName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="createArtifactsPayload"> Database entity payload to create or update a Database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Put a database. </remarks>
        public virtual async Task<Response<SyMsapiddlResponse>> PutDatabaseAsync(string databaseName, DatabaseEntity createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.PutDatabase");
            scope.Start();
            try
            {
                return await RestClient.PutDatabaseAsync(databaseName, createArtifactsPayload, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="createArtifactsPayload"> Database entity payload to create or update a Database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Put a database. </remarks>
        public virtual Response<SyMsapiddlResponse> PutDatabase(string databaseName, DatabaseEntity createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.PutDatabase");
            scope.Start();
            try
            {
                return RestClient.PutDatabase(databaseName, createArtifactsPayload, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete a database. </remarks>
        public virtual async Task<Response> DeleteDatabaseAsync(string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.DeleteDatabase");
            scope.Start();
            try
            {
                return await RestClient.DeleteDatabaseAsync(databaseName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete a database. </remarks>
        public virtual Response DeleteDatabase(string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.DeleteDatabase");
            scope.Start();
            try
            {
                return RestClient.DeleteDatabase(databaseName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an artifact from database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get an artifact from database. </remarks>
        public virtual async Task<Response<MDEntity>> GetArtifactFromDBAsync(string databaseName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.GetArtifactFromDB");
            scope.Start();
            try
            {
                return await RestClient.GetArtifactFromDBAsync(databaseName, artifactType, artifactName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an artifact from database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get an artifact from database. </remarks>
        public virtual Response<MDEntity> GetArtifactFromDB(string databaseName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.GetArtifactFromDB");
            scope.Start();
            try
            {
                return RestClient.GetArtifactFromDB(databaseName, artifactType, artifactName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put an artifact in a Database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="createArtifactsPayload"> Payload containing artifact entity to be created/modified. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Put an artifact in a Database. </remarks>
        public virtual async Task<Response<SyMsapiddlResponse>> PutArtifactInDBAsync(string databaseName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.PutArtifactInDB");
            scope.Start();
            try
            {
                return await RestClient.PutArtifactInDBAsync(databaseName, artifactType, artifactName, createArtifactsPayload, continuationToken, maxPageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Put an artifact in a Database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="createArtifactsPayload"> Payload containing artifact entity to be created/modified. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Put an artifact in a Database. </remarks>
        public virtual Response<SyMsapiddlResponse> PutArtifactInDB(string databaseName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.PutArtifactInDB");
            scope.Start();
            try
            {
                return RestClient.PutArtifactInDB(databaseName, artifactType, artifactName, createArtifactsPayload, continuationToken, maxPageSize, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an artifact in a Database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete an artifact in a Database. </remarks>
        public virtual async Task<Response> DeleteArtifactForDBAsync(string databaseName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.DeleteArtifactForDB");
            scope.Start();
            try
            {
                return await RestClient.DeleteArtifactForDBAsync(databaseName, artifactType, artifactName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an artifact in a Database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete an artifact in a Database. </remarks>
        public virtual Response DeleteArtifactForDB(string databaseName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.DeleteArtifactForDB");
            scope.Start();
            try
            {
                return RestClient.DeleteArtifactForDB(databaseName, artifactType, artifactName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an artifact from schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get an artifact from schema. </remarks>
        public virtual async Task<Response<MDEntity>> GetArtifactFromSchemaAsync(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.GetArtifactFromSchema");
            scope.Start();
            try
            {
                return await RestClient.GetArtifactFromSchemaAsync(databaseName, schemaName, artifactType, artifactName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get an artifact from schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get an artifact from schema. </remarks>
        public virtual Response<MDEntity> GetArtifactFromSchema(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.GetArtifactFromSchema");
            scope.Start();
            try
            {
                return RestClient.GetArtifactFromSchema(databaseName, schemaName, artifactType, artifactName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or Update an artifact in a schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="createArtifactsPayload"> Payload containing artifact object to be create/updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create or Update an artifact in a schema. </remarks>
        public virtual async Task<Response<SyMsapiddlResponse>> PutArtifactInSchemaAsync(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.PutArtifactInSchema");
            scope.Start();
            try
            {
                return await RestClient.PutArtifactInSchemaAsync(databaseName, schemaName, artifactType, artifactName, createArtifactsPayload, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or Update an artifact in a schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="createArtifactsPayload"> Payload containing artifact object to be create/updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Create or Update an artifact in a schema. </remarks>
        public virtual Response<SyMsapiddlResponse> PutArtifactInSchema(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.PutArtifactInSchema");
            scope.Start();
            try
            {
                return RestClient.PutArtifactInSchema(databaseName, schemaName, artifactType, artifactName, createArtifactsPayload, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an artifact from Schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete an artifact from Schema. </remarks>
        public virtual async Task<Response> DeleteArtifactFromSchemaAsync(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.DeleteArtifactFromSchema");
            scope.Start();
            try
            {
                return await RestClient.DeleteArtifactFromSchemaAsync(databaseName, schemaName, artifactType, artifactName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete an artifact from Schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Delete an artifact from Schema. </remarks>
        public virtual Response DeleteArtifactFromSchema(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.DeleteArtifactFromSchema");
            scope.Start();
            try
            {
                return RestClient.DeleteArtifactFromSchema(databaseName, schemaName, artifactType, artifactName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of validation by operation Id. </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the status of validation by operation Id. </remarks>
        public virtual async Task<Response<QueryArtifactsResponse>> GetSyMSOperationStatusAsync(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.GetSyMSOperationStatus");
            scope.Start();
            try
            {
                return await RestClient.GetSyMSOperationStatusAsync(operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the status of validation by operation Id. </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get the status of validation by operation Id. </remarks>
        public virtual Response<QueryArtifactsResponse> GetSyMSOperationStatus(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.GetSyMSOperationStatus");
            scope.Start();
            try
            {
                return RestClient.GetSyMSOperationStatus(operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Batch execution of DDL Payload. </summary>
        /// <param name="validationType"> Validation Type - Currently only IDWValidation is supported. </param>
        /// <param name="createArtifactsPayload"> DDLBatch containing artifacts to be Created or Deleted or Modified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validationType"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Batch execution of DDL Payload. </remarks>
        public virtual async Task<SynapseMetadataExecuteChangeWithValidationOperation> StartExecuteChangeWithValidationAsync(string validationType, DDLBatch createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (validationType == null)
            {
                throw new ArgumentNullException(nameof(validationType));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.StartExecuteChangeWithValidation");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ExecuteChangeWithValidationAsync(validationType, createArtifactsPayload, cancellationToken).ConfigureAwait(false);
                return new SynapseMetadataExecuteChangeWithValidationOperation(_clientDiagnostics, _pipeline, RestClient.CreateExecuteChangeWithValidationRequest(validationType, createArtifactsPayload).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Batch execution of DDL Payload. </summary>
        /// <param name="validationType"> Validation Type - Currently only IDWValidation is supported. </param>
        /// <param name="createArtifactsPayload"> DDLBatch containing artifacts to be Created or Deleted or Modified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validationType"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Batch execution of DDL Payload. </remarks>
        public virtual SynapseMetadataExecuteChangeWithValidationOperation StartExecuteChangeWithValidation(string validationType, DDLBatch createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (validationType == null)
            {
                throw new ArgumentNullException(nameof(validationType));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var scope = _clientDiagnostics.CreateScope("SynapseMetadataClient.StartExecuteChangeWithValidation");
            scope.Start();
            try
            {
                var originalResponse = RestClient.ExecuteChangeWithValidation(validationType, createArtifactsPayload, cancellationToken);
                return new SynapseMetadataExecuteChangeWithValidationOperation(_clientDiagnostics, _pipeline, RestClient.CreateExecuteChangeWithValidationRequest(validationType, createArtifactsPayload).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
