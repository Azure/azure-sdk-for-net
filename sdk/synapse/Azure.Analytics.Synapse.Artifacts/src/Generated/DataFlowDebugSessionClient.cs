// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Synapse.Artifacts
{
    /// <summary> The DataFlowDebugSession service client. </summary>
    public partial class DataFlowDebugSessionClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }
        private readonly string[] AuthorizationScopes = { "https://dev.azuresynapse.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private Uri endpoint;
        private readonly string apiVersion;
        private readonly ClientDiagnostics _clientDiagnostics;

        /// <summary> Initializes a new instance of DataFlowDebugSessionClient for mocking. </summary>
        protected DataFlowDebugSessionClient()
        {
        }

        /// <summary> Initializes a new instance of DataFlowDebugSessionClient. </summary>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DataFlowDebugSessionClient(Uri endpoint, TokenCredential credential, ArtifactsClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new ArtifactsClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            this.endpoint = endpoint;
            apiVersion = options.Version;
        }

        /// <summary> Creates a data flow debug session. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>dataFlowName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the data flow. </term>
        ///   </item>
        ///   <item>
        ///     <term>existingClusterId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of existing Databricks cluster. </term>
        ///   </item>
        ///   <item>
        ///     <term>clusterTimeout</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Timeout setting for Databricks cluster. </term>
        ///   </item>
        ///   <item>
        ///     <term>newClusterName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of new Databricks cluster. </term>
        ///   </item>
        ///   <item>
        ///     <term>newClusterNodeType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of new Databricks cluster. </term>
        ///   </item>
        ///   <item>
        ///     <term>dataBricksLinkedService</term>
        ///     <term>LinkedServiceResource</term>
        ///     <term></term>
        ///     <term> Data bricks linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedServiceResource</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>etag</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Resource Etag. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the resource. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>LinkedService</term>
        ///     <term>Yes</term>
        ///     <term> Properties of linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedService</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of linked service. </term>
        ///   </item>
        ///   <item>
        ///     <term>connectVia</term>
        ///     <term>IntegrationRuntimeReference</term>
        ///     <term></term>
        ///     <term> The integration runtime reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Linked service description. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, ParameterSpecification&gt;</term>
        ///     <term></term>
        ///     <term> Parameters for linked service. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>IntegrationRuntimeReference</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;IntegrationRuntimeReference&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Type of integration runtime. </term>
        ///   </item>
        ///   <item>
        ///     <term>referenceName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Reference integration runtime name. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Arguments for integration runtime. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ParameterSpecification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;Object&quot; | &quot;String&quot; | &quot;Int&quot; | &quot;Float&quot; | &quot;Bool&quot; | &quot;Array&quot; | &quot;SecureString&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter type. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Default value of parameter. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateDataFlowDebugSessionAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateDataFlowDebugSessionRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.CreateDataFlowDebugSession");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a data flow debug session. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>dataFlowName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the data flow. </term>
        ///   </item>
        ///   <item>
        ///     <term>existingClusterId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of existing Databricks cluster. </term>
        ///   </item>
        ///   <item>
        ///     <term>clusterTimeout</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Timeout setting for Databricks cluster. </term>
        ///   </item>
        ///   <item>
        ///     <term>newClusterName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of new Databricks cluster. </term>
        ///   </item>
        ///   <item>
        ///     <term>newClusterNodeType</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of new Databricks cluster. </term>
        ///   </item>
        ///   <item>
        ///     <term>dataBricksLinkedService</term>
        ///     <term>LinkedServiceResource</term>
        ///     <term></term>
        ///     <term> Data bricks linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedServiceResource</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>etag</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Resource Etag. </term>
        ///   </item>
        ///   <item>
        ///     <term>id</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </term>
        ///   </item>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the resource. </term>
        ///   </item>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>LinkedService</term>
        ///     <term>Yes</term>
        ///     <term> Properties of linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedService</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of linked service. </term>
        ///   </item>
        ///   <item>
        ///     <term>connectVia</term>
        ///     <term>IntegrationRuntimeReference</term>
        ///     <term></term>
        ///     <term> The integration runtime reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Linked service description. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, ParameterSpecification&gt;</term>
        ///     <term></term>
        ///     <term> Parameters for linked service. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>IntegrationRuntimeReference</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;IntegrationRuntimeReference&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Type of integration runtime. </term>
        ///   </item>
        ///   <item>
        ///     <term>referenceName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Reference integration runtime name. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Arguments for integration runtime. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ParameterSpecification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;Object&quot; | &quot;String&quot; | &quot;Int&quot; | &quot;Float&quot; | &quot;Bool&quot; | &quot;Array&quot; | &quot;SecureString&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter type. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Default value of parameter. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response CreateDataFlowDebugSession(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateCreateDataFlowDebugSessionRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.CreateDataFlowDebugSession");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="CreateDataFlowDebugSession"/> and <see cref="CreateDataFlowDebugSessionAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateCreateDataFlowDebugSessionRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/createDataFlowDebugSession", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Query all active data flow debug sessions. </summary>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> QueryDataFlowDebugSessionsByWorkspaceAsync(RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateQueryDataFlowDebugSessionsByWorkspaceRequest(requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.QueryDataFlowDebugSessionsByWorkspace");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Query all active data flow debug sessions. </summary>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response QueryDataFlowDebugSessionsByWorkspace(RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateQueryDataFlowDebugSessionsByWorkspaceRequest(requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.QueryDataFlowDebugSessionsByWorkspace");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="QueryDataFlowDebugSessionsByWorkspace"/> and <see cref="QueryDataFlowDebugSessionsByWorkspaceAsync"/> operations. </summary>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateQueryDataFlowDebugSessionsByWorkspaceRequest(RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/queryDataFlowDebugSessions", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Add a data flow into debug session. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sessionId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of data flow debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>dataFlow</term>
        ///     <term>DataFlowDebugResource</term>
        ///     <term></term>
        ///     <term> Data flow instance. </term>
        ///   </item>
        ///   <item>
        ///     <term>datasets</term>
        ///     <term>DatasetDebugResource[]</term>
        ///     <term></term>
        ///     <term> List of datasets. </term>
        ///   </item>
        ///   <item>
        ///     <term>linkedServices</term>
        ///     <term>LinkedServiceDebugResource[]</term>
        ///     <term></term>
        ///     <term> List of linked services. </term>
        ///   </item>
        ///   <item>
        ///     <term>staging</term>
        ///     <term>DataFlowStagingInfo</term>
        ///     <term></term>
        ///     <term> Staging info for debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>debugSettings</term>
        ///     <term>DataFlowDebugPackageDebugSettings</term>
        ///     <term></term>
        ///     <term> Data flow debug settings. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowDebugResource</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The resource name. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>DataFlow</term>
        ///     <term>Yes</term>
        ///     <term> Data flow properties. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowStagingInfo</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>linkedService</term>
        ///     <term>LinkedServiceReference</term>
        ///     <term></term>
        ///     <term> Staging linked service reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>folderPath</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Folder path for staging blob. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowDebugPackageDebugSettings</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sourceSettings</term>
        ///     <term>DataFlowSourceSetting[]</term>
        ///     <term></term>
        ///     <term> Source setting for data flow debug. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Data flow parameters. </term>
        ///   </item>
        ///   <item>
        ///     <term>datasetParameters</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Parameters for dataset. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlow</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of data flow. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the data flow. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the data flow. </term>
        ///   </item>
        ///   <item>
        ///     <term>folder</term>
        ///     <term>DataFlowFolder</term>
        ///     <term></term>
        ///     <term> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DatasetDebugResource</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The resource name. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>Dataset</term>
        ///     <term>Yes</term>
        ///     <term> Dataset properties. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedServiceDebugResource</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The resource name. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>LinkedService</term>
        ///     <term>Yes</term>
        ///     <term> Properties of linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedServiceReference</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;LinkedServiceReference&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Linked service reference type. </term>
        ///   </item>
        ///   <item>
        ///     <term>referenceName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Reference LinkedService name. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Arguments for LinkedService. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowFolder</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the folder that this data flow is in. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>Dataset</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of dataset. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Dataset description. </term>
        ///   </item>
        ///   <item>
        ///     <term>structure</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </term>
        ///   </item>
        ///   <item>
        ///     <term>schema</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </term>
        ///   </item>
        ///   <item>
        ///     <term>linkedServiceName</term>
        ///     <term>LinkedServiceReference</term>
        ///     <term>Yes</term>
        ///     <term> Linked service reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, ParameterSpecification&gt;</term>
        ///     <term></term>
        ///     <term> Parameters for dataset. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the Dataset. </term>
        ///   </item>
        ///   <item>
        ///     <term>folder</term>
        ///     <term>DatasetFolder</term>
        ///     <term></term>
        ///     <term> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedService</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of linked service. </term>
        ///   </item>
        ///   <item>
        ///     <term>connectVia</term>
        ///     <term>IntegrationRuntimeReference</term>
        ///     <term></term>
        ///     <term> The integration runtime reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Linked service description. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, ParameterSpecification&gt;</term>
        ///     <term></term>
        ///     <term> Parameters for linked service. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowSourceSetting</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sourceName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The data flow source name. </term>
        ///   </item>
        ///   <item>
        ///     <term>rowLimit</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Defines the row limit of data flow source in debug. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DatasetFolder</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the folder that this Dataset is in. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>IntegrationRuntimeReference</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;IntegrationRuntimeReference&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Type of integration runtime. </term>
        ///   </item>
        ///   <item>
        ///     <term>referenceName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Reference integration runtime name. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Arguments for integration runtime. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ParameterSpecification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;Object&quot; | &quot;String&quot; | &quot;Int&quot; | &quot;Float&quot; | &quot;Bool&quot; | &quot;Array&quot; | &quot;SecureString&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter type. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Default value of parameter. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> AddDataFlowAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateAddDataFlowRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.AddDataFlow");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Add a data flow into debug session. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sessionId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of data flow debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>dataFlow</term>
        ///     <term>DataFlowDebugResource</term>
        ///     <term></term>
        ///     <term> Data flow instance. </term>
        ///   </item>
        ///   <item>
        ///     <term>datasets</term>
        ///     <term>DatasetDebugResource[]</term>
        ///     <term></term>
        ///     <term> List of datasets. </term>
        ///   </item>
        ///   <item>
        ///     <term>linkedServices</term>
        ///     <term>LinkedServiceDebugResource[]</term>
        ///     <term></term>
        ///     <term> List of linked services. </term>
        ///   </item>
        ///   <item>
        ///     <term>staging</term>
        ///     <term>DataFlowStagingInfo</term>
        ///     <term></term>
        ///     <term> Staging info for debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>debugSettings</term>
        ///     <term>DataFlowDebugPackageDebugSettings</term>
        ///     <term></term>
        ///     <term> Data flow debug settings. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowDebugResource</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The resource name. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>DataFlow</term>
        ///     <term>Yes</term>
        ///     <term> Data flow properties. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowStagingInfo</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>linkedService</term>
        ///     <term>LinkedServiceReference</term>
        ///     <term></term>
        ///     <term> Staging linked service reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>folderPath</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Folder path for staging blob. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowDebugPackageDebugSettings</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sourceSettings</term>
        ///     <term>DataFlowSourceSetting[]</term>
        ///     <term></term>
        ///     <term> Source setting for data flow debug. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Data flow parameters. </term>
        ///   </item>
        ///   <item>
        ///     <term>datasetParameters</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Parameters for dataset. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlow</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of data flow. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The description of the data flow. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the data flow. </term>
        ///   </item>
        ///   <item>
        ///     <term>folder</term>
        ///     <term>DataFlowFolder</term>
        ///     <term></term>
        ///     <term> The folder that this data flow is in. If not specified, Data flow will appear at the root level. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DatasetDebugResource</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The resource name. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>Dataset</term>
        ///     <term>Yes</term>
        ///     <term> Dataset properties. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedServiceDebugResource</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The resource name. </term>
        ///   </item>
        ///   <item>
        ///     <term>properties</term>
        ///     <term>LinkedService</term>
        ///     <term>Yes</term>
        ///     <term> Properties of linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedServiceReference</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;LinkedServiceReference&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Linked service reference type. </term>
        ///   </item>
        ///   <item>
        ///     <term>referenceName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Reference LinkedService name. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Arguments for LinkedService. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowFolder</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the folder that this data flow is in. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>Dataset</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of dataset. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Dataset description. </term>
        ///   </item>
        ///   <item>
        ///     <term>structure</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement. </term>
        ///   </item>
        ///   <item>
        ///     <term>schema</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement. </term>
        ///   </item>
        ///   <item>
        ///     <term>linkedServiceName</term>
        ///     <term>LinkedServiceReference</term>
        ///     <term>Yes</term>
        ///     <term> Linked service reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, ParameterSpecification&gt;</term>
        ///     <term></term>
        ///     <term> Parameters for dataset. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the Dataset. </term>
        ///   </item>
        ///   <item>
        ///     <term>folder</term>
        ///     <term>DatasetFolder</term>
        ///     <term></term>
        ///     <term> The folder that this Dataset is in. If not specified, Dataset will appear at the root level. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>LinkedService</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Type of linked service. </term>
        ///   </item>
        ///   <item>
        ///     <term>connectVia</term>
        ///     <term>IntegrationRuntimeReference</term>
        ///     <term></term>
        ///     <term> The integration runtime reference. </term>
        ///   </item>
        ///   <item>
        ///     <term>description</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> Linked service description. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, ParameterSpecification&gt;</term>
        ///     <term></term>
        ///     <term> Parameters for linked service. </term>
        ///   </item>
        ///   <item>
        ///     <term>annotations</term>
        ///     <term>AnyObject[]</term>
        ///     <term></term>
        ///     <term> List of tags that can be used for describing the linked service. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DataFlowSourceSetting</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sourceName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The data flow source name. </term>
        ///   </item>
        ///   <item>
        ///     <term>rowLimit</term>
        ///     <term>number</term>
        ///     <term></term>
        ///     <term> Defines the row limit of data flow source in debug. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>DatasetFolder</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>name</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The name of the folder that this Dataset is in. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>IntegrationRuntimeReference</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;IntegrationRuntimeReference&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Type of integration runtime. </term>
        ///   </item>
        ///   <item>
        ///     <term>referenceName</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> Reference integration runtime name. </term>
        ///   </item>
        ///   <item>
        ///     <term>parameters</term>
        ///     <term>Dictionary&lt;string, AnyObject&gt;</term>
        ///     <term></term>
        ///     <term> Arguments for integration runtime. </term>
        ///   </item>
        /// </list>
        /// Schema for <c>ParameterSpecification</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>type</term>
        ///     <term>&quot;Object&quot; | &quot;String&quot; | &quot;Int&quot; | &quot;Float&quot; | &quot;Bool&quot; | &quot;Array&quot; | &quot;SecureString&quot;</term>
        ///     <term>Yes</term>
        ///     <term> Parameter type. </term>
        ///   </item>
        ///   <item>
        ///     <term>defaultValue</term>
        ///     <term>AnyObject</term>
        ///     <term></term>
        ///     <term> Default value of parameter. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response AddDataFlow(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateAddDataFlowRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.AddDataFlow");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="AddDataFlow"/> and <see cref="AddDataFlowAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateAddDataFlowRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/addDataFlowToDebugSession", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Deletes a data flow debug session. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sessionId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of data flow debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>dataFlowName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The data flow which contains the debug session. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteDataFlowDebugSessionAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteDataFlowDebugSessionRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.DeleteDataFlowDebugSession");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a data flow debug session. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sessionId</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The ID of data flow debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>dataFlowName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The data flow which contains the debug session. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response DeleteDataFlowDebugSession(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateDeleteDataFlowDebugSessionRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.DeleteDataFlowDebugSession");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="DeleteDataFlowDebugSession"/> and <see cref="DeleteDataFlowDebugSessionAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateDeleteDataFlowDebugSessionRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/deleteDataFlowDebugSession", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }

        /// <summary> Execute a data flow debug command. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sessionId</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> The ID of data flow debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>dataFlowName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The data flow which contains the debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>commandName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The command name. </term>
        ///   </item>
        ///   <item>
        ///     <term>commandPayload</term>
        ///     <term>AnyObject</term>
        ///     <term>Yes</term>
        ///     <term> The command payload object. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual async Task<Response> ExecuteCommandAsync(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateExecuteCommandRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.ExecuteCommand");
            scope.Start();
            try
            {
                await Pipeline.SendAsync(message, requestOptions.CancellationToken).ConfigureAwait(false);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Execute a data flow debug command. </summary>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <list type="table">
        ///   <listeader>
        ///     <term>Name</term>
        ///     <term>Type</term>
        ///     <term>Required</term>
        ///     <term>Description</term>
        ///   </listeader>
        ///   <item>
        ///     <term>sessionId</term>
        ///     <term>string</term>
        ///     <term>Yes</term>
        ///     <term> The ID of data flow debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>dataFlowName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The data flow which contains the debug session. </term>
        ///   </item>
        ///   <item>
        ///     <term>commandName</term>
        ///     <term>string</term>
        ///     <term></term>
        ///     <term> The command name. </term>
        ///   </item>
        ///   <item>
        ///     <term>commandPayload</term>
        ///     <term>AnyObject</term>
        ///     <term>Yes</term>
        ///     <term> The command payload object. </term>
        ///   </item>
        /// </list>
        /// </remarks>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
#pragma warning disable AZC0002
        public virtual Response ExecuteCommand(RequestContent requestBody, RequestOptions requestOptions = null)
#pragma warning restore AZC0002
        {
            requestOptions ??= new RequestOptions();
            HttpMessage message = CreateExecuteCommandRequest(requestBody, requestOptions);
            if (requestOptions.PerCallPolicy != null)
            {
                message.SetProperty("RequestOptionsPerCallPolicyCallback", requestOptions.PerCallPolicy);
            }
            using var scope = _clientDiagnostics.CreateScope("DataFlowDebugSessionClient.ExecuteCommand");
            scope.Start();
            try
            {
                Pipeline.Send(message, requestOptions.CancellationToken);
                if (requestOptions.StatusOption == ResponseStatusOption.Default)
                {
                    switch (message.Response.Status)
                    {
                        case 200:
                        case 202:
                            return message.Response;
                        default:
                            throw _clientDiagnostics.CreateRequestFailedException(message.Response);
                    }
                }
                else
                {
                    return message.Response;
                }
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Request for <see cref="ExecuteCommand"/> and <see cref="ExecuteCommandAsync"/> operations. </summary>
        /// <param name="requestBody"> The request body. </param>
        /// <param name="requestOptions"> The request options. </param>
        private HttpMessage CreateExecuteCommandRequest(RequestContent requestBody, RequestOptions requestOptions = null)
        {
            var message = Pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/executeDataFlowDebugCommand", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = requestBody;
            return message;
        }
    }
}
