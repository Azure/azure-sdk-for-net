// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Synapse.Artifacts.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Synapse.Artifacts
{
    internal partial class SynapseMetadataRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of SynapseMetadataRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/> or <paramref name="endpoint"/> is null. </exception>
        public SynapseMetadataRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
        }

        internal HttpMessage CreateExecuteChangeRequest(DDLBatch createArtifactsPayload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/ExecuteChange", false);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(createArtifactsPayload);
            request.Content = content;
            return message;
        }

        /// <summary> Batch execution of DDL Payload. </summary>
        /// <param name="createArtifactsPayload"> DDLBatch payload containing artifact drafts to be created or deleted or modified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Batch execution of DDL Payload. </remarks>
        public async Task<Response<SyMsapiddlResponses>> ExecuteChangeAsync(DDLBatch createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreateExecuteChangeRequest(createArtifactsPayload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SyMsapiddlResponses value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SyMsapiddlResponses.DeserializeSyMsapiddlResponses(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Batch execution of DDL Payload. </summary>
        /// <param name="createArtifactsPayload"> DDLBatch payload containing artifact drafts to be created or deleted or modified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Batch execution of DDL Payload. </remarks>
        public Response<SyMsapiddlResponses> ExecuteChange(DDLBatch createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreateExecuteChangeRequest(createArtifactsPayload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SyMsapiddlResponses value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SyMsapiddlResponses.DeserializeSyMsapiddlResponses(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExecuteChangeWithValidationRequest(string validationType, DDLBatch createArtifactsPayload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/ExecuteChangeWithValidation", false);
            uri.AppendQuery("validationType", validationType, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(createArtifactsPayload);
            request.Content = content;
            return message;
        }

        /// <summary> Batch execution of DDL Payload. </summary>
        /// <param name="validationType"> Validation Type - Currently only IDWValidation is supported. </param>
        /// <param name="createArtifactsPayload"> DDLBatch containing artifacts to be Created or Deleted or Modified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validationType"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Batch execution of DDL Payload. </remarks>
        public async Task<Response> ExecuteChangeWithValidationAsync(string validationType, DDLBatch createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (validationType == null)
            {
                throw new ArgumentNullException(nameof(validationType));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreateExecuteChangeWithValidationRequest(validationType, createArtifactsPayload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Batch execution of DDL Payload. </summary>
        /// <param name="validationType"> Validation Type - Currently only IDWValidation is supported. </param>
        /// <param name="createArtifactsPayload"> DDLBatch containing artifacts to be Created or Deleted or Modified. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="validationType"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Batch execution of DDL Payload. </remarks>
        public Response ExecuteChangeWithValidation(string validationType, DDLBatch createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (validationType == null)
            {
                throw new ArgumentNullException(nameof(validationType));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreateExecuteChangeWithValidationRequest(validationType, createArtifactsPayload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListDatabasesRequest(string continuationToken, long? maxPageSize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases", false);
            uri.AppendQuery("api-version", "2021-04-01", true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get all databases in a workspace. </summary>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get all databases in a workspace. </remarks>
        public async Task<Response<QueryArtifactsResponse>> ListDatabasesAsync(string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListDatabasesRequest(continuationToken, maxPageSize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get all databases in a workspace. </summary>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Get all databases in a workspace. </remarks>
        public Response<QueryArtifactsResponse> ListDatabases(string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListDatabasesRequest(continuationToken, maxPageSize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListArtifactsRequest(string databaseName, SASEntityType artifactType, string continuationToken, long? maxPageSize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(artifactType.ToSerialString(), true);
            uri.AppendPath("s", false);
            uri.AppendQuery("api-version", "2021-04-01", true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List all Artifacts of a type in a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <remarks> List all Artifacts of a type in a database. </remarks>
        public async Task<Response<QueryArtifactsResponse>> ListArtifactsAsync(string databaseName, SASEntityType artifactType, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var message = CreateListArtifactsRequest(databaseName, artifactType, continuationToken, maxPageSize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List all Artifacts of a type in a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <remarks> List all Artifacts of a type in a database. </remarks>
        public Response<QueryArtifactsResponse> ListArtifacts(string databaseName, SASEntityType artifactType, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var message = CreateListArtifactsRequest(databaseName, artifactType, continuationToken, maxPageSize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListArtifactsInSchemaByTypeRequest(string databaseName, string schemaName, SASEntityType artifactType, string continuationToken, long? maxPageSize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(artifactType.ToSerialString(), true);
            uri.AppendPath("s", false);
            uri.AppendQuery("api-version", "2021-04-01", true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List all artifacts in schema by type. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <remarks> List all Artifacts in schema by type. </remarks>
        public async Task<Response<QueryArtifactsResponse>> ListArtifactsInSchemaByTypeAsync(string databaseName, string schemaName, SASEntityType artifactType, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }

            using var message = CreateListArtifactsInSchemaByTypeRequest(databaseName, schemaName, artifactType, continuationToken, maxPageSize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List all artifacts in schema by type. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="schemaName"/> is null. </exception>
        /// <remarks> List all Artifacts in schema by type. </remarks>
        public Response<QueryArtifactsResponse> ListArtifactsInSchemaByType(string databaseName, string schemaName, SASEntityType artifactType, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }

            using var message = CreateListArtifactsInSchemaByTypeRequest(databaseName, schemaName, artifactType, continuationToken, maxPageSize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListPartitionInfosForTableRequest(string databaseName, string tableName, string continuationToken, long? maxPageSize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/tables/", false);
            uri.AppendPath(tableName, true);
            uri.AppendPath("/partitionInfos", false);
            uri.AppendQuery("api-version", "2021-04-01", true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List all partition information for a table. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="tableName"> Table name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="tableName"/> is null. </exception>
        /// <remarks> List all partition information for a table. </remarks>
        public async Task<Response<QueryArtifactsResponse>> ListPartitionInfosForTableAsync(string databaseName, string tableName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var message = CreateListPartitionInfosForTableRequest(databaseName, tableName, continuationToken, maxPageSize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List all partition information for a table. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="tableName"> Table name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="tableName"/> is null. </exception>
        /// <remarks> List all partition information for a table. </remarks>
        public Response<QueryArtifactsResponse> ListPartitionInfosForTable(string databaseName, string tableName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var message = CreateListPartitionInfosForTableRequest(databaseName, tableName, continuationToken, maxPageSize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListPartitionInfosForViewRequest(string databaseName, string viewName, string continuationToken, long? maxPageSize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/views/", false);
            uri.AppendPath(viewName, true);
            uri.AppendPath("/partitionInfos", false);
            uri.AppendQuery("api-version", "2021-04-01", true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List all partition information for a view. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="viewName"> View name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="viewName"/> is null. </exception>
        /// <remarks> List all partition information for a view. </remarks>
        public async Task<Response<QueryArtifactsResponse>> ListPartitionInfosForViewAsync(string databaseName, string viewName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (viewName == null)
            {
                throw new ArgumentNullException(nameof(viewName));
            }

            using var message = CreateListPartitionInfosForViewRequest(databaseName, viewName, continuationToken, maxPageSize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List all partition information for a view. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="viewName"> View name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="viewName"/> is null. </exception>
        /// <remarks> List all partition information for a view. </remarks>
        public Response<QueryArtifactsResponse> ListPartitionInfosForView(string databaseName, string viewName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (viewName == null)
            {
                throw new ArgumentNullException(nameof(viewName));
            }

            using var message = CreateListPartitionInfosForViewRequest(databaseName, viewName, continuationToken, maxPageSize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListPartitionInfosForSchemaAndTableRequest(string databaseName, string schemaName, string tableName, string continuationToken, long? maxPageSize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/tables/", false);
            uri.AppendPath(tableName, true);
            uri.AppendPath("/partitionInfos", false);
            uri.AppendQuery("api-version", "2021-04-01", true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List all partition information for table in schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="tableName"> Table name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/> or <paramref name="tableName"/> is null. </exception>
        /// <remarks> List all partition information for a table in schema. </remarks>
        public async Task<Response<QueryArtifactsResponse>> ListPartitionInfosForSchemaAndTableAsync(string databaseName, string schemaName, string tableName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var message = CreateListPartitionInfosForSchemaAndTableRequest(databaseName, schemaName, tableName, continuationToken, maxPageSize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List all partition information for table in schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="tableName"> Table name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/> or <paramref name="tableName"/> is null. </exception>
        /// <remarks> List all partition information for a table in schema. </remarks>
        public Response<QueryArtifactsResponse> ListPartitionInfosForSchemaAndTable(string databaseName, string schemaName, string tableName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var message = CreateListPartitionInfosForSchemaAndTableRequest(databaseName, schemaName, tableName, continuationToken, maxPageSize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListPartitionInfosForSchemaAndViewRequest(string databaseName, string schemaName, string viewName, string continuationToken, long? maxPageSize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/views/", false);
            uri.AppendPath(viewName, true);
            uri.AppendPath("/partitionInfos", false);
            uri.AppendQuery("api-version", "2021-04-01", true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> List all partition information for a view in schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="viewName"> View name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/> or <paramref name="viewName"/> is null. </exception>
        /// <remarks> List all partition information for a view in schema. </remarks>
        public async Task<Response<QueryArtifactsResponse>> ListPartitionInfosForSchemaAndViewAsync(string databaseName, string schemaName, string viewName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (viewName == null)
            {
                throw new ArgumentNullException(nameof(viewName));
            }

            using var message = CreateListPartitionInfosForSchemaAndViewRequest(databaseName, schemaName, viewName, continuationToken, maxPageSize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> List all partition information for a view in schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="viewName"> View name. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/> or <paramref name="viewName"/> is null. </exception>
        /// <remarks> List all partition information for a view in schema. </remarks>
        public Response<QueryArtifactsResponse> ListPartitionInfosForSchemaAndView(string databaseName, string schemaName, string viewName, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (viewName == null)
            {
                throw new ArgumentNullException(nameof(viewName));
            }

            using var message = CreateListPartitionInfosForSchemaAndViewRequest(databaseName, schemaName, viewName, continuationToken, maxPageSize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatabaseRequest(string databaseName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get details about a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <remarks> Get details about a database. </remarks>
        public async Task<Response<DatabaseEntity>> GetDatabaseAsync(string databaseName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var message = CreateGetDatabaseRequest(databaseName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatabaseEntity value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatabaseEntity.DeserializeDatabaseEntity(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get details about a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <remarks> Get details about a database. </remarks>
        public Response<DatabaseEntity> GetDatabase(string databaseName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var message = CreateGetDatabaseRequest(databaseName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatabaseEntity value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatabaseEntity.DeserializeDatabaseEntity(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutDatabaseRequest(string databaseName, DatabaseEntity createArtifactsPayload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(createArtifactsPayload);
            request.Content = content;
            return message;
        }

        /// <summary> Put a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="createArtifactsPayload"> Database entity payload to create or update a Database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Put a database. </remarks>
        public async Task<Response<SyMsapiddlResponse>> PutDatabaseAsync(string databaseName, DatabaseEntity createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreatePutDatabaseRequest(databaseName, createArtifactsPayload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SyMsapiddlResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SyMsapiddlResponse.DeserializeSyMsapiddlResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Put a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="createArtifactsPayload"> Database entity payload to create or update a Database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Put a database. </remarks>
        public Response<SyMsapiddlResponse> PutDatabase(string databaseName, DatabaseEntity createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreatePutDatabaseRequest(databaseName, createArtifactsPayload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SyMsapiddlResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SyMsapiddlResponse.DeserializeSyMsapiddlResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDatabaseRequest(string databaseName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <remarks> Delete a database. </remarks>
        public async Task<Response> DeleteDatabaseAsync(string databaseName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var message = CreateDeleteDatabaseRequest(databaseName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete a database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <remarks> Delete a database. </remarks>
        public Response DeleteDatabase(string databaseName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var message = CreateDeleteDatabaseRequest(databaseName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetArtifactFromDBRequest(string databaseName, SASEntityType artifactType, string artifactName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(artifactType.ToSerialString(), true);
            uri.AppendPath("s/", false);
            uri.AppendPath(artifactName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get an artifact from database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="artifactName"/> is null. </exception>
        /// <remarks> Get an artifact from database. </remarks>
        public async Task<Response<MDEntity>> GetArtifactFromDBAsync(string databaseName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }

            using var message = CreateGetArtifactFromDBRequest(databaseName, artifactType, artifactName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MDEntity value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MDEntity.DeserializeMDEntity(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get an artifact from database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="artifactName"/> is null. </exception>
        /// <remarks> Get an artifact from database. </remarks>
        public Response<MDEntity> GetArtifactFromDB(string databaseName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }

            using var message = CreateGetArtifactFromDBRequest(databaseName, artifactType, artifactName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MDEntity value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MDEntity.DeserializeMDEntity(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutArtifactInDBRequest(string databaseName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, string continuationToken, long? maxPageSize)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(artifactType.ToSerialString(), true);
            uri.AppendPath("s/", false);
            uri.AppendPath(artifactName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("maxPageSize", maxPageSize.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(createArtifactsPayload);
            request.Content = content;
            return message;
        }

        /// <summary> Put an artifact in a Database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="createArtifactsPayload"> Payload containing artifact entity to be created/modified. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="artifactName"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Put an artifact in a Database. </remarks>
        public async Task<Response<SyMsapiddlResponse>> PutArtifactInDBAsync(string databaseName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreatePutArtifactInDBRequest(databaseName, artifactType, artifactName, createArtifactsPayload, continuationToken, maxPageSize);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SyMsapiddlResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SyMsapiddlResponse.DeserializeSyMsapiddlResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Put an artifact in a Database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="createArtifactsPayload"> Payload containing artifact entity to be created/modified. </param>
        /// <param name="continuationToken"> Continuation token to get next page. </param>
        /// <param name="maxPageSize"> Max page size. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="artifactName"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Put an artifact in a Database. </remarks>
        public Response<SyMsapiddlResponse> PutArtifactInDB(string databaseName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, string continuationToken = null, long? maxPageSize = null, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreatePutArtifactInDBRequest(databaseName, artifactType, artifactName, createArtifactsPayload, continuationToken, maxPageSize);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SyMsapiddlResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SyMsapiddlResponse.DeserializeSyMsapiddlResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteArtifactForDBRequest(string databaseName, SASEntityType artifactType, string artifactName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(artifactType.ToSerialString(), true);
            uri.AppendPath("s/", false);
            uri.AppendPath(artifactName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an artifact in a Database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="artifactName"/> is null. </exception>
        /// <remarks> Delete an artifact in a Database. </remarks>
        public async Task<Response> DeleteArtifactForDBAsync(string databaseName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }

            using var message = CreateDeleteArtifactForDBRequest(databaseName, artifactType, artifactName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete an artifact in a Database. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> or <paramref name="artifactName"/> is null. </exception>
        /// <remarks> Delete an artifact in a Database. </remarks>
        public Response DeleteArtifactForDB(string databaseName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }

            using var message = CreateDeleteArtifactForDBRequest(databaseName, artifactType, artifactName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetArtifactFromSchemaRequest(string databaseName, string schemaName, SASEntityType artifactType, string artifactName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(artifactType.ToSerialString(), true);
            uri.AppendPath("s/", false);
            uri.AppendPath(artifactName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get an artifact from schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/> or <paramref name="artifactName"/> is null. </exception>
        /// <remarks> Get an artifact from schema. </remarks>
        public async Task<Response<MDEntity>> GetArtifactFromSchemaAsync(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }

            using var message = CreateGetArtifactFromSchemaRequest(databaseName, schemaName, artifactType, artifactName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MDEntity value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MDEntity.DeserializeMDEntity(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get an artifact from schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/> or <paramref name="artifactName"/> is null. </exception>
        /// <remarks> Get an artifact from schema. </remarks>
        public Response<MDEntity> GetArtifactFromSchema(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }

            using var message = CreateGetArtifactFromSchemaRequest(databaseName, schemaName, artifactType, artifactName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MDEntity value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MDEntity.DeserializeMDEntity(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutArtifactInSchemaRequest(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(artifactType.ToSerialString(), true);
            uri.AppendPath("s/", false);
            uri.AppendPath(artifactName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(createArtifactsPayload);
            request.Content = content;
            return message;
        }

        /// <summary> Create or Update an artifact in a schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="createArtifactsPayload"> Payload containing artifact object to be create/updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/>, <paramref name="artifactName"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Create or Update an artifact in a schema. </remarks>
        public async Task<Response<SyMsapiddlResponse>> PutArtifactInSchemaAsync(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreatePutArtifactInSchemaRequest(databaseName, schemaName, artifactType, artifactName, createArtifactsPayload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SyMsapiddlResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SyMsapiddlResponse.DeserializeSyMsapiddlResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Create or Update an artifact in a schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="createArtifactsPayload"> Payload containing artifact object to be create/updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/>, <paramref name="artifactName"/> or <paramref name="createArtifactsPayload"/> is null. </exception>
        /// <remarks> Create or Update an artifact in a schema. </remarks>
        public Response<SyMsapiddlResponse> PutArtifactInSchema(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, MDEntity createArtifactsPayload, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }
            if (createArtifactsPayload == null)
            {
                throw new ArgumentNullException(nameof(createArtifactsPayload));
            }

            using var message = CreatePutArtifactInSchemaRequest(databaseName, schemaName, artifactType, artifactName, createArtifactsPayload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SyMsapiddlResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SyMsapiddlResponse.DeserializeSyMsapiddlResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteArtifactFromSchemaRequest(string databaseName, string schemaName, SASEntityType artifactType, string artifactName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/", false);
            uri.AppendPath(databaseName, true);
            uri.AppendPath("/schemas/", false);
            uri.AppendPath(schemaName, true);
            uri.AppendPath("/", false);
            uri.AppendPath(artifactType.ToSerialString(), true);
            uri.AppendPath("s/", false);
            uri.AppendPath(artifactName, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Delete an artifact from Schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/> or <paramref name="artifactName"/> is null. </exception>
        /// <remarks> Delete an artifact from Schema. </remarks>
        public async Task<Response> DeleteArtifactFromSchemaAsync(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }

            using var message = CreateDeleteArtifactFromSchemaRequest(databaseName, schemaName, artifactType, artifactName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Delete an artifact from Schema. </summary>
        /// <param name="databaseName"> Database name. </param>
        /// <param name="schemaName"> Schema name. </param>
        /// <param name="artifactType"> Artifact type. </param>
        /// <param name="artifactName"> Artifact name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/>, <paramref name="schemaName"/> or <paramref name="artifactName"/> is null. </exception>
        /// <remarks> Delete an artifact from Schema. </remarks>
        public Response DeleteArtifactFromSchema(string databaseName, string schemaName, SASEntityType artifactType, string artifactName, CancellationToken cancellationToken = default)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException(nameof(schemaName));
            }
            if (artifactName == null)
            {
                throw new ArgumentNullException(nameof(artifactName));
            }

            using var message = CreateDeleteArtifactFromSchemaRequest(databaseName, schemaName, artifactType, artifactName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSyMSOperationStatusRequest(string operationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/databases/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", "2021-04-01", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Get the status of validation by operation Id. </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <remarks> Get the status of validation by operation Id. </remarks>
        public async Task<Response<QueryArtifactsResponse>> GetSyMSOperationStatusAsync(string operationId, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }

            using var message = CreateGetSyMSOperationStatusRequest(operationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get the status of validation by operation Id. </summary>
        /// <param name="operationId"> Operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        /// <remarks> Get the status of validation by operation Id. </remarks>
        public Response<QueryArtifactsResponse> GetSyMSOperationStatus(string operationId, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }

            using var message = CreateGetSyMSOperationStatusRequest(operationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        QueryArtifactsResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = QueryArtifactsResponse.DeserializeQueryArtifactsResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
