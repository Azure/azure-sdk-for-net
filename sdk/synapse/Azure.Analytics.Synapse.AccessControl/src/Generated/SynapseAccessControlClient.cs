// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Analytics.Synapse.AccessControl.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Synapse.AccessControl
{
    /// <summary> The SynapseAccessControl service client. </summary>
    public partial class SynapseAccessControlClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal SynapseAccessControlRestClient RestClient { get; }

        /// <summary> Initializes a new instance of SynapseAccessControlClient for mocking. </summary>
        protected SynapseAccessControlClient()
        {
        }

        /// <summary> Initializes a new instance of SynapseAccessControlClient. </summary>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public SynapseAccessControlClient(Uri endpoint, TokenCredential credential, SynapseAdministrationClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new SynapseAdministrationClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://dev.azuresynapse.net/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new SynapseAccessControlRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Initializes a new instance of SynapseAccessControlClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal SynapseAccessControlClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2020-12-01")
        {
            RestClient = new SynapseAccessControlRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Check if the given principalId has access to perform list of actions at a given scope. </summary>
        /// <param name="subject"> Subject details. </param>
        /// <param name="actions"> List of actions. </param>
        /// <param name="scope"> Scope at which the check access is done. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CheckPrincipalAccessResponse>> CheckPrincipalAccessAsync(SubjectInfo subject, IEnumerable<RequiredAction> actions, string scope, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.CheckPrincipalAccess");
            scope0.Start();
            try
            {
                return await RestClient.CheckPrincipalAccessAsync(subject, actions, scope, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Check if the given principalId has access to perform list of actions at a given scope. </summary>
        /// <param name="subject"> Subject details. </param>
        /// <param name="actions"> List of actions. </param>
        /// <param name="scope"> Scope at which the check access is done. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CheckPrincipalAccessResponse> CheckPrincipalAccess(SubjectInfo subject, IEnumerable<RequiredAction> actions, string scope, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.CheckPrincipalAccess");
            scope0.Start();
            try
            {
                return RestClient.CheckPrincipalAccess(subject, actions, scope, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> List role assignments. </summary>
        /// <param name="roleId"> Synapse Built-In Role Id. </param>
        /// <param name="principalId"> Object ID of the AAD principal or security-group. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="continuationToken"> Continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RoleAssignmentDetailsList>> ListRoleAssignmentsAsync(string roleId = null, string principalId = null, string scope = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.ListRoleAssignments");
            scope0.Start();
            try
            {
                return await RestClient.ListRoleAssignmentsAsync(roleId, principalId, scope, continuationToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> List role assignments. </summary>
        /// <param name="roleId"> Synapse Built-In Role Id. </param>
        /// <param name="principalId"> Object ID of the AAD principal or security-group. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="continuationToken"> Continuation token. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RoleAssignmentDetailsList> ListRoleAssignments(string roleId = null, string principalId = null, string scope = null, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.ListRoleAssignments");
            scope0.Start();
            try
            {
                return RestClient.ListRoleAssignments(roleId, principalId, scope, continuationToken, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Create role assignment. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="roleId"> Role ID of the Synapse Built-In Role. </param>
        /// <param name="principalId"> Object ID of the AAD principal or security-group. </param>
        /// <param name="scope"> Scope at which the role assignment is created. </param>
        /// <param name="principalType"> Type of the principal Id: User, Group or ServicePrincipal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RoleAssignmentDetails>> CreateRoleAssignmentAsync(string roleAssignmentId, Guid roleId, Guid principalId, string scope, string principalType = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.CreateRoleAssignment");
            scope0.Start();
            try
            {
                return await RestClient.CreateRoleAssignmentAsync(roleAssignmentId, roleId, principalId, scope, principalType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Create role assignment. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="roleId"> Role ID of the Synapse Built-In Role. </param>
        /// <param name="principalId"> Object ID of the AAD principal or security-group. </param>
        /// <param name="scope"> Scope at which the role assignment is created. </param>
        /// <param name="principalType"> Type of the principal Id: User, Group or ServicePrincipal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RoleAssignmentDetails> CreateRoleAssignment(string roleAssignmentId, Guid roleId, Guid principalId, string scope, string principalType = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.CreateRoleAssignment");
            scope0.Start();
            try
            {
                return RestClient.CreateRoleAssignment(roleAssignmentId, roleId, principalId, scope, principalType, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Get role assignment by role assignment Id. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RoleAssignmentDetails>> GetRoleAssignmentByIdAsync(string roleAssignmentId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.GetRoleAssignmentById");
            scope0.Start();
            try
            {
                return await RestClient.GetRoleAssignmentByIdAsync(roleAssignmentId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Get role assignment by role assignment Id. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RoleAssignmentDetails> GetRoleAssignmentById(string roleAssignmentId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.GetRoleAssignmentById");
            scope0.Start();
            try
            {
                return RestClient.GetRoleAssignmentById(roleAssignmentId, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Delete role assignment by role assignment Id. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteRoleAssignmentByIdAsync(string roleAssignmentId, string scope = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.DeleteRoleAssignmentById");
            scope0.Start();
            try
            {
                return await RestClient.DeleteRoleAssignmentByIdAsync(roleAssignmentId, scope, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Delete role assignment by role assignment Id. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteRoleAssignmentById(string roleAssignmentId, string scope = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.DeleteRoleAssignmentById");
            scope0.Start();
            try
            {
                return RestClient.DeleteRoleAssignmentById(roleAssignmentId, scope, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> List role definitions. </summary>
        /// <param name="isBuiltIn"> Is a Synapse Built-In Role or not. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<Models.SynapseRoleDefinition>>> ListRoleDefinitionsAsync(bool? isBuiltIn = null, string scope = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.ListRoleDefinitions");
            scope0.Start();
            try
            {
                return await RestClient.ListRoleDefinitionsAsync(isBuiltIn, scope, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> List role definitions. </summary>
        /// <param name="isBuiltIn"> Is a Synapse Built-In Role or not. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<Models.SynapseRoleDefinition>> ListRoleDefinitions(bool? isBuiltIn = null, string scope = null, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.ListRoleDefinitions");
            scope0.Start();
            try
            {
                return RestClient.ListRoleDefinitions(isBuiltIn, scope, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Get role definition by role definition Id. </summary>
        /// <param name="roleDefinitionId"> Synapse Built-In Role Definition Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<Models.SynapseRoleDefinition>> GetRoleDefinitionByIdAsync(string roleDefinitionId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.GetRoleDefinitionById");
            scope0.Start();
            try
            {
                return await RestClient.GetRoleDefinitionByIdAsync(roleDefinitionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Get role definition by role definition Id. </summary>
        /// <param name="roleDefinitionId"> Synapse Built-In Role Definition Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Models.SynapseRoleDefinition> GetRoleDefinitionById(string roleDefinitionId, CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.GetRoleDefinitionById");
            scope0.Start();
            try
            {
                return RestClient.GetRoleDefinitionById(roleDefinitionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> List rbac scopes. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<string>>> ListScopesAsync(CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.ListScopes");
            scope0.Start();
            try
            {
                return await RestClient.ListScopesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> List rbac scopes. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<string>> ListScopes(CancellationToken cancellationToken = default)
        {
            using var scope0 = _clientDiagnostics.CreateScope("SynapseAccessControlClient.ListScopes");
            scope0.Start();
            try
            {
                return RestClient.ListScopes(cancellationToken);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }
    }
}
