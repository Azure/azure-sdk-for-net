// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Analytics.Synapse.AccessControl.Models;

namespace Azure.Analytics.Synapse.AccessControl
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AccessControlModelFactory
    {
        /// <summary> Initializes new instance of CheckPrincipalAccessResponse class. </summary>
        /// <param name="accessDecisions"> To check if the current user, group, or service principal has permission to read artifacts in the specified workspace. </param>
        /// <returns> A new <see cref="Models.CheckPrincipalAccessResponse"/> instance for mocking. </returns>
        public static CheckPrincipalAccessResponse CheckPrincipalAccessResponse(IReadOnlyList<CheckAccessDecision> accessDecisions = default)
        {
            accessDecisions ??= new List<CheckAccessDecision>();
            return new CheckPrincipalAccessResponse(accessDecisions);
        }

        /// <summary> Initializes new instance of CheckAccessDecision class. </summary>
        /// <param name="accessDecision"> Access Decision. </param>
        /// <param name="actionId"> Action Id. </param>
        /// <param name="roleAssignment"> Role Assignment response details. </param>
        /// <returns> A new <see cref="Models.CheckAccessDecision"/> instance for mocking. </returns>
        public static CheckAccessDecision CheckAccessDecision(string accessDecision = default, string actionId = default, RoleAssignmentDetails roleAssignment = default)
        {
            return new CheckAccessDecision(accessDecision, actionId, roleAssignment);
        }

        /// <summary> Initializes new instance of RoleAssignmentDetails class. </summary>
        /// <param name="id"> Role Assignment ID. </param>
        /// <param name="roleDefinitionId"> Role ID of the Synapse Built-In Role. </param>
        /// <param name="principalId"> Object ID of the AAD principal or security-group. </param>
        /// <param name="scope"> Scope at the role assignment is created. </param>
        /// <param name="principalType"> Type of the principal Id: User, Group or ServicePrincipal. </param>
        /// <returns> A new <see cref="Models.RoleAssignmentDetails"/> instance for mocking. </returns>
        public static RoleAssignmentDetails RoleAssignmentDetails(string id = default, Guid? roleDefinitionId = default, Guid? principalId = default, string scope = default, string principalType = default)
        {
            return new RoleAssignmentDetails(id, roleDefinitionId, principalId, scope, principalType);
        }

        /// <summary> Initializes new instance of SynapseRoleDefinition class. </summary>
        /// <param name="id"> Role Definition ID. </param>
        /// <param name="name"> Name of the Synapse role. </param>
        /// <param name="isBuiltIn"> Is a built-in role or not. </param>
        /// <param name="description"> Description for the Synapse role. </param>
        /// <param name="permissions"> Permissions for the Synapse role. </param>
        /// <param name="scopes"> Allowed scopes for the Synapse role. </param>
        /// <param name="availabilityStatus"> Availability of the Synapse role. </param>
        /// <returns> A new <see cref="Models.SynapseRoleDefinition"/> instance for mocking. </returns>
        public static SynapseRoleDefinition SynapseRoleDefinition(Guid? id = default, string name = default, bool? isBuiltIn = default, string description = default, IReadOnlyList<SynapseRbacPermission> permissions = default, IReadOnlyList<string> scopes = default, string availabilityStatus = default)
        {
            permissions ??= new List<SynapseRbacPermission>();
            scopes ??= new List<string>();
            return new SynapseRoleDefinition(id, name, isBuiltIn, description, permissions, scopes, availabilityStatus);
        }

        /// <summary> Initializes new instance of SynapseRbacPermission class. </summary>
        /// <param name="actions"> List of actions. </param>
        /// <param name="notActions"> List of Not actions. </param>
        /// <param name="dataActions"> List of data actions. </param>
        /// <param name="notDataActions"> List of Not data actions. </param>
        /// <returns> A new <see cref="Models.SynapseRbacPermission"/> instance for mocking. </returns>
        public static SynapseRbacPermission SynapseRbacPermission(IReadOnlyList<string> actions = default, IReadOnlyList<string> notActions = default, IReadOnlyList<string> dataActions = default, IReadOnlyList<string> notDataActions = default)
        {
            actions ??= new List<string>();
            notActions ??= new List<string>();
            dataActions ??= new List<string>();
            notDataActions ??= new List<string>();
            return new SynapseRbacPermission(actions, notActions, dataActions, notDataActions);
        }

        /// <summary> Initializes new instance of RoleAssignmentDetailsList class. </summary>
        /// <param name="count"> Number of role assignments. </param>
        /// <param name="value"> A list of role assignments. </param>
        /// <returns> A new <see cref="Models.RoleAssignmentDetailsList"/> instance for mocking. </returns>
        public static RoleAssignmentDetailsList RoleAssignmentDetailsList(int? count = default, IReadOnlyList<RoleAssignmentDetails> value = default)
        {
            value ??= new List<RoleAssignmentDetails>();
            return new RoleAssignmentDetailsList(count, value);
        }
    }
}
