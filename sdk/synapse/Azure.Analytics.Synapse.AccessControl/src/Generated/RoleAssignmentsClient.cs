// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Analytics.Synapse.AccessControl
{
    // Data plane generated client. The RoleAssignments service client.
    /// <summary> The RoleAssignments service client. </summary>
    public partial class RoleAssignmentsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://dev.azuresynapse.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of RoleAssignmentsClient for mocking. </summary>
        protected RoleAssignmentsClient()
        {
        }

        /// <summary> Initializes a new instance of RoleAssignmentsClient. </summary>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public RoleAssignmentsClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new AccessControlClientOptions())
        {
        }

        /// <summary> Initializes a new instance of RoleAssignmentsClient. </summary>
        /// <param name="endpoint"> The workspace development endpoint, for example https://myworkspace.dev.azuresynapse.net. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public RoleAssignmentsClient(Uri endpoint, TokenCredential credential, AccessControlClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AccessControlClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Check if the given principalId has access to perform list of actions at a given scope. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CheckPrincipalAccessAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     subject = new {
        ///         principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     },
        ///     actions = new[] {
        ///         new {
        ///             id = "<id>",
        ///             isDataAction = true,
        ///         }
        ///     },
        ///     scope = "<scope>",
        /// };
        /// 
        /// Response response = await client.CheckPrincipalAccessAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CheckPrincipalAccessAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     subject = new {
        ///         principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///         groupIds = new[] {
        ///             "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
        ///         },
        ///     },
        ///     actions = new[] {
        ///         new {
        ///             id = "<id>",
        ///             isDataAction = true,
        ///         }
        ///     },
        ///     scope = "<scope>",
        /// };
        /// 
        /// Response response = await client.CheckPrincipalAccessAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("accessDecision").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("actionId").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("roleDefinitionId").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("principalType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>CheckPrincipalAccessRequest</c>:
        /// <code>{
        ///   subject: {
        ///     principalId: Guid, # Required. Principal Id
        ///     groupIds: [Guid], # Optional. List of group Ids that the principalId is part of.
        ///   }, # Required. Subject details
        ///   actions: [
        ///     {
        ///       id: string, # Required. Action Id.
        ///       isDataAction: boolean, # Required. Is a data action or not.
        ///     }
        ///   ], # Required. List of actions.
        ///   scope: string, # Required. Scope at which the check access is done.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CheckPrincipalAccessResponse</c>:
        /// <code>{
        ///   accessDecisions: [
        ///     {
        ///       accessDecision: string, # Optional. Access Decision.
        ///       actionId: string, # Optional. Action Id.
        ///       roleAssignment: {
        ///         id: string, # Optional. Role Assignment ID
        ///         roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        ///         principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        ///         scope: string, # Optional. Scope at the role assignment is created
        ///         principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        ///       }, # Optional. Role Assignment response details
        ///     }
        ///   ], # Optional. To check if the current user, group, or service principal has permission to read artifacts in the specified workspace.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CheckPrincipalAccessAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("RoleAssignmentsClient.CheckPrincipalAccess");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckPrincipalAccessRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Check if the given principalId has access to perform list of actions at a given scope. </summary>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CheckPrincipalAccess with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     subject = new {
        ///         principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     },
        ///     actions = new[] {
        ///         new {
        ///             id = "<id>",
        ///             isDataAction = true,
        ///         }
        ///     },
        ///     scope = "<scope>",
        /// };
        /// 
        /// Response response = client.CheckPrincipalAccess(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CheckPrincipalAccess with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     subject = new {
        ///         principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///         groupIds = new[] {
        ///             "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
        ///         },
        ///     },
        ///     actions = new[] {
        ///         new {
        ///             id = "<id>",
        ///             isDataAction = true,
        ///         }
        ///     },
        ///     scope = "<scope>",
        /// };
        /// 
        /// Response response = client.CheckPrincipalAccess(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("accessDecision").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("actionId").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("roleDefinitionId").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("principalType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>CheckPrincipalAccessRequest</c>:
        /// <code>{
        ///   subject: {
        ///     principalId: Guid, # Required. Principal Id
        ///     groupIds: [Guid], # Optional. List of group Ids that the principalId is part of.
        ///   }, # Required. Subject details
        ///   actions: [
        ///     {
        ///       id: string, # Required. Action Id.
        ///       isDataAction: boolean, # Required. Is a data action or not.
        ///     }
        ///   ], # Required. List of actions.
        ///   scope: string, # Required. Scope at which the check access is done.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CheckPrincipalAccessResponse</c>:
        /// <code>{
        ///   accessDecisions: [
        ///     {
        ///       accessDecision: string, # Optional. Access Decision.
        ///       actionId: string, # Optional. Action Id.
        ///       roleAssignment: {
        ///         id: string, # Optional. Role Assignment ID
        ///         roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        ///         principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        ///         scope: string, # Optional. Scope at the role assignment is created
        ///         principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        ///       }, # Optional. Role Assignment response details
        ///     }
        ///   ], # Optional. To check if the current user, group, or service principal has permission to read artifacts in the specified workspace.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CheckPrincipalAccess(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("RoleAssignmentsClient.CheckPrincipalAccess");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCheckPrincipalAccessRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List role assignments. </summary>
        /// <param name="roleId"> Synapse Built-In Role Id. </param>
        /// <param name="principalId"> Object ID of the AAD principal or security-group. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="continuationToken"> Continuation token. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRoleAssignmentsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = await client.GetRoleAssignmentsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetRoleAssignmentsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = await client.GetRoleAssignmentsAsync("<roleId>", "<principalId>", "<scope>", "<continuationToken>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("roleDefinitionId").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("principalType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RoleAssignmentDetailsList</c>:
        /// <code>{
        ///   count: number, # Optional. Number of role assignments
        ///   value: [
        ///     {
        ///       id: string, # Optional. Role Assignment ID
        ///       roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        ///       principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        ///       scope: string, # Optional. Scope at the role assignment is created
        ///       principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        ///     }
        ///   ], # Optional. A list of role assignments
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRoleAssignmentsAsync(string roleId = null, string principalId = null, string scope = null, string continuationToken = null, RequestContext context = null)
        {
            using var scope0 = ClientDiagnostics.CreateScope("RoleAssignmentsClient.GetRoleAssignments");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateGetRoleAssignmentsRequest(roleId, principalId, scope, continuationToken, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> List role assignments. </summary>
        /// <param name="roleId"> Synapse Built-In Role Id. </param>
        /// <param name="principalId"> Object ID of the AAD principal or security-group. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="continuationToken"> Continuation token. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRoleAssignments and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = client.GetRoleAssignments();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call GetRoleAssignments with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = client.GetRoleAssignments("<roleId>", "<principalId>", "<scope>", "<continuationToken>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("count").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("roleDefinitionId").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("principalType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RoleAssignmentDetailsList</c>:
        /// <code>{
        ///   count: number, # Optional. Number of role assignments
        ///   value: [
        ///     {
        ///       id: string, # Optional. Role Assignment ID
        ///       roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        ///       principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        ///       scope: string, # Optional. Scope at the role assignment is created
        ///       principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        ///     }
        ///   ], # Optional. A list of role assignments
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRoleAssignments(string roleId = null, string principalId = null, string scope = null, string continuationToken = null, RequestContext context = null)
        {
            using var scope0 = ClientDiagnostics.CreateScope("RoleAssignmentsClient.GetRoleAssignments");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateGetRoleAssignmentsRequest(roleId, principalId, scope, continuationToken, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Create role assignment. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="roleAssignmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateRoleAssignmentAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     roleId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     scope = "<scope>",
        /// };
        /// 
        /// Response response = await client.CreateRoleAssignmentAsync("<roleAssignmentId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateRoleAssignmentAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     roleId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     scope = "<scope>",
        ///     principalType = "<principalType>",
        /// };
        /// 
        /// Response response = await client.CreateRoleAssignmentAsync("<roleAssignmentId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("roleDefinitionId").ToString());
        /// Console.WriteLine(result.GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("principalType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RoleAssignmentRequest</c>:
        /// <code>{
        ///   roleId: Guid, # Required. Role ID of the Synapse Built-In Role
        ///   principalId: Guid, # Required. Object ID of the AAD principal or security-group
        ///   scope: string, # Required. Scope at which the role assignment is created
        ///   principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RoleAssignmentDetails</c>:
        /// <code>{
        ///   id: string, # Optional. Role Assignment ID
        ///   roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        ///   principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        ///   scope: string, # Optional. Scope at the role assignment is created
        ///   principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateRoleAssignmentAsync(string roleAssignmentId, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(roleAssignmentId, nameof(roleAssignmentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("RoleAssignmentsClient.CreateRoleAssignment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRoleAssignmentRequest(roleAssignmentId, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create role assignment. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="roleAssignmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateRoleAssignment with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     roleId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     scope = "<scope>",
        /// };
        /// 
        /// Response response = client.CreateRoleAssignment("<roleAssignmentId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateRoleAssignment with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     roleId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        ///     scope = "<scope>",
        ///     principalType = "<principalType>",
        /// };
        /// 
        /// Response response = client.CreateRoleAssignment("<roleAssignmentId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("roleDefinitionId").ToString());
        /// Console.WriteLine(result.GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("principalType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>RoleAssignmentRequest</c>:
        /// <code>{
        ///   roleId: Guid, # Required. Role ID of the Synapse Built-In Role
        ///   principalId: Guid, # Required. Object ID of the AAD principal or security-group
        ///   scope: string, # Required. Scope at which the role assignment is created
        ///   principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RoleAssignmentDetails</c>:
        /// <code>{
        ///   id: string, # Optional. Role Assignment ID
        ///   roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        ///   principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        ///   scope: string, # Optional. Scope at the role assignment is created
        ///   principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateRoleAssignment(string roleAssignmentId, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(roleAssignmentId, nameof(roleAssignmentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("RoleAssignmentsClient.CreateRoleAssignment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRoleAssignmentRequest(roleAssignmentId, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get role assignment by role assignment Id. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="roleAssignmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRoleAssignmentByIdAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = await client.GetRoleAssignmentByIdAsync("<roleAssignmentId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("roleDefinitionId").ToString());
        /// Console.WriteLine(result.GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("principalType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RoleAssignmentDetails</c>:
        /// <code>{
        ///   id: string, # Optional. Role Assignment ID
        ///   roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        ///   principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        ///   scope: string, # Optional. Scope at the role assignment is created
        ///   principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetRoleAssignmentByIdAsync(string roleAssignmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(roleAssignmentId, nameof(roleAssignmentId));

            using var scope = ClientDiagnostics.CreateScope("RoleAssignmentsClient.GetRoleAssignmentById");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRoleAssignmentByIdRequest(roleAssignmentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get role assignment by role assignment Id. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="roleAssignmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetRoleAssignmentById with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = client.GetRoleAssignmentById("<roleAssignmentId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("roleDefinitionId").ToString());
        /// Console.WriteLine(result.GetProperty("principalId").ToString());
        /// Console.WriteLine(result.GetProperty("scope").ToString());
        /// Console.WriteLine(result.GetProperty("principalType").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>RoleAssignmentDetails</c>:
        /// <code>{
        ///   id: string, # Optional. Role Assignment ID
        ///   roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        ///   principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        ///   scope: string, # Optional. Scope at the role assignment is created
        ///   principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetRoleAssignmentById(string roleAssignmentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(roleAssignmentId, nameof(roleAssignmentId));

            using var scope = ClientDiagnostics.CreateScope("RoleAssignmentsClient.GetRoleAssignmentById");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRoleAssignmentByIdRequest(roleAssignmentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete role assignment by role assignment Id. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="roleAssignmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteRoleAssignmentByIdAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = await client.DeleteRoleAssignmentByIdAsync("<roleAssignmentId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DeleteRoleAssignmentByIdAsync with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = await client.DeleteRoleAssignmentByIdAsync("<roleAssignmentId>", "<scope>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteRoleAssignmentByIdAsync(string roleAssignmentId, string scope = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(roleAssignmentId, nameof(roleAssignmentId));

            using var scope0 = ClientDiagnostics.CreateScope("RoleAssignmentsClient.DeleteRoleAssignmentById");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateDeleteRoleAssignmentByIdRequest(roleAssignmentId, scope, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        /// <summary> Delete role assignment by role assignment Id. </summary>
        /// <param name="roleAssignmentId"> The ID of the role assignment. </param>
        /// <param name="scope"> Scope of the Synapse Built-in Role. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="roleAssignmentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="roleAssignmentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteRoleAssignmentById with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = client.DeleteRoleAssignmentById("<roleAssignmentId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call DeleteRoleAssignmentById with all parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new RoleAssignmentsClient(endpoint, credential);
        /// 
        /// Response response = client.DeleteRoleAssignmentById("<roleAssignmentId>", "<scope>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteRoleAssignmentById(string roleAssignmentId, string scope = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(roleAssignmentId, nameof(roleAssignmentId));

            using var scope0 = ClientDiagnostics.CreateScope("RoleAssignmentsClient.DeleteRoleAssignmentById");
            scope0.Start();
            try
            {
                using HttpMessage message = CreateDeleteRoleAssignmentByIdRequest(roleAssignmentId, scope, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope0.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCheckPrincipalAccessRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/checkAccessSynapseRbac", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRoleAssignmentsRequest(string roleId, string principalId, string scope, string continuationToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/roleAssignments", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (roleId != null)
            {
                uri.AppendQuery("roleId", roleId, true);
            }
            if (principalId != null)
            {
                uri.AppendQuery("principalId", principalId, true);
            }
            if (scope != null)
            {
                uri.AppendQuery("scope", scope, true);
            }
            request.Uri = uri;
            if (continuationToken != null)
            {
                request.Headers.Add("x-ms-continuation", continuationToken);
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateCreateRoleAssignmentRequest(string roleAssignmentId, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/roleAssignments/", false);
            uri.AppendPath(roleAssignmentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRoleAssignmentByIdRequest(string roleAssignmentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/roleAssignments/", false);
            uri.AppendPath(roleAssignmentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateDeleteRoleAssignmentByIdRequest(string roleAssignmentId, string scope, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/roleAssignments/", false);
            uri.AppendPath(roleAssignmentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (scope != null)
            {
                uri.AppendQuery("scope", scope, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
    }
}
