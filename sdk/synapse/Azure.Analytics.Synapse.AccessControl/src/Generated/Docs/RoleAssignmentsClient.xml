<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="CheckPrincipalAccessAsync(RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call CheckPrincipalAccessAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

var data = new {
    subject = new {
        principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    },
    actions = new[] {
        new {
            id = "<id>",
            isDataAction = true,
        }
    },
    scope = "<scope>",
};

Response response = await client.CheckPrincipalAccessAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CheckPrincipalAccessAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

var data = new {
    subject = new {
        principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        groupIds = new[] {
            "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
        },
    },
    actions = new[] {
        new {
            id = "<id>",
            isDataAction = true,
        }
    },
    scope = "<scope>",
};

Response response = await client.CheckPrincipalAccessAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("accessDecision").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("actionId").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("principalType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>CheckPrincipalAccessRequest</c>:
<code>{
  subject: {
    principalId: Guid, # Required. Principal Id
    groupIds: [Guid], # Optional. List of group Ids that the principalId is part of.
  }, # Required. Subject details
  actions: [
    {
      id: string, # Required. Action Id.
      isDataAction: boolean, # Required. Is a data action or not.
    }
  ], # Required. List of actions.
  scope: string, # Required. Scope at which the check access is done.
}
</code>

Response Body:

Schema for <c>CheckPrincipalAccessResponse</c>:
<code>{
  accessDecisions: [
    {
      accessDecision: string, # Optional. Access Decision.
      actionId: string, # Optional. Action Id.
      roleAssignment: {
        id: string, # Optional. Role Assignment ID
        roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        scope: string, # Optional. Scope at the role assignment is created
        principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
      }, # Optional. Role Assignment response details
    }
  ], # Optional. To check if the current user, group, or service principal has permission to read artifacts in the specified workspace.
}
</code>

</remarks>
    </member>
    <member name="CheckPrincipalAccess(RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call CheckPrincipalAccess with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

var data = new {
    subject = new {
        principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    },
    actions = new[] {
        new {
            id = "<id>",
            isDataAction = true,
        }
    },
    scope = "<scope>",
};

Response response = client.CheckPrincipalAccess(RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CheckPrincipalAccess with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

var data = new {
    subject = new {
        principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        groupIds = new[] {
            "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a"
        },
    },
    actions = new[] {
        new {
            id = "<id>",
            isDataAction = true,
        }
    },
    scope = "<scope>",
};

Response response = client.CheckPrincipalAccess(RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("accessDecision").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("actionId").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("accessDecisions")[0].GetProperty("roleAssignment").GetProperty("principalType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>CheckPrincipalAccessRequest</c>:
<code>{
  subject: {
    principalId: Guid, # Required. Principal Id
    groupIds: [Guid], # Optional. List of group Ids that the principalId is part of.
  }, # Required. Subject details
  actions: [
    {
      id: string, # Required. Action Id.
      isDataAction: boolean, # Required. Is a data action or not.
    }
  ], # Required. List of actions.
  scope: string, # Required. Scope at which the check access is done.
}
</code>

Response Body:

Schema for <c>CheckPrincipalAccessResponse</c>:
<code>{
  accessDecisions: [
    {
      accessDecision: string, # Optional. Access Decision.
      actionId: string, # Optional. Action Id.
      roleAssignment: {
        id: string, # Optional. Role Assignment ID
        roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
        principalId: Guid, # Optional. Object ID of the AAD principal or security-group
        scope: string, # Optional. Scope at the role assignment is created
        principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
      }, # Optional. Role Assignment response details
    }
  ], # Optional. To check if the current user, group, or service principal has permission to read artifacts in the specified workspace.
}
</code>

</remarks>
    </member>
    <member name="GetRoleAssignmentsAsync(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetRoleAssignmentsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = await client.GetRoleAssignmentsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRoleAssignmentsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = await client.GetRoleAssignmentsAsync("<roleId>", "<principalId>", "<scope>", "<continuationToken>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("principalType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RoleAssignmentDetailsList</c>:
<code>{
  count: number, # Optional. Number of role assignments
  value: [
    {
      id: string, # Optional. Role Assignment ID
      roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
      principalId: Guid, # Optional. Object ID of the AAD principal or security-group
      scope: string, # Optional. Scope at the role assignment is created
      principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
    }
  ], # Optional. A list of role assignments
}
</code>

</remarks>
    </member>
    <member name="GetRoleAssignments(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetRoleAssignments and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = client.GetRoleAssignments();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRoleAssignments with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = client.GetRoleAssignments("<roleId>", "<principalId>", "<scope>", "<continuationToken>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("principalType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RoleAssignmentDetailsList</c>:
<code>{
  count: number, # Optional. Number of role assignments
  value: [
    {
      id: string, # Optional. Role Assignment ID
      roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
      principalId: Guid, # Optional. Object ID of the AAD principal or security-group
      scope: string, # Optional. Scope at the role assignment is created
      principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
    }
  ], # Optional. A list of role assignments
}
</code>

</remarks>
    </member>
    <member name="CreateRoleAssignmentAsync(String,RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call CreateRoleAssignmentAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

var data = new {
    roleId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    scope = "<scope>",
};

Response response = await client.CreateRoleAssignmentAsync("<roleAssignmentId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateRoleAssignmentAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

var data = new {
    roleId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    scope = "<scope>",
    principalType = "<principalType>",
};

Response response = await client.CreateRoleAssignmentAsync("<roleAssignmentId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("principalType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoleAssignmentRequest</c>:
<code>{
  roleId: Guid, # Required. Role ID of the Synapse Built-In Role
  principalId: Guid, # Required. Object ID of the AAD principal or security-group
  scope: string, # Required. Scope at which the role assignment is created
  principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
}
</code>

Response Body:

Schema for <c>RoleAssignmentDetails</c>:
<code>{
  id: string, # Optional. Role Assignment ID
  roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
  principalId: Guid, # Optional. Object ID of the AAD principal or security-group
  scope: string, # Optional. Scope at the role assignment is created
  principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
}
</code>

</remarks>
    </member>
    <member name="CreateRoleAssignment(String,RequestContent,ContentType,RequestContext)">
<example>
This sample shows how to call CreateRoleAssignment with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

var data = new {
    roleId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    scope = "<scope>",
};

Response response = client.CreateRoleAssignment("<roleAssignmentId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateRoleAssignment with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

var data = new {
    roleId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    principalId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    scope = "<scope>",
    principalType = "<principalType>",
};

Response response = client.CreateRoleAssignment("<roleAssignmentId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("principalType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>RoleAssignmentRequest</c>:
<code>{
  roleId: Guid, # Required. Role ID of the Synapse Built-In Role
  principalId: Guid, # Required. Object ID of the AAD principal or security-group
  scope: string, # Required. Scope at which the role assignment is created
  principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
}
</code>

Response Body:

Schema for <c>RoleAssignmentDetails</c>:
<code>{
  id: string, # Optional. Role Assignment ID
  roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
  principalId: Guid, # Optional. Object ID of the AAD principal or security-group
  scope: string, # Optional. Scope at the role assignment is created
  principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
}
</code>

</remarks>
    </member>
    <member name="GetRoleAssignmentByIdAsync(String,RequestContext)">
<example>
This sample shows how to call GetRoleAssignmentByIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = await client.GetRoleAssignmentByIdAsync("<roleAssignmentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("principalType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RoleAssignmentDetails</c>:
<code>{
  id: string, # Optional. Role Assignment ID
  roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
  principalId: Guid, # Optional. Object ID of the AAD principal or security-group
  scope: string, # Optional. Scope at the role assignment is created
  principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
}
</code>

</remarks>
    </member>
    <member name="GetRoleAssignmentById(String,RequestContext)">
<example>
This sample shows how to call GetRoleAssignmentById with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = client.GetRoleAssignmentById("<roleAssignmentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("roleDefinitionId").ToString());
Console.WriteLine(result.GetProperty("principalId").ToString());
Console.WriteLine(result.GetProperty("scope").ToString());
Console.WriteLine(result.GetProperty("principalType").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>RoleAssignmentDetails</c>:
<code>{
  id: string, # Optional. Role Assignment ID
  roleDefinitionId: Guid, # Optional. Role ID of the Synapse Built-In Role
  principalId: Guid, # Optional. Object ID of the AAD principal or security-group
  scope: string, # Optional. Scope at the role assignment is created
  principalType: string, # Optional. Type of the principal Id: User, Group or ServicePrincipal
}
</code>

</remarks>
    </member>
    <member name="DeleteRoleAssignmentByIdAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteRoleAssignmentByIdAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = await client.DeleteRoleAssignmentByIdAsync("<roleAssignmentId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteRoleAssignmentByIdAsync with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = await client.DeleteRoleAssignmentByIdAsync("<roleAssignmentId>", "<scope>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DeleteRoleAssignmentById(String,String,RequestContext)">
<example>
This sample shows how to call DeleteRoleAssignmentById with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = client.DeleteRoleAssignmentById("<roleAssignmentId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteRoleAssignmentById with all parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleAssignmentsClient(endpoint, credential);

Response response = client.DeleteRoleAssignmentById("<roleAssignmentId>", "<scope>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
  </members>
</doc>