<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetRoleDefinitionsAsync(Boolean,String,RequestContext)">
<example>
This sample shows how to call GetRoleDefinitionsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleDefinitionsClient(endpoint, credential);

Response response = await client.GetRoleDefinitionsAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetRoleDefinitionsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleDefinitionsClient(endpoint, credential);

Response response = await client.GetRoleDefinitionsAsync(true, "<scope>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("isBuiltIn").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result[0].GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result[0].GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result[0].GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result[0].GetProperty("scopes")[0].ToString());
Console.WriteLine(result[0].GetProperty("availabilityStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SynapseRoleDefinition</c>:
<code>{
  id: Guid, # Optional. Role Definition ID
  name: string, # Optional. Name of the Synapse role
  isBuiltIn: boolean, # Optional. Is a built-in role or not
  description: string, # Optional. Description for the Synapse role
  permissions: [
    {
      actions: [string], # Optional. List of actions
      notActions: [string], # Optional. List of Not actions
      dataActions: [string], # Optional. List of data actions
      notDataActions: [string], # Optional. List of Not data actions
    }
  ], # Optional. Permissions for the Synapse role
  scopes: [string], # Optional. Allowed scopes for the Synapse role
  availabilityStatus: string, # Optional. Availability of the Synapse role
}
</code>

</remarks>
    </member>
    <member name="GetRoleDefinitions(Boolean,String,RequestContext)">
<example>
This sample shows how to call GetRoleDefinitions and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleDefinitionsClient(endpoint, credential);

Response response = client.GetRoleDefinitions();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
This sample shows how to call GetRoleDefinitions with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleDefinitionsClient(endpoint, credential);

Response response = client.GetRoleDefinitions(true, "<scope>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("id").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("isBuiltIn").ToString());
Console.WriteLine(result[0].GetProperty("description").ToString());
Console.WriteLine(result[0].GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result[0].GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result[0].GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result[0].GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result[0].GetProperty("scopes")[0].ToString());
Console.WriteLine(result[0].GetProperty("availabilityStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SynapseRoleDefinition</c>:
<code>{
  id: Guid, # Optional. Role Definition ID
  name: string, # Optional. Name of the Synapse role
  isBuiltIn: boolean, # Optional. Is a built-in role or not
  description: string, # Optional. Description for the Synapse role
  permissions: [
    {
      actions: [string], # Optional. List of actions
      notActions: [string], # Optional. List of Not actions
      dataActions: [string], # Optional. List of data actions
      notDataActions: [string], # Optional. List of Not data actions
    }
  ], # Optional. Permissions for the Synapse role
  scopes: [string], # Optional. Allowed scopes for the Synapse role
  availabilityStatus: string, # Optional. Availability of the Synapse role
}
</code>

</remarks>
    </member>
    <member name="GetRoleDefinitionByIdAsync(String,RequestContext)">
<example>
This sample shows how to call GetRoleDefinitionByIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleDefinitionsClient(endpoint, credential);

Response response = await client.GetRoleDefinitionByIdAsync("<roleDefinitionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isBuiltIn").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result.GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result.GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result.GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result.GetProperty("scopes")[0].ToString());
Console.WriteLine(result.GetProperty("availabilityStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SynapseRoleDefinition</c>:
<code>{
  id: Guid, # Optional. Role Definition ID
  name: string, # Optional. Name of the Synapse role
  isBuiltIn: boolean, # Optional. Is a built-in role or not
  description: string, # Optional. Description for the Synapse role
  permissions: [
    {
      actions: [string], # Optional. List of actions
      notActions: [string], # Optional. List of Not actions
      dataActions: [string], # Optional. List of data actions
      notDataActions: [string], # Optional. List of Not data actions
    }
  ], # Optional. Permissions for the Synapse role
  scopes: [string], # Optional. Allowed scopes for the Synapse role
  availabilityStatus: string, # Optional. Availability of the Synapse role
}
</code>

</remarks>
    </member>
    <member name="GetRoleDefinitionById(String,RequestContext)">
<example>
This sample shows how to call GetRoleDefinitionById with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleDefinitionsClient(endpoint, credential);

Response response = client.GetRoleDefinitionById("<roleDefinitionId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("isBuiltIn").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("permissions")[0].GetProperty("actions")[0].ToString());
Console.WriteLine(result.GetProperty("permissions")[0].GetProperty("notActions")[0].ToString());
Console.WriteLine(result.GetProperty("permissions")[0].GetProperty("dataActions")[0].ToString());
Console.WriteLine(result.GetProperty("permissions")[0].GetProperty("notDataActions")[0].ToString());
Console.WriteLine(result.GetProperty("scopes")[0].ToString());
Console.WriteLine(result.GetProperty("availabilityStatus").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SynapseRoleDefinition</c>:
<code>{
  id: Guid, # Optional. Role Definition ID
  name: string, # Optional. Name of the Synapse role
  isBuiltIn: boolean, # Optional. Is a built-in role or not
  description: string, # Optional. Description for the Synapse role
  permissions: [
    {
      actions: [string], # Optional. List of actions
      notActions: [string], # Optional. List of Not actions
      dataActions: [string], # Optional. List of data actions
      notDataActions: [string], # Optional. List of Not data actions
    }
  ], # Optional. Permissions for the Synapse role
  scopes: [string], # Optional. Allowed scopes for the Synapse role
  availabilityStatus: string, # Optional. Availability of the Synapse role
}
</code>

</remarks>
    </member>
    <member name="GetScopesAsync(RequestContext)">
<example>
This sample shows how to call GetScopesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleDefinitionsClient(endpoint, credential);

Response response = await client.GetScopesAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
</example>
    </member>
    <member name="GetScopes(RequestContext)">
<example>
This sample shows how to call GetScopes and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new RoleDefinitionsClient(endpoint, credential);

Response response = client.GetScopes();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code>
</example>
    </member>
  </members>
</doc>