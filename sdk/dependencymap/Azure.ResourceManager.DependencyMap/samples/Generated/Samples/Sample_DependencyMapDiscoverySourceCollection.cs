// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.ResourceManager.DependencyMap.Samples
{
    public partial class Sample_DependencyMapDiscoverySourceCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_DiscoverySourcesCreateOrUpdateGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/DiscoverySources_CreateOrUpdate.json
            // this example is just showing the usage of "DiscoverySourceResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // get the collection of this DependencyMapDiscoverySourceResource
            DependencyMapDiscoverySourceCollection collection = dependencyMap.GetDependencyMapDiscoverySources();

            // invoke the operation
            string sourceName = "sourceTest1";
            DependencyMapDiscoverySourceData data = new DependencyMapDiscoverySourceData(new AzureLocation("y"))
            {
                Tags = { },
            };
            ArmOperation<DependencyMapDiscoverySourceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sourceName, data);
            DependencyMapDiscoverySourceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DependencyMapDiscoverySourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_DiscoverySourcesGetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/DiscoverySources_Get.json
            // this example is just showing the usage of "DiscoverySourceResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // get the collection of this DependencyMapDiscoverySourceResource
            DependencyMapDiscoverySourceCollection collection = dependencyMap.GetDependencyMapDiscoverySources();

            // invoke the operation
            string sourceName = "sourceTest1";
            DependencyMapDiscoverySourceResource result = await collection.GetAsync(sourceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DependencyMapDiscoverySourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_DiscoverySourcesListByMapsResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/DiscoverySources_ListByMapsResource.json
            // this example is just showing the usage of "DiscoverySourceResource_ListByMapsResource" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // get the collection of this DependencyMapDiscoverySourceResource
            DependencyMapDiscoverySourceCollection collection = dependencyMap.GetDependencyMapDiscoverySources();

            // invoke the operation and iterate over the result
            await foreach (DependencyMapDiscoverySourceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DependencyMapDiscoverySourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_DiscoverySourcesGetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/DiscoverySources_Get.json
            // this example is just showing the usage of "DiscoverySourceResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // get the collection of this DependencyMapDiscoverySourceResource
            DependencyMapDiscoverySourceCollection collection = dependencyMap.GetDependencyMapDiscoverySources();

            // invoke the operation
            string sourceName = "sourceTest1";
            bool result = await collection.ExistsAsync(sourceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_DiscoverySourcesGetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/DiscoverySources_Get.json
            // this example is just showing the usage of "DiscoverySourceResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // get the collection of this DependencyMapDiscoverySourceResource
            DependencyMapDiscoverySourceCollection collection = dependencyMap.GetDependencyMapDiscoverySources();

            // invoke the operation
            string sourceName = "sourceTest1";
            NullableResponse<DependencyMapDiscoverySourceResource> response = await collection.GetIfExistsAsync(sourceName);
            DependencyMapDiscoverySourceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                DependencyMapDiscoverySourceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
