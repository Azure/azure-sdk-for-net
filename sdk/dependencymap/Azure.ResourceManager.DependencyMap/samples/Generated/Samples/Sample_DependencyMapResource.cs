// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.DependencyMap.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.DependencyMap.Samples
{
    public partial class Sample_DependencyMapResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_MapsGetGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/Maps_Get.json
            // this example is just showing the usage of "MapsResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // invoke the operation
            DependencyMapResource result = await dependencyMap.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DependencyMapData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_MapsDeleteGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/Maps_Delete.json
            // this example is just showing the usage of "MapsResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // invoke the operation
            await dependencyMap.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_MapsUpdateGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/Maps_Update.json
            // this example is just showing the usage of "MapsResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // invoke the operation
            DependencyMapPatch patch = new DependencyMapPatch
            {
                Tags = { },
            };
            ArmOperation<DependencyMapResource> lro = await dependencyMap.UpdateAsync(WaitUntil.Completed, patch);
            DependencyMapResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            DependencyMapData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetDependencyViewForFocusedMachine_MapsGetDependencyViewForFocusedMachineGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/Maps_GetDependencyViewForFocusedMachine.json
            // this example is just showing the usage of "Maps_GetDependencyViewForFocusedMachine" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // invoke the operation
            GetDependencyViewForFocusedMachineContent content = new GetDependencyViewForFocusedMachineContent(new ResourceIdentifier("imzykeisagngrnfinbqtu"))
            {
                Filters = new DependencyMapVisualizationFilter
                {
                    DateTime = new DependencyMapDateTimeFilter
                    {
                        StartOn = DateTimeOffset.Parse("2024-03-29T07:35:15.336Z"),
                        EndOn = DateTimeOffset.Parse("2024-03-29T07:35:15.336Z"),
                    },
                    ProcessNameFilter = new DependencyMapProcessNameFilter(DependencyMapProcessNameFilterOperator.Contains, new string[] { "mnqtvduwzemjcvvmnnoqvcuemwhnz" }),
                },
            };
            await dependencyMap.GetDependencyViewForFocusedMachineAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetConnectionsWithConnectedMachineForFocusedMachine_MapsGetConnectionsWithConnectedMachineForFocusedMachineGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/Maps_GetConnectionsWithConnectedMachineForFocusedMachine.json
            // this example is just showing the usage of "Maps_GetConnectionsWithConnectedMachineForFocusedMachine" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // invoke the operation
            GetConnectionsWithConnectedMachineForFocusedMachineContent content = new GetConnectionsWithConnectedMachineForFocusedMachineContent(new ResourceIdentifier("gagovctcfgocievqwq"), new ResourceIdentifier("enaieiloylabljxzvmyrshp"))
            {
                Filters = new DependencyMapVisualizationFilter
                {
                    DateTime = new DependencyMapDateTimeFilter
                    {
                        StartOn = DateTimeOffset.Parse("2024-03-29T07:35:15.336Z"),
                        EndOn = DateTimeOffset.Parse("2024-03-29T07:35:15.336Z"),
                    },
                    ProcessNameFilter = new DependencyMapProcessNameFilter(DependencyMapProcessNameFilterOperator.Contains, new string[] { "mnqtvduwzemjcvvmnnoqvcuemwhnz" }),
                },
            };
            await dependencyMap.GetConnectionsWithConnectedMachineForFocusedMachineAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetConnectionsForProcessOnFocusedMachine_MapsGetConnectionsForProcessOnFocusedMachineGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/Maps_GetConnectionsForProcessOnFocusedMachine.json
            // this example is just showing the usage of "Maps_GetConnectionsForProcessOnFocusedMachine" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // invoke the operation
            GetConnectionsForProcessOnFocusedMachineContent content = new GetConnectionsForProcessOnFocusedMachineContent(new ResourceIdentifier("abjy"), "yzldgsfupsfvzlztqoqpiv")
            {
                Filters = new DependencyMapVisualizationFilter
                {
                    DateTime = new DependencyMapDateTimeFilter
                    {
                        StartOn = DateTimeOffset.Parse("2024-03-29T07:35:15.336Z"),
                        EndOn = DateTimeOffset.Parse("2024-03-29T07:35:15.336Z"),
                    },
                    ProcessNameFilter = new DependencyMapProcessNameFilter(DependencyMapProcessNameFilterOperator.Contains, new string[] { "mnqtvduwzemjcvvmnnoqvcuemwhnz" }),
                },
            };
            await dependencyMap.GetConnectionsForProcessOnFocusedMachineAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task ExportDependencies_MapsExportDependenciesGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2025-01-31-preview/Maps_ExportDependencies.json
            // this example is just showing the usage of "Maps_ExportDependencies" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this DependencyMapResource created on azure
            // for more information of creating DependencyMapResource, please refer to the document of DependencyMapResource
            string subscriptionId = "D6E58BDB-45F1-41EC-A884-1FC945058848";
            string resourceGroupName = "rgdependencyMap";
            string mapName = "mapsTest1";
            ResourceIdentifier dependencyMapResourceId = DependencyMapResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, mapName);
            DependencyMapResource dependencyMap = client.GetDependencyMapResource(dependencyMapResourceId);

            // invoke the operation
            ExportDependenciesContent content = new ExportDependenciesContent(new ResourceIdentifier("qzjpilzxpurauwfwwanpiiafvz"))
            {
                Filters = new DependencyMapVisualizationFilter
                {
                    DateTime = new DependencyMapDateTimeFilter
                    {
                        StartOn = DateTimeOffset.Parse("2024-03-29T07:35:15.336Z"),
                        EndOn = DateTimeOffset.Parse("2024-03-29T07:35:15.336Z"),
                    },
                    ProcessNameFilter = new DependencyMapProcessNameFilter(DependencyMapProcessNameFilterOperator.Contains, new string[] { "mnqtvduwzemjcvvmnnoqvcuemwhnz" }),
                },
            };
            await dependencyMap.ExportDependenciesAsync(WaitUntil.Completed, content);

            Console.WriteLine("Succeeded");
        }
    }
}
