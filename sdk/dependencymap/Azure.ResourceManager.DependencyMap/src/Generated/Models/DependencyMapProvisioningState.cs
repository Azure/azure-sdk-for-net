// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DependencyMap.Models
{
    /// <summary> Provisioning state of the resource. </summary>
    public readonly partial struct DependencyMapProvisioningState : IEquatable<DependencyMapProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DependencyMapProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DependencyMapProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string ProvisioningValue = "Provisioning";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string AcceptedValue = "Accepted";

        /// <summary> Resource has been created. </summary>
        public static DependencyMapProvisioningState Succeeded { get; } = new DependencyMapProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static DependencyMapProvisioningState Failed { get; } = new DependencyMapProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static DependencyMapProvisioningState Canceled { get; } = new DependencyMapProvisioningState(CanceledValue);
        /// <summary> This state indicates that the resource is being provisioned. </summary>
        public static DependencyMapProvisioningState Provisioning { get; } = new DependencyMapProvisioningState(ProvisioningValue);
        /// <summary> This state indicates that the resource is being updated. </summary>
        public static DependencyMapProvisioningState Updating { get; } = new DependencyMapProvisioningState(UpdatingValue);
        /// <summary> This state indicates that the resource is being deleted. </summary>
        public static DependencyMapProvisioningState Deleting { get; } = new DependencyMapProvisioningState(DeletingValue);
        /// <summary> This state indicates that the operation on the resource has been accepted. </summary>
        public static DependencyMapProvisioningState Accepted { get; } = new DependencyMapProvisioningState(AcceptedValue);
        /// <summary> Determines if two <see cref="DependencyMapProvisioningState"/> values are the same. </summary>
        public static bool operator ==(DependencyMapProvisioningState left, DependencyMapProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DependencyMapProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(DependencyMapProvisioningState left, DependencyMapProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DependencyMapProvisioningState"/>. </summary>
        public static implicit operator DependencyMapProvisioningState(string value) => new DependencyMapProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DependencyMapProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DependencyMapProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
