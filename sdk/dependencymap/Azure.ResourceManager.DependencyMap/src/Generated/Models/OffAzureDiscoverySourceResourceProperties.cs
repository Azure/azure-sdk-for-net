// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.DependencyMap.Models
{
    /// <summary> OffAzure discovery source resource properties. </summary>
    public partial class OffAzureDiscoverySourceResourceProperties : DiscoverySourceResourceProperties
    {
        /// <summary> Initializes a new instance of <see cref="OffAzureDiscoverySourceResourceProperties"/>. </summary>
        /// <param name="sourceId"> Source ArmId of Discovery Source resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sourceId"/> is null. </exception>
        public OffAzureDiscoverySourceResourceProperties(string sourceId) : base(sourceId)
        {
            Argument.AssertNotNull(sourceId, nameof(sourceId));

            SourceType = SourceType.OffAzure;
        }

        /// <summary> Initializes a new instance of <see cref="OffAzureDiscoverySourceResourceProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of Discovery Source resource. </param>
        /// <param name="sourceType"> Source type of Discovery Source resource. </param>
        /// <param name="sourceId"> Source ArmId of Discovery Source resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal OffAzureDiscoverySourceResourceProperties(ProvisioningState? provisioningState, SourceType sourceType, string sourceId, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(provisioningState, sourceType, sourceId, serializedAdditionalRawData)
        {
            SourceType = sourceType;
        }

        /// <summary> Initializes a new instance of <see cref="OffAzureDiscoverySourceResourceProperties"/> for deserialization. </summary>
        internal OffAzureDiscoverySourceResourceProperties()
        {
        }
    }
}
