// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DependencyMap.Models
{
    [PersistableModelProxy(typeof(UnknownDependencyMapDiscoverySourceProperties))]
    public partial class DependencyMapDiscoverySourceProperties : IUtf8JsonSerializable, IJsonModel<DependencyMapDiscoverySourceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DependencyMapDiscoverySourceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DependencyMapDiscoverySourceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DependencyMapDiscoverySourceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DependencyMapDiscoverySourceProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            writer.WritePropertyName("sourceType"u8);
            writer.WriteStringValue(SourceType.ToString());
            writer.WritePropertyName("sourceId"u8);
            writer.WriteStringValue(SourceId);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        DependencyMapDiscoverySourceProperties IJsonModel<DependencyMapDiscoverySourceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DependencyMapDiscoverySourceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DependencyMapDiscoverySourceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDependencyMapDiscoverySourceProperties(document.RootElement, options);
        }

        internal static DependencyMapDiscoverySourceProperties DeserializeDependencyMapDiscoverySourceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            if (element.TryGetProperty("sourceType", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "OffAzure": return OffAzureDiscoverySourceProperties.DeserializeOffAzureDiscoverySourceProperties(element, options);
                }
            }
            return UnknownDependencyMapDiscoverySourceProperties.DeserializeUnknownDependencyMapDiscoverySourceProperties(element, options);
        }

        BinaryData IPersistableModel<DependencyMapDiscoverySourceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DependencyMapDiscoverySourceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerDependencyMapContext.Default);
                default:
                    throw new FormatException($"The model {nameof(DependencyMapDiscoverySourceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        DependencyMapDiscoverySourceProperties IPersistableModel<DependencyMapDiscoverySourceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DependencyMapDiscoverySourceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeDependencyMapDiscoverySourceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DependencyMapDiscoverySourceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DependencyMapDiscoverySourceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
