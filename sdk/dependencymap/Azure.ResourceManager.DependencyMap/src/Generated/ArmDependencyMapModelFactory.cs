// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DependencyMap.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDependencyMapModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="DependencyMap.DependencyMapData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="dependencyMapProvisioningState"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="DependencyMap.DependencyMapData"/> instance for mocking. </returns>
        public static DependencyMapData DependencyMapData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DependencyMapProvisioningState? dependencyMapProvisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DependencyMapData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                dependencyMapProvisioningState != null ? new DependencyMapProperties(dependencyMapProvisioningState, serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GetDependencyViewForFocusedMachineContent"/>. </summary>
        /// <param name="focusedMachineId"> Machine arm id. </param>
        /// <param name="filters"> Filters for GetSingleMachineDependencyView. </param>
        /// <returns> A new <see cref="Models.GetDependencyViewForFocusedMachineContent"/> instance for mocking. </returns>
        public static GetDependencyViewForFocusedMachineContent GetDependencyViewForFocusedMachineContent(ResourceIdentifier focusedMachineId = null, DependencyMapVisualizationFilter filters = null)
        {
            return new GetDependencyViewForFocusedMachineContent(focusedMachineId, filters, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GetConnectionsWithConnectedMachineForFocusedMachineContent"/>. </summary>
        /// <param name="focusedMachineId"> Source machine arm id. </param>
        /// <param name="connectedMachineId"> Destination machine arm id. </param>
        /// <param name="filters"> Filters for GetNetworkConnectionsBetweenMachines. </param>
        /// <returns> A new <see cref="Models.GetConnectionsWithConnectedMachineForFocusedMachineContent"/> instance for mocking. </returns>
        public static GetConnectionsWithConnectedMachineForFocusedMachineContent GetConnectionsWithConnectedMachineForFocusedMachineContent(ResourceIdentifier focusedMachineId = null, ResourceIdentifier connectedMachineId = null, DependencyMapVisualizationFilter filters = null)
        {
            return new GetConnectionsWithConnectedMachineForFocusedMachineContent(focusedMachineId, connectedMachineId, filters, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GetConnectionsForProcessOnFocusedMachineContent"/>. </summary>
        /// <param name="focusedMachineId"> Machine arm id. </param>
        /// <param name="processIdOnFocusedMachine"> Process id. </param>
        /// <param name="filters"> Filters for GetProcessNetworkConnections. </param>
        /// <returns> A new <see cref="Models.GetConnectionsForProcessOnFocusedMachineContent"/> instance for mocking. </returns>
        public static GetConnectionsForProcessOnFocusedMachineContent GetConnectionsForProcessOnFocusedMachineContent(ResourceIdentifier focusedMachineId = null, string processIdOnFocusedMachine = null, DependencyMapVisualizationFilter filters = null)
        {
            return new GetConnectionsForProcessOnFocusedMachineContent(focusedMachineId, processIdOnFocusedMachine, filters, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ExportDependenciesContent"/>. </summary>
        /// <param name="focusedMachineId"> Machine arm id. </param>
        /// <param name="filters"> Filters for ExportDependencies. </param>
        /// <returns> A new <see cref="Models.ExportDependenciesContent"/> instance for mocking. </returns>
        public static ExportDependenciesContent ExportDependenciesContent(ResourceIdentifier focusedMachineId = null, DependencyMapVisualizationFilter filters = null)
        {
            return new ExportDependenciesContent(focusedMachineId, filters, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DependencyMap.DependencyMapDiscoverySourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties">
        /// The resource-specific properties for this resource.
        /// Please note <see cref="Models.DependencyMapDiscoverySourceProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Models.OffAzureDiscoverySourceProperties"/>.
        /// </param>
        /// <returns> A new <see cref="DependencyMap.DependencyMapDiscoverySourceData"/> instance for mocking. </returns>
        public static DependencyMapDiscoverySourceData DependencyMapDiscoverySourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DependencyMapDiscoverySourceProperties properties = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DependencyMapDiscoverySourceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DependencyMapDiscoverySourceProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of Discovery Source resource. </param>
        /// <param name="sourceType"> Source type of Discovery Source resource. </param>
        /// <param name="sourceId"> Source ArmId of Discovery Source resource. </param>
        /// <returns> A new <see cref="Models.DependencyMapDiscoverySourceProperties"/> instance for mocking. </returns>
        public static DependencyMapDiscoverySourceProperties DependencyMapDiscoverySourceProperties(DependencyMapProvisioningState? provisioningState = null, string sourceType = null, ResourceIdentifier sourceId = null)
        {
            return new UnknownDependencyMapDiscoverySourceProperties(provisioningState, sourceType == null ? default : new SourceType(sourceType), sourceId, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OffAzureDiscoverySourceProperties"/>. </summary>
        /// <param name="provisioningState"> Provisioning state of Discovery Source resource. </param>
        /// <param name="sourceId"> Source ArmId of Discovery Source resource. </param>
        /// <returns> A new <see cref="Models.OffAzureDiscoverySourceProperties"/> instance for mocking. </returns>
        public static OffAzureDiscoverySourceProperties OffAzureDiscoverySourceProperties(DependencyMapProvisioningState? provisioningState = null, ResourceIdentifier sourceId = null)
        {
            return new OffAzureDiscoverySourceProperties(provisioningState, SourceType.OffAzure, sourceId, serializedAdditionalRawData: null);
        }
    }
}
