// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.KubernetesConfiguration.Models
{
    public partial class KubernetesClusterExtensionScope : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Cluster))
            {
                if (Cluster != null)
                {
                    writer.WritePropertyName("cluster"u8);
                    writer.WriteObjectValue(Cluster);
                }
                else
                {
                    writer.WriteNull("cluster");
                }
            }
            if (Optional.IsDefined(Namespace))
            {
                if (Namespace != null)
                {
                    writer.WritePropertyName("namespace"u8);
                    writer.WriteObjectValue(Namespace);
                }
                else
                {
                    writer.WriteNull("namespace");
                }
            }
            writer.WriteEndObject();
        }

        internal static KubernetesClusterExtensionScope DeserializeKubernetesClusterExtensionScope(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ScopeCluster> cluster = default;
            Optional<ScopeNamespace> @namespace = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cluster"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        cluster = null;
                        continue;
                    }
                    cluster = ScopeCluster.DeserializeScopeCluster(property.Value);
                    continue;
                }
                if (property.NameEquals("namespace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        @namespace = null;
                        continue;
                    }
                    @namespace = ScopeNamespace.DeserializeScopeNamespace(property.Value);
                    continue;
                }
            }
            return new KubernetesClusterExtensionScope(cluster.Value, @namespace.Value);
        }
    }
}
