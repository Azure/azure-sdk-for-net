// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.KubernetesConfiguration.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.KubernetesConfiguration
{
    public partial class SourceControlConfigurationData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(RepositoryUri))
            {
                writer.WritePropertyName("repositoryUrl");
                writer.WriteStringValue(RepositoryUri.AbsoluteUri);
            }
            if (Optional.IsDefined(OperatorNamespace))
            {
                writer.WritePropertyName("operatorNamespace");
                writer.WriteStringValue(OperatorNamespace);
            }
            if (Optional.IsDefined(OperatorInstanceName))
            {
                writer.WritePropertyName("operatorInstanceName");
                writer.WriteStringValue(OperatorInstanceName);
            }
            if (Optional.IsDefined(OperatorType))
            {
                writer.WritePropertyName("operatorType");
                writer.WriteStringValue(OperatorType.Value.ToString());
            }
            if (Optional.IsDefined(OperatorParams))
            {
                writer.WritePropertyName("operatorParams");
                writer.WriteStringValue(OperatorParams);
            }
            if (Optional.IsCollectionDefined(ConfigurationProtectedSettings))
            {
                writer.WritePropertyName("configurationProtectedSettings");
                writer.WriteStartObject();
                foreach (var item in ConfigurationProtectedSettings)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(OperatorScope))
            {
                writer.WritePropertyName("operatorScope");
                writer.WriteStringValue(OperatorScope.Value.ToString());
            }
            if (Optional.IsDefined(SshKnownHostsContents))
            {
                writer.WritePropertyName("sshKnownHostsContents");
                writer.WriteStringValue(SshKnownHostsContents);
            }
            if (Optional.IsDefined(EnableHelmOperator))
            {
                writer.WritePropertyName("enableHelmOperator");
                writer.WriteBooleanValue(EnableHelmOperator.Value);
            }
            if (Optional.IsDefined(HelmOperatorProperties))
            {
                writer.WritePropertyName("helmOperatorProperties");
                writer.WriteObjectValue(HelmOperatorProperties);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static SourceControlConfigurationData DeserializeSourceControlConfigurationData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<Uri> repositoryUrl = default;
            Optional<string> operatorNamespace = default;
            Optional<string> operatorInstanceName = default;
            Optional<OperatorType> operatorType = default;
            Optional<string> operatorParams = default;
            Optional<IDictionary<string, string>> configurationProtectedSettings = default;
            Optional<OperatorScopeType> operatorScope = default;
            Optional<string> repositoryPublicKey = default;
            Optional<string> sshKnownHostsContents = default;
            Optional<bool> enableHelmOperator = default;
            Optional<HelmOperatorProperties> helmOperatorProperties = default;
            Optional<ProvisioningStateType> provisioningState = default;
            Optional<ComplianceStatus> complianceStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("repositoryUrl"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                repositoryUrl = null;
                                continue;
                            }
                            repositoryUrl = new Uri(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("operatorNamespace"))
                        {
                            operatorNamespace = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("operatorInstanceName"))
                        {
                            operatorInstanceName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("operatorType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            operatorType = new OperatorType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("operatorParams"))
                        {
                            operatorParams = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("configurationProtectedSettings"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            Dictionary<string, string> dictionary = new Dictionary<string, string>();
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                dictionary.Add(property1.Name, property1.Value.GetString());
                            }
                            configurationProtectedSettings = dictionary;
                            continue;
                        }
                        if (property0.NameEquals("operatorScope"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            operatorScope = new OperatorScopeType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("repositoryPublicKey"))
                        {
                            repositoryPublicKey = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("sshKnownHostsContents"))
                        {
                            sshKnownHostsContents = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("enableHelmOperator"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            enableHelmOperator = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("helmOperatorProperties"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            helmOperatorProperties = HelmOperatorProperties.DeserializeHelmOperatorProperties(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new ProvisioningStateType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("complianceStatus"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            complianceStatus = ComplianceStatus.DeserializeComplianceStatus(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SourceControlConfigurationData(id, name, type, systemData.Value, repositoryUrl.Value, operatorNamespace.Value, operatorInstanceName.Value, Optional.ToNullable(operatorType), operatorParams.Value, Optional.ToDictionary(configurationProtectedSettings), Optional.ToNullable(operatorScope), repositoryPublicKey.Value, sshKnownHostsContents.Value, Optional.ToNullable(enableHelmOperator), helmOperatorProperties.Value, Optional.ToNullable(provisioningState), complianceStatus.Value);
        }
    }
}
