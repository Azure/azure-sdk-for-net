// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.KubernetesConfiguration.Models
{
    public partial class KubernetesObjectStatus
    {
        internal static KubernetesObjectStatus DeserializeKubernetesObjectStatus(JsonElement element)
        {
            Optional<string> name = default;
            Optional<string> @namespace = default;
            Optional<string> kind = default;
            Optional<KubernetesFluxComplianceState> complianceState = default;
            Optional<KubernetesObjectReference> appliedBy = default;
            Optional<IReadOnlyList<KubernetesObjectStatusCondition>> statusConditions = default;
            Optional<HelmReleaseProperties> helmReleaseProperties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("namespace"))
                {
                    @namespace = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("kind"))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("complianceState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    complianceState = new KubernetesFluxComplianceState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("appliedBy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        appliedBy = null;
                        continue;
                    }
                    appliedBy = KubernetesObjectReference.DeserializeKubernetesObjectReference(property.Value);
                    continue;
                }
                if (property.NameEquals("statusConditions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        statusConditions = null;
                        continue;
                    }
                    List<KubernetesObjectStatusCondition> array = new List<KubernetesObjectStatusCondition>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(KubernetesObjectStatusCondition.DeserializeKubernetesObjectStatusCondition(item));
                    }
                    statusConditions = array;
                    continue;
                }
                if (property.NameEquals("helmReleaseProperties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        helmReleaseProperties = null;
                        continue;
                    }
                    helmReleaseProperties = HelmReleaseProperties.DeserializeHelmReleaseProperties(property.Value);
                    continue;
                }
            }
            return new KubernetesObjectStatus(name.Value, @namespace.Value, kind.Value, Optional.ToNullable(complianceState), appliedBy.Value, Optional.ToList(statusConditions), helmReleaseProperties.Value);
        }
    }
}
