// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.KubernetesConfiguration.Models
{
    /// <summary> The compliance state of the configuration. </summary>
    public readonly partial struct ComplianceStateType : IEquatable<ComplianceStateType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComplianceStateType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComplianceStateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PendingValue = "Pending";
        private const string CompliantValue = "Compliant";
        private const string NoncompliantValue = "Noncompliant";
        private const string InstalledValue = "Installed";
        private const string FailedValue = "Failed";

        /// <summary> Pending. </summary>
        public static ComplianceStateType Pending { get; } = new ComplianceStateType(PendingValue);
        /// <summary> Compliant. </summary>
        public static ComplianceStateType Compliant { get; } = new ComplianceStateType(CompliantValue);
        /// <summary> Noncompliant. </summary>
        public static ComplianceStateType Noncompliant { get; } = new ComplianceStateType(NoncompliantValue);
        /// <summary> Installed. </summary>
        public static ComplianceStateType Installed { get; } = new ComplianceStateType(InstalledValue);
        /// <summary> Failed. </summary>
        public static ComplianceStateType Failed { get; } = new ComplianceStateType(FailedValue);
        /// <summary> Determines if two <see cref="ComplianceStateType"/> values are the same. </summary>
        public static bool operator ==(ComplianceStateType left, ComplianceStateType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComplianceStateType"/> values are not the same. </summary>
        public static bool operator !=(ComplianceStateType left, ComplianceStateType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComplianceStateType"/>. </summary>
        public static implicit operator ComplianceStateType(string value) => new ComplianceStateType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComplianceStateType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComplianceStateType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
