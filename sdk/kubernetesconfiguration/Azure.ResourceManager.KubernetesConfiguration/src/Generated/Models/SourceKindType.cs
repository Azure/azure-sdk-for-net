// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.KubernetesConfiguration.Models
{
    /// <summary> Source Kind to pull the configuration data from. </summary>
    public readonly partial struct SourceKindType : IEquatable<SourceKindType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SourceKindType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SourceKindType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GitRepositoryValue = "GitRepository";
        private const string BucketValue = "Bucket";
        private const string AzureBlobValue = "AzureBlob";

        /// <summary> GitRepository. </summary>
        public static SourceKindType GitRepository { get; } = new SourceKindType(GitRepositoryValue);
        /// <summary> Bucket. </summary>
        public static SourceKindType Bucket { get; } = new SourceKindType(BucketValue);
        /// <summary> AzureBlob. </summary>
        public static SourceKindType AzureBlob { get; } = new SourceKindType(AzureBlobValue);
        /// <summary> Determines if two <see cref="SourceKindType"/> values are the same. </summary>
        public static bool operator ==(SourceKindType left, SourceKindType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SourceKindType"/> values are not the same. </summary>
        public static bool operator !=(SourceKindType left, SourceKindType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SourceKindType"/>. </summary>
        public static implicit operator SourceKindType(string value) => new SourceKindType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SourceKindType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SourceKindType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
