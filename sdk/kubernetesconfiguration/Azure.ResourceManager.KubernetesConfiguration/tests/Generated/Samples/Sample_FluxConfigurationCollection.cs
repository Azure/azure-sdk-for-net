// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.KubernetesConfiguration.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.KubernetesConfiguration
{
    public partial class Sample_FluxConfigurationCollection
    {
        // Get Flux Configuration
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetFluxConfiguration()
        {
            // Generated from example definition: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/stable/2022-07-01/examples/GetFluxConfiguration.json
            // this example is just showing the usage of "FluxConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subId1";
            string resourceGroupName = "rg1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FluxConfigurationResource
            string clusterRp = "Microsoft.Kubernetes";
            string clusterResourceName = "connectedClusters";
            string clusterName = "clusterName1";
            FluxConfigurationCollection collection = resourceGroupResource.GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);

            // invoke the operation
            string fluxConfigurationName = "srs-fluxconfig";
            FluxConfigurationResource result = await collection.GetAsync(fluxConfigurationName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FluxConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get Flux Configuration
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetFluxConfiguration()
        {
            // Generated from example definition: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/stable/2022-07-01/examples/GetFluxConfiguration.json
            // this example is just showing the usage of "FluxConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subId1";
            string resourceGroupName = "rg1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FluxConfigurationResource
            string clusterRp = "Microsoft.Kubernetes";
            string clusterResourceName = "connectedClusters";
            string clusterName = "clusterName1";
            FluxConfigurationCollection collection = resourceGroupResource.GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);

            // invoke the operation
            string fluxConfigurationName = "srs-fluxconfig";
            bool result = await collection.ExistsAsync(fluxConfigurationName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Create Flux Configuration
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateFluxConfiguration()
        {
            // Generated from example definition: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/stable/2022-07-01/examples/CreateFluxConfiguration.json
            // this example is just showing the usage of "FluxConfigurations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subId1";
            string resourceGroupName = "rg1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FluxConfigurationResource
            string clusterRp = "Microsoft.Kubernetes";
            string clusterResourceName = "connectedClusters";
            string clusterName = "clusterName1";
            FluxConfigurationCollection collection = resourceGroupResource.GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);

            // invoke the operation
            string fluxConfigurationName = "srs-fluxconfig";
            FluxConfigurationData data = new FluxConfigurationData()
            {
                Scope = ScopeType.Cluster,
                Namespace = "srs-namespace",
                SourceKind = SourceKindType.GitRepository,
                Suspend = false,
                GitRepository = new GitRepositoryDefinition()
                {
                    Uri = new Uri("https://github.com/Azure/arc-k8s-demo"),
                    TimeoutInSeconds = 600,
                    SyncIntervalInSeconds = 600,
                    RepositoryRef = new RepositoryRefDefinition()
                    {
                        Branch = "master",
                    },
                    HttpsCACert = "ZXhhbXBsZWNlcnRpZmljYXRl",
                },
                Kustomizations =
{
["srs-kustomization1"] = new KustomizationDefinition()
{
Path = "./test/path",
DependsOn =
{
},
TimeoutInSeconds = 600,
SyncIntervalInSeconds = 600,
},
["srs-kustomization2"] = new KustomizationDefinition()
{
Path = "./other/test/path",
DependsOn =
{
"srs-kustomization1"
},
TimeoutInSeconds = 600,
SyncIntervalInSeconds = 600,
RetryIntervalInSeconds = 600,
Prune = false,
},
},
            };
            ArmOperation<FluxConfigurationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, fluxConfigurationName, data);
            FluxConfigurationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FluxConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Flux Configuration with Bucket Source Kind
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateFluxConfigurationWithBucketSourceKind()
        {
            // Generated from example definition: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/stable/2022-07-01/examples/CreateFluxConfigurationWithBucket.json
            // this example is just showing the usage of "FluxConfigurations_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subId1";
            string resourceGroupName = "rg1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FluxConfigurationResource
            string clusterRp = "Microsoft.Kubernetes";
            string clusterResourceName = "connectedClusters";
            string clusterName = "clusterName1";
            FluxConfigurationCollection collection = resourceGroupResource.GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);

            // invoke the operation
            string fluxConfigurationName = "srs-fluxconfig";
            FluxConfigurationData data = new FluxConfigurationData()
            {
                Scope = ScopeType.Cluster,
                Namespace = "srs-namespace",
                SourceKind = SourceKindType.Bucket,
                Suspend = false,
                Bucket = new BucketDefinition()
                {
                    Uri = new Uri("https://fluxminiotest.az.minio.io"),
                    BucketName = "flux",
                    TimeoutInSeconds = 1000,
                    SyncIntervalInSeconds = 1000,
                    AccessKey = "fluxminiotest",
                },
                Kustomizations =
{
["srs-kustomization1"] = new KustomizationDefinition()
{
Path = "./test/path",
DependsOn =
{
},
TimeoutInSeconds = 600,
SyncIntervalInSeconds = 600,
},
["srs-kustomization2"] = new KustomizationDefinition()
{
Path = "./other/test/path",
DependsOn =
{
"srs-kustomization1"
},
TimeoutInSeconds = 600,
SyncIntervalInSeconds = 600,
RetryIntervalInSeconds = 600,
Prune = false,
},
},
            };
            ArmOperation<FluxConfigurationResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, fluxConfigurationName, data);
            FluxConfigurationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FluxConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // List Flux Configuration
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListFluxConfiguration()
        {
            // Generated from example definition: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/stable/2022-07-01/examples/ListFluxConfigurations.json
            // this example is just showing the usage of "FluxConfigurations_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "subId1";
            string resourceGroupName = "rg1";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this FluxConfigurationResource
            string clusterRp = "Microsoft.Kubernetes";
            string clusterResourceName = "connectedClusters";
            string clusterName = "clusterName1";
            FluxConfigurationCollection collection = resourceGroupResource.GetFluxConfigurations(clusterRp, clusterResourceName, clusterName);

            // invoke the operation and iterate over the result
            await foreach (FluxConfigurationResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                FluxConfigurationData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
