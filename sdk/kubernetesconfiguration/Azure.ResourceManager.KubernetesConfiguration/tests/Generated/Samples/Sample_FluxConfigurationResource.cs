// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.KubernetesConfiguration.Models;

namespace Azure.ResourceManager.KubernetesConfiguration
{
    public partial class Sample_FluxConfigurationResource
    {
        // Get Flux Configuration
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetFluxConfiguration()
        {
            // Generated from example definition: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/stable/2022-07-01/examples/GetFluxConfiguration.json
            // this example is just showing the usage of "FluxConfigurations_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FluxConfigurationResource created on azure
            // for more information of creating FluxConfigurationResource, please refer to the document of FluxConfigurationResource
            string subscriptionId = "subId1";
            string resourceGroupName = "rg1";
            string clusterRp = "Microsoft.Kubernetes";
            string clusterResourceName = "connectedClusters";
            string clusterName = "clusterName1";
            string fluxConfigurationName = "srs-fluxconfig";
            ResourceIdentifier fluxConfigurationResourceId = FluxConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName);
            FluxConfigurationResource fluxConfiguration = client.GetFluxConfigurationResource(fluxConfigurationResourceId);

            // invoke the operation
            FluxConfigurationResource result = await fluxConfiguration.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FluxConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Patch Flux Configuration
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchFluxConfiguration()
        {
            // Generated from example definition: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/stable/2022-07-01/examples/PatchFluxConfiguration.json
            // this example is just showing the usage of "FluxConfigurations_Update" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FluxConfigurationResource created on azure
            // for more information of creating FluxConfigurationResource, please refer to the document of FluxConfigurationResource
            string subscriptionId = "subId1";
            string resourceGroupName = "rg1";
            string clusterRp = "Microsoft.Kubernetes";
            string clusterResourceName = "connectedClusters";
            string clusterName = "clusterName1";
            string fluxConfigurationName = "srs-fluxconfig";
            ResourceIdentifier fluxConfigurationResourceId = FluxConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName);
            FluxConfigurationResource fluxConfiguration = client.GetFluxConfigurationResource(fluxConfigurationResourceId);

            // invoke the operation
            FluxConfigurationPatch patch = new FluxConfigurationPatch()
            {
                Suspend = true,
                GitRepository = new GitRepositoryPatchDefinition()
                {
                    Uri = new Uri("https://github.com/jonathan-innis/flux2-kustomize-helm-example.git"),
                },
                Kustomizations =
{
["srs-kustomization1"] = new KustomizationPatchDefinition(),
["srs-kustomization2"] = new KustomizationPatchDefinition()
{
Path = "./test/alt-path",
DependsOn =
{
},
SyncIntervalInSeconds = 300,
},
["srs-kustomization3"] = new KustomizationPatchDefinition()
{
Path = "./test/another-path",
SyncIntervalInSeconds = 300,
},
},
            };
            ArmOperation<FluxConfigurationResource> lro = await fluxConfiguration.UpdateAsync(WaitUntil.Completed, patch);
            FluxConfigurationResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            FluxConfigurationData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Flux Configuration
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteFluxConfiguration()
        {
            // Generated from example definition: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/stable/2022-07-01/examples/DeleteFluxConfiguration.json
            // this example is just showing the usage of "FluxConfigurations_Delete" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this FluxConfigurationResource created on azure
            // for more information of creating FluxConfigurationResource, please refer to the document of FluxConfigurationResource
            string subscriptionId = "subId1";
            string resourceGroupName = "rg1";
            string clusterRp = "Microsoft.Kubernetes";
            string clusterResourceName = "connectedClusters";
            string clusterName = "clusterName1";
            string fluxConfigurationName = "srs-fluxconfig";
            ResourceIdentifier fluxConfigurationResourceId = FluxConfigurationResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName);
            FluxConfigurationResource fluxConfiguration = client.GetFluxConfigurationResource(fluxConfigurationResourceId);

            // invoke the operation
            await fluxConfiguration.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }
    }
}
