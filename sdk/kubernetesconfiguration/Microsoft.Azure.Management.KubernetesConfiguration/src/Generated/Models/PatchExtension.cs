// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.KubernetesConfiguration.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Extension Patch Request object.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PatchExtension
    {
        /// <summary>
        /// Initializes a new instance of the PatchExtension class.
        /// </summary>
        public PatchExtension()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PatchExtension class.
        /// </summary>
        /// <param name="autoUpgradeMinorVersion">Flag to note if this
        /// extension participates in auto upgrade of minor version, or
        /// not.</param>
        /// <param name="releaseTrain">ReleaseTrain this extension participates
        /// in for auto-upgrade (e.g. Stable, Preview, etc.) - only if
        /// autoUpgradeMinorVersion is 'true'.</param>
        /// <param name="version">Version of the extension for this extension,
        /// if it is 'pinned' to a specific version. autoUpgradeMinorVersion
        /// must be 'false'.</param>
        /// <param name="configurationSettings">Configuration settings, as
        /// name-value pairs for configuring this extension.</param>
        /// <param name="configurationProtectedSettings">Configuration settings
        /// that are sensitive, as name-value pairs for configuring this
        /// extension.</param>
        public PatchExtension(bool? autoUpgradeMinorVersion = default(bool?), string releaseTrain = default(string), string version = default(string), IDictionary<string, string> configurationSettings = default(IDictionary<string, string>), IDictionary<string, string> configurationProtectedSettings = default(IDictionary<string, string>))
        {
            AutoUpgradeMinorVersion = autoUpgradeMinorVersion;
            ReleaseTrain = releaseTrain;
            Version = version;
            ConfigurationSettings = configurationSettings;
            ConfigurationProtectedSettings = configurationProtectedSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets flag to note if this extension participates in auto
        /// upgrade of minor version, or not.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoUpgradeMinorVersion")]
        public bool? AutoUpgradeMinorVersion { get; set; }

        /// <summary>
        /// Gets or sets releaseTrain this extension participates in for
        /// auto-upgrade (e.g. Stable, Preview, etc.) - only if
        /// autoUpgradeMinorVersion is 'true'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.releaseTrain")]
        public string ReleaseTrain { get; set; }

        /// <summary>
        /// Gets or sets version of the extension for this extension, if it is
        /// 'pinned' to a specific version. autoUpgradeMinorVersion must be
        /// 'false'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets configuration settings, as name-value pairs for
        /// configuring this extension.
        /// </summary>
        [JsonProperty(PropertyName = "properties.configurationSettings")]
        public IDictionary<string, string> ConfigurationSettings { get; set; }

        /// <summary>
        /// Gets or sets configuration settings that are sensitive, as
        /// name-value pairs for configuring this extension.
        /// </summary>
        [JsonProperty(PropertyName = "properties.configurationProtectedSettings")]
        public IDictionary<string, string> ConfigurationProtectedSettings { get; set; }

    }
}
