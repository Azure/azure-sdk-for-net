// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DevOpsInfrastructure.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmDevOpsInfrastructureModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ResourceSku"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tier"> The tier of virtual machines in a scale set. </param>
        /// <param name="size"> The size of the SKU. </param>
        /// <param name="family"> The family of the SKU. </param>
        /// <param name="locations"> The set of locations that the SKU is available. </param>
        /// <param name="locationInfo"> A list of locations and availability zones in those locations where the SKU is available. </param>
        /// <param name="capabilities"> Name value pairs to describe the capability. </param>
        /// <param name="restrictions"> The restrictions of the SKU. </param>
        /// <returns> A new <see cref="Models.ResourceSku"/> instance for mocking. </returns>
        public static ResourceSku ResourceSku(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string tier = null, string size = null, string family = null, IEnumerable<string> locations = null, IEnumerable<ResourceSkuLocationInfo> locationInfo = null, IEnumerable<ResourceSkuCapabilities> capabilities = null, IEnumerable<ResourceSkuRestrictions> restrictions = null)
        {
            locations ??= new List<string>();
            locationInfo ??= new List<ResourceSkuLocationInfo>();
            capabilities ??= new List<ResourceSkuCapabilities>();
            restrictions ??= new List<ResourceSkuRestrictions>();

            return new ResourceSku(
                id,
                name,
                resourceType,
                systemData,
                tier,
                size,
                family,
                locations?.ToList(),
                locationInfo?.ToList(),
                capabilities?.ToList(),
                restrictions?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="DevOpsInfrastructure.PoolData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="provisioningState"> The status of the current operation. </param>
        /// <param name="maximumConcurrency"> Defines how many resources can there be created at any given time. </param>
        /// <param name="organizationProfile">
        /// Defines the organization in which the pool will be used.
        /// Please note <see cref="OrganizationProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureDevOpsOrganizationProfile"/> and <see cref="GitHubOrganizationProfile"/>.
        /// </param>
        /// <param name="agentProfile">
        /// Defines how the machine will be handled once it executed a job.
        /// Please note <see cref="AgentProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Stateful"/> and <see cref="StatelessAgentProfile"/>.
        /// </param>
        /// <param name="fabricProfile">
        /// Defines the type of fabric the agent will run on.
        /// Please note <see cref="FabricProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VmssFabricProfile"/>.
        /// </param>
        /// <param name="devCenterProjectResourceId"> The resource id of the DevCenter Project the pool belongs to. </param>
        /// <returns> A new <see cref="DevOpsInfrastructure.PoolData"/> instance for mocking. </returns>
        public static PoolData PoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ProvisioningState? provisioningState = null, int? maximumConcurrency = null, OrganizationProfile organizationProfile = null, AgentProfile agentProfile = null, FabricProfile fabricProfile = null, string devCenterProjectResourceId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PoolData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                identity,
                provisioningState,
                maximumConcurrency,
                organizationProfile,
                agentProfile,
                fabricProfile,
                devCenterProjectResourceId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceDetailsObject"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="status"> The status of the resource. </param>
        /// <param name="image"> The image name of the resource. </param>
        /// <param name="imageVersion"> The version of the image running on the resource. </param>
        /// <returns> A new <see cref="Models.ResourceDetailsObject"/> instance for mocking. </returns>
        public static ResourceDetailsObject ResourceDetailsObject(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceStatus? status = null, string image = null, string imageVersion = null)
        {
            return new ResourceDetailsObject(
                id,
                name,
                resourceType,
                systemData,
                status,
                image,
                imageVersion,
                serializedAdditionalRawData: null);
        }
    }
}
