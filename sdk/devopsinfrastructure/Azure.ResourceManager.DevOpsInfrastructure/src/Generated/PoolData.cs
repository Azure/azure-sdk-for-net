// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.DevOpsInfrastructure.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DevOpsInfrastructure
{
    /// <summary>
    /// A class representing the Pool data model.
    /// Concrete tracked resource types can be created by aliasing this type using a specific property type.
    /// </summary>
    public partial class PoolData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="PoolData"/>. </summary>
        /// <param name="location"> The location. </param>
        public PoolData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="PoolData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <param name="provisioningState"> The status of the current operation. </param>
        /// <param name="maximumConcurrency"> Defines how many resources can there be created at any given time. </param>
        /// <param name="organizationProfile">
        /// Defines the organization in which the pool will be used.
        /// Please note <see cref="Models.OrganizationProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureDevOpsOrganizationProfile"/> and <see cref="GitHubOrganizationProfile"/>.
        /// </param>
        /// <param name="agentProfile">
        /// Defines how the machine will be handled once it executed a job.
        /// Please note <see cref="Models.AgentProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Stateful"/> and <see cref="StatelessAgentProfile"/>.
        /// </param>
        /// <param name="fabricProfile">
        /// Defines the type of fabric the agent will run on.
        /// Please note <see cref="Models.FabricProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VmssFabricProfile"/>.
        /// </param>
        /// <param name="devCenterProjectResourceId"> The resource id of the DevCenter Project the pool belongs to. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal PoolData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ManagedServiceIdentity identity, ProvisioningState? provisioningState, int? maximumConcurrency, OrganizationProfile organizationProfile, AgentProfile agentProfile, FabricProfile fabricProfile, string devCenterProjectResourceId, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            Identity = identity;
            ProvisioningState = provisioningState;
            MaximumConcurrency = maximumConcurrency;
            OrganizationProfile = organizationProfile;
            AgentProfile = agentProfile;
            FabricProfile = fabricProfile;
            DevCenterProjectResourceId = devCenterProjectResourceId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="PoolData"/> for deserialization. </summary>
        internal PoolData()
        {
        }

        /// <summary> The managed service identities assigned to this resource. </summary>
        public ManagedServiceIdentity Identity { get; set; }
        /// <summary> The status of the current operation. </summary>
        public ProvisioningState? ProvisioningState { get; set; }
        /// <summary> Defines how many resources can there be created at any given time. </summary>
        public int? MaximumConcurrency { get; set; }
        /// <summary>
        /// Defines the organization in which the pool will be used.
        /// Please note <see cref="Models.OrganizationProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureDevOpsOrganizationProfile"/> and <see cref="GitHubOrganizationProfile"/>.
        /// </summary>
        public OrganizationProfile OrganizationProfile { get; set; }
        /// <summary>
        /// Defines how the machine will be handled once it executed a job.
        /// Please note <see cref="Models.AgentProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="Stateful"/> and <see cref="StatelessAgentProfile"/>.
        /// </summary>
        public AgentProfile AgentProfile { get; set; }
        /// <summary>
        /// Defines the type of fabric the agent will run on.
        /// Please note <see cref="Models.FabricProfile"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="VmssFabricProfile"/>.
        /// </summary>
        public FabricProfile FabricProfile { get; set; }
        /// <summary> The resource id of the DevCenter Project the pool belongs to. </summary>
        public string DevCenterProjectResourceId { get; set; }
    }
}
