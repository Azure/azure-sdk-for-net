// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DevOpsInfrastructure.Models
{
    /// <summary> The status of the machine resource. </summary>
    public readonly partial struct ResourceStatus : IEquatable<ResourceStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ReadyValue = "Ready";
        private const string NotReadyValue = "NotReady";
        private const string AllocatedValue = "Allocated";
        private const string PendingReturnValue = "PendingReturn";
        private const string ReturnedValue = "Returned";
        private const string LeasedValue = "Leased";
        private const string ProvisioningValue = "Provisioning";
        private const string UpdatingValue = "Updating";
        private const string StartingValue = "Starting";
        private const string PendingReimageValue = "PendingReimage";
        private const string ReimagingValue = "Reimaging";

        /// <summary> Represents a machine resource that is ready. </summary>
        public static ResourceStatus Ready { get; } = new ResourceStatus(ReadyValue);
        /// <summary> Represents a machine resource that is not ready. </summary>
        public static ResourceStatus NotReady { get; } = new ResourceStatus(NotReadyValue);
        /// <summary> Represents a machine resource that is allocated. </summary>
        public static ResourceStatus Allocated { get; } = new ResourceStatus(AllocatedValue);
        /// <summary> Represents a machine resource that is pending return. </summary>
        public static ResourceStatus PendingReturn { get; } = new ResourceStatus(PendingReturnValue);
        /// <summary> Represents a machine resource that is returned. </summary>
        public static ResourceStatus Returned { get; } = new ResourceStatus(ReturnedValue);
        /// <summary> Represents a machine resource that is leased. </summary>
        public static ResourceStatus Leased { get; } = new ResourceStatus(LeasedValue);
        /// <summary> Represents a machine resource that is provisioning. </summary>
        public static ResourceStatus Provisioning { get; } = new ResourceStatus(ProvisioningValue);
        /// <summary> Represents a machine resource that is updating. </summary>
        public static ResourceStatus Updating { get; } = new ResourceStatus(UpdatingValue);
        /// <summary> Represents a machine resource that is starting. </summary>
        public static ResourceStatus Starting { get; } = new ResourceStatus(StartingValue);
        /// <summary> Represents a machine resource that is pending reimage. </summary>
        public static ResourceStatus PendingReimage { get; } = new ResourceStatus(PendingReimageValue);
        /// <summary> Represents a machine resource that is reimaging. </summary>
        public static ResourceStatus Reimaging { get; } = new ResourceStatus(ReimagingValue);
        /// <summary> Determines if two <see cref="ResourceStatus"/> values are the same. </summary>
        public static bool operator ==(ResourceStatus left, ResourceStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceStatus"/> values are not the same. </summary>
        public static bool operator !=(ResourceStatus left, ResourceStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResourceStatus"/>. </summary>
        public static implicit operator ResourceStatus(string value) => new ResourceStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
