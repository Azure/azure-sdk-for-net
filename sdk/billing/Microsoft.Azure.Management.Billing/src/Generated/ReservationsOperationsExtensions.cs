// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Billing
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ReservationsOperations.
    /// </summary>
    public static partial class ReservationsOperationsExtensions
    {
            /// <summary>
            /// Lists the reservations for a billing account and the roll up counts of
            /// reservations group by provisioning states.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by reservation properties. The filter supports 'eq',
            /// 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or
            /// 'not'.
            /// </param>
            /// <param name='orderby'>
            /// May be used to sort order by reservation properties.
            /// </param>
            /// <param name='refreshSummary'>
            /// To indicate whether to refresh the roll up counts of the reservations group
            /// by provisioning states
            /// </param>
            /// <param name='selectedState'>
            /// The selected provisioning state
            /// </param>
            public static IPage<Reservation> ListByBillingAccount(this IReservationsOperations operations, string billingAccountName, string filter = default(string), string orderby = default(string), string refreshSummary = default(string), string selectedState = default(string))
            {
                return operations.ListByBillingAccountAsync(billingAccountName, filter, orderby, refreshSummary, selectedState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the reservations for a billing account and the roll up counts of
            /// reservations group by provisioning states.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by reservation properties. The filter supports 'eq',
            /// 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or
            /// 'not'.
            /// </param>
            /// <param name='orderby'>
            /// May be used to sort order by reservation properties.
            /// </param>
            /// <param name='refreshSummary'>
            /// To indicate whether to refresh the roll up counts of the reservations group
            /// by provisioning states
            /// </param>
            /// <param name='selectedState'>
            /// The selected provisioning state
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Reservation>> ListByBillingAccountAsync(this IReservationsOperations operations, string billingAccountName, string filter = default(string), string orderby = default(string), string refreshSummary = default(string), string selectedState = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingAccountWithHttpMessagesAsync(billingAccountName, filter, orderby, refreshSummary, selectedState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the reservations for a billing profile and the roll up counts of
            /// reservations group by provisioning state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by reservation properties. The filter supports 'eq',
            /// 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or
            /// 'not'.
            /// </param>
            /// <param name='orderby'>
            /// May be used to sort order by reservation properties.
            /// </param>
            /// <param name='refreshSummary'>
            /// To indicate whether to refresh the roll up counts of the reservations group
            /// by provisioning state
            /// </param>
            /// <param name='selectedState'>
            /// The selected provisioning state
            /// </param>
            public static IPage<Reservation> ListByBillingProfile(this IReservationsOperations operations, string billingAccountName, string billingProfileName, string filter = default(string), string orderby = default(string), string refreshSummary = default(string), string selectedState = default(string))
            {
                return operations.ListByBillingProfileAsync(billingAccountName, billingProfileName, filter, orderby, refreshSummary, selectedState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the reservations for a billing profile and the roll up counts of
            /// reservations group by provisioning state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by reservation properties. The filter supports 'eq',
            /// 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or
            /// 'not'.
            /// </param>
            /// <param name='orderby'>
            /// May be used to sort order by reservation properties.
            /// </param>
            /// <param name='refreshSummary'>
            /// To indicate whether to refresh the roll up counts of the reservations group
            /// by provisioning state
            /// </param>
            /// <param name='selectedState'>
            /// The selected provisioning state
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Reservation>> ListByBillingProfileAsync(this IReservationsOperations operations, string billingAccountName, string billingProfileName, string filter = default(string), string orderby = default(string), string refreshSummary = default(string), string selectedState = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingProfileWithHttpMessagesAsync(billingAccountName, billingProfileName, filter, orderby, refreshSummary, selectedState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the reservations for a billing account and the roll up counts of
            /// reservations group by provisioning states.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Reservation> ListByBillingAccountNext(this IReservationsOperations operations, string nextPageLink)
            {
                return operations.ListByBillingAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the reservations for a billing account and the roll up counts of
            /// reservations group by provisioning states.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Reservation>> ListByBillingAccountNextAsync(this IReservationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the reservations for a billing profile and the roll up counts of
            /// reservations group by provisioning state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Reservation> ListByBillingProfileNext(this IReservationsOperations operations, string nextPageLink)
            {
                return operations.ListByBillingProfileNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the reservations for a billing profile and the roll up counts of
            /// reservations group by provisioning state.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Reservation>> ListByBillingProfileNextAsync(this IReservationsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingProfileNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
