// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Billing
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RecipientTransfersOperations.
    /// </summary>
    public static partial class RecipientTransfersOperationsExtensions
    {
            /// <summary>
            /// Accepts the transfer with given transfer Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferName'>
            /// Transfer Name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to accept the transfer.
            /// </param>
            public static RecipientTransferDetails Accept(this IRecipientTransfersOperations operations, string transferName, AcceptTransferRequest parameters)
            {
                return operations.AcceptAsync(transferName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accepts the transfer with given transfer Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferName'>
            /// Transfer Name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to accept the transfer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecipientTransferDetails> AcceptAsync(this IRecipientTransfersOperations operations, string transferName, AcceptTransferRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AcceptWithHttpMessagesAsync(transferName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validates if the products can be transferred in the context of the given
            /// transfer name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferName'>
            /// Transfer Name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to validate the transfer.
            /// </param>
            public static ValidateTransferListResponse Validate(this IRecipientTransfersOperations operations, string transferName, AcceptTransferRequest parameters)
            {
                return operations.ValidateAsync(transferName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates if the products can be transferred in the context of the given
            /// transfer name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferName'>
            /// Transfer Name.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to validate the transfer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidateTransferListResponse> ValidateAsync(this IRecipientTransfersOperations operations, string transferName, AcceptTransferRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateWithHttpMessagesAsync(transferName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Declines the transfer with given transfer Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferName'>
            /// Transfer Name.
            /// </param>
            public static RecipientTransferDetails Decline(this IRecipientTransfersOperations operations, string transferName)
            {
                return operations.DeclineAsync(transferName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Declines the transfer with given transfer Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferName'>
            /// Transfer Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecipientTransferDetails> DeclineAsync(this IRecipientTransfersOperations operations, string transferName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeclineWithHttpMessagesAsync(transferName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the transfer with given transfer Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferName'>
            /// Transfer Name.
            /// </param>
            public static RecipientTransferDetails Get(this IRecipientTransfersOperations operations, string transferName)
            {
                return operations.GetAsync(transferName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the transfer with given transfer Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferName'>
            /// Transfer Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecipientTransferDetails> GetAsync(this IRecipientTransfersOperations operations, string transferName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(transferName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the transfers received by caller.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<RecipientTransferDetails> List(this IRecipientTransfersOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the transfers received by caller.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecipientTransferDetails>> ListAsync(this IRecipientTransfersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the transfers received by caller.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RecipientTransferDetails> ListNext(this IRecipientTransfersOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the transfers received by caller.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecipientTransferDetails>> ListNextAsync(this IRecipientTransfersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
