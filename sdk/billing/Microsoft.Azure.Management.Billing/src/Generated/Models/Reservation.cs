// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Billing.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The definition of the reservation.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Reservation
    {
        /// <summary>
        /// Initializes a new instance of the Reservation class.
        /// </summary>
        public Reservation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Reservation class.
        /// </summary>
        /// <param name="id">The id of the reservation.</param>
        /// <param name="name">The name of the reservation.</param>
        /// <param name="type">The type of the reservation.</param>
        /// <param name="location">The location of the reservation.</param>
        /// <param name="sku">The sku information associated to this
        /// reservation </param>
        /// <param name="appliedScopes">The array of applied scopes of a
        /// reservation. Will be null if the reservation is in Shared
        /// scope</param>
        /// <param name="appliedScopeType">The applied scope type of the
        /// reservation.</param>
        /// <param name="reservedResourceType">The reserved source type of the
        /// reservation, e.g. virtual machine.</param>
        /// <param name="quantity">The number of the reservation.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// reservation, e.g. Succeeded</param>
        /// <param name="expiryDate">The expiry date of the reservation</param>
        /// <param name="provisioningSubState">The provisioning state of the
        /// reservation, e.g. Succeeded</param>
        /// <param name="displayName">The display name of the
        /// reservation</param>
        /// <param name="displayProvisioningState">The provisioning state of
        /// the reservation for display, e.g. Succeeded</param>
        /// <param name="userFriendlyRenewState">The renew state of the
        /// reservation for display, e.g. On</param>
        /// <param name="userFriendlyAppliedScopeType">The applied scope type
        /// of the reservation for display, e.g. Shared</param>
        /// <param name="effectiveDateTime">The effective date time of the
        /// reservation</param>
        /// <param name="skuDescription">The sku description of the
        /// reservation</param>
        /// <param name="term">The term of the reservation, e.g. P1Y</param>
        /// <param name="renew">The renew state of the reservation</param>
        /// <param name="renewSource">The renew source of the
        /// reservation</param>
        /// <param name="utilization">Reservation utilization</param>
        public Reservation(string id = default(string), string name = default(string), string type = default(string), string location = default(string), ReservationSkuProperty sku = default(ReservationSkuProperty), IList<string> appliedScopes = default(IList<string>), string appliedScopeType = default(string), string reservedResourceType = default(string), double? quantity = default(double?), string provisioningState = default(string), string expiryDate = default(string), string provisioningSubState = default(string), string displayName = default(string), string displayProvisioningState = default(string), string userFriendlyRenewState = default(string), string userFriendlyAppliedScopeType = default(string), string effectiveDateTime = default(string), string skuDescription = default(string), string term = default(string), bool? renew = default(bool?), string renewSource = default(string), ReservationPropertyUtilization utilization = default(ReservationPropertyUtilization))
        {
            Id = id;
            Name = name;
            Type = type;
            Location = location;
            Sku = sku;
            AppliedScopes = appliedScopes;
            AppliedScopeType = appliedScopeType;
            ReservedResourceType = reservedResourceType;
            Quantity = quantity;
            ProvisioningState = provisioningState;
            ExpiryDate = expiryDate;
            ProvisioningSubState = provisioningSubState;
            DisplayName = displayName;
            DisplayProvisioningState = displayProvisioningState;
            UserFriendlyRenewState = userFriendlyRenewState;
            UserFriendlyAppliedScopeType = userFriendlyAppliedScopeType;
            EffectiveDateTime = effectiveDateTime;
            SkuDescription = skuDescription;
            Term = term;
            Renew = renew;
            RenewSource = renewSource;
            Utilization = utilization;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the id of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the name of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the type of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets the location of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; private set; }

        /// <summary>
        /// Gets or sets the sku information associated to this reservation
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public ReservationSkuProperty Sku { get; set; }

        /// <summary>
        /// Gets or sets the array of applied scopes of a reservation. Will be
        /// null if the reservation is in Shared scope
        /// </summary>
        [JsonProperty(PropertyName = "properties.appliedScopes")]
        public IList<string> AppliedScopes { get; set; }

        /// <summary>
        /// Gets the applied scope type of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.appliedScopeType")]
        public string AppliedScopeType { get; private set; }

        /// <summary>
        /// Gets the reserved source type of the reservation, e.g. virtual
        /// machine.
        /// </summary>
        [JsonProperty(PropertyName = "properties.reservedResourceType")]
        public string ReservedResourceType { get; private set; }

        /// <summary>
        /// Gets the number of the reservation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.quantity")]
        public double? Quantity { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the reservation, e.g. Succeeded
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the expiry date of the reservation
        /// </summary>
        [JsonProperty(PropertyName = "properties.expiryDate")]
        public string ExpiryDate { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the reservation, e.g. Succeeded
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningSubState")]
        public string ProvisioningSubState { get; private set; }

        /// <summary>
        /// Gets the display name of the reservation
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the reservation for display, e.g.
        /// Succeeded
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayProvisioningState")]
        public string DisplayProvisioningState { get; private set; }

        /// <summary>
        /// Gets the renew state of the reservation for display, e.g. On
        /// </summary>
        [JsonProperty(PropertyName = "properties.userFriendlyRenewState")]
        public string UserFriendlyRenewState { get; private set; }

        /// <summary>
        /// Gets the applied scope type of the reservation for display, e.g.
        /// Shared
        /// </summary>
        [JsonProperty(PropertyName = "properties.userFriendlyAppliedScopeType")]
        public string UserFriendlyAppliedScopeType { get; private set; }

        /// <summary>
        /// Gets the effective date time of the reservation
        /// </summary>
        [JsonProperty(PropertyName = "properties.effectiveDateTime")]
        public string EffectiveDateTime { get; private set; }

        /// <summary>
        /// Gets the sku description of the reservation
        /// </summary>
        [JsonProperty(PropertyName = "properties.skuDescription")]
        public string SkuDescription { get; private set; }

        /// <summary>
        /// Gets the term of the reservation, e.g. P1Y
        /// </summary>
        [JsonProperty(PropertyName = "properties.term")]
        public string Term { get; private set; }

        /// <summary>
        /// Gets the renew state of the reservation
        /// </summary>
        [JsonProperty(PropertyName = "properties.renew")]
        public bool? Renew { get; private set; }

        /// <summary>
        /// Gets the renew source of the reservation
        /// </summary>
        [JsonProperty(PropertyName = "properties.renewSource")]
        public string RenewSource { get; private set; }

        /// <summary>
        /// Gets reservation utilization
        /// </summary>
        [JsonProperty(PropertyName = "properties.utilization")]
        public ReservationPropertyUtilization Utilization { get; private set; }

    }
}
