// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Billing.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A transaction.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Transaction : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Transaction class.
        /// </summary>
        public Transaction()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Transaction class.
        /// </summary>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="kind">The kind of transaction. Options are all or
        /// reservation. Possible values include: 'all', 'reservation'</param>
        /// <param name="date">The date of transaction.</param>
        /// <param name="invoice">Invoice on which the transaction was billed
        /// or 'pending' if the transaction is not billed.</param>
        /// <param name="invoiceId">The ID of the invoice on which the
        /// transaction was billed. This field is only applicable for
        /// transactions which are billed.</param>
        /// <param name="orderId">The order ID of the reservation. The field is
        /// only applicable for transaction of kind reservation.</param>
        /// <param name="orderName">The name of the reservation order. The
        /// field is only applicable for transactions of kind
        /// reservation.</param>
        /// <param name="productFamily">The family of the product for which the
        /// transaction took place.</param>
        /// <param name="productTypeId">The ID of the product type for which
        /// the transaction took place.</param>
        /// <param name="productType">The type of the product for which the
        /// transaction took place.</param>
        /// <param name="productDescription">The description of the product for
        /// which the transaction took place.</param>
        /// <param name="transactionType">The type of transaction. Possible
        /// values include: 'Purchase', 'Usage Charge'</param>
        /// <param name="transactionAmount">The charge associated with the
        /// transaction.</param>
        /// <param name="quantity">The quantity purchased in the
        /// transaction.</param>
        /// <param name="invoiceSectionId">The ID of the invoice section which
        /// will be billed for the transaction.</param>
        /// <param name="invoiceSectionDisplayName">The name of the invoice
        /// section which will be billed for the transaction.</param>
        /// <param name="billingProfileId">The ID of the billing profile which
        /// will be billed for the transaction.</param>
        /// <param name="billingProfileDisplayName">The name of the billing
        /// profile which will be billed for the transaction.</param>
        /// <param name="customerId">The ID of the customer for which the
        /// transaction took place. The field is applicable only for Microsoft
        /// Partner Agreement billing account.</param>
        /// <param name="customerDisplayName">The name of the customer for
        /// which the transaction took place. The field is applicable only for
        /// Microsoft Partner Agreement billing account.</param>
        /// <param name="subscriptionId">The ID of the subscription that was
        /// used for the transaction. The field is only applicable for
        /// transaction of kind reservation.</param>
        /// <param name="subscriptionName">The name of the subscription that
        /// was used for the transaction. The field is only applicable for
        /// transaction of kind reservation.</param>
        /// <param name="azurePlan">The type of azure plan of the subscription
        /// that was used for the transaction.</param>
        /// <param name="azureCreditApplied">The amount of any Azure credits
        /// automatically applied to this transaction.</param>
        /// <param name="billingCurrency">The ISO 4217 code for the currency in
        /// which this transaction is billed.</param>
        /// <param name="discount">The percentage discount, if any, applied to
        /// this transaction.</param>
        /// <param name="effectivePrice">The price of the product after
        /// applying any discounts.</param>
        /// <param name="exchangeRate">The exchange rate used to convert
        /// charged amount to billing currency, if applicable.</param>
        /// <param name="marketPrice">The retail price of the product.</param>
        /// <param name="pricingCurrency">The ISO 4217 code for the currency in
        /// which the product is priced.</param>
        /// <param name="servicePeriodStartDate">The date of the purchase of
        /// the product, or the start date of the month in which usage
        /// started.</param>
        /// <param name="servicePeriodEndDate">The end date of the product
        /// term, or the end date of the month in which usage ended.</param>
        /// <param name="subTotal">The pre-tax charged amount for the
        /// transaction.</param>
        /// <param name="tax">The tax amount applied to the
        /// transaction.</param>
        /// <param name="unitOfMeasure">The unit of measure used to bill for
        /// the product. For example, compute services are billed per
        /// hour.</param>
        /// <param name="units">The number of units used for a given
        /// product.</param>
        /// <param name="unitType">The description for the unit of measure for
        /// a given product.</param>
        public Transaction(string id = default(string), string name = default(string), string type = default(string), string kind = default(string), System.DateTime? date = default(System.DateTime?), string invoice = default(string), string invoiceId = default(string), string orderId = default(string), string orderName = default(string), string productFamily = default(string), string productTypeId = default(string), string productType = default(string), string productDescription = default(string), string transactionType = default(string), Amount transactionAmount = default(Amount), int? quantity = default(int?), string invoiceSectionId = default(string), string invoiceSectionDisplayName = default(string), string billingProfileId = default(string), string billingProfileDisplayName = default(string), string customerId = default(string), string customerDisplayName = default(string), string subscriptionId = default(string), string subscriptionName = default(string), string azurePlan = default(string), Amount azureCreditApplied = default(Amount), string billingCurrency = default(string), double? discount = default(double?), Amount effectivePrice = default(Amount), double? exchangeRate = default(double?), Amount marketPrice = default(Amount), string pricingCurrency = default(string), System.DateTime? servicePeriodStartDate = default(System.DateTime?), System.DateTime? servicePeriodEndDate = default(System.DateTime?), Amount subTotal = default(Amount), Amount tax = default(Amount), string unitOfMeasure = default(string), double? units = default(double?), string unitType = default(string))
            : base(id, name, type)
        {
            Kind = kind;
            Date = date;
            Invoice = invoice;
            InvoiceId = invoiceId;
            OrderId = orderId;
            OrderName = orderName;
            ProductFamily = productFamily;
            ProductTypeId = productTypeId;
            ProductType = productType;
            ProductDescription = productDescription;
            TransactionType = transactionType;
            TransactionAmount = transactionAmount;
            Quantity = quantity;
            InvoiceSectionId = invoiceSectionId;
            InvoiceSectionDisplayName = invoiceSectionDisplayName;
            BillingProfileId = billingProfileId;
            BillingProfileDisplayName = billingProfileDisplayName;
            CustomerId = customerId;
            CustomerDisplayName = customerDisplayName;
            SubscriptionId = subscriptionId;
            SubscriptionName = subscriptionName;
            AzurePlan = azurePlan;
            AzureCreditApplied = azureCreditApplied;
            BillingCurrency = billingCurrency;
            Discount = discount;
            EffectivePrice = effectivePrice;
            ExchangeRate = exchangeRate;
            MarketPrice = marketPrice;
            PricingCurrency = pricingCurrency;
            ServicePeriodStartDate = servicePeriodStartDate;
            ServicePeriodEndDate = servicePeriodEndDate;
            SubTotal = subTotal;
            Tax = tax;
            UnitOfMeasure = unitOfMeasure;
            Units = units;
            UnitType = unitType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the kind of transaction. Options are all or
        /// reservation. Possible values include: 'all', 'reservation'
        /// </summary>
        [JsonProperty(PropertyName = "properties.kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets the date of transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.date")]
        public System.DateTime? Date { get; private set; }

        /// <summary>
        /// Gets invoice on which the transaction was billed or 'pending' if
        /// the transaction is not billed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.invoice")]
        public string Invoice { get; private set; }

        /// <summary>
        /// Gets the ID of the invoice on which the transaction was billed.
        /// This field is only applicable for transactions which are billed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.invoiceId")]
        public string InvoiceId { get; private set; }

        /// <summary>
        /// Gets the order ID of the reservation. The field is only applicable
        /// for transaction of kind reservation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.orderId")]
        public string OrderId { get; private set; }

        /// <summary>
        /// Gets the name of the reservation order. The field is only
        /// applicable for transactions of kind reservation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.orderName")]
        public string OrderName { get; private set; }

        /// <summary>
        /// Gets the family of the product for which the transaction took
        /// place.
        /// </summary>
        [JsonProperty(PropertyName = "properties.productFamily")]
        public string ProductFamily { get; private set; }

        /// <summary>
        /// Gets the ID of the product type for which the transaction took
        /// place.
        /// </summary>
        [JsonProperty(PropertyName = "properties.productTypeId")]
        public string ProductTypeId { get; private set; }

        /// <summary>
        /// Gets the type of the product for which the transaction took place.
        /// </summary>
        [JsonProperty(PropertyName = "properties.productType")]
        public string ProductType { get; private set; }

        /// <summary>
        /// Gets the description of the product for which the transaction took
        /// place.
        /// </summary>
        [JsonProperty(PropertyName = "properties.productDescription")]
        public string ProductDescription { get; private set; }

        /// <summary>
        /// Gets or sets the type of transaction. Possible values include:
        /// 'Purchase', 'Usage Charge'
        /// </summary>
        [JsonProperty(PropertyName = "properties.transactionType")]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets the charge associated with the transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.transactionAmount")]
        public Amount TransactionAmount { get; private set; }

        /// <summary>
        /// Gets the quantity purchased in the transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.quantity")]
        public int? Quantity { get; private set; }

        /// <summary>
        /// Gets the ID of the invoice section which will be billed for the
        /// transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.invoiceSectionId")]
        public string InvoiceSectionId { get; private set; }

        /// <summary>
        /// Gets the name of the invoice section which will be billed for the
        /// transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.invoiceSectionDisplayName")]
        public string InvoiceSectionDisplayName { get; private set; }

        /// <summary>
        /// Gets the ID of the billing profile which will be billed for the
        /// transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingProfileId")]
        public string BillingProfileId { get; private set; }

        /// <summary>
        /// Gets the name of the billing profile which will be billed for the
        /// transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingProfileDisplayName")]
        public string BillingProfileDisplayName { get; private set; }

        /// <summary>
        /// Gets the ID of the customer for which the transaction took place.
        /// The field is applicable only for Microsoft Partner Agreement
        /// billing account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customerId")]
        public string CustomerId { get; private set; }

        /// <summary>
        /// Gets the name of the customer for which the transaction took place.
        /// The field is applicable only for Microsoft Partner Agreement
        /// billing account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.customerDisplayName")]
        public string CustomerDisplayName { get; private set; }

        /// <summary>
        /// Gets the ID of the subscription that was used for the transaction.
        /// The field is only applicable for transaction of kind reservation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subscriptionId")]
        public string SubscriptionId { get; private set; }

        /// <summary>
        /// Gets the name of the subscription that was used for the
        /// transaction. The field is only applicable for transaction of kind
        /// reservation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subscriptionName")]
        public string SubscriptionName { get; private set; }

        /// <summary>
        /// Gets the type of azure plan of the subscription that was used for
        /// the transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azurePlan")]
        public string AzurePlan { get; private set; }

        /// <summary>
        /// Gets the amount of any Azure credits automatically applied to this
        /// transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azureCreditApplied")]
        public Amount AzureCreditApplied { get; private set; }

        /// <summary>
        /// Gets the ISO 4217 code for the currency in which this transaction
        /// is billed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.billingCurrency")]
        public string BillingCurrency { get; private set; }

        /// <summary>
        /// Gets the percentage discount, if any, applied to this transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.discount")]
        public double? Discount { get; private set; }

        /// <summary>
        /// Gets the price of the product after applying any discounts.
        /// </summary>
        [JsonProperty(PropertyName = "properties.effectivePrice")]
        public Amount EffectivePrice { get; private set; }

        /// <summary>
        /// Gets the exchange rate used to convert charged amount to billing
        /// currency, if applicable.
        /// </summary>
        [JsonProperty(PropertyName = "properties.exchangeRate")]
        public double? ExchangeRate { get; private set; }

        /// <summary>
        /// Gets the retail price of the product.
        /// </summary>
        [JsonProperty(PropertyName = "properties.marketPrice")]
        public Amount MarketPrice { get; private set; }

        /// <summary>
        /// Gets the ISO 4217 code for the currency in which the product is
        /// priced.
        /// </summary>
        [JsonProperty(PropertyName = "properties.pricingCurrency")]
        public string PricingCurrency { get; private set; }

        /// <summary>
        /// Gets the date of the purchase of the product, or the start date of
        /// the month in which usage started.
        /// </summary>
        [JsonProperty(PropertyName = "properties.servicePeriodStartDate")]
        public System.DateTime? ServicePeriodStartDate { get; private set; }

        /// <summary>
        /// Gets the end date of the product term, or the end date of the month
        /// in which usage ended.
        /// </summary>
        [JsonProperty(PropertyName = "properties.servicePeriodEndDate")]
        public System.DateTime? ServicePeriodEndDate { get; private set; }

        /// <summary>
        /// Gets the pre-tax charged amount for the transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subTotal")]
        public Amount SubTotal { get; private set; }

        /// <summary>
        /// Gets the tax amount applied to the transaction.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tax")]
        public Amount Tax { get; private set; }

        /// <summary>
        /// Gets the unit of measure used to bill for the product. For example,
        /// compute services are billed per hour.
        /// </summary>
        [JsonProperty(PropertyName = "properties.unitOfMeasure")]
        public string UnitOfMeasure { get; private set; }

        /// <summary>
        /// Gets the number of units used for a given product.
        /// </summary>
        [JsonProperty(PropertyName = "properties.units")]
        public double? Units { get; private set; }

        /// <summary>
        /// Gets the description for the unit of measure for a given product.
        /// </summary>
        [JsonProperty(PropertyName = "properties.unitType")]
        public string UnitType { get; private set; }

    }
}
