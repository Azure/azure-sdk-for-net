// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Billing
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TransactionsOperations.
    /// </summary>
    public static partial class TransactionsOperationsExtensions
    {
            /// <summary>
            /// Lists the billed and unbilled transactions by customer id for given start
            /// date and end date. Transactions include purchases, refunds and Azure usage
            /// charges. Unbilled transactions are listed under pending invoice Id and do
            /// not include tax. Tax is added to the amount once an invoice is generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='customerName'>
            /// The ID that uniquely identifies a customer.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by transaction type. The filter supports 'eq', 'lt',
            /// 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
            /// 'not'. Tag filter is a key value pair string where key and value are
            /// separated by a colon (:).
            /// </param>
            public static IPage<Transaction> ListByCustomer(this ITransactionsOperations operations, string billingAccountName, string customerName, string periodStartDate, string periodEndDate, string filter = default(string))
            {
                return operations.ListByCustomerAsync(billingAccountName, customerName, periodStartDate, periodEndDate, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by customer id for given start
            /// date and end date. Transactions include purchases, refunds and Azure usage
            /// charges. Unbilled transactions are listed under pending invoice Id and do
            /// not include tax. Tax is added to the amount once an invoice is generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='customerName'>
            /// The ID that uniquely identifies a customer.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by transaction type. The filter supports 'eq', 'lt',
            /// 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
            /// 'not'. Tag filter is a key value pair string where key and value are
            /// separated by a colon (:).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Transaction>> ListByCustomerAsync(this ITransactionsOperations operations, string billingAccountName, string customerName, string periodStartDate, string periodEndDate, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByCustomerWithHttpMessagesAsync(billingAccountName, customerName, periodStartDate, periodEndDate, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by billing account name for
            /// given start and end date. Transactions include purchases, refunds and Azure
            /// usage charges. Unbilled transactions are listed under pending invoice ID
            /// and do not include tax. Tax is added to the amount once an invoice is
            /// generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by transaction type. The filter supports 'eq', 'lt',
            /// 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
            /// 'not'. Tag filter is a key value pair string where key and value are
            /// separated by a colon (:).
            /// </param>
            public static IPage<Transaction> ListByBillingAccount(this ITransactionsOperations operations, string billingAccountName, string periodStartDate, string periodEndDate, string filter = default(string))
            {
                return operations.ListByBillingAccountAsync(billingAccountName, periodStartDate, periodEndDate, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by billing account name for
            /// given start and end date. Transactions include purchases, refunds and Azure
            /// usage charges. Unbilled transactions are listed under pending invoice ID
            /// and do not include tax. Tax is added to the amount once an invoice is
            /// generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by transaction type. The filter supports 'eq', 'lt',
            /// 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
            /// 'not'. Tag filter is a key value pair string where key and value are
            /// separated by a colon (:).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Transaction>> ListByBillingAccountAsync(this ITransactionsOperations operations, string billingAccountName, string periodStartDate, string periodEndDate, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingAccountWithHttpMessagesAsync(billingAccountName, periodStartDate, periodEndDate, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by billing profile name for
            /// given start date and end date. Transactions include purchases, refunds and
            /// Azure usage charges. Unbilled transactions are listed under pending invoice
            /// Id and do not include tax. Tax is added to the amount once an invoice is
            /// generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by transaction type. The filter supports 'eq', 'lt',
            /// 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
            /// 'not'. Tag filter is a key value pair string where key and value are
            /// separated by a colon (:).
            /// </param>
            public static TransactionListResult ListByBillingProfile(this ITransactionsOperations operations, string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate, string filter = default(string))
            {
                return operations.ListByBillingProfileAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by billing profile name for
            /// given start date and end date. Transactions include purchases, refunds and
            /// Azure usage charges. Unbilled transactions are listed under pending invoice
            /// Id and do not include tax. Tax is added to the amount once an invoice is
            /// generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by transaction type. The filter supports 'eq', 'lt',
            /// 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
            /// 'not'. Tag filter is a key value pair string where key and value are
            /// separated by a colon (:).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransactionListResult> ListByBillingProfileAsync(this ITransactionsOperations operations, string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingProfileWithHttpMessagesAsync(billingAccountName, billingProfileName, periodStartDate, periodEndDate, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by invoice section name for
            /// given start date and end date. Transactions include purchases, refunds and
            /// Azure usage charges. Unbilled transactions are listed under pending invoice
            /// Id and do not include tax. Tax is added to the amount once an invoice is
            /// generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='invoiceSectionName'>
            /// The ID that uniquely identifies an invoice section.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by transaction type. The filter supports 'eq', 'lt',
            /// 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
            /// 'not'. Tag filter is a key value pair string where key and value are
            /// separated by a colon (:).
            /// </param>
            public static TransactionListResult ListByInvoiceSection(this ITransactionsOperations operations, string billingAccountName, string billingProfileName, string invoiceSectionName, string periodStartDate, string periodEndDate, string filter = default(string))
            {
                return operations.ListByInvoiceSectionAsync(billingAccountName, billingProfileName, invoiceSectionName, periodStartDate, periodEndDate, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by invoice section name for
            /// given start date and end date. Transactions include purchases, refunds and
            /// Azure usage charges. Unbilled transactions are listed under pending invoice
            /// Id and do not include tax. Tax is added to the amount once an invoice is
            /// generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='invoiceSectionName'>
            /// The ID that uniquely identifies an invoice section.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='filter'>
            /// May be used to filter by transaction type. The filter supports 'eq', 'lt',
            /// 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
            /// 'not'. Tag filter is a key value pair string where key and value are
            /// separated by a colon (:).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransactionListResult> ListByInvoiceSectionAsync(this ITransactionsOperations operations, string billingAccountName, string billingProfileName, string invoiceSectionName, string periodStartDate, string periodEndDate, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByInvoiceSectionWithHttpMessagesAsync(billingAccountName, billingProfileName, invoiceSectionName, periodStartDate, periodEndDate, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the transactions for an invoice. Transactions include purchases,
            /// refunds and Azure usage charges.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='invoiceName'>
            /// The ID that uniquely identifies an invoice.
            /// </param>
            public static IPage<Transaction> ListByInvoice(this ITransactionsOperations operations, string billingAccountName, string billingProfileName, string invoiceName)
            {
                return operations.ListByInvoiceAsync(billingAccountName, billingProfileName, invoiceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the transactions for an invoice. Transactions include purchases,
            /// refunds and Azure usage charges.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='invoiceName'>
            /// The ID that uniquely identifies an invoice.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Transaction>> ListByInvoiceAsync(this ITransactionsOperations operations, string billingAccountName, string billingProfileName, string invoiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByInvoiceWithHttpMessagesAsync(billingAccountName, billingProfileName, invoiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a transaction by ID. The operation is supported for billing accounts
            /// with agreement type Microsoft Customer Agreement or Microsoft Partner
            /// Agreement.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='transactionName'>
            /// The ID that uniquely identifies a transaction.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            public static Transaction Get(this ITransactionsOperations operations, string billingAccountName, string billingProfileName, string transactionName, string periodStartDate, string periodEndDate)
            {
                return operations.GetAsync(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a transaction by ID. The operation is supported for billing accounts
            /// with agreement type Microsoft Customer Agreement or Microsoft Partner
            /// Agreement.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='billingAccountName'>
            /// The ID that uniquely identifies a billing account.
            /// </param>
            /// <param name='billingProfileName'>
            /// The ID that uniquely identifies a billing profile.
            /// </param>
            /// <param name='transactionName'>
            /// The ID that uniquely identifies a transaction.
            /// </param>
            /// <param name='periodStartDate'>
            /// The start date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='periodEndDate'>
            /// The end date to fetch the transactions. The date should be specified in
            /// MM-DD-YYYY format.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Transaction> GetAsync(this ITransactionsOperations operations, string billingAccountName, string billingProfileName, string transactionName, string periodStartDate, string periodEndDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(billingAccountName, billingProfileName, transactionName, periodStartDate, periodEndDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by customer id for given start
            /// date and end date. Transactions include purchases, refunds and Azure usage
            /// charges. Unbilled transactions are listed under pending invoice Id and do
            /// not include tax. Tax is added to the amount once an invoice is generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Transaction> ListByCustomerNext(this ITransactionsOperations operations, string nextPageLink)
            {
                return operations.ListByCustomerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by customer id for given start
            /// date and end date. Transactions include purchases, refunds and Azure usage
            /// charges. Unbilled transactions are listed under pending invoice Id and do
            /// not include tax. Tax is added to the amount once an invoice is generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Transaction>> ListByCustomerNextAsync(this ITransactionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByCustomerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by billing account name for
            /// given start and end date. Transactions include purchases, refunds and Azure
            /// usage charges. Unbilled transactions are listed under pending invoice ID
            /// and do not include tax. Tax is added to the amount once an invoice is
            /// generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Transaction> ListByBillingAccountNext(this ITransactionsOperations operations, string nextPageLink)
            {
                return operations.ListByBillingAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the billed and unbilled transactions by billing account name for
            /// given start and end date. Transactions include purchases, refunds and Azure
            /// usage charges. Unbilled transactions are listed under pending invoice ID
            /// and do not include tax. Tax is added to the amount once an invoice is
            /// generated.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Transaction>> ListByBillingAccountNextAsync(this ITransactionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBillingAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the transactions for an invoice. Transactions include purchases,
            /// refunds and Azure usage charges.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Transaction> ListByInvoiceNext(this ITransactionsOperations operations, string nextPageLink)
            {
                return operations.ListByInvoiceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the transactions for an invoice. Transactions include purchases,
            /// refunds and Azure usage charges.
            /// <see href="https://docs.microsoft.com/en-us/rest/api/billing/" />
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Transaction>> ListByInvoiceNextAsync(this ITransactionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByInvoiceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
