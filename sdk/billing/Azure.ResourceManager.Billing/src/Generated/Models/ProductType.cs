// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The type of product that is transferred. </summary>
    public readonly partial struct ProductType : IEquatable<ProductType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProductType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureSubscriptionValue = "AzureSubscription";
        private const string AzureReservationValue = "AzureReservation";
        private const string DepartmentValue = "Department";
        private const string SavingsPlanValue = "SavingsPlan";
        private const string SaasValue = "SAAS";

        /// <summary> AzureSubscription. </summary>
        public static ProductType AzureSubscription { get; } = new ProductType(AzureSubscriptionValue);
        /// <summary> AzureReservation. </summary>
        public static ProductType AzureReservation { get; } = new ProductType(AzureReservationValue);
        /// <summary> Department. </summary>
        public static ProductType Department { get; } = new ProductType(DepartmentValue);
        /// <summary> SavingsPlan. </summary>
        public static ProductType SavingsPlan { get; } = new ProductType(SavingsPlanValue);
        /// <summary> SAAS. </summary>
        public static ProductType Saas { get; } = new ProductType(SaasValue);
        /// <summary> Determines if two <see cref="ProductType"/> values are the same. </summary>
        public static bool operator ==(ProductType left, ProductType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProductType"/> values are not the same. </summary>
        public static bool operator !=(ProductType left, ProductType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProductType"/>. </summary>
        public static implicit operator ProductType(string value) => new ProductType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProductType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProductType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
