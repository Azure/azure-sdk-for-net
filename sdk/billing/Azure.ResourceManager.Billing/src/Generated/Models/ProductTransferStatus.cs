// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The status of a transfer. </summary>
    public readonly partial struct ProductTransferStatus : IEquatable<ProductTransferStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProductTransferStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProductTransferStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotStartedValue = "NotStarted";
        private const string InProgressValue = "InProgress";
        private const string CompletedValue = "Completed";
        private const string FailedValue = "Failed";

        /// <summary> NotStarted. </summary>
        public static ProductTransferStatus NotStarted { get; } = new ProductTransferStatus(NotStartedValue);
        /// <summary> InProgress. </summary>
        public static ProductTransferStatus InProgress { get; } = new ProductTransferStatus(InProgressValue);
        /// <summary> Completed. </summary>
        public static ProductTransferStatus Completed { get; } = new ProductTransferStatus(CompletedValue);
        /// <summary> Failed. </summary>
        public static ProductTransferStatus Failed { get; } = new ProductTransferStatus(FailedValue);
        /// <summary> Determines if two <see cref="ProductTransferStatus"/> values are the same. </summary>
        public static bool operator ==(ProductTransferStatus left, ProductTransferStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProductTransferStatus"/> values are not the same. </summary>
        public static bool operator !=(ProductTransferStatus left, ProductTransferStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProductTransferStatus"/>. </summary>
        public static implicit operator ProductTransferStatus(string value) => new ProductTransferStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProductTransferStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProductTransferStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
