// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> Markup status of enrollment, applicable only for indirect enrollments. </summary>
    public readonly partial struct MarkupStatus : IEquatable<MarkupStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MarkupStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MarkupStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string DisabledValue = "Disabled";
        private const string PreviewValue = "Preview";
        private const string PublishedValue = "Published";
        private const string LockedValue = "Locked";

        /// <summary> Other. </summary>
        public static MarkupStatus Other { get; } = new MarkupStatus(OtherValue);
        /// <summary> Disabled. </summary>
        public static MarkupStatus Disabled { get; } = new MarkupStatus(DisabledValue);
        /// <summary> Preview. </summary>
        public static MarkupStatus Preview { get; } = new MarkupStatus(PreviewValue);
        /// <summary> Published. </summary>
        public static MarkupStatus Published { get; } = new MarkupStatus(PublishedValue);
        /// <summary> Locked. </summary>
        public static MarkupStatus Locked { get; } = new MarkupStatus(LockedValue);
        /// <summary> Determines if two <see cref="MarkupStatus"/> values are the same. </summary>
        public static bool operator ==(MarkupStatus left, MarkupStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MarkupStatus"/> values are not the same. </summary>
        public static bool operator !=(MarkupStatus left, MarkupStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MarkupStatus"/>. </summary>
        public static implicit operator MarkupStatus(string value) => new MarkupStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MarkupStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MarkupStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
