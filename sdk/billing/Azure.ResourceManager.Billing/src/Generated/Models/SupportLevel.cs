// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The support level offer associated with an enrollment. </summary>
    public readonly partial struct SupportLevel : IEquatable<SupportLevel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SupportLevel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SupportLevel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string StandardValue = "Standard";
        private const string ProDirectValue = "Pro-Direct";
        private const string DeveloperValue = "Developer";

        /// <summary> Other. </summary>
        public static SupportLevel Other { get; } = new SupportLevel(OtherValue);
        /// <summary> Standard. </summary>
        public static SupportLevel Standard { get; } = new SupportLevel(StandardValue);
        /// <summary> Pro-Direct. </summary>
        public static SupportLevel ProDirect { get; } = new SupportLevel(ProDirectValue);
        /// <summary> Developer. </summary>
        public static SupportLevel Developer { get; } = new SupportLevel(DeveloperValue);
        /// <summary> Determines if two <see cref="SupportLevel"/> values are the same. </summary>
        public static bool operator ==(SupportLevel left, SupportLevel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SupportLevel"/> values are not the same. </summary>
        public static bool operator !=(SupportLevel left, SupportLevel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SupportLevel"/>. </summary>
        public static implicit operator SupportLevel(string value) => new SupportLevel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SupportLevel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SupportLevel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
