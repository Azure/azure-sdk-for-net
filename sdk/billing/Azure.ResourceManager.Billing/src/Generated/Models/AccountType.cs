// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The type of customer. </summary>
    public readonly partial struct AccountType : IEquatable<AccountType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccountType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string EnterpriseValue = "Enterprise";
        private const string IndividualValue = "Individual";
        private const string PartnerValue = "Partner";
        private const string ResellerValue = "Reseller";
        private const string ClassicPartnerValue = "ClassicPartner";
        private const string InternalValue = "Internal";
        private const string TenantValue = "Tenant";
        private const string BusinessValue = "Business";

        /// <summary> Other. </summary>
        public static AccountType Other { get; } = new AccountType(OtherValue);
        /// <summary> Enterprise. </summary>
        public static AccountType Enterprise { get; } = new AccountType(EnterpriseValue);
        /// <summary> Individual. </summary>
        public static AccountType Individual { get; } = new AccountType(IndividualValue);
        /// <summary> Partner. </summary>
        public static AccountType Partner { get; } = new AccountType(PartnerValue);
        /// <summary> Reseller. </summary>
        public static AccountType Reseller { get; } = new AccountType(ResellerValue);
        /// <summary> ClassicPartner. </summary>
        public static AccountType ClassicPartner { get; } = new AccountType(ClassicPartnerValue);
        /// <summary> Internal. </summary>
        public static AccountType Internal { get; } = new AccountType(InternalValue);
        /// <summary> Tenant. </summary>
        public static AccountType Tenant { get; } = new AccountType(TenantValue);
        /// <summary> Business. </summary>
        public static AccountType Business { get; } = new AccountType(BusinessValue);
        /// <summary> Determines if two <see cref="AccountType"/> values are the same. </summary>
        public static bool operator ==(AccountType left, AccountType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccountType"/> values are not the same. </summary>
        public static bool operator !=(AccountType left, AccountType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccountType"/>. </summary>
        public static implicit operator AccountType(string value) => new AccountType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccountType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccountType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
