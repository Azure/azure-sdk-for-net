// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The tier of the account. </summary>
    public readonly partial struct AccountSubType : IEquatable<AccountSubType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccountSubType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccountSubType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string NoneValue = "None";
        private const string IndividualValue = "Individual";
        private const string ProfessionalValue = "Professional";
        private const string EnterpriseValue = "Enterprise";

        /// <summary> Other. </summary>
        public static AccountSubType Other { get; } = new AccountSubType(OtherValue);
        /// <summary> None. </summary>
        public static AccountSubType None { get; } = new AccountSubType(NoneValue);
        /// <summary> Individual. </summary>
        public static AccountSubType Individual { get; } = new AccountSubType(IndividualValue);
        /// <summary> Professional. </summary>
        public static AccountSubType Professional { get; } = new AccountSubType(ProfessionalValue);
        /// <summary> Enterprise. </summary>
        public static AccountSubType Enterprise { get; } = new AccountSubType(EnterpriseValue);
        /// <summary> Determines if two <see cref="AccountSubType"/> values are the same. </summary>
        public static bool operator ==(AccountSubType left, AccountSubType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccountSubType"/> values are not the same. </summary>
        public static bool operator !=(AccountSubType left, AccountSubType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccountSubType"/>. </summary>
        public static implicit operator AccountSubType(string value) => new AccountSubType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccountSubType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccountSubType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
