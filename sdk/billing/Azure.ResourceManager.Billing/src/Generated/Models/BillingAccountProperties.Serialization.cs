// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class BillingAccountProperties : IUtf8JsonSerializable, IJsonModel<BillingAccountProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BillingAccountProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BillingAccountProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingAccountProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingAccountProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AccountStatus))
            {
                writer.WritePropertyName("accountStatus"u8);
                writer.WriteStringValue(AccountStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AccountType))
            {
                writer.WritePropertyName("accountType"u8);
                writer.WriteStringValue(AccountType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AccountSubType))
            {
                writer.WritePropertyName("accountSubType"u8);
                writer.WriteStringValue(AccountSubType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AccountStatusReasonCode))
            {
                writer.WritePropertyName("accountStatusReasonCode"u8);
                writer.WriteStringValue(AccountStatusReasonCode.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AgreementType))
            {
                writer.WritePropertyName("agreementType"u8);
                writer.WriteStringValue(AgreementType.Value.ToString());
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(EnrollmentDetails))
            {
                writer.WritePropertyName("enrollmentDetails"u8);
                writer.WriteObjectValue(EnrollmentDetails, options);
            }
            if (Optional.IsDefined(HasReadAccess))
            {
                writer.WritePropertyName("hasReadAccess"u8);
                writer.WriteBooleanValue(HasReadAccess.Value);
            }
            if (Optional.IsDefined(HasNoBillingProfiles))
            {
                writer.WritePropertyName("hasNoBillingProfiles"u8);
                writer.WriteBooleanValue(HasNoBillingProfiles.Value);
            }
            if (Optional.IsDefined(NotificationEmailAddress))
            {
                writer.WritePropertyName("notificationEmailAddress"u8);
                writer.WriteStringValue(NotificationEmailAddress);
            }
            if (Optional.IsDefined(PrimaryBillingTenantId))
            {
                writer.WritePropertyName("primaryBillingTenantId"u8);
                writer.WriteStringValue(PrimaryBillingTenantId.Value);
            }
            if (Optional.IsDefined(SoldTo))
            {
                writer.WritePropertyName("soldTo"u8);
                writer.WriteObjectValue(SoldTo, options);
            }
            if (Optional.IsDefined(RegistrationNumber))
            {
                writer.WritePropertyName("registrationNumber"u8);
                writer.WriteObjectValue(RegistrationNumber, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(BillingRelationshipTypes))
            {
                writer.WritePropertyName("billingRelationshipTypes"u8);
                writer.WriteStartArray();
                foreach (var item in BillingRelationshipTypes)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(Qualifications))
            {
                writer.WritePropertyName("qualifications"u8);
                writer.WriteStartArray();
                foreach (var item in Qualifications)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TaxIds))
            {
                writer.WritePropertyName("taxIds"u8);
                writer.WriteStartArray();
                foreach (var item in TaxIds)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BillingAccountProperties IJsonModel<BillingAccountProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingAccountProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingAccountProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBillingAccountProperties(document.RootElement, options);
        }

        internal static BillingAccountProperties DeserializeBillingAccountProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            BillingProvisioningState? provisioningState = default;
            BillingAccountStatus? accountStatus = default;
            BillingAccountType? accountType = default;
            BillingAccountSubType? accountSubType = default;
            BillingAccountStatusReasonCode? accountStatusReasonCode = default;
            BillingAgreementType? agreementType = default;
            string displayName = default;
            BillingAccountEnrollmentDetails enrollmentDetails = default;
            bool? hasReadAccess = default;
            bool? hasNoBillingProfiles = default;
            string notificationEmailAddress = default;
            Guid? primaryBillingTenantId = default;
            BillingAddressDetails soldTo = default;
            BillingRegistrationNumber registrationNumber = default;
            IReadOnlyList<BillingRelationshipType> billingRelationshipTypes = default;
            IReadOnlyList<string> qualifications = default;
            IList<BillingTaxIdentifier> taxIds = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new BillingProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("accountStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    accountStatus = new BillingAccountStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("accountType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    accountType = new BillingAccountType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("accountSubType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    accountSubType = new BillingAccountSubType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("accountStatusReasonCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    accountStatusReasonCode = new BillingAccountStatusReasonCode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("agreementType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    agreementType = new BillingAgreementType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enrollmentDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enrollmentDetails = BillingAccountEnrollmentDetails.DeserializeBillingAccountEnrollmentDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("hasReadAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasReadAccess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("hasNoBillingProfiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasNoBillingProfiles = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("notificationEmailAddress"u8))
                {
                    notificationEmailAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primaryBillingTenantId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    primaryBillingTenantId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("soldTo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    soldTo = BillingAddressDetails.DeserializeBillingAddressDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("registrationNumber"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    registrationNumber = BillingRegistrationNumber.DeserializeBillingRegistrationNumber(property.Value, options);
                    continue;
                }
                if (property.NameEquals("billingRelationshipTypes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BillingRelationshipType> array = new List<BillingRelationshipType>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new BillingRelationshipType(item.GetString()));
                    }
                    billingRelationshipTypes = array;
                    continue;
                }
                if (property.NameEquals("qualifications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    qualifications = array;
                    continue;
                }
                if (property.NameEquals("taxIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BillingTaxIdentifier> array = new List<BillingTaxIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BillingTaxIdentifier.DeserializeBillingTaxIdentifier(item, options));
                    }
                    taxIds = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BillingAccountProperties(
                provisioningState,
                accountStatus,
                accountType,
                accountSubType,
                accountStatusReasonCode,
                agreementType,
                displayName,
                enrollmentDetails,
                hasReadAccess,
                hasNoBillingProfiles,
                notificationEmailAddress,
                primaryBillingTenantId,
                soldTo,
                registrationNumber,
                billingRelationshipTypes ?? new ChangeTrackingList<BillingRelationshipType>(),
                qualifications ?? new ChangeTrackingList<string>(),
                taxIds ?? new ChangeTrackingList<BillingTaxIdentifier>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BillingAccountProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingAccountProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(BillingAccountProperties)} does not support writing '{options.Format}' format.");
            }
        }

        BillingAccountProperties IPersistableModel<BillingAccountProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingAccountProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBillingAccountProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BillingAccountProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BillingAccountProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
