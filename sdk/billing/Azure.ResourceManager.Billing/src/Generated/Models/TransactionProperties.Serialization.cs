// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class TransactionProperties : IUtf8JsonSerializable, IJsonModel<TransactionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<TransactionProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<TransactionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TransactionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TransactionProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(AzureCreditApplied))
            {
                writer.WritePropertyName("azureCreditApplied"u8);
                writer.WriteObjectValue(AzureCreditApplied, options);
            }
            if (Optional.IsDefined(AzurePlan))
            {
                writer.WritePropertyName("azurePlan"u8);
                writer.WriteStringValue(AzurePlan);
            }
            if (Optional.IsDefined(BillingCurrency))
            {
                writer.WritePropertyName("billingCurrency"u8);
                writer.WriteStringValue(BillingCurrency);
            }
            if (Optional.IsDefined(BillingProfileDisplayName))
            {
                writer.WritePropertyName("billingProfileDisplayName"u8);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(BillingProfileDisplayName);
#else
                using (JsonDocument document = JsonDocument.Parse(BillingProfileDisplayName))
                {
                    JsonSerializer.Serialize(writer, document.RootElement);
                }
#endif
            }
            if (Optional.IsDefined(BillingProfileId))
            {
                writer.WritePropertyName("billingProfileId"u8);
                writer.WriteStringValue(BillingProfileId);
            }
            if (Optional.IsDefined(ConsumptionCommitmentDecremented))
            {
                writer.WritePropertyName("consumptionCommitmentDecremented"u8);
                writer.WriteObjectValue(ConsumptionCommitmentDecremented, options);
            }
            if (Optional.IsDefined(CustomerDisplayName))
            {
                writer.WritePropertyName("customerDisplayName"u8);
                writer.WriteStringValue(CustomerDisplayName);
            }
            if (Optional.IsDefined(CustomerId))
            {
                writer.WritePropertyName("customerId"u8);
                writer.WriteStringValue(CustomerId);
            }
            if (Optional.IsDefined(CreditType))
            {
                writer.WritePropertyName("creditType"u8);
                writer.WriteStringValue(CreditType.Value.ToString());
            }
            if (Optional.IsDefined(On))
            {
                writer.WritePropertyName("date"u8);
                writer.WriteStringValue(On.Value, "O");
            }
            if (Optional.IsDefined(Discount))
            {
                writer.WritePropertyName("discount"u8);
                writer.WriteNumberValue(Discount.Value);
            }
            if (Optional.IsDefined(EffectivePrice))
            {
                writer.WritePropertyName("effectivePrice"u8);
                writer.WriteObjectValue(EffectivePrice, options);
            }
            if (Optional.IsDefined(ExchangeRate))
            {
                writer.WritePropertyName("exchangeRate"u8);
                writer.WriteNumberValue(ExchangeRate.Value);
            }
            if (Optional.IsDefined(Invoice))
            {
                writer.WritePropertyName("invoice"u8);
                writer.WriteStringValue(Invoice);
            }
            if (Optional.IsDefined(InvoiceId))
            {
                writer.WritePropertyName("invoiceId"u8);
                writer.WriteStringValue(InvoiceId);
            }
            if (Optional.IsDefined(InvoiceSectionDisplayName))
            {
                writer.WritePropertyName("invoiceSectionDisplayName"u8);
                writer.WriteStringValue(InvoiceSectionDisplayName);
            }
            if (Optional.IsDefined(InvoiceSectionId))
            {
                writer.WritePropertyName("invoiceSectionId"u8);
                writer.WriteStringValue(InvoiceSectionId);
            }
            if (Optional.IsDefined(IsThirdParty))
            {
                writer.WritePropertyName("isThirdParty"u8);
                writer.WriteBooleanValue(IsThirdParty.Value);
            }
            if (Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind.Value.ToString());
            }
            if (Optional.IsDefined(MarketPrice))
            {
                writer.WritePropertyName("marketPrice"u8);
                writer.WriteObjectValue(MarketPrice, options);
            }
            if (Optional.IsDefined(PartNumber))
            {
                writer.WritePropertyName("partNumber"u8);
                writer.WriteStringValue(PartNumber);
            }
            if (Optional.IsDefined(PricingCurrency))
            {
                writer.WritePropertyName("pricingCurrency"u8);
                writer.WriteStringValue(PricingCurrency);
            }
            if (Optional.IsDefined(ProductDescription))
            {
                writer.WritePropertyName("productDescription"u8);
                writer.WriteStringValue(ProductDescription);
            }
            if (Optional.IsDefined(ProductFamily))
            {
                writer.WritePropertyName("productFamily"u8);
                writer.WriteStringValue(ProductFamily);
            }
            if (Optional.IsDefined(ProductTypeId))
            {
                writer.WritePropertyName("productTypeId"u8);
                writer.WriteStringValue(ProductTypeId);
            }
            if (Optional.IsDefined(ProductType))
            {
                writer.WritePropertyName("productType"u8);
                writer.WriteStringValue(ProductType);
            }
            if (Optional.IsDefined(Quantity))
            {
                writer.WritePropertyName("quantity"u8);
                writer.WriteNumberValue(Quantity.Value);
            }
            if (Optional.IsDefined(ReasonCode))
            {
                writer.WritePropertyName("reasonCode"u8);
                writer.WriteStringValue(ReasonCode);
            }
            if (Optional.IsDefined(ServicePeriodStartOn))
            {
                writer.WritePropertyName("servicePeriodStartDate"u8);
                writer.WriteStringValue(ServicePeriodStartOn.Value, "O");
            }
            if (Optional.IsDefined(ServicePeriodEndOn))
            {
                writer.WritePropertyName("servicePeriodEndDate"u8);
                writer.WriteStringValue(ServicePeriodEndOn.Value, "O");
            }
            if (Optional.IsDefined(SubTotal))
            {
                writer.WritePropertyName("subTotal"u8);
                writer.WriteObjectValue(SubTotal, options);
            }
            if (Optional.IsDefined(Tax))
            {
                writer.WritePropertyName("tax"u8);
                writer.WriteObjectValue(Tax, options);
            }
            if (Optional.IsDefined(TransactionAmount))
            {
                writer.WritePropertyName("transactionAmount"u8);
                writer.WriteObjectValue(TransactionAmount, options);
            }
            if (Optional.IsDefined(TransactionType))
            {
                writer.WritePropertyName("transactionType"u8);
                writer.WriteStringValue(TransactionType);
            }
            if (Optional.IsDefined(Units))
            {
                writer.WritePropertyName("units"u8);
                writer.WriteNumberValue(Units.Value);
            }
            if (Optional.IsDefined(UnitOfMeasure))
            {
                writer.WritePropertyName("unitOfMeasure"u8);
                writer.WriteStringValue(UnitOfMeasure);
            }
            if (Optional.IsDefined(UnitType))
            {
                writer.WritePropertyName("unitType"u8);
                writer.WriteStringValue(UnitType);
            }
            if (Optional.IsDefined(SpecialTaxationType))
            {
                writer.WritePropertyName("specialTaxationType"u8);
                writer.WriteStringValue(SpecialTaxationType.Value.ToString());
            }
            if (Optional.IsDefined(RefundTransactionDetails))
            {
                writer.WritePropertyName("refundTransactionDetails"u8);
                writer.WriteObjectValue(RefundTransactionDetails, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        TransactionProperties IJsonModel<TransactionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TransactionProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(TransactionProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeTransactionProperties(document.RootElement, options);
        }

        internal static TransactionProperties DeserializeTransactionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            TransactionPropertiesAzureCreditApplied azureCreditApplied = default;
            string azurePlan = default;
            string billingCurrency = default;
            BinaryData billingProfileDisplayName = default;
            string billingProfileId = default;
            TransactionPropertiesConsumptionCommitmentDecremented consumptionCommitmentDecremented = default;
            string customerDisplayName = default;
            string customerId = default;
            CreditType? creditType = default;
            DateTimeOffset? date = default;
            float? discount = default;
            TransactionPropertiesEffectivePrice effectivePrice = default;
            float? exchangeRate = default;
            string invoice = default;
            string invoiceId = default;
            string invoiceSectionDisplayName = default;
            string invoiceSectionId = default;
            bool? isThirdParty = default;
            TransactionKind? kind = default;
            TransactionPropertiesMarketPrice marketPrice = default;
            string partNumber = default;
            string pricingCurrency = default;
            string productDescription = default;
            string productFamily = default;
            string productTypeId = default;
            string productType = default;
            int? quantity = default;
            string reasonCode = default;
            DateTimeOffset? servicePeriodStartDate = default;
            DateTimeOffset? servicePeriodEndDate = default;
            TransactionPropertiesSubTotal subTotal = default;
            TransactionPropertiesTax tax = default;
            TransactionPropertiesTransactionAmount transactionAmount = default;
            string transactionType = default;
            float? units = default;
            string unitOfMeasure = default;
            string unitType = default;
            SpecialTaxationType? specialTaxationType = default;
            TransactionPropertiesRefundTransactionDetails refundTransactionDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("azureCreditApplied"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureCreditApplied = TransactionPropertiesAzureCreditApplied.DeserializeTransactionPropertiesAzureCreditApplied(property.Value, options);
                    continue;
                }
                if (property.NameEquals("azurePlan"u8))
                {
                    azurePlan = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("billingCurrency"u8))
                {
                    billingCurrency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("billingProfileDisplayName"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    billingProfileDisplayName = BinaryData.FromString(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("billingProfileId"u8))
                {
                    billingProfileId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("consumptionCommitmentDecremented"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    consumptionCommitmentDecremented = TransactionPropertiesConsumptionCommitmentDecremented.DeserializeTransactionPropertiesConsumptionCommitmentDecremented(property.Value, options);
                    continue;
                }
                if (property.NameEquals("customerDisplayName"u8))
                {
                    customerDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerId"u8))
                {
                    customerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("creditType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    creditType = new CreditType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("date"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    date = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("discount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    discount = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("effectivePrice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    effectivePrice = TransactionPropertiesEffectivePrice.DeserializeTransactionPropertiesEffectivePrice(property.Value, options);
                    continue;
                }
                if (property.NameEquals("exchangeRate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exchangeRate = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("invoice"u8))
                {
                    invoice = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("invoiceId"u8))
                {
                    invoiceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("invoiceSectionDisplayName"u8))
                {
                    invoiceSectionDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("invoiceSectionId"u8))
                {
                    invoiceSectionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isThirdParty"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isThirdParty = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    kind = new TransactionKind(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("marketPrice"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    marketPrice = TransactionPropertiesMarketPrice.DeserializeTransactionPropertiesMarketPrice(property.Value, options);
                    continue;
                }
                if (property.NameEquals("partNumber"u8))
                {
                    partNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("pricingCurrency"u8))
                {
                    pricingCurrency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productDescription"u8))
                {
                    productDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productFamily"u8))
                {
                    productFamily = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productTypeId"u8))
                {
                    productTypeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productType"u8))
                {
                    productType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("quantity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    quantity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("reasonCode"u8))
                {
                    reasonCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("servicePeriodStartDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    servicePeriodStartDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("servicePeriodEndDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    servicePeriodEndDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("subTotal"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    subTotal = TransactionPropertiesSubTotal.DeserializeTransactionPropertiesSubTotal(property.Value, options);
                    continue;
                }
                if (property.NameEquals("tax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tax = TransactionPropertiesTax.DeserializeTransactionPropertiesTax(property.Value, options);
                    continue;
                }
                if (property.NameEquals("transactionAmount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    transactionAmount = TransactionPropertiesTransactionAmount.DeserializeTransactionPropertiesTransactionAmount(property.Value, options);
                    continue;
                }
                if (property.NameEquals("transactionType"u8))
                {
                    transactionType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("units"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    units = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("unitOfMeasure"u8))
                {
                    unitOfMeasure = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("unitType"u8))
                {
                    unitType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("specialTaxationType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    specialTaxationType = new SpecialTaxationType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("refundTransactionDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    refundTransactionDetails = TransactionPropertiesRefundTransactionDetails.DeserializeTransactionPropertiesRefundTransactionDetails(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new TransactionProperties(
                azureCreditApplied,
                azurePlan,
                billingCurrency,
                billingProfileDisplayName,
                billingProfileId,
                consumptionCommitmentDecremented,
                customerDisplayName,
                customerId,
                creditType,
                date,
                discount,
                effectivePrice,
                exchangeRate,
                invoice,
                invoiceId,
                invoiceSectionDisplayName,
                invoiceSectionId,
                isThirdParty,
                kind,
                marketPrice,
                partNumber,
                pricingCurrency,
                productDescription,
                productFamily,
                productTypeId,
                productType,
                quantity,
                reasonCode,
                servicePeriodStartDate,
                servicePeriodEndDate,
                subTotal,
                tax,
                transactionAmount,
                transactionType,
                units,
                unitOfMeasure,
                unitType,
                specialTaxationType,
                refundTransactionDetails,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<TransactionProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TransactionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(TransactionProperties)} does not support writing '{options.Format}' format.");
            }
        }

        TransactionProperties IPersistableModel<TransactionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<TransactionProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeTransactionProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(TransactionProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<TransactionProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
