// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> Invoice type. </summary>
    public readonly partial struct InvoiceType : IEquatable<InvoiceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InvoiceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InvoiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string AzureServicesValue = "AzureServices";
        private const string AzureMarketplaceValue = "AzureMarketplace";
        private const string AzureSupportValue = "AzureSupport";

        /// <summary> Other. </summary>
        public static InvoiceType Other { get; } = new InvoiceType(OtherValue);
        /// <summary> AzureServices. </summary>
        public static InvoiceType AzureServices { get; } = new InvoiceType(AzureServicesValue);
        /// <summary> AzureMarketplace. </summary>
        public static InvoiceType AzureMarketplace { get; } = new InvoiceType(AzureMarketplaceValue);
        /// <summary> AzureSupport. </summary>
        public static InvoiceType AzureSupport { get; } = new InvoiceType(AzureSupportValue);
        /// <summary> Determines if two <see cref="InvoiceType"/> values are the same. </summary>
        public static bool operator ==(InvoiceType left, InvoiceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InvoiceType"/> values are not the same. </summary>
        public static bool operator !=(InvoiceType left, InvoiceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="InvoiceType"/>. </summary>
        public static implicit operator InvoiceType(string value) => new InvoiceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InvoiceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InvoiceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
