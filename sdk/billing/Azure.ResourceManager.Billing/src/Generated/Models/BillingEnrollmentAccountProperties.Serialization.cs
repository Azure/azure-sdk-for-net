// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class BillingEnrollmentAccountProperties : IUtf8JsonSerializable, IJsonModel<BillingEnrollmentAccountProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BillingEnrollmentAccountProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BillingEnrollmentAccountProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingEnrollmentAccountProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingEnrollmentAccountProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(CostCenter))
            {
                writer.WritePropertyName("costCenter"u8);
                writer.WriteStringValue(CostCenter);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(DepartmentDisplayName))
            {
                writer.WritePropertyName("departmentDisplayName"u8);
                writer.WriteStringValue(DepartmentDisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(DepartmentId))
            {
                writer.WritePropertyName("departmentId"u8);
                writer.WriteStringValue(DepartmentId);
            }
            if (Optional.IsDefined(IsDevTestEnabled))
            {
                writer.WritePropertyName("isDevTestEnabled"u8);
                writer.WriteBooleanValue(IsDevTestEnabled.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AccountOwner))
            {
                writer.WritePropertyName("accountOwner"u8);
                writer.WriteStringValue(AccountOwner);
            }
            if (options.Format != "W" && Optional.IsDefined(AuthType))
            {
                writer.WritePropertyName("authType"u8);
                writer.WriteStringValue(AuthType);
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status);
            }
            if (options.Format != "W" && Optional.IsDefined(StartOn))
            {
                writer.WritePropertyName("startDate"u8);
                writer.WriteStringValue(StartOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endDate"u8);
                writer.WriteStringValue(EndOn.Value, "O");
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BillingEnrollmentAccountProperties IJsonModel<BillingEnrollmentAccountProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingEnrollmentAccountProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingEnrollmentAccountProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBillingEnrollmentAccountProperties(document.RootElement, options);
        }

        internal static BillingEnrollmentAccountProperties DeserializeBillingEnrollmentAccountProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string costCenter = default;
            string displayName = default;
            string departmentDisplayName = default;
            string departmentId = default;
            bool? isDevTestEnabled = default;
            string accountOwner = default;
            string authType = default;
            string status = default;
            DateTimeOffset? startDate = default;
            DateTimeOffset? endDate = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("costCenter"u8))
                {
                    costCenter = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("departmentDisplayName"u8))
                {
                    departmentDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("departmentId"u8))
                {
                    departmentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isDevTestEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isDevTestEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("accountOwner"u8))
                {
                    accountOwner = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authType"u8))
                {
                    authType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BillingEnrollmentAccountProperties(
                costCenter,
                displayName,
                departmentDisplayName,
                departmentId,
                isDevTestEnabled,
                accountOwner,
                authType,
                status,
                startDate,
                endDate,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BillingEnrollmentAccountProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingEnrollmentAccountProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(BillingEnrollmentAccountProperties)} does not support writing '{options.Format}' format.");
            }
        }

        BillingEnrollmentAccountProperties IPersistableModel<BillingEnrollmentAccountProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingEnrollmentAccountProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBillingEnrollmentAccountProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BillingEnrollmentAccountProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BillingEnrollmentAccountProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
