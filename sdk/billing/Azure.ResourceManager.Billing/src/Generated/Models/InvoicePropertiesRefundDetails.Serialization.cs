// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class InvoicePropertiesRefundDetails : IUtf8JsonSerializable, IJsonModel<InvoicePropertiesRefundDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InvoicePropertiesRefundDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<InvoicePropertiesRefundDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InvoicePropertiesRefundDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InvoicePropertiesRefundDetails)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(RequestedOn))
            {
                writer.WritePropertyName("requestedOn"u8);
                writer.WriteStringValue(RequestedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ApprovedOn))
            {
                writer.WritePropertyName("approvedOn"u8);
                writer.WriteStringValue(ApprovedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CompletedOn))
            {
                writer.WritePropertyName("completedOn"u8);
                writer.WriteStringValue(CompletedOn.Value, "O");
            }
            if (Optional.IsDefined(AmountRequested))
            {
                writer.WritePropertyName("amountRequested"u8);
                writer.WriteObjectValue(AmountRequested, options);
            }
            if (Optional.IsDefined(AmountRefunded))
            {
                writer.WritePropertyName("amountRefunded"u8);
                writer.WriteObjectValue(AmountRefunded, options);
            }
            if (options.Format != "W" && Optional.IsDefined(RebillInvoiceId))
            {
                writer.WritePropertyName("rebillInvoiceId"u8);
                writer.WriteStringValue(RebillInvoiceId);
            }
            if (options.Format != "W" && Optional.IsDefined(TransactionCount))
            {
                writer.WritePropertyName("transactionCount"u8);
                writer.WriteNumberValue(TransactionCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RefundStatus))
            {
                writer.WritePropertyName("refundStatus"u8);
                writer.WriteStringValue(RefundStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(RefundOperationId))
            {
                writer.WritePropertyName("refundOperationId"u8);
                writer.WriteStringValue(RefundOperationId);
            }
            if (options.Format != "W" && Optional.IsDefined(RefundReason))
            {
                writer.WritePropertyName("refundReason"u8);
                writer.WriteStringValue(RefundReason.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        InvoicePropertiesRefundDetails IJsonModel<InvoicePropertiesRefundDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InvoicePropertiesRefundDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InvoicePropertiesRefundDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInvoicePropertiesRefundDetails(document.RootElement, options);
        }

        internal static InvoicePropertiesRefundDetails DeserializeInvoicePropertiesRefundDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset? requestedOn = default;
            DateTimeOffset? approvedOn = default;
            DateTimeOffset? completedOn = default;
            RefundDetailsSummaryAmountRequested amountRequested = default;
            RefundDetailsSummaryAmountRefunded amountRefunded = default;
            string rebillInvoiceId = default;
            int? transactionCount = default;
            RefundStatus? refundStatus = default;
            string refundOperationId = default;
            RefundReasonCode? refundReason = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("requestedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    requestedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("approvedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    approvedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("completedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    completedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("amountRequested"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    amountRequested = RefundDetailsSummaryAmountRequested.DeserializeRefundDetailsSummaryAmountRequested(property.Value, options);
                    continue;
                }
                if (property.NameEquals("amountRefunded"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    amountRefunded = RefundDetailsSummaryAmountRefunded.DeserializeRefundDetailsSummaryAmountRefunded(property.Value, options);
                    continue;
                }
                if (property.NameEquals("rebillInvoiceId"u8))
                {
                    rebillInvoiceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("transactionCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    transactionCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("refundStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    refundStatus = new RefundStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("refundOperationId"u8))
                {
                    refundOperationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("refundReason"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    refundReason = new RefundReasonCode(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new InvoicePropertiesRefundDetails(
                requestedOn,
                approvedOn,
                completedOn,
                amountRequested,
                amountRefunded,
                rebillInvoiceId,
                transactionCount,
                refundStatus,
                refundOperationId,
                refundReason,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<InvoicePropertiesRefundDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InvoicePropertiesRefundDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(InvoicePropertiesRefundDetails)} does not support writing '{options.Format}' format.");
            }
        }

        InvoicePropertiesRefundDetails IPersistableModel<InvoicePropertiesRefundDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InvoicePropertiesRefundDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeInvoicePropertiesRefundDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InvoicePropertiesRefundDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<InvoicePropertiesRefundDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
