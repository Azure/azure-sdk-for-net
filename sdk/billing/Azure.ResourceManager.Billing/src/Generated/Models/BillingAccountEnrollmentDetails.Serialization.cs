// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class BillingAccountEnrollmentDetails : IUtf8JsonSerializable, IJsonModel<BillingAccountEnrollmentDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BillingAccountEnrollmentDetails>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BillingAccountEnrollmentDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingAccountEnrollmentDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingAccountEnrollmentDetails)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(StartOn))
            {
                writer.WritePropertyName("startDate"u8);
                writer.WriteStringValue(StartOn.Value, "O");
            }
            if (Optional.IsDefined(EndOn))
            {
                writer.WritePropertyName("endDate"u8);
                writer.WriteStringValue(EndOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(Currency))
            {
                writer.WritePropertyName("currency"u8);
                writer.WriteStringValue(Currency);
            }
            if (options.Format != "W" && Optional.IsDefined(Channel))
            {
                writer.WritePropertyName("channel"u8);
                writer.WriteStringValue(Channel);
            }
            if (options.Format != "W" && Optional.IsDefined(Language))
            {
                writer.WritePropertyName("language"u8);
                writer.WriteStringValue(Language);
            }
            if (options.Format != "W" && Optional.IsDefined(CountryCode))
            {
                writer.WritePropertyName("countryCode"u8);
                writer.WriteStringValue(CountryCode);
            }
            if (options.Format != "W" && Optional.IsDefined(BillingCycle))
            {
                writer.WritePropertyName("billingCycle"u8);
                writer.WriteStringValue(BillingCycle);
            }
            if (options.Format != "W" && Optional.IsDefined(ExtendedTermOption))
            {
                writer.WritePropertyName("extendedTermOption"u8);
                writer.WriteStringValue(ExtendedTermOption.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SupportLevel))
            {
                writer.WritePropertyName("supportLevel"u8);
                writer.WriteStringValue(SupportLevel.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SupportCoverage))
            {
                writer.WritePropertyName("supportCoverage"u8);
                writer.WriteStringValue(SupportCoverage);
            }
            if (options.Format != "W" && Optional.IsDefined(Cloud))
            {
                writer.WritePropertyName("cloud"u8);
                writer.WriteStringValue(Cloud);
            }
            if (Optional.IsDefined(PoNumber))
            {
                writer.WritePropertyName("poNumber"u8);
                writer.WriteStringValue(PoNumber);
            }
            if (options.Format != "W" && Optional.IsDefined(MarkupStatus))
            {
                writer.WritePropertyName("markupStatus"u8);
                writer.WriteStringValue(MarkupStatus.Value.ToString());
            }
            if (Optional.IsDefined(IndirectRelationshipInfo))
            {
                writer.WritePropertyName("indirectRelationshipInfo"u8);
                writer.WriteObjectValue(IndirectRelationshipInfo, options);
            }
            if (options.Format != "W" && Optional.IsDefined(InvoiceRecipient))
            {
                writer.WritePropertyName("invoiceRecipient"u8);
                writer.WriteStringValue(InvoiceRecipient);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BillingAccountEnrollmentDetails IJsonModel<BillingAccountEnrollmentDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingAccountEnrollmentDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingAccountEnrollmentDetails)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBillingAccountEnrollmentDetails(document.RootElement, options);
        }

        internal static BillingAccountEnrollmentDetails DeserializeBillingAccountEnrollmentDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset? startDate = default;
            DateTimeOffset? endDate = default;
            string currency = default;
            string channel = default;
            string language = default;
            string countryCode = default;
            string billingCycle = default;
            ExtendedTermOption? extendedTermOption = default;
            BillingEnrollmentSupportLevel? supportLevel = default;
            string supportCoverage = default;
            string cloud = default;
            string poNumber = default;
            EnrollmentMarkupStatus? markupStatus = default;
            IndirectRelationshipInfo indirectRelationshipInfo = default;
            string invoiceRecipient = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currency"u8))
                {
                    currency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("channel"u8))
                {
                    channel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("language"u8))
                {
                    language = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCode"u8))
                {
                    countryCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("billingCycle"u8))
                {
                    billingCycle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extendedTermOption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedTermOption = new ExtendedTermOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("supportLevel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    supportLevel = new BillingEnrollmentSupportLevel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("supportCoverage"u8))
                {
                    supportCoverage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cloud"u8))
                {
                    cloud = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("poNumber"u8))
                {
                    poNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("markupStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    markupStatus = new EnrollmentMarkupStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("indirectRelationshipInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    indirectRelationshipInfo = IndirectRelationshipInfo.DeserializeIndirectRelationshipInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("invoiceRecipient"u8))
                {
                    invoiceRecipient = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BillingAccountEnrollmentDetails(
                startDate,
                endDate,
                currency,
                channel,
                language,
                countryCode,
                billingCycle,
                extendedTermOption,
                supportLevel,
                supportCoverage,
                cloud,
                poNumber,
                markupStatus,
                indirectRelationshipInfo,
                invoiceRecipient,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BillingAccountEnrollmentDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingAccountEnrollmentDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(BillingAccountEnrollmentDetails)} does not support writing '{options.Format}' format.");
            }
        }

        BillingAccountEnrollmentDetails IPersistableModel<BillingAccountEnrollmentDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingAccountEnrollmentDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBillingAccountEnrollmentDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BillingAccountEnrollmentDetails)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BillingAccountEnrollmentDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
