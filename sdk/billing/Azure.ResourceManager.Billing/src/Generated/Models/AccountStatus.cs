// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The current status of the billing account. </summary>
    public readonly partial struct AccountStatus : IEquatable<AccountStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AccountStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AccountStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string ActiveValue = "Active";
        private const string UnderReviewValue = "UnderReview";
        private const string DisabledValue = "Disabled";
        private const string DeletedValue = "Deleted";
        private const string ExtendedValue = "Extended";
        private const string PendingValue = "Pending";
        private const string NewValue = "New";
        private const string ExpiredValue = "Expired";
        private const string TerminatedValue = "Terminated";
        private const string TransferredValue = "Transferred";

        /// <summary> Other. </summary>
        public static AccountStatus Other { get; } = new AccountStatus(OtherValue);
        /// <summary> Active. </summary>
        public static AccountStatus Active { get; } = new AccountStatus(ActiveValue);
        /// <summary> UnderReview. </summary>
        public static AccountStatus UnderReview { get; } = new AccountStatus(UnderReviewValue);
        /// <summary> Disabled. </summary>
        public static AccountStatus Disabled { get; } = new AccountStatus(DisabledValue);
        /// <summary> Deleted. </summary>
        public static AccountStatus Deleted { get; } = new AccountStatus(DeletedValue);
        /// <summary> Extended. </summary>
        public static AccountStatus Extended { get; } = new AccountStatus(ExtendedValue);
        /// <summary> Pending. </summary>
        public static AccountStatus Pending { get; } = new AccountStatus(PendingValue);
        /// <summary> New. </summary>
        public static AccountStatus New { get; } = new AccountStatus(NewValue);
        /// <summary> Expired. </summary>
        public static AccountStatus Expired { get; } = new AccountStatus(ExpiredValue);
        /// <summary> Terminated. </summary>
        public static AccountStatus Terminated { get; } = new AccountStatus(TerminatedValue);
        /// <summary> Transferred. </summary>
        public static AccountStatus Transferred { get; } = new AccountStatus(TransferredValue);
        /// <summary> Determines if two <see cref="AccountStatus"/> values are the same. </summary>
        public static bool operator ==(AccountStatus left, AccountStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccountStatus"/> values are not the same. </summary>
        public static bool operator !=(AccountStatus left, AccountStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccountStatus"/>. </summary>
        public static implicit operator AccountStatus(string value) => new AccountStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccountStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccountStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
