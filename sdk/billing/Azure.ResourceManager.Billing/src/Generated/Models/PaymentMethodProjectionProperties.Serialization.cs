// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class PaymentMethodProjectionProperties : IUtf8JsonSerializable, IJsonModel<PaymentMethodProjectionProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PaymentMethodProjectionProperties>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<PaymentMethodProjectionProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<PaymentMethodProjectionProperties>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<PaymentMethodProjectionProperties>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(PaymentMethodId))
                {
                    writer.WritePropertyName("id"u8);
                    writer.WriteStringValue(PaymentMethodId);
                }
            }
            if (Optional.IsDefined(Family))
            {
                writer.WritePropertyName("family"u8);
                writer.WriteStringValue(Family.Value.ToString());
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(PaymentMethodProjectionPropertiesType))
                {
                    writer.WritePropertyName("type"u8);
                    writer.WriteStringValue(PaymentMethodProjectionPropertiesType);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(AccountHolderName))
                {
                    writer.WritePropertyName("accountHolderName"u8);
                    writer.WriteStringValue(AccountHolderName);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Expiration))
                {
                    writer.WritePropertyName("expiration"u8);
                    writer.WriteStringValue(Expiration);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LastFourDigits))
                {
                    writer.WritePropertyName("lastFourDigits"u8);
                    writer.WriteStringValue(LastFourDigits);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DisplayName))
                {
                    writer.WritePropertyName("displayName"u8);
                    writer.WriteStringValue(DisplayName);
                }
            }
            if (Optional.IsCollectionDefined(Logos))
            {
                writer.WritePropertyName("logos"u8);
                writer.WriteStartArray();
                foreach (var item in Logos)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        PaymentMethodProjectionProperties IJsonModel<PaymentMethodProjectionProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PaymentMethodProjectionProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePaymentMethodProjectionProperties(document.RootElement, options);
        }

        internal static PaymentMethodProjectionProperties DeserializePaymentMethodProjectionProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ResourceIdentifier> id = default;
            Optional<PaymentMethodFamily> family = default;
            Optional<string> type = default;
            Optional<string> accountHolderName = default;
            Optional<string> expiration = default;
            Optional<string> lastFourDigits = default;
            Optional<string> displayName = default;
            Optional<IList<PaymentMethodLogo>> logos = default;
            Optional<PaymentMethodStatus> status = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("family"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    family = new PaymentMethodFamily(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountHolderName"u8))
                {
                    accountHolderName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("expiration"u8))
                {
                    expiration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastFourDigits"u8))
                {
                    lastFourDigits = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logos"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PaymentMethodLogo> array = new List<PaymentMethodLogo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PaymentMethodLogo.DeserializePaymentMethodLogo(item));
                    }
                    logos = array;
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new PaymentMethodStatus(property.Value.GetString());
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new PaymentMethodProjectionProperties(id.Value, Optional.ToNullable(family), type.Value, accountHolderName.Value, expiration.Value, lastFourDigits.Value, displayName.Value, Optional.ToList(logos), Optional.ToNullable(status), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<PaymentMethodProjectionProperties>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PaymentMethodProjectionProperties)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        PaymentMethodProjectionProperties IPersistableModel<PaymentMethodProjectionProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PaymentMethodProjectionProperties)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializePaymentMethodProjectionProperties(document.RootElement, options);
        }

        string IPersistableModel<PaymentMethodProjectionProperties>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
