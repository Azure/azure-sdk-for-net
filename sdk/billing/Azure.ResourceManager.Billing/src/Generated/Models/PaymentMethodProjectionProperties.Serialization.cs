// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class PaymentMethodProjectionProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Family))
            {
                writer.WritePropertyName("family");
                writer.WriteStringValue(Family.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Logos))
            {
                writer.WritePropertyName("logos");
                writer.WriteStartArray();
                foreach (var item in Logos)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static PaymentMethodProjectionProperties DeserializePaymentMethodProjectionProperties(JsonElement element)
        {
            Optional<string> id = default;
            Optional<PaymentMethodFamily> family = default;
            Optional<string> type = default;
            Optional<string> accountHolderName = default;
            Optional<string> expiration = default;
            Optional<string> lastFourDigits = default;
            Optional<string> displayName = default;
            Optional<IList<PaymentMethodLogo>> logos = default;
            Optional<PaymentMethodStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("family"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    family = new PaymentMethodFamily(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountHolderName"))
                {
                    accountHolderName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("expiration"))
                {
                    expiration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastFourDigits"))
                {
                    lastFourDigits = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("logos"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<PaymentMethodLogo> array = new List<PaymentMethodLogo>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PaymentMethodLogo.DeserializePaymentMethodLogo(item));
                    }
                    logos = array;
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new PaymentMethodStatus(property.Value.GetString());
                    continue;
                }
            }
            return new PaymentMethodProjectionProperties(id.Value, Optional.ToNullable(family), type.Value, accountHolderName.Value, expiration.Value, lastFourDigits.Value, displayName.Value, Optional.ToList(logos), Optional.ToNullable(status));
        }
    }
}
