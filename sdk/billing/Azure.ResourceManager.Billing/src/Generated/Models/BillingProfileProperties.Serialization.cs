// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class BillingProfileProperties : IUtf8JsonSerializable, IJsonModel<BillingProfileProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BillingProfileProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BillingProfileProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingProfileProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingProfileProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(BillingRelationshipType))
            {
                writer.WritePropertyName("billingRelationshipType"u8);
                writer.WriteStringValue(BillingRelationshipType.Value.ToString());
            }
            if (Optional.IsDefined(BillTo))
            {
                writer.WritePropertyName("billTo"u8);
                writer.WriteObjectValue(BillTo, options);
            }
            if (options.Format != "W" && Optional.IsDefined(Currency))
            {
                writer.WritePropertyName("currency"u8);
                writer.WriteStringValue(Currency);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsCollectionDefined(EnabledAzurePlans))
            {
                writer.WritePropertyName("enabledAzurePlans"u8);
                writer.WriteStartArray();
                foreach (var item in EnabledAzurePlans)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(HasReadAccess))
            {
                writer.WritePropertyName("hasReadAccess"u8);
                writer.WriteBooleanValue(HasReadAccess.Value);
            }
            if (Optional.IsDefined(IndirectRelationshipInfo))
            {
                writer.WritePropertyName("indirectRelationshipInfo"u8);
                writer.WriteObjectValue(IndirectRelationshipInfo, options);
            }
            if (options.Format != "W" && Optional.IsDefined(InvoiceDay))
            {
                writer.WritePropertyName("invoiceDay"u8);
                writer.WriteNumberValue(InvoiceDay.Value);
            }
            if (Optional.IsDefined(IsInvoiceEmailOptIn))
            {
                writer.WritePropertyName("invoiceEmailOptIn"u8);
                writer.WriteBooleanValue(IsInvoiceEmailOptIn.Value);
            }
            if (Optional.IsCollectionDefined(InvoiceRecipients))
            {
                writer.WritePropertyName("invoiceRecipients"u8);
                writer.WriteStartArray();
                foreach (var item in InvoiceRecipients)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PoNumber))
            {
                writer.WritePropertyName("poNumber"u8);
                writer.WriteStringValue(PoNumber);
            }
            if (Optional.IsDefined(ShipTo))
            {
                writer.WritePropertyName("shipTo"u8);
                writer.WriteObjectValue(ShipTo, options);
            }
            if (Optional.IsDefined(SoldTo))
            {
                writer.WritePropertyName("soldTo"u8);
                writer.WriteObjectValue(SoldTo, options);
            }
            if (options.Format != "W" && Optional.IsDefined(SpendingLimit))
            {
                writer.WritePropertyName("spendingLimit"u8);
                writer.WriteStringValue(SpendingLimit.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SpendingLimitDetails))
            {
                writer.WritePropertyName("spendingLimitDetails"u8);
                writer.WriteStartArray();
                foreach (var item in SpendingLimitDetails)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(StatusReasonCode))
            {
                writer.WritePropertyName("statusReasonCode"u8);
                writer.WriteStringValue(StatusReasonCode.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SystemId))
            {
                writer.WritePropertyName("systemId"u8);
                writer.WriteStringValue(SystemId);
            }
            if (Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(TargetClouds))
            {
                writer.WritePropertyName("targetClouds"u8);
                writer.WriteStartArray();
                foreach (var item in TargetClouds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CurrentPaymentTerm))
            {
                writer.WritePropertyName("currentPaymentTerm"u8);
                writer.WriteObjectValue(CurrentPaymentTerm, options);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(OtherPaymentTerms))
            {
                writer.WritePropertyName("otherPaymentTerms"u8);
                writer.WriteStartArray();
                foreach (var item in OtherPaymentTerms)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BillingProfileProperties IJsonModel<BillingProfileProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingProfileProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingProfileProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBillingProfileProperties(document.RootElement, options);
        }

        internal static BillingProfileProperties DeserializeBillingProfileProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            BillingProvisioningState? provisioningState = default;
            BillingRelationshipType? billingRelationshipType = default;
            BillingAddressDetails billTo = default;
            string currency = default;
            string displayName = default;
            IList<BillingAzurePlan> enabledAzurePlans = default;
            bool? hasReadAccess = default;
            IndirectRelationshipInfo indirectRelationshipInfo = default;
            int? invoiceDay = default;
            bool? invoiceEmailOptIn = default;
            IList<string> invoiceRecipients = default;
            string poNumber = default;
            BillingAddressDetails shipTo = default;
            BillingAddressDetails soldTo = default;
            BillingSpendingLimit? spendingLimit = default;
            IReadOnlyList<SpendingLimitDetails> spendingLimitDetails = default;
            BillingProfileStatus? status = default;
            BillingProfileStatusReasonCode? statusReasonCode = default;
            string systemId = default;
            IDictionary<string, string> tags = default;
            IReadOnlyList<string> targetClouds = default;
            BillingPaymentTerm currentPaymentTerm = default;
            IReadOnlyList<BillingPaymentTerm> otherPaymentTerms = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new BillingProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("billingRelationshipType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    billingRelationshipType = new BillingRelationshipType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("billTo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    billTo = BillingAddressDetails.DeserializeBillingAddressDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("currency"u8))
                {
                    currency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enabledAzurePlans"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BillingAzurePlan> array = new List<BillingAzurePlan>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BillingAzurePlan.DeserializeBillingAzurePlan(item, options));
                    }
                    enabledAzurePlans = array;
                    continue;
                }
                if (property.NameEquals("hasReadAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hasReadAccess = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("indirectRelationshipInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    indirectRelationshipInfo = IndirectRelationshipInfo.DeserializeIndirectRelationshipInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("invoiceDay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    invoiceDay = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("invoiceEmailOptIn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    invoiceEmailOptIn = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("invoiceRecipients"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    invoiceRecipients = array;
                    continue;
                }
                if (property.NameEquals("poNumber"u8))
                {
                    poNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("shipTo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shipTo = BillingAddressDetails.DeserializeBillingAddressDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("soldTo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    soldTo = BillingAddressDetails.DeserializeBillingAddressDetails(property.Value, options);
                    continue;
                }
                if (property.NameEquals("spendingLimit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    spendingLimit = new BillingSpendingLimit(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("spendingLimitDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SpendingLimitDetails> array = new List<SpendingLimitDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.SpendingLimitDetails.DeserializeSpendingLimitDetails(item, options));
                    }
                    spendingLimitDetails = array;
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new BillingProfileStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("statusReasonCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    statusReasonCode = new BillingProfileStatusReasonCode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemId"u8))
                {
                    systemId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("targetClouds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    targetClouds = array;
                    continue;
                }
                if (property.NameEquals("currentPaymentTerm"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentPaymentTerm = BillingPaymentTerm.DeserializeBillingPaymentTerm(property.Value, options);
                    continue;
                }
                if (property.NameEquals("otherPaymentTerms"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BillingPaymentTerm> array = new List<BillingPaymentTerm>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BillingPaymentTerm.DeserializeBillingPaymentTerm(item, options));
                    }
                    otherPaymentTerms = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BillingProfileProperties(
                provisioningState,
                billingRelationshipType,
                billTo,
                currency,
                displayName,
                enabledAzurePlans ?? new ChangeTrackingList<BillingAzurePlan>(),
                hasReadAccess,
                indirectRelationshipInfo,
                invoiceDay,
                invoiceEmailOptIn,
                invoiceRecipients ?? new ChangeTrackingList<string>(),
                poNumber,
                shipTo,
                soldTo,
                spendingLimit,
                spendingLimitDetails ?? new ChangeTrackingList<SpendingLimitDetails>(),
                status,
                statusReasonCode,
                systemId,
                tags ?? new ChangeTrackingDictionary<string, string>(),
                targetClouds ?? new ChangeTrackingList<string>(),
                currentPaymentTerm,
                otherPaymentTerms ?? new ChangeTrackingList<BillingPaymentTerm>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BillingProfileProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingProfileProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(BillingProfileProperties)} does not support writing '{options.Format}' format.");
            }
        }

        BillingProfileProperties IPersistableModel<BillingProfileProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingProfileProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBillingProfileProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BillingProfileProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BillingProfileProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
