// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The status of a transfer. </summary>
    public readonly partial struct TransferStatus : IEquatable<TransferStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TransferStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TransferStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ExpiredValue = "Expired";
        private const string PendingValue = "Pending";
        private const string InProgressValue = "InProgress";
        private const string CompletedValue = "Completed";
        private const string CompletedWithErrorsValue = "CompletedWithErrors";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string DeclinedValue = "Declined";

        /// <summary> Expired. </summary>
        public static TransferStatus Expired { get; } = new TransferStatus(ExpiredValue);
        /// <summary> Pending. </summary>
        public static TransferStatus Pending { get; } = new TransferStatus(PendingValue);
        /// <summary> InProgress. </summary>
        public static TransferStatus InProgress { get; } = new TransferStatus(InProgressValue);
        /// <summary> Completed. </summary>
        public static TransferStatus Completed { get; } = new TransferStatus(CompletedValue);
        /// <summary> CompletedWithErrors. </summary>
        public static TransferStatus CompletedWithErrors { get; } = new TransferStatus(CompletedWithErrorsValue);
        /// <summary> Failed. </summary>
        public static TransferStatus Failed { get; } = new TransferStatus(FailedValue);
        /// <summary> Canceled. </summary>
        public static TransferStatus Canceled { get; } = new TransferStatus(CanceledValue);
        /// <summary> Declined. </summary>
        public static TransferStatus Declined { get; } = new TransferStatus(DeclinedValue);
        /// <summary> Determines if two <see cref="TransferStatus"/> values are the same. </summary>
        public static bool operator ==(TransferStatus left, TransferStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TransferStatus"/> values are not the same. </summary>
        public static bool operator !=(TransferStatus left, TransferStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TransferStatus"/>. </summary>
        public static implicit operator TransferStatus(string value) => new TransferStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TransferStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TransferStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
