// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The reason that the payment failed. </summary>
    public readonly partial struct FailedPaymentReason : IEquatable<FailedPaymentReason>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="FailedPaymentReason"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public FailedPaymentReason(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string BankDeclinedValue = "BankDeclined";
        private const string CardExpiredValue = "CardExpired";
        private const string IncorrectCardDetailsValue = "IncorrectCardDetails";

        /// <summary> Other. </summary>
        public static FailedPaymentReason Other { get; } = new FailedPaymentReason(OtherValue);
        /// <summary> BankDeclined. </summary>
        public static FailedPaymentReason BankDeclined { get; } = new FailedPaymentReason(BankDeclinedValue);
        /// <summary> CardExpired. </summary>
        public static FailedPaymentReason CardExpired { get; } = new FailedPaymentReason(CardExpiredValue);
        /// <summary> IncorrectCardDetails. </summary>
        public static FailedPaymentReason IncorrectCardDetails { get; } = new FailedPaymentReason(IncorrectCardDetailsValue);
        /// <summary> Determines if two <see cref="FailedPaymentReason"/> values are the same. </summary>
        public static bool operator ==(FailedPaymentReason left, FailedPaymentReason right) => left.Equals(right);
        /// <summary> Determines if two <see cref="FailedPaymentReason"/> values are not the same. </summary>
        public static bool operator !=(FailedPaymentReason left, FailedPaymentReason right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="FailedPaymentReason"/>. </summary>
        public static implicit operator FailedPaymentReason(string value) => new FailedPaymentReason(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is FailedPaymentReason other && Equals(other);
        /// <inheritdoc />
        public bool Equals(FailedPaymentReason other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
