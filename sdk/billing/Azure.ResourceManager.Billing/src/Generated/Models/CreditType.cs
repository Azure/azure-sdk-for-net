// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The credit type of the transaction. Applies only to credited transactions. </summary>
    public readonly partial struct CreditType : IEquatable<CreditType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CreditType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CreditType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string AzureFreeCreditValue = "AzureFreeCredit";
        private const string AzureCreditOfferValue = "AzureCreditOffer";
        private const string ServiceInterruptionValue = "ServiceInterruption";
        private const string RefundValue = "Refund";

        /// <summary> Other. </summary>
        public static CreditType Other { get; } = new CreditType(OtherValue);
        /// <summary> AzureFreeCredit. </summary>
        public static CreditType AzureFreeCredit { get; } = new CreditType(AzureFreeCreditValue);
        /// <summary> AzureCreditOffer. </summary>
        public static CreditType AzureCreditOffer { get; } = new CreditType(AzureCreditOfferValue);
        /// <summary> ServiceInterruption. </summary>
        public static CreditType ServiceInterruption { get; } = new CreditType(ServiceInterruptionValue);
        /// <summary> Refund. </summary>
        public static CreditType Refund { get; } = new CreditType(RefundValue);
        /// <summary> Determines if two <see cref="CreditType"/> values are the same. </summary>
        public static bool operator ==(CreditType left, CreditType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CreditType"/> values are not the same. </summary>
        public static bool operator !=(CreditType left, CreditType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CreditType"/>. </summary>
        public static implicit operator CreditType(string value) => new CreditType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CreditType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CreditType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
