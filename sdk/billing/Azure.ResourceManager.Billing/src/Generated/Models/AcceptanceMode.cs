// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The mode of acceptance for an agreement. </summary>
    public readonly partial struct AcceptanceMode : IEquatable<AcceptanceMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AcceptanceMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AcceptanceMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string ClickToAcceptValue = "ClickToAccept";
        private const string ESignEmbeddedValue = "ESignEmbedded";
        private const string ESignOfflineValue = "ESignOffline";
        private const string ImplicitValue = "Implicit";
        private const string OfflineValue = "Offline";
        private const string PhysicalSignValue = "PhysicalSign";

        /// <summary> Other. </summary>
        public static AcceptanceMode Other { get; } = new AcceptanceMode(OtherValue);
        /// <summary> ClickToAccept. </summary>
        public static AcceptanceMode ClickToAccept { get; } = new AcceptanceMode(ClickToAcceptValue);
        /// <summary> ESignEmbedded. </summary>
        public static AcceptanceMode ESignEmbedded { get; } = new AcceptanceMode(ESignEmbeddedValue);
        /// <summary> ESignOffline. </summary>
        public static AcceptanceMode ESignOffline { get; } = new AcceptanceMode(ESignOfflineValue);
        /// <summary> Implicit. </summary>
        public static AcceptanceMode Implicit { get; } = new AcceptanceMode(ImplicitValue);
        /// <summary> Offline. </summary>
        public static AcceptanceMode Offline { get; } = new AcceptanceMode(OfflineValue);
        /// <summary> PhysicalSign. </summary>
        public static AcceptanceMode PhysicalSign { get; } = new AcceptanceMode(PhysicalSignValue);
        /// <summary> Determines if two <see cref="AcceptanceMode"/> values are the same. </summary>
        public static bool operator ==(AcceptanceMode left, AcceptanceMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AcceptanceMode"/> values are not the same. </summary>
        public static bool operator !=(AcceptanceMode left, AcceptanceMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AcceptanceMode"/>. </summary>
        public static implicit operator AcceptanceMode(string value) => new AcceptanceMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AcceptanceMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AcceptanceMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
