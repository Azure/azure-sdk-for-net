// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Billing.Models
{
    public partial class BillingRoleAssignmentProperties : IUtf8JsonSerializable, IJsonModel<BillingRoleAssignmentProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<BillingRoleAssignmentProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<BillingRoleAssignmentProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingRoleAssignmentProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingRoleAssignmentProperties)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdOn"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedByPrincipalTenantId))
            {
                writer.WritePropertyName("createdByPrincipalTenantId"u8);
                writer.WriteStringValue(CreatedByPrincipalTenantId.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedByPrincipalId))
            {
                writer.WritePropertyName("createdByPrincipalId"u8);
                writer.WriteStringValue(CreatedByPrincipalId);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedByPrincipalPuid))
            {
                writer.WritePropertyName("createdByPrincipalPuid"u8);
                writer.WriteStringValue(CreatedByPrincipalPuid);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedByUserEmailAddress))
            {
                writer.WritePropertyName("createdByUserEmailAddress"u8);
                writer.WriteStringValue(CreatedByUserEmailAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(ModifiedOn))
            {
                writer.WritePropertyName("modifiedOn"u8);
                writer.WriteStringValue(ModifiedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ModifiedByPrincipalPuid))
            {
                writer.WritePropertyName("modifiedByPrincipalPuid"u8);
                writer.WriteStringValue(ModifiedByPrincipalPuid);
            }
            if (options.Format != "W" && Optional.IsDefined(ModifiedByUserEmailAddress))
            {
                writer.WritePropertyName("modifiedByUserEmailAddress"u8);
                writer.WriteStringValue(ModifiedByUserEmailAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(ModifiedByPrincipalId))
            {
                writer.WritePropertyName("modifiedByPrincipalId"u8);
                writer.WriteStringValue(ModifiedByPrincipalId);
            }
            if (options.Format != "W" && Optional.IsDefined(ModifiedByPrincipalTenantId))
            {
                writer.WritePropertyName("modifiedByPrincipalTenantId"u8);
                writer.WriteStringValue(ModifiedByPrincipalTenantId.Value);
            }
            if (Optional.IsDefined(PrincipalPuid))
            {
                writer.WritePropertyName("principalPuid"u8);
                writer.WriteStringValue(PrincipalPuid);
            }
            if (Optional.IsDefined(PrincipalId))
            {
                writer.WritePropertyName("principalId"u8);
                writer.WriteStringValue(PrincipalId);
            }
            if (Optional.IsDefined(PrincipalTenantId))
            {
                writer.WritePropertyName("principalTenantId"u8);
                writer.WriteStringValue(PrincipalTenantId.Value);
            }
            writer.WritePropertyName("roleDefinitionId"u8);
            writer.WriteStringValue(RoleDefinitionId);
            if (Optional.IsDefined(Scope))
            {
                writer.WritePropertyName("scope"u8);
                writer.WriteStringValue(Scope);
            }
            if (Optional.IsDefined(UserAuthenticationType))
            {
                writer.WritePropertyName("userAuthenticationType"u8);
                writer.WriteStringValue(UserAuthenticationType);
            }
            if (Optional.IsDefined(UserEmailAddress))
            {
                writer.WritePropertyName("userEmailAddress"u8);
                writer.WriteStringValue(UserEmailAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(PrincipalTenantName))
            {
                writer.WritePropertyName("principalTenantName"u8);
                writer.WriteStringValue(PrincipalTenantName);
            }
            if (options.Format != "W" && Optional.IsDefined(PrincipalDisplayName))
            {
                writer.WritePropertyName("principalDisplayName"u8);
                writer.WriteStringValue(PrincipalDisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(PrincipalType))
            {
                writer.WritePropertyName("principalType"u8);
                writer.WriteStringValue(PrincipalType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(BillingRequestId))
            {
                writer.WritePropertyName("billingRequestId"u8);
                writer.WriteStringValue(BillingRequestId);
            }
            if (options.Format != "W" && Optional.IsDefined(BillingAccountId))
            {
                writer.WritePropertyName("billingAccountId"u8);
                writer.WriteStringValue(BillingAccountId);
            }
            if (options.Format != "W" && Optional.IsDefined(BillingAccountDisplayName))
            {
                writer.WritePropertyName("billingAccountDisplayName"u8);
                writer.WriteStringValue(BillingAccountDisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(BillingProfileId))
            {
                writer.WritePropertyName("billingProfileId"u8);
                writer.WriteStringValue(BillingProfileId);
            }
            if (options.Format != "W" && Optional.IsDefined(BillingProfileDisplayName))
            {
                writer.WritePropertyName("billingProfileDisplayName"u8);
                writer.WriteStringValue(BillingProfileDisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(InvoiceSectionId))
            {
                writer.WritePropertyName("invoiceSectionId"u8);
                writer.WriteStringValue(InvoiceSectionId);
            }
            if (options.Format != "W" && Optional.IsDefined(InvoiceSectionDisplayName))
            {
                writer.WritePropertyName("invoiceSectionDisplayName"u8);
                writer.WriteStringValue(InvoiceSectionDisplayName);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerId))
            {
                writer.WritePropertyName("customerId"u8);
                writer.WriteStringValue(CustomerId);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerDisplayName))
            {
                writer.WritePropertyName("customerDisplayName"u8);
                writer.WriteStringValue(CustomerDisplayName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        BillingRoleAssignmentProperties IJsonModel<BillingRoleAssignmentProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingRoleAssignmentProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BillingRoleAssignmentProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBillingRoleAssignmentProperties(document.RootElement, options);
        }

        internal static BillingRoleAssignmentProperties DeserializeBillingRoleAssignmentProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            BillingProvisioningState? provisioningState = default;
            DateTimeOffset? createdOn = default;
            Guid? createdByPrincipalTenantId = default;
            string createdByPrincipalId = default;
            string createdByPrincipalPuid = default;
            string createdByUserEmailAddress = default;
            DateTimeOffset? modifiedOn = default;
            string modifiedByPrincipalPuid = default;
            string modifiedByUserEmailAddress = default;
            string modifiedByPrincipalId = default;
            Guid? modifiedByPrincipalTenantId = default;
            string principalPuid = default;
            string principalId = default;
            Guid? principalTenantId = default;
            ResourceIdentifier roleDefinitionId = default;
            string scope = default;
            string userAuthenticationType = default;
            string userEmailAddress = default;
            string principalTenantName = default;
            string principalDisplayName = default;
            BillingPrincipalType? principalType = default;
            ResourceIdentifier billingRequestId = default;
            ResourceIdentifier billingAccountId = default;
            string billingAccountDisplayName = default;
            ResourceIdentifier billingProfileId = default;
            string billingProfileDisplayName = default;
            ResourceIdentifier invoiceSectionId = default;
            string invoiceSectionDisplayName = default;
            ResourceIdentifier customerId = default;
            string customerDisplayName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new BillingProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("createdOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("createdByPrincipalTenantId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdByPrincipalTenantId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("createdByPrincipalId"u8))
                {
                    createdByPrincipalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdByPrincipalPuid"u8))
                {
                    createdByPrincipalPuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdByUserEmailAddress"u8))
                {
                    createdByUserEmailAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modifiedOn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    modifiedOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("modifiedByPrincipalPuid"u8))
                {
                    modifiedByPrincipalPuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modifiedByUserEmailAddress"u8))
                {
                    modifiedByUserEmailAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modifiedByPrincipalId"u8))
                {
                    modifiedByPrincipalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("modifiedByPrincipalTenantId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    modifiedByPrincipalTenantId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("principalPuid"u8))
                {
                    principalPuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("principalId"u8))
                {
                    principalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("principalTenantId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    principalTenantId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("roleDefinitionId"u8))
                {
                    roleDefinitionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("scope"u8))
                {
                    scope = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userAuthenticationType"u8))
                {
                    userAuthenticationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("userEmailAddress"u8))
                {
                    userEmailAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("principalTenantName"u8))
                {
                    principalTenantName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("principalDisplayName"u8))
                {
                    principalDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("principalType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    principalType = new BillingPrincipalType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("billingRequestId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    billingRequestId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("billingAccountId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    billingAccountId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("billingAccountDisplayName"u8))
                {
                    billingAccountDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("billingProfileId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    billingProfileId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("billingProfileDisplayName"u8))
                {
                    billingProfileDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("invoiceSectionId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    invoiceSectionId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("invoiceSectionDisplayName"u8))
                {
                    invoiceSectionDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customerDisplayName"u8))
                {
                    customerDisplayName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new BillingRoleAssignmentProperties(
                provisioningState,
                createdOn,
                createdByPrincipalTenantId,
                createdByPrincipalId,
                createdByPrincipalPuid,
                createdByUserEmailAddress,
                modifiedOn,
                modifiedByPrincipalPuid,
                modifiedByUserEmailAddress,
                modifiedByPrincipalId,
                modifiedByPrincipalTenantId,
                principalPuid,
                principalId,
                principalTenantId,
                roleDefinitionId,
                scope,
                userAuthenticationType,
                userEmailAddress,
                principalTenantName,
                principalDisplayName,
                principalType,
                billingRequestId,
                billingAccountId,
                billingAccountDisplayName,
                billingProfileId,
                billingProfileDisplayName,
                invoiceSectionId,
                invoiceSectionDisplayName,
                customerId,
                customerDisplayName,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<BillingRoleAssignmentProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingRoleAssignmentProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(BillingRoleAssignmentProperties)} does not support writing '{options.Format}' format.");
            }
        }

        BillingRoleAssignmentProperties IPersistableModel<BillingRoleAssignmentProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<BillingRoleAssignmentProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeBillingRoleAssignmentProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BillingRoleAssignmentProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<BillingRoleAssignmentProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
