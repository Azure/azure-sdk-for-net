// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> The status of the product. </summary>
    public readonly partial struct ProductStatus : IEquatable<ProductStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProductStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProductStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string ActiveValue = "Active";
        private const string DisabledValue = "Disabled";
        private const string DeletedValue = "Deleted";
        private const string PastDueValue = "PastDue";
        private const string ExpiringValue = "Expiring";
        private const string ExpiredValue = "Expired";
        private const string AutoRenewValue = "AutoRenew";
        private const string CanceledValue = "Canceled";
        private const string SuspendedValue = "Suspended";

        /// <summary> Other. </summary>
        public static ProductStatus Other { get; } = new ProductStatus(OtherValue);
        /// <summary> Active. </summary>
        public static ProductStatus Active { get; } = new ProductStatus(ActiveValue);
        /// <summary> Disabled. </summary>
        public static ProductStatus Disabled { get; } = new ProductStatus(DisabledValue);
        /// <summary> Deleted. </summary>
        public static ProductStatus Deleted { get; } = new ProductStatus(DeletedValue);
        /// <summary> PastDue. </summary>
        public static ProductStatus PastDue { get; } = new ProductStatus(PastDueValue);
        /// <summary> Expiring. </summary>
        public static ProductStatus Expiring { get; } = new ProductStatus(ExpiringValue);
        /// <summary> Expired. </summary>
        public static ProductStatus Expired { get; } = new ProductStatus(ExpiredValue);
        /// <summary> AutoRenew. </summary>
        public static ProductStatus AutoRenew { get; } = new ProductStatus(AutoRenewValue);
        /// <summary> Canceled. </summary>
        public static ProductStatus Canceled { get; } = new ProductStatus(CanceledValue);
        /// <summary> Suspended. </summary>
        public static ProductStatus Suspended { get; } = new ProductStatus(SuspendedValue);
        /// <summary> Determines if two <see cref="ProductStatus"/> values are the same. </summary>
        public static bool operator ==(ProductStatus left, ProductStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProductStatus"/> values are not the same. </summary>
        public static bool operator !=(ProductStatus left, ProductStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProductStatus"/>. </summary>
        public static implicit operator ProductStatus(string value) => new ProductStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProductStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProductStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
