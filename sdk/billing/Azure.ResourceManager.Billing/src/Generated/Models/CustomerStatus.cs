// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Billing.Models
{
    /// <summary> Identifies the status of an customer. This is an upcoming property that will be populated in the future. </summary>
    public readonly partial struct CustomerStatus : IEquatable<CustomerStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CustomerStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CustomerStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string ActiveValue = "Active";
        private const string PendingValue = "Pending";
        private const string DisabledValue = "Disabled";
        private const string WarnedValue = "Warned";
        private const string DeletedValue = "Deleted";
        private const string UnderReviewValue = "UnderReview";

        /// <summary> Other. </summary>
        public static CustomerStatus Other { get; } = new CustomerStatus(OtherValue);
        /// <summary> Active. </summary>
        public static CustomerStatus Active { get; } = new CustomerStatus(ActiveValue);
        /// <summary> Pending. </summary>
        public static CustomerStatus Pending { get; } = new CustomerStatus(PendingValue);
        /// <summary> Disabled. </summary>
        public static CustomerStatus Disabled { get; } = new CustomerStatus(DisabledValue);
        /// <summary> Warned. </summary>
        public static CustomerStatus Warned { get; } = new CustomerStatus(WarnedValue);
        /// <summary> Deleted. </summary>
        public static CustomerStatus Deleted { get; } = new CustomerStatus(DeletedValue);
        /// <summary> UnderReview. </summary>
        public static CustomerStatus UnderReview { get; } = new CustomerStatus(UnderReviewValue);
        /// <summary> Determines if two <see cref="CustomerStatus"/> values are the same. </summary>
        public static bool operator ==(CustomerStatus left, CustomerStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CustomerStatus"/> values are not the same. </summary>
        public static bool operator !=(CustomerStatus left, CustomerStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CustomerStatus"/>. </summary>
        public static implicit operator CustomerStatus(string value) => new CustomerStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CustomerStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CustomerStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
