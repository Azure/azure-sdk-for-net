// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Billing
{
    /// <summary>
    /// A class representing a collection of <see cref="PaymentMethodLinkResource" /> and their operations.
    /// Each <see cref="PaymentMethodLinkResource" /> in the collection will belong to the same instance of <see cref="TenantResource" />.
    /// To get a <see cref="PaymentMethodLinkCollection" /> instance call the GetPaymentMethodLinks method from an instance of <see cref="TenantResource" />.
    /// </summary>
    public partial class PaymentMethodLinkCollection : ArmCollection, IEnumerable<PaymentMethodLinkResource>, IAsyncEnumerable<PaymentMethodLinkResource>
    {
        private readonly ClientDiagnostics _paymentMethodLinkPaymentMethodsClientDiagnostics;
        private readonly PaymentMethodsRestOperations _paymentMethodLinkPaymentMethodsRestClient;
        private readonly string _billingAccountName;
        private readonly string _billingProfileName;

        /// <summary> Initializes a new instance of the <see cref="PaymentMethodLinkCollection"/> class for mocking. </summary>
        protected PaymentMethodLinkCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="PaymentMethodLinkCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        /// <param name="billingAccountName"> The ID that uniquely identifies a billing account. </param>
        /// <param name="billingProfileName"> The ID that uniquely identifies a billing profile. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="billingAccountName"/> or <paramref name="billingProfileName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="billingAccountName"/> or <paramref name="billingProfileName"/> is an empty string, and was expected to be non-empty. </exception>
        internal PaymentMethodLinkCollection(ArmClient client, ResourceIdentifier id, string billingAccountName, string billingProfileName) : base(client, id)
        {
            _billingAccountName = billingAccountName;
            _billingProfileName = billingProfileName;
            _paymentMethodLinkPaymentMethodsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Billing", PaymentMethodLinkResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(PaymentMethodLinkResource.ResourceType, out string paymentMethodLinkPaymentMethodsApiVersion);
            _paymentMethodLinkPaymentMethodsRestClient = new PaymentMethodsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, paymentMethodLinkPaymentMethodsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TenantResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, TenantResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a payment method linked with a billing profile. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
        /// Request Path: /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}
        /// Operation Id: PaymentMethods_GetByBillingProfile
        /// </summary>
        /// <param name="paymentMethodName"> The ID that uniquely identifies a payment method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="paymentMethodName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="paymentMethodName"/> is null. </exception>
        public virtual async Task<Response<PaymentMethodLinkResource>> GetAsync(string paymentMethodName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(paymentMethodName, nameof(paymentMethodName));

            using var scope = _paymentMethodLinkPaymentMethodsClientDiagnostics.CreateScope("PaymentMethodLinkCollection.Get");
            scope.Start();
            try
            {
                var response = await _paymentMethodLinkPaymentMethodsRestClient.GetByBillingProfileAsync(_billingAccountName, _billingProfileName, paymentMethodName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PaymentMethodLinkResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a payment method linked with a billing profile. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
        /// Request Path: /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}
        /// Operation Id: PaymentMethods_GetByBillingProfile
        /// </summary>
        /// <param name="paymentMethodName"> The ID that uniquely identifies a payment method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="paymentMethodName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="paymentMethodName"/> is null. </exception>
        public virtual Response<PaymentMethodLinkResource> Get(string paymentMethodName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(paymentMethodName, nameof(paymentMethodName));

            using var scope = _paymentMethodLinkPaymentMethodsClientDiagnostics.CreateScope("PaymentMethodLinkCollection.Get");
            scope.Start();
            try
            {
                var response = _paymentMethodLinkPaymentMethodsRestClient.GetByBillingProfile(_billingAccountName, _billingProfileName, paymentMethodName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new PaymentMethodLinkResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists payment methods attached to a billing profile. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
        /// Request Path: /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks
        /// Operation Id: PaymentMethods_ListByBillingProfile
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PaymentMethodLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<PaymentMethodLinkResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<PaymentMethodLinkResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _paymentMethodLinkPaymentMethodsClientDiagnostics.CreateScope("PaymentMethodLinkCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _paymentMethodLinkPaymentMethodsRestClient.ListByBillingProfileAsync(_billingAccountName, _billingProfileName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PaymentMethodLinkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<PaymentMethodLinkResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _paymentMethodLinkPaymentMethodsClientDiagnostics.CreateScope("PaymentMethodLinkCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _paymentMethodLinkPaymentMethodsRestClient.ListByBillingProfileNextPageAsync(nextLink, _billingAccountName, _billingProfileName, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new PaymentMethodLinkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Lists payment methods attached to a billing profile. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
        /// Request Path: /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks
        /// Operation Id: PaymentMethods_ListByBillingProfile
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PaymentMethodLinkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<PaymentMethodLinkResource> GetAll(CancellationToken cancellationToken = default)
        {
            Page<PaymentMethodLinkResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _paymentMethodLinkPaymentMethodsClientDiagnostics.CreateScope("PaymentMethodLinkCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _paymentMethodLinkPaymentMethodsRestClient.ListByBillingProfile(_billingAccountName, _billingProfileName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PaymentMethodLinkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<PaymentMethodLinkResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _paymentMethodLinkPaymentMethodsClientDiagnostics.CreateScope("PaymentMethodLinkCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _paymentMethodLinkPaymentMethodsRestClient.ListByBillingProfileNextPage(nextLink, _billingAccountName, _billingProfileName, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new PaymentMethodLinkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}
        /// Operation Id: PaymentMethods_GetByBillingProfile
        /// </summary>
        /// <param name="paymentMethodName"> The ID that uniquely identifies a payment method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="paymentMethodName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="paymentMethodName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string paymentMethodName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(paymentMethodName, nameof(paymentMethodName));

            using var scope = _paymentMethodLinkPaymentMethodsClientDiagnostics.CreateScope("PaymentMethodLinkCollection.Exists");
            scope.Start();
            try
            {
                var response = await _paymentMethodLinkPaymentMethodsRestClient.GetByBillingProfileAsync(_billingAccountName, _billingProfileName, paymentMethodName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}
        /// Operation Id: PaymentMethods_GetByBillingProfile
        /// </summary>
        /// <param name="paymentMethodName"> The ID that uniquely identifies a payment method. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="paymentMethodName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="paymentMethodName"/> is null. </exception>
        public virtual Response<bool> Exists(string paymentMethodName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(paymentMethodName, nameof(paymentMethodName));

            using var scope = _paymentMethodLinkPaymentMethodsClientDiagnostics.CreateScope("PaymentMethodLinkCollection.Exists");
            scope.Start();
            try
            {
                var response = _paymentMethodLinkPaymentMethodsRestClient.GetByBillingProfile(_billingAccountName, _billingProfileName, paymentMethodName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<PaymentMethodLinkResource> IEnumerable<PaymentMethodLinkResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<PaymentMethodLinkResource> IAsyncEnumerable<PaymentMethodLinkResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
