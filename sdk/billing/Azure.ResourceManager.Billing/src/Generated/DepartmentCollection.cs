// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.Billing
{
    /// <summary>
    /// A class representing a collection of <see cref="DepartmentResource"/> and their operations.
    /// Each <see cref="DepartmentResource"/> in the collection will belong to the same instance of <see cref="BillingAccountResource"/>.
    /// To get a <see cref="DepartmentCollection"/> instance call the GetDepartments method from an instance of <see cref="BillingAccountResource"/>.
    /// </summary>
    public partial class DepartmentCollection : ArmCollection, IEnumerable<DepartmentResource>, IAsyncEnumerable<DepartmentResource>
    {
        private readonly ClientDiagnostics _departmentClientDiagnostics;
        private readonly DepartmentsRestOperations _departmentRestClient;

        /// <summary> Initializes a new instance of the <see cref="DepartmentCollection"/> class for mocking. </summary>
        protected DepartmentCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="DepartmentCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal DepartmentCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _departmentClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Billing", DepartmentResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(DepartmentResource.ResourceType, out string departmentApiVersion);
            _departmentRestClient = new DepartmentsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, departmentApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != BillingAccountResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, BillingAccountResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a department by ID. The operation is supported only for billing accounts with agreement type Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Departments_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DepartmentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="departmentName"> The name of the department. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="departmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="departmentName"/> is null. </exception>
        public virtual async Task<Response<DepartmentResource>> GetAsync(string departmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(departmentName, nameof(departmentName));

            using var scope = _departmentClientDiagnostics.CreateScope("DepartmentCollection.Get");
            scope.Start();
            try
            {
                var response = await _departmentRestClient.GetAsync(Id.Name, departmentName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DepartmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a department by ID. The operation is supported only for billing accounts with agreement type Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Departments_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DepartmentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="departmentName"> The name of the department. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="departmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="departmentName"/> is null. </exception>
        public virtual Response<DepartmentResource> Get(string departmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(departmentName, nameof(departmentName));

            using var scope = _departmentClientDiagnostics.CreateScope("DepartmentCollection.Get");
            scope.Start();
            try
            {
                var response = _departmentRestClient.Get(Id.Name, departmentName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new DepartmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the departments that a user has access to. The operation is supported only for billing accounts with agreement type Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Departments_ListByBillingAccount</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DepartmentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The filter query option allows clients to filter a collection of resources that are addressed by a request URL. </param>
        /// <param name="orderBy"> The orderby query option allows clients to request resources in a particular order. </param>
        /// <param name="top"> The top query option requests the number of items in the queried collection to be included in the result. The maximum supported value for top is 50. </param>
        /// <param name="skip"> The skip query option requests the number of items in the queried collection that are to be skipped and not included in the result. </param>
        /// <param name="search"> The search query option allows clients to request items within a collection matching a free-text search expression. search is only supported for string fields. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DepartmentResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<DepartmentResource> GetAllAsync(string filter = null, string orderBy = null, long? top = null, long? skip = null, string search = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _departmentRestClient.CreateListByBillingAccountRequest(Id.Name, filter, orderBy, top, skip, search);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _departmentRestClient.CreateListByBillingAccountNextPageRequest(nextLink, Id.Name, filter, orderBy, top, skip, search);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new DepartmentResource(Client, DepartmentData.DeserializeDepartmentData(e)), _departmentClientDiagnostics, Pipeline, "DepartmentCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the departments that a user has access to. The operation is supported only for billing accounts with agreement type Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Departments_ListByBillingAccount</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DepartmentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The filter query option allows clients to filter a collection of resources that are addressed by a request URL. </param>
        /// <param name="orderBy"> The orderby query option allows clients to request resources in a particular order. </param>
        /// <param name="top"> The top query option requests the number of items in the queried collection to be included in the result. The maximum supported value for top is 50. </param>
        /// <param name="skip"> The skip query option requests the number of items in the queried collection that are to be skipped and not included in the result. </param>
        /// <param name="search"> The search query option allows clients to request items within a collection matching a free-text search expression. search is only supported for string fields. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DepartmentResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<DepartmentResource> GetAll(string filter = null, string orderBy = null, long? top = null, long? skip = null, string search = null, CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _departmentRestClient.CreateListByBillingAccountRequest(Id.Name, filter, orderBy, top, skip, search);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _departmentRestClient.CreateListByBillingAccountNextPageRequest(nextLink, Id.Name, filter, orderBy, top, skip, search);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new DepartmentResource(Client, DepartmentData.DeserializeDepartmentData(e)), _departmentClientDiagnostics, Pipeline, "DepartmentCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Departments_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DepartmentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="departmentName"> The name of the department. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="departmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="departmentName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string departmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(departmentName, nameof(departmentName));

            using var scope = _departmentClientDiagnostics.CreateScope("DepartmentCollection.Exists");
            scope.Start();
            try
            {
                var response = await _departmentRestClient.GetAsync(Id.Name, departmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Departments_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DepartmentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="departmentName"> The name of the department. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="departmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="departmentName"/> is null. </exception>
        public virtual Response<bool> Exists(string departmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(departmentName, nameof(departmentName));

            using var scope = _departmentClientDiagnostics.CreateScope("DepartmentCollection.Exists");
            scope.Start();
            try
            {
                var response = _departmentRestClient.Get(Id.Name, departmentName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Departments_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DepartmentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="departmentName"> The name of the department. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="departmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="departmentName"/> is null. </exception>
        public virtual async Task<NullableResponse<DepartmentResource>> GetIfExistsAsync(string departmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(departmentName, nameof(departmentName));

            using var scope = _departmentClientDiagnostics.CreateScope("DepartmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _departmentRestClient.GetAsync(Id.Name, departmentName, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<DepartmentResource>(response.GetRawResponse());
                return Response.FromValue(new DepartmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Departments_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="DepartmentResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="departmentName"> The name of the department. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="departmentName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="departmentName"/> is null. </exception>
        public virtual NullableResponse<DepartmentResource> GetIfExists(string departmentName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(departmentName, nameof(departmentName));

            using var scope = _departmentClientDiagnostics.CreateScope("DepartmentCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _departmentRestClient.Get(Id.Name, departmentName, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<DepartmentResource>(response.GetRawResponse());
                return Response.FromValue(new DepartmentResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<DepartmentResource> IEnumerable<DepartmentResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<DepartmentResource> IAsyncEnumerable<DepartmentResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
