// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Billing.Models;

namespace Azure.ResourceManager.Billing
{
    /// <summary>
    /// A Class representing a BillingAccountBillingAccountInvoice along with the instance operations that can be performed on it.
    /// If you have a <see cref="ResourceIdentifier"/> you can construct a <see cref="BillingAccountBillingAccountInvoiceResource"/>
    /// from an instance of <see cref="ArmClient"/> using the GetBillingAccountBillingAccountInvoiceResource method.
    /// Otherwise you can get one from its parent resource <see cref="BillingAccountResource"/> using the GetBillingAccountBillingAccountInvoice method.
    /// </summary>
    public partial class BillingAccountBillingAccountInvoiceResource : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="BillingAccountBillingAccountInvoiceResource"/> instance. </summary>
        /// <param name="billingAccountName"> The billingAccountName. </param>
        /// <param name="invoiceName"> The invoiceName. </param>
        public static ResourceIdentifier CreateResourceIdentifier(string billingAccountName, string invoiceName)
        {
            var resourceId = $"/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}";
            return new ResourceIdentifier(resourceId);
        }

        private readonly ClientDiagnostics _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics;
        private readonly InvoicesRestOperations _billingAccountBillingAccountInvoiceInvoicesRestClient;
        private readonly ClientDiagnostics _transactionsClientDiagnostics;
        private readonly TransactionsRestOperations _transactionsRestClient;
        private readonly InvoiceData _data;

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Billing/billingAccounts/invoices";

        /// <summary> Initializes a new instance of the <see cref="BillingAccountBillingAccountInvoiceResource"/> class for mocking. </summary>
        protected BillingAccountBillingAccountInvoiceResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="BillingAccountBillingAccountInvoiceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal BillingAccountBillingAccountInvoiceResource(ArmClient client, InvoiceData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="BillingAccountBillingAccountInvoiceResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal BillingAccountBillingAccountInvoiceResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Billing", ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ResourceType, out string billingAccountBillingAccountInvoiceInvoicesApiVersion);
            _billingAccountBillingAccountInvoiceInvoicesRestClient = new InvoicesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, billingAccountBillingAccountInvoiceInvoicesApiVersion);
            _transactionsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Billing", ProviderConstants.DefaultProviderNamespace, Diagnostics);
            _transactionsRestClient = new TransactionsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual InvoiceData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets an invoice by billing account name and ID. The operation is supported for all billing account types.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Invoices_GetByBillingAccount</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingAccountBillingAccountInvoiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<BillingAccountBillingAccountInvoiceResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.Get");
            scope.Start();
            try
            {
                var response = await _billingAccountBillingAccountInvoiceInvoicesRestClient.GetByBillingAccountAsync(Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BillingAccountBillingAccountInvoiceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets an invoice by billing account name and ID. The operation is supported for all billing account types.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Invoices_GetByBillingAccount</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingAccountBillingAccountInvoiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<BillingAccountBillingAccountInvoiceResource> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.Get");
            scope.Start();
            try
            {
                var response = _billingAccountBillingAccountInvoiceInvoicesRestClient.GetByBillingAccount(Id.Parent.Name, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new BillingAccountBillingAccountInvoiceResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerate an invoice by billing account name and invoice name. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/amend</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Invoices_Amend</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingAccountBillingAccountInvoiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation> AmendAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.Amend");
            scope.Start();
            try
            {
                var response = await _billingAccountBillingAccountInvoiceInvoicesRestClient.AmendAsync(Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new BillingArmOperation(_billingAccountBillingAccountInvoiceInvoicesClientDiagnostics, Pipeline, _billingAccountBillingAccountInvoiceInvoicesRestClient.CreateAmendRequest(Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Regenerate an invoice by billing account name and invoice name. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/amend</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Invoices_Amend</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingAccountBillingAccountInvoiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation Amend(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.Amend");
            scope.Start();
            try
            {
                var response = _billingAccountBillingAccountInvoiceInvoicesRestClient.Amend(Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new BillingArmOperation(_billingAccountBillingAccountInvoiceInvoicesClientDiagnostics, Pipeline, _billingAccountBillingAccountInvoiceInvoicesRestClient.CreateAmendRequest(Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletionResponse(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a URL to download an invoice document. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Invoices_DownloadByBillingAccount</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingAccountBillingAccountInvoiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="documentName"> The ID that uniquely identifies an invoice document. This ID may be an identifier for an invoice PDF, a credit note, or a tax receipt. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<DocumentDownloadResult>> DownloadByBillingAccountAsync(WaitUntil waitUntil, string documentName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.DownloadByBillingAccount");
            scope.Start();
            try
            {
                var response = await _billingAccountBillingAccountInvoiceInvoicesRestClient.DownloadByBillingAccountAsync(Id.Parent.Name, Id.Name, documentName, cancellationToken).ConfigureAwait(false);
                var operation = new BillingArmOperation<DocumentDownloadResult>(new DocumentDownloadResultOperationSource(), _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics, Pipeline, _billingAccountBillingAccountInvoiceInvoicesRestClient.CreateDownloadByBillingAccountRequest(Id.Parent.Name, Id.Name, documentName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a URL to download an invoice document. The operation is supported for billing accounts with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Invoices_DownloadByBillingAccount</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingAccountBillingAccountInvoiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="documentName"> The ID that uniquely identifies an invoice document. This ID may be an identifier for an invoice PDF, a credit note, or a tax receipt. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<DocumentDownloadResult> DownloadByBillingAccount(WaitUntil waitUntil, string documentName = null, CancellationToken cancellationToken = default)
        {
            using var scope = _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.DownloadByBillingAccount");
            scope.Start();
            try
            {
                var response = _billingAccountBillingAccountInvoiceInvoicesRestClient.DownloadByBillingAccount(Id.Parent.Name, Id.Name, documentName, cancellationToken);
                var operation = new BillingArmOperation<DocumentDownloadResult>(new DocumentDownloadResultOperationSource(), _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics, Pipeline, _billingAccountBillingAccountInvoiceInvoicesRestClient.CreateDownloadByBillingAccountRequest(Id.Parent.Name, Id.Name, documentName).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a URL to download the summary document for an invoice. The operation is supported for billing accounts with agreement type Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/downloadSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Invoices_DownloadSummaryByBillingAccount</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingAccountBillingAccountInvoiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<DocumentDownloadResult>> DownloadSummaryByBillingAccountAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.DownloadSummaryByBillingAccount");
            scope.Start();
            try
            {
                var response = await _billingAccountBillingAccountInvoiceInvoicesRestClient.DownloadSummaryByBillingAccountAsync(Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new BillingArmOperation<DocumentDownloadResult>(new DocumentDownloadResultOperationSource(), _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics, Pipeline, _billingAccountBillingAccountInvoiceInvoicesRestClient.CreateDownloadSummaryByBillingAccountRequest(Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a URL to download the summary document for an invoice. The operation is supported for billing accounts with agreement type Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/downloadSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Invoices_DownloadSummaryByBillingAccount</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="BillingAccountBillingAccountInvoiceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<DocumentDownloadResult> DownloadSummaryByBillingAccount(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.DownloadSummaryByBillingAccount");
            scope.Start();
            try
            {
                var response = _billingAccountBillingAccountInvoiceInvoicesRestClient.DownloadSummaryByBillingAccount(Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new BillingArmOperation<DocumentDownloadResult>(new DocumentDownloadResultOperationSource(), _billingAccountBillingAccountInvoiceInvoicesClientDiagnostics, Pipeline, _billingAccountBillingAccountInvoiceInvoicesRestClient.CreateDownloadSummaryByBillingAccountRequest(Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Transactions_ListByInvoice</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Transaction"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Transaction> GetTransactionsAsync(BillingAccountBillingAccountInvoiceResourceGetTransactionsOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new BillingAccountBillingAccountInvoiceResourceGetTransactionsOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _transactionsRestClient.CreateListByInvoiceRequest(Id.Parent.Name, Id.Name, options.Filter, options.OrderBy, options.Top, options.Skip, options.Count, options.Search);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _transactionsRestClient.CreateListByInvoiceNextPageRequest(nextLink, Id.Parent.Name, Id.Name, options.Filter, options.OrderBy, options.Top, options.Skip, options.Count, options.Search);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => Transaction.DeserializeTransaction(e), _transactionsClientDiagnostics, Pipeline, "BillingAccountBillingAccountInvoiceResource.GetTransactions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage charges.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactions</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Transactions_ListByInvoice</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Transaction"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Transaction> GetTransactions(BillingAccountBillingAccountInvoiceResourceGetTransactionsOptions options, CancellationToken cancellationToken = default)
        {
            options ??= new BillingAccountBillingAccountInvoiceResourceGetTransactionsOptions();

            HttpMessage FirstPageRequest(int? pageSizeHint) => _transactionsRestClient.CreateListByInvoiceRequest(Id.Parent.Name, Id.Name, options.Filter, options.OrderBy, options.Top, options.Skip, options.Count, options.Search);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _transactionsRestClient.CreateListByInvoiceNextPageRequest(nextLink, Id.Parent.Name, Id.Name, options.Filter, options.OrderBy, options.Top, options.Skip, options.Count, options.Search);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => Transaction.DeserializeTransaction(e), _transactionsClientDiagnostics, Pipeline, "BillingAccountBillingAccountInvoiceResource.GetTransactions", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets a URL to download the transactions document for an invoice. The operation is supported for billing accounts with agreement type Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactionsDownload</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Transactions_TransactionsDownloadByInvoice</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<ArmOperation<DocumentDownloadResult>> TransactionsDownloadByInvoiceTransactionAsync(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _transactionsClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.TransactionsDownloadByInvoiceTransaction");
            scope.Start();
            try
            {
                var response = await _transactionsRestClient.TransactionsDownloadByInvoiceAsync(Id.Parent.Name, Id.Name, cancellationToken).ConfigureAwait(false);
                var operation = new BillingArmOperation<DocumentDownloadResult>(new DocumentDownloadResultOperationSource(), _transactionsClientDiagnostics, Pipeline, _transactionsRestClient.CreateTransactionsDownloadByInvoiceRequest(Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a URL to download the transactions document for an invoice. The operation is supported for billing accounts with agreement type Enterprise Agreement.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactionsDownload</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Transactions_TransactionsDownloadByInvoice</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual ArmOperation<DocumentDownloadResult> TransactionsDownloadByInvoiceTransaction(WaitUntil waitUntil, CancellationToken cancellationToken = default)
        {
            using var scope = _transactionsClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.TransactionsDownloadByInvoiceTransaction");
            scope.Start();
            try
            {
                var response = _transactionsRestClient.TransactionsDownloadByInvoice(Id.Parent.Name, Id.Name, cancellationToken);
                var operation = new BillingArmOperation<DocumentDownloadResult>(new DocumentDownloadResultOperationSource(), _transactionsClientDiagnostics, Pipeline, _transactionsRestClient.CreateTransactionsDownloadByInvoiceRequest(Id.Parent.Name, Id.Name).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the transaction summary for an invoice. Transactions include purchases, refunds and Azure usage charges.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactionSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Transactions_GetTransactionSummaryByInvoice</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The filter query option allows clients to filter the line items that are aggregated to create the line item summary. </param>
        /// <param name="search"> The search query option allows clients to filter the line items that are aggregated to create the line item summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TransactionSummary>> GetTransactionSummaryByInvoiceTransactionAsync(string filter = null, string search = null, CancellationToken cancellationToken = default)
        {
            using var scope = _transactionsClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.GetTransactionSummaryByInvoiceTransaction");
            scope.Start();
            try
            {
                var response = await _transactionsRestClient.GetTransactionSummaryByInvoiceAsync(Id.Parent.Name, Id.Name, filter, search, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the transaction summary for an invoice. Transactions include purchases, refunds and Azure usage charges.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactionSummary</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Transactions_GetTransactionSummaryByInvoice</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter"> The filter query option allows clients to filter the line items that are aggregated to create the line item summary. </param>
        /// <param name="search"> The search query option allows clients to filter the line items that are aggregated to create the line item summary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TransactionSummary> GetTransactionSummaryByInvoiceTransaction(string filter = null, string search = null, CancellationToken cancellationToken = default)
        {
            using var scope = _transactionsClientDiagnostics.CreateScope("BillingAccountBillingAccountInvoiceResource.GetTransactionSummaryByInvoiceTransaction");
            scope.Start();
            try
            {
                var response = _transactionsRestClient.GetTransactionSummaryByInvoice(Id.Parent.Name, Id.Name, filter, search, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
