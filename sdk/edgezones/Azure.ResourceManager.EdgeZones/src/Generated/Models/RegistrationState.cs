// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.EdgeZones.Models
{
    /// <summary> The Azure Extended Zone registration status for a subscription. </summary>
    public readonly partial struct RegistrationState : IEquatable<RegistrationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RegistrationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RegistrationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotRegisteredValue = "NotRegistered";
        private const string PendingRegisterValue = "PendingRegister";
        private const string RegisteredValue = "Registered";
        private const string PendingUnregisterValue = "PendingUnregister";

        /// <summary> Not Registered State. </summary>
        public static RegistrationState NotRegistered { get; } = new RegistrationState(NotRegisteredValue);
        /// <summary> Pending Register State. </summary>
        public static RegistrationState PendingRegister { get; } = new RegistrationState(PendingRegisterValue);
        /// <summary> Registered State. </summary>
        public static RegistrationState Registered { get; } = new RegistrationState(RegisteredValue);
        /// <summary> Pending Unregister State. </summary>
        public static RegistrationState PendingUnregister { get; } = new RegistrationState(PendingUnregisterValue);
        /// <summary> Determines if two <see cref="RegistrationState"/> values are the same. </summary>
        public static bool operator ==(RegistrationState left, RegistrationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RegistrationState"/> values are not the same. </summary>
        public static bool operator !=(RegistrationState left, RegistrationState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RegistrationState"/>. </summary>
        public static implicit operator RegistrationState(string value) => new RegistrationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RegistrationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RegistrationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
