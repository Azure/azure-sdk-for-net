// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.EdgeZones;

namespace Azure.ResourceManager.EdgeZones.Samples
{
    public partial class Sample_ExtendedZoneResource
    {
        // GetAzureExtendedZone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetAzureExtendedZone()
        {
            // Generated from example definition: specification/edgezones/resource-manager/Microsoft.EdgeZones/preview/2024-04-01-preview/examples/AzureExtendedZones_Get.json
            // this example is just showing the usage of "AzureExtendedZones_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ExtendedZoneResource created on azure
            // for more information of creating ExtendedZoneResource, please refer to the document of ExtendedZoneResource
            string subscriptionId = "a1ffc958-d2c7-493e-9f1e-125a0477f536";
            string azureExtendedZoneName = "losangeles";
            ResourceIdentifier extendedZoneResourceId = ExtendedZoneResource.CreateResourceIdentifier(subscriptionId, azureExtendedZoneName);
            ExtendedZoneResource extendedZone = client.GetExtendedZoneResource(extendedZoneResourceId);

            // invoke the operation
            ExtendedZoneResource result = await extendedZone.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExtendedZoneData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // RegisterAzureExtendedZone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Register_RegisterAzureExtendedZone()
        {
            // Generated from example definition: specification/edgezones/resource-manager/Microsoft.EdgeZones/preview/2024-04-01-preview/examples/AzureExtendedZones_Register.json
            // this example is just showing the usage of "AzureExtendedZones_Register" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ExtendedZoneResource created on azure
            // for more information of creating ExtendedZoneResource, please refer to the document of ExtendedZoneResource
            string subscriptionId = "a1ffc958-d2c7-493e-9f1e-125a0477f536";
            string azureExtendedZoneName = "losangeles";
            ResourceIdentifier extendedZoneResourceId = ExtendedZoneResource.CreateResourceIdentifier(subscriptionId, azureExtendedZoneName);
            ExtendedZoneResource extendedZone = client.GetExtendedZoneResource(extendedZoneResourceId);

            // invoke the operation
            ExtendedZoneResource result = await extendedZone.RegisterAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExtendedZoneData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // UnregisterAzureExtendedZone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Unregister_UnregisterAzureExtendedZone()
        {
            // Generated from example definition: specification/edgezones/resource-manager/Microsoft.EdgeZones/preview/2024-04-01-preview/examples/AzureExtendedZones_Unregister.json
            // this example is just showing the usage of "AzureExtendedZones_Unregister" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ExtendedZoneResource created on azure
            // for more information of creating ExtendedZoneResource, please refer to the document of ExtendedZoneResource
            string subscriptionId = "a1ffc958-d2c7-493e-9f1e-125a0477f536";
            string azureExtendedZoneName = "losangeles";
            ResourceIdentifier extendedZoneResourceId = ExtendedZoneResource.CreateResourceIdentifier(subscriptionId, azureExtendedZoneName);
            ExtendedZoneResource extendedZone = client.GetExtendedZoneResource(extendedZoneResourceId);

            // invoke the operation
            ExtendedZoneResource result = await extendedZone.UnregisterAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            ExtendedZoneData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
