// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.ResourceConnector;

namespace Azure.ResourceManager.ResourceConnector.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmResourceConnectorModelFactory
    {
        /// <summary> Initializes a new instance of ApplianceOperation. </summary>
        /// <param name="isDataAction"> Is this Operation a data plane operation. </param>
        /// <param name="name"> The name of the compute operation. </param>
        /// <param name="origin"> The origin of the compute operation. </param>
        /// <param name="description"> The description of the operation. </param>
        /// <param name="operation"> The display name of the compute operation. </param>
        /// <param name="provider"> The resource provider for the operation. </param>
        /// <param name="resource"> The display name of the resource the operation applies to. </param>
        /// <returns> A new <see cref="Models.ApplianceOperation"/> instance for mocking. </returns>
        public static ApplianceOperation ApplianceOperation(bool? isDataAction = null, string name = null, string origin = null, string description = null, string operation = null, string provider = null, string resource = null)
        {
            return new ApplianceOperation(isDataAction, name, origin, description, operation, provider, resource);
        }

        /// <summary> Initializes a new instance of ApplianceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity for the resource. Current supported identity types: SystemAssigned, None. </param>
        /// <param name="distro"> Represents a supported Fabric/Infra. (AKSEdge etc...). </param>
        /// <param name="infrastructureConfigProvider"> Contains infrastructure information about the Appliance. </param>
        /// <param name="provisioningState"> The current deployment or provisioning state, which only appears in the response. </param>
        /// <param name="publicKey"> Certificates pair used to download MSI certificate from HIS. Can only be set once. </param>
        /// <param name="status"> Appliance’s health and state of connection to on-prem. </param>
        /// <param name="version"> Version of the Appliance. </param>
        /// <returns> A new <see cref="ResourceConnector.ApplianceData"/> instance for mocking. </returns>
        public static ApplianceData ApplianceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, Distro? distro = null, Provider? infrastructureConfigProvider = null, string provisioningState = null, string publicKey = null, Status? status = null, string version = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ApplianceData(id, name, resourceType, systemData, tags, location, identity, distro, infrastructureConfigProvider != null ? new AppliancePropertiesInfrastructureConfig(infrastructureConfigProvider) : null, provisioningState, publicKey, status, version);
        }

        /// <summary> Initializes a new instance of ApplianceGetTelemetryConfigResult. </summary>
        /// <param name="telemetryInstrumentationKey"> Telemetry instrumentation key. </param>
        /// <returns> A new <see cref="Models.ApplianceGetTelemetryConfigResult"/> instance for mocking. </returns>
        public static ApplianceGetTelemetryConfigResult ApplianceGetTelemetryConfigResult(string telemetryInstrumentationKey = null)
        {
            return new ApplianceGetTelemetryConfigResult(telemetryInstrumentationKey);
        }

        /// <summary> Initializes a new instance of ApplianceListCredentialResults. </summary>
        /// <param name="hybridConnectionConfig"> Contains the REP (rendezvous endpoint) and “Listener” access token from notification service (NS). </param>
        /// <param name="kubeconfigs"> The list of appliance kubeconfigs. </param>
        /// <returns> A new <see cref="Models.ApplianceListCredentialResults"/> instance for mocking. </returns>
        public static ApplianceListCredentialResults ApplianceListCredentialResults(HybridConnectionConfig hybridConnectionConfig = null, IEnumerable<ApplianceCredentialKubeconfig> kubeconfigs = null)
        {
            kubeconfigs ??= new List<ApplianceCredentialKubeconfig>();

            return new ApplianceListCredentialResults(hybridConnectionConfig, kubeconfigs?.ToList());
        }

        /// <summary> Initializes a new instance of HybridConnectionConfig. </summary>
        /// <param name="expirationTime"> Timestamp when this token will be expired. </param>
        /// <param name="hybridConnectionName"> Name of the connection. </param>
        /// <param name="relay"> Name of the notification service. </param>
        /// <param name="token"> Listener access token. </param>
        /// <returns> A new <see cref="Models.HybridConnectionConfig"/> instance for mocking. </returns>
        public static HybridConnectionConfig HybridConnectionConfig(long? expirationTime = null, string hybridConnectionName = null, string relay = null, string token = null)
        {
            return new HybridConnectionConfig(expirationTime, hybridConnectionName, relay, token);
        }

        /// <summary> Initializes a new instance of ApplianceCredentialKubeconfig. </summary>
        /// <param name="name"> Name which contains the role of the kubeconfig. </param>
        /// <param name="value"> Contains the kubeconfig value. </param>
        /// <returns> A new <see cref="Models.ApplianceCredentialKubeconfig"/> instance for mocking. </returns>
        public static ApplianceCredentialKubeconfig ApplianceCredentialKubeconfig(AccessProfileType? name = null, string value = null)
        {
            return new ApplianceCredentialKubeconfig(name, value);
        }

        /// <summary> Initializes a new instance of ApplianceListKeysResults. </summary>
        /// <param name="artifactProfiles"> Map of artifacts that contains a list of ArtifactProfile used to upload artifacts such as logs. </param>
        /// <param name="kubeconfigs"> The list of appliance kubeconfigs. </param>
        /// <param name="sshKeys"> Map of Customer User Public, Private SSH Keys and Certificate when available. </param>
        /// <returns> A new <see cref="Models.ApplianceListKeysResults"/> instance for mocking. </returns>
        public static ApplianceListKeysResults ApplianceListKeysResults(IReadOnlyDictionary<string, ArtifactProfile> artifactProfiles = null, IEnumerable<ApplianceCredentialKubeconfig> kubeconfigs = null, IReadOnlyDictionary<string, SSHKey> sshKeys = null)
        {
            artifactProfiles ??= new Dictionary<string, ArtifactProfile>();
            kubeconfigs ??= new List<ApplianceCredentialKubeconfig>();
            sshKeys ??= new Dictionary<string, SSHKey>();

            return new ApplianceListKeysResults(artifactProfiles, kubeconfigs?.ToList(), sshKeys);
        }

        /// <summary> Initializes a new instance of ArtifactProfile. </summary>
        /// <param name="endpoint"> Endpoint is the URL to upload artifacts to. </param>
        /// <returns> A new <see cref="Models.ArtifactProfile"/> instance for mocking. </returns>
        public static ArtifactProfile ArtifactProfile(string endpoint = null)
        {
            return new ArtifactProfile(endpoint);
        }

        /// <summary> Initializes a new instance of SSHKey. </summary>
        /// <param name="certificate"> Certificate associated with the public key if the key is signed. </param>
        /// <param name="creationTimeStamp"> Certificate creation timestamp (Unix). </param>
        /// <param name="expirationTimeStamp"> Certificate expiration timestamp (Unix). </param>
        /// <param name="privateKey"> Private Key. </param>
        /// <param name="publicKey"> Public Key. </param>
        /// <returns> A new <see cref="Models.SSHKey"/> instance for mocking. </returns>
        public static SSHKey SSHKey(string certificate = null, long? creationTimeStamp = null, long? expirationTimeStamp = null, string privateKey = null, string publicKey = null)
        {
            return new SSHKey(certificate, creationTimeStamp, expirationTimeStamp, privateKey, publicKey);
        }

        /// <summary> Initializes a new instance of UpgradeGraph. </summary>
        /// <param name="id"> The appliance resource path. </param>
        /// <param name="name"> The release train name. </param>
        /// <param name="properties"> The properties of supported version. </param>
        /// <returns> A new <see cref="Models.UpgradeGraph"/> instance for mocking. </returns>
        public static UpgradeGraph UpgradeGraph(string id = null, string name = null, UpgradeGraphProperties properties = null)
        {
            return new UpgradeGraph(id, name, properties);
        }

        /// <summary> Initializes a new instance of UpgradeGraphProperties. </summary>
        /// <param name="applianceVersion"> The current appliance version. </param>
        /// <param name="supportedVersions"> This contains the current version and supported upgrade versions. </param>
        /// <returns> A new <see cref="Models.UpgradeGraphProperties"/> instance for mocking. </returns>
        public static UpgradeGraphProperties UpgradeGraphProperties(string applianceVersion = null, IEnumerable<SupportedVersion> supportedVersions = null)
        {
            supportedVersions ??= new List<SupportedVersion>();

            return new UpgradeGraphProperties(applianceVersion, supportedVersions?.ToList());
        }

        /// <summary> Initializes a new instance of SupportedVersion. </summary>
        /// <param name="metadataCatalogVersion"> This is the metadata of the supported newer version. </param>
        /// <param name="version"> The newer version available for upgrade. </param>
        /// <returns> A new <see cref="Models.SupportedVersion"/> instance for mocking. </returns>
        public static SupportedVersion SupportedVersion(SupportedVersionCatalogVersion metadataCatalogVersion = null, string version = null)
        {
            return new SupportedVersion(metadataCatalogVersion != null ? new SupportedVersionMetadata(metadataCatalogVersion) : null, version);
        }

        /// <summary> Initializes a new instance of SupportedVersionCatalogVersion. </summary>
        /// <param name="data"> The newer supported version catalog version data. </param>
        /// <param name="name"> The catalog version name for the version available for upgrade. </param>
        /// <param name="namespace"> The catalog version namespace for the version available for upgrade. </param>
        /// <returns> A new <see cref="Models.SupportedVersionCatalogVersion"/> instance for mocking. </returns>
        public static SupportedVersionCatalogVersion SupportedVersionCatalogVersion(SupportedVersionCatalogVersionData data = null, string name = null, string @namespace = null)
        {
            return new SupportedVersionCatalogVersion(data, name, @namespace);
        }

        /// <summary> Initializes a new instance of SupportedVersionCatalogVersionData. </summary>
        /// <param name="audience"> The image audience name for the version available for upgrade. </param>
        /// <param name="catalog"> The image catalog name for the version available for upgrade. </param>
        /// <param name="offer"> The image offer name for the version available for upgrade. </param>
        /// <param name="version"> The image version for the version available for upgrade. </param>
        /// <returns> A new <see cref="Models.SupportedVersionCatalogVersionData"/> instance for mocking. </returns>
        public static SupportedVersionCatalogVersionData SupportedVersionCatalogVersionData(string audience = null, string catalog = null, string offer = null, string version = null)
        {
            return new SupportedVersionCatalogVersionData(audience, catalog, offer, version);
        }
    }
}
