// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ResourceConnector.Models
{
    /// <summary> Applianceâ€™s health and state of connection to on-prem. </summary>
    public readonly partial struct Status : IEquatable<Status>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Status"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WaitingForHeartbeatValue = "WaitingForHeartbeat";
        private const string ValidatingValue = "Validating";
        private const string ConnectingValue = "Connecting";
        private const string ConnectedValue = "Connected";
        private const string RunningValue = "Running";
        private const string PreparingForUpgradeValue = "PreparingForUpgrade";
        private const string EtcdSnapshotFailedValue = "ETCDSnapshotFailed";
        private const string UpgradePrerequisitesCompletedValue = "UpgradePrerequisitesCompleted";
        private const string ValidatingSFSConnectivityValue = "ValidatingSFSConnectivity";
        private const string ValidatingImageDownloadValue = "ValidatingImageDownload";
        private const string ValidatingImageUploadValue = "ValidatingImageUpload";
        private const string ValidatingEtcdHealthValue = "ValidatingETCDHealth";
        private const string PreUpgradeValue = "PreUpgrade";
        private const string UpgradingKvaioValue = "UpgradingKVAIO";
        private const string WaitingForKvaioValue = "WaitingForKVAIO";
        private const string ImagePendingValue = "ImagePending";
        private const string ImageProvisioningValue = "ImageProvisioning";
        private const string ImageProvisionedValue = "ImageProvisioned";
        private const string ImageDownloadingValue = "ImageDownloading";
        private const string ImageDownloadedValue = "ImageDownloaded";
        private const string ImageDeprovisioningValue = "ImageDeprovisioning";
        private const string ImageUnknownValue = "ImageUnknown";
        private const string UpdatingCloudOperatorValue = "UpdatingCloudOperator";
        private const string WaitingForCloudOperatorValue = "WaitingForCloudOperator";
        private const string UpdatingCapiValue = "UpdatingCAPI";
        private const string UpdatingClusterValue = "UpdatingCluster";
        private const string PostUpgradeValue = "PostUpgrade";
        private const string UpgradeCompleteValue = "UpgradeComplete";
        private const string UpgradeClusterExtensionFailedToDeleteValue = "UpgradeClusterExtensionFailedToDelete";
        private const string UpgradeFailedValue = "UpgradeFailed";
        private const string OfflineValue = "Offline";
        private const string NoneValue = "None";

        /// <summary> WaitingForHeartbeat. </summary>
        public static Status WaitingForHeartbeat { get; } = new Status(WaitingForHeartbeatValue);
        /// <summary> Validating. </summary>
        public static Status Validating { get; } = new Status(ValidatingValue);
        /// <summary> Connecting. </summary>
        public static Status Connecting { get; } = new Status(ConnectingValue);
        /// <summary> Connected. </summary>
        public static Status Connected { get; } = new Status(ConnectedValue);
        /// <summary> Running. </summary>
        public static Status Running { get; } = new Status(RunningValue);
        /// <summary> PreparingForUpgrade. </summary>
        public static Status PreparingForUpgrade { get; } = new Status(PreparingForUpgradeValue);
        /// <summary> ETCDSnapshotFailed. </summary>
        public static Status EtcdSnapshotFailed { get; } = new Status(EtcdSnapshotFailedValue);
        /// <summary> UpgradePrerequisitesCompleted. </summary>
        public static Status UpgradePrerequisitesCompleted { get; } = new Status(UpgradePrerequisitesCompletedValue);
        /// <summary> ValidatingSFSConnectivity. </summary>
        public static Status ValidatingSFSConnectivity { get; } = new Status(ValidatingSFSConnectivityValue);
        /// <summary> ValidatingImageDownload. </summary>
        public static Status ValidatingImageDownload { get; } = new Status(ValidatingImageDownloadValue);
        /// <summary> ValidatingImageUpload. </summary>
        public static Status ValidatingImageUpload { get; } = new Status(ValidatingImageUploadValue);
        /// <summary> ValidatingETCDHealth. </summary>
        public static Status ValidatingEtcdHealth { get; } = new Status(ValidatingEtcdHealthValue);
        /// <summary> PreUpgrade. </summary>
        public static Status PreUpgrade { get; } = new Status(PreUpgradeValue);
        /// <summary> UpgradingKVAIO. </summary>
        public static Status UpgradingKvaio { get; } = new Status(UpgradingKvaioValue);
        /// <summary> WaitingForKVAIO. </summary>
        public static Status WaitingForKvaio { get; } = new Status(WaitingForKvaioValue);
        /// <summary> ImagePending. </summary>
        public static Status ImagePending { get; } = new Status(ImagePendingValue);
        /// <summary> ImageProvisioning. </summary>
        public static Status ImageProvisioning { get; } = new Status(ImageProvisioningValue);
        /// <summary> ImageProvisioned. </summary>
        public static Status ImageProvisioned { get; } = new Status(ImageProvisionedValue);
        /// <summary> ImageDownloading. </summary>
        public static Status ImageDownloading { get; } = new Status(ImageDownloadingValue);
        /// <summary> ImageDownloaded. </summary>
        public static Status ImageDownloaded { get; } = new Status(ImageDownloadedValue);
        /// <summary> ImageDeprovisioning. </summary>
        public static Status ImageDeprovisioning { get; } = new Status(ImageDeprovisioningValue);
        /// <summary> ImageUnknown. </summary>
        public static Status ImageUnknown { get; } = new Status(ImageUnknownValue);
        /// <summary> UpdatingCloudOperator. </summary>
        public static Status UpdatingCloudOperator { get; } = new Status(UpdatingCloudOperatorValue);
        /// <summary> WaitingForCloudOperator. </summary>
        public static Status WaitingForCloudOperator { get; } = new Status(WaitingForCloudOperatorValue);
        /// <summary> UpdatingCAPI. </summary>
        public static Status UpdatingCapi { get; } = new Status(UpdatingCapiValue);
        /// <summary> UpdatingCluster. </summary>
        public static Status UpdatingCluster { get; } = new Status(UpdatingClusterValue);
        /// <summary> PostUpgrade. </summary>
        public static Status PostUpgrade { get; } = new Status(PostUpgradeValue);
        /// <summary> UpgradeComplete. </summary>
        public static Status UpgradeComplete { get; } = new Status(UpgradeCompleteValue);
        /// <summary> UpgradeClusterExtensionFailedToDelete. </summary>
        public static Status UpgradeClusterExtensionFailedToDelete { get; } = new Status(UpgradeClusterExtensionFailedToDeleteValue);
        /// <summary> UpgradeFailed. </summary>
        public static Status UpgradeFailed { get; } = new Status(UpgradeFailedValue);
        /// <summary> Offline. </summary>
        public static Status Offline { get; } = new Status(OfflineValue);
        /// <summary> None. </summary>
        public static Status None { get; } = new Status(NoneValue);
        /// <summary> Determines if two <see cref="Status"/> values are the same. </summary>
        public static bool operator ==(Status left, Status right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Status"/> values are not the same. </summary>
        public static bool operator !=(Status left, Status right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Status"/>. </summary>
        public static implicit operator Status(string value) => new Status(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Status other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
