// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ResourceConnector.Models
{
    /// <summary> Information about the connected appliance. </summary>
    public readonly partial struct Provider : IEquatable<Provider>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Provider"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Provider(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VmWareValue = "VMWare";
        private const string HCIValue = "HCI";
        private const string ScvmmValue = "SCVMM";

        /// <summary> VMWare. </summary>
        public static Provider VmWare { get; } = new Provider(VmWareValue);
        /// <summary> HCI. </summary>
        public static Provider HCI { get; } = new Provider(HCIValue);
        /// <summary> SCVMM. </summary>
        public static Provider Scvmm { get; } = new Provider(ScvmmValue);
        /// <summary> Determines if two <see cref="Provider"/> values are the same. </summary>
        public static bool operator ==(Provider left, Provider right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Provider"/> values are not the same. </summary>
        public static bool operator !=(Provider left, Provider right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Provider"/>. </summary>
        public static implicit operator Provider(string value) => new Provider(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Provider other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Provider other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
