// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Hybridcloud.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Hybridcloud
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Hybridcloud. </summary>
    public static partial class HybridcloudExtensions
    {
        private static ResourceGroupResourceExtensionClient GetResourceGroupResourceExtensionClient(ArmResource resource)
        {
            return resource.GetCachedClient(client =>
            {
                return new ResourceGroupResourceExtensionClient(client, resource.Id);
            });
        }

        private static ResourceGroupResourceExtensionClient GetResourceGroupResourceExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new ResourceGroupResourceExtensionClient(client, scope);
            });
        }

        private static SubscriptionResourceExtensionClient GetSubscriptionResourceExtensionClient(ArmResource resource)
        {
            return resource.GetCachedClient(client =>
            {
                return new SubscriptionResourceExtensionClient(client, resource.Id);
            });
        }

        private static SubscriptionResourceExtensionClient GetSubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new SubscriptionResourceExtensionClient(client, scope);
            });
        }

        private static TenantResourceExtensionClient GetTenantResourceExtensionClient(ArmResource resource)
        {
            return resource.GetCachedClient(client =>
            {
                return new TenantResourceExtensionClient(client, resource.Id);
            });
        }

        private static TenantResourceExtensionClient GetTenantResourceExtensionClient(ArmClient client, ResourceIdentifier scope)
        {
            return client.GetResourceClient(() =>
            {
                return new TenantResourceExtensionClient(client, scope);
            });
        }
        #region CloudConnectorResource
        /// <summary>
        /// Gets an object representing a <see cref="CloudConnectorResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CloudConnectorResource.CreateResourceIdentifier" /> to create a <see cref="CloudConnectorResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CloudConnectorResource" /> object. </returns>
        public static CloudConnectorResource GetCloudConnectorResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CloudConnectorResource.ValidateResourceId(id);
                return new CloudConnectorResource(client, id);
            }
            );
        }
        #endregion

        #region CloudConnectionResource
        /// <summary>
        /// Gets an object representing a <see cref="CloudConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CloudConnectionResource.CreateResourceIdentifier" /> to create a <see cref="CloudConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CloudConnectionResource" /> object. </returns>
        public static CloudConnectionResource GetCloudConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CloudConnectionResource.ValidateResourceId(id);
                return new CloudConnectionResource(client, id);
            }
            );
        }
        #endregion

        /// <summary> Gets a collection of CloudConnectorResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CloudConnectorResources and their operations over a CloudConnectorResource. </returns>
        public static CloudConnectorCollection GetCloudConnectors(this ResourceGroupResource resourceGroupResource)
        {
            return GetResourceGroupResourceExtensionClient(resourceGroupResource).GetCloudConnectors();
        }

        /// <summary>
        /// Gets the specified cloud connector in a specified resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudConnectors_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public static async Task<Response<CloudConnectorResource>> GetCloudConnectorAsync(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetCloudConnectors().GetAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified cloud connector in a specified resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnectors/{cloudConnectorName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudConnectors_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public static Response<CloudConnectorResource> GetCloudConnector(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetCloudConnectors().Get(cancellationToken);
        }

        /// <summary> Gets a collection of CloudConnectionResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CloudConnectionResources and their operations over a CloudConnectionResource. </returns>
        public static CloudConnectionCollection GetCloudConnections(this ResourceGroupResource resourceGroupResource)
        {
            return GetResourceGroupResourceExtensionClient(resourceGroupResource).GetCloudConnections();
        }

        /// <summary>
        /// Gets the specified cloud connection in a specified resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudConnections_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public static async Task<Response<CloudConnectionResource>> GetCloudConnectionAsync(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetCloudConnections().GetAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the specified cloud connection in a specified resource group.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCloud/cloudConnections/{cloudConnectionName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudConnections_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public static Response<CloudConnectionResource> GetCloudConnection(this ResourceGroupResource resourceGroupResource, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetCloudConnections().Get(cancellationToken);
        }

        /// <summary>
        /// Return list of cloud connectors in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCloud/cloudConnectors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudConnectors_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CloudConnectorResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CloudConnectorResource> GetCloudConnectorsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetSubscriptionResourceExtensionClient(subscriptionResource).GetCloudConnectorsAsync(cancellationToken);
        }

        /// <summary>
        /// Return list of cloud connectors in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCloud/cloudConnectors</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudConnectors_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudConnectorResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CloudConnectorResource> GetCloudConnectors(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetSubscriptionResourceExtensionClient(subscriptionResource).GetCloudConnectors(cancellationToken);
        }

        /// <summary>
        /// Return list of cloud connections in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCloud/cloudConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudConnections_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CloudConnectionResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CloudConnectionResource> GetCloudConnectionsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetSubscriptionResourceExtensionClient(subscriptionResource).GetCloudConnectionsAsync(cancellationToken);
        }

        /// <summary>
        /// Return list of cloud connections in a subscription.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCloud/cloudConnections</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>CloudConnections_ListBySubscription</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CloudConnectionResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CloudConnectionResource> GetCloudConnections(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetSubscriptionResourceExtensionClient(subscriptionResource).GetCloudConnections(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available HybridCloud Rest API operations.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.HybridCloud/operations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HybridCloud_ListOperations</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Models.Operation" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<Models.Operation> GetOperationsHybridCloudsAsync(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            return GetTenantResourceExtensionClient(tenantResource).GetOperationsHybridCloudsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all of the available HybridCloud Rest API operations.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/providers/Microsoft.HybridCloud/operations</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>HybridCloud_ListOperations</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Models.Operation" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<Models.Operation> GetOperationsHybridClouds(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            return GetTenantResourceExtensionClient(tenantResource).GetOperationsHybridClouds(cancellationToken);
        }
    }
}
