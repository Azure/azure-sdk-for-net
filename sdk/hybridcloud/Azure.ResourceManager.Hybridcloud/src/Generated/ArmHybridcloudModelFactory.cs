// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Hybridcloud;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Hybridcloud.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmHybridcloudModelFactory
    {
        /// <summary> Initializes a new instance of Operation. </summary>
        /// <param name="name"> The name of the operation, as per Resource-Based Access Control (RBAC). Examples: &quot;Microsoft.Compute/virtualMachines/write&quot;, &quot;Microsoft.Compute/virtualMachines/capture/action&quot;. </param>
        /// <param name="isDataAction"> Whether the operation applies to data-plane. This is &quot;true&quot; for data-plane operations and &quot;false&quot; for ARM/control-plane operations. </param>
        /// <param name="display"> Localized display information for this particular operation. </param>
        /// <param name="origin"> The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is &quot;user,system&quot;. </param>
        /// <param name="actionType"> Enum. Indicates the action type. &quot;Internal&quot; refers to actions that are for internal only APIs. </param>
        /// <returns> A new <see cref="Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, bool? isDataAction = null, OperationDisplay display = null, Origin? origin = null, ActionType? actionType = null)
        {
            return new Operation(name, isDataAction, display, origin, actionType);
        }

        /// <summary> Initializes a new instance of OperationDisplay. </summary>
        /// <param name="provider"> The localized friendly form of the resource provider name, e.g. &quot;Microsoft Monitoring Insights&quot; or &quot;Microsoft Compute&quot;. </param>
        /// <param name="resource"> The localized friendly name of the resource type related to this operation. E.g. &quot;Virtual Machines&quot; or &quot;Job Schedule Collections&quot;. </param>
        /// <param name="operation"> The concise, localized friendly name for the operation; suitable for dropdowns. E.g. &quot;Create or Update Virtual Machine&quot;, &quot;Restart Virtual Machine&quot;. </param>
        /// <param name="description"> The short, localized friendly description of the operation; suitable for tool tips and detailed views. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description);
        }

        /// <summary> Initializes a new instance of CloudConnectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="accountId"> Account identifier of the remote cloud. </param>
        /// <param name="cloudType"> The cloud connector type. </param>
        /// <param name="provisioningState"> The provisioning state of the cloud connector resource. </param>
        /// <returns> A new <see cref="Hybridcloud.CloudConnectorData"/> instance for mocking. </returns>
        public static CloudConnectorData CloudConnectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, string accountId = null, CloudType? cloudType = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CloudConnectorData(id, name, resourceType, systemData, tags, location, etag, accountId, cloudType, provisioningState);
        }

        /// <summary> Initializes a new instance of DiscoveredResources. </summary>
        /// <param name="discoveredResourcesValue"> List of discovered remote cloud resources. </param>
        /// <param name="name"> Remote Resource name to filter on. </param>
        /// <param name="resourceFilterType"> Remote Resource type to filter on. </param>
        /// <param name="region"> Remote Resource location/region to filter on. </param>
        /// <param name="tag"> Remote Resource tags to filter on in key:value format. </param>
        /// <returns> A new <see cref="Models.DiscoveredResources"/> instance for mocking. </returns>
        public static DiscoveredResources DiscoveredResources(IEnumerable<DiscoveredResource> discoveredResourcesValue = null, string name = null, string resourceFilterType = null, string region = null, string tag = null)
        {
            discoveredResourcesValue ??= new List<DiscoveredResource>();

            return new DiscoveredResources(discoveredResourcesValue?.ToList(), name, resourceFilterType, region, tag);
        }

        /// <summary> Initializes a new instance of DiscoveredResource. </summary>
        /// <param name="id"> Remote cloud resource identifier. </param>
        /// <param name="bodyContentType"> Content type of the cloud resource body. </param>
        /// <param name="body"> Properties of the remote cloud resource. </param>
        /// <returns> A new <see cref="Models.DiscoveredResource"/> instance for mocking. </returns>
        public static DiscoveredResource DiscoveredResource(string id = null, BodyContentType? bodyContentType = null, string body = null)
        {
            return new DiscoveredResource(id, bodyContentType, body);
        }

        /// <summary> Initializes a new instance of CloudConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="cloudConnectorId"> The cloud connector which discovered the remote resource. </param>
        /// <param name="remoteResourceId"> Identifier for the remote cloud resource. </param>
        /// <param name="virtualHubId"> The virtualHub to which the cloud connection belongs. </param>
        /// <param name="sharedKey"> Shared key of the cloud connection. </param>
        /// <param name="provisioningState"> The provisioning state of the cloud collection resource. </param>
        /// <returns> A new <see cref="Hybridcloud.CloudConnectionData"/> instance for mocking. </returns>
        public static CloudConnectionData CloudConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, ResourceIdentifier cloudConnectorId = null, string remoteResourceId = null, ResourceIdentifier virtualHubId = null, string sharedKey = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CloudConnectionData(id, name, resourceType, systemData, tags, location, etag, cloudConnectorId != null ? ResourceManagerModelFactory.WritableSubResource(cloudConnectorId) : null, remoteResourceId, virtualHubId != null ? ResourceManagerModelFactory.WritableSubResource(virtualHubId) : null, sharedKey, provisioningState);
        }
    }
}
