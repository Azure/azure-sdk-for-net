// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hybridcloud.Models
{
    public partial class DiscoveredResources
    {
        internal static DiscoveredResources DeserializeDiscoveredResources(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IReadOnlyList<DiscoveredResource>> discoveredResources = default;
            Optional<string> name = default;
            Optional<string> type = default;
            Optional<string> region = default;
            Optional<string> tag = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("discoveredResources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DiscoveredResource> array = new List<DiscoveredResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DiscoveredResource.DeserializeDiscoveredResource(item));
                    }
                    discoveredResources = array;
                    continue;
                }
                if (property.NameEquals("resourceFilter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("name"u8))
                        {
                            name = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("type"u8))
                        {
                            type = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("region"u8))
                        {
                            region = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("tag"u8))
                        {
                            tag = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new DiscoveredResources(Optional.ToList(discoveredResources), name.Value, type.Value, region.Value, tag.Value);
        }
    }
}
