// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Quota.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The quota request response with the quota request ID.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class QuotaRequestSubmitResponse202
    {
        /// <summary>
        /// Initializes a new instance of the QuotaRequestSubmitResponse202
        /// class.
        /// </summary>
        public QuotaRequestSubmitResponse202()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QuotaRequestSubmitResponse202
        /// class.
        /// </summary>
        /// <param name="id">The quota request ID. To check the request status,
        /// use the **id** value in a [Quota Request
        /// Status](https://docs.microsoft.com/en-us/rest/api/reserved-vm-instances/quotarequeststatus/get)
        /// GET operation.</param>
        /// <param name="name">Operation ID.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="provisioningState">Quota request status. Possible
        /// values include: 'Accepted', 'Invalid', 'Succeeded', 'Failed',
        /// 'InProgress'</param>
        /// <param name="message">User-friendly message.</param>
        /// <param name="limit">Resource quota limit properties.</param>
        /// <param name="unit"> The quota limit units, such as Count and Bytes.
        /// When requesting quota, use the **unit** value returned in the GET
        /// response in the request body of your PUT operation.</param>
        /// <param name="name1">Resource name provided by the resource
        /// provider. Use this property name when requesting quota.</param>
        /// <param name="resourceType">Resource type name.</param>
        /// <param name="quotaPeriod">The time period over which the quota
        /// usage values are summarized. For example:
        /// *P1D (per one day)
        /// *PT1M (per one minute)
        /// *PT1S (per one second).
        /// This parameter is optional because, for some resources like
        /// compute, the period is irrelevant.</param>
        /// <param name="properties">Additional properties for the specific
        /// resource provider.</param>
        public QuotaRequestSubmitResponse202(string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), string message = default(string), LimitObject limit = default(LimitObject), string unit = default(string), ResourceName name1 = default(ResourceName), string resourceType = default(string), string quotaPeriod = default(string), object properties = default(object))
        {
            Id = id;
            Name = name;
            Type = type;
            ProvisioningState = provisioningState;
            Message = message;
            Limit = limit;
            Unit = unit;
            Name1 = name1;
            ResourceType = resourceType;
            QuotaPeriod = quotaPeriod;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the quota request ID. To check the request status, use the
        /// **id** value in a [Quota Request
        /// Status](https://docs.microsoft.com/en-us/rest/api/reserved-vm-instances/quotarequeststatus/get)
        /// GET operation.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets operation ID.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets quota request status. Possible values include: 'Accepted',
        /// 'Invalid', 'Succeeded', 'Failed', 'InProgress'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets user-friendly message.
        /// </summary>
        [JsonProperty(PropertyName = "properties.message")]
        public string Message { get; private set; }

        /// <summary>
        /// Gets or sets resource quota limit properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.limit")]
        public LimitObject Limit { get; set; }

        /// <summary>
        /// Gets or sets  The quota limit units, such as Count and Bytes. When
        /// requesting quota, use the **unit** value returned in the GET
        /// response in the request body of your PUT operation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or sets resource name provided by the resource provider. Use
        /// this property name when requesting quota.
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public ResourceName Name1 { get; set; }

        /// <summary>
        /// Gets or sets resource type name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceType")]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets the time period over which the quota usage values are
        /// summarized. For example:
        /// *P1D (per one day)
        /// *PT1M (per one minute)
        /// *PT1S (per one second).
        /// This parameter is optional because, for some resources like
        /// compute, the period is irrelevant.
        /// </summary>
        [JsonProperty(PropertyName = "properties.quotaPeriod")]
        public string QuotaPeriod { get; private set; }

        /// <summary>
        /// Gets or sets additional properties for the specific resource
        /// provider.
        /// </summary>
        [JsonProperty(PropertyName = "properties.properties")]
        public object Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Limit != null)
            {
                Limit.Validate();
            }
        }
    }
}
