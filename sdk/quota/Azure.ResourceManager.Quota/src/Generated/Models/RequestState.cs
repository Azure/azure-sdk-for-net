// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Quota.Models
{
    /// <summary> Request status. </summary>
    public readonly partial struct RequestState : IEquatable<RequestState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RequestState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RequestState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AcceptedValue = "Accepted";
        private const string CreatedValue = "Created";
        private const string InvalidValue = "Invalid";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string InProgressValue = "InProgress";
        private const string CanceledValue = "Canceled";

        /// <summary> Accepted. </summary>
        public static RequestState Accepted { get; } = new RequestState(AcceptedValue);
        /// <summary> Created. </summary>
        public static RequestState Created { get; } = new RequestState(CreatedValue);
        /// <summary> Invalid. </summary>
        public static RequestState Invalid { get; } = new RequestState(InvalidValue);
        /// <summary> Succeeded. </summary>
        public static RequestState Succeeded { get; } = new RequestState(SucceededValue);
        /// <summary> Failed. </summary>
        public static RequestState Failed { get; } = new RequestState(FailedValue);
        /// <summary> InProgress. </summary>
        public static RequestState InProgress { get; } = new RequestState(InProgressValue);
        /// <summary> Canceled. </summary>
        public static RequestState Canceled { get; } = new RequestState(CanceledValue);
        /// <summary> Determines if two <see cref="RequestState"/> values are the same. </summary>
        public static bool operator ==(RequestState left, RequestState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RequestState"/> values are not the same. </summary>
        public static bool operator !=(RequestState left, RequestState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RequestState"/>. </summary>
        public static implicit operator RequestState(string value) => new RequestState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RequestState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RequestState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
