// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Quota.Models
{
    /// <summary> GroupingId type. It is a required property. More types of groupIds can be supported in future. </summary>
    public readonly partial struct GroupingIdType : IEquatable<GroupingIdType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GroupingIdType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GroupingIdType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ServiceTreeIdValue = "ServiceTreeId";
        private const string BillingIdValue = "BillingId";

        /// <summary> ServiceTreeId. </summary>
        public static GroupingIdType ServiceTreeId { get; } = new GroupingIdType(ServiceTreeIdValue);
        /// <summary> BillingId. </summary>
        public static GroupingIdType BillingId { get; } = new GroupingIdType(BillingIdValue);
        /// <summary> Determines if two <see cref="GroupingIdType"/> values are the same. </summary>
        public static bool operator ==(GroupingIdType left, GroupingIdType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GroupingIdType"/> values are not the same. </summary>
        public static bool operator !=(GroupingIdType left, GroupingIdType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="GroupingIdType"/>. </summary>
        public static implicit operator GroupingIdType(string value) => new GroupingIdType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GroupingIdType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GroupingIdType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
