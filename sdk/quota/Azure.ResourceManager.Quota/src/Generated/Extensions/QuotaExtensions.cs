// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Quota.Mocking;
using Azure.ResourceManager.Quota.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Quota
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Quota. </summary>
    public static partial class QuotaExtensions
    {
        /// <param name="client"></param>
        private static MockableQuotaArmClient GetMockableQuotaArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableQuotaArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="tenantResource"></param>
        private static MockableQuotaTenantResource GetMockableQuotaTenantResource(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient(client => new MockableQuotaTenantResource(client, tenantResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="GroupQuotaEntityResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="GroupQuotaEntityResource"/> object. </returns>
        public static GroupQuotaEntityResource GetGroupQuotaEntityResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetGroupQuotaEntityResource(id);
        }

        /// <summary> Gets an object representing a <see cref="GroupQuotaRequestStatusResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="GroupQuotaRequestStatusResource"/> object. </returns>
        public static GroupQuotaRequestStatusResource GetGroupQuotaRequestStatusResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetGroupQuotaRequestStatusResource(id);
        }

        /// <summary> Gets an object representing a <see cref="GroupQuotaSubscriptionResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="GroupQuotaSubscriptionResource"/> object. </returns>
        public static GroupQuotaSubscriptionResource GetGroupQuotaSubscriptionResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetGroupQuotaSubscriptionResource(id);
        }

        /// <summary> Gets an object representing a <see cref="GroupQuotaSubscriptionRequestStatusResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="GroupQuotaSubscriptionRequestStatusResource"/> object. </returns>
        public static GroupQuotaSubscriptionRequestStatusResource GetGroupQuotaSubscriptionRequestStatusResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetGroupQuotaSubscriptionRequestStatusResource(id);
        }

        /// <summary> Gets an object representing a <see cref="GroupQuotaLimitListResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="GroupQuotaLimitListResource"/> object. </returns>
        public static GroupQuotaLimitListResource GetGroupQuotaLimitListResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetGroupQuotaLimitListResource(id);
        }

        /// <summary> Gets an object representing a <see cref="SubscriptionQuotaAllocationsListResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="SubscriptionQuotaAllocationsListResource"/> object. </returns>
        public static SubscriptionQuotaAllocationsListResource GetSubscriptionQuotaAllocationsListResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetSubscriptionQuotaAllocationsListResource(id);
        }

        /// <summary> Gets an object representing a <see cref="QuotaAllocationRequestStatusResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="QuotaAllocationRequestStatusResource"/> object. </returns>
        public static QuotaAllocationRequestStatusResource GetQuotaAllocationRequestStatusResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetQuotaAllocationRequestStatusResource(id);
        }

        /// <summary> Gets an object representing a <see cref="GroupQuotasEnforcementStatusResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="GroupQuotasEnforcementStatusResource"/> object. </returns>
        public static GroupQuotasEnforcementStatusResource GetGroupQuotasEnforcementStatusResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetGroupQuotasEnforcementStatusResource(id);
        }

        /// <summary> Gets an object representing a <see cref="CurrentUsagesBaseResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="CurrentUsagesBaseResource"/> object. </returns>
        public static CurrentUsagesBaseResource GetCurrentUsagesBaseResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetCurrentUsagesBaseResource(id);
        }

        /// <summary> Gets a collection of <see cref="CurrentUsagesBaseCollection"/> objects within the specified scope. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a collection of <see cref="CurrentUsagesBaseResource"/> objects. </returns>
        public static CurrentUsagesBaseCollection GetCurrentUsagesBases(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetCurrentUsagesBases(scope);
        }

        /// <summary> Get the current usage of a resource. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <param name="resourceName">
        /// Resource name for a given resource provider. For example:
        /// - SKU name for Microsoft.Compute
        /// - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
        ///  For Microsoft.Network PublicIPAddresses.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<CurrentUsagesBaseResource> GetCurrentUsagesBase(this ArmClient client, ResourceIdentifier scope, string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetCurrentUsagesBase(scope, resourceName, cancellationToken);
        }

        /// <summary> Get the current usage of a resource. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <param name="resourceName">
        /// Resource name for a given resource provider. For example:
        /// - SKU name for Microsoft.Compute
        /// - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
        ///  For Microsoft.Network PublicIPAddresses.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<CurrentUsagesBaseResource>> GetCurrentUsagesBaseAsync(this ArmClient client, ResourceIdentifier scope, string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return await GetMockableQuotaArmClient(client).GetCurrentUsagesBaseAsync(scope, resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets an object representing a <see cref="CurrentQuotaLimitBaseResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="CurrentQuotaLimitBaseResource"/> object. </returns>
        public static CurrentQuotaLimitBaseResource GetCurrentQuotaLimitBaseResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetCurrentQuotaLimitBaseResource(id);
        }

        /// <summary> Gets a collection of <see cref="CurrentQuotaLimitBaseCollection"/> objects within the specified scope. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a collection of <see cref="CurrentQuotaLimitBaseResource"/> objects. </returns>
        public static CurrentQuotaLimitBaseCollection GetCurrentQuotaLimitBases(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetCurrentQuotaLimitBases(scope);
        }

        /// <summary> Get the quota limit of a resource. The response can be used to determine the remaining quota to calculate a new quota limit that can be submitted with a PUT request. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <param name="resourceName">
        /// Resource name for a given resource provider. For example:
        /// - SKU name for Microsoft.Compute
        /// - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
        ///  For Microsoft.Network PublicIPAddresses.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<CurrentQuotaLimitBaseResource> GetCurrentQuotaLimitBase(this ArmClient client, ResourceIdentifier scope, string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetCurrentQuotaLimitBase(scope, resourceName, cancellationToken);
        }

        /// <summary> Get the quota limit of a resource. The response can be used to determine the remaining quota to calculate a new quota limit that can be submitted with a PUT request. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <param name="resourceName">
        /// Resource name for a given resource provider. For example:
        /// - SKU name for Microsoft.Compute
        /// - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
        ///  For Microsoft.Network PublicIPAddresses.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<CurrentQuotaLimitBaseResource>> GetCurrentQuotaLimitBaseAsync(this ArmClient client, ResourceIdentifier scope, string resourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return await GetMockableQuotaArmClient(client).GetCurrentQuotaLimitBaseAsync(scope, resourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets an object representing a <see cref="QuotaRequestDetailsResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="QuotaRequestDetailsResource"/> object. </returns>
        public static QuotaRequestDetailsResource GetQuotaRequestDetailsResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetQuotaRequestDetailsResource(id);
        }

        /// <summary> Gets a collection of <see cref="QuotaRequestDetailsCollection"/> objects within the specified scope. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a collection of <see cref="QuotaRequestDetailsResource"/> objects. </returns>
        public static QuotaRequestDetailsCollection GetQuotaRequestDetails(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetQuotaRequestDetails(scope);
        }

        /// <summary> Get the quota request details and status by quota request ID for the resources of the resource provider at a specific location. The quota request ID **id** is returned in the response of the PUT operation. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <param name="id"> Quota request ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<QuotaRequestDetailsResource> GetQuotaRequestDetails(this ArmClient client, ResourceIdentifier scope, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableQuotaArmClient(client).GetQuotaRequestDetails(scope, id, cancellationToken);
        }

        /// <summary> Get the quota request details and status by quota request ID for the resources of the resource provider at a specific location. The quota request ID **id** is returned in the response of the PUT operation. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope of the resource collection to get. </param>
        /// <param name="id"> Quota request ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<QuotaRequestDetailsResource>> GetQuotaRequestDetailsAsync(this ArmClient client, ResourceIdentifier scope, string id, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(client, nameof(client));

            return await GetMockableQuotaArmClient(client).GetQuotaRequestDetailsAsync(scope, id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a collection of GroupQuotaEntities in the <see cref="TenantResource"/>. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="managementGroupId"> The managementGroupId for the resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> An object representing collection of GroupQuotaEntities and their operations over a GroupQuotaEntityResource. </returns>
        public static GroupQuotaEntityCollection GetGroupQuotaEntities(this TenantResource tenantResource, string managementGroupId)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetGroupQuotaEntities(managementGroupId);
        }

        /// <summary> Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on group quota can be access from the group quota APIs. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="managementGroupId"> The managementGroupId for the resource. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<GroupQuotaEntityResource>> GetGroupQuotaEntityAsync(this TenantResource tenantResource, string managementGroupId, string groupQuotaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return await GetMockableQuotaTenantResource(tenantResource).GetGroupQuotaEntityAsync(managementGroupId, groupQuotaName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on group quota can be access from the group quota APIs. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="managementGroupId"> The managementGroupId for the resource. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<GroupQuotaEntityResource> GetGroupQuotaEntity(this TenantResource tenantResource, string managementGroupId, string groupQuotaName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetGroupQuotaEntity(managementGroupId, groupQuotaName, cancellationToken);
        }

        /// <summary> Gets a collection of SubscriptionQuotaAllocationsLists in the <see cref="TenantResource"/>. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="managementGroupId"> The managementGroupId for the resource. </param>
        /// <param name="subscriptionId"> The subscriptionId for the resource. </param>
        /// <param name="groupQuotaName"> The groupQuotaName for the resource. </param>
        /// <param name="resourceProviderName"> The resourceProviderName for the resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> An object representing collection of SubscriptionQuotaAllocationsLists and their operations over a SubscriptionQuotaAllocationsListResource. </returns>
        public static SubscriptionQuotaAllocationsListCollection GetSubscriptionQuotaAllocationsLists(this TenantResource tenantResource, string managementGroupId, string subscriptionId, string groupQuotaName, string resourceProviderName)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetSubscriptionQuotaAllocationsLists(managementGroupId, subscriptionId, groupQuotaName, resourceProviderName);
        }

        /// <summary> Gets a collection of QuotaAllocationRequestStatuses in the <see cref="TenantResource"/>. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="managementGroupId"> The managementGroupId for the resource. </param>
        /// <param name="subscriptionId"> The subscriptionId for the resource. </param>
        /// <param name="groupQuotaName"> The groupQuotaName for the resource. </param>
        /// <param name="resourceProviderName"> The resourceProviderName for the resource. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> An object representing collection of QuotaAllocationRequestStatuses and their operations over a QuotaAllocationRequestStatusResource. </returns>
        public static QuotaAllocationRequestStatusCollection GetQuotaAllocationRequestStatuses(this TenantResource tenantResource, string managementGroupId, string subscriptionId, string groupQuotaName, string resourceProviderName)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetQuotaAllocationRequestStatuses(managementGroupId, subscriptionId, groupQuotaName, resourceProviderName);
        }

        /// <summary> Get the quota allocation request status for the subscriptionId by allocationId. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="managementGroupId"> The managementGroupId for the resource. </param>
        /// <param name="subscriptionId"> The subscriptionId for the resource. </param>
        /// <param name="groupQuotaName"> The groupQuotaName for the resource. </param>
        /// <param name="resourceProviderName"> The resourceProviderName for the resource. </param>
        /// <param name="allocationId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<QuotaAllocationRequestStatusResource>> GetQuotaAllocationRequestStatusAsync(this TenantResource tenantResource, string managementGroupId, string subscriptionId, string groupQuotaName, string resourceProviderName, string allocationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return await GetMockableQuotaTenantResource(tenantResource).GetQuotaAllocationRequestStatusAsync(managementGroupId, subscriptionId, groupQuotaName, resourceProviderName, allocationId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get the quota allocation request status for the subscriptionId by allocationId. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="managementGroupId"> The managementGroupId for the resource. </param>
        /// <param name="subscriptionId"> The subscriptionId for the resource. </param>
        /// <param name="groupQuotaName"> The groupQuotaName for the resource. </param>
        /// <param name="resourceProviderName"> The resourceProviderName for the resource. </param>
        /// <param name="allocationId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<QuotaAllocationRequestStatusResource> GetQuotaAllocationRequestStatus(this TenantResource tenantResource, string managementGroupId, string subscriptionId, string groupQuotaName, string resourceProviderName, string allocationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetQuotaAllocationRequestStatus(managementGroupId, subscriptionId, groupQuotaName, resourceProviderName, allocationId, cancellationToken);
        }

        /// <summary> Get a list of current usage for all resources for the scope specified. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="CurrentUsagesBaseResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CurrentUsagesBaseResource> GetCurrentUsagesBasesAsync(this TenantResource tenantResource, string scope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetCurrentUsagesBasesAsync(scope, cancellationToken);
        }

        /// <summary> Get a list of current usage for all resources for the scope specified. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="CurrentUsagesBaseResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CurrentUsagesBaseResource> GetCurrentUsagesBases(this TenantResource tenantResource, string scope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetCurrentUsagesBases(scope, cancellationToken);
        }

        /// <summary> Get a list of current quota limits of all resources for the specified scope. The response from this GET operation can be leveraged to submit requests to update a quota. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="CurrentQuotaLimitBaseResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<CurrentQuotaLimitBaseResource> GetCurrentQuotaLimitBasesAsync(this TenantResource tenantResource, string scope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetCurrentQuotaLimitBasesAsync(scope, cancellationToken);
        }

        /// <summary> Get a list of current quota limits of all resources for the specified scope. The response from this GET operation can be leveraged to submit requests to update a quota. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="CurrentQuotaLimitBaseResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<CurrentQuotaLimitBaseResource> GetCurrentQuotaLimitBases(this TenantResource tenantResource, string scope, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetCurrentQuotaLimitBases(scope, cancellationToken);
        }

        /// <summary> For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the **oData** filter to select quota requests. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="filter">
        /// | Field                    | Supported operators
        /// |---------------------|------------------------
        /// 
        /// |requestSubmitTime | ge, le, eq, gt, lt
        /// |provisioningState eq {QuotaRequestState}
        /// |resourceName eq {resourceName}
        /// </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skiptoken"> The **Skiptoken** parameter is used only if a previous operation returned a partial result. If a previous response contains a **nextLink** element, its value includes a **skiptoken** parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="QuotaRequestDetailsResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<QuotaRequestDetailsResource> GetQuotaRequestDetailsAsync(this TenantResource tenantResource, string scope, string filter = default, int? top = default, string skiptoken = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetQuotaRequestDetailsAsync(scope, filter, top, skiptoken, cancellationToken);
        }

        /// <summary> For the specified scope, get the current quota requests for a one year period ending at the time is made. Use the **oData** filter to select quota requests. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="scope"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="filter">
        /// | Field                    | Supported operators
        /// |---------------------|------------------------
        /// 
        /// |requestSubmitTime | ge, le, eq, gt, lt
        /// |provisioningState eq {QuotaRequestState}
        /// |resourceName eq {resourceName}
        /// </param>
        /// <param name="top"> Number of records to return. </param>
        /// <param name="skiptoken"> The **Skiptoken** parameter is used only if a previous operation returned a partial result. If a previous response contains a **nextLink** element, its value includes a **skiptoken** parameter that specifies a starting point to use for subsequent calls. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="QuotaRequestDetailsResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<QuotaRequestDetailsResource> GetQuotaRequestDetails(this TenantResource tenantResource, string scope, string filter = default, int? top = default, string skiptoken = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetQuotaRequestDetails(scope, filter, top, skiptoken, cancellationToken);
        }

        /// <summary> List the operations for the provider. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="QuotaOperationResult"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<QuotaOperationResult> GetAllAsync(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetAllAsync(cancellationToken);
        }

        /// <summary> List the operations for the provider. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="QuotaOperationResult"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<QuotaOperationResult> GetAll(this TenantResource tenantResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableQuotaTenantResource(tenantResource).GetAll(cancellationToken);
        }
    }
}
