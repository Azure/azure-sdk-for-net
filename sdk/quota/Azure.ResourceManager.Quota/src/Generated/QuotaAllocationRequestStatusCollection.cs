// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Quota
{
    /// <summary>
    /// A class representing a collection of <see cref="QuotaAllocationRequestStatusResource"/> and their operations.
    /// Each <see cref="QuotaAllocationRequestStatusResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="QuotaAllocationRequestStatusCollection"/> instance call the GetQuotaAllocationRequestStatuses method from an instance of the parent resource.
    /// </summary>
    public partial class QuotaAllocationRequestStatusCollection : ArmCollection, IEnumerable<QuotaAllocationRequestStatusResource>, IAsyncEnumerable<QuotaAllocationRequestStatusResource>
    {
        private readonly ClientDiagnostics _quotaAllocationRequestStatusesClientDiagnostics;
        private readonly QuotaAllocationRequestStatuses _quotaAllocationRequestStatusesRestClient;
        /// <summary> The managementGroupId. </summary>
        private readonly string _managementGroupId;
        /// <summary> The subscriptionId. </summary>
        private readonly string _subscriptionId;
        /// <summary> The groupQuotaName. </summary>
        private readonly string _groupQuotaName;
        /// <summary> The resourceProviderName. </summary>
        private readonly string _resourceProviderName;

        /// <summary> Initializes a new instance of QuotaAllocationRequestStatusCollection for mocking. </summary>
        protected QuotaAllocationRequestStatusCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="QuotaAllocationRequestStatusCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        /// <param name="managementGroupId"> The managementGroupId for the resource. </param>
        /// <param name="subscriptionId"> The subscriptionId for the resource. </param>
        /// <param name="groupQuotaName"> The groupQuotaName for the resource. </param>
        /// <param name="resourceProviderName"> The resourceProviderName for the resource. </param>
        internal QuotaAllocationRequestStatusCollection(ArmClient client, ResourceIdentifier id, string managementGroupId, string subscriptionId, string groupQuotaName, string resourceProviderName) : base(client, id)
        {
            TryGetApiVersion(QuotaAllocationRequestStatusResource.ResourceType, out string quotaAllocationRequestStatusApiVersion);
            _managementGroupId = managementGroupId;
            _subscriptionId = subscriptionId;
            _groupQuotaName = groupQuotaName;
            _resourceProviderName = resourceProviderName;
            _quotaAllocationRequestStatusesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.Quota", QuotaAllocationRequestStatusResource.ResourceType.Namespace, Diagnostics);
            _quotaAllocationRequestStatusesRestClient = new QuotaAllocationRequestStatuses(_quotaAllocationRequestStatusesClientDiagnostics, Pipeline, Endpoint, quotaAllocationRequestStatusApiVersion ?? "2025-09-01");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != TenantResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, TenantResource.ResourceType), id);
            }
        }

        /// <summary> Get the quota allocation request status for the subscriptionId by allocationId. </summary>
        /// <param name="allocationId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="allocationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="allocationId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<QuotaAllocationRequestStatusResource>> GetAsync(string allocationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(allocationId, nameof(allocationId));

            using DiagnosticScope scope = _quotaAllocationRequestStatusesClientDiagnostics.CreateScope("QuotaAllocationRequestStatusCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _quotaAllocationRequestStatusesRestClient.CreateGetRequest(_managementGroupId, _subscriptionId, _groupQuotaName, _resourceProviderName, allocationId, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<QuotaAllocationRequestStatusData> response = Response.FromValue(QuotaAllocationRequestStatusData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new QuotaAllocationRequestStatusResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the quota allocation request status for the subscriptionId by allocationId. </summary>
        /// <param name="allocationId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="allocationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="allocationId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<QuotaAllocationRequestStatusResource> Get(string allocationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(allocationId, nameof(allocationId));

            using DiagnosticScope scope = _quotaAllocationRequestStatusesClientDiagnostics.CreateScope("QuotaAllocationRequestStatusCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _quotaAllocationRequestStatusesRestClient.CreateGetRequest(_managementGroupId, _subscriptionId, _groupQuotaName, _resourceProviderName, allocationId, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<QuotaAllocationRequestStatusData> response = Response.FromValue(QuotaAllocationRequestStatusData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new QuotaAllocationRequestStatusResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is required. </summary>
        /// <param name="filter">
        /// | Field | Supported operators
        /// |---------------------|------------------------
        /// 
        /// location eq {location}
        /// Example: $filter=location eq eastus
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="filter"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> A collection of <see cref="QuotaAllocationRequestStatusResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<QuotaAllocationRequestStatusResource> GetAllAsync(string filter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(filter, nameof(filter));

            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<QuotaAllocationRequestStatusData, QuotaAllocationRequestStatusResource>(new QuotaAllocationRequestStatusesGetAllAsyncCollectionResultOfT(
                _quotaAllocationRequestStatusesRestClient,
                _managementGroupId,
                _subscriptionId,
                _groupQuotaName,
                _resourceProviderName,
                filter,
                context), data => new QuotaAllocationRequestStatusResource(Client, data));
        }

        /// <summary> Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is required. </summary>
        /// <param name="filter">
        /// | Field | Supported operators
        /// |---------------------|------------------------
        /// 
        /// location eq {location}
        /// Example: $filter=location eq eastus
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="filter"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> A collection of <see cref="QuotaAllocationRequestStatusResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<QuotaAllocationRequestStatusResource> GetAll(string filter, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(filter, nameof(filter));

            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<QuotaAllocationRequestStatusData, QuotaAllocationRequestStatusResource>(new QuotaAllocationRequestStatusesGetAllCollectionResultOfT(
                _quotaAllocationRequestStatusesRestClient,
                _managementGroupId,
                _subscriptionId,
                _groupQuotaName,
                _resourceProviderName,
                filter,
                context), data => new QuotaAllocationRequestStatusResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="allocationId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="allocationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="allocationId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string allocationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(allocationId, nameof(allocationId));

            using DiagnosticScope scope = _quotaAllocationRequestStatusesClientDiagnostics.CreateScope("QuotaAllocationRequestStatusCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _quotaAllocationRequestStatusesRestClient.CreateGetRequest(_managementGroupId, _subscriptionId, _groupQuotaName, _resourceProviderName, allocationId, context);
                await Pipeline.SendAsync(message, context.CancellationToken).ConfigureAwait(false);
                Response result = message.Response;
                Response<QuotaAllocationRequestStatusData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(QuotaAllocationRequestStatusData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((QuotaAllocationRequestStatusData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="allocationId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="allocationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="allocationId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string allocationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(allocationId, nameof(allocationId));

            using DiagnosticScope scope = _quotaAllocationRequestStatusesClientDiagnostics.CreateScope("QuotaAllocationRequestStatusCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _quotaAllocationRequestStatusesRestClient.CreateGetRequest(_managementGroupId, _subscriptionId, _groupQuotaName, _resourceProviderName, allocationId, context);
                Pipeline.Send(message, context.CancellationToken);
                Response result = message.Response;
                Response<QuotaAllocationRequestStatusData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(QuotaAllocationRequestStatusData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((QuotaAllocationRequestStatusData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="allocationId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="allocationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="allocationId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<QuotaAllocationRequestStatusResource>> GetIfExistsAsync(string allocationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(allocationId, nameof(allocationId));

            using DiagnosticScope scope = _quotaAllocationRequestStatusesClientDiagnostics.CreateScope("QuotaAllocationRequestStatusCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _quotaAllocationRequestStatusesRestClient.CreateGetRequest(_managementGroupId, _subscriptionId, _groupQuotaName, _resourceProviderName, allocationId, context);
                await Pipeline.SendAsync(message, context.CancellationToken).ConfigureAwait(false);
                Response result = message.Response;
                Response<QuotaAllocationRequestStatusData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(QuotaAllocationRequestStatusData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((QuotaAllocationRequestStatusData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                if (response.Value == null)
                {
                    return new NoValueResponse<QuotaAllocationRequestStatusResource>(response.GetRawResponse());
                }
                return Response.FromValue(new QuotaAllocationRequestStatusResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="allocationId"> Request Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="allocationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="allocationId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<QuotaAllocationRequestStatusResource> GetIfExists(string allocationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(allocationId, nameof(allocationId));

            using DiagnosticScope scope = _quotaAllocationRequestStatusesClientDiagnostics.CreateScope("QuotaAllocationRequestStatusCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _quotaAllocationRequestStatusesRestClient.CreateGetRequest(_managementGroupId, _subscriptionId, _groupQuotaName, _resourceProviderName, allocationId, context);
                Pipeline.Send(message, context.CancellationToken);
                Response result = message.Response;
                Response<QuotaAllocationRequestStatusData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(QuotaAllocationRequestStatusData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((QuotaAllocationRequestStatusData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                if (response.Value == null)
                {
                    return new NoValueResponse<QuotaAllocationRequestStatusResource>(response.GetRawResponse());
                }
                return Response.FromValue(new QuotaAllocationRequestStatusResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<QuotaAllocationRequestStatusResource> IEnumerable<QuotaAllocationRequestStatusResource>.GetEnumerator()
        {
            return this.GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<QuotaAllocationRequestStatusResource> IAsyncEnumerable<QuotaAllocationRequestStatusResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return this.GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
