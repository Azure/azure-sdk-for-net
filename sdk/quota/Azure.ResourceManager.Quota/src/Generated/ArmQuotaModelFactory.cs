// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Quota;

namespace Azure.ResourceManager.Quota.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmQuotaModelFactory
    {
        /// <summary> Initializes a new instance of CurrentUsagesBaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Usage properties for the specified resource. </param>
        /// <returns> A new <see cref="Quota.CurrentUsagesBaseData"/> instance for mocking. </returns>
        public static CurrentUsagesBaseData CurrentUsagesBaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, UsagesProperties properties = null)
        {
            return new CurrentUsagesBaseData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of UsagesProperties. </summary>
        /// <param name="usages"> The quota limit properties for this resource. </param>
        /// <param name="unit"> The units for the quota usage, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. </param>
        /// <param name="name"> Resource name provided by the resource provider. Use this property name when requesting quota. </param>
        /// <param name="resourceType"> The name of the resource type. Optional field. </param>
        /// <param name="quotaPeriod">
        /// The time period for the summary of the quota usage values. For example:
        /// *P1D (per one day)
        /// *PT1M (per one minute)
        /// *PT1S (per one second).
        /// This parameter is optional because it is not relevant for all resources such as compute.
        /// </param>
        /// <param name="isQuotaApplicable"> States if quota can be requested for this resource. </param>
        /// <param name="properties"> Additional properties for the specific resource provider. </param>
        /// <returns> A new <see cref="Models.UsagesProperties"/> instance for mocking. </returns>
        public static UsagesProperties UsagesProperties(UsagesObject usages = null, string unit = null, ResourceName name = null, string resourceType = null, string quotaPeriod = null, bool? isQuotaApplicable = null, BinaryData properties = null)
        {
            return new UsagesProperties(usages, unit, name, resourceType, quotaPeriod, isQuotaApplicable, properties);
        }

        /// <summary> Initializes a new instance of UsagesObject. </summary>
        /// <param name="value"> The usages value. </param>
        /// <param name="usagesType"> The quota or usages limit types. </param>
        /// <returns> A new <see cref="Models.UsagesObject"/> instance for mocking. </returns>
        public static UsagesObject UsagesObject(int value = default, UsagesType? usagesType = null)
        {
            return new UsagesObject(value, usagesType);
        }

        /// <summary> Initializes a new instance of ResourceName. </summary>
        /// <param name="value"> Resource name. </param>
        /// <param name="localizedValue"> Resource display name. </param>
        /// <returns> A new <see cref="Models.ResourceName"/> instance for mocking. </returns>
        public static ResourceName ResourceName(string value = null, string localizedValue = null)
        {
            return new ResourceName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of ServiceErrorDetail. </summary>
        /// <param name="code"> Error code. </param>
        /// <param name="message"> Error message. </param>
        /// <returns> A new <see cref="Models.ServiceErrorDetail"/> instance for mocking. </returns>
        public static ServiceErrorDetail ServiceErrorDetail(string code = null, string message = null)
        {
            return new ServiceErrorDetail(code, message);
        }

        /// <summary> Initializes a new instance of CurrentQuotaLimitBaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Quota properties for the specified resource, based on the API called, Quotas or Usages. </param>
        /// <returns> A new <see cref="Quota.CurrentQuotaLimitBaseData"/> instance for mocking. </returns>
        public static CurrentQuotaLimitBaseData CurrentQuotaLimitBaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, QuotaProperties properties = null)
        {
            return new CurrentQuotaLimitBaseData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of QuotaProperties. </summary>
        /// <param name="limit">
        /// Resource quota limit properties.
        /// Please note <see cref="LimitJsonObject"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LimitObject"/>.
        /// </param>
        /// <param name="unit"> The quota units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. </param>
        /// <param name="name"> Resource name provided by the resource provider. Use this property name when requesting quota. </param>
        /// <param name="resourceType"> The name of the resource type. Optional field. </param>
        /// <param name="quotaPeriod">
        /// The time period over which the quota usage values are summarized. For example:
        /// *P1D (per one day)
        /// *PT1M (per one minute)
        /// *PT1S (per one second).
        /// This parameter is optional because, for some resources like compute, the period is irrelevant.
        /// </param>
        /// <param name="isQuotaApplicable"> States if quota can be requested for this resource. </param>
        /// <param name="properties"> Additional properties for the specific resource provider. </param>
        /// <returns> A new <see cref="Models.QuotaProperties"/> instance for mocking. </returns>
        public static QuotaProperties QuotaProperties(LimitJsonObject limit = null, string unit = null, ResourceName name = null, string resourceType = null, string quotaPeriod = null, bool? isQuotaApplicable = null, BinaryData properties = null)
        {
            return new QuotaProperties(limit, unit, name, resourceType, quotaPeriod, isQuotaApplicable, properties);
        }

        /// <summary> Initializes a new instance of QuotaRequestDetailData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The quota request status. </param>
        /// <param name="message"> User-friendly status message. </param>
        /// <param name="error"> Error details of the quota request. </param>
        /// <param name="requestSubmitOn"> The quota request submission time. The date conforms to the following format specified by the ISO 8601 standard: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="value"> Quota request details. </param>
        /// <returns> A new <see cref="Quota.QuotaRequestDetailData"/> instance for mocking. </returns>
        public static QuotaRequestDetailData QuotaRequestDetailData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, QuotaRequestState? provisioningState = null, string message = null, ServiceErrorDetail error = null, DateTimeOffset? requestSubmitOn = null, IEnumerable<SubRequest> value = null)
        {
            value ??= new List<SubRequest>();

            return new QuotaRequestDetailData(id, name, resourceType, systemData, provisioningState, message, error, requestSubmitOn, value?.ToList());
        }

        /// <summary> Initializes a new instance of SubRequest. </summary>
        /// <param name="name"> Resource name. </param>
        /// <param name="resourceType"> Resource type for which the quota properties were requested. </param>
        /// <param name="unit"> Quota limit units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. </param>
        /// <param name="provisioningState"> The quota request status. </param>
        /// <param name="message"> User-friendly status message. </param>
        /// <param name="subRequestId"> Quota request ID. </param>
        /// <param name="limit">
        /// Resource quota limit properties.
        /// Please note <see cref="LimitJsonObject"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="LimitObject"/>.
        /// </param>
        /// <returns> A new <see cref="Models.SubRequest"/> instance for mocking. </returns>
        public static SubRequest SubRequest(ResourceName name = null, string resourceType = null, string unit = null, QuotaRequestState? provisioningState = null, string message = null, string subRequestId = null, LimitJsonObject limit = null)
        {
            return new SubRequest(name, resourceType, unit, provisioningState, message, subRequestId, limit);
        }

        /// <summary> Initializes a new instance of OperationResponse. </summary>
        /// <param name="name"></param>
        /// <param name="display"></param>
        /// <param name="origin"></param>
        /// <returns> A new <see cref="Models.OperationResponse"/> instance for mocking. </returns>
        public static OperationResponse OperationResponse(string name = null, OperationDisplay display = null, string origin = null)
        {
            return new OperationResponse(name, display, origin);
        }

        /// <summary> Initializes a new instance of OperationDisplay. </summary>
        /// <param name="provider"> Provider name. </param>
        /// <param name="resource"> Resource name. </param>
        /// <param name="operation"> Operation name. </param>
        /// <param name="description"> Operation description. </param>
        /// <returns> A new <see cref="Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description);
        }
    }
}
