// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Quota.Models;

namespace Azure.ResourceManager.Quota
{
    internal partial class QuotaAllocationRequestStatusesGetAllAsyncCollectionResultOfT : AsyncPageable<QuotaAllocationRequestStatusData>
    {
        private readonly QuotaAllocationRequestStatuses _client;
        private readonly string _managementGroupId;
        private readonly Guid _subscriptionId;
        private readonly string _groupQuotaName;
        private readonly string _resourceProviderName;
        private readonly string _filter;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of QuotaAllocationRequestStatusesGetAllAsyncCollectionResultOfT, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The QuotaAllocationRequestStatuses client used to send requests. </param>
        /// <param name="managementGroupId"> The management group ID. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="groupQuotaName"> The GroupQuota name. The name should be unique for the provided context tenantId/MgId. </param>
        /// <param name="resourceProviderName"> The resource provider name, such as - Microsoft.Compute. Currently only Microsoft.Compute resource provider supports this API. </param>
        /// <param name="filter">
        /// | Field | Supported operators
        /// |---------------------|------------------------
        /// 
        /// location eq {location}
        /// Example: $filter=location eq eastus
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="managementGroupId"/>, <paramref name="groupQuotaName"/>, <paramref name="resourceProviderName"/> or <paramref name="filter"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="managementGroupId"/>, <paramref name="groupQuotaName"/>, <paramref name="resourceProviderName"/> or <paramref name="filter"/> is an empty string, and was expected to be non-empty. </exception>
        public QuotaAllocationRequestStatusesGetAllAsyncCollectionResultOfT(QuotaAllocationRequestStatuses client, string managementGroupId, Guid subscriptionId, string groupQuotaName, string resourceProviderName, string filter, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            Argument.AssertNotNullOrEmpty(managementGroupId, nameof(managementGroupId));
            Argument.AssertNotNullOrEmpty(groupQuotaName, nameof(groupQuotaName));
            Argument.AssertNotNullOrEmpty(resourceProviderName, nameof(resourceProviderName));
            Argument.AssertNotNullOrEmpty(filter, nameof(filter));

            _client = client;
            _managementGroupId = managementGroupId;
            _subscriptionId = subscriptionId;
            _groupQuotaName = groupQuotaName;
            _resourceProviderName = resourceProviderName;
            _filter = filter;
            _context = context;
        }

        /// <summary> Gets the pages of QuotaAllocationRequestStatusesGetAllAsyncCollectionResultOfT as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of QuotaAllocationRequestStatusesGetAllAsyncCollectionResultOfT as an enumerable collection. </returns>
        public override async IAsyncEnumerable<Page<QuotaAllocationRequestStatusData>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            while (true)
            {
                Response response = await GetNextResponseAsync(pageSizeHint, nextPage).ConfigureAwait(false);
                if (response is null)
                {
                    yield break;
                }
                QuotaAllocationRequestStatusList result = QuotaAllocationRequestStatusList.FromResponse(response);
                yield return Page<QuotaAllocationRequestStatusData>.FromValues((IReadOnlyList<QuotaAllocationRequestStatusData>)result.Value, nextPage?.AbsoluteUri, response);
                nextPage = result.NextLink;
                if (nextPage == null)
                {
                    yield break;
                }
            }
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private async ValueTask<Response> GetNextResponseAsync(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextGetAllRequest(nextLink, _managementGroupId, _subscriptionId, _groupQuotaName, _resourceProviderName, _filter, _context) : _client.CreateGetAllRequest(_managementGroupId, _subscriptionId, _groupQuotaName, _resourceProviderName, _filter, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("QuotaAllocationRequestStatusCollection.GetAll");
            scope.Start();
            try
            {
                return await _client.Pipeline.ProcessMessageAsync(message, _context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
