// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Dell.Storage.Models
{
    /// <summary> Identity type of ManagedIdentity Associated with Dell FileSystem resource. </summary>
    public readonly partial struct ResourceEncryptionType : IEquatable<ResourceEncryptionType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceEncryptionType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceEncryptionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MicrosoftManagedKeysMMKValue = "Microsoft-managed keys (MMK)";
        private const string CustomerManagedKeysCMKValue = "Customer-managed keys (CMK)";

        /// <summary> Microsoft managed keys (Default). </summary>
        public static ResourceEncryptionType MicrosoftManagedKeysMMK { get; } = new ResourceEncryptionType(MicrosoftManagedKeysMMKValue);
        /// <summary>
        /// Customer managed keys
        /// (CMK) - Only UserAssigned identity is supported
        /// </summary>
        public static ResourceEncryptionType CustomerManagedKeysCMK { get; } = new ResourceEncryptionType(CustomerManagedKeysCMKValue);
        /// <summary> Determines if two <see cref="ResourceEncryptionType"/> values are the same. </summary>
        public static bool operator ==(ResourceEncryptionType left, ResourceEncryptionType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceEncryptionType"/> values are not the same. </summary>
        public static bool operator !=(ResourceEncryptionType left, ResourceEncryptionType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ResourceEncryptionType"/>. </summary>
        public static implicit operator ResourceEncryptionType(string value) => new ResourceEncryptionType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceEncryptionType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceEncryptionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
