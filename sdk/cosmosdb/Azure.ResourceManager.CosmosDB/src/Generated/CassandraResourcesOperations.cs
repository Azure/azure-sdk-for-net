// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.CosmosDB.Models;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary> The CassandraResources service client. </summary>
    public partial class CassandraResourcesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal CassandraResourcesRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of CassandraResourcesOperations for mocking. </summary>
        protected CassandraResourcesOperations()
        {
        }
        /// <summary> Initializes a new instance of CassandraResourcesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal CassandraResourcesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new CassandraResourcesRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CassandraKeyspaceGetResults>> GetCassandraKeyspaceAsync(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.GetCassandraKeyspace");
            scope.Start();
            try
            {
                return await RestClient.GetCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CassandraKeyspaceGetResults> GetCassandraKeyspace(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.GetCassandraKeyspace");
            scope.Start();
            try
            {
                return RestClient.GetCassandraKeyspace(resourceGroupName, accountName, keyspaceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetCassandraKeyspaceThroughputAsync(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.GetCassandraKeyspaceThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetCassandraKeyspaceThroughputAsync(resourceGroupName, accountName, keyspaceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetCassandraKeyspaceThroughput(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.GetCassandraKeyspaceThroughput");
            scope.Start();
            try
            {
                return RestClient.GetCassandraKeyspaceThroughput(resourceGroupName, accountName, keyspaceName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Cassandra table under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CassandraTableGetResults>> GetCassandraTableAsync(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.GetCassandraTable");
            scope.Start();
            try
            {
                return await RestClient.GetCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Cassandra table under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CassandraTableGetResults> GetCassandraTable(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.GetCassandraTable");
            scope.Start();
            try
            {
                return RestClient.GetCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetCassandraTableThroughputAsync(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.GetCassandraTableThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetCassandraTableThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetCassandraTableThroughput(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.GetCassandraTableThroughput");
            scope.Start();
            try
            {
                return RestClient.GetCassandraTableThroughput(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual AsyncPageable<CassandraKeyspaceGetResults> ListCassandraKeyspacesAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            async Task<Page<CassandraKeyspaceGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.ListCassandraKeyspaces");
                scope.Start();
                try
                {
                    var response = await RestClient.ListCassandraKeyspacesAsync(resourceGroupName, accountName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual Pageable<CassandraKeyspaceGetResults> ListCassandraKeyspaces(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            Page<CassandraKeyspaceGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.ListCassandraKeyspaces");
                scope.Start();
                try
                {
                    var response = RestClient.ListCassandraKeyspaces(resourceGroupName, accountName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the Cassandra table under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="keyspaceName"/> is null. </exception>
        public virtual AsyncPageable<CassandraTableGetResults> ListCassandraTablesAsync(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            async Task<Page<CassandraTableGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.ListCassandraTables");
                scope.Start();
                try
                {
                    var response = await RestClient.ListCassandraTablesAsync(resourceGroupName, accountName, keyspaceName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the Cassandra table under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="keyspaceName"/> is null. </exception>
        public virtual Pageable<CassandraTableGetResults> ListCassandraTables(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            Page<CassandraTableGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.ListCassandraTables");
                scope.Start();
                try
                {
                    var response = RestClient.ListCassandraTables(resourceGroupName, accountName, keyspaceName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Create or update an Azure Cosmos DB Cassandra keyspace. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="createUpdateCassandraKeyspaceParameters"> The parameters to provide for the current Cassandra keyspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="createUpdateCassandraKeyspaceParameters"/> is null. </exception>
        public virtual async Task<CassandraResourcesCreateUpdateCassandraKeyspaceOperation> StartCreateUpdateCassandraKeyspaceAsync(string resourceGroupName, string accountName, string keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (createUpdateCassandraKeyspaceParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateCassandraKeyspaceParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartCreateUpdateCassandraKeyspace");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesCreateUpdateCassandraKeyspaceOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateCassandraKeyspaceRequest(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB Cassandra keyspace. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="createUpdateCassandraKeyspaceParameters"> The parameters to provide for the current Cassandra keyspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="createUpdateCassandraKeyspaceParameters"/> is null. </exception>
        public virtual CassandraResourcesCreateUpdateCassandraKeyspaceOperation StartCreateUpdateCassandraKeyspace(string resourceGroupName, string accountName, string keyspaceName, CassandraKeyspaceCreateUpdateParameters createUpdateCassandraKeyspaceParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (createUpdateCassandraKeyspaceParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateCassandraKeyspaceParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartCreateUpdateCassandraKeyspace");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateCassandraKeyspace(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, cancellationToken);
                return new CassandraResourcesCreateUpdateCassandraKeyspaceOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateCassandraKeyspaceRequest(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Cassandra keyspace. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="keyspaceName"/> is null. </exception>
        public virtual async Task<CassandraResourcesDeleteCassandraKeyspaceOperation> StartDeleteCassandraKeyspaceAsync(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartDeleteCassandraKeyspace");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteCassandraKeyspaceAsync(resourceGroupName, accountName, keyspaceName, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesDeleteCassandraKeyspaceOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteCassandraKeyspaceRequest(resourceGroupName, accountName, keyspaceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Cassandra keyspace. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="keyspaceName"/> is null. </exception>
        public virtual CassandraResourcesDeleteCassandraKeyspaceOperation StartDeleteCassandraKeyspace(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartDeleteCassandraKeyspace");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteCassandraKeyspace(resourceGroupName, accountName, keyspaceName, cancellationToken);
                return new CassandraResourcesDeleteCassandraKeyspaceOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteCassandraKeyspaceRequest(resourceGroupName, accountName, keyspaceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Cassandra Keyspace. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Cassandra Keyspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<CassandraResourcesUpdateCassandraKeyspaceThroughputOperation> StartUpdateCassandraKeyspaceThroughputAsync(string resourceGroupName, string accountName, string keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartUpdateCassandraKeyspaceThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateCassandraKeyspaceThroughputAsync(resourceGroupName, accountName, keyspaceName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesUpdateCassandraKeyspaceThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateCassandraKeyspaceThroughputRequest(resourceGroupName, accountName, keyspaceName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Cassandra Keyspace. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Cassandra Keyspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual CassandraResourcesUpdateCassandraKeyspaceThroughputOperation StartUpdateCassandraKeyspaceThroughput(string resourceGroupName, string accountName, string keyspaceName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartUpdateCassandraKeyspaceThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateCassandraKeyspaceThroughput(resourceGroupName, accountName, keyspaceName, updateThroughputParameters, cancellationToken);
                return new CassandraResourcesUpdateCassandraKeyspaceThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateCassandraKeyspaceThroughputRequest(resourceGroupName, accountName, keyspaceName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="keyspaceName"/> is null. </exception>
        public virtual async Task<CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOperation> StartMigrateCassandraKeyspaceToAutoscaleAsync(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartMigrateCassandraKeyspaceToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateCassandraKeyspaceToAutoscaleAsync(resourceGroupName, accountName, keyspaceName, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateCassandraKeyspaceToAutoscaleRequest(resourceGroupName, accountName, keyspaceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="keyspaceName"/> is null. </exception>
        public virtual CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOperation StartMigrateCassandraKeyspaceToAutoscale(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartMigrateCassandraKeyspaceToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateCassandraKeyspaceToAutoscale(resourceGroupName, accountName, keyspaceName, cancellationToken);
                return new CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateCassandraKeyspaceToAutoscaleRequest(resourceGroupName, accountName, keyspaceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="keyspaceName"/> is null. </exception>
        public virtual async Task<CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOperation> StartMigrateCassandraKeyspaceToManualThroughputAsync(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartMigrateCassandraKeyspaceToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateCassandraKeyspaceToManualThroughputAsync(resourceGroupName, accountName, keyspaceName, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateCassandraKeyspaceToManualThroughputRequest(resourceGroupName, accountName, keyspaceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="keyspaceName"/> is null. </exception>
        public virtual CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOperation StartMigrateCassandraKeyspaceToManualThroughput(string resourceGroupName, string accountName, string keyspaceName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartMigrateCassandraKeyspaceToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateCassandraKeyspaceToManualThroughput(resourceGroupName, accountName, keyspaceName, cancellationToken);
                return new CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateCassandraKeyspaceToManualThroughputRequest(resourceGroupName, accountName, keyspaceName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB Cassandra Table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="createUpdateCassandraTableParameters"> The parameters to provide for the current Cassandra Table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, <paramref name="tableName"/>, or <paramref name="createUpdateCassandraTableParameters"/> is null. </exception>
        public virtual async Task<CassandraResourcesCreateUpdateCassandraTableOperation> StartCreateUpdateCassandraTableAsync(string resourceGroupName, string accountName, string keyspaceName, string tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (createUpdateCassandraTableParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateCassandraTableParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartCreateUpdateCassandraTable");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesCreateUpdateCassandraTableOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateCassandraTableRequest(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB Cassandra Table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="createUpdateCassandraTableParameters"> The parameters to provide for the current Cassandra Table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, <paramref name="tableName"/>, or <paramref name="createUpdateCassandraTableParameters"/> is null. </exception>
        public virtual CassandraResourcesCreateUpdateCassandraTableOperation StartCreateUpdateCassandraTable(string resourceGroupName, string accountName, string keyspaceName, string tableName, CassandraTableCreateUpdateParameters createUpdateCassandraTableParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (createUpdateCassandraTableParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateCassandraTableParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartCreateUpdateCassandraTable");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, cancellationToken);
                return new CassandraResourcesCreateUpdateCassandraTableOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateCassandraTableRequest(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Cassandra table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual async Task<CassandraResourcesDeleteCassandraTableOperation> StartDeleteCassandraTableAsync(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartDeleteCassandraTable");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteCassandraTableAsync(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesDeleteCassandraTableOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteCassandraTableRequest(resourceGroupName, accountName, keyspaceName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Cassandra table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual CassandraResourcesDeleteCassandraTableOperation StartDeleteCassandraTable(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartDeleteCassandraTable");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken);
                return new CassandraResourcesDeleteCassandraTableOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteCassandraTableRequest(resourceGroupName, accountName, keyspaceName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Cassandra table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Cassandra table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, <paramref name="tableName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<CassandraResourcesUpdateCassandraTableThroughputOperation> StartUpdateCassandraTableThroughputAsync(string resourceGroupName, string accountName, string keyspaceName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartUpdateCassandraTableThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateCassandraTableThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesUpdateCassandraTableThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateCassandraTableThroughputRequest(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Cassandra table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Cassandra table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, <paramref name="tableName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual CassandraResourcesUpdateCassandraTableThroughputOperation StartUpdateCassandraTableThroughput(string resourceGroupName, string accountName, string keyspaceName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartUpdateCassandraTableThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateCassandraTableThroughput(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, cancellationToken);
                return new CassandraResourcesUpdateCassandraTableThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateCassandraTableThroughputRequest(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual async Task<CassandraResourcesMigrateCassandraTableToAutoscaleOperation> StartMigrateCassandraTableToAutoscaleAsync(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartMigrateCassandraTableToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateCassandraTableToAutoscaleAsync(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesMigrateCassandraTableToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateCassandraTableToAutoscaleRequest(resourceGroupName, accountName, keyspaceName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual CassandraResourcesMigrateCassandraTableToAutoscaleOperation StartMigrateCassandraTableToAutoscale(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartMigrateCassandraTableToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateCassandraTableToAutoscale(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken);
                return new CassandraResourcesMigrateCassandraTableToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateCassandraTableToAutoscaleRequest(resourceGroupName, accountName, keyspaceName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual async Task<CassandraResourcesMigrateCassandraTableToManualThroughputOperation> StartMigrateCassandraTableToManualThroughputAsync(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartMigrateCassandraTableToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateCassandraTableToManualThroughputAsync(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken).ConfigureAwait(false);
                return new CassandraResourcesMigrateCassandraTableToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateCassandraTableToManualThroughputRequest(resourceGroupName, accountName, keyspaceName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="keyspaceName"> Cosmos DB keyspace name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="keyspaceName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual CassandraResourcesMigrateCassandraTableToManualThroughputOperation StartMigrateCassandraTableToManualThroughput(string resourceGroupName, string accountName, string keyspaceName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("CassandraResourcesOperations.StartMigrateCassandraTableToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateCassandraTableToManualThroughput(resourceGroupName, accountName, keyspaceName, tableName, cancellationToken);
                return new CassandraResourcesMigrateCassandraTableToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateCassandraTableToManualThroughputRequest(resourceGroupName, accountName, keyspaceName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
