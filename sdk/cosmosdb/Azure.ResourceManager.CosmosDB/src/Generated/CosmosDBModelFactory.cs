// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.CosmosDB;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class CosmosDBModelFactory
    {
        /// <summary> Initializes a new instance of CosmosDBAccountData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> Indicates the type of database account. This can only be set at database account creation. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="provisioningState"> The status of the Cosmos DB account at the time the operation was called. The status can be one of following. &apos;Creating&apos; – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. &apos;Succeeded&apos; – the Cosmos DB account is active for use. &apos;Updating&apos; – the Cosmos DB account is being updated. &apos;Deleting&apos; – the Cosmos DB account is being deleted. &apos;Failed&apos; – the Cosmos DB account failed creation. &apos;DeletionFailed&apos; – the Cosmos DB account deletion failed. </param>
        /// <param name="documentEndpoint"> The connection endpoint for the Cosmos DB database account. </param>
        /// <param name="databaseAccountOfferType"> The offer type for the Cosmos DB database account. Default value: Standard. </param>
        /// <param name="ipRules"> List of IpRules. </param>
        /// <param name="isVirtualNetworkFilterEnabled"> Flag to indicate whether to enable/disable Virtual Network ACL rules. </param>
        /// <param name="enableAutomaticFailover"> Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account. </param>
        /// <param name="consistencyPolicy"> The consistency policy for the Cosmos DB database account. </param>
        /// <param name="capabilities"> List of Cosmos DB capabilities for the account. </param>
        /// <param name="writeLocations"> An array that contains the write location for the Cosmos DB account. </param>
        /// <param name="readLocations"> An array that contains of the read locations enabled for the Cosmos DB account. </param>
        /// <param name="locations"> An array that contains all of the locations enabled for the Cosmos DB account. </param>
        /// <param name="failoverPolicies"> An array that contains the regions ordered by their failover priorities. </param>
        /// <param name="virtualNetworkRules"> List of Virtual Network ACL rules configured for the Cosmos DB account. </param>
        /// <param name="privateEndpointConnections"> List of Private Endpoint Connections configured for the Cosmos DB account. </param>
        /// <param name="enableMultipleWriteLocations"> Enables the account to write in multiple locations. </param>
        /// <param name="enableCassandraConnector"> Enables the cassandra connector on the Cosmos DB C* account. </param>
        /// <param name="connectorOffer"> The cassandra connector offer type for the Cosmos DB database C* account. </param>
        /// <param name="disableKeyBasedMetadataWriteAccess"> Disable write operations on metadata resources (databases, containers, throughput) via account keys. </param>
        /// <param name="keyVaultKeyUri"> The URI of the key vault. </param>
        /// <param name="defaultIdentity"> The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be &quot;FirstPartyIdentity&quot;, &quot;SystemAssignedIdentity&quot; and more. </param>
        /// <param name="publicNetworkAccess"> Whether requests from Public Network are allowed. </param>
        /// <param name="isFreeTierEnabled"> Flag to indicate whether Free Tier is enabled. </param>
        /// <param name="apiServerVersion"> API specific properties. </param>
        /// <param name="isAnalyticalStorageEnabled"> Flag to indicate whether to enable storage analytics. </param>
        /// <param name="analyticalStorageSchemaType"> Analytical storage specific properties. </param>
        /// <param name="instanceId"> A unique identifier assigned to the database account. </param>
        /// <param name="createMode"> Enum to indicate the mode of account creation. </param>
        /// <param name="restoreParameters"> Parameters to indicate the information about the restore. </param>
        /// <param name="backupPolicy">
        /// The object representing the policy for taking backups on an account.
        /// Please note <see cref="CosmosDBAccountBackupPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ContinuousModeBackupPolicy"/> and <see cref="PeriodicModeBackupPolicy"/>.
        /// </param>
        /// <param name="cors"> The CORS policy for the Cosmos DB database account. </param>
        /// <param name="networkAclBypass"> Indicates what services are allowed to bypass firewall checks. </param>
        /// <param name="networkAclBypassResourceIds"> An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. </param>
        /// <param name="capacityTotalThroughputLimit"> The object that represents all properties related to capacity enforcement on an account. </param>
        /// <param name="keysMetadata"> The object that represents the metadata for the Account Keys of the Cosmos DB account. </param>
        /// <param name="enablePartitionMerge"> Flag to indicate enabling/disabling of Partition Merge feature on the account. </param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBAccountData"/> instance for mocking. </returns>
        public static CosmosDBAccountData CosmosDBAccountData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CosmosDBAccountKind? kind = null, ManagedServiceIdentity identity = null, string provisioningState = null, string documentEndpoint = null, CosmosDBAccountOfferType? databaseAccountOfferType = null, IEnumerable<CosmosDBIPAddressOrRange> ipRules = null, bool? isVirtualNetworkFilterEnabled = null, bool? enableAutomaticFailover = null, ConsistencyPolicy consistencyPolicy = null, IEnumerable<CosmosDBAccountCapability> capabilities = null, IEnumerable<CosmosDBAccountLocation> writeLocations = null, IEnumerable<CosmosDBAccountLocation> readLocations = null, IEnumerable<CosmosDBAccountLocation> locations = null, IEnumerable<CosmosDBFailoverPolicy> failoverPolicies = null, IEnumerable<CosmosDBVirtualNetworkRule> virtualNetworkRules = null, IEnumerable<CosmosDBPrivateEndpointConnectionData> privateEndpointConnections = null, bool? enableMultipleWriteLocations = null, bool? enableCassandraConnector = null, ConnectorOffer? connectorOffer = null, bool? disableKeyBasedMetadataWriteAccess = null, Uri keyVaultKeyUri = null, string defaultIdentity = null, CosmosDBPublicNetworkAccess? publicNetworkAccess = null, bool? isFreeTierEnabled = null, CosmosDBServerVersion? apiServerVersion = null, bool? isAnalyticalStorageEnabled = null, AnalyticalStorageSchemaType? analyticalStorageSchemaType = null, Guid? instanceId = null, CosmosDBAccountCreateMode? createMode = null, CosmosDBAccountRestoreParameters restoreParameters = null, CosmosDBAccountBackupPolicy backupPolicy = null, IEnumerable<CosmosDBAccountCorsPolicy> cors = null, NetworkAclBypass? networkAclBypass = null, IEnumerable<ResourceIdentifier> networkAclBypassResourceIds = null, bool? disableLocalAuth = null, int? capacityTotalThroughputLimit = null, DatabaseAccountKeysMetadata keysMetadata = null, bool? enablePartitionMerge = null)
        {
            tags ??= new Dictionary<string, string>();
            ipRules ??= new List<CosmosDBIPAddressOrRange>();
            capabilities ??= new List<CosmosDBAccountCapability>();
            writeLocations ??= new List<CosmosDBAccountLocation>();
            readLocations ??= new List<CosmosDBAccountLocation>();
            locations ??= new List<CosmosDBAccountLocation>();
            failoverPolicies ??= new List<CosmosDBFailoverPolicy>();
            virtualNetworkRules ??= new List<CosmosDBVirtualNetworkRule>();
            privateEndpointConnections ??= new List<CosmosDBPrivateEndpointConnectionData>();
            cors ??= new List<CosmosDBAccountCorsPolicy>();
            networkAclBypassResourceIds ??= new List<ResourceIdentifier>();

            return new CosmosDBAccountData(id, name, resourceType, systemData, tags, location, kind, identity, provisioningState, documentEndpoint, databaseAccountOfferType, ipRules?.ToList(), isVirtualNetworkFilterEnabled, enableAutomaticFailover, consistencyPolicy, capabilities?.ToList(), writeLocations?.ToList(), readLocations?.ToList(), locations?.ToList(), failoverPolicies?.ToList(), virtualNetworkRules?.ToList(), privateEndpointConnections?.ToList(), enableMultipleWriteLocations, enableCassandraConnector, connectorOffer, disableKeyBasedMetadataWriteAccess, keyVaultKeyUri, defaultIdentity, publicNetworkAccess, isFreeTierEnabled, new ApiProperties(apiServerVersion), isAnalyticalStorageEnabled, new AnalyticalStorageConfiguration(analyticalStorageSchemaType), instanceId, createMode, restoreParameters, backupPolicy, cors?.ToList(), networkAclBypass, networkAclBypassResourceIds?.ToList(), disableLocalAuth, new CosmosDBAccountCapacity(capacityTotalThroughputLimit), keysMetadata, enablePartitionMerge);
        }

        /// <summary> Initializes a new instance of CosmosDBIPAddressOrRange. </summary>
        /// <param name="ipAddressOrRange"> A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs must be well-formatted and cannot be contained in one of the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: “23.40.210.245” or “23.40.210.0/8”. </param>
        /// <returns> A new <see cref="Models.CosmosDBIPAddressOrRange"/> instance for mocking. </returns>
        public static CosmosDBIPAddressOrRange CosmosDBIPAddressOrRange(string ipAddressOrRange = null)
        {
            return new CosmosDBIPAddressOrRange(ipAddressOrRange);
        }

        /// <summary> Initializes a new instance of ConsistencyPolicy. </summary>
        /// <param name="defaultConsistencyLevel"> The default consistency level and configuration settings of the Cosmos DB account. </param>
        /// <param name="maxStalenessPrefix"> When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to &apos;BoundedStaleness&apos;. </param>
        /// <param name="maxIntervalInSeconds"> When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to &apos;BoundedStaleness&apos;. </param>
        /// <returns> A new <see cref="Models.ConsistencyPolicy"/> instance for mocking. </returns>
        public static ConsistencyPolicy ConsistencyPolicy(DefaultConsistencyLevel defaultConsistencyLevel = default, long? maxStalenessPrefix = null, int? maxIntervalInSeconds = null)
        {
            return new ConsistencyPolicy(defaultConsistencyLevel, maxStalenessPrefix, maxIntervalInSeconds);
        }

        /// <summary> Initializes a new instance of CosmosDBAccountCapability. </summary>
        /// <param name="name"> Name of the Cosmos DB capability. For example, &quot;name&quot;: &quot;EnableCassandra&quot;. Current values also include &quot;EnableTable&quot; and &quot;EnableGremlin&quot;. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountCapability"/> instance for mocking. </returns>
        public static CosmosDBAccountCapability CosmosDBAccountCapability(string name = null)
        {
            return new CosmosDBAccountCapability(name);
        }

        /// <summary> Initializes a new instance of CosmosDBAccountLocation. </summary>
        /// <param name="id"> The unique identifier of the region within the database account. Example: &amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;. </param>
        /// <param name="locationName"> The name of the region. </param>
        /// <param name="documentEndpoint"> The connection endpoint for the specific region. Example: https://&amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.documents.azure.com:443/. </param>
        /// <param name="provisioningState"> The status of the Cosmos DB account at the time the operation was called. The status can be one of following. &apos;Creating&apos; – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. &apos;Succeeded&apos; – the Cosmos DB account is active for use. &apos;Updating&apos; – the Cosmos DB account is being updated. &apos;Deleting&apos; – the Cosmos DB account is being deleted. &apos;Failed&apos; – the Cosmos DB account failed creation. &apos;DeletionFailed&apos; – the Cosmos DB account deletion failed. </param>
        /// <param name="failoverPriority"> The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. </param>
        /// <param name="isZoneRedundant"> Flag to indicate whether or not this region is an AvailabilityZone region. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountLocation"/> instance for mocking. </returns>
        public static CosmosDBAccountLocation CosmosDBAccountLocation(string id = null, AzureLocation? locationName = null, string documentEndpoint = null, string provisioningState = null, int? failoverPriority = null, bool? isZoneRedundant = null)
        {
            return new CosmosDBAccountLocation(id, locationName, documentEndpoint, provisioningState, failoverPriority, isZoneRedundant);
        }

        /// <summary> Initializes a new instance of CosmosDBFailoverPolicy. </summary>
        /// <param name="id"> The unique identifier of the region in which the database account replicates to. Example: &amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;. </param>
        /// <param name="locationName"> The name of the region in which the database account exists. </param>
        /// <param name="failoverPriority"> The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. </param>
        /// <returns> A new <see cref="Models.CosmosDBFailoverPolicy"/> instance for mocking. </returns>
        public static CosmosDBFailoverPolicy CosmosDBFailoverPolicy(string id = null, AzureLocation? locationName = null, int? failoverPriority = null)
        {
            return new CosmosDBFailoverPolicy(id, locationName, failoverPriority);
        }

        /// <summary> Initializes a new instance of CosmosDBVirtualNetworkRule. </summary>
        /// <param name="id"> Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. </param>
        /// <param name="ignoreMissingVnetServiceEndpoint"> Create firewall rule before the virtual network has vnet service endpoint enabled. </param>
        /// <returns> A new <see cref="Models.CosmosDBVirtualNetworkRule"/> instance for mocking. </returns>
        public static CosmosDBVirtualNetworkRule CosmosDBVirtualNetworkRule(ResourceIdentifier id = null, bool? ignoreMissingVnetServiceEndpoint = null)
        {
            return new CosmosDBVirtualNetworkRule(id, ignoreMissingVnetServiceEndpoint);
        }

        /// <summary> Initializes a new instance of CosmosDBPrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="privateEndpointId"> Private endpoint which the connection belongs to. </param>
        /// <param name="connectionState"> Connection State of the Private Endpoint Connection. </param>
        /// <param name="groupId"> Group id of the private endpoint. </param>
        /// <param name="provisioningState"> Provisioning state of the private endpoint. </param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static CosmosDBPrivateEndpointConnectionData CosmosDBPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier privateEndpointId = null, CosmosDBPrivateLinkServiceConnectionStateProperty connectionState = null, string groupId = null, string provisioningState = null)
        {
            return new CosmosDBPrivateEndpointConnectionData(id, name, resourceType, systemData, new PrivateEndpointProperty(privateEndpointId), connectionState, groupId, provisioningState);
        }

        /// <summary> Initializes a new instance of CosmosDBPrivateLinkServiceConnectionStateProperty. </summary>
        /// <param name="status"> The private link service connection status. </param>
        /// <param name="description"> The private link service connection description. </param>
        /// <param name="actionsRequired"> Any action that is required beyond basic workflow (approve/ reject/ disconnect). </param>
        /// <returns> A new <see cref="Models.CosmosDBPrivateLinkServiceConnectionStateProperty"/> instance for mocking. </returns>
        public static CosmosDBPrivateLinkServiceConnectionStateProperty CosmosDBPrivateLinkServiceConnectionStateProperty(string status = null, string description = null, string actionsRequired = null)
        {
            return new CosmosDBPrivateLinkServiceConnectionStateProperty(status, description, actionsRequired);
        }

        /// <summary> Initializes a new instance of CosmosDBAccountRestoreParameters. </summary>
        /// <param name="restoreMode"> Describes the mode of the restore. </param>
        /// <param name="restoreSource"> The id of the restorable database account from which the restore has to be initiated. For example: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}. </param>
        /// <param name="restoreTimestampInUtc"> Time to which the account has to be restored (ISO-8601 format). </param>
        /// <param name="databasesToRestore"> List of specific databases available for restore. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountRestoreParameters"/> instance for mocking. </returns>
        public static CosmosDBAccountRestoreParameters CosmosDBAccountRestoreParameters(CosmosDBAccountRestoreMode? restoreMode = null, string restoreSource = null, DateTimeOffset? restoreTimestampInUtc = null, IEnumerable<DatabaseRestoreResourceInfo> databasesToRestore = null)
        {
            databasesToRestore ??= new List<DatabaseRestoreResourceInfo>();

            return new CosmosDBAccountRestoreParameters(restoreMode, restoreSource, restoreTimestampInUtc, databasesToRestore?.ToList());
        }

        /// <summary> Initializes a new instance of DatabaseRestoreResourceInfo. </summary>
        /// <param name="databaseName"> The name of the database available for restore. </param>
        /// <param name="collectionNames"> The names of the collections available for restore. </param>
        /// <returns> A new <see cref="Models.DatabaseRestoreResourceInfo"/> instance for mocking. </returns>
        public static DatabaseRestoreResourceInfo DatabaseRestoreResourceInfo(string databaseName = null, IEnumerable<string> collectionNames = null)
        {
            collectionNames ??= new List<string>();

            return new DatabaseRestoreResourceInfo(databaseName, collectionNames?.ToList());
        }

        /// <summary> Initializes a new instance of CosmosDBAccountBackupPolicy. </summary>
        /// <param name="backupPolicyType"> Describes the mode of backups. </param>
        /// <param name="migrationState"> The object representing the state of the migration between the backup policies. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountBackupPolicy"/> instance for mocking. </returns>
        public static CosmosDBAccountBackupPolicy CosmosDBAccountBackupPolicy(string backupPolicyType = null, BackupPolicyMigrationState migrationState = null)
        {
            return new UnknownBackupPolicy(backupPolicyType, migrationState);
        }

        /// <summary> Initializes a new instance of BackupPolicyMigrationState. </summary>
        /// <param name="status"> Describes the status of migration between backup policy types. </param>
        /// <param name="targetType"> Describes the target backup policy type of the backup policy migration. </param>
        /// <param name="startOn"> Time at which the backup policy migration started (ISO-8601 format). </param>
        /// <returns> A new <see cref="Models.BackupPolicyMigrationState"/> instance for mocking. </returns>
        public static BackupPolicyMigrationState BackupPolicyMigrationState(BackupPolicyMigrationStatus? status = null, BackupPolicyType? targetType = null, DateTimeOffset? startOn = null)
        {
            return new BackupPolicyMigrationState(status, targetType, startOn);
        }

        /// <summary> Initializes a new instance of CosmosDBAccountCorsPolicy. </summary>
        /// <param name="allowedOrigins"> The origin domains that are permitted to make a request against the service via CORS. </param>
        /// <param name="allowedMethods"> The methods (HTTP request verbs) that the origin domain may use for a CORS request. </param>
        /// <param name="allowedHeaders"> The request headers that the origin domain may specify on the CORS request. </param>
        /// <param name="exposedHeaders"> The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer. </param>
        /// <param name="maxAgeInSeconds"> The maximum amount time that a browser should cache the preflight OPTIONS request. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountCorsPolicy"/> instance for mocking. </returns>
        public static CosmosDBAccountCorsPolicy CosmosDBAccountCorsPolicy(string allowedOrigins = null, string allowedMethods = null, string allowedHeaders = null, string exposedHeaders = null, long? maxAgeInSeconds = null)
        {
            return new CosmosDBAccountCorsPolicy(allowedOrigins, allowedMethods, allowedHeaders, exposedHeaders, maxAgeInSeconds);
        }

        /// <summary> Initializes a new instance of DatabaseAccountKeysMetadata. </summary>
        /// <param name="primaryMasterKeyGeneratedOn"> The metadata related to the Primary Read-Write Key for the given Cosmos DB database account. </param>
        /// <param name="secondaryMasterKeyGeneratedOn"> The metadata related to the Secondary Read-Write Key for the given Cosmos DB database account. </param>
        /// <param name="primaryReadonlyMasterKeyGeneratedOn"> The metadata related to the Primary Read-Only Key for the given Cosmos DB database account. </param>
        /// <param name="secondaryReadonlyMasterKeyGeneratedOn"> The metadata related to the Secondary Read-Only Key for the given Cosmos DB database account. </param>
        /// <returns> A new <see cref="Models.DatabaseAccountKeysMetadata"/> instance for mocking. </returns>
        public static DatabaseAccountKeysMetadata DatabaseAccountKeysMetadata(DateTimeOffset? primaryMasterKeyGeneratedOn = null, DateTimeOffset? secondaryMasterKeyGeneratedOn = null, DateTimeOffset? primaryReadonlyMasterKeyGeneratedOn = null, DateTimeOffset? secondaryReadonlyMasterKeyGeneratedOn = null)
        {
            return new DatabaseAccountKeysMetadata(new AccountKeyMetadata(primaryMasterKeyGeneratedOn), new AccountKeyMetadata(secondaryMasterKeyGeneratedOn), new AccountKeyMetadata(primaryReadonlyMasterKeyGeneratedOn), new AccountKeyMetadata(secondaryReadonlyMasterKeyGeneratedOn));
        }

        /// <summary> Initializes a new instance of CosmosDBAccountCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="kind"> Indicates the type of database account. This can only be set at database account creation. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="consistencyPolicy"> The consistency policy for the Cosmos DB account. </param>
        /// <param name="locations"> An array that contains the georeplication locations enabled for the Cosmos DB account. </param>
        /// <param name="databaseAccountOfferType"> The offer type for the database. </param>
        /// <param name="ipRules"> List of IpRules. </param>
        /// <param name="isVirtualNetworkFilterEnabled"> Flag to indicate whether to enable/disable Virtual Network ACL rules. </param>
        /// <param name="enableAutomaticFailover"> Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account. </param>
        /// <param name="capabilities"> List of Cosmos DB capabilities for the account. </param>
        /// <param name="virtualNetworkRules"> List of Virtual Network ACL rules configured for the Cosmos DB account. </param>
        /// <param name="enableMultipleWriteLocations"> Enables the account to write in multiple locations. </param>
        /// <param name="enableCassandraConnector"> Enables the cassandra connector on the Cosmos DB C* account. </param>
        /// <param name="connectorOffer"> The cassandra connector offer type for the Cosmos DB database C* account. </param>
        /// <param name="disableKeyBasedMetadataWriteAccess"> Disable write operations on metadata resources (databases, containers, throughput) via account keys. </param>
        /// <param name="keyVaultKeyUri"> The URI of the key vault. </param>
        /// <param name="defaultIdentity"> The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be &quot;FirstPartyIdentity&quot;, &quot;SystemAssignedIdentity&quot; and more. </param>
        /// <param name="publicNetworkAccess"> Whether requests from Public Network are allowed. </param>
        /// <param name="isFreeTierEnabled"> Flag to indicate whether Free Tier is enabled. </param>
        /// <param name="apiServerVersion"> API specific properties. Currently, supported only for MongoDB API. </param>
        /// <param name="isAnalyticalStorageEnabled"> Flag to indicate whether to enable storage analytics. </param>
        /// <param name="analyticalStorageSchemaType"> Analytical storage specific properties. </param>
        /// <param name="createMode"> Enum to indicate the mode of account creation. </param>
        /// <param name="backupPolicy">
        /// The object representing the policy for taking backups on an account.
        /// Please note <see cref="CosmosDBAccountBackupPolicy"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ContinuousModeBackupPolicy"/> and <see cref="PeriodicModeBackupPolicy"/>.
        /// </param>
        /// <param name="cors"> The CORS policy for the Cosmos DB database account. </param>
        /// <param name="networkAclBypass"> Indicates what services are allowed to bypass firewall checks. </param>
        /// <param name="networkAclBypassResourceIds"> An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account. </param>
        /// <param name="disableLocalAuth"> Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. </param>
        /// <param name="restoreParameters"> Parameters to indicate the information about the restore. </param>
        /// <param name="capacityTotalThroughputLimit"> The object that represents all properties related to capacity enforcement on an account. </param>
        /// <param name="keysMetadata"> This property is ignored during the update/create operation, as the metadata is read-only. The object represents the metadata for the Account Keys of the Cosmos DB account. </param>
        /// <param name="enablePartitionMerge"> Flag to indicate enabling/disabling of Partition Merge feature on the account. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CosmosDBAccountCreateOrUpdateContent CosmosDBAccountCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CosmosDBAccountKind? kind = null, ManagedServiceIdentity identity = null, ConsistencyPolicy consistencyPolicy = null, IEnumerable<CosmosDBAccountLocation> locations = null, CosmosDBAccountOfferType databaseAccountOfferType = default, IEnumerable<CosmosDBIPAddressOrRange> ipRules = null, bool? isVirtualNetworkFilterEnabled = null, bool? enableAutomaticFailover = null, IEnumerable<CosmosDBAccountCapability> capabilities = null, IEnumerable<CosmosDBVirtualNetworkRule> virtualNetworkRules = null, bool? enableMultipleWriteLocations = null, bool? enableCassandraConnector = null, ConnectorOffer? connectorOffer = null, bool? disableKeyBasedMetadataWriteAccess = null, Uri keyVaultKeyUri = null, string defaultIdentity = null, CosmosDBPublicNetworkAccess? publicNetworkAccess = null, bool? isFreeTierEnabled = null, CosmosDBServerVersion? apiServerVersion = null, bool? isAnalyticalStorageEnabled = null, AnalyticalStorageSchemaType? analyticalStorageSchemaType = null, CosmosDBAccountCreateMode? createMode = null, CosmosDBAccountBackupPolicy backupPolicy = null, IEnumerable<CosmosDBAccountCorsPolicy> cors = null, NetworkAclBypass? networkAclBypass = null, IEnumerable<ResourceIdentifier> networkAclBypassResourceIds = null, bool? disableLocalAuth = null, CosmosDBAccountRestoreParameters restoreParameters = null, int? capacityTotalThroughputLimit = null, DatabaseAccountKeysMetadata keysMetadata = null, bool? enablePartitionMerge = null)
        {
            tags ??= new Dictionary<string, string>();
            locations ??= new List<CosmosDBAccountLocation>();
            ipRules ??= new List<CosmosDBIPAddressOrRange>();
            capabilities ??= new List<CosmosDBAccountCapability>();
            virtualNetworkRules ??= new List<CosmosDBVirtualNetworkRule>();
            cors ??= new List<CosmosDBAccountCorsPolicy>();
            networkAclBypassResourceIds ??= new List<ResourceIdentifier>();

            return new CosmosDBAccountCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, kind, identity, consistencyPolicy, locations?.ToList(), databaseAccountOfferType, ipRules?.ToList(), isVirtualNetworkFilterEnabled, enableAutomaticFailover, capabilities?.ToList(), virtualNetworkRules?.ToList(), enableMultipleWriteLocations, enableCassandraConnector, connectorOffer, disableKeyBasedMetadataWriteAccess, keyVaultKeyUri, defaultIdentity, publicNetworkAccess, isFreeTierEnabled, new ApiProperties(apiServerVersion), isAnalyticalStorageEnabled, new AnalyticalStorageConfiguration(analyticalStorageSchemaType), createMode, backupPolicy, cors?.ToList(), networkAclBypass, networkAclBypassResourceIds?.ToList(), disableLocalAuth, restoreParameters, new CosmosDBAccountCapacity(capacityTotalThroughputLimit), keysMetadata, enablePartitionMerge);
        }

        /// <summary> Initializes a new instance of CosmosDBAccountKeyList. </summary>
        /// <param name="primaryReadonlyMasterKey"> Base 64 encoded value of the primary read-only key. </param>
        /// <param name="secondaryReadonlyMasterKey"> Base 64 encoded value of the secondary read-only key. </param>
        /// <param name="primaryMasterKey"> Base 64 encoded value of the primary read-write key. </param>
        /// <param name="secondaryMasterKey"> Base 64 encoded value of the secondary read-write key. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountKeyList"/> instance for mocking. </returns>
        public static CosmosDBAccountKeyList CosmosDBAccountKeyList(string primaryReadonlyMasterKey = null, string secondaryReadonlyMasterKey = null, string primaryMasterKey = null, string secondaryMasterKey = null)
        {
            return new CosmosDBAccountKeyList(primaryReadonlyMasterKey, secondaryReadonlyMasterKey, primaryMasterKey, secondaryMasterKey);
        }

        /// <summary> Initializes a new instance of CosmosDBAccountReadOnlyKeyList. </summary>
        /// <param name="primaryReadonlyMasterKey"> Base 64 encoded value of the primary read-only key. </param>
        /// <param name="secondaryReadonlyMasterKey"> Base 64 encoded value of the secondary read-only key. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountReadOnlyKeyList"/> instance for mocking. </returns>
        public static CosmosDBAccountReadOnlyKeyList CosmosDBAccountReadOnlyKeyList(string primaryReadonlyMasterKey = null, string secondaryReadonlyMasterKey = null)
        {
            return new CosmosDBAccountReadOnlyKeyList(primaryReadonlyMasterKey, secondaryReadonlyMasterKey);
        }

        /// <summary> Initializes a new instance of CosmosDBAccountConnectionString. </summary>
        /// <param name="connectionString"> Value of the connection string. </param>
        /// <param name="description"> Description of the connection string. </param>
        /// <returns> A new <see cref="Models.CosmosDBAccountConnectionString"/> instance for mocking. </returns>
        public static CosmosDBAccountConnectionString CosmosDBAccountConnectionString(string connectionString = null, string description = null)
        {
            return new CosmosDBAccountConnectionString(connectionString, description);
        }

        /// <summary> Initializes a new instance of CosmosDBBaseMetric. </summary>
        /// <param name="startOn"> The start time for the metric (ISO-8601 format). </param>
        /// <param name="endOn"> The end time for the metric (ISO-8601 format). </param>
        /// <param name="timeGrain"> The time grain to be used to summarize the metric values. </param>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="name"> The name information for the metric. </param>
        /// <param name="metricValues"> The metric values for the specified time window and timestep. </param>
        /// <returns> A new <see cref="Models.CosmosDBBaseMetric"/> instance for mocking. </returns>
        public static CosmosDBBaseMetric CosmosDBBaseMetric(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string timeGrain = null, CosmosDBMetricUnitType? unit = null, CosmosDBMetricName name = null, IEnumerable<CosmosDBMetricValue> metricValues = null)
        {
            metricValues ??= new List<CosmosDBMetricValue>();

            return new CosmosDBBaseMetric(startOn, endOn, timeGrain, unit, name, metricValues?.ToList());
        }

        /// <summary> Initializes a new instance of CosmosDBMetricName. </summary>
        /// <param name="value"> The name of the metric. </param>
        /// <param name="localizedValue"> The friendly name of the metric. </param>
        /// <returns> A new <see cref="Models.CosmosDBMetricName"/> instance for mocking. </returns>
        public static CosmosDBMetricName CosmosDBMetricName(string value = null, string localizedValue = null)
        {
            return new CosmosDBMetricName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of CosmosDBMetricValue. </summary>
        /// <param name="count"> The number of values for the metric. </param>
        /// <param name="average"> The average value of the metric. </param>
        /// <param name="maximum"> The max value of the metric. </param>
        /// <param name="minimum"> The min value of the metric. </param>
        /// <param name="timestamp"> The metric timestamp (ISO-8601 format). </param>
        /// <param name="total"> The total value of the metric. </param>
        /// <returns> A new <see cref="Models.CosmosDBMetricValue"/> instance for mocking. </returns>
        public static CosmosDBMetricValue CosmosDBMetricValue(int? count = null, double? average = null, double? maximum = null, double? minimum = null, DateTimeOffset? timestamp = null, double? total = null)
        {
            return new CosmosDBMetricValue(count, average, maximum, minimum, timestamp, total);
        }

        /// <summary> Initializes a new instance of CosmosDBPercentileMetric. </summary>
        /// <param name="startOn"> The start time for the metric (ISO-8601 format). </param>
        /// <param name="endOn"> The end time for the metric (ISO-8601 format). </param>
        /// <param name="timeGrain"> The time grain to be used to summarize the metric values. </param>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="name"> The name information for the metric. </param>
        /// <param name="metricValues"> The percentile metric values for the specified time window and timestep. </param>
        /// <returns> A new <see cref="Models.CosmosDBPercentileMetric"/> instance for mocking. </returns>
        public static CosmosDBPercentileMetric CosmosDBPercentileMetric(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string timeGrain = null, CosmosDBMetricUnitType? unit = null, CosmosDBMetricName name = null, IEnumerable<PercentileMetricValue> metricValues = null)
        {
            metricValues ??= new List<PercentileMetricValue>();

            return new CosmosDBPercentileMetric(startOn, endOn, timeGrain, unit, name, metricValues?.ToList());
        }

        /// <summary> Initializes a new instance of PercentileMetricValue. </summary>
        /// <param name="count"> The number of values for the metric. </param>
        /// <param name="average"> The average value of the metric. </param>
        /// <param name="maximum"> The max value of the metric. </param>
        /// <param name="minimum"> The min value of the metric. </param>
        /// <param name="timestamp"> The metric timestamp (ISO-8601 format). </param>
        /// <param name="total"> The total value of the metric. </param>
        /// <param name="p10"> The 10th percentile value for the metric. </param>
        /// <param name="p25"> The 25th percentile value for the metric. </param>
        /// <param name="p50"> The 50th percentile value for the metric. </param>
        /// <param name="p75"> The 75th percentile value for the metric. </param>
        /// <param name="p90"> The 90th percentile value for the metric. </param>
        /// <param name="p95"> The 95th percentile value for the metric. </param>
        /// <param name="p99"> The 99th percentile value for the metric. </param>
        /// <returns> A new <see cref="Models.PercentileMetricValue"/> instance for mocking. </returns>
        public static PercentileMetricValue PercentileMetricValue(int? count = null, double? average = null, double? maximum = null, double? minimum = null, DateTimeOffset? timestamp = null, double? total = null, double? p10 = null, double? p25 = null, double? p50 = null, double? p75 = null, double? p90 = null, double? p95 = null, double? p99 = null)
        {
            return new PercentileMetricValue(count, average, maximum, minimum, timestamp, total, p10, p25, p50, p75, p90, p95, p99);
        }

        /// <summary> Initializes a new instance of PartitionMetric. </summary>
        /// <param name="startOn"> The start time for the metric (ISO-8601 format). </param>
        /// <param name="endOn"> The end time for the metric (ISO-8601 format). </param>
        /// <param name="timeGrain"> The time grain to be used to summarize the metric values. </param>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="name"> The name information for the metric. </param>
        /// <param name="metricValues"> The metric values for the specified time window and timestep. </param>
        /// <param name="partitionId"> The partition id (GUID identifier) of the metric values. </param>
        /// <param name="partitionKeyRangeId"> The partition key range id (integer identifier) of the metric values. </param>
        /// <returns> A new <see cref="Models.PartitionMetric"/> instance for mocking. </returns>
        public static PartitionMetric PartitionMetric(DateTimeOffset? startOn = null, DateTimeOffset? endOn = null, string timeGrain = null, CosmosDBMetricUnitType? unit = null, CosmosDBMetricName name = null, IEnumerable<CosmosDBMetricValue> metricValues = null, Guid? partitionId = null, string partitionKeyRangeId = null)
        {
            metricValues ??= new List<CosmosDBMetricValue>();

            return new PartitionMetric(startOn, endOn, timeGrain, unit, name, metricValues?.ToList(), partitionId, partitionKeyRangeId);
        }

        /// <summary> Initializes a new instance of CosmosDBBaseUsage. </summary>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="name"> The name information for the metric. </param>
        /// <param name="quotaPeriod"> The quota period used to summarize the usage values. </param>
        /// <param name="limit"> Maximum value for this metric. </param>
        /// <param name="currentValue"> Current value for this metric. </param>
        /// <returns> A new <see cref="Models.CosmosDBBaseUsage"/> instance for mocking. </returns>
        public static CosmosDBBaseUsage CosmosDBBaseUsage(CosmosDBMetricUnitType? unit = null, CosmosDBMetricName name = null, string quotaPeriod = null, long? limit = null, long? currentValue = null)
        {
            return new CosmosDBBaseUsage(unit, name, quotaPeriod, limit, currentValue);
        }

        /// <summary> Initializes a new instance of PartitionUsage. </summary>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="name"> The name information for the metric. </param>
        /// <param name="quotaPeriod"> The quota period used to summarize the usage values. </param>
        /// <param name="limit"> Maximum value for this metric. </param>
        /// <param name="currentValue"> Current value for this metric. </param>
        /// <param name="partitionId"> The partition id (GUID identifier) of the usages. </param>
        /// <param name="partitionKeyRangeId"> The partition key range id (integer identifier) of the usages. </param>
        /// <returns> A new <see cref="Models.PartitionUsage"/> instance for mocking. </returns>
        public static PartitionUsage PartitionUsage(CosmosDBMetricUnitType? unit = null, CosmosDBMetricName name = null, string quotaPeriod = null, long? limit = null, long? currentValue = null, Guid? partitionId = null, string partitionKeyRangeId = null)
        {
            return new PartitionUsage(unit, name, quotaPeriod, limit, currentValue, partitionId, partitionKeyRangeId);
        }

        /// <summary> Initializes a new instance of CosmosDBMetricDefinition. </summary>
        /// <param name="metricAvailabilities"> The list of metric availabilities for the account. </param>
        /// <param name="primaryAggregationType"> The primary aggregation type of the metric. </param>
        /// <param name="unit"> The unit of the metric. </param>
        /// <param name="resourceId"> The resource uri of the database. </param>
        /// <param name="name"> The name information for the metric. </param>
        /// <returns> A new <see cref="Models.CosmosDBMetricDefinition"/> instance for mocking. </returns>
        public static CosmosDBMetricDefinition CosmosDBMetricDefinition(IEnumerable<CosmosDBMetricAvailability> metricAvailabilities = null, CosmosDBMetricPrimaryAggregationType? primaryAggregationType = null, CosmosDBMetricUnitType? unit = null, ResourceIdentifier resourceId = null, CosmosDBMetricName name = null)
        {
            metricAvailabilities ??= new List<CosmosDBMetricAvailability>();

            return new CosmosDBMetricDefinition(metricAvailabilities?.ToList(), primaryAggregationType, unit, resourceId, name);
        }

        /// <summary> Initializes a new instance of CosmosDBMetricAvailability. </summary>
        /// <param name="timeGrain"> The time grain to be used to summarize the metric values. </param>
        /// <param name="retention"> The retention for the metric values. </param>
        /// <returns> A new <see cref="Models.CosmosDBMetricAvailability"/> instance for mocking. </returns>
        public static CosmosDBMetricAvailability CosmosDBMetricAvailability(string timeGrain = null, string retention = null)
        {
            return new CosmosDBMetricAvailability(timeGrain, retention);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlDatabaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBSqlDatabaseData"/> instance for mocking. </returns>
        public static CosmosDBSqlDatabaseData CosmosDBSqlDatabaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedCosmosDBSqlDatabaseResourceInfo resource = null, CosmosDBSqlDatabasePropertiesConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlDatabaseData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of ExtendedCosmosDBSqlDatabaseResourceInfo. </summary>
        /// <param name="databaseName"> Name of the Cosmos DB SQL database. </param>
        /// <param name="colls"> A system generated property that specified the addressable path of the collections resource. </param>
        /// <param name="users"> A system generated property that specifies the addressable path of the users resource. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <returns> A new <see cref="Models.ExtendedCosmosDBSqlDatabaseResourceInfo"/> instance for mocking. </returns>
        public static ExtendedCosmosDBSqlDatabaseResourceInfo ExtendedCosmosDBSqlDatabaseResourceInfo(string databaseName = null, string colls = null, string users = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            return new ExtendedCosmosDBSqlDatabaseResourceInfo(databaseName, colls, users, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlDatabasePropertiesConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlDatabasePropertiesConfig"/> instance for mocking. </returns>
        public static CosmosDBSqlDatabasePropertiesConfig CosmosDBSqlDatabasePropertiesConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new CosmosDBSqlDatabasePropertiesConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of CosmosDBBaseConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.CosmosDBBaseConfig"/> instance for mocking. </returns>
        public static CosmosDBBaseConfig CosmosDBBaseConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new CosmosDBBaseConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of CosmosDBSqlDatabaseCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resourceDatabaseName"> The standard JSON format of a SQL database. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlDatabaseCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CosmosDBSqlDatabaseCreateOrUpdateContent CosmosDBSqlDatabaseCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string resourceDatabaseName = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlDatabaseCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, new CosmosDBSqlDatabaseResourceInfo(resourceDatabaseName), options);
        }

        /// <summary> Initializes a new instance of CosmosDBCreateUpdateConfig. </summary>
        /// <param name="throughput"> Request Units per second. For example, &quot;throughput&quot;: 10000. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.CosmosDBCreateUpdateConfig"/> instance for mocking. </returns>
        public static CosmosDBCreateUpdateConfig CosmosDBCreateUpdateConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new CosmosDBCreateUpdateConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of ThroughputSettingData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <returns> A new <see cref="CosmosDB.ThroughputSettingData"/> instance for mocking. </returns>
        public static ThroughputSettingData ThroughputSettingData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedThroughputSettingsResourceInfo resource = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ThroughputSettingData(id, name, resourceType, systemData, tags, location, resource);
        }

        /// <summary> Initializes a new instance of ExtendedThroughputSettingsResourceInfo. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput. Either throughput is required or autoscaleSettings is required, but not both. </param>
        /// <param name="autoscaleSettings"> Cosmos DB resource for autoscale settings. Either throughput is required or autoscaleSettings is required, but not both. </param>
        /// <param name="minimumThroughput"> The minimum throughput of the resource. </param>
        /// <param name="offerReplacePending"> The throughput replace is pending. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.ExtendedThroughputSettingsResourceInfo"/> instance for mocking. </returns>
        public static ExtendedThroughputSettingsResourceInfo ExtendedThroughputSettingsResourceInfo(int? throughput = null, AutoscaleSettingsResourceInfo autoscaleSettings = null, string minimumThroughput = null, string offerReplacePending = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            return new ExtendedThroughputSettingsResourceInfo(throughput, autoscaleSettings, minimumThroughput, offerReplacePending, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of ThroughputSettingsResourceInfo. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput. Either throughput is required or autoscaleSettings is required, but not both. </param>
        /// <param name="autoscaleSettings"> Cosmos DB resource for autoscale settings. Either throughput is required or autoscaleSettings is required, but not both. </param>
        /// <param name="minimumThroughput"> The minimum throughput of the resource. </param>
        /// <param name="offerReplacePending"> The throughput replace is pending. </param>
        /// <returns> A new <see cref="Models.ThroughputSettingsResourceInfo"/> instance for mocking. </returns>
        public static ThroughputSettingsResourceInfo ThroughputSettingsResourceInfo(int? throughput = null, AutoscaleSettingsResourceInfo autoscaleSettings = null, string minimumThroughput = null, string offerReplacePending = null)
        {
            return new ThroughputSettingsResourceInfo(throughput, autoscaleSettings, minimumThroughput, offerReplacePending);
        }

        /// <summary> Initializes a new instance of AutoscaleSettingsResourceInfo. </summary>
        /// <param name="maxThroughput"> Represents maximum throughput container can scale up to. </param>
        /// <param name="autoUpgradeThroughputPolicy"> Cosmos DB resource auto-upgrade policy. </param>
        /// <param name="targetMaxThroughput"> Represents target maximum throughput container can scale up to once offer is no longer in pending state. </param>
        /// <returns> A new <see cref="Models.AutoscaleSettingsResourceInfo"/> instance for mocking. </returns>
        public static AutoscaleSettingsResourceInfo AutoscaleSettingsResourceInfo(int maxThroughput = default, ThroughputPolicyResourceInfo autoUpgradeThroughputPolicy = null, int? targetMaxThroughput = null)
        {
            return new AutoscaleSettingsResourceInfo(maxThroughput, new AutoUpgradePolicyResourceInfo(autoUpgradeThroughputPolicy), targetMaxThroughput);
        }

        /// <summary> Initializes a new instance of ThroughputPolicyResourceInfo. </summary>
        /// <param name="isEnabled"> Determines whether the ThroughputPolicy is active or not. </param>
        /// <param name="incrementPercent"> Represents the percentage by which throughput can increase every time throughput policy kicks in. </param>
        /// <returns> A new <see cref="Models.ThroughputPolicyResourceInfo"/> instance for mocking. </returns>
        public static ThroughputPolicyResourceInfo ThroughputPolicyResourceInfo(bool? isEnabled = null, int? incrementPercent = null)
        {
            return new ThroughputPolicyResourceInfo(isEnabled, incrementPercent);
        }

        /// <summary> Initializes a new instance of ThroughputSettingsUpdateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"> The standard JSON format of a resource throughput. </param>
        /// <returns> A new <see cref="Models.ThroughputSettingsUpdateData"/> instance for mocking. </returns>
        public static ThroughputSettingsUpdateData ThroughputSettingsUpdateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ThroughputSettingsResourceInfo resource = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ThroughputSettingsUpdateData(id, name, resourceType, systemData, tags, location, resource);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlContainerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBSqlContainerData"/> instance for mocking. </returns>
        public static CosmosDBSqlContainerData CosmosDBSqlContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedCosmosDBSqlContainerResourceInfo resource = null, CosmosDBSqlContainerPropertiesConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlContainerData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of ExtendedCosmosDBSqlContainerResourceInfo. </summary>
        /// <param name="containerName"> Name of the Cosmos DB SQL container. </param>
        /// <param name="indexingPolicy"> The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container. </param>
        /// <param name="partitionKey"> The configuration of the partition key to be used for partitioning data into multiple partitions. </param>
        /// <param name="defaultTtl"> Default time to live. </param>
        /// <param name="uniqueKeys"> The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. </param>
        /// <param name="conflictResolutionPolicy"> The conflict resolution policy for the container. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.ExtendedCosmosDBSqlContainerResourceInfo"/> instance for mocking. </returns>
        public static ExtendedCosmosDBSqlContainerResourceInfo ExtendedCosmosDBSqlContainerResourceInfo(string containerName = null, CosmosDBIndexingPolicy indexingPolicy = null, CosmosDBContainerPartitionKey partitionKey = null, int? defaultTtl = null, IEnumerable<CosmosDBUniqueKey> uniqueKeys = null, ConflictResolutionPolicy conflictResolutionPolicy = null, long? analyticalStorageTtl = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            uniqueKeys ??= new List<CosmosDBUniqueKey>();

            return new ExtendedCosmosDBSqlContainerResourceInfo(containerName, indexingPolicy, partitionKey, defaultTtl, new CosmosDBUniqueKeyPolicy(uniqueKeys?.ToList()), conflictResolutionPolicy, analyticalStorageTtl, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlContainerResourceInfo. </summary>
        /// <param name="containerName"> Name of the Cosmos DB SQL container. </param>
        /// <param name="indexingPolicy"> The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container. </param>
        /// <param name="partitionKey"> The configuration of the partition key to be used for partitioning data into multiple partitions. </param>
        /// <param name="defaultTtl"> Default time to live. </param>
        /// <param name="uniqueKeys"> The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. </param>
        /// <param name="conflictResolutionPolicy"> The conflict resolution policy for the container. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlContainerResourceInfo"/> instance for mocking. </returns>
        public static CosmosDBSqlContainerResourceInfo CosmosDBSqlContainerResourceInfo(string containerName = null, CosmosDBIndexingPolicy indexingPolicy = null, CosmosDBContainerPartitionKey partitionKey = null, int? defaultTtl = null, IEnumerable<CosmosDBUniqueKey> uniqueKeys = null, ConflictResolutionPolicy conflictResolutionPolicy = null, long? analyticalStorageTtl = null)
        {
            uniqueKeys ??= new List<CosmosDBUniqueKey>();

            return new CosmosDBSqlContainerResourceInfo(containerName, indexingPolicy, partitionKey, defaultTtl, new CosmosDBUniqueKeyPolicy(uniqueKeys?.ToList()), conflictResolutionPolicy, analyticalStorageTtl);
        }

        /// <summary> Initializes a new instance of CosmosDBIndexingPolicy. </summary>
        /// <param name="isAutomatic"> Indicates if the indexing policy is automatic. </param>
        /// <param name="indexingMode"> Indicates the indexing mode. </param>
        /// <param name="includedPaths"> List of paths to include in the indexing. </param>
        /// <param name="excludedPaths"> List of paths to exclude from indexing. </param>
        /// <param name="compositeIndexes"> List of composite path list. </param>
        /// <param name="spatialIndexes"> List of spatial specifics. </param>
        /// <returns> A new <see cref="Models.CosmosDBIndexingPolicy"/> instance for mocking. </returns>
        public static CosmosDBIndexingPolicy CosmosDBIndexingPolicy(bool? isAutomatic = null, CosmosDBIndexingMode? indexingMode = null, IEnumerable<CosmosDBIncludedPath> includedPaths = null, IEnumerable<CosmosDBExcludedPath> excludedPaths = null, IEnumerable<IList<CosmosDBCompositePath>> compositeIndexes = null, IEnumerable<SpatialSpec> spatialIndexes = null)
        {
            includedPaths ??= new List<CosmosDBIncludedPath>();
            excludedPaths ??= new List<CosmosDBExcludedPath>();
            compositeIndexes ??= new List<IList<CosmosDBCompositePath>>();
            spatialIndexes ??= new List<SpatialSpec>();

            return new CosmosDBIndexingPolicy(isAutomatic, indexingMode, includedPaths?.ToList(), excludedPaths?.ToList(), compositeIndexes?.ToList(), spatialIndexes?.ToList());
        }

        /// <summary> Initializes a new instance of CosmosDBIncludedPath. </summary>
        /// <param name="path"> The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*). </param>
        /// <param name="indexes"> List of indexes for this path. </param>
        /// <returns> A new <see cref="Models.CosmosDBIncludedPath"/> instance for mocking. </returns>
        public static CosmosDBIncludedPath CosmosDBIncludedPath(string path = null, IEnumerable<CosmosDBPathIndexes> indexes = null)
        {
            indexes ??= new List<CosmosDBPathIndexes>();

            return new CosmosDBIncludedPath(path, indexes?.ToList());
        }

        /// <summary> Initializes a new instance of CosmosDBPathIndexes. </summary>
        /// <param name="dataType"> The datatype for which the indexing behavior is applied to. </param>
        /// <param name="precision"> The precision of the index. -1 is maximum precision. </param>
        /// <param name="kind"> Indicates the type of index. </param>
        /// <returns> A new <see cref="Models.CosmosDBPathIndexes"/> instance for mocking. </returns>
        public static CosmosDBPathIndexes CosmosDBPathIndexes(CosmosDBDataType? dataType = null, int? precision = null, CosmosDBIndexKind? kind = null)
        {
            return new CosmosDBPathIndexes(dataType, precision, kind);
        }

        /// <summary> Initializes a new instance of CosmosDBExcludedPath. </summary>
        /// <param name="path"> The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*). </param>
        /// <returns> A new <see cref="Models.CosmosDBExcludedPath"/> instance for mocking. </returns>
        public static CosmosDBExcludedPath CosmosDBExcludedPath(string path = null)
        {
            return new CosmosDBExcludedPath(path);
        }

        /// <summary> Initializes a new instance of CosmosDBCompositePath. </summary>
        /// <param name="path"> The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*). </param>
        /// <param name="order"> Sort order for composite paths. </param>
        /// <returns> A new <see cref="Models.CosmosDBCompositePath"/> instance for mocking. </returns>
        public static CosmosDBCompositePath CosmosDBCompositePath(string path = null, CompositePathSortOrder? order = null)
        {
            return new CosmosDBCompositePath(path, order);
        }

        /// <summary> Initializes a new instance of SpatialSpec. </summary>
        /// <param name="path"> The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*). </param>
        /// <param name="types"> List of path&apos;s spatial type. </param>
        /// <returns> A new <see cref="Models.SpatialSpec"/> instance for mocking. </returns>
        public static SpatialSpec SpatialSpec(string path = null, IEnumerable<CosmosDBSpatialType> types = null)
        {
            types ??= new List<CosmosDBSpatialType>();

            return new SpatialSpec(path, types?.ToList());
        }

        /// <summary> Initializes a new instance of CosmosDBContainerPartitionKey. </summary>
        /// <param name="paths"> List of paths using which data within the container can be partitioned. </param>
        /// <param name="kind"> Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create. </param>
        /// <param name="version"> Indicates the version of the partition key definition. </param>
        /// <param name="isSystemKey"> Indicates if the container is using a system generated partition key. </param>
        /// <returns> A new <see cref="Models.CosmosDBContainerPartitionKey"/> instance for mocking. </returns>
        public static CosmosDBContainerPartitionKey CosmosDBContainerPartitionKey(IEnumerable<string> paths = null, CosmosDBPartitionKind? kind = null, int? version = null, bool? isSystemKey = null)
        {
            paths ??= new List<string>();

            return new CosmosDBContainerPartitionKey(paths?.ToList(), kind, version, isSystemKey);
        }

        /// <summary> Initializes a new instance of CosmosDBUniqueKey. </summary>
        /// <param name="paths"> List of paths must be unique for each document in the Azure Cosmos DB service. </param>
        /// <returns> A new <see cref="Models.CosmosDBUniqueKey"/> instance for mocking. </returns>
        public static CosmosDBUniqueKey CosmosDBUniqueKey(IEnumerable<string> paths = null)
        {
            paths ??= new List<string>();

            return new CosmosDBUniqueKey(paths?.ToList());
        }

        /// <summary> Initializes a new instance of ConflictResolutionPolicy. </summary>
        /// <param name="mode"> Indicates the conflict resolution mode. </param>
        /// <param name="conflictResolutionPath"> The conflict resolution path in the case of LastWriterWins mode. </param>
        /// <param name="conflictResolutionProcedure"> The procedure to resolve conflicts in the case of custom mode. </param>
        /// <returns> A new <see cref="Models.ConflictResolutionPolicy"/> instance for mocking. </returns>
        public static ConflictResolutionPolicy ConflictResolutionPolicy(ConflictResolutionMode? mode = null, string conflictResolutionPath = null, string conflictResolutionProcedure = null)
        {
            return new ConflictResolutionPolicy(mode, conflictResolutionPath, conflictResolutionProcedure);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlContainerPropertiesConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlContainerPropertiesConfig"/> instance for mocking. </returns>
        public static CosmosDBSqlContainerPropertiesConfig CosmosDBSqlContainerPropertiesConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new CosmosDBSqlContainerPropertiesConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of CosmosDBSqlContainerCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"> The standard JSON format of a container. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlContainerCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CosmosDBSqlContainerCreateOrUpdateContent CosmosDBSqlContainerCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CosmosDBSqlContainerResourceInfo resource = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlContainerCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlStoredProcedureData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBSqlStoredProcedureData"/> instance for mocking. </returns>
        public static CosmosDBSqlStoredProcedureData CosmosDBSqlStoredProcedureData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedCosmosDBSqlStoredProcedureResourceInfo resource = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlStoredProcedureData(id, name, resourceType, systemData, tags, location, resource);
        }

        /// <summary> Initializes a new instance of ExtendedCosmosDBSqlStoredProcedureResourceInfo. </summary>
        /// <param name="storedProcedureName"> Name of the Cosmos DB SQL storedProcedure. </param>
        /// <param name="body"> Body of the Stored Procedure. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.ExtendedCosmosDBSqlStoredProcedureResourceInfo"/> instance for mocking. </returns>
        public static ExtendedCosmosDBSqlStoredProcedureResourceInfo ExtendedCosmosDBSqlStoredProcedureResourceInfo(string storedProcedureName = null, string body = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            return new ExtendedCosmosDBSqlStoredProcedureResourceInfo(storedProcedureName, body, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlStoredProcedureResourceInfo. </summary>
        /// <param name="storedProcedureName"> Name of the Cosmos DB SQL storedProcedure. </param>
        /// <param name="body"> Body of the Stored Procedure. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlStoredProcedureResourceInfo"/> instance for mocking. </returns>
        public static CosmosDBSqlStoredProcedureResourceInfo CosmosDBSqlStoredProcedureResourceInfo(string storedProcedureName = null, string body = null)
        {
            return new CosmosDBSqlStoredProcedureResourceInfo(storedProcedureName, body);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlStoredProcedureCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"> The standard JSON format of a storedProcedure. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlStoredProcedureCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CosmosDBSqlStoredProcedureCreateOrUpdateContent CosmosDBSqlStoredProcedureCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CosmosDBSqlStoredProcedureResourceInfo resource = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlStoredProcedureCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlUserDefinedFunctionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBSqlUserDefinedFunctionData"/> instance for mocking. </returns>
        public static CosmosDBSqlUserDefinedFunctionData CosmosDBSqlUserDefinedFunctionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedCosmosDBSqlUserDefinedFunctionResourceInfo resource = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlUserDefinedFunctionData(id, name, resourceType, systemData, tags, location, resource);
        }

        /// <summary> Initializes a new instance of ExtendedCosmosDBSqlUserDefinedFunctionResourceInfo. </summary>
        /// <param name="functionName"> Name of the Cosmos DB SQL userDefinedFunction. </param>
        /// <param name="body"> Body of the User Defined Function. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.ExtendedCosmosDBSqlUserDefinedFunctionResourceInfo"/> instance for mocking. </returns>
        public static ExtendedCosmosDBSqlUserDefinedFunctionResourceInfo ExtendedCosmosDBSqlUserDefinedFunctionResourceInfo(string functionName = null, string body = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            return new ExtendedCosmosDBSqlUserDefinedFunctionResourceInfo(functionName, body, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlUserDefinedFunctionResourceInfo. </summary>
        /// <param name="functionName"> Name of the Cosmos DB SQL userDefinedFunction. </param>
        /// <param name="body"> Body of the User Defined Function. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlUserDefinedFunctionResourceInfo"/> instance for mocking. </returns>
        public static CosmosDBSqlUserDefinedFunctionResourceInfo CosmosDBSqlUserDefinedFunctionResourceInfo(string functionName = null, string body = null)
        {
            return new CosmosDBSqlUserDefinedFunctionResourceInfo(functionName, body);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlUserDefinedFunctionCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"> The standard JSON format of a userDefinedFunction. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlUserDefinedFunctionCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CosmosDBSqlUserDefinedFunctionCreateOrUpdateContent CosmosDBSqlUserDefinedFunctionCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CosmosDBSqlUserDefinedFunctionResourceInfo resource = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlUserDefinedFunctionCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlTriggerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBSqlTriggerData"/> instance for mocking. </returns>
        public static CosmosDBSqlTriggerData CosmosDBSqlTriggerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedCosmosDBSqlTriggerResourceInfo resource = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlTriggerData(id, name, resourceType, systemData, tags, location, resource);
        }

        /// <summary> Initializes a new instance of ExtendedCosmosDBSqlTriggerResourceInfo. </summary>
        /// <param name="triggerName"> Name of the Cosmos DB SQL trigger. </param>
        /// <param name="body"> Body of the Trigger. </param>
        /// <param name="triggerType"> Type of the Trigger. </param>
        /// <param name="triggerOperation"> The operation the trigger is associated with. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.ExtendedCosmosDBSqlTriggerResourceInfo"/> instance for mocking. </returns>
        public static ExtendedCosmosDBSqlTriggerResourceInfo ExtendedCosmosDBSqlTriggerResourceInfo(string triggerName = null, string body = null, CosmosDBSqlTriggerType? triggerType = null, CosmosDBSqlTriggerOperation? triggerOperation = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            return new ExtendedCosmosDBSqlTriggerResourceInfo(triggerName, body, triggerType, triggerOperation, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlTriggerResourceInfo. </summary>
        /// <param name="triggerName"> Name of the Cosmos DB SQL trigger. </param>
        /// <param name="body"> Body of the Trigger. </param>
        /// <param name="triggerType"> Type of the Trigger. </param>
        /// <param name="triggerOperation"> The operation the trigger is associated with. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlTriggerResourceInfo"/> instance for mocking. </returns>
        public static CosmosDBSqlTriggerResourceInfo CosmosDBSqlTriggerResourceInfo(string triggerName = null, string body = null, CosmosDBSqlTriggerType? triggerType = null, CosmosDBSqlTriggerOperation? triggerOperation = null)
        {
            return new CosmosDBSqlTriggerResourceInfo(triggerName, body, triggerType, triggerOperation);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlTriggerCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"> The standard JSON format of a trigger. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlTriggerCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CosmosDBSqlTriggerCreateOrUpdateContent CosmosDBSqlTriggerCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CosmosDBSqlTriggerResourceInfo resource = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBSqlTriggerCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of MongoDBDatabaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.MongoDBDatabaseData"/> instance for mocking. </returns>
        public static MongoDBDatabaseData MongoDBDatabaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedMongoDBDatabaseResourceInfo resource = null, MongoDBDatabasePropertiesConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MongoDBDatabaseData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of ExtendedMongoDBDatabaseResourceInfo. </summary>
        /// <param name="databaseName"> Name of the Cosmos DB MongoDB database. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <returns> A new <see cref="Models.ExtendedMongoDBDatabaseResourceInfo"/> instance for mocking. </returns>
        public static ExtendedMongoDBDatabaseResourceInfo ExtendedMongoDBDatabaseResourceInfo(string databaseName = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            return new ExtendedMongoDBDatabaseResourceInfo(databaseName, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of MongoDBDatabasePropertiesConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.MongoDBDatabasePropertiesConfig"/> instance for mocking. </returns>
        public static MongoDBDatabasePropertiesConfig MongoDBDatabasePropertiesConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new MongoDBDatabasePropertiesConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of MongoDBDatabaseCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resourceDatabaseName"> The standard JSON format of a MongoDB database. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.MongoDBDatabaseCreateOrUpdateContent"/> instance for mocking. </returns>
        public static MongoDBDatabaseCreateOrUpdateContent MongoDBDatabaseCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string resourceDatabaseName = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MongoDBDatabaseCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, new MongoDBDatabaseResourceInfo(resourceDatabaseName), options);
        }

        /// <summary> Initializes a new instance of MongoDBCollectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.MongoDBCollectionData"/> instance for mocking. </returns>
        public static MongoDBCollectionData MongoDBCollectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedMongoDBCollectionResourceInfo resource = null, MongoDBCollectionPropertiesConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MongoDBCollectionData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of ExtendedMongoDBCollectionResourceInfo. </summary>
        /// <param name="collectionName"> Name of the Cosmos DB MongoDB collection. </param>
        /// <param name="shardKey"> A key-value pair of shard keys to be applied for the request. </param>
        /// <param name="indexes"> List of index keys. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.ExtendedMongoDBCollectionResourceInfo"/> instance for mocking. </returns>
        public static ExtendedMongoDBCollectionResourceInfo ExtendedMongoDBCollectionResourceInfo(string collectionName = null, IDictionary<string, string> shardKey = null, IEnumerable<MongoDBIndex> indexes = null, int? analyticalStorageTtl = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            shardKey ??= new Dictionary<string, string>();
            indexes ??= new List<MongoDBIndex>();

            return new ExtendedMongoDBCollectionResourceInfo(collectionName, shardKey, indexes?.ToList(), analyticalStorageTtl, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of MongoDBCollectionResourceInfo. </summary>
        /// <param name="collectionName"> Name of the Cosmos DB MongoDB collection. </param>
        /// <param name="shardKey"> A key-value pair of shard keys to be applied for the request. </param>
        /// <param name="indexes"> List of index keys. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <returns> A new <see cref="Models.MongoDBCollectionResourceInfo"/> instance for mocking. </returns>
        public static MongoDBCollectionResourceInfo MongoDBCollectionResourceInfo(string collectionName = null, IDictionary<string, string> shardKey = null, IEnumerable<MongoDBIndex> indexes = null, int? analyticalStorageTtl = null)
        {
            shardKey ??= new Dictionary<string, string>();
            indexes ??= new List<MongoDBIndex>();

            return new MongoDBCollectionResourceInfo(collectionName, shardKey, indexes?.ToList(), analyticalStorageTtl);
        }

        /// <summary> Initializes a new instance of MongoDBIndex. </summary>
        /// <param name="keys"> Cosmos DB MongoDB collection index keys. </param>
        /// <param name="options"> Cosmos DB MongoDB collection index key options. </param>
        /// <returns> A new <see cref="Models.MongoDBIndex"/> instance for mocking. </returns>
        public static MongoDBIndex MongoDBIndex(IEnumerable<string> keys = null, MongoDBIndexConfig options = null)
        {
            keys ??= new List<string>();

            return new MongoDBIndex(new MongoIndexKeys(keys?.ToList()), options);
        }

        /// <summary> Initializes a new instance of MongoDBIndexConfig. </summary>
        /// <param name="expireAfterSeconds"> Expire after seconds. </param>
        /// <param name="isUnique"> Is unique or not. </param>
        /// <returns> A new <see cref="Models.MongoDBIndexConfig"/> instance for mocking. </returns>
        public static MongoDBIndexConfig MongoDBIndexConfig(int? expireAfterSeconds = null, bool? isUnique = null)
        {
            return new MongoDBIndexConfig(expireAfterSeconds, isUnique);
        }

        /// <summary> Initializes a new instance of MongoDBCollectionPropertiesConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.MongoDBCollectionPropertiesConfig"/> instance for mocking. </returns>
        public static MongoDBCollectionPropertiesConfig MongoDBCollectionPropertiesConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new MongoDBCollectionPropertiesConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of MongoDBCollectionCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"> The standard JSON format of a MongoDB collection. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.MongoDBCollectionCreateOrUpdateContent"/> instance for mocking. </returns>
        public static MongoDBCollectionCreateOrUpdateContent MongoDBCollectionCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, MongoDBCollectionResourceInfo resource = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MongoDBCollectionCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of CosmosDBTableData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBTableData"/> instance for mocking. </returns>
        public static CosmosDBTableData CosmosDBTableData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CosmosDBTablePropertiesResource resource = null, CosmosDBTablePropertiesOptions options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBTableData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of CosmosDBTablePropertiesResource. </summary>
        /// <param name="tableName"> Name of the Cosmos DB table. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tableName"/> is null. </exception>
        /// <returns> A new <see cref="Models.CosmosDBTablePropertiesResource"/> instance for mocking. </returns>
        public static CosmosDBTablePropertiesResource CosmosDBTablePropertiesResource(string tableName = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            return new CosmosDBTablePropertiesResource(tableName, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of CosmosDBTablePropertiesOptions. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.CosmosDBTablePropertiesOptions"/> instance for mocking. </returns>
        public static CosmosDBTablePropertiesOptions CosmosDBTablePropertiesOptions(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new CosmosDBTablePropertiesOptions(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of CosmosDBTableCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resourceTableName"> The standard JSON format of a Table. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.CosmosDBTableCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CosmosDBTableCreateOrUpdateContent CosmosDBTableCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string resourceTableName = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CosmosDBTableCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, new CosmosDBTableResourceInfo(resourceTableName), options);
        }

        /// <summary> Initializes a new instance of CassandraKeyspaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.CassandraKeyspaceData"/> instance for mocking. </returns>
        public static CassandraKeyspaceData CassandraKeyspaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedCassandraKeyspaceResourceInfo resource = null, CassandraKeyspacePropertiesConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CassandraKeyspaceData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of ExtendedCassandraKeyspaceResourceInfo. </summary>
        /// <param name="keyspaceName"> Name of the Cosmos DB Cassandra keyspace. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="keyspaceName"/> is null. </exception>
        /// <returns> A new <see cref="Models.ExtendedCassandraKeyspaceResourceInfo"/> instance for mocking. </returns>
        public static ExtendedCassandraKeyspaceResourceInfo ExtendedCassandraKeyspaceResourceInfo(string keyspaceName = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            if (keyspaceName == null)
            {
                throw new ArgumentNullException(nameof(keyspaceName));
            }

            return new ExtendedCassandraKeyspaceResourceInfo(keyspaceName, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of CassandraKeyspacePropertiesConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.CassandraKeyspacePropertiesConfig"/> instance for mocking. </returns>
        public static CassandraKeyspacePropertiesConfig CassandraKeyspacePropertiesConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new CassandraKeyspacePropertiesConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of CassandraKeyspaceCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resourceKeyspaceName"> The standard JSON format of a Cassandra keyspace. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.CassandraKeyspaceCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CassandraKeyspaceCreateOrUpdateContent CassandraKeyspaceCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string resourceKeyspaceName = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CassandraKeyspaceCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, new CassandraKeyspaceResourceInfo(resourceKeyspaceName), options);
        }

        /// <summary> Initializes a new instance of CassandraTableData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.CassandraTableData"/> instance for mocking. </returns>
        public static CassandraTableData CassandraTableData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedCassandraTableResourceInfo resource = null, CassandraTablePropertiesConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CassandraTableData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of ExtendedCassandraTableResourceInfo. </summary>
        /// <param name="tableName"> Name of the Cosmos DB Cassandra table. </param>
        /// <param name="defaultTtl"> Time to live of the Cosmos DB Cassandra table. </param>
        /// <param name="schema"> Schema of the Cosmos DB Cassandra table. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.ExtendedCassandraTableResourceInfo"/> instance for mocking. </returns>
        public static ExtendedCassandraTableResourceInfo ExtendedCassandraTableResourceInfo(string tableName = null, int? defaultTtl = null, CassandraSchema schema = null, int? analyticalStorageTtl = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            return new ExtendedCassandraTableResourceInfo(tableName, defaultTtl, schema, analyticalStorageTtl, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of CassandraTableResourceInfo. </summary>
        /// <param name="tableName"> Name of the Cosmos DB Cassandra table. </param>
        /// <param name="defaultTtl"> Time to live of the Cosmos DB Cassandra table. </param>
        /// <param name="schema"> Schema of the Cosmos DB Cassandra table. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <returns> A new <see cref="Models.CassandraTableResourceInfo"/> instance for mocking. </returns>
        public static CassandraTableResourceInfo CassandraTableResourceInfo(string tableName = null, int? defaultTtl = null, CassandraSchema schema = null, int? analyticalStorageTtl = null)
        {
            return new CassandraTableResourceInfo(tableName, defaultTtl, schema, analyticalStorageTtl);
        }

        /// <summary> Initializes a new instance of CassandraSchema. </summary>
        /// <param name="columns"> List of Cassandra table columns. </param>
        /// <param name="partitionKeys"> List of partition key. </param>
        /// <param name="clusterKeys"> List of cluster key. </param>
        /// <returns> A new <see cref="Models.CassandraSchema"/> instance for mocking. </returns>
        public static CassandraSchema CassandraSchema(IEnumerable<CassandraColumn> columns = null, IEnumerable<CassandraPartitionKey> partitionKeys = null, IEnumerable<CassandraClusterKey> clusterKeys = null)
        {
            columns ??= new List<CassandraColumn>();
            partitionKeys ??= new List<CassandraPartitionKey>();
            clusterKeys ??= new List<CassandraClusterKey>();

            return new CassandraSchema(columns?.ToList(), partitionKeys?.ToList(), clusterKeys?.ToList());
        }

        /// <summary> Initializes a new instance of CassandraColumn. </summary>
        /// <param name="name"> Name of the Cosmos DB Cassandra table column. </param>
        /// <param name="cassandraColumnType"> Type of the Cosmos DB Cassandra table column. </param>
        /// <returns> A new <see cref="Models.CassandraColumn"/> instance for mocking. </returns>
        public static CassandraColumn CassandraColumn(string name = null, string cassandraColumnType = null)
        {
            return new CassandraColumn(name, cassandraColumnType);
        }

        /// <summary> Initializes a new instance of CassandraPartitionKey. </summary>
        /// <param name="name"> Name of the Cosmos DB Cassandra table partition key. </param>
        /// <returns> A new <see cref="Models.CassandraPartitionKey"/> instance for mocking. </returns>
        public static CassandraPartitionKey CassandraPartitionKey(string name = null)
        {
            return new CassandraPartitionKey(name);
        }

        /// <summary> Initializes a new instance of CassandraClusterKey. </summary>
        /// <param name="name"> Name of the Cosmos DB Cassandra table cluster key. </param>
        /// <param name="orderBy"> Order of the Cosmos DB Cassandra table cluster key, only support &quot;Asc&quot; and &quot;Desc&quot;. </param>
        /// <returns> A new <see cref="Models.CassandraClusterKey"/> instance for mocking. </returns>
        public static CassandraClusterKey CassandraClusterKey(string name = null, string orderBy = null)
        {
            return new CassandraClusterKey(name, orderBy);
        }

        /// <summary> Initializes a new instance of CassandraTablePropertiesConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.CassandraTablePropertiesConfig"/> instance for mocking. </returns>
        public static CassandraTablePropertiesConfig CassandraTablePropertiesConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new CassandraTablePropertiesConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of CassandraTableCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"> The standard JSON format of a Cassandra table. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.CassandraTableCreateOrUpdateContent"/> instance for mocking. </returns>
        public static CassandraTableCreateOrUpdateContent CassandraTableCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CassandraTableResourceInfo resource = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CassandraTableCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of GremlinDatabaseData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.GremlinDatabaseData"/> instance for mocking. </returns>
        public static GremlinDatabaseData GremlinDatabaseData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedGremlinDatabaseResourceInfo resource = null, GremlinDatabasePropertiesConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GremlinDatabaseData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of ExtendedGremlinDatabaseResourceInfo. </summary>
        /// <param name="databaseName"> Name of the Cosmos DB Gremlin database. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <returns> A new <see cref="Models.ExtendedGremlinDatabaseResourceInfo"/> instance for mocking. </returns>
        public static ExtendedGremlinDatabaseResourceInfo ExtendedGremlinDatabaseResourceInfo(string databaseName = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            return new ExtendedGremlinDatabaseResourceInfo(databaseName, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of GremlinDatabasePropertiesConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.GremlinDatabasePropertiesConfig"/> instance for mocking. </returns>
        public static GremlinDatabasePropertiesConfig GremlinDatabasePropertiesConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new GremlinDatabasePropertiesConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of GremlinDatabaseCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resourceDatabaseName"> The standard JSON format of a Gremlin database. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.GremlinDatabaseCreateOrUpdateContent"/> instance for mocking. </returns>
        public static GremlinDatabaseCreateOrUpdateContent GremlinDatabaseCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string resourceDatabaseName = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GremlinDatabaseCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, new GremlinDatabaseResourceInfo(resourceDatabaseName), options);
        }

        /// <summary> Initializes a new instance of GremlinGraphData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"></param>
        /// <param name="options"></param>
        /// <returns> A new <see cref="CosmosDB.GremlinGraphData"/> instance for mocking. </returns>
        public static GremlinGraphData GremlinGraphData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedGremlinGraphResourceInfo resource = null, GremlinGraphPropertiesConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GremlinGraphData(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of ExtendedGremlinGraphResourceInfo. </summary>
        /// <param name="graphName"> Name of the Cosmos DB Gremlin graph. </param>
        /// <param name="indexingPolicy"> The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph. </param>
        /// <param name="partitionKey"> The configuration of the partition key to be used for partitioning data into multiple partitions. </param>
        /// <param name="defaultTtl"> Default time to live. </param>
        /// <param name="uniqueKeys"> The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. </param>
        /// <param name="conflictResolutionPolicy"> The conflict resolution policy for the graph. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.ExtendedGremlinGraphResourceInfo"/> instance for mocking. </returns>
        public static ExtendedGremlinGraphResourceInfo ExtendedGremlinGraphResourceInfo(string graphName = null, CosmosDBIndexingPolicy indexingPolicy = null, CosmosDBContainerPartitionKey partitionKey = null, int? defaultTtl = null, IEnumerable<CosmosDBUniqueKey> uniqueKeys = null, ConflictResolutionPolicy conflictResolutionPolicy = null, long? analyticalStorageTtl = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            uniqueKeys ??= new List<CosmosDBUniqueKey>();

            return new ExtendedGremlinGraphResourceInfo(graphName, indexingPolicy, partitionKey, defaultTtl, new CosmosDBUniqueKeyPolicy(uniqueKeys?.ToList()), conflictResolutionPolicy, analyticalStorageTtl, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of GremlinGraphResourceInfo. </summary>
        /// <param name="graphName"> Name of the Cosmos DB Gremlin graph. </param>
        /// <param name="indexingPolicy"> The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph. </param>
        /// <param name="partitionKey"> The configuration of the partition key to be used for partitioning data into multiple partitions. </param>
        /// <param name="defaultTtl"> Default time to live. </param>
        /// <param name="uniqueKeys"> The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. </param>
        /// <param name="conflictResolutionPolicy"> The conflict resolution policy for the graph. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <returns> A new <see cref="Models.GremlinGraphResourceInfo"/> instance for mocking. </returns>
        public static GremlinGraphResourceInfo GremlinGraphResourceInfo(string graphName = null, CosmosDBIndexingPolicy indexingPolicy = null, CosmosDBContainerPartitionKey partitionKey = null, int? defaultTtl = null, IEnumerable<CosmosDBUniqueKey> uniqueKeys = null, ConflictResolutionPolicy conflictResolutionPolicy = null, long? analyticalStorageTtl = null)
        {
            uniqueKeys ??= new List<CosmosDBUniqueKey>();

            return new GremlinGraphResourceInfo(graphName, indexingPolicy, partitionKey, defaultTtl, new CosmosDBUniqueKeyPolicy(uniqueKeys?.ToList()), conflictResolutionPolicy, analyticalStorageTtl);
        }

        /// <summary> Initializes a new instance of GremlinGraphPropertiesConfig. </summary>
        /// <param name="throughput"> Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. </param>
        /// <param name="autoscaleMaxThroughput"> Specifies the Autoscale settings. </param>
        /// <returns> A new <see cref="Models.GremlinGraphPropertiesConfig"/> instance for mocking. </returns>
        public static GremlinGraphPropertiesConfig GremlinGraphPropertiesConfig(int? throughput = null, int? autoscaleMaxThroughput = null)
        {
            return new GremlinGraphPropertiesConfig(throughput, new AutoscaleSettings(autoscaleMaxThroughput));
        }

        /// <summary> Initializes a new instance of GremlinGraphCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="resource"> The standard JSON format of a Gremlin graph. </param>
        /// <param name="options"> A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. </param>
        /// <returns> A new <see cref="Models.GremlinGraphCreateOrUpdateContent"/> instance for mocking. </returns>
        public static GremlinGraphCreateOrUpdateContent GremlinGraphCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, GremlinGraphResourceInfo resource = null, CosmosDBCreateUpdateConfig options = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GremlinGraphCreateOrUpdateContent(id, name, resourceType, systemData, tags, location, resource, options);
        }

        /// <summary> Initializes a new instance of CosmosDBLocationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Cosmos DB location metadata. </param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBLocationData"/> instance for mocking. </returns>
        public static CosmosDBLocationData CosmosDBLocationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CosmosDBLocationProperties properties = null)
        {
            return new CosmosDBLocationData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of CosmosDBLocationProperties. </summary>
        /// <param name="doesSupportAvailabilityZone"> Flag indicating whether the location supports availability zones or not. </param>
        /// <param name="isResidencyRestricted"> Flag indicating whether the location is residency sensitive. </param>
        /// <param name="backupStorageRedundancies"> The properties of available backup storage redundancies. </param>
        /// <returns> A new <see cref="Models.CosmosDBLocationProperties"/> instance for mocking. </returns>
        public static CosmosDBLocationProperties CosmosDBLocationProperties(bool? doesSupportAvailabilityZone = null, bool? isResidencyRestricted = null, IEnumerable<CosmosDBBackupStorageRedundancy> backupStorageRedundancies = null)
        {
            backupStorageRedundancies ??= new List<CosmosDBBackupStorageRedundancy>();

            return new CosmosDBLocationProperties(doesSupportAvailabilityZone, isResidencyRestricted, backupStorageRedundancies?.ToList());
        }

        /// <summary> Initializes a new instance of CassandraClusterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> Properties of a managed Cassandra cluster. </param>
        /// <param name="identity"> Identity for the resource. Current supported identity types: SystemAssigned, None. </param>
        /// <returns> A new <see cref="CosmosDB.CassandraClusterData"/> instance for mocking. </returns>
        public static CassandraClusterData CassandraClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, CassandraClusterProperties properties = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new CassandraClusterData(id, name, resourceType, systemData, tags, location, properties, identity);
        }

        /// <summary> Initializes a new instance of CassandraClusterProperties. </summary>
        /// <param name="provisioningState"> The status of the resource at the time the operation was called. </param>
        /// <param name="restoreFromBackupId"> To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup. </param>
        /// <param name="delegatedManagementSubnetId"> Resource id of a subnet that this cluster&apos;s management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form &apos;/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual network&gt;/subnets/&lt;subnet&gt;&apos;. </param>
        /// <param name="cassandraVersion"> Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version. </param>
        /// <param name="clusterNameOverride"> If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property. </param>
        /// <param name="authenticationMethod"> Which authentication method Cassandra should use to authenticate clients. &apos;None&apos; turns off authentication, so should not be used except in emergencies. &apos;Cassandra&apos; is the default password based authentication. The default is &apos;Cassandra&apos;. </param>
        /// <param name="initialCassandraAdminPassword"> Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is &apos;Cassandra&apos;. </param>
        /// <param name="prometheusEndpointIPAddress"> Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached. </param>
        /// <param name="isRepairEnabled"> Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs. </param>
        /// <param name="clientCertificates"> List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property. </param>
        /// <param name="externalGossipCertificates"> List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property. </param>
        /// <param name="gossipCertificates"> List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present TLS client certificates that are verifiable using one of the certificates provided in this property. </param>
        /// <param name="externalSeedNodes"> List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes. </param>
        /// <param name="seedNodes"> List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged nodes. </param>
        /// <param name="hoursBetweenBackups"> Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0. </param>
        /// <param name="isDeallocated"> Whether the cluster and associated data centers has been deallocated. </param>
        /// <param name="isCassandraAuditLoggingEnabled"> Whether Cassandra audit logging is enabled. </param>
        /// <returns> A new <see cref="Models.CassandraClusterProperties"/> instance for mocking. </returns>
        public static CassandraClusterProperties CassandraClusterProperties(CassandraProvisioningState? provisioningState = null, string restoreFromBackupId = null, ResourceIdentifier delegatedManagementSubnetId = null, string cassandraVersion = null, string clusterNameOverride = null, CassandraAuthenticationMethod? authenticationMethod = null, string initialCassandraAdminPassword = null, string prometheusEndpointIPAddress = null, bool? isRepairEnabled = null, IEnumerable<CassandraCertificate> clientCertificates = null, IEnumerable<CassandraCertificate> externalGossipCertificates = null, IEnumerable<CassandraCertificate> gossipCertificates = null, IEnumerable<CassandraDataCenterSeedNode> externalSeedNodes = null, IEnumerable<CassandraDataCenterSeedNode> seedNodes = null, int? hoursBetweenBackups = null, bool? isDeallocated = null, bool? isCassandraAuditLoggingEnabled = null)
        {
            clientCertificates ??= new List<CassandraCertificate>();
            externalGossipCertificates ??= new List<CassandraCertificate>();
            gossipCertificates ??= new List<CassandraCertificate>();
            externalSeedNodes ??= new List<CassandraDataCenterSeedNode>();
            seedNodes ??= new List<CassandraDataCenterSeedNode>();

            return new CassandraClusterProperties(provisioningState, restoreFromBackupId, delegatedManagementSubnetId, cassandraVersion, clusterNameOverride, authenticationMethod, initialCassandraAdminPassword, new CassandraDataCenterSeedNode(prometheusEndpointIPAddress), isRepairEnabled, clientCertificates?.ToList(), externalGossipCertificates?.ToList(), gossipCertificates?.ToList(), externalSeedNodes?.ToList(), seedNodes?.ToList(), hoursBetweenBackups, isDeallocated, isCassandraAuditLoggingEnabled);
        }

        /// <summary> Initializes a new instance of CassandraDataCenterSeedNode. </summary>
        /// <param name="ipAddress"> IP address of this seed node. </param>
        /// <returns> A new <see cref="Models.CassandraDataCenterSeedNode"/> instance for mocking. </returns>
        public static CassandraDataCenterSeedNode CassandraDataCenterSeedNode(string ipAddress = null)
        {
            return new CassandraDataCenterSeedNode(ipAddress);
        }

        /// <summary> Initializes a new instance of CassandraCertificate. </summary>
        /// <param name="pem"> PEM formatted public key. </param>
        /// <returns> A new <see cref="Models.CassandraCertificate"/> instance for mocking. </returns>
        public static CassandraCertificate CassandraCertificate(string pem = null)
        {
            return new CassandraCertificate(pem);
        }

        /// <summary> Initializes a new instance of CassandraCommandOutput. </summary>
        /// <param name="commandOutput"> Output of the command. </param>
        /// <returns> A new <see cref="Models.CassandraCommandOutput"/> instance for mocking. </returns>
        public static CassandraCommandOutput CassandraCommandOutput(string commandOutput = null)
        {
            return new CassandraCommandOutput(commandOutput);
        }

        /// <summary> Initializes a new instance of CassandraDataCenterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Properties of a managed Cassandra data center. </param>
        /// <returns> A new <see cref="CosmosDB.CassandraDataCenterData"/> instance for mocking. </returns>
        public static CassandraDataCenterData CassandraDataCenterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CassandraDataCenterProperties properties = null)
        {
            return new CassandraDataCenterData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of CassandraDataCenterProperties. </summary>
        /// <param name="provisioningState"> The status of the resource at the time the operation was called. </param>
        /// <param name="dataCenterLocation"> The region this data center should be created in. </param>
        /// <param name="delegatedSubnetId"> Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must be in the same region specified in &apos;dataCenterLocation&apos; and must be able to route to the subnet specified in the cluster&apos;s &apos;delegatedManagementSubnetId&apos; property. This resource id will be of the form &apos;/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual network&gt;/subnets/&lt;subnet&gt;&apos;. </param>
        /// <param name="nodeCount"> The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method on the cluster. </param>
        /// <param name="seedNodes"> IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property on the cluster, which aggregates the seed nodes from all data centers in the cluster. </param>
        /// <param name="base64EncodedCassandraYamlFragment"> A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center. The fragment should be Base64 encoded, and only a subset of keys are allowed. </param>
        /// <param name="managedDiskCustomerKeyUri"> Key uri to use for encryption of managed disks. Ensure the system assigned identity of the cluster has been assigned appropriate permissions(key get/wrap/unwrap permissions) on the key. </param>
        /// <param name="backupStorageCustomerKeyUri"> Indicates the Key Uri of the customer key to use for encryption of the backup storage account. </param>
        /// <param name="sku"> Virtual Machine SKU used for data centers. Default value is Standard_DS14_v2. </param>
        /// <param name="diskSku"> Disk SKU used for data centers. Default value is P30. </param>
        /// <param name="diskCapacity"> Number of disk used for data centers. Default value is 4. </param>
        /// <param name="doesSupportAvailabilityZone"> If the azure data center has Availability Zone support, apply it to the Virtual Machine ScaleSet that host the cassandra data center virtual machines. </param>
        /// <returns> A new <see cref="Models.CassandraDataCenterProperties"/> instance for mocking. </returns>
        public static CassandraDataCenterProperties CassandraDataCenterProperties(CassandraProvisioningState? provisioningState = null, AzureLocation? dataCenterLocation = null, ResourceIdentifier delegatedSubnetId = null, int? nodeCount = null, IEnumerable<CassandraDataCenterSeedNode> seedNodes = null, string base64EncodedCassandraYamlFragment = null, Uri managedDiskCustomerKeyUri = null, Uri backupStorageCustomerKeyUri = null, string sku = null, string diskSku = null, int? diskCapacity = null, bool? doesSupportAvailabilityZone = null)
        {
            seedNodes ??= new List<CassandraDataCenterSeedNode>();

            return new CassandraDataCenterProperties(provisioningState, dataCenterLocation, delegatedSubnetId, nodeCount, seedNodes?.ToList(), base64EncodedCassandraYamlFragment, managedDiskCustomerKeyUri, backupStorageCustomerKeyUri, sku, diskSku, diskCapacity, doesSupportAvailabilityZone);
        }

        /// <summary> Initializes a new instance of CassandraClusterPublicStatus. </summary>
        /// <param name="etag"></param>
        /// <param name="reaperStatus"></param>
        /// <param name="connectionErrors"> List relevant information about any connection errors to the Datacenters. </param>
        /// <param name="dataCenters"> List of the status of each datacenter in this cluster. </param>
        /// <returns> A new <see cref="Models.CassandraClusterPublicStatus"/> instance for mocking. </returns>
        public static CassandraClusterPublicStatus CassandraClusterPublicStatus(ETag? etag = null, CassandraReaperStatus reaperStatus = null, IEnumerable<CassandraConnectionError> connectionErrors = null, IEnumerable<CassandraClusterPublicStatusDataCentersItem> dataCenters = null)
        {
            connectionErrors ??= new List<CassandraConnectionError>();
            dataCenters ??= new List<CassandraClusterPublicStatusDataCentersItem>();

            return new CassandraClusterPublicStatus(etag, reaperStatus, connectionErrors?.ToList(), dataCenters?.ToList());
        }

        /// <summary> Initializes a new instance of CassandraReaperStatus. </summary>
        /// <param name="isHealthy"></param>
        /// <param name="repairRunIds"> Dictionary of &lt;string&gt;. </param>
        /// <param name="repairSchedules"> Dictionary of &lt;string&gt;. </param>
        /// <returns> A new <see cref="Models.CassandraReaperStatus"/> instance for mocking. </returns>
        public static CassandraReaperStatus CassandraReaperStatus(bool? isHealthy = null, IReadOnlyDictionary<string, string> repairRunIds = null, IReadOnlyDictionary<string, string> repairSchedules = null)
        {
            repairRunIds ??= new Dictionary<string, string>();
            repairSchedules ??= new Dictionary<string, string>();

            return new CassandraReaperStatus(isHealthy, repairRunIds, repairSchedules);
        }

        /// <summary> Initializes a new instance of CassandraConnectionError. </summary>
        /// <param name="connectionState"> The kind of connection error that occurred. </param>
        /// <param name="ipFrom"> The IP of host that originated the failed connection. </param>
        /// <param name="ipTo"> The IP that the connection attempted to reach. </param>
        /// <param name="port"> The TCP port the connection was attempted on. </param>
        /// <param name="exception"> Detailed error message about the failed connection. </param>
        /// <returns> A new <see cref="Models.CassandraConnectionError"/> instance for mocking. </returns>
        public static CassandraConnectionError CassandraConnectionError(CassandraConnectionState? connectionState = null, string ipFrom = null, string ipTo = null, int? port = null, string exception = null)
        {
            return new CassandraConnectionError(connectionState, ipFrom, ipTo, port, exception);
        }

        /// <summary> Initializes a new instance of CassandraClusterPublicStatusDataCentersItem. </summary>
        /// <param name="name"> The name of this Datacenter. </param>
        /// <param name="seedNodes"> A list of all seed nodes in the cluster, managed and unmanaged. </param>
        /// <param name="nodes"></param>
        /// <returns> A new <see cref="Models.CassandraClusterPublicStatusDataCentersItem"/> instance for mocking. </returns>
        public static CassandraClusterPublicStatusDataCentersItem CassandraClusterPublicStatusDataCentersItem(string name = null, IEnumerable<string> seedNodes = null, IEnumerable<CassandraClusterDataCenterNodeItem> nodes = null)
        {
            seedNodes ??= new List<string>();
            nodes ??= new List<CassandraClusterDataCenterNodeItem>();

            return new CassandraClusterPublicStatusDataCentersItem(name, seedNodes?.ToList(), nodes?.ToList());
        }

        /// <summary> Initializes a new instance of CassandraClusterDataCenterNodeItem. </summary>
        /// <param name="address"> The node&apos;s IP address. </param>
        /// <param name="state"> The state of the node in Cassandra ring. </param>
        /// <param name="status"></param>
        /// <param name="load"> The amount of file system data in the data directory (e.g., 47.66 kB), excluding all content in the snapshots subdirectories. Because all SSTable data files are included, any data that is not cleaned up (such as TTL-expired cells or tombstones) is counted. </param>
        /// <param name="tokens"> List of tokens this node covers. </param>
        /// <param name="size"></param>
        /// <param name="hostId"> The network ID of the node. </param>
        /// <param name="rack"> The rack this node is part of. </param>
        /// <param name="timestamp"> The timestamp when these statistics were captured. </param>
        /// <param name="diskUsedKB"> The amount of disk used, in kB, of the directory /var/lib/cassandra. </param>
        /// <param name="diskFreeKB"> The amount of disk free, in kB, of the directory /var/lib/cassandra. </param>
        /// <param name="memoryUsedKB"> Used memory (calculated as total - free - buffers - cache), in kB. </param>
        /// <param name="memoryBuffersAndCachedKB"> Memory used by kernel buffers (Buffers in /proc/meminfo) and page cache and slabs (Cached and SReclaimable in /proc/meminfo), in kB. </param>
        /// <param name="memoryFreeKB"> Unused memory (MemFree and SwapFree in /proc/meminfo), in kB. </param>
        /// <param name="memoryTotalKB"> Total installed memory (MemTotal and SwapTotal in /proc/meminfo), in kB. </param>
        /// <param name="cpuUsage"> A float representing the current system-wide CPU utilization as a percentage. </param>
        /// <returns> A new <see cref="Models.CassandraClusterDataCenterNodeItem"/> instance for mocking. </returns>
        public static CassandraClusterDataCenterNodeItem CassandraClusterDataCenterNodeItem(string address = null, CassandraNodeState? state = null, string status = null, string load = null, IEnumerable<string> tokens = null, int? size = null, Guid? hostId = null, string rack = null, string timestamp = null, long? diskUsedKB = null, long? diskFreeKB = null, long? memoryUsedKB = null, long? memoryBuffersAndCachedKB = null, long? memoryFreeKB = null, long? memoryTotalKB = null, double? cpuUsage = null)
        {
            tokens ??= new List<string>();

            return new CassandraClusterDataCenterNodeItem(address, state, status, load, tokens?.ToList(), size, hostId, rack, timestamp, diskUsedKB, diskFreeKB, memoryUsedKB, memoryBuffersAndCachedKB, memoryFreeKB, memoryTotalKB, cpuUsage);
        }

        /// <summary> Initializes a new instance of CosmosDBPrivateLinkResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The private link resource group id. </param>
        /// <param name="requiredMembers"> The private link resource required member names. </param>
        /// <param name="requiredZoneNames"> The private link resource required zone names. </param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBPrivateLinkResourceData"/> instance for mocking. </returns>
        public static CosmosDBPrivateLinkResourceData CosmosDBPrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new CosmosDBPrivateLinkResourceData(id, name, resourceType, systemData, groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList());
        }

        /// <summary> Initializes a new instance of MongoDBRoleDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="roleName"> A user-friendly name for the Role Definition. Must be unique for the database account. </param>
        /// <param name="roleDefinitionType"> Indicates whether the Role Definition was built-in or user created. </param>
        /// <param name="databaseName"> The database name for which access is being granted for this Role Definition. </param>
        /// <param name="privileges"> A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege. </param>
        /// <param name="roles"> The set of roles inherited by this Role Definition. </param>
        /// <returns> A new <see cref="CosmosDB.MongoDBRoleDefinitionData"/> instance for mocking. </returns>
        public static MongoDBRoleDefinitionData MongoDBRoleDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string roleName = null, MongoDBRoleDefinitionType? roleDefinitionType = null, string databaseName = null, IEnumerable<MongoDBPrivilege> privileges = null, IEnumerable<MongoDBRole> roles = null)
        {
            privileges ??= new List<MongoDBPrivilege>();
            roles ??= new List<MongoDBRole>();

            return new MongoDBRoleDefinitionData(id, name, resourceType, systemData, roleName, roleDefinitionType, databaseName, privileges?.ToList(), roles?.ToList());
        }

        /// <summary> Initializes a new instance of MongoDBPrivilege. </summary>
        /// <param name="resource"> An Azure Cosmos DB Mongo DB Resource. </param>
        /// <param name="actions"> An array of actions that are allowed. </param>
        /// <returns> A new <see cref="Models.MongoDBPrivilege"/> instance for mocking. </returns>
        public static MongoDBPrivilege MongoDBPrivilege(MongoDBPrivilegeResourceInfo resource = null, IEnumerable<string> actions = null)
        {
            actions ??= new List<string>();

            return new MongoDBPrivilege(resource, actions?.ToList());
        }

        /// <summary> Initializes a new instance of MongoDBPrivilegeResourceInfo. </summary>
        /// <param name="dbName"> The database name the role is applied. </param>
        /// <param name="collection"> The collection name the role is applied. </param>
        /// <returns> A new <see cref="Models.MongoDBPrivilegeResourceInfo"/> instance for mocking. </returns>
        public static MongoDBPrivilegeResourceInfo MongoDBPrivilegeResourceInfo(string dbName = null, string collection = null)
        {
            return new MongoDBPrivilegeResourceInfo(dbName, collection);
        }

        /// <summary> Initializes a new instance of MongoDBRole. </summary>
        /// <param name="dbName"> The database name the role is applied. </param>
        /// <param name="role"> The role name. </param>
        /// <returns> A new <see cref="Models.MongoDBRole"/> instance for mocking. </returns>
        public static MongoDBRole MongoDBRole(string dbName = null, string role = null)
        {
            return new MongoDBRole(dbName, role);
        }

        /// <summary> Initializes a new instance of MongoDBUserDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="userName"> The user name for User Definition. </param>
        /// <param name="password"> The password for User Definition. Response does not contain user password. </param>
        /// <param name="databaseName"> The database name for which access is being granted for this User Definition. </param>
        /// <param name="customData"> A custom definition for the USer Definition. </param>
        /// <param name="roles"> The set of roles inherited by the User Definition. </param>
        /// <param name="mechanisms"> The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256. </param>
        /// <returns> A new <see cref="CosmosDB.MongoDBUserDefinitionData"/> instance for mocking. </returns>
        public static MongoDBUserDefinitionData MongoDBUserDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string userName = null, string password = null, string databaseName = null, string customData = null, IEnumerable<MongoDBRole> roles = null, string mechanisms = null)
        {
            roles ??= new List<MongoDBRole>();

            return new MongoDBUserDefinitionData(id, name, resourceType, systemData, userName, password, databaseName, customData, roles?.ToList(), mechanisms);
        }

        /// <summary> Initializes a new instance of CosmosDBSqlRoleDefinitionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="roleName"> A user-friendly name for the Role Definition. Must be unique for the database account. </param>
        /// <param name="roleDefinitionType"> Indicates whether the Role Definition was built-in or user created. </param>
        /// <param name="assignableScopes"> A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist. </param>
        /// <param name="permissions"> The set of operations allowed through this Role Definition. </param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBSqlRoleDefinitionData"/> instance for mocking. </returns>
        public static CosmosDBSqlRoleDefinitionData CosmosDBSqlRoleDefinitionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string roleName = null, CosmosDBSqlRoleDefinitionType? roleDefinitionType = null, IEnumerable<string> assignableScopes = null, IEnumerable<CosmosDBSqlRolePermission> permissions = null)
        {
            assignableScopes ??= new List<string>();
            permissions ??= new List<CosmosDBSqlRolePermission>();

            return new CosmosDBSqlRoleDefinitionData(id, name, resourceType, systemData, roleName, roleDefinitionType, assignableScopes?.ToList(), permissions?.ToList());
        }

        /// <summary> Initializes a new instance of CosmosDBSqlRolePermission. </summary>
        /// <param name="dataActions"> An array of data actions that are allowed. </param>
        /// <param name="notDataActions"> An array of data actions that are denied. </param>
        /// <returns> A new <see cref="Models.CosmosDBSqlRolePermission"/> instance for mocking. </returns>
        public static CosmosDBSqlRolePermission CosmosDBSqlRolePermission(IEnumerable<string> dataActions = null, IEnumerable<string> notDataActions = null)
        {
            dataActions ??= new List<string>();
            notDataActions ??= new List<string>();

            return new CosmosDBSqlRolePermission(dataActions?.ToList(), notDataActions?.ToList());
        }

        /// <summary> Initializes a new instance of CosmosDBSqlRoleAssignmentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="roleDefinitionId"> The unique identifier for the associated Role Definition. </param>
        /// <param name="scope"> The data plane resource path for which access is being granted through this Role Assignment. </param>
        /// <param name="principalId"> The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription. </param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBSqlRoleAssignmentData"/> instance for mocking. </returns>
        public static CosmosDBSqlRoleAssignmentData CosmosDBSqlRoleAssignmentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ResourceIdentifier roleDefinitionId = null, string scope = null, Guid? principalId = null)
        {
            return new CosmosDBSqlRoleAssignmentData(id, name, resourceType, systemData, roleDefinitionId, scope, principalId);
        }

        /// <summary> Initializes a new instance of RestorableCosmosDBAccountData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The location of the resource group to which the resource belongs. </param>
        /// <param name="accountName"> The name of the global database account. </param>
        /// <param name="createdOn"> The creation time of the restorable database account (ISO-8601 format). </param>
        /// <param name="deletedOn"> The time at which the restorable database account has been deleted (ISO-8601 format). </param>
        /// <param name="apiType"> The API type of the restorable database account. </param>
        /// <param name="restorableLocations"> List of regions where the of the database account can be restored from. </param>
        /// <returns> A new <see cref="CosmosDB.RestorableCosmosDBAccountData"/> instance for mocking. </returns>
        public static RestorableCosmosDBAccountData RestorableCosmosDBAccountData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, string accountName = null, DateTimeOffset? createdOn = null, DateTimeOffset? deletedOn = null, CosmosDBApiType? apiType = null, IEnumerable<RestorableLocationResourceInfo> restorableLocations = null)
        {
            restorableLocations ??= new List<RestorableLocationResourceInfo>();

            return new RestorableCosmosDBAccountData(id, name, resourceType, systemData, location, accountName, createdOn, deletedOn, apiType, restorableLocations?.ToList());
        }

        /// <summary> Initializes a new instance of RestorableLocationResourceInfo. </summary>
        /// <param name="locationName"> The location of the regional restorable account. </param>
        /// <param name="regionalDatabaseAccountInstanceId"> The instance id of the regional restorable account. </param>
        /// <param name="createdOn"> The creation time of the regional restorable database account (ISO-8601 format). </param>
        /// <param name="deletedOn"> The time at which the regional restorable database account has been deleted (ISO-8601 format). </param>
        /// <returns> A new <see cref="Models.RestorableLocationResourceInfo"/> instance for mocking. </returns>
        public static RestorableLocationResourceInfo RestorableLocationResourceInfo(AzureLocation? locationName = null, string regionalDatabaseAccountInstanceId = null, DateTimeOffset? createdOn = null, DateTimeOffset? deletedOn = null)
        {
            return new RestorableLocationResourceInfo(locationName, regionalDatabaseAccountInstanceId, createdOn, deletedOn);
        }

        /// <summary> Initializes a new instance of CosmosDBBackupInformation. </summary>
        /// <param name="continuousBackupInformationLatestRestorableTimestamp"> Information about the status of continuous backups. </param>
        /// <returns> A new <see cref="Models.CosmosDBBackupInformation"/> instance for mocking. </returns>
        public static CosmosDBBackupInformation CosmosDBBackupInformation(DateTimeOffset? continuousBackupInformationLatestRestorableTimestamp = null)
        {
            return new CosmosDBBackupInformation(new ContinuousBackupInformation(continuousBackupInformationLatestRestorableTimestamp));
        }

        /// <summary> Initializes a new instance of RestorableSqlDatabase. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resource"> The resource of an Azure Cosmos DB SQL database event. </param>
        /// <returns> A new <see cref="Models.RestorableSqlDatabase"/> instance for mocking. </returns>
        public static RestorableSqlDatabase RestorableSqlDatabase(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ExtendedRestorableSqlDatabaseResourceInfo resource = null)
        {
            return new RestorableSqlDatabase(id, name, resourceType, systemData, resource);
        }

        /// <summary> Initializes a new instance of ExtendedRestorableSqlDatabaseResourceInfo. </summary>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="operationType"> The operation type of this database event. </param>
        /// <param name="eventTimestamp"> The time when this database event happened. </param>
        /// <param name="databaseName"> The name of the SQL database. </param>
        /// <param name="databaseId"> The resource ID of the SQL database. </param>
        /// <param name="database"> Cosmos DB SQL database resource object. </param>
        /// <returns> A new <see cref="Models.ExtendedRestorableSqlDatabaseResourceInfo"/> instance for mocking. </returns>
        public static ExtendedRestorableSqlDatabaseResourceInfo ExtendedRestorableSqlDatabaseResourceInfo(string rid = null, CosmosDBOperationType? operationType = null, string eventTimestamp = null, string databaseName = null, string databaseId = null, RestorableSqlDatabasePropertiesResourceDatabase database = null)
        {
            return new ExtendedRestorableSqlDatabaseResourceInfo(rid, operationType, eventTimestamp, databaseName, databaseId, database);
        }

        /// <summary> Initializes a new instance of RestorableSqlDatabasePropertiesResourceDatabase. </summary>
        /// <param name="databaseName"> Name of the Cosmos DB SQL database. </param>
        /// <param name="colls"> A system generated property that specified the addressable path of the collections resource. </param>
        /// <param name="users"> A system generated property that specifies the addressable path of the users resource. </param>
        /// <param name="self"> A system generated property that specifies the addressable path of the database resource. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="databaseName"/> is null. </exception>
        /// <returns> A new <see cref="Models.RestorableSqlDatabasePropertiesResourceDatabase"/> instance for mocking. </returns>
        public static RestorableSqlDatabasePropertiesResourceDatabase RestorableSqlDatabasePropertiesResourceDatabase(string databaseName = null, string colls = null, string users = null, string self = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            return new RestorableSqlDatabasePropertiesResourceDatabase(databaseName, colls, users, self, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of RestorableSqlContainer. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resource"> The resource of an Azure Cosmos DB SQL container event. </param>
        /// <returns> A new <see cref="Models.RestorableSqlContainer"/> instance for mocking. </returns>
        public static RestorableSqlContainer RestorableSqlContainer(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ExtendedRestorableSqlContainerResourceInfo resource = null)
        {
            return new RestorableSqlContainer(id, name, resourceType, systemData, resource);
        }

        /// <summary> Initializes a new instance of ExtendedRestorableSqlContainerResourceInfo. </summary>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="operationType"> The operation type of this container event. </param>
        /// <param name="eventTimestamp"> The when this container event happened. </param>
        /// <param name="containerName"> The name of this SQL container. </param>
        /// <param name="containerId"> The resource ID of this SQL container. </param>
        /// <param name="container"> Cosmos DB SQL container resource object. </param>
        /// <returns> A new <see cref="Models.ExtendedRestorableSqlContainerResourceInfo"/> instance for mocking. </returns>
        public static ExtendedRestorableSqlContainerResourceInfo ExtendedRestorableSqlContainerResourceInfo(string rid = null, CosmosDBOperationType? operationType = null, string eventTimestamp = null, string containerName = null, string containerId = null, RestorableSqlContainerPropertiesResourceContainer container = null)
        {
            return new ExtendedRestorableSqlContainerResourceInfo(rid, operationType, eventTimestamp, containerName, containerId, container);
        }

        /// <summary> Initializes a new instance of RestorableSqlContainerPropertiesResourceContainer. </summary>
        /// <param name="containerName"> Name of the Cosmos DB SQL container. </param>
        /// <param name="indexingPolicy"> The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container. </param>
        /// <param name="partitionKey"> The configuration of the partition key to be used for partitioning data into multiple partitions. </param>
        /// <param name="defaultTtl"> Default time to live. </param>
        /// <param name="uniqueKeys"> The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. </param>
        /// <param name="conflictResolutionPolicy"> The conflict resolution policy for the container. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        /// <param name="self"> A system generated property that specifies the addressable path of the container resource. </param>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="timestamp"> A system generated property that denotes the last updated timestamp of the resource. </param>
        /// <param name="etag"> A system generated property representing the resource etag required for optimistic concurrency control. </param>
        /// <returns> A new <see cref="Models.RestorableSqlContainerPropertiesResourceContainer"/> instance for mocking. </returns>
        public static RestorableSqlContainerPropertiesResourceContainer RestorableSqlContainerPropertiesResourceContainer(string containerName = null, CosmosDBIndexingPolicy indexingPolicy = null, CosmosDBContainerPartitionKey partitionKey = null, int? defaultTtl = null, IEnumerable<CosmosDBUniqueKey> uniqueKeys = null, ConflictResolutionPolicy conflictResolutionPolicy = null, long? analyticalStorageTtl = null, string self = null, string rid = null, float? timestamp = null, ETag? etag = null)
        {
            uniqueKeys ??= new List<CosmosDBUniqueKey>();

            return new RestorableSqlContainerPropertiesResourceContainer(containerName, indexingPolicy, partitionKey, defaultTtl, new CosmosDBUniqueKeyPolicy(uniqueKeys?.ToList()), conflictResolutionPolicy, analyticalStorageTtl, self, rid, timestamp, etag);
        }

        /// <summary> Initializes a new instance of RestorableSqlResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="databaseName"> The name of the database available for restore. </param>
        /// <param name="collectionNames"> The names of the collections available for restore. </param>
        /// <returns> A new <see cref="Models.RestorableSqlResourceData"/> instance for mocking. </returns>
        public static RestorableSqlResourceData RestorableSqlResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string databaseName = null, IEnumerable<string> collectionNames = null)
        {
            collectionNames ??= new List<string>();

            return new RestorableSqlResourceData(id, name, resourceType, systemData, databaseName, collectionNames?.ToList());
        }

        /// <summary> Initializes a new instance of RestorableMongoDBDatabase. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resource"> The resource of an Azure Cosmos DB MongoDB database event. </param>
        /// <returns> A new <see cref="Models.RestorableMongoDBDatabase"/> instance for mocking. </returns>
        public static RestorableMongoDBDatabase RestorableMongoDBDatabase(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ExtendedRestorableMongoDBDatabaseResourceInfo resource = null)
        {
            return new RestorableMongoDBDatabase(id, name, resourceType, systemData, resource);
        }

        /// <summary> Initializes a new instance of ExtendedRestorableMongoDBDatabaseResourceInfo. </summary>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="operationType"> The operation type of this database event. </param>
        /// <param name="eventTimestamp"> The time when this database event happened. </param>
        /// <param name="databaseName"> The name of this MongoDB database. </param>
        /// <param name="databaseId"> The resource ID of this MongoDB database. </param>
        /// <returns> A new <see cref="Models.ExtendedRestorableMongoDBDatabaseResourceInfo"/> instance for mocking. </returns>
        public static ExtendedRestorableMongoDBDatabaseResourceInfo ExtendedRestorableMongoDBDatabaseResourceInfo(string rid = null, CosmosDBOperationType? operationType = null, string eventTimestamp = null, string databaseName = null, string databaseId = null)
        {
            return new ExtendedRestorableMongoDBDatabaseResourceInfo(rid, operationType, eventTimestamp, databaseName, databaseId);
        }

        /// <summary> Initializes a new instance of RestorableMongoDBCollection. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resource"> The resource of an Azure Cosmos DB MongoDB collection event. </param>
        /// <returns> A new <see cref="Models.RestorableMongoDBCollection"/> instance for mocking. </returns>
        public static RestorableMongoDBCollection RestorableMongoDBCollection(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ExtendedRestorableMongoDBCollectionResourceInfo resource = null)
        {
            return new RestorableMongoDBCollection(id, name, resourceType, systemData, resource);
        }

        /// <summary> Initializes a new instance of ExtendedRestorableMongoDBCollectionResourceInfo. </summary>
        /// <param name="rid"> A system generated property. A unique identifier. </param>
        /// <param name="operationType"> The operation type of this collection event. </param>
        /// <param name="eventTimestamp"> The time when this collection event happened. </param>
        /// <param name="collectionName"> The name of this MongoDB collection. </param>
        /// <param name="collectionId"> The resource ID of this MongoDB collection. </param>
        /// <returns> A new <see cref="Models.ExtendedRestorableMongoDBCollectionResourceInfo"/> instance for mocking. </returns>
        public static ExtendedRestorableMongoDBCollectionResourceInfo ExtendedRestorableMongoDBCollectionResourceInfo(string rid = null, CosmosDBOperationType? operationType = null, string eventTimestamp = null, string collectionName = null, string collectionId = null)
        {
            return new ExtendedRestorableMongoDBCollectionResourceInfo(rid, operationType, eventTimestamp, collectionName, collectionId);
        }

        /// <summary> Initializes a new instance of RestorableMongoDBResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="databaseName"> The name of the database available for restore. </param>
        /// <param name="collectionNames"> The names of the collections available for restore. </param>
        /// <returns> A new <see cref="Models.RestorableMongoDBResourceData"/> instance for mocking. </returns>
        public static RestorableMongoDBResourceData RestorableMongoDBResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string databaseName = null, IEnumerable<string> collectionNames = null)
        {
            collectionNames ??= new List<string>();

            return new RestorableMongoDBResourceData(id, name, resourceType, systemData, databaseName, collectionNames?.ToList());
        }

        /// <summary> Initializes a new instance of CosmosDBServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// Services response resource.
        /// Please note <see cref="CosmosDBServiceProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DataTransferServiceProperties"/>, <see cref="GraphApiComputeServiceProperties"/>, <see cref="MaterializedViewsBuilderServiceProperties"/> and <see cref="SqlDedicatedGatewayServiceProperties"/>.
        /// </param>
        /// <returns> A new <see cref="CosmosDB.CosmosDBServiceData"/> instance for mocking. </returns>
        public static CosmosDBServiceData CosmosDBServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, CosmosDBServiceProperties properties = null)
        {
            return new CosmosDBServiceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of CosmosDBServiceProperties. </summary>
        /// <param name="createdOn"> Time of the last state change (ISO-8601 format). </param>
        /// <param name="instanceSize"> Instance type for the service. </param>
        /// <param name="instanceCount"> Instance count for the service. </param>
        /// <param name="serviceType"> ServiceType for the service. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.CosmosDBServiceProperties"/> instance for mocking. </returns>
        public static CosmosDBServiceProperties CosmosDBServiceProperties(DateTimeOffset? createdOn = null, CosmosDBServiceSize? instanceSize = null, int? instanceCount = null, string serviceType = null, CosmosDBServiceStatus? status = null, IDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new UnknownServiceResourceProperties(createdOn, instanceSize, instanceCount, serviceType, status, additionalProperties);
        }

        /// <summary> Initializes a new instance of PeriodicModeBackupPolicy. </summary>
        /// <param name="migrationState"> The object representing the state of the migration between the backup policies. </param>
        /// <param name="periodicModeProperties"> Configuration values for periodic mode backup. </param>
        /// <returns> A new <see cref="Models.PeriodicModeBackupPolicy"/> instance for mocking. </returns>
        public static PeriodicModeBackupPolicy PeriodicModeBackupPolicy(BackupPolicyMigrationState migrationState = null, PeriodicModeProperties periodicModeProperties = null)
        {
            return new PeriodicModeBackupPolicy("Periodic", migrationState, periodicModeProperties);
        }

        /// <summary> Initializes a new instance of PeriodicModeProperties. </summary>
        /// <param name="backupIntervalInMinutes"> An integer representing the interval in minutes between two backups. </param>
        /// <param name="backupRetentionIntervalInHours"> An integer representing the time (in hours) that each backup is retained. </param>
        /// <param name="backupStorageRedundancy"> Enum to indicate type of backup residency. </param>
        /// <returns> A new <see cref="Models.PeriodicModeProperties"/> instance for mocking. </returns>
        public static PeriodicModeProperties PeriodicModeProperties(int? backupIntervalInMinutes = null, int? backupRetentionIntervalInHours = null, CosmosDBBackupStorageRedundancy? backupStorageRedundancy = null)
        {
            return new PeriodicModeProperties(backupIntervalInMinutes, backupRetentionIntervalInHours, backupStorageRedundancy);
        }

        /// <summary> Initializes a new instance of ContinuousModeBackupPolicy. </summary>
        /// <param name="migrationState"> The object representing the state of the migration between the backup policies. </param>
        /// <returns> A new <see cref="Models.ContinuousModeBackupPolicy"/> instance for mocking. </returns>
        public static ContinuousModeBackupPolicy ContinuousModeBackupPolicy(BackupPolicyMigrationState migrationState = null)
        {
            return new ContinuousModeBackupPolicy("Continuous", migrationState);
        }

        /// <summary> Initializes a new instance of DataTransferServiceProperties. </summary>
        /// <param name="createdOn"> Time of the last state change (ISO-8601 format). </param>
        /// <param name="instanceSize"> Instance type for the service. </param>
        /// <param name="instanceCount"> Instance count for the service. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="locations"> An array that contains all of the locations for the service. </param>
        /// <returns> A new <see cref="Models.DataTransferServiceProperties"/> instance for mocking. </returns>
        public static DataTransferServiceProperties DataTransferServiceProperties(DateTimeOffset? createdOn = null, CosmosDBServiceSize? instanceSize = null, int? instanceCount = null, CosmosDBServiceStatus? status = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<DataTransferRegionalService> locations = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            locations ??= new List<DataTransferRegionalService>();

            return new DataTransferServiceProperties(createdOn, instanceSize, instanceCount, "DataTransfer", status, additionalProperties, locations?.ToList());
        }

        /// <summary> Initializes a new instance of DataTransferRegionalService. </summary>
        /// <param name="name"> The regional service name. </param>
        /// <param name="location"> The location name. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <returns> A new <see cref="Models.DataTransferRegionalService"/> instance for mocking. </returns>
        public static DataTransferRegionalService DataTransferRegionalService(string name = null, AzureLocation? location = null, CosmosDBServiceStatus? status = null)
        {
            return new DataTransferRegionalService(name, location, status);
        }

        /// <summary> Initializes a new instance of CosmosDBRegionalService. </summary>
        /// <param name="name"> The regional service name. </param>
        /// <param name="location"> The location name. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <returns> A new <see cref="Models.CosmosDBRegionalService"/> instance for mocking. </returns>
        public static CosmosDBRegionalService CosmosDBRegionalService(string name = null, AzureLocation? location = null, CosmosDBServiceStatus? status = null)
        {
            return new CosmosDBRegionalService(name, location, status);
        }

        /// <summary> Initializes a new instance of SqlDedicatedGatewayServiceProperties. </summary>
        /// <param name="createdOn"> Time of the last state change (ISO-8601 format). </param>
        /// <param name="instanceSize"> Instance type for the service. </param>
        /// <param name="instanceCount"> Instance count for the service. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="sqlDedicatedGatewayEndpoint"> SqlDedicatedGateway endpoint for the service. </param>
        /// <param name="locations"> An array that contains all of the locations for the service. </param>
        /// <returns> A new <see cref="Models.SqlDedicatedGatewayServiceProperties"/> instance for mocking. </returns>
        public static SqlDedicatedGatewayServiceProperties SqlDedicatedGatewayServiceProperties(DateTimeOffset? createdOn = null, CosmosDBServiceSize? instanceSize = null, int? instanceCount = null, CosmosDBServiceStatus? status = null, IDictionary<string, BinaryData> additionalProperties = null, string sqlDedicatedGatewayEndpoint = null, IEnumerable<SqlDedicatedGatewayRegionalService> locations = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            locations ??= new List<SqlDedicatedGatewayRegionalService>();

            return new SqlDedicatedGatewayServiceProperties(createdOn, instanceSize, instanceCount, "SqlDedicatedGateway", status, additionalProperties, sqlDedicatedGatewayEndpoint, locations?.ToList());
        }

        /// <summary> Initializes a new instance of SqlDedicatedGatewayRegionalService. </summary>
        /// <param name="name"> The regional service name. </param>
        /// <param name="location"> The location name. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <param name="sqlDedicatedGatewayEndpoint"> The regional endpoint for SqlDedicatedGateway. </param>
        /// <returns> A new <see cref="Models.SqlDedicatedGatewayRegionalService"/> instance for mocking. </returns>
        public static SqlDedicatedGatewayRegionalService SqlDedicatedGatewayRegionalService(string name = null, AzureLocation? location = null, CosmosDBServiceStatus? status = null, string sqlDedicatedGatewayEndpoint = null)
        {
            return new SqlDedicatedGatewayRegionalService(name, location, status, sqlDedicatedGatewayEndpoint);
        }

        /// <summary> Initializes a new instance of GraphApiComputeServiceProperties. </summary>
        /// <param name="createdOn"> Time of the last state change (ISO-8601 format). </param>
        /// <param name="instanceSize"> Instance type for the service. </param>
        /// <param name="instanceCount"> Instance count for the service. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="graphApiComputeEndpoint"> GraphAPICompute endpoint for the service. </param>
        /// <param name="locations"> An array that contains all of the locations for the service. </param>
        /// <returns> A new <see cref="Models.GraphApiComputeServiceProperties"/> instance for mocking. </returns>
        public static GraphApiComputeServiceProperties GraphApiComputeServiceProperties(DateTimeOffset? createdOn = null, CosmosDBServiceSize? instanceSize = null, int? instanceCount = null, CosmosDBServiceStatus? status = null, IDictionary<string, BinaryData> additionalProperties = null, string graphApiComputeEndpoint = null, IEnumerable<GraphApiComputeRegionalService> locations = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            locations ??= new List<GraphApiComputeRegionalService>();

            return new GraphApiComputeServiceProperties(createdOn, instanceSize, instanceCount, "GraphAPICompute", status, additionalProperties, graphApiComputeEndpoint, locations?.ToList());
        }

        /// <summary> Initializes a new instance of GraphApiComputeRegionalService. </summary>
        /// <param name="name"> The regional service name. </param>
        /// <param name="location"> The location name. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <param name="graphApiComputeEndpoint"> The regional endpoint for GraphAPICompute. </param>
        /// <returns> A new <see cref="Models.GraphApiComputeRegionalService"/> instance for mocking. </returns>
        public static GraphApiComputeRegionalService GraphApiComputeRegionalService(string name = null, AzureLocation? location = null, CosmosDBServiceStatus? status = null, string graphApiComputeEndpoint = null)
        {
            return new GraphApiComputeRegionalService(name, location, status, graphApiComputeEndpoint);
        }

        /// <summary> Initializes a new instance of MaterializedViewsBuilderServiceProperties. </summary>
        /// <param name="createdOn"> Time of the last state change (ISO-8601 format). </param>
        /// <param name="instanceSize"> Instance type for the service. </param>
        /// <param name="instanceCount"> Instance count for the service. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <param name="locations"> An array that contains all of the locations for the service. </param>
        /// <returns> A new <see cref="Models.MaterializedViewsBuilderServiceProperties"/> instance for mocking. </returns>
        public static MaterializedViewsBuilderServiceProperties MaterializedViewsBuilderServiceProperties(DateTimeOffset? createdOn = null, CosmosDBServiceSize? instanceSize = null, int? instanceCount = null, CosmosDBServiceStatus? status = null, IDictionary<string, BinaryData> additionalProperties = null, IEnumerable<MaterializedViewsBuilderRegionalService> locations = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();
            locations ??= new List<MaterializedViewsBuilderRegionalService>();

            return new MaterializedViewsBuilderServiceProperties(createdOn, instanceSize, instanceCount, "MaterializedViewsBuilder", status, additionalProperties, locations?.ToList());
        }

        /// <summary> Initializes a new instance of MaterializedViewsBuilderRegionalService. </summary>
        /// <param name="name"> The regional service name. </param>
        /// <param name="location"> The location name. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <returns> A new <see cref="Models.MaterializedViewsBuilderRegionalService"/> instance for mocking. </returns>
        public static MaterializedViewsBuilderRegionalService MaterializedViewsBuilderRegionalService(string name = null, AzureLocation? location = null, CosmosDBServiceStatus? status = null)
        {
            return new MaterializedViewsBuilderRegionalService(name, location, status);
        }
    }
}
