// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.CosmosDB.Models;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary> TODO. </summary>
    public abstract partial class ThroughputSettingResource : ArmResource
    {
        internal static ThroughputSettingResource GetResource(ArmClient client, ThroughputSettingData data)
        {
            if (IsCosmosDBSqlDatabaseThroughputSettingResource(data.Id))
            {
                return new CosmosDBSqlDatabaseThroughputSettingResource(client, data);
            }
            if (IsCosmosDBSqlContainerThroughputSettingResource(data.Id))
            {
                return new CosmosDBSqlContainerThroughputSettingResource(client, data);
            }
            if (IsMongoDBDatabaseThroughputSettingResource(data.Id))
            {
                return new MongoDBDatabaseThroughputSettingResource(client, data);
            }
            if (IsMongoDBCollectionThroughputSettingResource(data.Id))
            {
                return new MongoDBCollectionThroughputSettingResource(client, data);
            }
            if (IsCosmosTableThroughputSettingResource(data.Id))
            {
                return new CosmosTableThroughputSettingResource(client, data);
            }
            if (IsCassandraKeyspaceThroughputSettingResource(data.Id))
            {
                return new CassandraKeyspaceThroughputSettingResource(client, data);
            }
            if (IsCassandraTableThroughputSettingResource(data.Id))
            {
                return new CassandraTableThroughputSettingResource(client, data);
            }
            if (IsGremlinDatabaseThroughputSettingResource(data.Id))
            {
                return new GremlinDatabaseThroughputSettingResource(client, data);
            }
            if (IsGremlinGraphThroughputSettingResource(data.Id))
            {
                return new GremlinGraphThroughputSettingResource(client, data);
            }
            // TODO -- should we throw or return an UnknownResource?
            throw new InvalidOperationException();
        }

        internal static bool IsCosmosDBSqlDatabaseThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != CosmosDBSqlDatabaseThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        internal static bool IsCosmosDBSqlContainerThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != CosmosDBSqlContainerThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        internal static bool IsMongoDBDatabaseThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != MongoDBDatabaseThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        internal static bool IsMongoDBCollectionThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != MongoDBCollectionThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        internal static bool IsCosmosTableThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != CosmosTableThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        internal static bool IsCassandraKeyspaceThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != CassandraKeyspaceThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        internal static bool IsCassandraTableThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != CassandraTableThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        internal static bool IsGremlinDatabaseThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != GremlinDatabaseThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        internal static bool IsGremlinGraphThroughputSettingResource(ResourceIdentifier id)
        {
            // checking the resource type
            if (id.ResourceType != GremlinGraphThroughputSettingResource.ResourceType)
            {
                return false;
            }
            // checking the resource scope
            if (id.Parent.Parent.Parent.Parent.ResourceType != "Microsoft.Resources/resourceGroups")
            {
                return false;
            }
            // checking the resource name
            if (id.Name != "default")
            {
                return false;
            }
            return true;
        }

        private readonly ThroughputSettingData _data;

        /// <summary> Initializes a new instance of the <see cref="ThroughputSettingResource"/> class for mocking. </summary>
        protected ThroughputSettingResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "ThroughputSettingResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="data"> The resource that is the target of operations. </param>
        internal ThroughputSettingResource(ArmClient client, ThroughputSettingData data) : this(client, data.Id)
        {
            HasData = true;
            _data = data;
        }

        /// <summary> Initializes a new instance of the <see cref="ThroughputSettingResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal ThroughputSettingResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ThroughputSettingData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        protected abstract Task<Response<ThroughputSettingResource>> GetCoreAsync(CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public async Task<Response<ThroughputSettingResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            return await GetCoreAsync(cancellationToken);
        }

        protected abstract Response<ThroughputSettingResource> GetCore(CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        [ForwardsClientCalls]
        public Response<ThroughputSettingResource> Get(CancellationToken cancellationToken = default)
        {
            return GetCore(cancellationToken);
        }

        protected abstract Task<ArmOperation<ThroughputSettingResource>> CreateOrUpdateCoreAsync(WaitUntil waitUntil, ThroughputSettingsUpdateData data, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The parameters to provide for the RUs per second of the current SQL database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        [ForwardsClientCalls]
        public async Task<ArmOperation<ThroughputSettingResource>> CreateOrUpdateAsync(WaitUntil waitUntil, ThroughputSettingsUpdateData data, CancellationToken cancellationToken = default)
        {
            return await CreateOrUpdateCoreAsync(waitUntil, data, cancellationToken);
        }

        protected abstract ArmOperation<ThroughputSettingResource> CreateOrUpdateCore(WaitUntil waitUntil, ThroughputSettingsUpdateData data, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="data"> The parameters to provide for the RUs per second of the current SQL database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="data"/> is null. </exception>
        [ForwardsClientCalls]
        public ArmOperation<ThroughputSettingResource> CreateOrUpdate(WaitUntil waitUntil, ThroughputSettingsUpdateData data, CancellationToken cancellationToken = default)
        {
            return CreateOrUpdateCore(waitUntil, data, cancellationToken);
        }

        protected abstract Task<Response<ThroughputSettingResource>> AddTagCoreAsync(string key, string value, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        [ForwardsClientCalls]
        public async Task<Response<ThroughputSettingResource>> AddTagAsync(string key, string value, CancellationToken cancellationToken = default)
        {
            return await AddTagCoreAsync(key, value, cancellationToken);
        }

        protected abstract Response<ThroughputSettingResource> AddTagCore(string key, string value, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="value"> The value for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> or <paramref name="value"/> is null. </exception>
        [ForwardsClientCalls]
        public Response<ThroughputSettingResource> AddTag(string key, string value, CancellationToken cancellationToken = default)
        {
            return AddTagCore(key, value, cancellationToken);
        }

        protected abstract Task<Response<ThroughputSettingResource>> SetTagsCoreAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        [ForwardsClientCalls]
        public async Task<Response<ThroughputSettingResource>> SetTagsAsync(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            return await SetTagsCoreAsync(tags, cancellationToken);
        }

        protected abstract Response<ThroughputSettingResource> SetTagsCore(IDictionary<string, string> tags, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="tags"> The set of tags to use as replacement. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tags"/> is null. </exception>
        [ForwardsClientCalls]
        public Response<ThroughputSettingResource> SetTags(IDictionary<string, string> tags, CancellationToken cancellationToken = default)
        {
            return SetTagsCore(tags, cancellationToken);
        }

        protected abstract Task<Response<ThroughputSettingResource>> RemoveTagCoreAsync(string key, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        [ForwardsClientCalls]
        public async Task<Response<ThroughputSettingResource>> RemoveTagAsync(string key, CancellationToken cancellationToken = default)
        {
            return await RemoveTagCoreAsync(key, cancellationToken);
        }

        protected abstract Response<ThroughputSettingResource> RemoveTagCore(string key, CancellationToken cancellationToken = default);

        /// <summary> placeholder. </summary>
        /// <param name="key"> The key for the tag. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="key"/> is null. </exception>
        [ForwardsClientCalls]
        public Response<ThroughputSettingResource> RemoveTag(string key, CancellationToken cancellationToken = default)
        {
            return RemoveTagCore(key, cancellationToken);
        }
    }
}
