// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class CassandraClusterDataCenterNodeItem
    {
        internal static CassandraClusterDataCenterNodeItem DeserializeCassandraClusterDataCenterNodeItem(JsonElement element)
        {
            Optional<string> address = default;
            Optional<CassandraNodeState> state = default;
            Optional<string> status = default;
            Optional<string> load = default;
            Optional<IReadOnlyList<string>> tokens = default;
            Optional<int> size = default;
            Optional<string> hostId = default;
            Optional<string> rack = default;
            Optional<string> timestamp = default;
            Optional<long> diskUsedKB = default;
            Optional<long> diskFreeKB = default;
            Optional<long> memoryUsedKB = default;
            Optional<long> memoryBuffersAndCachedKB = default;
            Optional<long> memoryFreeKB = default;
            Optional<long> memoryTotalKB = default;
            Optional<double> cpuUsage = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("address"))
                {
                    address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    state = new CassandraNodeState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("load"))
                {
                    load = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tokens"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    tokens = array;
                    continue;
                }
                if (property.NameEquals("size"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    size = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("hostID"))
                {
                    hostId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rack"))
                {
                    rack = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"))
                {
                    timestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskUsedKB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diskUsedKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("diskFreeKB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diskFreeKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryUsedKB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    memoryUsedKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryBuffersAndCachedKB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    memoryBuffersAndCachedKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryFreeKB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    memoryFreeKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryTotalKB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    memoryTotalKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("cpuUsage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cpuUsage = property.Value.GetDouble();
                    continue;
                }
            }
            return new CassandraClusterDataCenterNodeItem(address.Value, Optional.ToNullable(state), status.Value, load.Value, Optional.ToList(tokens), Optional.ToNullable(size), hostId.Value, rack.Value, timestamp.Value, Optional.ToNullable(diskUsedKB), Optional.ToNullable(diskFreeKB), Optional.ToNullable(memoryUsedKB), Optional.ToNullable(memoryBuffersAndCachedKB), Optional.ToNullable(memoryFreeKB), Optional.ToNullable(memoryTotalKB), Optional.ToNullable(cpuUsage));
        }
    }
}
