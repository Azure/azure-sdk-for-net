// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class CassandraClusterDataCenterNodeItem
    {
        internal static CassandraClusterDataCenterNodeItem DeserializeCassandraClusterDataCenterNodeItem(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> address = default;
            Optional<CassandraNodeState> state = default;
            Optional<string> status = default;
            Optional<string> cassandraProcessStatus = default;
            Optional<string> load = default;
            Optional<IReadOnlyList<string>> tokens = default;
            Optional<int> size = default;
            Optional<Guid> hostId = default;
            Optional<string> rack = default;
            Optional<string> timestamp = default;
            Optional<long> diskUsedKB = default;
            Optional<long> diskFreeKB = default;
            Optional<long> memoryUsedKB = default;
            Optional<long> memoryBuffersAndCachedKB = default;
            Optional<long> memoryFreeKB = default;
            Optional<long> memoryTotalKB = default;
            Optional<double> cpuUsage = default;
            Optional<bool> isLatestModel = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("address"u8))
                {
                    address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new CassandraNodeState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cassandraProcessStatus"u8))
                {
                    cassandraProcessStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("load"u8))
                {
                    load = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tokens"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    tokens = array;
                    continue;
                }
                if (property.NameEquals("size"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    size = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("hostID"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hostId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("rack"u8))
                {
                    rack = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskUsedKB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskUsedKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("diskFreeKB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskFreeKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryUsedKB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryUsedKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryBuffersAndCachedKB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryBuffersAndCachedKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryFreeKB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryFreeKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryTotalKB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    memoryTotalKB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("cpuUsage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuUsage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("isLatestModel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isLatestModel = property.Value.GetBoolean();
                    continue;
                }
            }
            return new CassandraClusterDataCenterNodeItem(address.Value, Optional.ToNullable(state), status.Value, cassandraProcessStatus.Value, load.Value, Optional.ToList(tokens), Optional.ToNullable(size), Optional.ToNullable(hostId), rack.Value, timestamp.Value, Optional.ToNullable(diskUsedKB), Optional.ToNullable(diskFreeKB), Optional.ToNullable(memoryUsedKB), Optional.ToNullable(memoryBuffersAndCachedKB), Optional.ToNullable(memoryFreeKB), Optional.ToNullable(memoryTotalKB), Optional.ToNullable(cpuUsage), Optional.ToNullable(isLatestModel));
        }
    }
}
