// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> The operation the trigger is associated with. </summary>
    public readonly partial struct TriggerOperation : IEquatable<TriggerOperation>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TriggerOperation"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TriggerOperation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllValue = "All";
        private const string CreateValue = "Create";
        private const string UpdateValue = "Update";
        private const string DeleteValue = "Delete";
        private const string ReplaceValue = "Replace";

        /// <summary> All. </summary>
        public static TriggerOperation All { get; } = new TriggerOperation(AllValue);
        /// <summary> Create. </summary>
        public static TriggerOperation Create { get; } = new TriggerOperation(CreateValue);
        /// <summary> Update. </summary>
        public static TriggerOperation Update { get; } = new TriggerOperation(UpdateValue);
        /// <summary> Delete. </summary>
        public static TriggerOperation Delete { get; } = new TriggerOperation(DeleteValue);
        /// <summary> Replace. </summary>
        public static TriggerOperation Replace { get; } = new TriggerOperation(ReplaceValue);
        /// <summary> Determines if two <see cref="TriggerOperation"/> values are the same. </summary>
        public static bool operator ==(TriggerOperation left, TriggerOperation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TriggerOperation"/> values are not the same. </summary>
        public static bool operator !=(TriggerOperation left, TriggerOperation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TriggerOperation"/>. </summary>
        public static implicit operator TriggerOperation(string value) => new TriggerOperation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TriggerOperation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TriggerOperation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
