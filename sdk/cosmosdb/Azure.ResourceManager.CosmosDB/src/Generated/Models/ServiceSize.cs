// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Instance type for the service. </summary>
    public readonly partial struct ServiceSize : IEquatable<ServiceSize>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServiceSize"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServiceSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CosmosD4SValue = "Cosmos.D4s";
        private const string CosmosD8SValue = "Cosmos.D8s";
        private const string CosmosD16SValue = "Cosmos.D16s";

        /// <summary> Cosmos.D4s. </summary>
        public static ServiceSize CosmosD4S { get; } = new ServiceSize(CosmosD4SValue);
        /// <summary> Cosmos.D8s. </summary>
        public static ServiceSize CosmosD8S { get; } = new ServiceSize(CosmosD8SValue);
        /// <summary> Cosmos.D16s. </summary>
        public static ServiceSize CosmosD16S { get; } = new ServiceSize(CosmosD16SValue);
        /// <summary> Determines if two <see cref="ServiceSize"/> values are the same. </summary>
        public static bool operator ==(ServiceSize left, ServiceSize right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServiceSize"/> values are not the same. </summary>
        public static bool operator !=(ServiceSize left, ServiceSize right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ServiceSize"/>. </summary>
        public static implicit operator ServiceSize(string value) => new ServiceSize(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServiceSize other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServiceSize other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
