// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Cosmos DB Cassandra table resource object. </summary>
    public partial class CassandraTableResource
    {
        /// <summary> Initializes a new instance of CassandraTableResource. </summary>
        /// <param name="id"> Name of the Cosmos DB Cassandra table. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public CassandraTableResource(string id)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            Id = id;
        }

        /// <summary> Initializes a new instance of CassandraTableResource. </summary>
        /// <param name="id"> Name of the Cosmos DB Cassandra table. </param>
        /// <param name="defaultTtl"> Time to live of the Cosmos DB Cassandra table. </param>
        /// <param name="schema"> Schema of the Cosmos DB Cassandra table. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        internal CassandraTableResource(string id, int? defaultTtl, CassandraSchema schema, int? analyticalStorageTtl)
        {
            Id = id;
            DefaultTtl = defaultTtl;
            Schema = schema;
            AnalyticalStorageTtl = analyticalStorageTtl;
        }

        /// <summary> Name of the Cosmos DB Cassandra table. </summary>
        public string Id { get; set; }
        /// <summary> Time to live of the Cosmos DB Cassandra table. </summary>
        public int? DefaultTtl { get; set; }
        /// <summary> Schema of the Cosmos DB Cassandra table. </summary>
        public CassandraSchema Schema { get; set; }
        /// <summary> Analytical TTL. </summary>
        public int? AnalyticalStorageTtl { get; set; }
    }
}
