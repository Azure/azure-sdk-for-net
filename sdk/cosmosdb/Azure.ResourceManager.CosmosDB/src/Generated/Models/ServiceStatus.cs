// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Describes the status of a service. </summary>
    public readonly partial struct ServiceStatus : IEquatable<ServiceStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServiceStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServiceStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatingValue = "Creating";
        private const string RunningValue = "Running";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string ErrorValue = "Error";
        private const string StoppedValue = "Stopped";

        /// <summary> Creating. </summary>
        public static ServiceStatus Creating { get; } = new ServiceStatus(CreatingValue);
        /// <summary> Running. </summary>
        public static ServiceStatus Running { get; } = new ServiceStatus(RunningValue);
        /// <summary> Updating. </summary>
        public static ServiceStatus Updating { get; } = new ServiceStatus(UpdatingValue);
        /// <summary> Deleting. </summary>
        public static ServiceStatus Deleting { get; } = new ServiceStatus(DeletingValue);
        /// <summary> Error. </summary>
        public static ServiceStatus Error { get; } = new ServiceStatus(ErrorValue);
        /// <summary> Stopped. </summary>
        public static ServiceStatus Stopped { get; } = new ServiceStatus(StoppedValue);
        /// <summary> Determines if two <see cref="ServiceStatus"/> values are the same. </summary>
        public static bool operator ==(ServiceStatus left, ServiceStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServiceStatus"/> values are not the same. </summary>
        public static bool operator !=(ServiceStatus left, ServiceStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ServiceStatus"/>. </summary>
        public static implicit operator ServiceStatus(string value) => new ServiceStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServiceStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServiceStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
