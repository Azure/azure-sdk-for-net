// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Represents a vector embedding. A vector embedding is used to define a vector field in the documents. </summary>
    public partial class CosmosDBVectorEmbedding
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CosmosDBVectorEmbedding"/>. </summary>
        /// <param name="path"> The path to the vector field in the document. </param>
        /// <param name="dataType"> Indicates the data type of vector. </param>
        /// <param name="distanceFunction"> The distance function to use for distance calculation in between vectors. </param>
        /// <param name="dimensions"> The number of dimensions in the vector. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="path"/> is null. </exception>
        public CosmosDBVectorEmbedding(string path, CosmosDBVectorDataType dataType, VectorDistanceFunction distanceFunction, int dimensions)
        {
            Argument.AssertNotNull(path, nameof(path));

            Path = path;
            DataType = dataType;
            DistanceFunction = distanceFunction;
            Dimensions = dimensions;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBVectorEmbedding"/>. </summary>
        /// <param name="path"> The path to the vector field in the document. </param>
        /// <param name="dataType"> Indicates the data type of vector. </param>
        /// <param name="distanceFunction"> The distance function to use for distance calculation in between vectors. </param>
        /// <param name="dimensions"> The number of dimensions in the vector. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CosmosDBVectorEmbedding(string path, CosmosDBVectorDataType dataType, VectorDistanceFunction distanceFunction, int dimensions, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Path = path;
            DataType = dataType;
            DistanceFunction = distanceFunction;
            Dimensions = dimensions;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBVectorEmbedding"/> for deserialization. </summary>
        internal CosmosDBVectorEmbedding()
        {
        }

        /// <summary> The path to the vector field in the document. </summary>
        [WirePath("path")]
        public string Path { get; set; }
        /// <summary> Indicates the data type of vector. </summary>
        [WirePath("dataType")]
        public CosmosDBVectorDataType DataType { get; set; }
        /// <summary> The distance function to use for distance calculation in between vectors. </summary>
        [WirePath("distanceFunction")]
        public VectorDistanceFunction DistanceFunction { get; set; }
        /// <summary> The number of dimensions in the vector. </summary>
        [WirePath("dimensions")]
        public int Dimensions { get; set; }
    }
}
