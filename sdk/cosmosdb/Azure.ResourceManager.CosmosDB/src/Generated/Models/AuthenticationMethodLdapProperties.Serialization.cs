// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class AuthenticationMethodLdapProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ServerHostname))
            {
                writer.WritePropertyName("serverHostname"u8);
                writer.WriteStringValue(ServerHostname);
            }
            if (Optional.IsDefined(ServerPort))
            {
                writer.WritePropertyName("serverPort"u8);
                writer.WriteNumberValue(ServerPort.Value);
            }
            if (Optional.IsDefined(ServiceUserDistinguishedName))
            {
                writer.WritePropertyName("serviceUserDistinguishedName"u8);
                writer.WriteStringValue(ServiceUserDistinguishedName);
            }
            if (Optional.IsDefined(ServiceUserPassword))
            {
                writer.WritePropertyName("serviceUserPassword"u8);
                writer.WriteStringValue(ServiceUserPassword);
            }
            if (Optional.IsDefined(SearchBaseDistinguishedName))
            {
                writer.WritePropertyName("searchBaseDistinguishedName"u8);
                writer.WriteStringValue(SearchBaseDistinguishedName);
            }
            if (Optional.IsDefined(SearchFilterTemplate))
            {
                writer.WritePropertyName("searchFilterTemplate"u8);
                writer.WriteStringValue(SearchFilterTemplate);
            }
            if (Optional.IsCollectionDefined(ServerCertificates))
            {
                writer.WritePropertyName("serverCertificates"u8);
                writer.WriteStartArray();
                foreach (var item in ServerCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ConnectionTimeoutInMs))
            {
                writer.WritePropertyName("connectionTimeoutInMs"u8);
                writer.WriteNumberValue(ConnectionTimeoutInMs.Value);
            }
            writer.WriteEndObject();
        }

        internal static AuthenticationMethodLdapProperties DeserializeAuthenticationMethodLdapProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> serverHostname = default;
            Optional<int> serverPort = default;
            Optional<string> serviceUserDistinguishedName = default;
            Optional<string> serviceUserPassword = default;
            Optional<string> searchBaseDistinguishedName = default;
            Optional<string> searchFilterTemplate = default;
            Optional<IList<CassandraCertificate>> serverCertificates = default;
            Optional<int> connectionTimeoutInMs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("serverHostname"u8))
                {
                    serverHostname = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serverPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("serviceUserDistinguishedName"u8))
                {
                    serviceUserDistinguishedName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceUserPassword"u8))
                {
                    serviceUserPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchBaseDistinguishedName"u8))
                {
                    searchBaseDistinguishedName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("searchFilterTemplate"u8))
                {
                    searchFilterTemplate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraCertificate> array = new List<CassandraCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraCertificate.DeserializeCassandraCertificate(item));
                    }
                    serverCertificates = array;
                    continue;
                }
                if (property.NameEquals("connectionTimeoutInMs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    connectionTimeoutInMs = property.Value.GetInt32();
                    continue;
                }
            }
            return new AuthenticationMethodLdapProperties(serverHostname.Value, Optional.ToNullable(serverPort), serviceUserDistinguishedName.Value, serviceUserPassword.Value, searchBaseDistinguishedName.Value, searchFilterTemplate.Value, Optional.ToList(serverCertificates), Optional.ToNullable(connectionTimeoutInMs));
        }
    }
}
