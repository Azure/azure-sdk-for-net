// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary>
    /// Services response resource.
    /// Please note <see cref="ServiceResourceProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
    /// The available derived classes include <see cref="DataTransferServiceResourceProperties"/>, <see cref="GraphAPIComputeServiceResourceProperties"/>, <see cref="MaterializedViewsBuilderServiceResourceProperties"/> and <see cref="SqlDedicatedGatewayServiceResourceProperties"/>.
    /// </summary>
    public partial class ServiceResourceProperties
    {
        /// <summary> Initializes a new instance of ServiceResourceProperties. </summary>
        public ServiceResourceProperties()
        {
            AdditionalProperties = new ChangeTrackingDictionary<string, BinaryData>();
        }

        /// <summary> Initializes a new instance of ServiceResourceProperties. </summary>
        /// <param name="createdOn"> Time of the last state change (ISO-8601 format). </param>
        /// <param name="instanceSize"> Instance type for the service. </param>
        /// <param name="instanceCount"> Instance count for the service. </param>
        /// <param name="serviceType"> ServiceType for the service. </param>
        /// <param name="status"> Describes the status of a service. </param>
        /// <param name="additionalProperties"> Additional Properties. </param>
        internal ServiceResourceProperties(DateTimeOffset? createdOn, ServiceSize? instanceSize, int? instanceCount, ServiceType serviceType, ServiceStatus? status, IDictionary<string, BinaryData> additionalProperties)
        {
            CreatedOn = createdOn;
            InstanceSize = instanceSize;
            InstanceCount = instanceCount;
            ServiceType = serviceType;
            Status = status;
            AdditionalProperties = additionalProperties;
        }

        /// <summary> Time of the last state change (ISO-8601 format). </summary>
        public DateTimeOffset? CreatedOn { get; }
        /// <summary> Instance type for the service. </summary>
        public ServiceSize? InstanceSize { get; set; }
        /// <summary> Instance count for the service. </summary>
        public int? InstanceCount { get; set; }
        /// <summary> ServiceType for the service. </summary>
        internal ServiceType ServiceType { get; set; }
        /// <summary> Describes the status of a service. </summary>
        public ServiceStatus? Status { get; }
        /// <summary> Additional Properties. </summary>
        public IDictionary<string, BinaryData> AdditionalProperties { get; }
    }
}
