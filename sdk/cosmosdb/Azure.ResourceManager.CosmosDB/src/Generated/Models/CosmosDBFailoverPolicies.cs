// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> The list of new failover policies for the failover priority change. </summary>
    public partial class CosmosDBFailoverPolicies
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CosmosDBFailoverPolicies"/>. </summary>
        /// <param name="failoverPolicies"> List of failover policies. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="failoverPolicies"/> is null. </exception>
        public CosmosDBFailoverPolicies(IEnumerable<CosmosDBFailoverPolicy> failoverPolicies)
        {
            Argument.AssertNotNull(failoverPolicies, nameof(failoverPolicies));

            FailoverPolicies = failoverPolicies.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBFailoverPolicies"/>. </summary>
        /// <param name="failoverPolicies"> List of failover policies. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CosmosDBFailoverPolicies(IList<CosmosDBFailoverPolicy> failoverPolicies, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            FailoverPolicies = failoverPolicies;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBFailoverPolicies"/> for deserialization. </summary>
        internal CosmosDBFailoverPolicies()
        {
        }

        /// <summary> List of failover policies. </summary>
        public IList<CosmosDBFailoverPolicy> FailoverPolicies { get; }
    }
}
