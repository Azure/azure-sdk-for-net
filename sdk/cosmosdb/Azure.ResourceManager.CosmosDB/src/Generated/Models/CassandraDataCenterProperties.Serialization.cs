// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class CassandraDataCenterProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState");
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(DataCenterLocation))
            {
                writer.WritePropertyName("dataCenterLocation");
                writer.WriteStringValue(DataCenterLocation.Value);
            }
            if (Optional.IsDefined(DelegatedSubnetId))
            {
                writer.WritePropertyName("delegatedSubnetId");
                writer.WriteStringValue(DelegatedSubnetId);
            }
            if (Optional.IsDefined(NodeCount))
            {
                writer.WritePropertyName("nodeCount");
                writer.WriteNumberValue(NodeCount.Value);
            }
            if (Optional.IsDefined(Base64EncodedCassandraYamlFragment))
            {
                writer.WritePropertyName("base64EncodedCassandraYamlFragment");
                writer.WriteStringValue(Base64EncodedCassandraYamlFragment);
            }
            if (Optional.IsDefined(ManagedDiskCustomerKeyUri))
            {
                writer.WritePropertyName("managedDiskCustomerKeyUri");
                writer.WriteStringValue(ManagedDiskCustomerKeyUri.AbsoluteUri);
            }
            if (Optional.IsDefined(BackupStorageCustomerKeyUri))
            {
                writer.WritePropertyName("backupStorageCustomerKeyUri");
                writer.WriteStringValue(BackupStorageCustomerKeyUri.AbsoluteUri);
            }
            if (Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku");
                writer.WriteStringValue(Sku);
            }
            if (Optional.IsDefined(DiskSku))
            {
                writer.WritePropertyName("diskSku");
                writer.WriteStringValue(DiskSku);
            }
            if (Optional.IsDefined(DiskCapacity))
            {
                writer.WritePropertyName("diskCapacity");
                writer.WriteNumberValue(DiskCapacity.Value);
            }
            if (Optional.IsDefined(DoesSupportAvailabilityZone))
            {
                writer.WritePropertyName("availabilityZone");
                writer.WriteBooleanValue(DoesSupportAvailabilityZone.Value);
            }
            writer.WriteEndObject();
        }

        internal static CassandraDataCenterProperties DeserializeCassandraDataCenterProperties(JsonElement element)
        {
            Optional<CassandraProvisioningState> provisioningState = default;
            Optional<AzureLocation> dataCenterLocation = default;
            Optional<ResourceIdentifier> delegatedSubnetId = default;
            Optional<int> nodeCount = default;
            Optional<IReadOnlyList<CassandraDataCenterSeedNode>> seedNodes = default;
            Optional<string> base64EncodedCassandraYamlFragment = default;
            Optional<Uri> managedDiskCustomerKeyUri = default;
            Optional<Uri> backupStorageCustomerKeyUri = default;
            Optional<string> sku = default;
            Optional<string> diskSku = default;
            Optional<int> diskCapacity = default;
            Optional<bool> availabilityZone = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    provisioningState = new CassandraProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dataCenterLocation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dataCenterLocation = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("delegatedSubnetId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    delegatedSubnetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("nodeCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nodeCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("seedNodes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CassandraDataCenterSeedNode> array = new List<CassandraDataCenterSeedNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraDataCenterSeedNode.DeserializeCassandraDataCenterSeedNode(item));
                    }
                    seedNodes = array;
                    continue;
                }
                if (property.NameEquals("base64EncodedCassandraYamlFragment"))
                {
                    base64EncodedCassandraYamlFragment = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managedDiskCustomerKeyUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        managedDiskCustomerKeyUri = null;
                        continue;
                    }
                    managedDiskCustomerKeyUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("backupStorageCustomerKeyUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        backupStorageCustomerKeyUri = null;
                        continue;
                    }
                    backupStorageCustomerKeyUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sku"))
                {
                    sku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskSku"))
                {
                    diskSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskCapacity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diskCapacity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("availabilityZone"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    availabilityZone = property.Value.GetBoolean();
                    continue;
                }
            }
            return new CassandraDataCenterProperties(Optional.ToNullable(provisioningState), Optional.ToNullable(dataCenterLocation), delegatedSubnetId.Value, Optional.ToNullable(nodeCount), Optional.ToList(seedNodes), base64EncodedCassandraYamlFragment.Value, managedDiskCustomerKeyUri.Value, backupStorageCustomerKeyUri.Value, sku.Value, diskSku.Value, Optional.ToNullable(diskCapacity), Optional.ToNullable(availabilityZone));
        }
    }
}
