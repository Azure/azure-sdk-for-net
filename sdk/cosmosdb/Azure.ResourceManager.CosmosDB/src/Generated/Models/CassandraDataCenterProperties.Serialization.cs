// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class CassandraDataCenterProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Core.Optional.IsDefined(DataCenterLocation))
            {
                writer.WritePropertyName("dataCenterLocation"u8);
                writer.WriteStringValue(DataCenterLocation.Value);
            }
            if (Core.Optional.IsDefined(DelegatedSubnetId))
            {
                writer.WritePropertyName("delegatedSubnetId"u8);
                writer.WriteStringValue(DelegatedSubnetId);
            }
            if (Core.Optional.IsDefined(NodeCount))
            {
                writer.WritePropertyName("nodeCount"u8);
                writer.WriteNumberValue(NodeCount.Value);
            }
            if (Core.Optional.IsDefined(Base64EncodedCassandraYamlFragment))
            {
                writer.WritePropertyName("base64EncodedCassandraYamlFragment"u8);
                writer.WriteStringValue(Base64EncodedCassandraYamlFragment);
            }
            if (Core.Optional.IsDefined(ManagedDiskCustomerKeyUri))
            {
                writer.WritePropertyName("managedDiskCustomerKeyUri"u8);
                writer.WriteStringValue(ManagedDiskCustomerKeyUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(BackupStorageCustomerKeyUri))
            {
                writer.WritePropertyName("backupStorageCustomerKeyUri"u8);
                writer.WriteStringValue(BackupStorageCustomerKeyUri.AbsoluteUri);
            }
            if (Core.Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteStringValue(Sku);
            }
            if (Core.Optional.IsDefined(DiskSku))
            {
                writer.WritePropertyName("diskSku"u8);
                writer.WriteStringValue(DiskSku);
            }
            if (Core.Optional.IsDefined(DiskCapacity))
            {
                writer.WritePropertyName("diskCapacity"u8);
                writer.WriteNumberValue(DiskCapacity.Value);
            }
            if (Core.Optional.IsDefined(DoesSupportAvailabilityZone))
            {
                writer.WritePropertyName("availabilityZone"u8);
                writer.WriteBooleanValue(DoesSupportAvailabilityZone.Value);
            }
            if (Core.Optional.IsDefined(AuthenticationMethodLdapProperties))
            {
                writer.WritePropertyName("authenticationMethodLdapProperties"u8);
                writer.WriteObjectValue(AuthenticationMethodLdapProperties);
            }
            if (Core.Optional.IsDefined(Deallocated))
            {
                writer.WritePropertyName("deallocated"u8);
                writer.WriteBooleanValue(Deallocated.Value);
            }
            if (Core.Optional.IsDefined(ProvisionError))
            {
                writer.WritePropertyName("provisionError"u8);
                writer.WriteObjectValue(ProvisionError);
            }
            writer.WriteEndObject();
        }

        internal static CassandraDataCenterProperties DeserializeCassandraDataCenterProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<CassandraProvisioningState> provisioningState = default;
            Core.Optional<AzureLocation> dataCenterLocation = default;
            Core.Optional<ResourceIdentifier> delegatedSubnetId = default;
            Core.Optional<int> nodeCount = default;
            Core.Optional<IReadOnlyList<CassandraDataCenterSeedNode>> seedNodes = default;
            Core.Optional<string> base64EncodedCassandraYamlFragment = default;
            Core.Optional<Uri> managedDiskCustomerKeyUri = default;
            Core.Optional<Uri> backupStorageCustomerKeyUri = default;
            Core.Optional<string> sku = default;
            Core.Optional<string> diskSku = default;
            Core.Optional<int> diskCapacity = default;
            Core.Optional<bool> availabilityZone = default;
            Core.Optional<AuthenticationMethodLdapProperties> authenticationMethodLdapProperties = default;
            Core.Optional<bool> deallocated = default;
            Core.Optional<CassandraError> provisionError = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new CassandraProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("dataCenterLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataCenterLocation = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("delegatedSubnetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    delegatedSubnetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("nodeCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    nodeCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("seedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraDataCenterSeedNode> array = new List<CassandraDataCenterSeedNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraDataCenterSeedNode.DeserializeCassandraDataCenterSeedNode(item));
                    }
                    seedNodes = array;
                    continue;
                }
                if (property.NameEquals("base64EncodedCassandraYamlFragment"u8))
                {
                    base64EncodedCassandraYamlFragment = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("managedDiskCustomerKeyUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedDiskCustomerKeyUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("backupStorageCustomerKeyUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupStorageCustomerKeyUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sku"u8))
                {
                    sku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskSku"u8))
                {
                    diskSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskCapacity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskCapacity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("availabilityZone"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availabilityZone = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("authenticationMethodLdapProperties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authenticationMethodLdapProperties = AuthenticationMethodLdapProperties.DeserializeAuthenticationMethodLdapProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("deallocated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deallocated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisionError"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionError = CassandraError.DeserializeCassandraError(property.Value);
                    continue;
                }
            }
            return new CassandraDataCenterProperties(Core.Optional.ToNullable(provisioningState), Core.Optional.ToNullable(dataCenterLocation), delegatedSubnetId.Value, Core.Optional.ToNullable(nodeCount), Core.Optional.ToList(seedNodes), base64EncodedCassandraYamlFragment.Value, managedDiskCustomerKeyUri.Value, backupStorageCustomerKeyUri.Value, sku.Value, diskSku.Value, Core.Optional.ToNullable(diskCapacity), Core.Optional.ToNullable(availabilityZone), authenticationMethodLdapProperties.Value, Core.Optional.ToNullable(deallocated), provisionError.Value);
        }
    }
}
