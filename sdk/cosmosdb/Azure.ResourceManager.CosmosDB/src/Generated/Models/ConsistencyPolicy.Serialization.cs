// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class ConsistencyPolicy : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("defaultConsistencyLevel"u8);
            writer.WriteStringValue(DefaultConsistencyLevel.ToSerialString());
            if (Optional.IsDefined(MaxStalenessPrefix))
            {
                writer.WritePropertyName("maxStalenessPrefix"u8);
                writer.WriteNumberValue(MaxStalenessPrefix.Value);
            }
            if (Optional.IsDefined(MaxIntervalInSeconds))
            {
                writer.WritePropertyName("maxIntervalInSeconds"u8);
                writer.WriteNumberValue(MaxIntervalInSeconds.Value);
            }
            writer.WriteEndObject();
        }

        internal static ConsistencyPolicy DeserializeConsistencyPolicy(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DefaultConsistencyLevel defaultConsistencyLevel = default;
            Optional<long> maxStalenessPrefix = default;
            Optional<int> maxIntervalInSeconds = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("defaultConsistencyLevel"u8))
                {
                    defaultConsistencyLevel = property.Value.GetString().ToDefaultConsistencyLevel();
                    continue;
                }
                if (property.NameEquals("maxStalenessPrefix"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxStalenessPrefix = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("maxIntervalInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxIntervalInSeconds = property.Value.GetInt32();
                    continue;
                }
            }
            return new ConsistencyPolicy(defaultConsistencyLevel, Optional.ToNullable(maxStalenessPrefix), Optional.ToNullable(maxIntervalInSeconds));
        }
    }
}
