// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Status of the command. </summary>
    public readonly partial struct CommandStatus : IEquatable<CommandStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CommandStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommandStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DoneValue = "Done";
        private const string RunningValue = "Running";
        private const string EnqueueValue = "Enqueue";
        private const string ProcessingValue = "Processing";
        private const string FinishedValue = "Finished";
        private const string FailedValue = "Failed";

        /// <summary> Done. </summary>
        public static CommandStatus Done { get; } = new CommandStatus(DoneValue);
        /// <summary> Running. </summary>
        public static CommandStatus Running { get; } = new CommandStatus(RunningValue);
        /// <summary> Enqueue. </summary>
        public static CommandStatus Enqueue { get; } = new CommandStatus(EnqueueValue);
        /// <summary> Processing. </summary>
        public static CommandStatus Processing { get; } = new CommandStatus(ProcessingValue);
        /// <summary> Finished. </summary>
        public static CommandStatus Finished { get; } = new CommandStatus(FinishedValue);
        /// <summary> Failed. </summary>
        public static CommandStatus Failed { get; } = new CommandStatus(FailedValue);
        /// <summary> Determines if two <see cref="CommandStatus"/> values are the same. </summary>
        public static bool operator ==(CommandStatus left, CommandStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommandStatus"/> values are not the same. </summary>
        public static bool operator !=(CommandStatus left, CommandStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CommandStatus"/>. </summary>
        public static implicit operator CommandStatus(string value) => new CommandStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommandStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommandStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
