// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Cosmos DB location metadata. </summary>
    public partial class CosmosDBLocationProperties
    {
        /// <summary> Initializes a new instance of <see cref="CosmosDBLocationProperties"/>. </summary>
        public CosmosDBLocationProperties()
        {
            BackupStorageRedundancies = new ChangeTrackingList<CosmosDBBackupStorageRedundancy>();
        }

        /// <summary> Initializes a new instance of <see cref="CosmosDBLocationProperties"/>. </summary>
        /// <param name="doesSupportAvailabilityZone"> Flag indicating whether the location supports availability zones or not. </param>
        /// <param name="isResidencyRestricted"> Flag indicating whether the location is residency sensitive. </param>
        /// <param name="backupStorageRedundancies"> The properties of available backup storage redundancies. </param>
        /// <param name="isSubscriptionRegionAccessAllowedForRegular"> Flag indicating whether the subscription have access in region for Non-Availability Zones. </param>
        /// <param name="isSubscriptionRegionAccessAllowedForAz"> Flag indicating whether the subscription have access in region for Availability Zones(Az). </param>
        /// <param name="status"> Enum to indicate current buildout status of the region. </param>
        internal CosmosDBLocationProperties(bool? doesSupportAvailabilityZone, bool? isResidencyRestricted, IReadOnlyList<CosmosDBBackupStorageRedundancy> backupStorageRedundancies, bool? isSubscriptionRegionAccessAllowedForRegular, bool? isSubscriptionRegionAccessAllowedForAz, CosmosDBStatus? status)
        {
            DoesSupportAvailabilityZone = doesSupportAvailabilityZone;
            IsResidencyRestricted = isResidencyRestricted;
            BackupStorageRedundancies = backupStorageRedundancies;
            IsSubscriptionRegionAccessAllowedForRegular = isSubscriptionRegionAccessAllowedForRegular;
            IsSubscriptionRegionAccessAllowedForAz = isSubscriptionRegionAccessAllowedForAz;
            Status = status;
        }

        /// <summary> Flag indicating whether the location supports availability zones or not. </summary>
        public bool? DoesSupportAvailabilityZone { get; }
        /// <summary> Flag indicating whether the location is residency sensitive. </summary>
        public bool? IsResidencyRestricted { get; }
        /// <summary> The properties of available backup storage redundancies. </summary>
        public IReadOnlyList<CosmosDBBackupStorageRedundancy> BackupStorageRedundancies { get; }
        /// <summary> Flag indicating whether the subscription have access in region for Non-Availability Zones. </summary>
        public bool? IsSubscriptionRegionAccessAllowedForRegular { get; }
        /// <summary> Flag indicating whether the subscription have access in region for Availability Zones(Az). </summary>
        public bool? IsSubscriptionRegionAccessAllowedForAz { get; }
        /// <summary> Enum to indicate current buildout status of the region. </summary>
        public CosmosDBStatus? Status { get; }
    }
}
