// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class CosmosDBLocationProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WriteEndObject();
        }

        internal static CosmosDBLocationProperties DeserializeCosmosDBLocationProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<bool> supportsAvailabilityZone = default;
            Optional<bool> isResidencyRestricted = default;
            Optional<IReadOnlyList<CosmosDBBackupStorageRedundancy>> backupStorageRedundancies = default;
            Optional<bool> isSubscriptionRegionAccessAllowedForRegular = default;
            Optional<bool> isSubscriptionRegionAccessAllowedForAz = default;
            Optional<CosmosDBStatus> status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("supportsAvailabilityZone"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    supportsAvailabilityZone = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isResidencyRestricted"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isResidencyRestricted = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("backupStorageRedundancies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CosmosDBBackupStorageRedundancy> array = new List<CosmosDBBackupStorageRedundancy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new CosmosDBBackupStorageRedundancy(item.GetString()));
                    }
                    backupStorageRedundancies = array;
                    continue;
                }
                if (property.NameEquals("isSubscriptionRegionAccessAllowedForRegular"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isSubscriptionRegionAccessAllowedForRegular = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isSubscriptionRegionAccessAllowedForAz"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isSubscriptionRegionAccessAllowedForAz = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new CosmosDBStatus(property.Value.GetString());
                    continue;
                }
            }
            return new CosmosDBLocationProperties(Optional.ToNullable(supportsAvailabilityZone), Optional.ToNullable(isResidencyRestricted), Optional.ToList(backupStorageRedundancies), Optional.ToNullable(isSubscriptionRegionAccessAllowedForRegular), Optional.ToNullable(isSubscriptionRegionAccessAllowedForAz), Optional.ToNullable(status));
        }
    }
}
