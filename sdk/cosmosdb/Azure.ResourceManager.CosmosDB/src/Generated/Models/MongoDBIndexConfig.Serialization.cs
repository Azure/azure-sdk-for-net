// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class MongoDBIndexConfig : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(ExpireAfterSeconds))
            {
                writer.WritePropertyName("expireAfterSeconds"u8);
                writer.WriteNumberValue(ExpireAfterSeconds.Value);
            }
            if (Optional.IsDefined(IsUnique))
            {
                writer.WritePropertyName("unique"u8);
                writer.WriteBooleanValue(IsUnique.Value);
            }
            writer.WriteEndObject();
        }

        internal static MongoDBIndexConfig DeserializeMongoDBIndexConfig(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> expireAfterSeconds = default;
            Optional<bool> unique = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("expireAfterSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    expireAfterSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("unique"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    unique = property.Value.GetBoolean();
                    continue;
                }
            }
            return new MongoDBIndexConfig(Optional.ToNullable(expireAfterSeconds), Optional.ToNullable(unique));
        }
    }
}
