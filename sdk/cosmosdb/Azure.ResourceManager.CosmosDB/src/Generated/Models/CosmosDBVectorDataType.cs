// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Indicates the data type of vector. </summary>
    public readonly partial struct CosmosDBVectorDataType : IEquatable<CosmosDBVectorDataType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CosmosDBVectorDataType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CosmosDBVectorDataType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Float32Value = "float32";
        private const string Uint8Value = "uint8";
        private const string Int8Value = "int8";

        /// <summary> float32. </summary>
        public static CosmosDBVectorDataType Float32 { get; } = new CosmosDBVectorDataType(Float32Value);
        /// <summary> uint8. </summary>
        public static CosmosDBVectorDataType Uint8 { get; } = new CosmosDBVectorDataType(Uint8Value);
        /// <summary> int8. </summary>
        public static CosmosDBVectorDataType Int8 { get; } = new CosmosDBVectorDataType(Int8Value);
        /// <summary> Determines if two <see cref="CosmosDBVectorDataType"/> values are the same. </summary>
        public static bool operator ==(CosmosDBVectorDataType left, CosmosDBVectorDataType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CosmosDBVectorDataType"/> values are not the same. </summary>
        public static bool operator !=(CosmosDBVectorDataType left, CosmosDBVectorDataType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="CosmosDBVectorDataType"/>. </summary>
        public static implicit operator CosmosDBVectorDataType(string value) => new CosmosDBVectorDataType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CosmosDBVectorDataType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CosmosDBVectorDataType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
