// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Cosmos DB MongoDB collection resource object. </summary>
    public partial class MongoDBCollectionResource
    {
        /// <summary> Initializes a new instance of MongoDBCollectionResource. </summary>
        /// <param name="id"> Name of the Cosmos DB MongoDB collection. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        public MongoDBCollectionResource(string id)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            Id = id;
            ShardKey = new ChangeTrackingDictionary<string, string>();
            Indexes = new ChangeTrackingList<MongoIndex>();
        }

        /// <summary> Initializes a new instance of MongoDBCollectionResource. </summary>
        /// <param name="id"> Name of the Cosmos DB MongoDB collection. </param>
        /// <param name="shardKey"> A key-value pair of shard keys to be applied for the request. </param>
        /// <param name="indexes"> List of index keys. </param>
        /// <param name="analyticalStorageTtl"> Analytical TTL. </param>
        internal MongoDBCollectionResource(string id, IDictionary<string, string> shardKey, IList<MongoIndex> indexes, int? analyticalStorageTtl)
        {
            Id = id;
            ShardKey = shardKey;
            Indexes = indexes;
            AnalyticalStorageTtl = analyticalStorageTtl;
        }

        /// <summary> Name of the Cosmos DB MongoDB collection. </summary>
        public string Id { get; set; }
        /// <summary> A key-value pair of shard keys to be applied for the request. </summary>
        public IDictionary<string, string> ShardKey { get; }
        /// <summary> List of index keys. </summary>
        public IList<MongoIndex> Indexes { get; }
        /// <summary> Analytical TTL. </summary>
        public int? AnalyticalStorageTtl { get; set; }
    }
}
