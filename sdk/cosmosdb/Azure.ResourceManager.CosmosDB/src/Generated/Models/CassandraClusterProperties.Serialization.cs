// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class CassandraClusterProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Core.Optional.IsDefined(RestoreFromBackupId))
            {
                writer.WritePropertyName("restoreFromBackupId"u8);
                writer.WriteStringValue(RestoreFromBackupId);
            }
            if (Core.Optional.IsDefined(DelegatedManagementSubnetId))
            {
                writer.WritePropertyName("delegatedManagementSubnetId"u8);
                writer.WriteStringValue(DelegatedManagementSubnetId);
            }
            if (Core.Optional.IsDefined(CassandraVersion))
            {
                writer.WritePropertyName("cassandraVersion"u8);
                writer.WriteStringValue(CassandraVersion);
            }
            if (Core.Optional.IsDefined(ClusterNameOverride))
            {
                writer.WritePropertyName("clusterNameOverride"u8);
                writer.WriteStringValue(ClusterNameOverride);
            }
            if (Core.Optional.IsDefined(AuthenticationMethod))
            {
                writer.WritePropertyName("authenticationMethod"u8);
                writer.WriteStringValue(AuthenticationMethod.Value.ToString());
            }
            if (Core.Optional.IsDefined(InitialCassandraAdminPassword))
            {
                writer.WritePropertyName("initialCassandraAdminPassword"u8);
                writer.WriteStringValue(InitialCassandraAdminPassword);
            }
            if (Core.Optional.IsDefined(PrometheusEndpoint))
            {
                writer.WritePropertyName("prometheusEndpoint"u8);
                writer.WriteObjectValue(PrometheusEndpoint);
            }
            if (Core.Optional.IsDefined(IsRepairEnabled))
            {
                writer.WritePropertyName("repairEnabled"u8);
                writer.WriteBooleanValue(IsRepairEnabled.Value);
            }
            if (Core.Optional.IsCollectionDefined(ClientCertificates))
            {
                writer.WritePropertyName("clientCertificates"u8);
                writer.WriteStartArray();
                foreach (var item in ClientCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(ExternalGossipCertificates))
            {
                writer.WritePropertyName("externalGossipCertificates"u8);
                writer.WriteStartArray();
                foreach (var item in ExternalGossipCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsCollectionDefined(ExternalSeedNodes))
            {
                writer.WritePropertyName("externalSeedNodes"u8);
                writer.WriteStartArray();
                foreach (var item in ExternalSeedNodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Core.Optional.IsDefined(HoursBetweenBackups))
            {
                writer.WritePropertyName("hoursBetweenBackups"u8);
                writer.WriteNumberValue(HoursBetweenBackups.Value);
            }
            if (Core.Optional.IsDefined(IsDeallocated))
            {
                writer.WritePropertyName("deallocated"u8);
                writer.WriteBooleanValue(IsDeallocated.Value);
            }
            if (Core.Optional.IsDefined(IsCassandraAuditLoggingEnabled))
            {
                writer.WritePropertyName("cassandraAuditLoggingEnabled"u8);
                writer.WriteBooleanValue(IsCassandraAuditLoggingEnabled.Value);
            }
            if (Core.Optional.IsDefined(ProvisionError))
            {
                writer.WritePropertyName("provisionError"u8);
                writer.WriteObjectValue(ProvisionError);
            }
            writer.WriteEndObject();
        }

        internal static CassandraClusterProperties DeserializeCassandraClusterProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<CassandraProvisioningState> provisioningState = default;
            Core.Optional<string> restoreFromBackupId = default;
            Core.Optional<ResourceIdentifier> delegatedManagementSubnetId = default;
            Core.Optional<string> cassandraVersion = default;
            Core.Optional<string> clusterNameOverride = default;
            Core.Optional<CassandraAuthenticationMethod> authenticationMethod = default;
            Core.Optional<string> initialCassandraAdminPassword = default;
            Core.Optional<CassandraDataCenterSeedNode> prometheusEndpoint = default;
            Core.Optional<bool> repairEnabled = default;
            Core.Optional<IList<CassandraCertificate>> clientCertificates = default;
            Core.Optional<IList<CassandraCertificate>> externalGossipCertificates = default;
            Core.Optional<IReadOnlyList<CassandraCertificate>> gossipCertificates = default;
            Core.Optional<IList<CassandraDataCenterSeedNode>> externalSeedNodes = default;
            Core.Optional<IReadOnlyList<CassandraDataCenterSeedNode>> seedNodes = default;
            Core.Optional<int> hoursBetweenBackups = default;
            Core.Optional<bool> deallocated = default;
            Core.Optional<bool> cassandraAuditLoggingEnabled = default;
            Core.Optional<CassandraError> provisionError = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new CassandraProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("restoreFromBackupId"u8))
                {
                    restoreFromBackupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("delegatedManagementSubnetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    delegatedManagementSubnetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cassandraVersion"u8))
                {
                    cassandraVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterNameOverride"u8))
                {
                    clusterNameOverride = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authenticationMethod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authenticationMethod = new CassandraAuthenticationMethod(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("initialCassandraAdminPassword"u8))
                {
                    initialCassandraAdminPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("prometheusEndpoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    prometheusEndpoint = CassandraDataCenterSeedNode.DeserializeCassandraDataCenterSeedNode(property.Value);
                    continue;
                }
                if (property.NameEquals("repairEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    repairEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("clientCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraCertificate> array = new List<CassandraCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraCertificate.DeserializeCassandraCertificate(item));
                    }
                    clientCertificates = array;
                    continue;
                }
                if (property.NameEquals("externalGossipCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraCertificate> array = new List<CassandraCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraCertificate.DeserializeCassandraCertificate(item));
                    }
                    externalGossipCertificates = array;
                    continue;
                }
                if (property.NameEquals("gossipCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraCertificate> array = new List<CassandraCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraCertificate.DeserializeCassandraCertificate(item));
                    }
                    gossipCertificates = array;
                    continue;
                }
                if (property.NameEquals("externalSeedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraDataCenterSeedNode> array = new List<CassandraDataCenterSeedNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraDataCenterSeedNode.DeserializeCassandraDataCenterSeedNode(item));
                    }
                    externalSeedNodes = array;
                    continue;
                }
                if (property.NameEquals("seedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraDataCenterSeedNode> array = new List<CassandraDataCenterSeedNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraDataCenterSeedNode.DeserializeCassandraDataCenterSeedNode(item));
                    }
                    seedNodes = array;
                    continue;
                }
                if (property.NameEquals("hoursBetweenBackups"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hoursBetweenBackups = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("deallocated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deallocated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cassandraAuditLoggingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cassandraAuditLoggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisionError"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionError = CassandraError.DeserializeCassandraError(property.Value);
                    continue;
                }
            }
            return new CassandraClusterProperties(Core.Optional.ToNullable(provisioningState), restoreFromBackupId.Value, delegatedManagementSubnetId.Value, cassandraVersion.Value, clusterNameOverride.Value, Core.Optional.ToNullable(authenticationMethod), initialCassandraAdminPassword.Value, prometheusEndpoint.Value, Core.Optional.ToNullable(repairEnabled), Core.Optional.ToList(clientCertificates), Core.Optional.ToList(externalGossipCertificates), Core.Optional.ToList(gossipCertificates), Core.Optional.ToList(externalSeedNodes), Core.Optional.ToList(seedNodes), Core.Optional.ToNullable(hoursBetweenBackups), Core.Optional.ToNullable(deallocated), Core.Optional.ToNullable(cassandraAuditLoggingEnabled), provisionError.Value);
        }
    }
}
