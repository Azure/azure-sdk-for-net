// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.CosmosDB.Models
{
    public partial class CassandraClusterProperties : IUtf8JsonSerializable, IJsonModel<CassandraClusterProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<CassandraClusterProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<CassandraClusterProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CassandraClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CassandraClusterProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(RestoreFromBackupId))
            {
                writer.WritePropertyName("restoreFromBackupId"u8);
                writer.WriteStringValue(RestoreFromBackupId);
            }
            if (Optional.IsDefined(DelegatedManagementSubnetId))
            {
                writer.WritePropertyName("delegatedManagementSubnetId"u8);
                writer.WriteStringValue(DelegatedManagementSubnetId);
            }
            if (Optional.IsDefined(CassandraVersion))
            {
                writer.WritePropertyName("cassandraVersion"u8);
                writer.WriteStringValue(CassandraVersion);
            }
            if (Optional.IsDefined(ClusterNameOverride))
            {
                writer.WritePropertyName("clusterNameOverride"u8);
                writer.WriteStringValue(ClusterNameOverride);
            }
            if (Optional.IsDefined(AuthenticationMethod))
            {
                writer.WritePropertyName("authenticationMethod"u8);
                writer.WriteStringValue(AuthenticationMethod.Value.ToString());
            }
            if (Optional.IsDefined(InitialCassandraAdminPassword))
            {
                writer.WritePropertyName("initialCassandraAdminPassword"u8);
                writer.WriteStringValue(InitialCassandraAdminPassword);
            }
            if (Optional.IsDefined(PrometheusEndpoint))
            {
                writer.WritePropertyName("prometheusEndpoint"u8);
                writer.WriteObjectValue(PrometheusEndpoint);
            }
            if (Optional.IsDefined(IsRepairEnabled))
            {
                writer.WritePropertyName("repairEnabled"u8);
                writer.WriteBooleanValue(IsRepairEnabled.Value);
            }
            if (Optional.IsCollectionDefined(ClientCertificates))
            {
                writer.WritePropertyName("clientCertificates"u8);
                writer.WriteStartArray();
                foreach (var item in ClientCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ExternalGossipCertificates))
            {
                writer.WritePropertyName("externalGossipCertificates"u8);
                writer.WriteStartArray();
                foreach (var item in ExternalGossipCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(GossipCertificates))
            {
                writer.WritePropertyName("gossipCertificates"u8);
                writer.WriteStartArray();
                foreach (var item in GossipCertificates)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ExternalSeedNodes))
            {
                writer.WritePropertyName("externalSeedNodes"u8);
                writer.WriteStartArray();
                foreach (var item in ExternalSeedNodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(SeedNodes))
            {
                writer.WritePropertyName("seedNodes"u8);
                writer.WriteStartArray();
                foreach (var item in SeedNodes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(HoursBetweenBackups))
            {
                writer.WritePropertyName("hoursBetweenBackups"u8);
                writer.WriteNumberValue(HoursBetweenBackups.Value);
            }
            if (Optional.IsDefined(IsDeallocated))
            {
                writer.WritePropertyName("deallocated"u8);
                writer.WriteBooleanValue(IsDeallocated.Value);
            }
            if (Optional.IsDefined(IsCassandraAuditLoggingEnabled))
            {
                writer.WritePropertyName("cassandraAuditLoggingEnabled"u8);
                writer.WriteBooleanValue(IsCassandraAuditLoggingEnabled.Value);
            }
            if (Optional.IsDefined(ClusterType))
            {
                writer.WritePropertyName("clusterType"u8);
                writer.WriteStringValue(ClusterType.Value.ToString());
            }
            if (Optional.IsDefined(ProvisionError))
            {
                writer.WritePropertyName("provisionError"u8);
                writer.WriteObjectValue(ProvisionError);
            }
            if (Optional.IsCollectionDefined(Extensions))
            {
                writer.WritePropertyName("extensions"u8);
                writer.WriteStartArray();
                foreach (var item in Extensions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(BackupSchedules))
            {
                writer.WritePropertyName("backupSchedules"u8);
                writer.WriteStartArray();
                foreach (var item in BackupSchedules)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        CassandraClusterProperties IJsonModel<CassandraClusterProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CassandraClusterProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CassandraClusterProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCassandraClusterProperties(document.RootElement, options);
        }

        internal static CassandraClusterProperties DeserializeCassandraClusterProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<CassandraProvisioningState> provisioningState = default;
            Optional<string> restoreFromBackupId = default;
            Optional<ResourceIdentifier> delegatedManagementSubnetId = default;
            Optional<string> cassandraVersion = default;
            Optional<string> clusterNameOverride = default;
            Optional<CassandraAuthenticationMethod> authenticationMethod = default;
            Optional<string> initialCassandraAdminPassword = default;
            Optional<CassandraDataCenterSeedNode> prometheusEndpoint = default;
            Optional<bool> repairEnabled = default;
            Optional<IList<CassandraCertificate>> clientCertificates = default;
            Optional<IList<CassandraCertificate>> externalGossipCertificates = default;
            Optional<IReadOnlyList<CassandraCertificate>> gossipCertificates = default;
            Optional<IList<CassandraDataCenterSeedNode>> externalSeedNodes = default;
            Optional<IReadOnlyList<CassandraDataCenterSeedNode>> seedNodes = default;
            Optional<int> hoursBetweenBackups = default;
            Optional<bool> deallocated = default;
            Optional<bool> cassandraAuditLoggingEnabled = default;
            Optional<CassandraClusterType> clusterType = default;
            Optional<CassandraError> provisionError = default;
            Optional<IList<string>> extensions = default;
            Optional<IList<CassandraClusterBackupSchedule>> backupSchedules = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new CassandraProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("restoreFromBackupId"u8))
                {
                    restoreFromBackupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("delegatedManagementSubnetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    delegatedManagementSubnetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cassandraVersion"u8))
                {
                    cassandraVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clusterNameOverride"u8))
                {
                    clusterNameOverride = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authenticationMethod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authenticationMethod = new CassandraAuthenticationMethod(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("initialCassandraAdminPassword"u8))
                {
                    initialCassandraAdminPassword = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("prometheusEndpoint"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    prometheusEndpoint = CassandraDataCenterSeedNode.DeserializeCassandraDataCenterSeedNode(property.Value);
                    continue;
                }
                if (property.NameEquals("repairEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    repairEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("clientCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraCertificate> array = new List<CassandraCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraCertificate.DeserializeCassandraCertificate(item));
                    }
                    clientCertificates = array;
                    continue;
                }
                if (property.NameEquals("externalGossipCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraCertificate> array = new List<CassandraCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraCertificate.DeserializeCassandraCertificate(item));
                    }
                    externalGossipCertificates = array;
                    continue;
                }
                if (property.NameEquals("gossipCertificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraCertificate> array = new List<CassandraCertificate>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraCertificate.DeserializeCassandraCertificate(item));
                    }
                    gossipCertificates = array;
                    continue;
                }
                if (property.NameEquals("externalSeedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraDataCenterSeedNode> array = new List<CassandraDataCenterSeedNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraDataCenterSeedNode.DeserializeCassandraDataCenterSeedNode(item));
                    }
                    externalSeedNodes = array;
                    continue;
                }
                if (property.NameEquals("seedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraDataCenterSeedNode> array = new List<CassandraDataCenterSeedNode>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraDataCenterSeedNode.DeserializeCassandraDataCenterSeedNode(item));
                    }
                    seedNodes = array;
                    continue;
                }
                if (property.NameEquals("hoursBetweenBackups"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hoursBetweenBackups = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("deallocated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deallocated = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cassandraAuditLoggingEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cassandraAuditLoggingEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("clusterType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    clusterType = new CassandraClusterType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisionError"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisionError = CassandraError.DeserializeCassandraError(property.Value);
                    continue;
                }
                if (property.NameEquals("extensions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    extensions = array;
                    continue;
                }
                if (property.NameEquals("backupSchedules"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CassandraClusterBackupSchedule> array = new List<CassandraClusterBackupSchedule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CassandraClusterBackupSchedule.DeserializeCassandraClusterBackupSchedule(item));
                    }
                    backupSchedules = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new CassandraClusterProperties(Optional.ToNullable(provisioningState), restoreFromBackupId.Value, delegatedManagementSubnetId.Value, cassandraVersion.Value, clusterNameOverride.Value, Optional.ToNullable(authenticationMethod), initialCassandraAdminPassword.Value, prometheusEndpoint.Value, Optional.ToNullable(repairEnabled), Optional.ToList(clientCertificates), Optional.ToList(externalGossipCertificates), Optional.ToList(gossipCertificates), Optional.ToList(externalSeedNodes), Optional.ToList(seedNodes), Optional.ToNullable(hoursBetweenBackups), Optional.ToNullable(deallocated), Optional.ToNullable(cassandraAuditLoggingEnabled), Optional.ToNullable(clusterType), provisionError.Value, Optional.ToList(extensions), Optional.ToList(backupSchedules), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(ProvisioningState))
            {
                builder.Append("  provisioningState:");
                builder.AppendLine($" '{ProvisioningState.Value.ToString()}'");
            }

            if (Optional.IsDefined(RestoreFromBackupId))
            {
                builder.Append("  restoreFromBackupId:");
                if (RestoreFromBackupId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RestoreFromBackupId}'''");
                }
                else
                {
                    builder.AppendLine($" '{RestoreFromBackupId}'");
                }
            }

            if (Optional.IsDefined(DelegatedManagementSubnetId))
            {
                builder.Append("  delegatedManagementSubnetId:");
                builder.AppendLine($" '{DelegatedManagementSubnetId.ToString()}'");
            }

            if (Optional.IsDefined(CassandraVersion))
            {
                builder.Append("  cassandraVersion:");
                if (CassandraVersion.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CassandraVersion}'''");
                }
                else
                {
                    builder.AppendLine($" '{CassandraVersion}'");
                }
            }

            if (Optional.IsDefined(ClusterNameOverride))
            {
                builder.Append("  clusterNameOverride:");
                if (ClusterNameOverride.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ClusterNameOverride}'''");
                }
                else
                {
                    builder.AppendLine($" '{ClusterNameOverride}'");
                }
            }

            if (Optional.IsDefined(AuthenticationMethod))
            {
                builder.Append("  authenticationMethod:");
                builder.AppendLine($" '{AuthenticationMethod.Value.ToString()}'");
            }

            if (Optional.IsDefined(InitialCassandraAdminPassword))
            {
                builder.Append("  initialCassandraAdminPassword:");
                if (InitialCassandraAdminPassword.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{InitialCassandraAdminPassword}'''");
                }
                else
                {
                    builder.AppendLine($" '{InitialCassandraAdminPassword}'");
                }
            }

            if (Optional.IsDefined(PrometheusEndpoint))
            {
                builder.Append("  prometheusEndpoint:");
                AppendChildObject(builder, PrometheusEndpoint, options, 2, false);
            }

            if (Optional.IsDefined(IsRepairEnabled))
            {
                builder.Append("  repairEnabled:");
                var boolValue = IsRepairEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsCollectionDefined(ClientCertificates))
            {
                if (ClientCertificates.Any())
                {
                    builder.Append("  clientCertificates:");
                    builder.AppendLine(" [");
                    foreach (var item in ClientCertificates)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(ExternalGossipCertificates))
            {
                if (ExternalGossipCertificates.Any())
                {
                    builder.Append("  externalGossipCertificates:");
                    builder.AppendLine(" [");
                    foreach (var item in ExternalGossipCertificates)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(GossipCertificates))
            {
                if (GossipCertificates.Any())
                {
                    builder.Append("  gossipCertificates:");
                    builder.AppendLine(" [");
                    foreach (var item in GossipCertificates)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(ExternalSeedNodes))
            {
                if (ExternalSeedNodes.Any())
                {
                    builder.Append("  externalSeedNodes:");
                    builder.AppendLine(" [");
                    foreach (var item in ExternalSeedNodes)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(SeedNodes))
            {
                if (SeedNodes.Any())
                {
                    builder.Append("  seedNodes:");
                    builder.AppendLine(" [");
                    foreach (var item in SeedNodes)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(HoursBetweenBackups))
            {
                builder.Append("  hoursBetweenBackups:");
                builder.AppendLine($" {HoursBetweenBackups.Value}");
            }

            if (Optional.IsDefined(IsDeallocated))
            {
                builder.Append("  deallocated:");
                var boolValue = IsDeallocated.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(IsCassandraAuditLoggingEnabled))
            {
                builder.Append("  cassandraAuditLoggingEnabled:");
                var boolValue = IsCassandraAuditLoggingEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(ClusterType))
            {
                builder.Append("  clusterType:");
                builder.AppendLine($" '{ClusterType.Value.ToString()}'");
            }

            if (Optional.IsDefined(ProvisionError))
            {
                builder.Append("  provisionError:");
                AppendChildObject(builder, ProvisionError, options, 2, false);
            }

            if (Optional.IsCollectionDefined(Extensions))
            {
                if (Extensions.Any())
                {
                    builder.Append("  extensions:");
                    builder.AppendLine(" [");
                    foreach (var item in Extensions)
                    {
                        if (item == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Contains(Environment.NewLine))
                        {
                            builder.AppendLine("    '''");
                            builder.AppendLine($"{item}'''");
                        }
                        else
                        {
                            builder.AppendLine($"    '{item}'");
                        }
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(BackupSchedules))
            {
                if (BackupSchedules.Any())
                {
                    builder.Append("  backupSchedules:");
                    builder.AppendLine(" [");
                    foreach (var item in BackupSchedules)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<CassandraClusterProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CassandraClusterProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(CassandraClusterProperties)} does not support '{options.Format}' format.");
            }
        }

        CassandraClusterProperties IPersistableModel<CassandraClusterProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CassandraClusterProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCassandraClusterProperties(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(CassandraClusterProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<CassandraClusterProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
