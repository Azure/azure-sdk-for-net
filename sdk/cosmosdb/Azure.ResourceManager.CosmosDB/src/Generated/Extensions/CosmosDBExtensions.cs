// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.CosmosDB. </summary>
    public static partial class CosmosDBExtensions
    {
        private static TenantExtensionClient GetExtensionClient(Tenant tenant)
        {
            return tenant.GetCachedClient((client) =>
            {
                return new TenantExtensionClient(client, tenant.Id);
            }
            );
        }

        /// <summary>
        /// Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &apos;-&apos; character, and must be between 3 and 50 characters.
        /// Request Path: /providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}
        /// Operation Id: DatabaseAccounts_CheckNameExists
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public static async Task<Response<bool>> CheckNameExistsDatabaseAccountAsync(this Tenant tenant, string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            return await GetExtensionClient(tenant).CheckNameExistsDatabaseAccountAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &apos;-&apos; character, and must be between 3 and 50 characters.
        /// Request Path: /providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}
        /// Operation Id: DatabaseAccounts_CheckNameExists
        /// </summary>
        /// <param name="tenant"> The <see cref="Tenant" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public static Response<bool> CheckNameExistsDatabaseAccount(this Tenant tenant, string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            return GetExtensionClient(tenant).CheckNameExistsDatabaseAccount(accountName, cancellationToken);
        }

        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary> Gets a collection of CosmosDBLocations in the CosmosDBLocation. </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CosmosDBLocations and their operations over a CosmosDBLocation. </returns>
        public static CosmosDBLocationCollection GetCosmosDBLocations(this Subscription subscription)
        {
            return GetExtensionClient(subscription).GetCosmosDBLocations();
        }

        /// <summary>
        /// Get the properties of an existing Cosmos DB location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> Cosmos DB region, with spaces between words and each word capitalized. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static async Task<Response<CosmosDBLocation>> GetCosmosDBLocationAsync(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            return await subscription.GetCosmosDBLocations().GetAsync(location, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the properties of an existing Cosmos DB location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="location"> Cosmos DB region, with spaces between words and each word capitalized. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static Response<CosmosDBLocation> GetCosmosDBLocation(this Subscription subscription, string location, CancellationToken cancellationToken = default)
        {
            return subscription.GetCosmosDBLocations().Get(location, cancellationToken);
        }

        /// <summary>
        /// Lists all the Azure Cosmos DB database accounts available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
        /// Operation Id: DatabaseAccounts_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DatabaseAccount" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DatabaseAccount> GetDatabaseAccountsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDatabaseAccountsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the Azure Cosmos DB database accounts available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
        /// Operation Id: DatabaseAccounts_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DatabaseAccount" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DatabaseAccount> GetDatabaseAccounts(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetDatabaseAccounts(cancellationToken);
        }

        /// <summary>
        /// Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts
        /// Operation Id: RestorableDatabaseAccounts_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RestorableDatabaseAccount" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<RestorableDatabaseAccount> GetRestorableDatabaseAccountsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetRestorableDatabaseAccountsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts
        /// Operation Id: RestorableDatabaseAccounts_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RestorableDatabaseAccount" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<RestorableDatabaseAccount> GetRestorableDatabaseAccounts(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetRestorableDatabaseAccounts(cancellationToken);
        }

        /// <summary>
        /// List all managed Cassandra clusters in this subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters
        /// Operation Id: CassandraClusters_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ClusterResource> GetClusterResourcesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetClusterResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// List all managed Cassandra clusters in this subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters
        /// Operation Id: CassandraClusters_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ClusterResource> GetClusterResources(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetClusterResources(cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of DatabaseAccounts in the DatabaseAccount. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DatabaseAccounts and their operations over a DatabaseAccount. </returns>
        public static DatabaseAccountCollection GetDatabaseAccounts(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetDatabaseAccounts();
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB database account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
        /// Operation Id: DatabaseAccounts_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public static async Task<Response<DatabaseAccount>> GetDatabaseAccountAsync(this ResourceGroup resourceGroup, string accountName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetDatabaseAccounts().GetAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB database account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
        /// Operation Id: DatabaseAccounts_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public static Response<DatabaseAccount> GetDatabaseAccount(this ResourceGroup resourceGroup, string accountName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetDatabaseAccounts().Get(accountName, cancellationToken);
        }

        /// <summary> Gets a collection of ClusterResources in the ClusterResource. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ClusterResources and their operations over a ClusterResource. </returns>
        public static ClusterResourceCollection GetClusterResources(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetClusterResources();
        }

        /// <summary>
        /// Get the properties of a managed Cassandra cluster.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}
        /// Operation Id: CassandraClusters_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="clusterName"> Managed Cassandra cluster name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterName"/> is null. </exception>
        public static async Task<Response<ClusterResource>> GetClusterResourceAsync(this ResourceGroup resourceGroup, string clusterName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetClusterResources().GetAsync(clusterName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the properties of a managed Cassandra cluster.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}
        /// Operation Id: CassandraClusters_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="clusterName"> Managed Cassandra cluster name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterName"/> is null. </exception>
        public static Response<ClusterResource> GetClusterResource(this ResourceGroup resourceGroup, string clusterName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetClusterResources().Get(clusterName, cancellationToken);
        }

        #region DatabaseAccount
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccount" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccount.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccount" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccount" /> object. </returns>
        public static DatabaseAccount GetDatabaseAccount(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccount.ValidateResourceId(id);
                return new DatabaseAccount(client, id);
            }
            );
        }
        #endregion

        #region SqlDatabase
        /// <summary>
        /// Gets an object representing a <see cref="SqlDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlDatabase.CreateResourceIdentifier" /> to create a <see cref="SqlDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlDatabase" /> object. </returns>
        public static SqlDatabase GetSqlDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlDatabase.ValidateResourceId(id);
                return new SqlDatabase(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountSqlDatabaseThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountSqlDatabaseThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountSqlDatabaseThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountSqlDatabaseThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountSqlDatabaseThroughputSetting" /> object. </returns>
        public static DatabaseAccountSqlDatabaseThroughputSetting GetDatabaseAccountSqlDatabaseThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountSqlDatabaseThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountSqlDatabaseThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountSqlDatabaseContainerThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountSqlDatabaseContainerThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSetting" /> object. </returns>
        public static DatabaseAccountSqlDatabaseContainerThroughputSetting GetDatabaseAccountSqlDatabaseContainerThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountSqlDatabaseContainerThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountSqlDatabaseContainerThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountMongodbDatabaseThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountMongodbDatabaseThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountMongodbDatabaseThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountMongodbDatabaseThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountMongodbDatabaseThroughputSetting" /> object. </returns>
        public static DatabaseAccountMongodbDatabaseThroughputSetting GetDatabaseAccountMongodbDatabaseThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountMongodbDatabaseThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountMongodbDatabaseThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountMongodbDatabaseCollectionThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSetting" /> object. </returns>
        public static DatabaseAccountMongodbDatabaseCollectionThroughputSetting GetDatabaseAccountMongodbDatabaseCollectionThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountMongodbDatabaseCollectionThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountMongodbDatabaseCollectionThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountTableThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountTableThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountTableThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountTableThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountTableThroughputSetting" /> object. </returns>
        public static DatabaseAccountTableThroughputSetting GetDatabaseAccountTableThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountTableThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountTableThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountCassandraKeyspaceThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountCassandraKeyspaceThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountCassandraKeyspaceThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountCassandraKeyspaceThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountCassandraKeyspaceThroughputSetting" /> object. </returns>
        public static DatabaseAccountCassandraKeyspaceThroughputSetting GetDatabaseAccountCassandraKeyspaceThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountCassandraKeyspaceThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountCassandraKeyspaceThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountCassandraKeyspaceTableThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSetting" /> object. </returns>
        public static DatabaseAccountCassandraKeyspaceTableThroughputSetting GetDatabaseAccountCassandraKeyspaceTableThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountCassandraKeyspaceTableThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountCassandraKeyspaceTableThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountGremlinDatabaseThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountGremlinDatabaseThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountGremlinDatabaseThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountGremlinDatabaseThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountGremlinDatabaseThroughputSetting" /> object. </returns>
        public static DatabaseAccountGremlinDatabaseThroughputSetting GetDatabaseAccountGremlinDatabaseThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountGremlinDatabaseThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountGremlinDatabaseThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountGremlinDatabaseGraphThroughputSetting
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSetting" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSetting.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSetting" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSetting" /> object. </returns>
        public static DatabaseAccountGremlinDatabaseGraphThroughputSetting GetDatabaseAccountGremlinDatabaseGraphThroughputSetting(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountGremlinDatabaseGraphThroughputSetting.ValidateResourceId(id);
                return new DatabaseAccountGremlinDatabaseGraphThroughputSetting(client, id);
            }
            );
        }
        #endregion

        #region SqlContainer
        /// <summary>
        /// Gets an object representing a <see cref="SqlContainer" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlContainer.CreateResourceIdentifier" /> to create a <see cref="SqlContainer" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlContainer" /> object. </returns>
        public static SqlContainer GetSqlContainer(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlContainer.ValidateResourceId(id);
                return new SqlContainer(client, id);
            }
            );
        }
        #endregion

        #region SqlStoredProcedure
        /// <summary>
        /// Gets an object representing a <see cref="SqlStoredProcedure" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlStoredProcedure.CreateResourceIdentifier" /> to create a <see cref="SqlStoredProcedure" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlStoredProcedure" /> object. </returns>
        public static SqlStoredProcedure GetSqlStoredProcedure(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlStoredProcedure.ValidateResourceId(id);
                return new SqlStoredProcedure(client, id);
            }
            );
        }
        #endregion

        #region SqlUserDefinedFunction
        /// <summary>
        /// Gets an object representing a <see cref="SqlUserDefinedFunction" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlUserDefinedFunction.CreateResourceIdentifier" /> to create a <see cref="SqlUserDefinedFunction" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlUserDefinedFunction" /> object. </returns>
        public static SqlUserDefinedFunction GetSqlUserDefinedFunction(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlUserDefinedFunction.ValidateResourceId(id);
                return new SqlUserDefinedFunction(client, id);
            }
            );
        }
        #endregion

        #region SqlTrigger
        /// <summary>
        /// Gets an object representing a <see cref="SqlTrigger" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlTrigger.CreateResourceIdentifier" /> to create a <see cref="SqlTrigger" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlTrigger" /> object. </returns>
        public static SqlTrigger GetSqlTrigger(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlTrigger.ValidateResourceId(id);
                return new SqlTrigger(client, id);
            }
            );
        }
        #endregion

        #region MongoDBDatabase
        /// <summary>
        /// Gets an object representing a <see cref="MongoDBDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MongoDBDatabase.CreateResourceIdentifier" /> to create a <see cref="MongoDBDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MongoDBDatabase" /> object. </returns>
        public static MongoDBDatabase GetMongoDBDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MongoDBDatabase.ValidateResourceId(id);
                return new MongoDBDatabase(client, id);
            }
            );
        }
        #endregion

        #region MongoDBCollection
        /// <summary>
        /// Gets an object representing a <see cref="MongoDBCollection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MongoDBCollection.CreateResourceIdentifier" /> to create a <see cref="MongoDBCollection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MongoDBCollection" /> object. </returns>
        public static MongoDBCollection GetMongoDBCollection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MongoDBCollection.ValidateResourceId(id);
                return new MongoDBCollection(client, id);
            }
            );
        }
        #endregion

        #region CosmosTable
        /// <summary>
        /// Gets an object representing a <see cref="CosmosTable" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CosmosTable.CreateResourceIdentifier" /> to create a <see cref="CosmosTable" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CosmosTable" /> object. </returns>
        public static CosmosTable GetCosmosTable(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CosmosTable.ValidateResourceId(id);
                return new CosmosTable(client, id);
            }
            );
        }
        #endregion

        #region CassandraKeyspace
        /// <summary>
        /// Gets an object representing a <see cref="CassandraKeyspace" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CassandraKeyspace.CreateResourceIdentifier" /> to create a <see cref="CassandraKeyspace" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CassandraKeyspace" /> object. </returns>
        public static CassandraKeyspace GetCassandraKeyspace(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CassandraKeyspace.ValidateResourceId(id);
                return new CassandraKeyspace(client, id);
            }
            );
        }
        #endregion

        #region CassandraTable
        /// <summary>
        /// Gets an object representing a <see cref="CassandraTable" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CassandraTable.CreateResourceIdentifier" /> to create a <see cref="CassandraTable" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CassandraTable" /> object. </returns>
        public static CassandraTable GetCassandraTable(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CassandraTable.ValidateResourceId(id);
                return new CassandraTable(client, id);
            }
            );
        }
        #endregion

        #region GremlinDatabase
        /// <summary>
        /// Gets an object representing a <see cref="GremlinDatabase" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GremlinDatabase.CreateResourceIdentifier" /> to create a <see cref="GremlinDatabase" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GremlinDatabase" /> object. </returns>
        public static GremlinDatabase GetGremlinDatabase(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GremlinDatabase.ValidateResourceId(id);
                return new GremlinDatabase(client, id);
            }
            );
        }
        #endregion

        #region GremlinGraph
        /// <summary>
        /// Gets an object representing a <see cref="GremlinGraph" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GremlinGraph.CreateResourceIdentifier" /> to create a <see cref="GremlinGraph" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GremlinGraph" /> object. </returns>
        public static GremlinGraph GetGremlinGraph(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GremlinGraph.ValidateResourceId(id);
                return new GremlinGraph(client, id);
            }
            );
        }
        #endregion

        #region CosmosDBLocation
        /// <summary>
        /// Gets an object representing a <see cref="CosmosDBLocation" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CosmosDBLocation.CreateResourceIdentifier" /> to create a <see cref="CosmosDBLocation" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CosmosDBLocation" /> object. </returns>
        public static CosmosDBLocation GetCosmosDBLocation(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CosmosDBLocation.ValidateResourceId(id);
                return new CosmosDBLocation(client, id);
            }
            );
        }
        #endregion

        #region PrivateEndpointConnection
        /// <summary>
        /// Gets an object representing a <see cref="PrivateEndpointConnection" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateEndpointConnection.CreateResourceIdentifier" /> to create a <see cref="PrivateEndpointConnection" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateEndpointConnection" /> object. </returns>
        public static PrivateEndpointConnection GetPrivateEndpointConnection(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateEndpointConnection.ValidateResourceId(id);
                return new PrivateEndpointConnection(client, id);
            }
            );
        }
        #endregion

        #region PrivateLinkResource
        /// <summary>
        /// Gets an object representing a <see cref="PrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateLinkResource.CreateResourceIdentifier" /> to create a <see cref="PrivateLinkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateLinkResource" /> object. </returns>
        public static PrivateLinkResource GetPrivateLinkResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateLinkResource.ValidateResourceId(id);
                return new PrivateLinkResource(client, id);
            }
            );
        }
        #endregion

        #region RestorableDatabaseAccount
        /// <summary>
        /// Gets an object representing a <see cref="RestorableDatabaseAccount" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RestorableDatabaseAccount.CreateResourceIdentifier" /> to create a <see cref="RestorableDatabaseAccount" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RestorableDatabaseAccount" /> object. </returns>
        public static RestorableDatabaseAccount GetRestorableDatabaseAccount(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RestorableDatabaseAccount.ValidateResourceId(id);
                return new RestorableDatabaseAccount(client, id);
            }
            );
        }
        #endregion

        #region ClusterResource
        /// <summary>
        /// Gets an object representing a <see cref="ClusterResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ClusterResource.CreateResourceIdentifier" /> to create a <see cref="ClusterResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ClusterResource" /> object. </returns>
        public static ClusterResource GetClusterResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ClusterResource.ValidateResourceId(id);
                return new ClusterResource(client, id);
            }
            );
        }
        #endregion

        #region DataCenterResource
        /// <summary>
        /// Gets an object representing a <see cref="DataCenterResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataCenterResource.CreateResourceIdentifier" /> to create a <see cref="DataCenterResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataCenterResource" /> object. </returns>
        public static DataCenterResource GetDataCenterResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DataCenterResource.ValidateResourceId(id);
                return new DataCenterResource(client, id);
            }
            );
        }
        #endregion
    }
}
