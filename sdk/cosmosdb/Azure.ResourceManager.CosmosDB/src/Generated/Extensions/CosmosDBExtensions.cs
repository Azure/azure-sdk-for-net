// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.CosmosDB. </summary>
    public static partial class CosmosDBExtensions
    {
        private static TenantResourceExtensionClient GetExtensionClient(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient((client) =>
            {
                return new TenantResourceExtensionClient(client, tenantResource.Id);
            }
            );
        }

        /// <summary>
        /// Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &apos;-&apos; character, and must be between 3 and 50 characters.
        /// Request Path: /providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}
        /// Operation Id: DatabaseAccounts_CheckNameExists
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public static async Task<Response<bool>> CheckNameExistsDatabaseAccountAsync(this TenantResource tenantResource, string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            return await GetExtensionClient(tenantResource).CheckNameExistsDatabaseAccountAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only lowercase letters, numbers, and the &apos;-&apos; character, and must be between 3 and 50 characters.
        /// Request Path: /providers/Microsoft.DocumentDB/databaseAccountNames/{accountName}
        /// Operation Id: DatabaseAccounts_CheckNameExists
        /// </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        public static Response<bool> CheckNameExistsDatabaseAccount(this TenantResource tenantResource, string accountName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(accountName, nameof(accountName));

            return GetExtensionClient(tenantResource).CheckNameExistsDatabaseAccount(accountName, cancellationToken);
        }

        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of CosmosDBLocationResources in the SubscriptionResource. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of CosmosDBLocationResources and their operations over a CosmosDBLocationResource. </returns>
        public static CosmosDBLocationCollection GetCosmosDBLocations(this SubscriptionResource subscriptionResource)
        {
            return GetExtensionClient(subscriptionResource).GetCosmosDBLocations();
        }

        /// <summary>
        /// Get the properties of an existing Cosmos DB location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> Cosmos DB region, with spaces between words and each word capitalized. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<CosmosDBLocationResource>> GetCosmosDBLocationAsync(this SubscriptionResource subscriptionResource, string location, CancellationToken cancellationToken = default)
        {
            return await subscriptionResource.GetCosmosDBLocations().GetAsync(location, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the properties of an existing Cosmos DB location
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}
        /// Operation Id: Locations_Get
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> Cosmos DB region, with spaces between words and each word capitalized. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<CosmosDBLocationResource> GetCosmosDBLocation(this SubscriptionResource subscriptionResource, string location, CancellationToken cancellationToken = default)
        {
            return subscriptionResource.GetCosmosDBLocations().Get(location, cancellationToken);
        }

        /// <summary>
        /// Lists all the Azure Cosmos DB database accounts available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
        /// Operation Id: DatabaseAccounts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="DatabaseAccountResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<DatabaseAccountResource> GetDatabaseAccountsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetDatabaseAccountsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the Azure Cosmos DB database accounts available under the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/databaseAccounts
        /// Operation Id: DatabaseAccounts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="DatabaseAccountResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<DatabaseAccountResource> GetDatabaseAccounts(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetDatabaseAccounts(cancellationToken);
        }

        /// <summary>
        /// Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts
        /// Operation Id: RestorableDatabaseAccounts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="RestorableDatabaseAccountResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<RestorableDatabaseAccountResource> GetRestorableDatabaseAccountsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetRestorableDatabaseAccountsAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires &apos;Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read&apos; permission.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/restorableDatabaseAccounts
        /// Operation Id: RestorableDatabaseAccounts_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="RestorableDatabaseAccountResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<RestorableDatabaseAccountResource> GetRestorableDatabaseAccounts(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetRestorableDatabaseAccounts(cancellationToken);
        }

        /// <summary>
        /// List all managed Cassandra clusters in this subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters
        /// Operation Id: CassandraClusters_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ClusterResource> GetClusterResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetClusterResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// List all managed Cassandra clusters in this subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/cassandraClusters
        /// Operation Id: CassandraClusters_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ClusterResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ClusterResource> GetClusterResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetClusterResources(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of DatabaseAccountResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of DatabaseAccountResources and their operations over a DatabaseAccountResource. </returns>
        public static DatabaseAccountCollection GetDatabaseAccounts(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetDatabaseAccounts();
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB database account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
        /// Operation Id: DatabaseAccounts_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<DatabaseAccountResource>> GetDatabaseAccountAsync(this ResourceGroupResource resourceGroupResource, string accountName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetDatabaseAccounts().GetAsync(accountName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves the properties of an existing Azure Cosmos DB database account.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}
        /// Operation Id: DatabaseAccounts_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="accountName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="accountName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<DatabaseAccountResource> GetDatabaseAccount(this ResourceGroupResource resourceGroupResource, string accountName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetDatabaseAccounts().Get(accountName, cancellationToken);
        }

        /// <summary> Gets a collection of ClusterResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ClusterResources and their operations over a ClusterResource. </returns>
        public static ClusterResourceCollection GetClusterResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetClusterResources();
        }

        /// <summary>
        /// Get the properties of a managed Cassandra cluster.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}
        /// Operation Id: CassandraClusters_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="clusterName"> Managed Cassandra cluster name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ClusterResource>> GetClusterResourceAsync(this ResourceGroupResource resourceGroupResource, string clusterName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetClusterResources().GetAsync(clusterName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get the properties of a managed Cassandra cluster.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/cassandraClusters/{clusterName}
        /// Operation Id: CassandraClusters_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="clusterName"> Managed Cassandra cluster name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="clusterName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="clusterName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ClusterResource> GetClusterResource(this ResourceGroupResource resourceGroupResource, string clusterName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetClusterResources().Get(clusterName, cancellationToken);
        }

        #region DatabaseAccountResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountResource" /> object. </returns>
        public static DatabaseAccountResource GetDatabaseAccountResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountResource.ValidateResourceId(id);
                return new DatabaseAccountResource(client, id);
            }
            );
        }
        #endregion

        #region SqlDatabaseResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlDatabaseResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlDatabaseResource.CreateResourceIdentifier" /> to create a <see cref="SqlDatabaseResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlDatabaseResource" /> object. </returns>
        public static SqlDatabaseResource GetSqlDatabaseResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlDatabaseResource.ValidateResourceId(id);
                return new SqlDatabaseResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountSqlDatabaseThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountSqlDatabaseThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountSqlDatabaseThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountSqlDatabaseThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountSqlDatabaseThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountSqlDatabaseThroughputSettingResource GetDatabaseAccountSqlDatabaseThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountSqlDatabaseThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountSqlDatabaseThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountSqlDatabaseContainerThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountSqlDatabaseContainerThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountSqlDatabaseContainerThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountSqlDatabaseContainerThroughputSettingResource GetDatabaseAccountSqlDatabaseContainerThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountSqlDatabaseContainerThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountSqlDatabaseContainerThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountMongodbDatabaseThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountMongodbDatabaseThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountMongodbDatabaseThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountMongodbDatabaseThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountMongodbDatabaseThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountMongodbDatabaseThroughputSettingResource GetDatabaseAccountMongodbDatabaseThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountMongodbDatabaseThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountMongodbDatabaseThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource GetDatabaseAccountMongodbDatabaseCollectionThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountMongodbDatabaseCollectionThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountTableThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountTableThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountTableThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountTableThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountTableThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountTableThroughputSettingResource GetDatabaseAccountTableThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountTableThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountTableThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountCassandraKeyspaceThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountCassandraKeyspaceThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountCassandraKeyspaceThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountCassandraKeyspaceThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountCassandraKeyspaceThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountCassandraKeyspaceThroughputSettingResource GetDatabaseAccountCassandraKeyspaceThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountCassandraKeyspaceThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountCassandraKeyspaceThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountCassandraKeyspaceTableThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountCassandraKeyspaceTableThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountCassandraKeyspaceTableThroughputSettingResource GetDatabaseAccountCassandraKeyspaceTableThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountCassandraKeyspaceTableThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountCassandraKeyspaceTableThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountGremlinDatabaseThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountGremlinDatabaseThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountGremlinDatabaseThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountGremlinDatabaseThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountGremlinDatabaseThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountGremlinDatabaseThroughputSettingResource GetDatabaseAccountGremlinDatabaseThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountGremlinDatabaseThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountGremlinDatabaseThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region DatabaseAccountGremlinDatabaseGraphThroughputSettingResource
        /// <summary>
        /// Gets an object representing a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSettingResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSettingResource.CreateResourceIdentifier" /> to create a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSettingResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DatabaseAccountGremlinDatabaseGraphThroughputSettingResource" /> object. </returns>
        public static DatabaseAccountGremlinDatabaseGraphThroughputSettingResource GetDatabaseAccountGremlinDatabaseGraphThroughputSettingResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DatabaseAccountGremlinDatabaseGraphThroughputSettingResource.ValidateResourceId(id);
                return new DatabaseAccountGremlinDatabaseGraphThroughputSettingResource(client, id);
            }
            );
        }
        #endregion

        #region SqlContainerResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlContainerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlContainerResource.CreateResourceIdentifier" /> to create a <see cref="SqlContainerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlContainerResource" /> object. </returns>
        public static SqlContainerResource GetSqlContainerResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlContainerResource.ValidateResourceId(id);
                return new SqlContainerResource(client, id);
            }
            );
        }
        #endregion

        #region SqlStoredProcedureResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlStoredProcedureResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlStoredProcedureResource.CreateResourceIdentifier" /> to create a <see cref="SqlStoredProcedureResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlStoredProcedureResource" /> object. </returns>
        public static SqlStoredProcedureResource GetSqlStoredProcedureResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlStoredProcedureResource.ValidateResourceId(id);
                return new SqlStoredProcedureResource(client, id);
            }
            );
        }
        #endregion

        #region SqlUserDefinedFunctionResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlUserDefinedFunctionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlUserDefinedFunctionResource.CreateResourceIdentifier" /> to create a <see cref="SqlUserDefinedFunctionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlUserDefinedFunctionResource" /> object. </returns>
        public static SqlUserDefinedFunctionResource GetSqlUserDefinedFunctionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlUserDefinedFunctionResource.ValidateResourceId(id);
                return new SqlUserDefinedFunctionResource(client, id);
            }
            );
        }
        #endregion

        #region SqlTriggerResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlTriggerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlTriggerResource.CreateResourceIdentifier" /> to create a <see cref="SqlTriggerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlTriggerResource" /> object. </returns>
        public static SqlTriggerResource GetSqlTriggerResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlTriggerResource.ValidateResourceId(id);
                return new SqlTriggerResource(client, id);
            }
            );
        }
        #endregion

        #region SqlRoleDefinitionResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlRoleDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlRoleDefinitionResource.CreateResourceIdentifier" /> to create a <see cref="SqlRoleDefinitionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlRoleDefinitionResource" /> object. </returns>
        public static SqlRoleDefinitionResource GetSqlRoleDefinitionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlRoleDefinitionResource.ValidateResourceId(id);
                return new SqlRoleDefinitionResource(client, id);
            }
            );
        }
        #endregion

        #region SqlRoleAssignmentResource
        /// <summary>
        /// Gets an object representing a <see cref="SqlRoleAssignmentResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SqlRoleAssignmentResource.CreateResourceIdentifier" /> to create a <see cref="SqlRoleAssignmentResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SqlRoleAssignmentResource" /> object. </returns>
        public static SqlRoleAssignmentResource GetSqlRoleAssignmentResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SqlRoleAssignmentResource.ValidateResourceId(id);
                return new SqlRoleAssignmentResource(client, id);
            }
            );
        }
        #endregion

        #region MongoDBDatabaseResource
        /// <summary>
        /// Gets an object representing a <see cref="MongoDBDatabaseResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MongoDBDatabaseResource.CreateResourceIdentifier" /> to create a <see cref="MongoDBDatabaseResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MongoDBDatabaseResource" /> object. </returns>
        public static MongoDBDatabaseResource GetMongoDBDatabaseResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MongoDBDatabaseResource.ValidateResourceId(id);
                return new MongoDBDatabaseResource(client, id);
            }
            );
        }
        #endregion

        #region MongoDBCollectionResource
        /// <summary>
        /// Gets an object representing a <see cref="MongoDBCollectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MongoDBCollectionResource.CreateResourceIdentifier" /> to create a <see cref="MongoDBCollectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MongoDBCollectionResource" /> object. </returns>
        public static MongoDBCollectionResource GetMongoDBCollectionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MongoDBCollectionResource.ValidateResourceId(id);
                return new MongoDBCollectionResource(client, id);
            }
            );
        }
        #endregion

        #region CosmosTableResource
        /// <summary>
        /// Gets an object representing a <see cref="CosmosTableResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CosmosTableResource.CreateResourceIdentifier" /> to create a <see cref="CosmosTableResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CosmosTableResource" /> object. </returns>
        public static CosmosTableResource GetCosmosTableResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CosmosTableResource.ValidateResourceId(id);
                return new CosmosTableResource(client, id);
            }
            );
        }
        #endregion

        #region CassandraKeyspaceResource
        /// <summary>
        /// Gets an object representing a <see cref="CassandraKeyspaceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CassandraKeyspaceResource.CreateResourceIdentifier" /> to create a <see cref="CassandraKeyspaceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CassandraKeyspaceResource" /> object. </returns>
        public static CassandraKeyspaceResource GetCassandraKeyspaceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CassandraKeyspaceResource.ValidateResourceId(id);
                return new CassandraKeyspaceResource(client, id);
            }
            );
        }
        #endregion

        #region CassandraTableResource
        /// <summary>
        /// Gets an object representing a <see cref="CassandraTableResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CassandraTableResource.CreateResourceIdentifier" /> to create a <see cref="CassandraTableResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CassandraTableResource" /> object. </returns>
        public static CassandraTableResource GetCassandraTableResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CassandraTableResource.ValidateResourceId(id);
                return new CassandraTableResource(client, id);
            }
            );
        }
        #endregion

        #region GremlinDatabaseResource
        /// <summary>
        /// Gets an object representing a <see cref="GremlinDatabaseResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GremlinDatabaseResource.CreateResourceIdentifier" /> to create a <see cref="GremlinDatabaseResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GremlinDatabaseResource" /> object. </returns>
        public static GremlinDatabaseResource GetGremlinDatabaseResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GremlinDatabaseResource.ValidateResourceId(id);
                return new GremlinDatabaseResource(client, id);
            }
            );
        }
        #endregion

        #region GremlinGraphResource
        /// <summary>
        /// Gets an object representing a <see cref="GremlinGraphResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="GremlinGraphResource.CreateResourceIdentifier" /> to create a <see cref="GremlinGraphResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="GremlinGraphResource" /> object. </returns>
        public static GremlinGraphResource GetGremlinGraphResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                GremlinGraphResource.ValidateResourceId(id);
                return new GremlinGraphResource(client, id);
            }
            );
        }
        #endregion

        #region CosmosDBLocationResource
        /// <summary>
        /// Gets an object representing a <see cref="CosmosDBLocationResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="CosmosDBLocationResource.CreateResourceIdentifier" /> to create a <see cref="CosmosDBLocationResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="CosmosDBLocationResource" /> object. </returns>
        public static CosmosDBLocationResource GetCosmosDBLocationResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                CosmosDBLocationResource.ValidateResourceId(id);
                return new CosmosDBLocationResource(client, id);
            }
            );
        }
        #endregion

        #region PrivateEndpointConnectionResource
        /// <summary>
        /// Gets an object representing a <see cref="PrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateEndpointConnectionResource.CreateResourceIdentifier" /> to create a <see cref="PrivateEndpointConnectionResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateEndpointConnectionResource" /> object. </returns>
        public static PrivateEndpointConnectionResource GetPrivateEndpointConnectionResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateEndpointConnectionResource.ValidateResourceId(id);
                return new PrivateEndpointConnectionResource(client, id);
            }
            );
        }
        #endregion

        #region PrivateLinkResource
        /// <summary>
        /// Gets an object representing a <see cref="PrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PrivateLinkResource.CreateResourceIdentifier" /> to create a <see cref="PrivateLinkResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PrivateLinkResource" /> object. </returns>
        public static PrivateLinkResource GetPrivateLinkResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PrivateLinkResource.ValidateResourceId(id);
                return new PrivateLinkResource(client, id);
            }
            );
        }
        #endregion

        #region RestorableDatabaseAccountResource
        /// <summary>
        /// Gets an object representing a <see cref="RestorableDatabaseAccountResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="RestorableDatabaseAccountResource.CreateResourceIdentifier" /> to create a <see cref="RestorableDatabaseAccountResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="RestorableDatabaseAccountResource" /> object. </returns>
        public static RestorableDatabaseAccountResource GetRestorableDatabaseAccountResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                RestorableDatabaseAccountResource.ValidateResourceId(id);
                return new RestorableDatabaseAccountResource(client, id);
            }
            );
        }
        #endregion

        #region ClusterResource
        /// <summary>
        /// Gets an object representing a <see cref="ClusterResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ClusterResource.CreateResourceIdentifier" /> to create a <see cref="ClusterResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ClusterResource" /> object. </returns>
        public static ClusterResource GetClusterResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ClusterResource.ValidateResourceId(id);
                return new ClusterResource(client, id);
            }
            );
        }
        #endregion

        #region DataCenterResource
        /// <summary>
        /// Gets an object representing a <see cref="DataCenterResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DataCenterResource.CreateResourceIdentifier" /> to create a <see cref="DataCenterResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DataCenterResource" /> object. </returns>
        public static DataCenterResource GetDataCenterResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DataCenterResource.ValidateResourceId(id);
                return new DataCenterResource(client, id);
            }
            );
        }
        #endregion
    }
}
