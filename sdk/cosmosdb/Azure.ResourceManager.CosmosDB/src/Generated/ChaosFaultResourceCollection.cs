// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary>
    /// A class representing a collection of <see cref="ChaosFaultResource"/> and their operations.
    /// Each <see cref="ChaosFaultResource"/> in the collection will belong to the same instance of <see cref="CosmosDBAccountResource"/>.
    /// To get a <see cref="ChaosFaultResourceCollection"/> instance call the GetChaosFaultResources method from an instance of <see cref="CosmosDBAccountResource"/>.
    /// </summary>
    public partial class ChaosFaultResourceCollection : ArmCollection, IEnumerable<ChaosFaultResource>, IAsyncEnumerable<ChaosFaultResource>
    {
        private readonly ClientDiagnostics _chaosFaultResourceChaosFaultClientDiagnostics;
        private readonly ChaosFaultRestOperations _chaosFaultResourceChaosFaultRestClient;

        /// <summary> Initializes a new instance of the <see cref="ChaosFaultResourceCollection"/> class for mocking. </summary>
        protected ChaosFaultResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="ChaosFaultResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal ChaosFaultResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _chaosFaultResourceChaosFaultClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.CosmosDB", ChaosFaultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(ChaosFaultResource.ResourceType, out string chaosFaultResourceChaosFaultApiVersion);
            _chaosFaultResourceChaosFaultRestClient = new ChaosFaultRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, chaosFaultResourceChaosFaultApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != CosmosDBAccountResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, CosmosDBAccountResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Enable, disable Chaos Fault in a CosmosDB account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults/{chaosFault}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_EnableDisable</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="chaosFault"> The name of the ChaosFault. </param>
        /// <param name="data"> A request object to enable/disable the chaos fault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="chaosFault"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="chaosFault"/> or <paramref name="data"/> is null. </exception>
        public virtual async Task<ArmOperation<ChaosFaultResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string chaosFault, ChaosFaultResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(chaosFault, nameof(chaosFault));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _chaosFaultResourceChaosFaultClientDiagnostics.CreateScope("ChaosFaultResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _chaosFaultResourceChaosFaultRestClient.EnableDisableAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, data, cancellationToken).ConfigureAwait(false);
                var operation = new CosmosDBArmOperation<ChaosFaultResource>(new ChaosFaultResourceOperationSource(Client), _chaosFaultResourceChaosFaultClientDiagnostics, Pipeline, _chaosFaultResourceChaosFaultRestClient.CreateEnableDisableRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Enable, disable Chaos Fault in a CosmosDB account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults/{chaosFault}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_EnableDisable</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="chaosFault"> The name of the ChaosFault. </param>
        /// <param name="data"> A request object to enable/disable the chaos fault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="chaosFault"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="chaosFault"/> or <paramref name="data"/> is null. </exception>
        public virtual ArmOperation<ChaosFaultResource> CreateOrUpdate(WaitUntil waitUntil, string chaosFault, ChaosFaultResourceData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(chaosFault, nameof(chaosFault));
            Argument.AssertNotNull(data, nameof(data));

            using var scope = _chaosFaultResourceChaosFaultClientDiagnostics.CreateScope("ChaosFaultResourceCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _chaosFaultResourceChaosFaultRestClient.EnableDisable(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, data, cancellationToken);
                var operation = new CosmosDBArmOperation<ChaosFaultResource>(new ChaosFaultResourceOperationSource(Client), _chaosFaultResourceChaosFaultClientDiagnostics, Pipeline, _chaosFaultResourceChaosFaultRestClient.CreateEnableDisableRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, data).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Chaos Fault for a CosmosdB account for a particular Chaos Fault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults/{chaosFault}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="chaosFault"> The name of the ChaosFault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="chaosFault"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="chaosFault"/> is null. </exception>
        public virtual async Task<Response<ChaosFaultResource>> GetAsync(string chaosFault, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(chaosFault, nameof(chaosFault));

            using var scope = _chaosFaultResourceChaosFaultClientDiagnostics.CreateScope("ChaosFaultResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _chaosFaultResourceChaosFaultRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ChaosFaultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get Chaos Fault for a CosmosdB account for a particular Chaos Fault.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults/{chaosFault}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="chaosFault"> The name of the ChaosFault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="chaosFault"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="chaosFault"/> is null. </exception>
        public virtual Response<ChaosFaultResource> Get(string chaosFault, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(chaosFault, nameof(chaosFault));

            using var scope = _chaosFaultResourceChaosFaultClientDiagnostics.CreateScope("ChaosFaultResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _chaosFaultResourceChaosFaultRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new ChaosFaultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List Chaos Faults for CosmosDB account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ChaosFaultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ChaosFaultResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _chaosFaultResourceChaosFaultRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _chaosFaultResourceChaosFaultRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new ChaosFaultResource(Client, ChaosFaultResourceData.DeserializeChaosFaultResourceData(e)), _chaosFaultResourceChaosFaultClientDiagnostics, Pipeline, "ChaosFaultResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// List Chaos Faults for CosmosDB account.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_List</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ChaosFaultResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ChaosFaultResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _chaosFaultResourceChaosFaultRestClient.CreateListRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _chaosFaultResourceChaosFaultRestClient.CreateListNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Name);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new ChaosFaultResource(Client, ChaosFaultResourceData.DeserializeChaosFaultResourceData(e)), _chaosFaultResourceChaosFaultClientDiagnostics, Pipeline, "ChaosFaultResourceCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults/{chaosFault}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="chaosFault"> The name of the ChaosFault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="chaosFault"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="chaosFault"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string chaosFault, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(chaosFault, nameof(chaosFault));

            using var scope = _chaosFaultResourceChaosFaultClientDiagnostics.CreateScope("ChaosFaultResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _chaosFaultResourceChaosFaultRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults/{chaosFault}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="chaosFault"> The name of the ChaosFault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="chaosFault"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="chaosFault"/> is null. </exception>
        public virtual Response<bool> Exists(string chaosFault, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(chaosFault, nameof(chaosFault));

            using var scope = _chaosFaultResourceChaosFaultClientDiagnostics.CreateScope("ChaosFaultResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _chaosFaultResourceChaosFaultRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults/{chaosFault}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="chaosFault"> The name of the ChaosFault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="chaosFault"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="chaosFault"/> is null. </exception>
        public virtual async Task<NullableResponse<ChaosFaultResource>> GetIfExistsAsync(string chaosFault, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(chaosFault, nameof(chaosFault));

            using var scope = _chaosFaultResourceChaosFaultClientDiagnostics.CreateScope("ChaosFaultResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _chaosFaultResourceChaosFaultRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return new NoValueResponse<ChaosFaultResource>(response.GetRawResponse());
                return Response.FromValue(new ChaosFaultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/chaosFaults/{chaosFault}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ChaosFault_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-09-01-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="ChaosFaultResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="chaosFault"> The name of the ChaosFault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="chaosFault"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="chaosFault"/> is null. </exception>
        public virtual NullableResponse<ChaosFaultResource> GetIfExists(string chaosFault, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(chaosFault, nameof(chaosFault));

            using var scope = _chaosFaultResourceChaosFaultClientDiagnostics.CreateScope("ChaosFaultResourceCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _chaosFaultResourceChaosFaultRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, chaosFault, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return new NoValueResponse<ChaosFaultResource>(response.GetRawResponse());
                return Response.FromValue(new ChaosFaultResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<ChaosFaultResource> IEnumerable<ChaosFaultResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<ChaosFaultResource> IAsyncEnumerable<ChaosFaultResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
