// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.CosmosDB.Models;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary> The SqlResources service client. </summary>
    public partial class SqlResourcesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal SqlResourcesRestOperations RestClient { get; }

        /// <summary> Initializes a new instance of SqlResourcesOperations for mocking. </summary>
        protected SqlResourcesOperations()
        {
        }

        /// <summary> Initializes a new instance of SqlResourcesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal SqlResourcesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new SqlResourcesRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the SQL database under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SqlDatabaseGetResults>> GetSqlDatabaseAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlDatabase");
            scope.Start();
            try
            {
                return await RestClient.GetSqlDatabaseAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL database under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SqlDatabaseGetResults> GetSqlDatabase(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlDatabase");
            scope.Start();
            try
            {
                return RestClient.GetSqlDatabase(resourceGroupName, accountName, databaseName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetSqlDatabaseThroughputAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlDatabaseThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetSqlDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetSqlDatabaseThroughput(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlDatabaseThroughput");
            scope.Start();
            try
            {
                return RestClient.GetSqlDatabaseThroughput(resourceGroupName, accountName, databaseName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL container under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SqlContainerGetResults>> GetSqlContainerAsync(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlContainer");
            scope.Start();
            try
            {
                return await RestClient.GetSqlContainerAsync(resourceGroupName, accountName, databaseName, containerName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL container under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SqlContainerGetResults> GetSqlContainer(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlContainer");
            scope.Start();
            try
            {
                return RestClient.GetSqlContainer(resourceGroupName, accountName, databaseName, containerName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetSqlContainerThroughputAsync(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlContainerThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetSqlContainerThroughputAsync(resourceGroupName, accountName, databaseName, containerName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetSqlContainerThroughput(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlContainerThroughput");
            scope.Start();
            try
            {
                return RestClient.GetSqlContainerThroughput(resourceGroupName, accountName, databaseName, containerName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL storedProcedure under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="storedProcedureName"> Cosmos DB storedProcedure name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SqlStoredProcedureGetResults>> GetSqlStoredProcedureAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlStoredProcedure");
            scope.Start();
            try
            {
                return await RestClient.GetSqlStoredProcedureAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL storedProcedure under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="storedProcedureName"> Cosmos DB storedProcedure name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SqlStoredProcedureGetResults> GetSqlStoredProcedure(string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlStoredProcedure");
            scope.Start();
            try
            {
                return RestClient.GetSqlStoredProcedure(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="userDefinedFunctionName"> Cosmos DB userDefinedFunction name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SqlUserDefinedFunctionGetResults>> GetSqlUserDefinedFunctionAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlUserDefinedFunction");
            scope.Start();
            try
            {
                return await RestClient.GetSqlUserDefinedFunctionAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="userDefinedFunctionName"> Cosmos DB userDefinedFunction name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SqlUserDefinedFunctionGetResults> GetSqlUserDefinedFunction(string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlUserDefinedFunction");
            scope.Start();
            try
            {
                return RestClient.GetSqlUserDefinedFunction(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL trigger under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="triggerName"> Cosmos DB trigger name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<SqlTriggerGetResults>> GetSqlTriggerAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlTrigger");
            scope.Start();
            try
            {
                return await RestClient.GetSqlTriggerAsync(resourceGroupName, accountName, databaseName, containerName, triggerName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the SQL trigger under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="triggerName"> Cosmos DB trigger name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SqlTriggerGetResults> GetSqlTrigger(string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.GetSqlTrigger");
            scope.Start();
            try
            {
                return RestClient.GetSqlTrigger(resourceGroupName, accountName, databaseName, containerName, triggerName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the SQL databases under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual AsyncPageable<SqlDatabaseGetResults> ListSqlDatabasesAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            async Task<Page<SqlDatabaseGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlDatabases");
                scope.Start();
                try
                {
                    var response = await RestClient.ListSqlDatabasesAsync(resourceGroupName, accountName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL databases under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual Pageable<SqlDatabaseGetResults> ListSqlDatabases(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            Page<SqlDatabaseGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlDatabases");
                scope.Start();
                try
                {
                    var response = RestClient.ListSqlDatabases(resourceGroupName, accountName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL container under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual AsyncPageable<SqlContainerGetResults> ListSqlContainersAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            async Task<Page<SqlContainerGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlContainers");
                scope.Start();
                try
                {
                    var response = await RestClient.ListSqlContainersAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL container under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual Pageable<SqlContainerGetResults> ListSqlContainers(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            Page<SqlContainerGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlContainers");
                scope.Start();
                try
                {
                    var response = RestClient.ListSqlContainers(resourceGroupName, accountName, databaseName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL storedProcedure under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual AsyncPageable<SqlStoredProcedureGetResults> ListSqlStoredProceduresAsync(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            async Task<Page<SqlStoredProcedureGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlStoredProcedures");
                scope.Start();
                try
                {
                    var response = await RestClient.ListSqlStoredProceduresAsync(resourceGroupName, accountName, databaseName, containerName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL storedProcedure under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual Pageable<SqlStoredProcedureGetResults> ListSqlStoredProcedures(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            Page<SqlStoredProcedureGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlStoredProcedures");
                scope.Start();
                try
                {
                    var response = RestClient.ListSqlStoredProcedures(resourceGroupName, accountName, databaseName, containerName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual AsyncPageable<SqlUserDefinedFunctionGetResults> ListSqlUserDefinedFunctionsAsync(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            async Task<Page<SqlUserDefinedFunctionGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlUserDefinedFunctions");
                scope.Start();
                try
                {
                    var response = await RestClient.ListSqlUserDefinedFunctionsAsync(resourceGroupName, accountName, databaseName, containerName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual Pageable<SqlUserDefinedFunctionGetResults> ListSqlUserDefinedFunctions(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            Page<SqlUserDefinedFunctionGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlUserDefinedFunctions");
                scope.Start();
                try
                {
                    var response = RestClient.ListSqlUserDefinedFunctions(resourceGroupName, accountName, databaseName, containerName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL trigger under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual AsyncPageable<SqlTriggerGetResults> ListSqlTriggersAsync(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            async Task<Page<SqlTriggerGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlTriggers");
                scope.Start();
                try
                {
                    var response = await RestClient.ListSqlTriggersAsync(resourceGroupName, accountName, databaseName, containerName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the SQL trigger under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual Pageable<SqlTriggerGetResults> ListSqlTriggers(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            Page<SqlTriggerGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.ListSqlTriggers");
                scope.Start();
                try
                {
                    var response = RestClient.ListSqlTriggers(resourceGroupName, accountName, databaseName, containerName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Create or update an Azure Cosmos DB SQL database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="createUpdateSqlDatabaseParameters"> The parameters to provide for the current SQL database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="createUpdateSqlDatabaseParameters"/> is null. </exception>
        public virtual async Task<SqlResourcesCreateUpdateSqlDatabaseOperation> StartCreateUpdateSqlDatabaseAsync(string resourceGroupName, string accountName, string databaseName, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (createUpdateSqlDatabaseParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlDatabaseParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlDatabase");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateSqlDatabaseAsync(resourceGroupName, accountName, databaseName, createUpdateSqlDatabaseParameters, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesCreateUpdateSqlDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlDatabaseRequest(resourceGroupName, accountName, databaseName, createUpdateSqlDatabaseParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="createUpdateSqlDatabaseParameters"> The parameters to provide for the current SQL database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="createUpdateSqlDatabaseParameters"/> is null. </exception>
        public virtual SqlResourcesCreateUpdateSqlDatabaseOperation StartCreateUpdateSqlDatabase(string resourceGroupName, string accountName, string databaseName, SqlDatabaseCreateUpdateParameters createUpdateSqlDatabaseParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (createUpdateSqlDatabaseParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlDatabaseParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlDatabase");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateSqlDatabase(resourceGroupName, accountName, databaseName, createUpdateSqlDatabaseParameters, cancellationToken);
                return new SqlResourcesCreateUpdateSqlDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlDatabaseRequest(resourceGroupName, accountName, databaseName, createUpdateSqlDatabaseParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<SqlResourcesDeleteSqlDatabaseOperation> StartDeleteSqlDatabaseAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlDatabase");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteSqlDatabaseAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesDeleteSqlDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlDatabaseRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual SqlResourcesDeleteSqlDatabaseOperation StartDeleteSqlDatabase(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlDatabase");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteSqlDatabase(resourceGroupName, accountName, databaseName, cancellationToken);
                return new SqlResourcesDeleteSqlDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlDatabaseRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB SQL database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="updateThroughputParameters"> The parameters to provide for the RUs per second of the current SQL database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<SqlResourcesUpdateSqlDatabaseThroughputOperation> StartUpdateSqlDatabaseThroughputAsync(string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartUpdateSqlDatabaseThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateSqlDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesUpdateSqlDatabaseThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateSqlDatabaseThroughputRequest(resourceGroupName, accountName, databaseName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB SQL database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="updateThroughputParameters"> The parameters to provide for the RUs per second of the current SQL database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual SqlResourcesUpdateSqlDatabaseThroughputOperation StartUpdateSqlDatabaseThroughput(string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartUpdateSqlDatabaseThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateSqlDatabaseThroughput(resourceGroupName, accountName, databaseName, updateThroughputParameters, cancellationToken);
                return new SqlResourcesUpdateSqlDatabaseThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateSqlDatabaseThroughputRequest(resourceGroupName, accountName, databaseName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<SqlResourcesMigrateSqlDatabaseToAutoscaleOperation> StartMigrateSqlDatabaseToAutoscaleAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartMigrateSqlDatabaseToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateSqlDatabaseToAutoscaleAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesMigrateSqlDatabaseToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateSqlDatabaseToAutoscaleRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual SqlResourcesMigrateSqlDatabaseToAutoscaleOperation StartMigrateSqlDatabaseToAutoscale(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartMigrateSqlDatabaseToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateSqlDatabaseToAutoscale(resourceGroupName, accountName, databaseName, cancellationToken);
                return new SqlResourcesMigrateSqlDatabaseToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateSqlDatabaseToAutoscaleRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<SqlResourcesMigrateSqlDatabaseToManualThroughputOperation> StartMigrateSqlDatabaseToManualThroughputAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartMigrateSqlDatabaseToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateSqlDatabaseToManualThroughputAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesMigrateSqlDatabaseToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateSqlDatabaseToManualThroughputRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual SqlResourcesMigrateSqlDatabaseToManualThroughputOperation StartMigrateSqlDatabaseToManualThroughput(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartMigrateSqlDatabaseToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateSqlDatabaseToManualThroughput(resourceGroupName, accountName, databaseName, cancellationToken);
                return new SqlResourcesMigrateSqlDatabaseToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateSqlDatabaseToManualThroughputRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL container. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="createUpdateSqlContainerParameters"> The parameters to provide for the current SQL container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="createUpdateSqlContainerParameters"/> is null. </exception>
        public virtual async Task<SqlResourcesCreateUpdateSqlContainerOperation> StartCreateUpdateSqlContainerAsync(string resourceGroupName, string accountName, string databaseName, string containerName, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (createUpdateSqlContainerParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlContainerParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlContainer");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateSqlContainerAsync(resourceGroupName, accountName, databaseName, containerName, createUpdateSqlContainerParameters, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesCreateUpdateSqlContainerOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlContainerRequest(resourceGroupName, accountName, databaseName, containerName, createUpdateSqlContainerParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL container. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="createUpdateSqlContainerParameters"> The parameters to provide for the current SQL container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="createUpdateSqlContainerParameters"/> is null. </exception>
        public virtual SqlResourcesCreateUpdateSqlContainerOperation StartCreateUpdateSqlContainer(string resourceGroupName, string accountName, string databaseName, string containerName, SqlContainerCreateUpdateParameters createUpdateSqlContainerParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (createUpdateSqlContainerParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlContainerParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlContainer");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateSqlContainer(resourceGroupName, accountName, databaseName, containerName, createUpdateSqlContainerParameters, cancellationToken);
                return new SqlResourcesCreateUpdateSqlContainerOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlContainerRequest(resourceGroupName, accountName, databaseName, containerName, createUpdateSqlContainerParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL container. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual async Task<SqlResourcesDeleteSqlContainerOperation> StartDeleteSqlContainerAsync(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlContainer");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteSqlContainerAsync(resourceGroupName, accountName, databaseName, containerName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesDeleteSqlContainerOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlContainerRequest(resourceGroupName, accountName, databaseName, containerName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL container. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual SqlResourcesDeleteSqlContainerOperation StartDeleteSqlContainer(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlContainer");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteSqlContainer(resourceGroupName, accountName, databaseName, containerName, cancellationToken);
                return new SqlResourcesDeleteSqlContainerOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlContainerRequest(resourceGroupName, accountName, databaseName, containerName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB SQL container. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="updateThroughputParameters"> The parameters to provide for the RUs per second of the current SQL container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<SqlResourcesUpdateSqlContainerThroughputOperation> StartUpdateSqlContainerThroughputAsync(string resourceGroupName, string accountName, string databaseName, string containerName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartUpdateSqlContainerThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateSqlContainerThroughputAsync(resourceGroupName, accountName, databaseName, containerName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesUpdateSqlContainerThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateSqlContainerThroughputRequest(resourceGroupName, accountName, databaseName, containerName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB SQL container. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="updateThroughputParameters"> The parameters to provide for the RUs per second of the current SQL container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual SqlResourcesUpdateSqlContainerThroughputOperation StartUpdateSqlContainerThroughput(string resourceGroupName, string accountName, string databaseName, string containerName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartUpdateSqlContainerThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateSqlContainerThroughput(resourceGroupName, accountName, databaseName, containerName, updateThroughputParameters, cancellationToken);
                return new SqlResourcesUpdateSqlContainerThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateSqlContainerThroughputRequest(resourceGroupName, accountName, databaseName, containerName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual async Task<SqlResourcesMigrateSqlContainerToAutoscaleOperation> StartMigrateSqlContainerToAutoscaleAsync(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartMigrateSqlContainerToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateSqlContainerToAutoscaleAsync(resourceGroupName, accountName, databaseName, containerName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesMigrateSqlContainerToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateSqlContainerToAutoscaleRequest(resourceGroupName, accountName, databaseName, containerName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual SqlResourcesMigrateSqlContainerToAutoscaleOperation StartMigrateSqlContainerToAutoscale(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartMigrateSqlContainerToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateSqlContainerToAutoscale(resourceGroupName, accountName, databaseName, containerName, cancellationToken);
                return new SqlResourcesMigrateSqlContainerToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateSqlContainerToAutoscaleRequest(resourceGroupName, accountName, databaseName, containerName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual async Task<SqlResourcesMigrateSqlContainerToManualThroughputOperation> StartMigrateSqlContainerToManualThroughputAsync(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartMigrateSqlContainerToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateSqlContainerToManualThroughputAsync(resourceGroupName, accountName, databaseName, containerName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesMigrateSqlContainerToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateSqlContainerToManualThroughputRequest(resourceGroupName, accountName, databaseName, containerName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="containerName"/> is null. </exception>
        public virtual SqlResourcesMigrateSqlContainerToManualThroughputOperation StartMigrateSqlContainerToManualThroughput(string resourceGroupName, string accountName, string databaseName, string containerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartMigrateSqlContainerToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateSqlContainerToManualThroughput(resourceGroupName, accountName, databaseName, containerName, cancellationToken);
                return new SqlResourcesMigrateSqlContainerToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateSqlContainerToManualThroughputRequest(resourceGroupName, accountName, databaseName, containerName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL storedProcedure. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="storedProcedureName"> Cosmos DB storedProcedure name. </param>
        /// <param name="createUpdateSqlStoredProcedureParameters"> The parameters to provide for the current SQL storedProcedure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, <paramref name="storedProcedureName"/>, or <paramref name="createUpdateSqlStoredProcedureParameters"/> is null. </exception>
        public virtual async Task<SqlResourcesCreateUpdateSqlStoredProcedureOperation> StartCreateUpdateSqlStoredProcedureAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (storedProcedureName == null)
            {
                throw new ArgumentNullException(nameof(storedProcedureName));
            }
            if (createUpdateSqlStoredProcedureParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlStoredProcedureParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlStoredProcedure");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateSqlStoredProcedureAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, createUpdateSqlStoredProcedureParameters, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesCreateUpdateSqlStoredProcedureOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlStoredProcedureRequest(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, createUpdateSqlStoredProcedureParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL storedProcedure. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="storedProcedureName"> Cosmos DB storedProcedure name. </param>
        /// <param name="createUpdateSqlStoredProcedureParameters"> The parameters to provide for the current SQL storedProcedure. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, <paramref name="storedProcedureName"/>, or <paramref name="createUpdateSqlStoredProcedureParameters"/> is null. </exception>
        public virtual SqlResourcesCreateUpdateSqlStoredProcedureOperation StartCreateUpdateSqlStoredProcedure(string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, SqlStoredProcedureCreateUpdateParameters createUpdateSqlStoredProcedureParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (storedProcedureName == null)
            {
                throw new ArgumentNullException(nameof(storedProcedureName));
            }
            if (createUpdateSqlStoredProcedureParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlStoredProcedureParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlStoredProcedure");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateSqlStoredProcedure(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, createUpdateSqlStoredProcedureParameters, cancellationToken);
                return new SqlResourcesCreateUpdateSqlStoredProcedureOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlStoredProcedureRequest(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, createUpdateSqlStoredProcedureParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL storedProcedure. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="storedProcedureName"> Cosmos DB storedProcedure name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="storedProcedureName"/> is null. </exception>
        public virtual async Task<SqlResourcesDeleteSqlStoredProcedureOperation> StartDeleteSqlStoredProcedureAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (storedProcedureName == null)
            {
                throw new ArgumentNullException(nameof(storedProcedureName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlStoredProcedure");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteSqlStoredProcedureAsync(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesDeleteSqlStoredProcedureOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlStoredProcedureRequest(resourceGroupName, accountName, databaseName, containerName, storedProcedureName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL storedProcedure. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="storedProcedureName"> Cosmos DB storedProcedure name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="storedProcedureName"/> is null. </exception>
        public virtual SqlResourcesDeleteSqlStoredProcedureOperation StartDeleteSqlStoredProcedure(string resourceGroupName, string accountName, string databaseName, string containerName, string storedProcedureName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (storedProcedureName == null)
            {
                throw new ArgumentNullException(nameof(storedProcedureName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlStoredProcedure");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteSqlStoredProcedure(resourceGroupName, accountName, databaseName, containerName, storedProcedureName, cancellationToken);
                return new SqlResourcesDeleteSqlStoredProcedureOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlStoredProcedureRequest(resourceGroupName, accountName, databaseName, containerName, storedProcedureName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL userDefinedFunction. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="userDefinedFunctionName"> Cosmos DB userDefinedFunction name. </param>
        /// <param name="createUpdateSqlUserDefinedFunctionParameters"> The parameters to provide for the current SQL userDefinedFunction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, <paramref name="userDefinedFunctionName"/>, or <paramref name="createUpdateSqlUserDefinedFunctionParameters"/> is null. </exception>
        public virtual async Task<SqlResourcesCreateUpdateSqlUserDefinedFunctionOperation> StartCreateUpdateSqlUserDefinedFunctionAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (userDefinedFunctionName == null)
            {
                throw new ArgumentNullException(nameof(userDefinedFunctionName));
            }
            if (createUpdateSqlUserDefinedFunctionParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlUserDefinedFunctionParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlUserDefinedFunction");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateSqlUserDefinedFunctionAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, createUpdateSqlUserDefinedFunctionParameters, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesCreateUpdateSqlUserDefinedFunctionOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlUserDefinedFunctionRequest(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, createUpdateSqlUserDefinedFunctionParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL userDefinedFunction. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="userDefinedFunctionName"> Cosmos DB userDefinedFunction name. </param>
        /// <param name="createUpdateSqlUserDefinedFunctionParameters"> The parameters to provide for the current SQL userDefinedFunction. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, <paramref name="userDefinedFunctionName"/>, or <paramref name="createUpdateSqlUserDefinedFunctionParameters"/> is null. </exception>
        public virtual SqlResourcesCreateUpdateSqlUserDefinedFunctionOperation StartCreateUpdateSqlUserDefinedFunction(string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, SqlUserDefinedFunctionCreateUpdateParameters createUpdateSqlUserDefinedFunctionParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (userDefinedFunctionName == null)
            {
                throw new ArgumentNullException(nameof(userDefinedFunctionName));
            }
            if (createUpdateSqlUserDefinedFunctionParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlUserDefinedFunctionParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlUserDefinedFunction");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateSqlUserDefinedFunction(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, createUpdateSqlUserDefinedFunctionParameters, cancellationToken);
                return new SqlResourcesCreateUpdateSqlUserDefinedFunctionOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlUserDefinedFunctionRequest(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, createUpdateSqlUserDefinedFunctionParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL userDefinedFunction. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="userDefinedFunctionName"> Cosmos DB userDefinedFunction name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="userDefinedFunctionName"/> is null. </exception>
        public virtual async Task<SqlResourcesDeleteSqlUserDefinedFunctionOperation> StartDeleteSqlUserDefinedFunctionAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (userDefinedFunctionName == null)
            {
                throw new ArgumentNullException(nameof(userDefinedFunctionName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlUserDefinedFunction");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteSqlUserDefinedFunctionAsync(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesDeleteSqlUserDefinedFunctionOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlUserDefinedFunctionRequest(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL userDefinedFunction. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="userDefinedFunctionName"> Cosmos DB userDefinedFunction name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="userDefinedFunctionName"/> is null. </exception>
        public virtual SqlResourcesDeleteSqlUserDefinedFunctionOperation StartDeleteSqlUserDefinedFunction(string resourceGroupName, string accountName, string databaseName, string containerName, string userDefinedFunctionName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (userDefinedFunctionName == null)
            {
                throw new ArgumentNullException(nameof(userDefinedFunctionName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlUserDefinedFunction");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteSqlUserDefinedFunction(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName, cancellationToken);
                return new SqlResourcesDeleteSqlUserDefinedFunctionOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlUserDefinedFunctionRequest(resourceGroupName, accountName, databaseName, containerName, userDefinedFunctionName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL trigger. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="triggerName"> Cosmos DB trigger name. </param>
        /// <param name="createUpdateSqlTriggerParameters"> The parameters to provide for the current SQL trigger. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, <paramref name="triggerName"/>, or <paramref name="createUpdateSqlTriggerParameters"/> is null. </exception>
        public virtual async Task<SqlResourcesCreateUpdateSqlTriggerOperation> StartCreateUpdateSqlTriggerAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (triggerName == null)
            {
                throw new ArgumentNullException(nameof(triggerName));
            }
            if (createUpdateSqlTriggerParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlTriggerParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlTrigger");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateSqlTriggerAsync(resourceGroupName, accountName, databaseName, containerName, triggerName, createUpdateSqlTriggerParameters, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesCreateUpdateSqlTriggerOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlTriggerRequest(resourceGroupName, accountName, databaseName, containerName, triggerName, createUpdateSqlTriggerParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB SQL trigger. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="triggerName"> Cosmos DB trigger name. </param>
        /// <param name="createUpdateSqlTriggerParameters"> The parameters to provide for the current SQL trigger. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, <paramref name="triggerName"/>, or <paramref name="createUpdateSqlTriggerParameters"/> is null. </exception>
        public virtual SqlResourcesCreateUpdateSqlTriggerOperation StartCreateUpdateSqlTrigger(string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, SqlTriggerCreateUpdateParameters createUpdateSqlTriggerParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (triggerName == null)
            {
                throw new ArgumentNullException(nameof(triggerName));
            }
            if (createUpdateSqlTriggerParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateSqlTriggerParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartCreateUpdateSqlTrigger");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateSqlTrigger(resourceGroupName, accountName, databaseName, containerName, triggerName, createUpdateSqlTriggerParameters, cancellationToken);
                return new SqlResourcesCreateUpdateSqlTriggerOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateSqlTriggerRequest(resourceGroupName, accountName, databaseName, containerName, triggerName, createUpdateSqlTriggerParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL trigger. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="triggerName"> Cosmos DB trigger name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="triggerName"/> is null. </exception>
        public virtual async Task<SqlResourcesDeleteSqlTriggerOperation> StartDeleteSqlTriggerAsync(string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (triggerName == null)
            {
                throw new ArgumentNullException(nameof(triggerName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlTrigger");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteSqlTriggerAsync(resourceGroupName, accountName, databaseName, containerName, triggerName, cancellationToken).ConfigureAwait(false);
                return new SqlResourcesDeleteSqlTriggerOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlTriggerRequest(resourceGroupName, accountName, databaseName, containerName, triggerName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB SQL trigger. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="containerName"> Cosmos DB container name. </param>
        /// <param name="triggerName"> Cosmos DB trigger name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="containerName"/>, or <paramref name="triggerName"/> is null. </exception>
        public virtual SqlResourcesDeleteSqlTriggerOperation StartDeleteSqlTrigger(string resourceGroupName, string accountName, string databaseName, string containerName, string triggerName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (containerName == null)
            {
                throw new ArgumentNullException(nameof(containerName));
            }
            if (triggerName == null)
            {
                throw new ArgumentNullException(nameof(triggerName));
            }

            using var scope = _clientDiagnostics.CreateScope("SqlResourcesOperations.StartDeleteSqlTrigger");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteSqlTrigger(resourceGroupName, accountName, databaseName, containerName, triggerName, cancellationToken);
                return new SqlResourcesDeleteSqlTriggerOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteSqlTriggerRequest(resourceGroupName, accountName, databaseName, containerName, triggerName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
