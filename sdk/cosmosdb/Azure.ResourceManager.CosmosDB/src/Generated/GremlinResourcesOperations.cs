// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.CosmosDB.Models;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary> The GremlinResources service client. </summary>
    public partial class GremlinResourcesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal GremlinResourcesRestOperations RestClient { get; }

        /// <summary> Initializes a new instance of GremlinResourcesOperations for mocking. </summary>
        protected GremlinResourcesOperations()
        {
        }

        /// <summary> Initializes a new instance of GremlinResourcesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal GremlinResourcesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new GremlinResourcesRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GremlinDatabaseGetResults>> GetGremlinDatabaseAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.GetGremlinDatabase");
            scope.Start();
            try
            {
                return await RestClient.GetGremlinDatabaseAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GremlinDatabaseGetResults> GetGremlinDatabase(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.GetGremlinDatabase");
            scope.Start();
            try
            {
                return RestClient.GetGremlinDatabase(resourceGroupName, accountName, databaseName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetGremlinDatabaseThroughputAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.GetGremlinDatabaseThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetGremlinDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetGremlinDatabaseThroughput(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.GetGremlinDatabaseThroughput");
            scope.Start();
            try
            {
                return RestClient.GetGremlinDatabaseThroughput(resourceGroupName, accountName, databaseName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Gremlin graph under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<GremlinGraphGetResults>> GetGremlinGraphAsync(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.GetGremlinGraph");
            scope.Start();
            try
            {
                return await RestClient.GetGremlinGraphAsync(resourceGroupName, accountName, databaseName, graphName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Gremlin graph under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<GremlinGraphGetResults> GetGremlinGraph(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.GetGremlinGraph");
            scope.Start();
            try
            {
                return RestClient.GetGremlinGraph(resourceGroupName, accountName, databaseName, graphName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetGremlinGraphThroughputAsync(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.GetGremlinGraphThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetGremlinGraphThroughputAsync(resourceGroupName, accountName, databaseName, graphName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetGremlinGraphThroughput(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.GetGremlinGraphThroughput");
            scope.Start();
            try
            {
                return RestClient.GetGremlinGraphThroughput(resourceGroupName, accountName, databaseName, graphName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the Gremlin databases under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual AsyncPageable<GremlinDatabaseGetResults> ListGremlinDatabasesAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            async Task<Page<GremlinDatabaseGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.ListGremlinDatabases");
                scope.Start();
                try
                {
                    var response = await RestClient.ListGremlinDatabasesAsync(resourceGroupName, accountName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the Gremlin databases under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual Pageable<GremlinDatabaseGetResults> ListGremlinDatabases(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            Page<GremlinDatabaseGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.ListGremlinDatabases");
                scope.Start();
                try
                {
                    var response = RestClient.ListGremlinDatabases(resourceGroupName, accountName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the Gremlin graph under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual AsyncPageable<GremlinGraphGetResults> ListGremlinGraphsAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            async Task<Page<GremlinGraphGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.ListGremlinGraphs");
                scope.Start();
                try
                {
                    var response = await RestClient.ListGremlinGraphsAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the Gremlin graph under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual Pageable<GremlinGraphGetResults> ListGremlinGraphs(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            Page<GremlinGraphGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.ListGremlinGraphs");
                scope.Start();
                try
                {
                    var response = RestClient.ListGremlinGraphs(resourceGroupName, accountName, databaseName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Create or update an Azure Cosmos DB Gremlin database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="createUpdateGremlinDatabaseParameters"> The parameters to provide for the current Gremlin database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="createUpdateGremlinDatabaseParameters"/> is null. </exception>
        public virtual async Task<GremlinResourcesCreateUpdateGremlinDatabaseOperation> StartCreateUpdateGremlinDatabaseAsync(string resourceGroupName, string accountName, string databaseName, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (createUpdateGremlinDatabaseParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateGremlinDatabaseParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartCreateUpdateGremlinDatabase");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateGremlinDatabaseAsync(resourceGroupName, accountName, databaseName, createUpdateGremlinDatabaseParameters, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesCreateUpdateGremlinDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateGremlinDatabaseRequest(resourceGroupName, accountName, databaseName, createUpdateGremlinDatabaseParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB Gremlin database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="createUpdateGremlinDatabaseParameters"> The parameters to provide for the current Gremlin database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="createUpdateGremlinDatabaseParameters"/> is null. </exception>
        public virtual GremlinResourcesCreateUpdateGremlinDatabaseOperation StartCreateUpdateGremlinDatabase(string resourceGroupName, string accountName, string databaseName, GremlinDatabaseCreateUpdateParameters createUpdateGremlinDatabaseParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (createUpdateGremlinDatabaseParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateGremlinDatabaseParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartCreateUpdateGremlinDatabase");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateGremlinDatabase(resourceGroupName, accountName, databaseName, createUpdateGremlinDatabaseParameters, cancellationToken);
                return new GremlinResourcesCreateUpdateGremlinDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateGremlinDatabaseRequest(resourceGroupName, accountName, databaseName, createUpdateGremlinDatabaseParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Gremlin database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<GremlinResourcesDeleteGremlinDatabaseOperation> StartDeleteGremlinDatabaseAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartDeleteGremlinDatabase");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteGremlinDatabaseAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesDeleteGremlinDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteGremlinDatabaseRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Gremlin database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual GremlinResourcesDeleteGremlinDatabaseOperation StartDeleteGremlinDatabase(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartDeleteGremlinDatabase");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteGremlinDatabase(resourceGroupName, accountName, databaseName, cancellationToken);
                return new GremlinResourcesDeleteGremlinDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteGremlinDatabaseRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Gremlin database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Gremlin database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<GremlinResourcesUpdateGremlinDatabaseThroughputOperation> StartUpdateGremlinDatabaseThroughputAsync(string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartUpdateGremlinDatabaseThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateGremlinDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesUpdateGremlinDatabaseThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateGremlinDatabaseThroughputRequest(resourceGroupName, accountName, databaseName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Gremlin database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Gremlin database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual GremlinResourcesUpdateGremlinDatabaseThroughputOperation StartUpdateGremlinDatabaseThroughput(string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartUpdateGremlinDatabaseThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateGremlinDatabaseThroughput(resourceGroupName, accountName, databaseName, updateThroughputParameters, cancellationToken);
                return new GremlinResourcesUpdateGremlinDatabaseThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateGremlinDatabaseThroughputRequest(resourceGroupName, accountName, databaseName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<GremlinResourcesMigrateGremlinDatabaseToAutoscaleOperation> StartMigrateGremlinDatabaseToAutoscaleAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartMigrateGremlinDatabaseToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateGremlinDatabaseToAutoscaleAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesMigrateGremlinDatabaseToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateGremlinDatabaseToAutoscaleRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual GremlinResourcesMigrateGremlinDatabaseToAutoscaleOperation StartMigrateGremlinDatabaseToAutoscale(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartMigrateGremlinDatabaseToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateGremlinDatabaseToAutoscale(resourceGroupName, accountName, databaseName, cancellationToken);
                return new GremlinResourcesMigrateGremlinDatabaseToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateGremlinDatabaseToAutoscaleRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<GremlinResourcesMigrateGremlinDatabaseToManualThroughputOperation> StartMigrateGremlinDatabaseToManualThroughputAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartMigrateGremlinDatabaseToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateGremlinDatabaseToManualThroughputAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesMigrateGremlinDatabaseToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateGremlinDatabaseToManualThroughputRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual GremlinResourcesMigrateGremlinDatabaseToManualThroughputOperation StartMigrateGremlinDatabaseToManualThroughput(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartMigrateGremlinDatabaseToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateGremlinDatabaseToManualThroughput(resourceGroupName, accountName, databaseName, cancellationToken);
                return new GremlinResourcesMigrateGremlinDatabaseToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateGremlinDatabaseToManualThroughputRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB Gremlin graph. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="createUpdateGremlinGraphParameters"> The parameters to provide for the current Gremlin graph. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="graphName"/>, or <paramref name="createUpdateGremlinGraphParameters"/> is null. </exception>
        public virtual async Task<GremlinResourcesCreateUpdateGremlinGraphOperation> StartCreateUpdateGremlinGraphAsync(string resourceGroupName, string accountName, string databaseName, string graphName, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }
            if (createUpdateGremlinGraphParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateGremlinGraphParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartCreateUpdateGremlinGraph");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateGremlinGraphAsync(resourceGroupName, accountName, databaseName, graphName, createUpdateGremlinGraphParameters, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesCreateUpdateGremlinGraphOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateGremlinGraphRequest(resourceGroupName, accountName, databaseName, graphName, createUpdateGremlinGraphParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB Gremlin graph. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="createUpdateGremlinGraphParameters"> The parameters to provide for the current Gremlin graph. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="graphName"/>, or <paramref name="createUpdateGremlinGraphParameters"/> is null. </exception>
        public virtual GremlinResourcesCreateUpdateGremlinGraphOperation StartCreateUpdateGremlinGraph(string resourceGroupName, string accountName, string databaseName, string graphName, GremlinGraphCreateUpdateParameters createUpdateGremlinGraphParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }
            if (createUpdateGremlinGraphParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateGremlinGraphParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartCreateUpdateGremlinGraph");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateGremlinGraph(resourceGroupName, accountName, databaseName, graphName, createUpdateGremlinGraphParameters, cancellationToken);
                return new GremlinResourcesCreateUpdateGremlinGraphOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateGremlinGraphRequest(resourceGroupName, accountName, databaseName, graphName, createUpdateGremlinGraphParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Gremlin graph. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="graphName"/> is null. </exception>
        public virtual async Task<GremlinResourcesDeleteGremlinGraphOperation> StartDeleteGremlinGraphAsync(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartDeleteGremlinGraph");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteGremlinGraphAsync(resourceGroupName, accountName, databaseName, graphName, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesDeleteGremlinGraphOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteGremlinGraphRequest(resourceGroupName, accountName, databaseName, graphName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Gremlin graph. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="graphName"/> is null. </exception>
        public virtual GremlinResourcesDeleteGremlinGraphOperation StartDeleteGremlinGraph(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartDeleteGremlinGraph");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteGremlinGraph(resourceGroupName, accountName, databaseName, graphName, cancellationToken);
                return new GremlinResourcesDeleteGremlinGraphOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteGremlinGraphRequest(resourceGroupName, accountName, databaseName, graphName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Gremlin graph. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Gremlin graph. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="graphName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<GremlinResourcesUpdateGremlinGraphThroughputOperation> StartUpdateGremlinGraphThroughputAsync(string resourceGroupName, string accountName, string databaseName, string graphName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartUpdateGremlinGraphThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateGremlinGraphThroughputAsync(resourceGroupName, accountName, databaseName, graphName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesUpdateGremlinGraphThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateGremlinGraphThroughputRequest(resourceGroupName, accountName, databaseName, graphName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Gremlin graph. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current Gremlin graph. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="graphName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual GremlinResourcesUpdateGremlinGraphThroughputOperation StartUpdateGremlinGraphThroughput(string resourceGroupName, string accountName, string databaseName, string graphName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartUpdateGremlinGraphThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateGremlinGraphThroughput(resourceGroupName, accountName, databaseName, graphName, updateThroughputParameters, cancellationToken);
                return new GremlinResourcesUpdateGremlinGraphThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateGremlinGraphThroughputRequest(resourceGroupName, accountName, databaseName, graphName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="graphName"/> is null. </exception>
        public virtual async Task<GremlinResourcesMigrateGremlinGraphToAutoscaleOperation> StartMigrateGremlinGraphToAutoscaleAsync(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartMigrateGremlinGraphToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateGremlinGraphToAutoscaleAsync(resourceGroupName, accountName, databaseName, graphName, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesMigrateGremlinGraphToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateGremlinGraphToAutoscaleRequest(resourceGroupName, accountName, databaseName, graphName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="graphName"/> is null. </exception>
        public virtual GremlinResourcesMigrateGremlinGraphToAutoscaleOperation StartMigrateGremlinGraphToAutoscale(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartMigrateGremlinGraphToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateGremlinGraphToAutoscale(resourceGroupName, accountName, databaseName, graphName, cancellationToken);
                return new GremlinResourcesMigrateGremlinGraphToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateGremlinGraphToAutoscaleRequest(resourceGroupName, accountName, databaseName, graphName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="graphName"/> is null. </exception>
        public virtual async Task<GremlinResourcesMigrateGremlinGraphToManualThroughputOperation> StartMigrateGremlinGraphToManualThroughputAsync(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartMigrateGremlinGraphToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateGremlinGraphToManualThroughputAsync(resourceGroupName, accountName, databaseName, graphName, cancellationToken).ConfigureAwait(false);
                return new GremlinResourcesMigrateGremlinGraphToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateGremlinGraphToManualThroughputRequest(resourceGroupName, accountName, databaseName, graphName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="graphName"> Cosmos DB graph name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="graphName"/> is null. </exception>
        public virtual GremlinResourcesMigrateGremlinGraphToManualThroughputOperation StartMigrateGremlinGraphToManualThroughput(string resourceGroupName, string accountName, string databaseName, string graphName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (graphName == null)
            {
                throw new ArgumentNullException(nameof(graphName));
            }

            using var scope = _clientDiagnostics.CreateScope("GremlinResourcesOperations.StartMigrateGremlinGraphToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateGremlinGraphToManualThroughput(resourceGroupName, accountName, databaseName, graphName, cancellationToken);
                return new GremlinResourcesMigrateGremlinGraphToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateGremlinGraphToManualThroughputRequest(resourceGroupName, accountName, databaseName, graphName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
