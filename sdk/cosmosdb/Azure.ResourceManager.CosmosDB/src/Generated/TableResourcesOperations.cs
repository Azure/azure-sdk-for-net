// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.CosmosDB.Models;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary> The TableResources service client. </summary>
    public partial class TableResourcesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal TableResourcesRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of TableResourcesOperations for mocking. </summary>
        protected TableResourcesOperations()
        {
        }
        /// <summary> Initializes a new instance of TableResourcesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal TableResourcesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new TableResourcesRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the Tables under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TableGetResults>> GetTableAsync(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.GetTable");
            scope.Start();
            try
            {
                return await RestClient.GetTableAsync(resourceGroupName, accountName, tableName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the Tables under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TableGetResults> GetTable(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.GetTable");
            scope.Start();
            try
            {
                return RestClient.GetTable(resourceGroupName, accountName, tableName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetTableThroughputAsync(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.GetTableThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetTableThroughputAsync(resourceGroupName, accountName, tableName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetTableThroughput(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.GetTableThroughput");
            scope.Start();
            try
            {
                return RestClient.GetTableThroughput(resourceGroupName, accountName, tableName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the Tables under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual AsyncPageable<TableGetResults> ListTablesAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            async Task<Page<TableGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.ListTables");
                scope.Start();
                try
                {
                    var response = await RestClient.ListTablesAsync(resourceGroupName, accountName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the Tables under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual Pageable<TableGetResults> ListTables(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            Page<TableGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.ListTables");
                scope.Start();
                try
                {
                    var response = RestClient.ListTables(resourceGroupName, accountName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Create or update an Azure Cosmos DB Table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="createUpdateTableParameters"> The parameters to provide for the current Table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="tableName"/>, or <paramref name="createUpdateTableParameters"/> is null. </exception>
        public virtual async Task<TableResourcesCreateUpdateTableOperation> StartCreateUpdateTableAsync(string resourceGroupName, string accountName, string tableName, TableCreateUpdateParameters createUpdateTableParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (createUpdateTableParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateTableParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartCreateUpdateTable");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateTableAsync(resourceGroupName, accountName, tableName, createUpdateTableParameters, cancellationToken).ConfigureAwait(false);
                return new TableResourcesCreateUpdateTableOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateTableRequest(resourceGroupName, accountName, tableName, createUpdateTableParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB Table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="createUpdateTableParameters"> The parameters to provide for the current Table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="tableName"/>, or <paramref name="createUpdateTableParameters"/> is null. </exception>
        public virtual TableResourcesCreateUpdateTableOperation StartCreateUpdateTable(string resourceGroupName, string accountName, string tableName, TableCreateUpdateParameters createUpdateTableParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (createUpdateTableParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateTableParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartCreateUpdateTable");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateTable(resourceGroupName, accountName, tableName, createUpdateTableParameters, cancellationToken);
                return new TableResourcesCreateUpdateTableOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateTableRequest(resourceGroupName, accountName, tableName, createUpdateTableParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual async Task<TableResourcesDeleteTableOperation> StartDeleteTableAsync(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartDeleteTable");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteTableAsync(resourceGroupName, accountName, tableName, cancellationToken).ConfigureAwait(false);
                return new TableResourcesDeleteTableOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteTableRequest(resourceGroupName, accountName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB Table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual TableResourcesDeleteTableOperation StartDeleteTable(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartDeleteTable");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteTable(resourceGroupName, accountName, tableName, cancellationToken);
                return new TableResourcesDeleteTableOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteTableRequest(resourceGroupName, accountName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="updateThroughputParameters"> The parameters to provide for the RUs per second of the current Table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="tableName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<TableResourcesUpdateTableThroughputOperation> StartUpdateTableThroughputAsync(string resourceGroupName, string accountName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartUpdateTableThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateTableThroughputAsync(resourceGroupName, accountName, tableName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new TableResourcesUpdateTableThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateTableThroughputRequest(resourceGroupName, accountName, tableName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of an Azure Cosmos DB Table. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="updateThroughputParameters"> The parameters to provide for the RUs per second of the current Table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="tableName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual TableResourcesUpdateTableThroughputOperation StartUpdateTableThroughput(string resourceGroupName, string accountName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartUpdateTableThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateTableThroughput(resourceGroupName, accountName, tableName, updateThroughputParameters, cancellationToken);
                return new TableResourcesUpdateTableThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateTableThroughputRequest(resourceGroupName, accountName, tableName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Table from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual async Task<TableResourcesMigrateTableToAutoscaleOperation> StartMigrateTableToAutoscaleAsync(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartMigrateTableToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateTableToAutoscaleAsync(resourceGroupName, accountName, tableName, cancellationToken).ConfigureAwait(false);
                return new TableResourcesMigrateTableToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateTableToAutoscaleRequest(resourceGroupName, accountName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Table from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual TableResourcesMigrateTableToAutoscaleOperation StartMigrateTableToAutoscale(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartMigrateTableToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateTableToAutoscale(resourceGroupName, accountName, tableName, cancellationToken);
                return new TableResourcesMigrateTableToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateTableToAutoscaleRequest(resourceGroupName, accountName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Table from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual async Task<TableResourcesMigrateTableToManualThroughputOperation> StartMigrateTableToManualThroughputAsync(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartMigrateTableToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateTableToManualThroughputAsync(resourceGroupName, accountName, tableName, cancellationToken).ConfigureAwait(false);
                return new TableResourcesMigrateTableToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateTableToManualThroughputRequest(resourceGroupName, accountName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB Table from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="tableName"> Cosmos DB table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="tableName"/> is null. </exception>
        public virtual TableResourcesMigrateTableToManualThroughputOperation StartMigrateTableToManualThroughput(string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var scope = _clientDiagnostics.CreateScope("TableResourcesOperations.StartMigrateTableToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateTableToManualThroughput(resourceGroupName, accountName, tableName, cancellationToken);
                return new TableResourcesMigrateTableToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateTableToManualThroughputRequest(resourceGroupName, accountName, tableName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
