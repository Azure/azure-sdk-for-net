// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.CosmosDB.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary>
    /// A class representing the MongoCluster data model.
    /// Represents a mongo cluster resource.
    /// </summary>
    public partial class MongoClusterData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MongoClusterData"/>. </summary>
        /// <param name="location"> The location. </param>
        public MongoClusterData(AzureLocation location) : base(location)
        {
            NodeGroupSpecs = new ChangeTrackingList<NodeGroupSpec>();
        }

        /// <summary> Initializes a new instance of <see cref="MongoClusterData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="createMode"> The mode to create a mongo cluster. </param>
        /// <param name="restoreParameters"> Parameters used for restore operations. </param>
        /// <param name="administratorLogin"> The administrator's login for the mongo cluster. </param>
        /// <param name="administratorLoginPassword"> The password of the administrator login. </param>
        /// <param name="serverVersion"> The Mongo DB server version. Defaults to the latest available version if not specified. </param>
        /// <param name="connectionString"> The default mongo connection string for the cluster. </param>
        /// <param name="earliestRestoreTime"> Earliest restore timestamp in UTC ISO8601 format. </param>
        /// <param name="provisioningState"> A provisioning state of the mongo cluster. </param>
        /// <param name="clusterStatus"> A status of the mongo cluster. </param>
        /// <param name="nodeGroupSpecs"> The list of node group specs in the cluster. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MongoClusterData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, CosmosDBAccountCreateMode? createMode, MongoClusterRestoreParameters restoreParameters, string administratorLogin, string administratorLoginPassword, string serverVersion, string connectionString, string earliestRestoreTime, CosmosDBProvisioningState? provisioningState, MongoClusterStatus? clusterStatus, IList<NodeGroupSpec> nodeGroupSpecs, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            CreateMode = createMode;
            RestoreParameters = restoreParameters;
            AdministratorLogin = administratorLogin;
            AdministratorLoginPassword = administratorLoginPassword;
            ServerVersion = serverVersion;
            ConnectionString = connectionString;
            EarliestRestoreTime = earliestRestoreTime;
            ProvisioningState = provisioningState;
            ClusterStatus = clusterStatus;
            NodeGroupSpecs = nodeGroupSpecs;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="MongoClusterData"/> for deserialization. </summary>
        internal MongoClusterData()
        {
        }

        /// <summary> The mode to create a mongo cluster. </summary>
        [WirePath("properties.createMode")]
        public CosmosDBAccountCreateMode? CreateMode { get; set; }
        /// <summary> Parameters used for restore operations. </summary>
        [WirePath("properties.restoreParameters")]
        public MongoClusterRestoreParameters RestoreParameters { get; set; }
        /// <summary> The administrator's login for the mongo cluster. </summary>
        [WirePath("properties.administratorLogin")]
        public string AdministratorLogin { get; set; }
        /// <summary> The password of the administrator login. </summary>
        [WirePath("properties.administratorLoginPassword")]
        public string AdministratorLoginPassword { get; set; }
        /// <summary> The Mongo DB server version. Defaults to the latest available version if not specified. </summary>
        [WirePath("properties.serverVersion")]
        public string ServerVersion { get; set; }
        /// <summary> The default mongo connection string for the cluster. </summary>
        [WirePath("properties.connectionString")]
        public string ConnectionString { get; }
        /// <summary> Earliest restore timestamp in UTC ISO8601 format. </summary>
        [WirePath("properties.earliestRestoreTime")]
        public string EarliestRestoreTime { get; }
        /// <summary> A provisioning state of the mongo cluster. </summary>
        [WirePath("properties.provisioningState")]
        public CosmosDBProvisioningState? ProvisioningState { get; }
        /// <summary> A status of the mongo cluster. </summary>
        [WirePath("properties.clusterStatus")]
        public MongoClusterStatus? ClusterStatus { get; }
        /// <summary> The list of node group specs in the cluster. </summary>
        [WirePath("properties.nodeGroupSpecs")]
        public IList<NodeGroupSpec> NodeGroupSpecs { get; }
    }
}
