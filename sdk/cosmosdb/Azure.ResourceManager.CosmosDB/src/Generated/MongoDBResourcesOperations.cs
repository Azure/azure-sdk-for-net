// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.CosmosDB.Models;

namespace Azure.ResourceManager.CosmosDB
{
    /// <summary> The MongoDBResources service client. </summary>
    public partial class MongoDBResourcesOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal MongoDBResourcesRestOperations RestClient { get; }
        /// <summary> Initializes a new instance of MongoDBResourcesOperations for mocking. </summary>
        protected MongoDBResourcesOperations()
        {
        }
        /// <summary> Initializes a new instance of MongoDBResourcesOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal MongoDBResourcesOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null)
        {
            RestClient = new MongoDBResourcesRestOperations(clientDiagnostics, pipeline, subscriptionId, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MongoDBDatabaseGetResults>> GetMongoDBDatabaseAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.GetMongoDBDatabase");
            scope.Start();
            try
            {
                return await RestClient.GetMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MongoDBDatabaseGetResults> GetMongoDBDatabase(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.GetMongoDBDatabase");
            scope.Start();
            try
            {
                return RestClient.GetMongoDBDatabase(resourceGroupName, accountName, databaseName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetMongoDBDatabaseThroughputAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.GetMongoDBDatabaseThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetMongoDBDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetMongoDBDatabaseThroughput(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.GetMongoDBDatabaseThroughput");
            scope.Start();
            try
            {
                return RestClient.GetMongoDBDatabaseThroughput(resourceGroupName, accountName, databaseName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the MongoDB collection under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<MongoDBCollectionGetResults>> GetMongoDBCollectionAsync(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.GetMongoDBCollection");
            scope.Start();
            try
            {
                return await RestClient.GetMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the MongoDB collection under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<MongoDBCollectionGetResults> GetMongoDBCollection(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.GetMongoDBCollection");
            scope.Start();
            try
            {
                return RestClient.GetMongoDBCollection(resourceGroupName, accountName, databaseName, collectionName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ThroughputSettingsGetResults>> GetMongoDBCollectionThroughputAsync(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.GetMongoDBCollectionThroughput");
            scope.Start();
            try
            {
                return await RestClient.GetMongoDBCollectionThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ThroughputSettingsGetResults> GetMongoDBCollectionThroughput(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.GetMongoDBCollectionThroughput");
            scope.Start();
            try
            {
                return RestClient.GetMongoDBCollectionThroughput(resourceGroupName, accountName, databaseName, collectionName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the MongoDB databases under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual AsyncPageable<MongoDBDatabaseGetResults> ListMongoDBDatabasesAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            async Task<Page<MongoDBDatabaseGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.ListMongoDBDatabases");
                scope.Start();
                try
                {
                    var response = await RestClient.ListMongoDBDatabasesAsync(resourceGroupName, accountName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the MongoDB databases under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="accountName"/> is null. </exception>
        public virtual Pageable<MongoDBDatabaseGetResults> ListMongoDBDatabases(string resourceGroupName, string accountName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }

            Page<MongoDBDatabaseGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.ListMongoDBDatabases");
                scope.Start();
                try
                {
                    var response = RestClient.ListMongoDBDatabases(resourceGroupName, accountName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the MongoDB collection under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual AsyncPageable<MongoDBCollectionGetResults> ListMongoDBCollectionsAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            async Task<Page<MongoDBCollectionGetResults>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.ListMongoDBCollections");
                scope.Start();
                try
                {
                    var response = await RestClient.ListMongoDBCollectionsAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary> Lists the MongoDB collection under an existing Azure Cosmos DB database account. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual Pageable<MongoDBCollectionGetResults> ListMongoDBCollections(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            Page<MongoDBCollectionGetResults> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.ListMongoDBCollections");
                scope.Start();
                try
                {
                    var response = RestClient.ListMongoDBCollections(resourceGroupName, accountName, databaseName, cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary> Create or updates Azure Cosmos DB MongoDB database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="createUpdateMongoDBDatabaseParameters"> The parameters to provide for the current MongoDB database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="createUpdateMongoDBDatabaseParameters"/> is null. </exception>
        public virtual async Task<MongoDBResourcesCreateUpdateMongoDBDatabaseOperation> StartCreateUpdateMongoDBDatabaseAsync(string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (createUpdateMongoDBDatabaseParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateMongoDBDatabaseParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartCreateUpdateMongoDBDatabase");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesCreateUpdateMongoDBDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateMongoDBDatabaseRequest(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or updates Azure Cosmos DB MongoDB database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="createUpdateMongoDBDatabaseParameters"> The parameters to provide for the current MongoDB database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="createUpdateMongoDBDatabaseParameters"/> is null. </exception>
        public virtual MongoDBResourcesCreateUpdateMongoDBDatabaseOperation StartCreateUpdateMongoDBDatabase(string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (createUpdateMongoDBDatabaseParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateMongoDBDatabaseParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartCreateUpdateMongoDBDatabase");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateMongoDBDatabase(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters, cancellationToken);
                return new MongoDBResourcesCreateUpdateMongoDBDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateMongoDBDatabaseRequest(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB MongoDB database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<MongoDBResourcesDeleteMongoDBDatabaseOperation> StartDeleteMongoDBDatabaseAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartDeleteMongoDBDatabase");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesDeleteMongoDBDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteMongoDBDatabaseRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB MongoDB database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual MongoDBResourcesDeleteMongoDBDatabaseOperation StartDeleteMongoDBDatabase(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartDeleteMongoDBDatabase");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteMongoDBDatabase(resourceGroupName, accountName, databaseName, cancellationToken);
                return new MongoDBResourcesDeleteMongoDBDatabaseOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteMongoDBDatabaseRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of the an Azure Cosmos DB MongoDB database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current MongoDB database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<MongoDBResourcesUpdateMongoDBDatabaseThroughputOperation> StartUpdateMongoDBDatabaseThroughputAsync(string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartUpdateMongoDBDatabaseThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateMongoDBDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesUpdateMongoDBDatabaseThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateMongoDBDatabaseThroughputRequest(resourceGroupName, accountName, databaseName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update RUs per second of the an Azure Cosmos DB MongoDB database. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current MongoDB database. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual MongoDBResourcesUpdateMongoDBDatabaseThroughputOperation StartUpdateMongoDBDatabaseThroughput(string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartUpdateMongoDBDatabaseThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateMongoDBDatabaseThroughput(resourceGroupName, accountName, databaseName, updateThroughputParameters, cancellationToken);
                return new MongoDBResourcesUpdateMongoDBDatabaseThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateMongoDBDatabaseThroughputRequest(resourceGroupName, accountName, databaseName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOperation> StartMigrateMongoDBDatabaseToAutoscaleAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartMigrateMongoDBDatabaseToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateMongoDBDatabaseToAutoscaleAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateMongoDBDatabaseToAutoscaleRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOperation StartMigrateMongoDBDatabaseToAutoscale(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartMigrateMongoDBDatabaseToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateMongoDBDatabaseToAutoscale(resourceGroupName, accountName, databaseName, cancellationToken);
                return new MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateMongoDBDatabaseToAutoscaleRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual async Task<MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOperation> StartMigrateMongoDBDatabaseToManualThroughputAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartMigrateMongoDBDatabaseToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateMongoDBDatabaseToManualThroughputAsync(resourceGroupName, accountName, databaseName, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateMongoDBDatabaseToManualThroughputRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, or <paramref name="databaseName"/> is null. </exception>
        public virtual MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOperation StartMigrateMongoDBDatabaseToManualThroughput(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartMigrateMongoDBDatabaseToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateMongoDBDatabaseToManualThroughput(resourceGroupName, accountName, databaseName, cancellationToken);
                return new MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateMongoDBDatabaseToManualThroughputRequest(resourceGroupName, accountName, databaseName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB MongoDB Collection. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="createUpdateMongoDBCollectionParameters"> The parameters to provide for the current MongoDB Collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="collectionName"/>, or <paramref name="createUpdateMongoDBCollectionParameters"/> is null. </exception>
        public virtual async Task<MongoDBResourcesCreateUpdateMongoDBCollectionOperation> StartCreateUpdateMongoDBCollectionAsync(string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }
            if (createUpdateMongoDBCollectionParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateMongoDBCollectionParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartCreateUpdateMongoDBCollection");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateUpdateMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesCreateUpdateMongoDBCollectionOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateMongoDBCollectionRequest(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create or update an Azure Cosmos DB MongoDB Collection. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="createUpdateMongoDBCollectionParameters"> The parameters to provide for the current MongoDB Collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="collectionName"/>, or <paramref name="createUpdateMongoDBCollectionParameters"/> is null. </exception>
        public virtual MongoDBResourcesCreateUpdateMongoDBCollectionOperation StartCreateUpdateMongoDBCollection(string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }
            if (createUpdateMongoDBCollectionParameters == null)
            {
                throw new ArgumentNullException(nameof(createUpdateMongoDBCollectionParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartCreateUpdateMongoDBCollection");
            scope.Start();
            try
            {
                var originalResponse = RestClient.CreateUpdateMongoDBCollection(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters, cancellationToken);
                return new MongoDBResourcesCreateUpdateMongoDBCollectionOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateUpdateMongoDBCollectionRequest(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB MongoDB Collection. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="collectionName"/> is null. </exception>
        public virtual async Task<MongoDBResourcesDeleteMongoDBCollectionOperation> StartDeleteMongoDBCollectionAsync(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartDeleteMongoDBCollection");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.DeleteMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesDeleteMongoDBCollectionOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteMongoDBCollectionRequest(resourceGroupName, accountName, databaseName, collectionName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes an existing Azure Cosmos DB MongoDB Collection. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="collectionName"/> is null. </exception>
        public virtual MongoDBResourcesDeleteMongoDBCollectionOperation StartDeleteMongoDBCollection(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartDeleteMongoDBCollection");
            scope.Start();
            try
            {
                var originalResponse = RestClient.DeleteMongoDBCollection(resourceGroupName, accountName, databaseName, collectionName, cancellationToken);
                return new MongoDBResourcesDeleteMongoDBCollectionOperation(_clientDiagnostics, _pipeline, RestClient.CreateDeleteMongoDBCollectionRequest(resourceGroupName, accountName, databaseName, collectionName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the RUs per second of an Azure Cosmos DB MongoDB collection. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current MongoDB collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="collectionName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual async Task<MongoDBResourcesUpdateMongoDBCollectionThroughputOperation> StartUpdateMongoDBCollectionThroughputAsync(string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartUpdateMongoDBCollectionThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.UpdateMongoDBCollectionThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesUpdateMongoDBCollectionThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateMongoDBCollectionThroughputRequest(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Update the RUs per second of an Azure Cosmos DB MongoDB collection. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="updateThroughputParameters"> The RUs per second of the parameters to provide for the current MongoDB collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, <paramref name="collectionName"/>, or <paramref name="updateThroughputParameters"/> is null. </exception>
        public virtual MongoDBResourcesUpdateMongoDBCollectionThroughputOperation StartUpdateMongoDBCollectionThroughput(string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }
            if (updateThroughputParameters == null)
            {
                throw new ArgumentNullException(nameof(updateThroughputParameters));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartUpdateMongoDBCollectionThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.UpdateMongoDBCollectionThroughput(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters, cancellationToken);
                return new MongoDBResourcesUpdateMongoDBCollectionThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateUpdateMongoDBCollectionThroughputRequest(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="collectionName"/> is null. </exception>
        public virtual async Task<MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOperation> StartMigrateMongoDBCollectionToAutoscaleAsync(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartMigrateMongoDBCollectionToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateMongoDBCollectionToAutoscaleAsync(resourceGroupName, accountName, databaseName, collectionName, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateMongoDBCollectionToAutoscaleRequest(resourceGroupName, accountName, databaseName, collectionName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="collectionName"/> is null. </exception>
        public virtual MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOperation StartMigrateMongoDBCollectionToAutoscale(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartMigrateMongoDBCollectionToAutoscale");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateMongoDBCollectionToAutoscale(resourceGroupName, accountName, databaseName, collectionName, cancellationToken);
                return new MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateMongoDBCollectionToAutoscaleRequest(resourceGroupName, accountName, databaseName, collectionName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="collectionName"/> is null. </exception>
        public virtual async Task<MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOperation> StartMigrateMongoDBCollectionToManualThroughputAsync(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartMigrateMongoDBCollectionToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.MigrateMongoDBCollectionToManualThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, cancellationToken).ConfigureAwait(false);
                return new MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateMongoDBCollectionToManualThroughputRequest(resourceGroupName, accountName, databaseName, collectionName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="accountName"> Cosmos DB database account name. </param>
        /// <param name="databaseName"> Cosmos DB database name. </param>
        /// <param name="collectionName"> Cosmos DB collection name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="accountName"/>, <paramref name="databaseName"/>, or <paramref name="collectionName"/> is null. </exception>
        public virtual MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOperation StartMigrateMongoDBCollectionToManualThroughput(string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (accountName == null)
            {
                throw new ArgumentNullException(nameof(accountName));
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException(nameof(databaseName));
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException(nameof(collectionName));
            }

            using var scope = _clientDiagnostics.CreateScope("MongoDBResourcesOperations.StartMigrateMongoDBCollectionToManualThroughput");
            scope.Start();
            try
            {
                var originalResponse = RestClient.MigrateMongoDBCollectionToManualThroughput(resourceGroupName, accountName, databaseName, collectionName, cancellationToken);
                return new MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOperation(_clientDiagnostics, _pipeline, RestClient.CreateMigrateMongoDBCollectionToManualThroughputRequest(resourceGroupName, accountName, databaseName, collectionName).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
