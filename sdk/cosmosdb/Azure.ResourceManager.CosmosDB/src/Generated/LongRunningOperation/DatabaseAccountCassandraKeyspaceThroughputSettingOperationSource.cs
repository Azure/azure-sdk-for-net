// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;

namespace Azure.ResourceManager.CosmosDB
{
    internal class DatabaseAccountCassandraKeyspaceThroughputSettingOperationSource : IOperationSource<DatabaseAccountCassandraKeyspaceThroughputSetting>
    {
        private readonly ArmClient _client;
        private readonly Dictionary<string, string> _idMappings = new Dictionary<string, string>()
        {
            { "subscriptionId", "Microsoft.Resources/subscriptions" },
            { "resourceGroupName", "Microsoft.Resources/resourceGroups" },
            { "accountName", "Microsoft.DocumentDB/databaseAccounts" },
            { "keyspaceName", "Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces" },
        };

        internal DatabaseAccountCassandraKeyspaceThroughputSettingOperationSource(ArmClient client)
        {
            _client = client;
        }

        DatabaseAccountCassandraKeyspaceThroughputSetting IOperationSource<DatabaseAccountCassandraKeyspaceThroughputSetting>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            var data = ScrubId(ThroughputSettingsData.DeserializeThroughputSettingsData(document.RootElement));
            return new DatabaseAccountCassandraKeyspaceThroughputSetting(_client, data);
        }

        async ValueTask<DatabaseAccountCassandraKeyspaceThroughputSetting> IOperationSource<DatabaseAccountCassandraKeyspaceThroughputSetting>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            var data = ScrubId(ThroughputSettingsData.DeserializeThroughputSettingsData(document.RootElement));
            return new DatabaseAccountCassandraKeyspaceThroughputSetting(_client, data);
        }

        private ThroughputSettingsData ScrubId(ThroughputSettingsData data)
        {
            if (data.Id.ResourceType == DatabaseAccountCassandraKeyspaceThroughputSetting.ResourceType)
                return data;

            var newId = DatabaseAccountCassandraKeyspaceThroughputSetting.CreateResourceIdentifier(
                GetName("subscriptionId", data.Id),
                GetName("resourceGroupName", data.Id),
                GetName("accountName", data.Id),
                GetName("keyspaceName", data.Id));

            return new ThroughputSettingsData(
                newId,
                newId.Name,
                newId.ResourceType,
                data.SystemData,
                data.Tags,
                data.Location,
                data.Resource);
        }

        private string GetName(string param, ResourceIdentifier id)
        {
            while (id.ResourceType != _idMappings[param])
                id = id.Parent;
            return id.Name;
        }
    }
}
