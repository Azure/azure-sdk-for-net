// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.ResourceManager.CosmosDB.Models
{
    /// <summary> Invoke a command like nodetool for cassandra maintenance. </summary>
    public partial class ClusterResourceInvokeCommandOperation : Operation<CommandOutput>, IOperationSource<CommandOutput>
    {
        private readonly OperationInternals<CommandOutput> _operation;

        /// <summary> Initializes a new instance of ClusterResourceInvokeCommandOperation for mocking. </summary>
        protected ClusterResourceInvokeCommandOperation()
        {
        }

        internal ClusterResourceInvokeCommandOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response)
        {
            _operation = new OperationInternals<CommandOutput>(this, clientDiagnostics, pipeline, request, response, OperationFinalStateVia.Location, "ClusterResourceInvokeCommandOperation");
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override CommandOutput Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<CommandOutput>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<CommandOutput>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        CommandOutput IOperationSource<CommandOutput>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            return CommandOutput.DeserializeCommandOutput(document.RootElement);
        }

        async ValueTask<CommandOutput> IOperationSource<CommandOutput>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            return CommandOutput.DeserializeCommandOutput(document.RootElement);
        }
    }
}
