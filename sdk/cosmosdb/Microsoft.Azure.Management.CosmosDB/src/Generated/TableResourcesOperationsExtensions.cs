// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TableResourcesOperations.
    /// </summary>
    public static partial class TableResourcesOperationsExtensions
    {
            /// <summary>
            /// Lists the Tables under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static IEnumerable<TableGetResults> ListTables(this ITableResourcesOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListTablesAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the Tables under an existing Azure Cosmos DB database account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<TableGetResults>> ListTablesAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTablesWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Tables under an existing Azure Cosmos DB database account with the
            /// provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            public static TableGetResults GetTable(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName)
            {
                return operations.GetTableAsync(resourceGroupName, accountName, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Tables under an existing Azure Cosmos DB database account with the
            /// provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TableGetResults> GetTableAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='createUpdateTableParameters'>
            /// The parameters to provide for the current Table.
            /// </param>
            public static TableGetResults CreateUpdateTable(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, TableCreateUpdateParameters createUpdateTableParameters)
            {
                return operations.CreateUpdateTableAsync(resourceGroupName, accountName, tableName, createUpdateTableParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='createUpdateTableParameters'>
            /// The parameters to provide for the current Table.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TableGetResults> CreateUpdateTableAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, TableCreateUpdateParameters createUpdateTableParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, createUpdateTableParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            public static void DeleteTable(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName)
            {
                operations.DeleteTableAsync(resourceGroupName, accountName, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTableAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the RUs per second of the Table under an existing Azure Cosmos DB
            /// database account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            public static ThroughputSettingsGetResults GetTableThroughput(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName)
            {
                return operations.GetTableThroughputAsync(resourceGroupName, accountName, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the RUs per second of the Table under an existing Azure Cosmos DB
            /// database account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> GetTableThroughputAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableThroughputWithHttpMessagesAsync(resourceGroupName, accountName, tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update RUs per second of an Azure Cosmos DB Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The parameters to provide for the RUs per second of the current Table.
            /// </param>
            public static ThroughputSettingsGetResults UpdateTableThroughput(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters)
            {
                return operations.UpdateTableThroughputAsync(resourceGroupName, accountName, tableName, updateThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update RUs per second of an Azure Cosmos DB Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The parameters to provide for the RUs per second of the current Table.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> UpdateTableThroughputAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTableThroughputWithHttpMessagesAsync(resourceGroupName, accountName, tableName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='createUpdateTableParameters'>
            /// The parameters to provide for the current Table.
            /// </param>
            public static TableGetResults BeginCreateUpdateTable(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, TableCreateUpdateParameters createUpdateTableParameters)
            {
                return operations.BeginCreateUpdateTableAsync(resourceGroupName, accountName, tableName, createUpdateTableParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='createUpdateTableParameters'>
            /// The parameters to provide for the current Table.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TableGetResults> BeginCreateUpdateTableAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, TableCreateUpdateParameters createUpdateTableParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateUpdateTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, createUpdateTableParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            public static void BeginDeleteTable(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName)
            {
                operations.BeginDeleteTableAsync(resourceGroupName, accountName, tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Table.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteTableAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteTableWithHttpMessagesAsync(resourceGroupName, accountName, tableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update RUs per second of an Azure Cosmos DB Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The parameters to provide for the RUs per second of the current Table.
            /// </param>
            public static ThroughputSettingsGetResults BeginUpdateTableThroughput(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters)
            {
                return operations.BeginUpdateTableThroughputAsync(resourceGroupName, accountName, tableName, updateThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update RUs per second of an Azure Cosmos DB Table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='tableName'>
            /// Cosmos DB table name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The parameters to provide for the RUs per second of the current Table.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> BeginUpdateTableThroughputAsync(this ITableResourcesOperations operations, string resourceGroupName, string accountName, string tableName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateTableThroughputWithHttpMessagesAsync(resourceGroupName, accountName, tableName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
