// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MongoDBResourcesOperations.
    /// </summary>
    public static partial class MongoDBResourcesOperationsExtensions
    {
            /// <summary>
            /// Lists the MongoDB databases under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static IEnumerable<MongoDBDatabaseGetResults> ListMongoDBDatabases(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListMongoDBDatabasesAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the MongoDB databases under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<MongoDBDatabaseGetResults>> ListMongoDBDatabasesAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMongoDBDatabasesWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the MongoDB databases under an existing Azure Cosmos DB database
            /// account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static MongoDBDatabaseGetResults GetMongoDBDatabase(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.GetMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the MongoDB databases under an existing Azure Cosmos DB database
            /// account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoDBDatabaseGetResults> GetMongoDBDatabaseAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or updates Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='createUpdateMongoDBDatabaseParameters'>
            /// The parameters to provide for the current MongoDB database.
            /// </param>
            public static MongoDBDatabaseGetResults CreateUpdateMongoDBDatabase(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters)
            {
                return operations.CreateUpdateMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or updates Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='createUpdateMongoDBDatabaseParameters'>
            /// The parameters to provide for the current MongoDB database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoDBDatabaseGetResults> CreateUpdateMongoDBDatabaseAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB MongoDB database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static void DeleteMongoDBDatabase(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                operations.DeleteMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB MongoDB database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMongoDBDatabaseAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the RUs per second of the MongoDB database under an existing Azure
            /// Cosmos DB database account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static ThroughputSettingsGetResults GetMongoDBDatabaseThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.GetMongoDBDatabaseThroughputAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the RUs per second of the MongoDB database under an existing Azure
            /// Cosmos DB database account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> GetMongoDBDatabaseThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMongoDBDatabaseThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update RUs per second of the an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The RUs per second of the parameters to provide for the current MongoDB
            /// database.
            /// </param>
            public static ThroughputSettingsGetResults UpdateMongoDBDatabaseThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters)
            {
                return operations.UpdateMongoDBDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update RUs per second of the an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The RUs per second of the parameters to provide for the current MongoDB
            /// database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> UpdateMongoDBDatabaseThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMongoDBDatabaseThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB database from manual throughput to
            /// autoscale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static ThroughputSettingsGetResults MigrateMongoDBDatabaseToAutoscale(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.MigrateMongoDBDatabaseToAutoscaleAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB database from manual throughput to
            /// autoscale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> MigrateMongoDBDatabaseToAutoscaleAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateMongoDBDatabaseToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
            /// throughput
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static ThroughputSettingsGetResults MigrateMongoDBDatabaseToManualThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.MigrateMongoDBDatabaseToManualThroughputAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
            /// throughput
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> MigrateMongoDBDatabaseToManualThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateMongoDBDatabaseToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve throughput distribution for an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='retrieveThroughputParameters'>
            /// The parameters to provide for retrieving throughput distribution for the
            /// current MongoDB database.
            /// </param>
            public static PhysicalPartitionThroughputInfoResult MongoDBDatabaseRetrieveThroughputDistribution(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, RetrieveThroughputParameters retrieveThroughputParameters)
            {
                return operations.MongoDBDatabaseRetrieveThroughputDistributionAsync(resourceGroupName, accountName, databaseName, retrieveThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve throughput distribution for an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='retrieveThroughputParameters'>
            /// The parameters to provide for retrieving throughput distribution for the
            /// current MongoDB database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionThroughputInfoResult> MongoDBDatabaseRetrieveThroughputDistributionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, RetrieveThroughputParameters retrieveThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MongoDBDatabaseRetrieveThroughputDistributionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, retrieveThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Redistribute throughput for an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='redistributeThroughputParameters'>
            /// The parameters to provide for redistributing throughput for the current
            /// MongoDB database.
            /// </param>
            public static PhysicalPartitionThroughputInfoResult MongoDBDatabaseRedistributeThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, RedistributeThroughputParameters redistributeThroughputParameters)
            {
                return operations.MongoDBDatabaseRedistributeThroughputAsync(resourceGroupName, accountName, databaseName, redistributeThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redistribute throughput for an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='redistributeThroughputParameters'>
            /// The parameters to provide for redistributing throughput for the current
            /// MongoDB database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionThroughputInfoResult> MongoDBDatabaseRedistributeThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, RedistributeThroughputParameters redistributeThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MongoDBDatabaseRedistributeThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, redistributeThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve throughput distribution for an Azure Cosmos DB MongoDB container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='retrieveThroughputParameters'>
            /// The parameters to provide for retrieving throughput distribution for the
            /// current MongoDB container.
            /// </param>
            public static PhysicalPartitionThroughputInfoResult MongoDBContainerRetrieveThroughputDistribution(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, RetrieveThroughputParameters retrieveThroughputParameters)
            {
                return operations.MongoDBContainerRetrieveThroughputDistributionAsync(resourceGroupName, accountName, databaseName, collectionName, retrieveThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve throughput distribution for an Azure Cosmos DB MongoDB container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='retrieveThroughputParameters'>
            /// The parameters to provide for retrieving throughput distribution for the
            /// current MongoDB container.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionThroughputInfoResult> MongoDBContainerRetrieveThroughputDistributionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, RetrieveThroughputParameters retrieveThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MongoDBContainerRetrieveThroughputDistributionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, retrieveThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Redistribute throughput for an Azure Cosmos DB MongoDB container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='redistributeThroughputParameters'>
            /// The parameters to provide for redistributing throughput for the current
            /// MongoDB container.
            /// </param>
            public static PhysicalPartitionThroughputInfoResult MongoDBContainerRedistributeThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, RedistributeThroughputParameters redistributeThroughputParameters)
            {
                return operations.MongoDBContainerRedistributeThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, redistributeThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redistribute throughput for an Azure Cosmos DB MongoDB container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='redistributeThroughputParameters'>
            /// The parameters to provide for redistributing throughput for the current
            /// MongoDB container.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionThroughputInfoResult> MongoDBContainerRedistributeThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, RedistributeThroughputParameters redistributeThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MongoDBContainerRedistributeThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, redistributeThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the MongoDB collection under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static IEnumerable<MongoDBCollectionGetResults> ListMongoDBCollections(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.ListMongoDBCollectionsAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the MongoDB collection under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<MongoDBCollectionGetResults>> ListMongoDBCollectionsAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMongoDBCollectionsWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the MongoDB collection under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            public static MongoDBCollectionGetResults GetMongoDBCollection(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
            {
                return operations.GetMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the MongoDB collection under an existing Azure Cosmos DB database
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoDBCollectionGetResults> GetMongoDBCollectionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB MongoDB Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='createUpdateMongoDBCollectionParameters'>
            /// The parameters to provide for the current MongoDB Collection.
            /// </param>
            public static MongoDBCollectionGetResults CreateUpdateMongoDBCollection(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters)
            {
                return operations.CreateUpdateMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB MongoDB Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='createUpdateMongoDBCollectionParameters'>
            /// The parameters to provide for the current MongoDB Collection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoDBCollectionGetResults> CreateUpdateMongoDBCollectionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB MongoDB Collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            public static void DeleteMongoDBCollection(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
            {
                operations.DeleteMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB MongoDB Collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMongoDBCollectionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Merges the partitions of a MongoDB Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='mergeParameters'>
            /// The parameters for the merge operation.
            /// </param>
            public static PhysicalPartitionStorageInfoCollection ListMongoDBCollectionPartitionMerge(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MergeParameters mergeParameters)
            {
                return operations.ListMongoDBCollectionPartitionMergeAsync(resourceGroupName, accountName, databaseName, collectionName, mergeParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Merges the partitions of a MongoDB Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='mergeParameters'>
            /// The parameters for the merge operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionStorageInfoCollection> ListMongoDBCollectionPartitionMergeAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MergeParameters mergeParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMongoDBCollectionPartitionMergeWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, mergeParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the RUs per second of the MongoDB collection under an existing Azure
            /// Cosmos DB database account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            public static ThroughputSettingsGetResults GetMongoDBCollectionThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
            {
                return operations.GetMongoDBCollectionThroughputAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the RUs per second of the MongoDB collection under an existing Azure
            /// Cosmos DB database account with the provided name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> GetMongoDBCollectionThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMongoDBCollectionThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the RUs per second of an Azure Cosmos DB MongoDB collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The RUs per second of the parameters to provide for the current MongoDB
            /// collection.
            /// </param>
            public static ThroughputSettingsGetResults UpdateMongoDBCollectionThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters)
            {
                return operations.UpdateMongoDBCollectionThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the RUs per second of an Azure Cosmos DB MongoDB collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The RUs per second of the parameters to provide for the current MongoDB
            /// collection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> UpdateMongoDBCollectionThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMongoDBCollectionThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
            /// autoscale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            public static ThroughputSettingsGetResults MigrateMongoDBCollectionToAutoscale(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
            {
                return operations.MigrateMongoDBCollectionToAutoscaleAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
            /// autoscale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> MigrateMongoDBCollectionToAutoscaleAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateMongoDBCollectionToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
            /// throughput
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            public static ThroughputSettingsGetResults MigrateMongoDBCollectionToManualThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
            {
                return operations.MigrateMongoDBCollectionToManualThroughputAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
            /// throughput
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> MigrateMongoDBCollectionToManualThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateMongoDBCollectionToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the properties of an existing Azure Cosmos DB Mongo Role
            /// Definition with the given Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static MongoRoleDefinitionGetResults GetMongoRoleDefinition(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName)
            {
                return operations.GetMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the properties of an existing Azure Cosmos DB Mongo Role
            /// Definition with the given Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoRoleDefinitionGetResults> GetMongoRoleDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an Azure Cosmos DB Mongo Role Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='createUpdateMongoRoleDefinitionParameters'>
            /// The properties required to create or update a Role Definition.
            /// </param>
            public static MongoRoleDefinitionGetResults CreateUpdateMongoRoleDefinition(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, MongoRoleDefinitionCreateUpdateParameters createUpdateMongoRoleDefinitionParameters)
            {
                return operations.CreateUpdateMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName, createUpdateMongoRoleDefinitionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an Azure Cosmos DB Mongo Role Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='createUpdateMongoRoleDefinitionParameters'>
            /// The properties required to create or update a Role Definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoRoleDefinitionGetResults> CreateUpdateMongoRoleDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, MongoRoleDefinitionCreateUpdateParameters createUpdateMongoRoleDefinitionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, createUpdateMongoRoleDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Mongo Role Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static void DeleteMongoRoleDefinition(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName)
            {
                operations.DeleteMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Mongo Role Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMongoRoleDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static IEnumerable<MongoRoleDefinitionGetResults> ListMongoRoleDefinitions(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListMongoRoleDefinitionsAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<MongoRoleDefinitionGetResults>> ListMongoRoleDefinitionsAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMongoRoleDefinitionsWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the properties of an existing Azure Cosmos DB Mongo User
            /// Definition with the given Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static MongoUserDefinitionGetResults GetMongoUserDefinition(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName)
            {
                return operations.GetMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the properties of an existing Azure Cosmos DB Mongo User
            /// Definition with the given Id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoUserDefinitionGetResults> GetMongoUserDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='createUpdateMongoUserDefinitionParameters'>
            /// The properties required to create or update a User Definition.
            /// </param>
            public static MongoUserDefinitionGetResults CreateUpdateMongoUserDefinition(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, MongoUserDefinitionCreateUpdateParameters createUpdateMongoUserDefinitionParameters)
            {
                return operations.CreateUpdateMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName, createUpdateMongoUserDefinitionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='createUpdateMongoUserDefinitionParameters'>
            /// The properties required to create or update a User Definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoUserDefinitionGetResults> CreateUpdateMongoUserDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, MongoUserDefinitionCreateUpdateParameters createUpdateMongoUserDefinitionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, createUpdateMongoUserDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static void DeleteMongoUserDefinition(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName)
            {
                operations.DeleteMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMongoUserDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves the list of all Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static IEnumerable<MongoUserDefinitionGetResults> ListMongoUserDefinitions(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListMongoUserDefinitionsAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the list of all Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<MongoUserDefinitionGetResults>> ListMongoUserDefinitionsAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMongoUserDefinitionsWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves continuous backup information for a Mongodb collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='location'>
            /// The name of the continuous backup restore location.
            /// </param>
            public static BackupInformation RetrieveContinuousBackupInformation(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ContinuousBackupRestoreLocation location)
            {
                return operations.RetrieveContinuousBackupInformationAsync(resourceGroupName, accountName, databaseName, collectionName, location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves continuous backup information for a Mongodb collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='location'>
            /// The name of the continuous backup restore location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInformation> RetrieveContinuousBackupInformationAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ContinuousBackupRestoreLocation location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveContinuousBackupInformationWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or updates Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='createUpdateMongoDBDatabaseParameters'>
            /// The parameters to provide for the current MongoDB database.
            /// </param>
            public static MongoDBDatabaseGetResults BeginCreateUpdateMongoDBDatabase(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters)
            {
                return operations.BeginCreateUpdateMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or updates Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='createUpdateMongoDBDatabaseParameters'>
            /// The parameters to provide for the current MongoDB database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoDBDatabaseGetResults> BeginCreateUpdateMongoDBDatabaseAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, MongoDBDatabaseCreateUpdateParameters createUpdateMongoDBDatabaseParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateUpdateMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, createUpdateMongoDBDatabaseParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB MongoDB database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static void BeginDeleteMongoDBDatabase(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                operations.BeginDeleteMongoDBDatabaseAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB MongoDB database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteMongoDBDatabaseAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteMongoDBDatabaseWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update RUs per second of the an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The RUs per second of the parameters to provide for the current MongoDB
            /// database.
            /// </param>
            public static ThroughputSettingsGetResults BeginUpdateMongoDBDatabaseThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters)
            {
                return operations.BeginUpdateMongoDBDatabaseThroughputAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update RUs per second of the an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The RUs per second of the parameters to provide for the current MongoDB
            /// database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> BeginUpdateMongoDBDatabaseThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateMongoDBDatabaseThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB database from manual throughput to
            /// autoscale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static ThroughputSettingsGetResults BeginMigrateMongoDBDatabaseToAutoscale(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.BeginMigrateMongoDBDatabaseToAutoscaleAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB database from manual throughput to
            /// autoscale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> BeginMigrateMongoDBDatabaseToAutoscaleAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateMongoDBDatabaseToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
            /// throughput
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            public static ThroughputSettingsGetResults BeginMigrateMongoDBDatabaseToManualThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName)
            {
                return operations.BeginMigrateMongoDBDatabaseToManualThroughputAsync(resourceGroupName, accountName, databaseName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB database from autoscale to manual
            /// throughput
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> BeginMigrateMongoDBDatabaseToManualThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateMongoDBDatabaseToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve throughput distribution for an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='retrieveThroughputParameters'>
            /// The parameters to provide for retrieving throughput distribution for the
            /// current MongoDB database.
            /// </param>
            public static PhysicalPartitionThroughputInfoResult BeginMongoDBDatabaseRetrieveThroughputDistribution(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, RetrieveThroughputParameters retrieveThroughputParameters)
            {
                return operations.BeginMongoDBDatabaseRetrieveThroughputDistributionAsync(resourceGroupName, accountName, databaseName, retrieveThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve throughput distribution for an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='retrieveThroughputParameters'>
            /// The parameters to provide for retrieving throughput distribution for the
            /// current MongoDB database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionThroughputInfoResult> BeginMongoDBDatabaseRetrieveThroughputDistributionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, RetrieveThroughputParameters retrieveThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMongoDBDatabaseRetrieveThroughputDistributionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, retrieveThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Redistribute throughput for an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='redistributeThroughputParameters'>
            /// The parameters to provide for redistributing throughput for the current
            /// MongoDB database.
            /// </param>
            public static PhysicalPartitionThroughputInfoResult BeginMongoDBDatabaseRedistributeThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, RedistributeThroughputParameters redistributeThroughputParameters)
            {
                return operations.BeginMongoDBDatabaseRedistributeThroughputAsync(resourceGroupName, accountName, databaseName, redistributeThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redistribute throughput for an Azure Cosmos DB MongoDB database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='redistributeThroughputParameters'>
            /// The parameters to provide for redistributing throughput for the current
            /// MongoDB database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionThroughputInfoResult> BeginMongoDBDatabaseRedistributeThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, RedistributeThroughputParameters redistributeThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMongoDBDatabaseRedistributeThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, redistributeThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve throughput distribution for an Azure Cosmos DB MongoDB container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='retrieveThroughputParameters'>
            /// The parameters to provide for retrieving throughput distribution for the
            /// current MongoDB container.
            /// </param>
            public static PhysicalPartitionThroughputInfoResult BeginMongoDBContainerRetrieveThroughputDistribution(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, RetrieveThroughputParameters retrieveThroughputParameters)
            {
                return operations.BeginMongoDBContainerRetrieveThroughputDistributionAsync(resourceGroupName, accountName, databaseName, collectionName, retrieveThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve throughput distribution for an Azure Cosmos DB MongoDB container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='retrieveThroughputParameters'>
            /// The parameters to provide for retrieving throughput distribution for the
            /// current MongoDB container.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionThroughputInfoResult> BeginMongoDBContainerRetrieveThroughputDistributionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, RetrieveThroughputParameters retrieveThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMongoDBContainerRetrieveThroughputDistributionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, retrieveThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Redistribute throughput for an Azure Cosmos DB MongoDB container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='redistributeThroughputParameters'>
            /// The parameters to provide for redistributing throughput for the current
            /// MongoDB container.
            /// </param>
            public static PhysicalPartitionThroughputInfoResult BeginMongoDBContainerRedistributeThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, RedistributeThroughputParameters redistributeThroughputParameters)
            {
                return operations.BeginMongoDBContainerRedistributeThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, redistributeThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redistribute throughput for an Azure Cosmos DB MongoDB container
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='redistributeThroughputParameters'>
            /// The parameters to provide for redistributing throughput for the current
            /// MongoDB container.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionThroughputInfoResult> BeginMongoDBContainerRedistributeThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, RedistributeThroughputParameters redistributeThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMongoDBContainerRedistributeThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, redistributeThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB MongoDB Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='createUpdateMongoDBCollectionParameters'>
            /// The parameters to provide for the current MongoDB Collection.
            /// </param>
            public static MongoDBCollectionGetResults BeginCreateUpdateMongoDBCollection(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters)
            {
                return operations.BeginCreateUpdateMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update an Azure Cosmos DB MongoDB Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='createUpdateMongoDBCollectionParameters'>
            /// The parameters to provide for the current MongoDB Collection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoDBCollectionGetResults> BeginCreateUpdateMongoDBCollectionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MongoDBCollectionCreateUpdateParameters createUpdateMongoDBCollectionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateUpdateMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, createUpdateMongoDBCollectionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB MongoDB Collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            public static void BeginDeleteMongoDBCollection(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
            {
                operations.BeginDeleteMongoDBCollectionAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB MongoDB Collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteMongoDBCollectionAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteMongoDBCollectionWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Merges the partitions of a MongoDB Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='mergeParameters'>
            /// The parameters for the merge operation.
            /// </param>
            public static PhysicalPartitionStorageInfoCollection BeginListMongoDBCollectionPartitionMerge(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MergeParameters mergeParameters)
            {
                return operations.BeginListMongoDBCollectionPartitionMergeAsync(resourceGroupName, accountName, databaseName, collectionName, mergeParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Merges the partitions of a MongoDB Collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='mergeParameters'>
            /// The parameters for the merge operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PhysicalPartitionStorageInfoCollection> BeginListMongoDBCollectionPartitionMergeAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, MergeParameters mergeParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginListMongoDBCollectionPartitionMergeWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, mergeParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the RUs per second of an Azure Cosmos DB MongoDB collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The RUs per second of the parameters to provide for the current MongoDB
            /// collection.
            /// </param>
            public static ThroughputSettingsGetResults BeginUpdateMongoDBCollectionThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters)
            {
                return operations.BeginUpdateMongoDBCollectionThroughputAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the RUs per second of an Azure Cosmos DB MongoDB collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='updateThroughputParameters'>
            /// The RUs per second of the parameters to provide for the current MongoDB
            /// collection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> BeginUpdateMongoDBCollectionThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ThroughputSettingsUpdateParameters updateThroughputParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateMongoDBCollectionThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, updateThroughputParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
            /// autoscale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            public static ThroughputSettingsGetResults BeginMigrateMongoDBCollectionToAutoscale(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
            {
                return operations.BeginMigrateMongoDBCollectionToAutoscaleAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB collection from manual throughput to
            /// autoscale
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> BeginMigrateMongoDBCollectionToAutoscaleAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateMongoDBCollectionToAutoscaleWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
            /// throughput
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            public static ThroughputSettingsGetResults BeginMigrateMongoDBCollectionToManualThroughput(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName)
            {
                return operations.BeginMigrateMongoDBCollectionToManualThroughputAsync(resourceGroupName, accountName, databaseName, collectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual
            /// throughput
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThroughputSettingsGetResults> BeginMigrateMongoDBCollectionToManualThroughputAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateMongoDBCollectionToManualThroughputWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an Azure Cosmos DB Mongo Role Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='createUpdateMongoRoleDefinitionParameters'>
            /// The properties required to create or update a Role Definition.
            /// </param>
            public static MongoRoleDefinitionGetResults BeginCreateUpdateMongoRoleDefinition(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, MongoRoleDefinitionCreateUpdateParameters createUpdateMongoRoleDefinitionParameters)
            {
                return operations.BeginCreateUpdateMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName, createUpdateMongoRoleDefinitionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an Azure Cosmos DB Mongo Role Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='createUpdateMongoRoleDefinitionParameters'>
            /// The properties required to create or update a Role Definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoRoleDefinitionGetResults> BeginCreateUpdateMongoRoleDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, MongoRoleDefinitionCreateUpdateParameters createUpdateMongoRoleDefinitionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateUpdateMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, createUpdateMongoRoleDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Mongo Role Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static void BeginDeleteMongoRoleDefinition(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName)
            {
                operations.BeginDeleteMongoRoleDefinitionAsync(mongoRoleDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Mongo Role Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoRoleDefinitionId'>
            /// The ID for the Role Definition {dbName.roleName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteMongoRoleDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoRoleDefinitionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteMongoRoleDefinitionWithHttpMessagesAsync(mongoRoleDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates an Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='createUpdateMongoUserDefinitionParameters'>
            /// The properties required to create or update a User Definition.
            /// </param>
            public static MongoUserDefinitionGetResults BeginCreateUpdateMongoUserDefinition(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, MongoUserDefinitionCreateUpdateParameters createUpdateMongoUserDefinitionParameters)
            {
                return operations.BeginCreateUpdateMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName, createUpdateMongoUserDefinitionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='createUpdateMongoUserDefinitionParameters'>
            /// The properties required to create or update a User Definition.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MongoUserDefinitionGetResults> BeginCreateUpdateMongoUserDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, MongoUserDefinitionCreateUpdateParameters createUpdateMongoUserDefinitionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateUpdateMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, createUpdateMongoUserDefinitionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static void BeginDeleteMongoUserDefinition(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName)
            {
                operations.BeginDeleteMongoUserDefinitionAsync(mongoUserDefinitionId, resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Azure Cosmos DB Mongo User Definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mongoUserDefinitionId'>
            /// The ID for the User Definition {dbName.userName}.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteMongoUserDefinitionAsync(this IMongoDBResourcesOperations operations, string mongoUserDefinitionId, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteMongoUserDefinitionWithHttpMessagesAsync(mongoUserDefinitionId, resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves continuous backup information for a Mongodb collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='location'>
            /// The name of the continuous backup restore location.
            /// </param>
            public static BackupInformation BeginRetrieveContinuousBackupInformation(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ContinuousBackupRestoreLocation location)
            {
                return operations.BeginRetrieveContinuousBackupInformationAsync(resourceGroupName, accountName, databaseName, collectionName, location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves continuous backup information for a Mongodb collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='databaseName'>
            /// Cosmos DB database name.
            /// </param>
            /// <param name='collectionName'>
            /// Cosmos DB collection name.
            /// </param>
            /// <param name='location'>
            /// The name of the continuous backup restore location.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInformation> BeginRetrieveContinuousBackupInformationAsync(this IMongoDBResourcesOperations operations, string resourceGroupName, string accountName, string databaseName, string collectionName, ContinuousBackupRestoreLocation location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRetrieveContinuousBackupInformationWithHttpMessagesAsync(resourceGroupName, accountName, databaseName, collectionName, location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
