// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CassandraDataCentersOperations.
    /// </summary>
    public static partial class CassandraDataCentersOperationsExtensions
    {
            /// <summary>
            /// List all data centers in a particular managed Cassandra cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            public static IEnumerable<DataCenterResource> List(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName)
            {
                return operations.ListAsync(resourceGroupName, clusterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all data centers in a particular managed Cassandra cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<DataCenterResource>> ListAsync(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, clusterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the properties of a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            public static DataCenterResource Get(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName)
            {
                return operations.GetAsync(resourceGroupName, clusterName, dataCenterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the properties of a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCenterResource> GetAsync(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, dataCenterName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            public static void Delete(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName)
            {
                operations.DeleteAsync(resourceGroupName, clusterName, dataCenterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, dataCenterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a managed Cassandra data center. When updating, overwrite
            /// all properties. To update only some properties, use PATCH.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='body'>
            /// Parameters specifying the managed Cassandra data center.
            /// </param>
            public static DataCenterResource CreateUpdate(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, DataCenterResource body)
            {
                return operations.CreateUpdateAsync(resourceGroupName, clusterName, dataCenterName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a managed Cassandra data center. When updating, overwrite
            /// all properties. To update only some properties, use PATCH.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='body'>
            /// Parameters specifying the managed Cassandra data center.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCenterResource> CreateUpdateAsync(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, DataCenterResource body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, dataCenterName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update some of the properties of a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='body'>
            /// Parameters to provide for specifying the managed Cassandra data center.
            /// </param>
            public static DataCenterResource Update(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, DataCenterResource body)
            {
                return operations.UpdateAsync(resourceGroupName, clusterName, dataCenterName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update some of the properties of a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='body'>
            /// Parameters to provide for specifying the managed Cassandra data center.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCenterResource> UpdateAsync(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, DataCenterResource body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, dataCenterName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            public static void BeginDelete(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName)
            {
                operations.BeginDeleteAsync(resourceGroupName, clusterName, dataCenterName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, dataCenterName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a managed Cassandra data center. When updating, overwrite
            /// all properties. To update only some properties, use PATCH.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='body'>
            /// Parameters specifying the managed Cassandra data center.
            /// </param>
            public static DataCenterResource BeginCreateUpdate(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, DataCenterResource body)
            {
                return operations.BeginCreateUpdateAsync(resourceGroupName, clusterName, dataCenterName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a managed Cassandra data center. When updating, overwrite
            /// all properties. To update only some properties, use PATCH.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='body'>
            /// Parameters specifying the managed Cassandra data center.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCenterResource> BeginCreateUpdateAsync(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, DataCenterResource body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, dataCenterName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update some of the properties of a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='body'>
            /// Parameters to provide for specifying the managed Cassandra data center.
            /// </param>
            public static DataCenterResource BeginUpdate(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, DataCenterResource body)
            {
                return operations.BeginUpdateAsync(resourceGroupName, clusterName, dataCenterName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update some of the properties of a managed Cassandra data center.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// Managed Cassandra cluster name.
            /// </param>
            /// <param name='dataCenterName'>
            /// Data center name in a managed Cassandra cluster.
            /// </param>
            /// <param name='body'>
            /// Parameters to provide for specifying the managed Cassandra data center.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataCenterResource> BeginUpdateAsync(this ICassandraDataCentersOperations operations, string resourceGroupName, string clusterName, string dataCenterName, DataCenterResource body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, dataCenterName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
