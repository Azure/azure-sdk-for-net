// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataTransferJobsOperations.
    /// </summary>
    public static partial class DataTransferJobsOperationsExtensions
    {
            /// <summary>
            /// Creates a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            /// <param name='jobCreateParameters'>
            /// </param>
            public static DataTransferJobGetResults Create(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, CreateJobRequest jobCreateParameters)
            {
                return operations.CreateAsync(resourceGroupName, accountName, jobName, jobCreateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            /// <param name='jobCreateParameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataTransferJobGetResults> CreateAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, CreateJobRequest jobCreateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, jobName, jobCreateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            public static DataTransferJobGetResults Get(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
            {
                return operations.GetAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataTransferJobGetResults> GetAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Pause a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            public static DataTransferJobGetResults Pause(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
            {
                return operations.PauseAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Pause a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataTransferJobGetResults> PauseAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PauseWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            public static DataTransferJobGetResults Resume(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
            {
                return operations.ResumeAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataTransferJobGetResults> ResumeAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            public static DataTransferJobGetResults Cancel(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName)
            {
                return operations.CancelAsync(resourceGroupName, accountName, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a Data Transfer Job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='jobName'>
            /// Name of the Data Transfer Job
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataTransferJobGetResults> CancelAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelWithHttpMessagesAsync(resourceGroupName, accountName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of Data Transfer jobs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            public static IPage<DataTransferJobGetResults> ListByDatabaseAccount(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListByDatabaseAccountAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Data Transfer jobs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// Cosmos DB database account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataTransferJobGetResults>> ListByDatabaseAccountAsync(this IDataTransferJobsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDatabaseAccountWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of Data Transfer jobs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataTransferJobGetResults> ListByDatabaseAccountNext(this IDataTransferJobsOperations operations, string nextPageLink)
            {
                return operations.ListByDatabaseAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of Data Transfer jobs.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataTransferJobGetResults>> ListByDatabaseAccountNextAsync(this IDataTransferJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDatabaseAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
