// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A CosmosDB Cassandra API data source/sink
    /// </summary>
    [Newtonsoft.Json.JsonObject("CosmosDBCassandra")]
    public partial class CosmosCassandraDataTransferDataSourceSink : DataTransferDataSourceSink
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CosmosCassandraDataTransferDataSourceSink class.
        /// </summary>
        public CosmosCassandraDataTransferDataSourceSink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CosmosCassandraDataTransferDataSourceSink class.
        /// </summary>
        public CosmosCassandraDataTransferDataSourceSink(string keyspaceName, string tableName)
        {
            KeyspaceName = keyspaceName;
            TableName = tableName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "keyspaceName")]
        public string KeyspaceName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tableName")]
        public string TableName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KeyspaceName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyspaceName");
            }
            if (TableName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TableName");
            }
        }
    }
}
