// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Specification of which command to run where
    /// </summary>
    public partial class CommandPostBody
    {
        /// <summary>
        /// Initializes a new instance of the CommandPostBody class.
        /// </summary>
        public CommandPostBody()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CommandPostBody class.
        /// </summary>
        /// <param name="command">The command which should be run</param>
        /// <param name="host">IP address of the cassandra host to run the
        /// command on</param>
        /// <param name="parameters">The parameters for the command to be
        /// run</param>
        /// <param name="cassandraStopStart">If true, stops cassandra before
        /// executing the command and then start it again</param>
        /// <param name="readwrite">If true, allows the command to *write* to
        /// the cassandra directory, otherwise read-only.</param>
        public CommandPostBody(string command, string host, IDictionary<string, string> parameters = default(IDictionary<string, string>), bool? cassandraStopStart = default(bool?), bool? readwrite = default(bool?))
        {
            Command = command;
            Parameters = parameters;
            Host = host;
            CassandraStopStart = cassandraStopStart;
            Readwrite = readwrite;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the command which should be run
        /// </summary>
        [JsonProperty(PropertyName = "command")]
        public string Command { get; set; }

        /// <summary>
        /// Gets or sets the parameters for the command to be run
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IDictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Gets or sets IP address of the cassandra host to run the command on
        /// </summary>
        [JsonProperty(PropertyName = "host")]
        public string Host { get; set; }

        /// <summary>
        /// Gets or sets if true, stops cassandra before executing the command
        /// and then start it again
        /// </summary>
        [JsonProperty(PropertyName = "cassandra-stop-start")]
        public bool? CassandraStopStart { get; set; }

        /// <summary>
        /// Gets or sets if true, allows the command to *write* to the
        /// cassandra directory, otherwise read-only.
        /// </summary>
        [JsonProperty(PropertyName = "readwrite")]
        public bool? Readwrite { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Command == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Command");
            }
            if (Host == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Host");
            }
        }
    }
}
