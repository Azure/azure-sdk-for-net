// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Cosmos DB client encryption policy.
    /// </summary>
    public partial class ClientEncryptionPolicy
    {
        /// <summary>
        /// Initializes a new instance of the ClientEncryptionPolicy class.
        /// </summary>
        public ClientEncryptionPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClientEncryptionPolicy class.
        /// </summary>
        /// <param name="includedPaths">Paths of the item that need encryption
        /// along with path-specific settings.</param>
        /// <param name="policyFormatVersion">Version of the client encryption
        /// policy definition. Supported versions are 1 and 2. Version 2
        /// supports id and partition key path encryption. </param>
        public ClientEncryptionPolicy(IList<ClientEncryptionIncludedPath> includedPaths, int policyFormatVersion)
        {
            IncludedPaths = includedPaths;
            PolicyFormatVersion = policyFormatVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets paths of the item that need encryption along with
        /// path-specific settings.
        /// </summary>
        [JsonProperty(PropertyName = "includedPaths")]
        public IList<ClientEncryptionIncludedPath> IncludedPaths { get; set; }

        /// <summary>
        /// Gets or sets version of the client encryption policy definition.
        /// Supported versions are 1 and 2. Version 2 supports id and partition
        /// key path encryption.
        /// </summary>
        [JsonProperty(PropertyName = "policyFormatVersion")]
        public int PolicyFormatVersion { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (IncludedPaths == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IncludedPaths");
            }
            if (IncludedPaths != null)
            {
                foreach (var element in IncludedPaths)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (PolicyFormatVersion > 2)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PolicyFormatVersion", 2);
            }
            if (PolicyFormatVersion < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PolicyFormatVersion", 1);
            }
        }
    }
}
