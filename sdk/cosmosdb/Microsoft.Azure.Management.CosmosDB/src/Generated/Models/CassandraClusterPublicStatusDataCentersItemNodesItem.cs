// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CassandraClusterPublicStatusDataCentersItemNodesItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CassandraClusterPublicStatusDataCentersItemNodesItem class.
        /// </summary>
        public CassandraClusterPublicStatusDataCentersItemNodesItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CassandraClusterPublicStatusDataCentersItemNodesItem class.
        /// </summary>
        /// <param name="address">The node's IP address.</param>
        /// <param name="state">Possible values include: 'Normal', 'Leaving',
        /// 'Joining', 'Moving', 'Stopped'</param>
        /// <param name="load">The amount of file system data in the data
        /// directory (e.g., 47.66 kB), excluding all content in the snapshots
        /// subdirectories. Because all SSTable data files are included, any
        /// data that is not cleaned up (such as TTL-expired cells or
        /// tombstones) is counted.</param>
        /// <param name="tokens">List of tokens this node covers.</param>
        /// <param name="hostID">The network ID of the node.</param>
        /// <param name="rack">The rack this node is part of.</param>
        /// <param name="timestamp">The timestamp at which that snapshot of
        /// these usage statistics were taken.</param>
        /// <param name="diskUsedKB">The amount of disk used, in kB, of the
        /// directory /var/lib/cassandra.</param>
        /// <param name="diskFreeKB">The amount of disk free, in kB, of the
        /// directory /var/lib/cassandra.</param>
        /// <param name="memoryUsedKB">Used memory (calculated as total - free
        /// - buffers - cache), in kB.</param>
        /// <param name="memoryBuffersAndCachedKB">Memory used by kernel
        /// buffers (Buffers in /proc/meminfo) and page cache and slabs (Cached
        /// and SReclaimable in /proc/meminfo), in kB.</param>
        /// <param name="memoryFreeKB">Unused memory (MemFree and SwapFree in
        /// /proc/meminfo), in kB.</param>
        /// <param name="memoryTotalKB">Total installed memory (MemTotal and
        /// SwapTotal in /proc/meminfo), in kB.</param>
        /// <param name="cpuUsage">A float representing the current system-wide
        /// CPU utilization as a percentage.</param>
        public CassandraClusterPublicStatusDataCentersItemNodesItem(string address = default(string), string state = default(string), string status = default(string), string load = default(string), IList<string> tokens = default(IList<string>), int? size = default(int?), string hostID = default(string), string rack = default(string), string timestamp = default(string), long? diskUsedKB = default(long?), long? diskFreeKB = default(long?), long? memoryUsedKB = default(long?), long? memoryBuffersAndCachedKB = default(long?), long? memoryFreeKB = default(long?), long? memoryTotalKB = default(long?), double? cpuUsage = default(double?))
        {
            Address = address;
            State = state;
            Status = status;
            Load = load;
            Tokens = tokens;
            Size = size;
            HostID = hostID;
            Rack = rack;
            Timestamp = timestamp;
            DiskUsedKB = diskUsedKB;
            DiskFreeKB = diskFreeKB;
            MemoryUsedKB = memoryUsedKB;
            MemoryBuffersAndCachedKB = memoryBuffersAndCachedKB;
            MemoryFreeKB = memoryFreeKB;
            MemoryTotalKB = memoryTotalKB;
            CpuUsage = cpuUsage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the node's IP address.
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Normal', 'Leaving',
        /// 'Joining', 'Moving', 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the amount of file system data in the data directory
        /// (e.g., 47.66 kB), excluding all content in the snapshots
        /// subdirectories. Because all SSTable data files are included, any
        /// data that is not cleaned up (such as TTL-expired cells or
        /// tombstones) is counted.
        /// </summary>
        [JsonProperty(PropertyName = "load")]
        public string Load { get; set; }

        /// <summary>
        /// Gets or sets list of tokens this node covers.
        /// </summary>
        [JsonProperty(PropertyName = "tokens")]
        public IList<string> Tokens { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or sets the network ID of the node.
        /// </summary>
        [JsonProperty(PropertyName = "hostID")]
        public string HostID { get; set; }

        /// <summary>
        /// Gets or sets the rack this node is part of.
        /// </summary>
        [JsonProperty(PropertyName = "rack")]
        public string Rack { get; set; }

        /// <summary>
        /// Gets or sets the timestamp at which that snapshot of these usage
        /// statistics were taken.
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or sets the amount of disk used, in kB, of the directory
        /// /var/lib/cassandra.
        /// </summary>
        [JsonProperty(PropertyName = "diskUsedKB")]
        public long? DiskUsedKB { get; set; }

        /// <summary>
        /// Gets or sets the amount of disk free, in kB, of the directory
        /// /var/lib/cassandra.
        /// </summary>
        [JsonProperty(PropertyName = "diskFreeKB")]
        public long? DiskFreeKB { get; set; }

        /// <summary>
        /// Gets or sets used memory (calculated as total - free - buffers -
        /// cache), in kB.
        /// </summary>
        [JsonProperty(PropertyName = "memoryUsedKB")]
        public long? MemoryUsedKB { get; set; }

        /// <summary>
        /// Gets or sets memory used by kernel buffers (Buffers in
        /// /proc/meminfo) and page cache and slabs (Cached and SReclaimable in
        /// /proc/meminfo), in kB.
        /// </summary>
        [JsonProperty(PropertyName = "memoryBuffersAndCachedKB")]
        public long? MemoryBuffersAndCachedKB { get; set; }

        /// <summary>
        /// Gets or sets unused memory (MemFree and SwapFree in /proc/meminfo),
        /// in kB.
        /// </summary>
        [JsonProperty(PropertyName = "memoryFreeKB")]
        public long? MemoryFreeKB { get; set; }

        /// <summary>
        /// Gets or sets total installed memory (MemTotal and SwapTotal in
        /// /proc/meminfo), in kB.
        /// </summary>
        [JsonProperty(PropertyName = "memoryTotalKB")]
        public long? MemoryTotalKB { get; set; }

        /// <summary>
        /// Gets or sets a float representing the current system-wide CPU
        /// utilization as a percentage.
        /// </summary>
        [JsonProperty(PropertyName = "cpuUsage")]
        public double? CpuUsage { get; set; }

    }
}
