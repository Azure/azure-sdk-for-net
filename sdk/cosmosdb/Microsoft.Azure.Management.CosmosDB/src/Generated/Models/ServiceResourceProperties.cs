// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Services response resource.
    /// </summary>
    public partial class ServiceResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServiceResourceProperties class.
        /// </summary>
        public ServiceResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceResourceProperties class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="creationTime">Time of the last state change (ISO-8601
        /// format).</param>
        /// <param name="instanceSize">Possible values include: 'Cosmos.D4s',
        /// 'Cosmos.D8s', 'Cosmos.D16s'</param>
        /// <param name="instanceCount">Instance count for the service.</param>
        /// <param name="status">Possible values include: 'Creating',
        /// 'Running', 'Updating', 'Deleting', 'Error', 'Stopped'</param>
        public ServiceResourceProperties(IDictionary<string, object> additionalProperties = default(IDictionary<string, object>), System.DateTime? creationTime = default(System.DateTime?), string instanceSize = default(string), int? instanceCount = default(int?), string status = default(string))
        {
            AdditionalProperties = additionalProperties;
            CreationTime = creationTime;
            InstanceSize = instanceSize;
            InstanceCount = instanceCount;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets time of the last state change (ISO-8601 format).
        /// </summary>
        [JsonProperty(PropertyName = "creationTime")]
        public System.DateTime? CreationTime { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'Cosmos.D4s', 'Cosmos.D8s',
        /// 'Cosmos.D16s'
        /// </summary>
        [JsonProperty(PropertyName = "instanceSize")]
        public string InstanceSize { get; set; }

        /// <summary>
        /// Gets or sets instance count for the service.
        /// </summary>
        [JsonProperty(PropertyName = "instanceCount")]
        public int? InstanceCount { get; set; }

        /// <summary>
        /// Gets possible values include: 'Creating', 'Running', 'Updating',
        /// 'Deleting', 'Error', 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InstanceCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "InstanceCount", 0);
            }
        }
    }
}
