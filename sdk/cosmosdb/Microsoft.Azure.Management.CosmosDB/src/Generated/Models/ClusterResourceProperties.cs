// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Properties of a managed Cassandra cluster.
    /// </summary>
    public partial class ClusterResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the ClusterResourceProperties class.
        /// </summary>
        public ClusterResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterResourceProperties class.
        /// </summary>
        /// <param name="provisioningState">Possible values include:
        /// 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed',
        /// 'Canceled'</param>
        /// <param name="restoreFromBackupId">To create an empty cluster, omit
        /// this field or set it to null. To restore a backup into a new
        /// cluster, set this field to the resource id of the backup.</param>
        /// <param name="delegatedManagementSubnetId">Resource id of a subnet
        /// that this cluster's management service should have its network
        /// interface attached to. The subnet must be routable to all subnets
        /// that will be delegated to data centers. The resource id must be of
        /// the form '/subscriptions/&lt;subscription
        /// id&gt;/resourceGroups/&lt;resource
        /// group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual
        /// network&gt;/subnets/&lt;subnet&gt;'</param>
        /// <param name="cassandraVersion">Which version of Cassandra should
        /// this cluster converge to running (e.g., 3.11). When updated, the
        /// cluster may take some time to migrate to the new version.</param>
        /// <param name="clusterNameOverride">If you need to set the
        /// clusterName property in cassandra.yaml to something besides the
        /// resource name of the cluster, set the value to use on this
        /// property.</param>
        /// <param name="authenticationMethod">Which authentication method
        /// Cassandra should use to authenticate clients. 'None' turns off
        /// authentication, so should not be used except in emergencies.
        /// 'Cassandra' is the default password based authentication. The
        /// default is 'Cassandra'. Possible values include: 'None',
        /// 'Cassandra'</param>
        /// <param name="initialCassandraAdminPassword">Initial password for
        /// clients connecting as admin to the cluster. Should be changed after
        /// cluster creation. Returns null on GET. This field only applies when
        /// the authenticationMethod field is 'Cassandra'.</param>
        /// <param name="hoursBetweenBackups">Number of hours to wait between
        /// taking a backup of the cluster. To disable backups, set this
        /// property to 0.</param>
        /// <param name="prometheusEndpoint">Hostname or IP address where the
        /// Prometheus endpoint containing data about the managed Cassandra
        /// nodes can be reached.</param>
        /// <param name="repairEnabled">Should automatic repairs run on this
        /// cluster? If omitted, this is true, and should stay true unless you
        /// are running a hybrid cluster where you are already doing your own
        /// repairs.</param>
        /// <param name="clientCertificates">List of TLS certificates used to
        /// authorize clients connecting to the cluster. All connections are
        /// TLS encrypted whether clientCertificates is set or not, but if
        /// clientCertificates is set, the managed Cassandra cluster will
        /// reject all connections not bearing a TLS client certificate that
        /// can be validated from one or more of the public certificates in
        /// this property.</param>
        /// <param name="externalGossipCertificates">List of TLS certificates
        /// used to authorize gossip from unmanaged data centers. The TLS
        /// certificates of all nodes in unmanaged data centers must be
        /// verifiable using one of the certificates provided in this
        /// property.</param>
        /// <param name="gossipCertificates">List of TLS certificates that
        /// unmanaged nodes must trust for gossip with managed nodes. All
        /// managed nodes will present TLS client certificates that are
        /// verifiable using one of the certificates provided in this
        /// property.</param>
        /// <param name="externalSeedNodes">List of IP addresses of seed nodes
        /// in unmanaged data centers. These will be added to the seed node
        /// lists of all managed nodes.</param>
        /// <param name="seedNodes">List of IP addresses of seed nodes in the
        /// managed data centers. These should be added to the seed node lists
        /// of all unmanaged nodes.</param>
        public ClusterResourceProperties(string provisioningState = default(string), string restoreFromBackupId = default(string), string delegatedManagementSubnetId = default(string), string cassandraVersion = default(string), string clusterNameOverride = default(string), string authenticationMethod = default(string), string initialCassandraAdminPassword = default(string), int? hoursBetweenBackups = default(int?), SeedNode prometheusEndpoint = default(SeedNode), bool? repairEnabled = default(bool?), IList<Certificate> clientCertificates = default(IList<Certificate>), IList<Certificate> externalGossipCertificates = default(IList<Certificate>), IList<Certificate> gossipCertificates = default(IList<Certificate>), IList<SeedNode> externalSeedNodes = default(IList<SeedNode>), IList<SeedNode> seedNodes = default(IList<SeedNode>))
        {
            ProvisioningState = provisioningState;
            RestoreFromBackupId = restoreFromBackupId;
            DelegatedManagementSubnetId = delegatedManagementSubnetId;
            CassandraVersion = cassandraVersion;
            ClusterNameOverride = clusterNameOverride;
            AuthenticationMethod = authenticationMethod;
            InitialCassandraAdminPassword = initialCassandraAdminPassword;
            HoursBetweenBackups = hoursBetweenBackups;
            PrometheusEndpoint = prometheusEndpoint;
            RepairEnabled = repairEnabled;
            ClientCertificates = clientCertificates;
            ExternalGossipCertificates = externalGossipCertificates;
            GossipCertificates = gossipCertificates;
            ExternalSeedNodes = externalSeedNodes;
            SeedNodes = seedNodes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Creating', 'Updating',
        /// 'Deleting', 'Succeeded', 'Failed', 'Canceled'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets to create an empty cluster, omit this field or set it
        /// to null. To restore a backup into a new cluster, set this field to
        /// the resource id of the backup.
        /// </summary>
        [JsonProperty(PropertyName = "restoreFromBackupId")]
        public string RestoreFromBackupId { get; set; }

        /// <summary>
        /// Gets or sets resource id of a subnet that this cluster's management
        /// service should have its network interface attached to. The subnet
        /// must be routable to all subnets that will be delegated to data
        /// centers. The resource id must be of the form
        /// '/subscriptions/&amp;lt;subscription
        /// id&amp;gt;/resourceGroups/&amp;lt;resource
        /// group&amp;gt;/providers/Microsoft.Network/virtualNetworks/&amp;lt;virtual
        /// network&amp;gt;/subnets/&amp;lt;subnet&amp;gt;'
        /// </summary>
        [JsonProperty(PropertyName = "delegatedManagementSubnetId")]
        public string DelegatedManagementSubnetId { get; set; }

        /// <summary>
        /// Gets or sets which version of Cassandra should this cluster
        /// converge to running (e.g., 3.11). When updated, the cluster may
        /// take some time to migrate to the new version.
        /// </summary>
        [JsonProperty(PropertyName = "cassandraVersion")]
        public string CassandraVersion { get; set; }

        /// <summary>
        /// Gets or sets if you need to set the clusterName property in
        /// cassandra.yaml to something besides the resource name of the
        /// cluster, set the value to use on this property.
        /// </summary>
        [JsonProperty(PropertyName = "clusterNameOverride")]
        public string ClusterNameOverride { get; set; }

        /// <summary>
        /// Gets or sets which authentication method Cassandra should use to
        /// authenticate clients. 'None' turns off authentication, so should
        /// not be used except in emergencies. 'Cassandra' is the default
        /// password based authentication. The default is 'Cassandra'. Possible
        /// values include: 'None', 'Cassandra'
        /// </summary>
        [JsonProperty(PropertyName = "authenticationMethod")]
        public string AuthenticationMethod { get; set; }

        /// <summary>
        /// Gets or sets initial password for clients connecting as admin to
        /// the cluster. Should be changed after cluster creation. Returns null
        /// on GET. This field only applies when the authenticationMethod field
        /// is 'Cassandra'.
        /// </summary>
        [JsonProperty(PropertyName = "initialCassandraAdminPassword")]
        public string InitialCassandraAdminPassword { get; set; }

        /// <summary>
        /// Gets or sets number of hours to wait between taking a backup of the
        /// cluster. To disable backups, set this property to 0.
        /// </summary>
        [JsonProperty(PropertyName = "hoursBetweenBackups")]
        public int? HoursBetweenBackups { get; set; }

        /// <summary>
        /// Gets or sets hostname or IP address where the Prometheus endpoint
        /// containing data about the managed Cassandra nodes can be reached.
        /// </summary>
        [JsonProperty(PropertyName = "prometheusEndpoint")]
        public SeedNode PrometheusEndpoint { get; set; }

        /// <summary>
        /// Gets or sets should automatic repairs run on this cluster? If
        /// omitted, this is true, and should stay true unless you are running
        /// a hybrid cluster where you are already doing your own repairs.
        /// </summary>
        [JsonProperty(PropertyName = "repairEnabled")]
        public bool? RepairEnabled { get; set; }

        /// <summary>
        /// Gets or sets list of TLS certificates used to authorize clients
        /// connecting to the cluster. All connections are TLS encrypted
        /// whether clientCertificates is set or not, but if clientCertificates
        /// is set, the managed Cassandra cluster will reject all connections
        /// not bearing a TLS client certificate that can be validated from one
        /// or more of the public certificates in this property.
        /// </summary>
        [JsonProperty(PropertyName = "clientCertificates")]
        public IList<Certificate> ClientCertificates { get; set; }

        /// <summary>
        /// Gets or sets list of TLS certificates used to authorize gossip from
        /// unmanaged data centers. The TLS certificates of all nodes in
        /// unmanaged data centers must be verifiable using one of the
        /// certificates provided in this property.
        /// </summary>
        [JsonProperty(PropertyName = "externalGossipCertificates")]
        public IList<Certificate> ExternalGossipCertificates { get; set; }

        /// <summary>
        /// Gets list of TLS certificates that unmanaged nodes must trust for
        /// gossip with managed nodes. All managed nodes will present TLS
        /// client certificates that are verifiable using one of the
        /// certificates provided in this property.
        /// </summary>
        [JsonProperty(PropertyName = "gossipCertificates")]
        public IList<Certificate> GossipCertificates { get; private set; }

        /// <summary>
        /// Gets or sets list of IP addresses of seed nodes in unmanaged data
        /// centers. These will be added to the seed node lists of all managed
        /// nodes.
        /// </summary>
        [JsonProperty(PropertyName = "externalSeedNodes")]
        public IList<SeedNode> ExternalSeedNodes { get; set; }

        /// <summary>
        /// Gets list of IP addresses of seed nodes in the managed data
        /// centers. These should be added to the seed node lists of all
        /// unmanaged nodes.
        /// </summary>
        [JsonProperty(PropertyName = "seedNodes")]
        public IList<SeedNode> SeedNodes { get; private set; }

    }
}
