// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ClusterNodeStatusNodesItem
    {
        /// <summary>
        /// Initializes a new instance of the ClusterNodeStatusNodesItem class.
        /// </summary>
        public ClusterNodeStatusNodesItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterNodeStatusNodesItem class.
        /// </summary>
        /// <param name="datacenter">The Cassandra data center this node
        /// resides in.</param>
        /// <param name="status">Indicates whether the node is functioning or
        /// not. Possible values include: 'Up', 'Down'</param>
        /// <param name="state">The state of the node in relation to the
        /// cluster. Possible values include: 'Normal', 'Leaving', 'Joining',
        /// 'Moving', 'Stopped'</param>
        /// <param name="address">The node's URL.</param>
        /// <param name="load">The amount of file system data in the data
        /// directory (e.g., 47.66 KB), excluding all content in the snapshots
        /// subdirectories. Because all SSTable data files are included, any
        /// data that is not cleaned up (such as TTL-expired cell or tombstoned
        /// data) is counted.</param>
        /// <param name="tokens">List of tokens.</param>
        /// <param name="owns">The percentage of the data owned by the node per
        /// datacenter times the replication factor (e.g., 33.3, or null if the
        /// data is not available). For example, a node can own 33% of the
        /// ring, but shows 100% if the replication factor is 3. For non-system
        /// keyspaces, the endpoint percentage ownership information is
        /// shown.</param>
        /// <param name="hostId">The network ID of the node.</param>
        /// <param name="rack">The rack this node is part of.</param>
        public ClusterNodeStatusNodesItem(string datacenter = default(string), string status = default(string), string state = default(string), string address = default(string), string load = default(string), IList<string> tokens = default(IList<string>), double? owns = default(double?), string hostId = default(string), string rack = default(string))
        {
            Datacenter = datacenter;
            Status = status;
            State = state;
            Address = address;
            Load = load;
            Tokens = tokens;
            Owns = owns;
            HostId = hostId;
            Rack = rack;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Cassandra data center this node resides in.
        /// </summary>
        [JsonProperty(PropertyName = "datacenter")]
        public string Datacenter { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the node is functioning or not.
        /// Possible values include: 'Up', 'Down'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the state of the node in relation to the cluster.
        /// Possible values include: 'Normal', 'Leaving', 'Joining', 'Moving',
        /// 'Stopped'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the node's URL.
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets the amount of file system data in the data directory
        /// (e.g., 47.66 KB), excluding all content in the snapshots
        /// subdirectories. Because all SSTable data files are included, any
        /// data that is not cleaned up (such as TTL-expired cell or tombstoned
        /// data) is counted.
        /// </summary>
        [JsonProperty(PropertyName = "load")]
        public string Load { get; set; }

        /// <summary>
        /// Gets or sets list of tokens.
        /// </summary>
        [JsonProperty(PropertyName = "tokens")]
        public IList<string> Tokens { get; set; }

        /// <summary>
        /// Gets or sets the percentage of the data owned by the node per
        /// datacenter times the replication factor (e.g., 33.3, or null if the
        /// data is not available). For example, a node can own 33% of the
        /// ring, but shows 100% if the replication factor is 3. For non-system
        /// keyspaces, the endpoint percentage ownership information is shown.
        /// </summary>
        [JsonProperty(PropertyName = "owns")]
        public double? Owns { get; set; }

        /// <summary>
        /// Gets or sets the network ID of the node.
        /// </summary>
        [JsonProperty(PropertyName = "hostId")]
        public string HostId { get; set; }

        /// <summary>
        /// Gets or sets the rack this node is part of.
        /// </summary>
        [JsonProperty(PropertyName = "rack")]
        public string Rack { get; set; }

    }
}
