// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Indicates the download type. </summary>
    public readonly partial struct DownloadType : IEquatable<DownloadType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DownloadType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DownloadType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ComplianceReportValue = "ComplianceReport";
        private const string CompliancePdfReportValue = "CompliancePdfReport";
        private const string ComplianceDetailedPdfReportValue = "ComplianceDetailedPdfReport";
        private const string ResourceListValue = "ResourceList";

        /// <summary> ComplianceReport. </summary>
        public static DownloadType ComplianceReport { get; } = new DownloadType(ComplianceReportValue);
        /// <summary> CompliancePdfReport. </summary>
        public static DownloadType CompliancePdfReport { get; } = new DownloadType(CompliancePdfReportValue);
        /// <summary> ComplianceDetailedPdfReport. </summary>
        public static DownloadType ComplianceDetailedPdfReport { get; } = new DownloadType(ComplianceDetailedPdfReportValue);
        /// <summary> ResourceList. </summary>
        public static DownloadType ResourceList { get; } = new DownloadType(ResourceListValue);
        /// <summary> Determines if two <see cref="DownloadType"/> values are the same. </summary>
        public static bool operator ==(DownloadType left, DownloadType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DownloadType"/> values are not the same. </summary>
        public static bool operator !=(DownloadType left, DownloadType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DownloadType"/>. </summary>
        public static implicit operator DownloadType(string value) => new DownloadType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DownloadType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DownloadType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
