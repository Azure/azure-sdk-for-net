// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Indicates the assessment severity. </summary>
    public readonly partial struct AssessmentSeverity : IEquatable<AssessmentSeverity>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AssessmentSeverity"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AssessmentSeverity(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HighValue = "High";
        private const string MediumValue = "Medium";
        private const string LowValue = "Low";

        /// <summary> High. </summary>
        public static AssessmentSeverity High { get; } = new AssessmentSeverity(HighValue);
        /// <summary> Medium. </summary>
        public static AssessmentSeverity Medium { get; } = new AssessmentSeverity(MediumValue);
        /// <summary> Low. </summary>
        public static AssessmentSeverity Low { get; } = new AssessmentSeverity(LowValue);
        /// <summary> Determines if two <see cref="AssessmentSeverity"/> values are the same. </summary>
        public static bool operator ==(AssessmentSeverity left, AssessmentSeverity right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AssessmentSeverity"/> values are not the same. </summary>
        public static bool operator !=(AssessmentSeverity left, AssessmentSeverity right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AssessmentSeverity"/>. </summary>
        public static implicit operator AssessmentSeverity(string value) => new AssessmentSeverity(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AssessmentSeverity other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AssessmentSeverity other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
