// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Resource Origin. </summary>
    public readonly partial struct ResourceOrigin : IEquatable<ResourceOrigin>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceOrigin"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceOrigin(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureValue = "Azure";
        private const string AWSValue = "AWS";
        private const string GCPValue = "GCP";

        /// <summary> The resource is from Azure. </summary>
        public static ResourceOrigin Azure { get; } = new ResourceOrigin(AzureValue);
        /// <summary> The resource is from AWS. </summary>
        public static ResourceOrigin AWS { get; } = new ResourceOrigin(AWSValue);
        /// <summary> The resource is from GCP. </summary>
        public static ResourceOrigin GCP { get; } = new ResourceOrigin(GCPValue);
        /// <summary> Determines if two <see cref="ResourceOrigin"/> values are the same. </summary>
        public static bool operator ==(ResourceOrigin left, ResourceOrigin right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceOrigin"/> values are not the same. </summary>
        public static bool operator !=(ResourceOrigin left, ResourceOrigin right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResourceOrigin"/>. </summary>
        public static implicit operator ResourceOrigin(string value) => new ResourceOrigin(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceOrigin other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceOrigin other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
