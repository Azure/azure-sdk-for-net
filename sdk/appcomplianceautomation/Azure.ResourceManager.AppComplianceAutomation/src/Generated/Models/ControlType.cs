// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Indicates the control type. </summary>
    public readonly partial struct ControlType : IEquatable<ControlType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ControlType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ControlType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FullyAutomatedValue = "FullyAutomated";
        private const string PartiallyAutomatedValue = "PartiallyAutomated";
        private const string ManualValue = "Manual";

        /// <summary> FullyAutomated. </summary>
        public static ControlType FullyAutomated { get; } = new ControlType(FullyAutomatedValue);
        /// <summary> PartiallyAutomated. </summary>
        public static ControlType PartiallyAutomated { get; } = new ControlType(PartiallyAutomatedValue);
        /// <summary> Manual. </summary>
        public static ControlType Manual { get; } = new ControlType(ManualValue);
        /// <summary> Determines if two <see cref="ControlType"/> values are the same. </summary>
        public static bool operator ==(ControlType left, ControlType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ControlType"/> values are not the same. </summary>
        public static bool operator !=(ControlType left, ControlType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ControlType"/>. </summary>
        public static implicit operator ControlType(string value) => new ControlType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ControlType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ControlType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
