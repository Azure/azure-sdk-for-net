// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> A class represent the control. </summary>
    public partial class Control
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="Control"/>. </summary>
        internal Control()
        {
            Assessments = new ChangeTrackingList<Assessment>();
        }

        /// <summary> Initializes a new instance of <see cref="Control"/>. </summary>
        /// <param name="controlId"> The Id of the control. e.g. "Operational Security#10". </param>
        /// <param name="controlShortName"> The short name of the control. e.g. "Unsupported OS and Software.". </param>
        /// <param name="controlFullName"> The full name of the control. e.g. "Validate that unsupported operating systems and software components are not in use.". </param>
        /// <param name="controlType"> The control type. </param>
        /// <param name="controlDescription"> The control's description. </param>
        /// <param name="controlDescriptionHyperLink"> The hyper link to the control's description'. </param>
        /// <param name="controlStatus"> Control status. </param>
        /// <param name="assessments"> List of assessments. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal Control(string controlId, string controlShortName, string controlFullName, ControlType? controlType, string controlDescription, string controlDescriptionHyperLink, ControlStatus? controlStatus, IReadOnlyList<Assessment> assessments, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ControlId = controlId;
            ControlShortName = controlShortName;
            ControlFullName = controlFullName;
            ControlType = controlType;
            ControlDescription = controlDescription;
            ControlDescriptionHyperLink = controlDescriptionHyperLink;
            ControlStatus = controlStatus;
            Assessments = assessments;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The Id of the control. e.g. "Operational Security#10". </summary>
        public string ControlId { get; }
        /// <summary> The short name of the control. e.g. "Unsupported OS and Software.". </summary>
        public string ControlShortName { get; }
        /// <summary> The full name of the control. e.g. "Validate that unsupported operating systems and software components are not in use.". </summary>
        public string ControlFullName { get; }
        /// <summary> The control type. </summary>
        public ControlType? ControlType { get; }
        /// <summary> The control's description. </summary>
        public string ControlDescription { get; }
        /// <summary> The hyper link to the control's description'. </summary>
        public string ControlDescriptionHyperLink { get; }
        /// <summary> Control status. </summary>
        public ControlStatus? ControlStatus { get; }
        /// <summary> List of assessments. </summary>
        public IReadOnlyList<Assessment> Assessments { get; }
    }
}
