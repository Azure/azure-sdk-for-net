// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Evidence type. </summary>
    public readonly partial struct EvidenceType : IEquatable<EvidenceType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EvidenceType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EvidenceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FileValue = "File";
        private const string AutoCollectedEvidenceValue = "AutoCollectedEvidence";
        private const string DataValue = "Data";

        /// <summary> The evidence is a file. </summary>
        public static EvidenceType File { get; } = new EvidenceType(FileValue);
        /// <summary> The evidence auto collected by App Compliance Automation. </summary>
        public static EvidenceType AutoCollectedEvidence { get; } = new EvidenceType(AutoCollectedEvidenceValue);
        /// <summary> The evidence is data. </summary>
        public static EvidenceType Data { get; } = new EvidenceType(DataValue);
        /// <summary> Determines if two <see cref="EvidenceType"/> values are the same. </summary>
        public static bool operator ==(EvidenceType left, EvidenceType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EvidenceType"/> values are not the same. </summary>
        public static bool operator !=(EvidenceType left, EvidenceType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EvidenceType"/>. </summary>
        public static implicit operator EvidenceType(string value) => new EvidenceType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EvidenceType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EvidenceType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
