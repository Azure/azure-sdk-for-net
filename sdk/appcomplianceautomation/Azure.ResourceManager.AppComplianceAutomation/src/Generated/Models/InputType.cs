// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Question input type. </summary>
    public readonly partial struct InputType : IEquatable<InputType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="InputType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public InputType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string TextValue = "Text";
        private const string EmailValue = "Email";
        private const string MultilineTextValue = "MultilineText";
        private const string UrlValue = "Url";
        private const string NumberValue = "Number";
        private const string BooleanValue = "Boolean";
        private const string TelephoneValue = "Telephone";
        private const string YesNoNaValue = "YesNoNa";
        private const string DateValue = "Date";
        private const string YearPickerValue = "YearPicker";
        private const string SingleSelectionValue = "SingleSelection";
        private const string SingleSelectDropdownValue = "SingleSelectDropdown";
        private const string MultiSelectCheckboxValue = "MultiSelectCheckbox";
        private const string MultiSelectDropdownValue = "MultiSelectDropdown";
        private const string MultiSelectDropdownCustomValue = "MultiSelectDropdownCustom";
        private const string GroupValue = "Group";
        private const string UploadValue = "Upload";

        /// <summary> The input type is a text box. </summary>
        public static InputType None { get; } = new InputType(NoneValue);
        /// <summary> The input content is text string. </summary>
        public static InputType Text { get; } = new InputType(TextValue);
        /// <summary> The input content should be an email address. </summary>
        public static InputType Email { get; } = new InputType(EmailValue);
        /// <summary> The input content should be multiline text. </summary>
        public static InputType MultilineText { get; } = new InputType(MultilineTextValue);
        /// <summary> The input content should be a URL. </summary>
        public static InputType Url { get; } = new InputType(UrlValue);
        /// <summary> The input content should be a number. </summary>
        public static InputType Number { get; } = new InputType(NumberValue);
        /// <summary> The input content should be a boolean. </summary>
        public static InputType Boolean { get; } = new InputType(BooleanValue);
        /// <summary> The input content should be a telephone number. </summary>
        public static InputType Telephone { get; } = new InputType(TelephoneValue);
        /// <summary> The input content should be Yes, No or Na. </summary>
        public static InputType YesNoNa { get; } = new InputType(YesNoNaValue);
        /// <summary> The input content should be a date. </summary>
        public static InputType Date { get; } = new InputType(DateValue);
        /// <summary> The input content is a Year, pick from the dropdown list. </summary>
        public static InputType YearPicker { get; } = new InputType(YearPickerValue);
        /// <summary> The input content is a single result seleted from the options. </summary>
        public static InputType SingleSelection { get; } = new InputType(SingleSelectionValue);
        /// <summary> The input content is a single result seleted from the dropdown options. </summary>
        public static InputType SingleSelectDropdown { get; } = new InputType(SingleSelectDropdownValue);
        /// <summary> The input content are multiple results seleted from the checkboxes. </summary>
        public static InputType MultiSelectCheckbox { get; } = new InputType(MultiSelectCheckboxValue);
        /// <summary> The input content are multiple results seleted from the dropdown options. </summary>
        public static InputType MultiSelectDropdown { get; } = new InputType(MultiSelectDropdownValue);
        /// <summary> The input content are result seleted from the custom dropdown options. </summary>
        public static InputType MultiSelectDropdownCustom { get; } = new InputType(MultiSelectDropdownCustomValue);
        /// <summary> The input content is a group of answers. </summary>
        public static InputType Group { get; } = new InputType(GroupValue);
        /// <summary> The input content is a uploaded file. </summary>
        public static InputType Upload { get; } = new InputType(UploadValue);
        /// <summary> Determines if two <see cref="InputType"/> values are the same. </summary>
        public static bool operator ==(InputType left, InputType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="InputType"/> values are not the same. </summary>
        public static bool operator !=(InputType left, InputType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="InputType"/>. </summary>
        public static implicit operator InputType(string value) => new InputType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InputType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(InputType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
