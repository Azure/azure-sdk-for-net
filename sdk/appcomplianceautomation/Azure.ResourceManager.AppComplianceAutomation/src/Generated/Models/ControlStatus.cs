// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Indicates the control status. </summary>
    public readonly partial struct ControlStatus : IEquatable<ControlStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ControlStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ControlStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PassedValue = "Passed";
        private const string FailedValue = "Failed";
        private const string NotApplicableValue = "NotApplicable";

        /// <summary> Passed. </summary>
        public static ControlStatus Passed { get; } = new ControlStatus(PassedValue);
        /// <summary> Failed. </summary>
        public static ControlStatus Failed { get; } = new ControlStatus(FailedValue);
        /// <summary> NotApplicable. </summary>
        public static ControlStatus NotApplicable { get; } = new ControlStatus(NotApplicableValue);
        /// <summary> Determines if two <see cref="ControlStatus"/> values are the same. </summary>
        public static bool operator ==(ControlStatus left, ControlStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ControlStatus"/> values are not the same. </summary>
        public static bool operator !=(ControlStatus left, ControlStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ControlStatus"/>. </summary>
        public static implicit operator ControlStatus(string value) => new ControlStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ControlStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ControlStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
