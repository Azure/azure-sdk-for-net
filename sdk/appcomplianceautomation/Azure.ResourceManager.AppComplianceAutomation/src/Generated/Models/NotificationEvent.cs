// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> notification event. </summary>
    public readonly partial struct NotificationEvent : IEquatable<NotificationEvent>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NotificationEvent"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NotificationEvent(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GenerateSnapshotSuccessValue = "generate_snapshot_success";
        private const string GenerateSnapshotFailedValue = "generate_snapshot_failed";
        private const string AssessmentFailureValue = "assessment_failure";
        private const string ReportConfigurationChangesValue = "report_configuration_changes";
        private const string ReportDeletionValue = "report_deletion";

        /// <summary> The subscribed report's snapshot is successfully generated. </summary>
        public static NotificationEvent GenerateSnapshotSuccess { get; } = new NotificationEvent(GenerateSnapshotSuccessValue);
        /// <summary> The subscribed report's snapshot is failed to generate. </summary>
        public static NotificationEvent GenerateSnapshotFailed { get; } = new NotificationEvent(GenerateSnapshotFailedValue);
        /// <summary> The subscribed report failed while collecting the assessments. </summary>
        public static NotificationEvent AssessmentFailure { get; } = new NotificationEvent(AssessmentFailureValue);
        /// <summary> The subscribed report's configuration is changed. </summary>
        public static NotificationEvent ReportConfigurationChanges { get; } = new NotificationEvent(ReportConfigurationChangesValue);
        /// <summary> The subscribed report is deleted. </summary>
        public static NotificationEvent ReportDeletion { get; } = new NotificationEvent(ReportDeletionValue);
        /// <summary> Determines if two <see cref="NotificationEvent"/> values are the same. </summary>
        public static bool operator ==(NotificationEvent left, NotificationEvent right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NotificationEvent"/> values are not the same. </summary>
        public static bool operator !=(NotificationEvent left, NotificationEvent right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NotificationEvent"/>. </summary>
        public static implicit operator NotificationEvent(string value) => new NotificationEvent(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NotificationEvent other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NotificationEvent other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
