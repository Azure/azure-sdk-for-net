// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    public partial class Assessment
    {
        internal static Assessment DeserializeAssessment(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> name = default;
            Core.Optional<AssessmentSeverity> severity = default;
            Core.Optional<string> description = default;
            Core.Optional<string> remediation = default;
            Core.Optional<IsPass> isPass = default;
            Core.Optional<string> policyId = default;
            Core.Optional<IReadOnlyList<AssessmentResource>> resourceList = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("severity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    severity = new AssessmentSeverity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remediation"u8))
                {
                    remediation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isPass"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isPass = new IsPass(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("policyId"u8))
                {
                    policyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AssessmentResource> array = new List<AssessmentResource>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AssessmentResource.DeserializeAssessmentResource(item));
                    }
                    resourceList = array;
                    continue;
                }
            }
            return new Assessment(name.Value, Core.Optional.ToNullable(severity), description.Value, remediation.Value, Core.Optional.ToNullable(isPass), policyId.Value, Core.Optional.ToList(resourceList));
        }
    }
}
