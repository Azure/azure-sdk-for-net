// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Scoping question rule. </summary>
    public readonly partial struct Rule : IEquatable<Rule>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Rule"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Rule(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RequiredValue = "Required";
        private const string CharLengthValue = "CharLength";
        private const string UrlValue = "Url";
        private const string UrlsValue = "Urls";
        private const string DomainsValue = "Domains";
        private const string USPrivacyShieldValue = "USPrivacyShield";
        private const string PublicSOXValue = "PublicSOX";
        private const string CreditCardPCIValue = "CreditCardPCI";
        private const string AzureApplicationValue = "AzureApplication";
        private const string ValidGuidValue = "ValidGuid";
        private const string PublisherVerificationValue = "PublisherVerification";
        private const string DynamicDropdownValue = "DynamicDropdown";
        private const string PreventNonEnglishCharValue = "PreventNonEnglishChar";
        private const string ValidEmailValue = "ValidEmail";

        /// <summary> The question is required to answer. </summary>
        public static Rule Required { get; } = new Rule(RequiredValue);
        /// <summary> The question answer length is limited. </summary>
        public static Rule CharLength { get; } = new Rule(CharLengthValue);
        /// <summary> The question answer should be an Url. </summary>
        public static Rule Url { get; } = new Rule(UrlValue);
        /// <summary> The question answer should be Urls. </summary>
        public static Rule Urls { get; } = new Rule(UrlsValue);
        /// <summary> The question answer should be domains. </summary>
        public static Rule Domains { get; } = new Rule(DomainsValue);
        /// <summary> The question answer should be a UsPrivacyShield. </summary>
        public static Rule USPrivacyShield { get; } = new Rule(USPrivacyShieldValue);
        /// <summary> The question answer should be a PublicSOX. </summary>
        public static Rule PublicSOX { get; } = new Rule(PublicSOXValue);
        /// <summary> The question answer should be a CreditCardPCI. </summary>
        public static Rule CreditCardPCI { get; } = new Rule(CreditCardPCIValue);
        /// <summary> The question answer should be an AzureApplication. </summary>
        public static Rule AzureApplication { get; } = new Rule(AzureApplicationValue);
        /// <summary> The question answer should be a valid guid. </summary>
        public static Rule ValidGuid { get; } = new Rule(ValidGuidValue);
        /// <summary> The question answer should be publisher verification. </summary>
        public static Rule PublisherVerification { get; } = new Rule(PublisherVerificationValue);
        /// <summary> The question answer should be dynamic dropdown. </summary>
        public static Rule DynamicDropdown { get; } = new Rule(DynamicDropdownValue);
        /// <summary> The question answer should prevent non-english char. </summary>
        public static Rule PreventNonEnglishChar { get; } = new Rule(PreventNonEnglishCharValue);
        /// <summary> The question answer should be a valid email. </summary>
        public static Rule ValidEmail { get; } = new Rule(ValidEmailValue);
        /// <summary> Determines if two <see cref="Rule"/> values are the same. </summary>
        public static bool operator ==(Rule left, Rule right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Rule"/> values are not the same. </summary>
        public static bool operator !=(Rule left, Rule right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Rule"/>. </summary>
        public static implicit operator Rule(string value) => new Rule(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Rule other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Rule other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
