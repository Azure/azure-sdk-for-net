// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.AppComplianceAutomation;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmAppComplianceAutomationModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="AppComplianceAutomation.ReportResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Report property. </param>
        /// <returns> A new <see cref="AppComplianceAutomation.ReportResourceData"/> instance for mocking. </returns>
        public static ReportResourceData ReportResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ReportProperties properties = null)
        {
            return new ReportResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReportProperties"/>. </summary>
        /// <param name="id"> Report id in database. </param>
        /// <param name="status"> Report status. </param>
        /// <param name="tenantId"> Report's tenant id. </param>
        /// <param name="reportName"> Report name. </param>
        /// <param name="offerGuid"> Report offer Guid. </param>
        /// <param name="timeZone">
        /// Report collection trigger time's time zone, the available list can be obtained by executing "Get-TimeZone -ListAvailable" in PowerShell.
        /// An example of valid timezone id is "Pacific Standard Time".
        /// </param>
        /// <param name="triggerOn"> Report collection trigger time. </param>
        /// <param name="nextTriggerOn"> Report next collection trigger time. </param>
        /// <param name="lastTriggerOn"> Report last collection trigger time. </param>
        /// <param name="subscriptions"> List of subscription Ids. </param>
        /// <param name="resources"> List of resource data. </param>
        /// <param name="complianceStatusM365"> Report compliance status. </param>
        /// <param name="provisioningState"> Azure lifecycle management. </param>
        /// <returns> A new <see cref="Models.ReportProperties"/> instance for mocking. </returns>
        public static ReportProperties ReportProperties(string id = null, ReportStatus? status = null, Guid? tenantId = null, string reportName = null, string offerGuid = null, string timeZone = null, DateTimeOffset triggerOn = default, DateTimeOffset? nextTriggerOn = null, DateTimeOffset? lastTriggerOn = null, IEnumerable<string> subscriptions = null, IEnumerable<ResourceMetadata> resources = null, OverviewStatus complianceStatusM365 = null, ProvisioningState? provisioningState = null)
        {
            subscriptions ??= new List<string>();
            resources ??= new List<ResourceMetadata>();

            return new ReportProperties(id, status, tenantId, reportName, offerGuid, timeZone, triggerOn, nextTriggerOn, lastTriggerOn, subscriptions?.ToList(), resources?.ToList(), complianceStatusM365 != null ? new ReportComplianceStatus(complianceStatusM365) : null, provisioningState);
        }

        /// <summary> Initializes a new instance of <see cref="Models.OverviewStatus"/>. </summary>
        /// <param name="passedCount"> The count of all passed full automation control. </param>
        /// <param name="failedCount"> The count of all failed full automation control. </param>
        /// <param name="manualCount"> The count of all manual control. </param>
        /// <returns> A new <see cref="Models.OverviewStatus"/> instance for mocking. </returns>
        public static OverviewStatus OverviewStatus(int? passedCount = null, int? failedCount = null, int? manualCount = null)
        {
            return new OverviewStatus(passedCount, failedCount, manualCount);
        }

        /// <summary> Initializes a new instance of <see cref="AppComplianceAutomation.SnapshotResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> Snapshot's property'. </param>
        /// <returns> A new <see cref="AppComplianceAutomation.SnapshotResourceData"/> instance for mocking. </returns>
        public static SnapshotResourceData SnapshotResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SnapshotProperties properties = null)
        {
            return new SnapshotResourceData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SnapshotProperties"/>. </summary>
        /// <param name="id"> Snapshot id in the database. </param>
        /// <param name="snapshotName"> Snapshot name. </param>
        /// <param name="createdOn"> The timestamp of resource creation (UTC). </param>
        /// <param name="provisioningState"> Azure lifecycle management. </param>
        /// <param name="reportProperties"> The report essential info. </param>
        /// <param name="reportSystemData"> Metadata pertaining to creation and last modification of the resource. </param>
        /// <param name="complianceResults"> List of compliance results. </param>
        /// <returns> A new <see cref="Models.SnapshotProperties"/> instance for mocking. </returns>
        public static SnapshotProperties SnapshotProperties(string id = null, string snapshotName = null, DateTimeOffset? createdOn = null, ProvisioningState? provisioningState = null, ReportProperties reportProperties = null, SystemData reportSystemData = null, IEnumerable<ComplianceResult> complianceResults = null)
        {
            complianceResults ??= new List<ComplianceResult>();

            return new SnapshotProperties(id, snapshotName, createdOn, provisioningState, reportProperties, reportSystemData, complianceResults?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComplianceResult"/>. </summary>
        /// <param name="complianceName"> The name of the compliance. e.g. "M365". </param>
        /// <param name="categories"> List of categories. </param>
        /// <returns> A new <see cref="Models.ComplianceResult"/> instance for mocking. </returns>
        public static ComplianceResult ComplianceResult(string complianceName = null, IEnumerable<Category> categories = null)
        {
            categories ??= new List<Category>();

            return new ComplianceResult(complianceName, categories?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Category"/>. </summary>
        /// <param name="categoryName"> The name of the compliance category. e.g. "Operational Security". </param>
        /// <param name="categoryType"> The category type. </param>
        /// <param name="categoryStatus"> Category status. </param>
        /// <param name="controlFamilies"> List of control families. </param>
        /// <returns> A new <see cref="Models.Category"/> instance for mocking. </returns>
        public static Category Category(string categoryName = null, CategoryType? categoryType = null, CategoryStatus? categoryStatus = null, IEnumerable<ControlFamily> controlFamilies = null)
        {
            controlFamilies ??= new List<ControlFamily>();

            return new Category(categoryName, categoryType, categoryStatus, controlFamilies?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ControlFamily"/>. </summary>
        /// <param name="familyName"> The name of the control family. e.g. "Malware Protection - Anti-Virus". </param>
        /// <param name="familyType"> The control family type. </param>
        /// <param name="familyStatus"> Control family status. </param>
        /// <param name="controls"> List of controls. </param>
        /// <returns> A new <see cref="Models.ControlFamily"/> instance for mocking. </returns>
        public static ControlFamily ControlFamily(string familyName = null, ControlFamilyType? familyType = null, ControlFamilyStatus? familyStatus = null, IEnumerable<Control> controls = null)
        {
            controls ??= new List<Control>();

            return new ControlFamily(familyName, familyType, familyStatus, controls?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Control"/>. </summary>
        /// <param name="controlId"> The Id of the control. e.g. "Operational Security#10". </param>
        /// <param name="controlShortName"> The short name of the control. e.g. "Unsupported OS and Software.". </param>
        /// <param name="controlFullName"> The full name of the control. e.g. "Validate that unsupported operating systems and software components are not in use.". </param>
        /// <param name="controlType"> The control type. </param>
        /// <param name="controlDescription"> The control's description. </param>
        /// <param name="controlDescriptionHyperLink"> The hyper link to the control's description'. </param>
        /// <param name="controlStatus"> Control status. </param>
        /// <param name="assessments"> List of assessments. </param>
        /// <returns> A new <see cref="Models.Control"/> instance for mocking. </returns>
        public static Control Control(string controlId = null, string controlShortName = null, string controlFullName = null, ControlType? controlType = null, string controlDescription = null, string controlDescriptionHyperLink = null, ControlStatus? controlStatus = null, IEnumerable<Assessment> assessments = null)
        {
            assessments ??= new List<Assessment>();

            return new Control(controlId, controlShortName, controlFullName, controlType, controlDescription, controlDescriptionHyperLink, controlStatus, assessments?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Assessment"/>. </summary>
        /// <param name="name"> The name of the assessment. </param>
        /// <param name="severity"> The severity level of this assessment. </param>
        /// <param name="description"> The description of the assessment. </param>
        /// <param name="remediation"> The remediation of the assessment. </param>
        /// <param name="isPass"> Indicates whether all the resource(s) are compliant. </param>
        /// <param name="policyId"> The policy id mapping to this assessment. </param>
        /// <param name="resourceList"> List of resource assessments. </param>
        /// <returns> A new <see cref="Models.Assessment"/> instance for mocking. </returns>
        public static Assessment Assessment(string name = null, AssessmentSeverity? severity = null, string description = null, string remediation = null, IsPass? isPass = null, string policyId = null, IEnumerable<AssessmentResourceContent> resourceList = null)
        {
            resourceList ??= new List<AssessmentResourceContent>();

            return new Assessment(name, severity, description, remediation, isPass, policyId, resourceList?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AssessmentResourceContent"/>. </summary>
        /// <param name="resourceId"> The Id of the resource. </param>
        /// <param name="resourceStatus"> Resource status. </param>
        /// <param name="reason"> The reason for the N/A resource. </param>
        /// <param name="statusChangeDate"> The status change date for the resource. For unavailable date, set it as N/A. </param>
        /// <returns> A new <see cref="Models.AssessmentResourceContent"/> instance for mocking. </returns>
        public static AssessmentResourceContent AssessmentResourceContent(string resourceId = null, ResourceStatus? resourceStatus = null, string reason = null, string statusChangeDate = null)
        {
            return new AssessmentResourceContent(resourceId, resourceStatus, reason, statusChangeDate);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DownloadResponse"/>. </summary>
        /// <param name="resourceList"> List of the reports. </param>
        /// <param name="complianceReport"> List of the compliance result. </param>
        /// <param name="compliancePdfReportSasUri"> compliance pdf report. </param>
        /// <param name="complianceDetailedPdfReportSasUri"> compliance detailed pdf report. </param>
        /// <returns> A new <see cref="Models.DownloadResponse"/> instance for mocking. </returns>
        public static DownloadResponse DownloadResponse(IEnumerable<ResourceItem> resourceList = null, IEnumerable<ComplianceReportItem> complianceReport = null, Uri compliancePdfReportSasUri = null, Uri complianceDetailedPdfReportSasUri = null)
        {
            resourceList ??= new List<ResourceItem>();
            complianceReport ??= new List<ComplianceReportItem>();

            return new DownloadResponse(resourceList?.ToList(), complianceReport?.ToList(), compliancePdfReportSasUri != null ? new DownloadResponseCompliancePdfReport(compliancePdfReportSasUri) : null, complianceDetailedPdfReportSasUri != null ? new DownloadResponseComplianceDetailedPdfReport(complianceDetailedPdfReportSasUri) : null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ResourceItem"/>. </summary>
        /// <param name="subscriptionId"> The subscription Id of this resource. </param>
        /// <param name="resourceGroup"> The resource group name of this resource. </param>
        /// <param name="resourceType"> The resource type of this resource. </param>
        /// <param name="resourceId"> The resource Id - e.g. "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1". </param>
        /// <returns> A new <see cref="Models.ResourceItem"/> instance for mocking. </returns>
        public static ResourceItem ResourceItem(string subscriptionId = null, string resourceGroup = null, string resourceType = null, string resourceId = null)
        {
            return new ResourceItem(subscriptionId, resourceGroup, resourceType, resourceId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComplianceReportItem"/>. </summary>
        /// <param name="categoryName"> The category name. </param>
        /// <param name="controlId"> The control Id - e.g. "1". </param>
        /// <param name="controlName"> The control name. </param>
        /// <param name="controlType"> The control type. </param>
        /// <param name="complianceState"> The compliance result's status. </param>
        /// <param name="policyId"> The compliance result mapped policy Id. </param>
        /// <param name="policyDisplayName"> The policy's display name. </param>
        /// <param name="policyDescription"> The policy's detail description. </param>
        /// <param name="subscriptionId"> The compliance result mapped subscription Id. </param>
        /// <param name="resourceGroup"> The compliance result mapped resource group. </param>
        /// <param name="resourceType"> The compliance result mapped resource type. </param>
        /// <param name="resourceId"> The compliance result mapped resource Id - e.g. "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/virtualMachines/vm1". </param>
        /// <param name="statusChangeDate"> The compliance result last changed date - e.g. "2022-10-24T02:55:16.3274379Z". For unavailable date, set it as "N/A". </param>
        /// <returns> A new <see cref="Models.ComplianceReportItem"/> instance for mocking. </returns>
        public static ComplianceReportItem ComplianceReportItem(string categoryName = null, string controlId = null, string controlName = null, ControlType? controlType = null, ComplianceState? complianceState = null, string policyId = null, string policyDisplayName = null, string policyDescription = null, string subscriptionId = null, string resourceGroup = null, string resourceType = null, string resourceId = null, string statusChangeDate = null)
        {
            return new ComplianceReportItem(categoryName, controlId, controlName, controlType, complianceState, policyId, policyDisplayName, policyDescription, subscriptionId, resourceGroup, resourceType, resourceId, statusChangeDate);
        }
    }
}
